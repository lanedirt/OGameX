/*! jQuery v1.12.4 | (c) jQuery Foundation | jquery.org/license */
!function(a,b){"object"==typeof module&&"object"==typeof module.exports?module.exports=a.document?b(a,!0):function(a){if(!a.document)throw new Error("jQuery requires a window with a document");return b(a)}:b(a)}("undefined"!=typeof window?window:this,function(a,b){var c=[],d=a.document,e=c.slice,f=c.concat,g=c.push,h=c.indexOf,i={},j=i.toString,k=i.hasOwnProperty,l={},m="1.12.4",n=function(a,b){return new n.fn.init(a,b)},o=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,p=/^-ms-/,q=/-([\da-z])/gi,r=function(a,b){return b.toUpperCase()};n.fn=n.prototype={jquery:m,constructor:n,selector:"",length:0,toArray:function(){return e.call(this)},get:function(a){return null!=a?0>a?this[a+this.length]:this[a]:e.call(this)},pushStack:function(a){var b=n.merge(this.constructor(),a);return b.prevObject=this,b.context=this.context,b},each:function(a){return n.each(this,a)},map:function(a){return this.pushStack(n.map(this,function(b,c){return a.call(b,c,b)}))},slice:function(){return this.pushStack(e.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(a){var b=this.length,c=+a+(0>a?b:0);return this.pushStack(c>=0&&b>c?[this[c]]:[])},end:function(){return this.prevObject||this.constructor()},push:g,sort:c.sort,splice:c.splice},n.extend=n.fn.extend=function(){var a,b,c,d,e,f,g=arguments[0]||{},h=1,i=arguments.length,j=!1;for("boolean"==typeof g&&(j=g,g=arguments[h]||{},h++),"object"==typeof g||n.isFunction(g)||(g={}),h===i&&(g=this,h--);i>h;h++)if(null!=(e=arguments[h]))for(d in e)a=g[d],c=e[d],g!==c&&(j&&c&&(n.isPlainObject(c)||(b=n.isArray(c)))?(b?(b=!1,f=a&&n.isArray(a)?a:[]):f=a&&n.isPlainObject(a)?a:{},g[d]=n.extend(j,f,c)):void 0!==c&&(g[d]=c));return g},n.extend({expando:"jQuery"+(m+Math.random()).replace(/\D/g,""),isReady:!0,error:function(a){throw new Error(a)},noop:function(){},isFunction:function(a){return"function"===n.type(a)},isArray:Array.isArray||function(a){return"array"===n.type(a)},isWindow:function(a){return null!=a&&a==a.window},isNumeric:function(a){var b=a&&a.toString();return!n.isArray(a)&&b-parseFloat(b)+1>=0},isEmptyObject:function(a){var b;for(b in a)return!1;return!0},isPlainObject:function(a){var b;if(!a||"object"!==n.type(a)||a.nodeType||n.isWindow(a))return!1;try{if(a.constructor&&!k.call(a,"constructor")&&!k.call(a.constructor.prototype,"isPrototypeOf"))return!1}catch(c){return!1}if(!l.ownFirst)for(b in a)return k.call(a,b);for(b in a);return void 0===b||k.call(a,b)},type:function(a){return null==a?a+"":"object"==typeof a||"function"==typeof a?i[j.call(a)]||"object":typeof a},globalEval:function(b){b&&n.trim(b)&&(a.execScript||function(b){a.eval.call(a,b)})(b)},camelCase:function(a){return a.replace(p,"ms-").replace(q,r)},nodeName:function(a,b){return a.nodeName&&a.nodeName.toLowerCase()===b.toLowerCase()},each:function(a,b){var c,d=0;if(s(a)){for(c=a.length;c>d;d++)if(b.call(a[d],d,a[d])===!1)break}else for(d in a)if(b.call(a[d],d,a[d])===!1)break;return a},trim:function(a){return null==a?"":(a+"").replace(o,"")},makeArray:function(a,b){var c=b||[];return null!=a&&(s(Object(a))?n.merge(c,"string"==typeof a?[a]:a):g.call(c,a)),c},inArray:function(a,b,c){var d;if(b){if(h)return h.call(b,a,c);for(d=b.length,c=c?0>c?Math.max(0,d+c):c:0;d>c;c++)if(c in b&&b[c]===a)return c}return-1},merge:function(a,b){var c=+b.length,d=0,e=a.length;while(c>d)a[e++]=b[d++];if(c!==c)while(void 0!==b[d])a[e++]=b[d++];return a.length=e,a},grep:function(a,b,c){for(var d,e=[],f=0,g=a.length,h=!c;g>f;f++)d=!b(a[f],f),d!==h&&e.push(a[f]);return e},map:function(a,b,c){var d,e,g=0,h=[];if(s(a))for(d=a.length;d>g;g++)e=b(a[g],g,c),null!=e&&h.push(e);else for(g in a)e=b(a[g],g,c),null!=e&&h.push(e);return f.apply([],h)},guid:1,proxy:function(a,b){var c,d,f;return"string"==typeof b&&(f=a[b],b=a,a=f),n.isFunction(a)?(c=e.call(arguments,2),d=function(){return a.apply(b||this,c.concat(e.call(arguments)))},d.guid=a.guid=a.guid||n.guid++,d):void 0},now:function(){return+new Date},support:l}),"function"==typeof Symbol&&(n.fn[Symbol.iterator]=c[Symbol.iterator]),n.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(a,b){i["[object "+b+"]"]=b.toLowerCase()});function s(a){var b=!!a&&"length"in a&&a.length,c=n.type(a);return"function"===c||n.isWindow(a)?!1:"array"===c||0===b||"number"==typeof b&&b>0&&b-1 in a}var t=function(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u="sizzle"+1*new Date,v=a.document,w=0,x=0,y=ga(),z=ga(),A=ga(),B=function(a,b){return a===b&&(l=!0),0},C=1<<31,D={}.hasOwnProperty,E=[],F=E.pop,G=E.push,H=E.push,I=E.slice,J=function(a,b){for(var c=0,d=a.length;d>c;c++)if(a[c]===b)return c;return-1},K="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",L="[\\x20\\t\\r\\n\\f]",M="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",N="\\["+L+"*("+M+")(?:"+L+"*([*^$|!~]?=)"+L+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+M+"))|)"+L+"*\\]",O=":("+M+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+N+")*)|.*)\\)|)",P=new RegExp(L+"+","g"),Q=new RegExp("^"+L+"+|((?:^|[^\\\\])(?:\\\\.)*)"+L+"+$","g"),R=new RegExp("^"+L+"*,"+L+"*"),S=new RegExp("^"+L+"*([>+~]|"+L+")"+L+"*"),T=new RegExp("="+L+"*([^\\]'\"]*?)"+L+"*\\]","g"),U=new RegExp(O),V=new RegExp("^"+M+"$"),W={ID:new RegExp("^#("+M+")"),CLASS:new RegExp("^\\.("+M+")"),TAG:new RegExp("^("+M+"|[*])"),ATTR:new RegExp("^"+N),PSEUDO:new RegExp("^"+O),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+L+"*(even|odd|(([+-]|)(\\d*)n|)"+L+"*(?:([+-]|)"+L+"*(\\d+)|))"+L+"*\\)|)","i"),bool:new RegExp("^(?:"+K+")$","i"),needsContext:new RegExp("^"+L+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+L+"*((?:-\\d)?\\d*)"+L+"*\\)|)(?=[^-]|$)","i")},X=/^(?:input|select|textarea|button)$/i,Y=/^h\d$/i,Z=/^[^{]+\{\s*\[native \w/,$=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,_=/[+~]/,aa=/'|\\/g,ba=new RegExp("\\\\([\\da-f]{1,6}"+L+"?|("+L+")|.)","ig"),ca=function(a,b,c){var d="0x"+b-65536;return d!==d||c?b:0>d?String.fromCharCode(d+65536):String.fromCharCode(d>>10|55296,1023&d|56320)},da=function(){m()};try{H.apply(E=I.call(v.childNodes),v.childNodes),E[v.childNodes.length].nodeType}catch(ea){H={apply:E.length?function(a,b){G.apply(a,I.call(b))}:function(a,b){var c=a.length,d=0;while(a[c++]=b[d++]);a.length=c-1}}}function fa(a,b,d,e){var f,h,j,k,l,o,r,s,w=b&&b.ownerDocument,x=b?b.nodeType:9;if(d=d||[],"string"!=typeof a||!a||1!==x&&9!==x&&11!==x)return d;if(!e&&((b?b.ownerDocument||b:v)!==n&&m(b),b=b||n,p)){if(11!==x&&(o=$.exec(a)))if(f=o[1]){if(9===x){if(!(j=b.getElementById(f)))return d;if(j.id===f)return d.push(j),d}else if(w&&(j=w.getElementById(f))&&t(b,j)&&j.id===f)return d.push(j),d}else{if(o[2])return H.apply(d,b.getElementsByTagName(a)),d;if((f=o[3])&&c.getElementsByClassName&&b.getElementsByClassName)return H.apply(d,b.getElementsByClassName(f)),d}if(c.qsa&&!A[a+" "]&&(!q||!q.test(a))){if(1!==x)w=b,s=a;else if("object"!==b.nodeName.toLowerCase()){(k=b.getAttribute("id"))?k=k.replace(aa,"\\$&"):b.setAttribute("id",k=u),r=g(a),h=r.length,l=V.test(k)?"#"+k:"[id='"+k+"']";while(h--)r[h]=l+" "+qa(r[h]);s=r.join(","),w=_.test(a)&&oa(b.parentNode)||b}if(s)try{return H.apply(d,w.querySelectorAll(s)),d}catch(y){}finally{k===u&&b.removeAttribute("id")}}}return i(a.replace(Q,"$1"),b,d,e)}function ga(){var a=[];function b(c,e){return a.push(c+" ")>d.cacheLength&&delete b[a.shift()],b[c+" "]=e}return b}function ha(a){return a[u]=!0,a}function ia(a){var b=n.createElement("div");try{return!!a(b)}catch(c){return!1}finally{b.parentNode&&b.parentNode.removeChild(b),b=null}}function ja(a,b){var c=a.split("|"),e=c.length;while(e--)d.attrHandle[c[e]]=b}function ka(a,b){var c=b&&a,d=c&&1===a.nodeType&&1===b.nodeType&&(~b.sourceIndex||C)-(~a.sourceIndex||C);if(d)return d;if(c)while(c=c.nextSibling)if(c===b)return-1;return a?1:-1}function la(a){return function(b){var c=b.nodeName.toLowerCase();return"input"===c&&b.type===a}}function ma(a){return function(b){var c=b.nodeName.toLowerCase();return("input"===c||"button"===c)&&b.type===a}}function na(a){return ha(function(b){return b=+b,ha(function(c,d){var e,f=a([],c.length,b),g=f.length;while(g--)c[e=f[g]]&&(c[e]=!(d[e]=c[e]))})})}function oa(a){return a&&"undefined"!=typeof a.getElementsByTagName&&a}c=fa.support={},f=fa.isXML=function(a){var b=a&&(a.ownerDocument||a).documentElement;return b?"HTML"!==b.nodeName:!1},m=fa.setDocument=function(a){var b,e,g=a?a.ownerDocument||a:v;return g!==n&&9===g.nodeType&&g.documentElement?(n=g,o=n.documentElement,p=!f(n),(e=n.defaultView)&&e.top!==e&&(e.addEventListener?e.addEventListener("unload",da,!1):e.attachEvent&&e.attachEvent("onunload",da)),c.attributes=ia(function(a){return a.className="i",!a.getAttribute("className")}),c.getElementsByTagName=ia(function(a){return a.appendChild(n.createComment("")),!a.getElementsByTagName("*").length}),c.getElementsByClassName=Z.test(n.getElementsByClassName),c.getById=ia(function(a){return o.appendChild(a).id=u,!n.getElementsByName||!n.getElementsByName(u).length}),c.getById?(d.find.ID=function(a,b){if("undefined"!=typeof b.getElementById&&p){var c=b.getElementById(a);return c?[c]:[]}},d.filter.ID=function(a){var b=a.replace(ba,ca);return function(a){return a.getAttribute("id")===b}}):(delete d.find.ID,d.filter.ID=function(a){var b=a.replace(ba,ca);return function(a){var c="undefined"!=typeof a.getAttributeNode&&a.getAttributeNode("id");return c&&c.value===b}}),d.find.TAG=c.getElementsByTagName?function(a,b){return"undefined"!=typeof b.getElementsByTagName?b.getElementsByTagName(a):c.qsa?b.querySelectorAll(a):void 0}:function(a,b){var c,d=[],e=0,f=b.getElementsByTagName(a);if("*"===a){while(c=f[e++])1===c.nodeType&&d.push(c);return d}return f},d.find.CLASS=c.getElementsByClassName&&function(a,b){return"undefined"!=typeof b.getElementsByClassName&&p?b.getElementsByClassName(a):void 0},r=[],q=[],(c.qsa=Z.test(n.querySelectorAll))&&(ia(function(a){o.appendChild(a).innerHTML="<a id='"+u+"'></a><select id='"+u+"-\r\\' msallowcapture=''><option selected=''></option></select>",a.querySelectorAll("[msallowcapture^='']").length&&q.push("[*^$]="+L+"*(?:''|\"\")"),a.querySelectorAll("[selected]").length||q.push("\\["+L+"*(?:value|"+K+")"),a.querySelectorAll("[id~="+u+"-]").length||q.push("~="),a.querySelectorAll(":checked").length||q.push(":checked"),a.querySelectorAll("a#"+u+"+*").length||q.push(".#.+[+~]")}),ia(function(a){var b=n.createElement("input");b.setAttribute("type","hidden"),a.appendChild(b).setAttribute("name","D"),a.querySelectorAll("[name=d]").length&&q.push("name"+L+"*[*^$|!~]?="),a.querySelectorAll(":enabled").length||q.push(":enabled",":disabled"),a.querySelectorAll("*,:x"),q.push(",.*:")})),(c.matchesSelector=Z.test(s=o.matches||o.webkitMatchesSelector||o.mozMatchesSelector||o.oMatchesSelector||o.msMatchesSelector))&&ia(function(a){c.disconnectedMatch=s.call(a,"div"),s.call(a,"[s!='']:x"),r.push("!=",O)}),q=q.length&&new RegExp(q.join("|")),r=r.length&&new RegExp(r.join("|")),b=Z.test(o.compareDocumentPosition),t=b||Z.test(o.contains)?function(a,b){var c=9===a.nodeType?a.documentElement:a,d=b&&b.parentNode;return a===d||!(!d||1!==d.nodeType||!(c.contains?c.contains(d):a.compareDocumentPosition&&16&a.compareDocumentPosition(d)))}:function(a,b){if(b)while(b=b.parentNode)if(b===a)return!0;return!1},B=b?function(a,b){if(a===b)return l=!0,0;var d=!a.compareDocumentPosition-!b.compareDocumentPosition;return d?d:(d=(a.ownerDocument||a)===(b.ownerDocument||b)?a.compareDocumentPosition(b):1,1&d||!c.sortDetached&&b.compareDocumentPosition(a)===d?a===n||a.ownerDocument===v&&t(v,a)?-1:b===n||b.ownerDocument===v&&t(v,b)?1:k?J(k,a)-J(k,b):0:4&d?-1:1)}:function(a,b){if(a===b)return l=!0,0;var c,d=0,e=a.parentNode,f=b.parentNode,g=[a],h=[b];if(!e||!f)return a===n?-1:b===n?1:e?-1:f?1:k?J(k,a)-J(k,b):0;if(e===f)return ka(a,b);c=a;while(c=c.parentNode)g.unshift(c);c=b;while(c=c.parentNode)h.unshift(c);while(g[d]===h[d])d++;return d?ka(g[d],h[d]):g[d]===v?-1:h[d]===v?1:0},n):n},fa.matches=function(a,b){return fa(a,null,null,b)},fa.matchesSelector=function(a,b){if((a.ownerDocument||a)!==n&&m(a),b=b.replace(T,"='$1']"),c.matchesSelector&&p&&!A[b+" "]&&(!r||!r.test(b))&&(!q||!q.test(b)))try{var d=s.call(a,b);if(d||c.disconnectedMatch||a.document&&11!==a.document.nodeType)return d}catch(e){}return fa(b,n,null,[a]).length>0},fa.contains=function(a,b){return(a.ownerDocument||a)!==n&&m(a),t(a,b)},fa.attr=function(a,b){(a.ownerDocument||a)!==n&&m(a);var e=d.attrHandle[b.toLowerCase()],f=e&&D.call(d.attrHandle,b.toLowerCase())?e(a,b,!p):void 0;return void 0!==f?f:c.attributes||!p?a.getAttribute(b):(f=a.getAttributeNode(b))&&f.specified?f.value:null},fa.error=function(a){throw new Error("Syntax error, unrecognized expression: "+a)},fa.uniqueSort=function(a){var b,d=[],e=0,f=0;if(l=!c.detectDuplicates,k=!c.sortStable&&a.slice(0),a.sort(B),l){while(b=a[f++])b===a[f]&&(e=d.push(f));while(e--)a.splice(d[e],1)}return k=null,a},e=fa.getText=function(a){var b,c="",d=0,f=a.nodeType;if(f){if(1===f||9===f||11===f){if("string"==typeof a.textContent)return a.textContent;for(a=a.firstChild;a;a=a.nextSibling)c+=e(a)}else if(3===f||4===f)return a.nodeValue}else while(b=a[d++])c+=e(b);return c},d=fa.selectors={cacheLength:50,createPseudo:ha,match:W,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(a){return a[1]=a[1].replace(ba,ca),a[3]=(a[3]||a[4]||a[5]||"").replace(ba,ca),"~="===a[2]&&(a[3]=" "+a[3]+" "),a.slice(0,4)},CHILD:function(a){return a[1]=a[1].toLowerCase(),"nth"===a[1].slice(0,3)?(a[3]||fa.error(a[0]),a[4]=+(a[4]?a[5]+(a[6]||1):2*("even"===a[3]||"odd"===a[3])),a[5]=+(a[7]+a[8]||"odd"===a[3])):a[3]&&fa.error(a[0]),a},PSEUDO:function(a){var b,c=!a[6]&&a[2];return W.CHILD.test(a[0])?null:(a[3]?a[2]=a[4]||a[5]||"":c&&U.test(c)&&(b=g(c,!0))&&(b=c.indexOf(")",c.length-b)-c.length)&&(a[0]=a[0].slice(0,b),a[2]=c.slice(0,b)),a.slice(0,3))}},filter:{TAG:function(a){var b=a.replace(ba,ca).toLowerCase();return"*"===a?function(){return!0}:function(a){return a.nodeName&&a.nodeName.toLowerCase()===b}},CLASS:function(a){var b=y[a+" "];return b||(b=new RegExp("(^|"+L+")"+a+"("+L+"|$)"))&&y(a,function(a){return b.test("string"==typeof a.className&&a.className||"undefined"!=typeof a.getAttribute&&a.getAttribute("class")||"")})},ATTR:function(a,b,c){return function(d){var e=fa.attr(d,a);return null==e?"!="===b:b?(e+="","="===b?e===c:"!="===b?e!==c:"^="===b?c&&0===e.indexOf(c):"*="===b?c&&e.indexOf(c)>-1:"$="===b?c&&e.slice(-c.length)===c:"~="===b?(" "+e.replace(P," ")+" ").indexOf(c)>-1:"|="===b?e===c||e.slice(0,c.length+1)===c+"-":!1):!0}},CHILD:function(a,b,c,d,e){var f="nth"!==a.slice(0,3),g="last"!==a.slice(-4),h="of-type"===b;return 1===d&&0===e?function(a){return!!a.parentNode}:function(b,c,i){var j,k,l,m,n,o,p=f!==g?"nextSibling":"previousSibling",q=b.parentNode,r=h&&b.nodeName.toLowerCase(),s=!i&&!h,t=!1;if(q){if(f){while(p){m=b;while(m=m[p])if(h?m.nodeName.toLowerCase()===r:1===m.nodeType)return!1;o=p="only"===a&&!o&&"nextSibling"}return!0}if(o=[g?q.firstChild:q.lastChild],g&&s){m=q,l=m[u]||(m[u]={}),k=l[m.uniqueID]||(l[m.uniqueID]={}),j=k[a]||[],n=j[0]===w&&j[1],t=n&&j[2],m=n&&q.childNodes[n];while(m=++n&&m&&m[p]||(t=n=0)||o.pop())if(1===m.nodeType&&++t&&m===b){k[a]=[w,n,t];break}}else if(s&&(m=b,l=m[u]||(m[u]={}),k=l[m.uniqueID]||(l[m.uniqueID]={}),j=k[a]||[],n=j[0]===w&&j[1],t=n),t===!1)while(m=++n&&m&&m[p]||(t=n=0)||o.pop())if((h?m.nodeName.toLowerCase()===r:1===m.nodeType)&&++t&&(s&&(l=m[u]||(m[u]={}),k=l[m.uniqueID]||(l[m.uniqueID]={}),k[a]=[w,t]),m===b))break;return t-=e,t===d||t%d===0&&t/d>=0}}},PSEUDO:function(a,b){var c,e=d.pseudos[a]||d.setFilters[a.toLowerCase()]||fa.error("unsupported pseudo: "+a);return e[u]?e(b):e.length>1?(c=[a,a,"",b],d.setFilters.hasOwnProperty(a.toLowerCase())?ha(function(a,c){var d,f=e(a,b),g=f.length;while(g--)d=J(a,f[g]),a[d]=!(c[d]=f[g])}):function(a){return e(a,0,c)}):e}},pseudos:{not:ha(function(a){var b=[],c=[],d=h(a.replace(Q,"$1"));return d[u]?ha(function(a,b,c,e){var f,g=d(a,null,e,[]),h=a.length;while(h--)(f=g[h])&&(a[h]=!(b[h]=f))}):function(a,e,f){return b[0]=a,d(b,null,f,c),b[0]=null,!c.pop()}}),has:ha(function(a){return function(b){return fa(a,b).length>0}}),contains:ha(function(a){return a=a.replace(ba,ca),function(b){return(b.textContent||b.innerText||e(b)).indexOf(a)>-1}}),lang:ha(function(a){return V.test(a||"")||fa.error("unsupported lang: "+a),a=a.replace(ba,ca).toLowerCase(),function(b){var c;do if(c=p?b.lang:b.getAttribute("xml:lang")||b.getAttribute("lang"))return c=c.toLowerCase(),c===a||0===c.indexOf(a+"-");while((b=b.parentNode)&&1===b.nodeType);return!1}}),target:function(b){var c=a.location&&a.location.hash;return c&&c.slice(1)===b.id},root:function(a){return a===o},focus:function(a){return a===n.activeElement&&(!n.hasFocus||n.hasFocus())&&!!(a.type||a.href||~a.tabIndex)},enabled:function(a){return a.disabled===!1},disabled:function(a){return a.disabled===!0},checked:function(a){var b=a.nodeName.toLowerCase();return"input"===b&&!!a.checked||"option"===b&&!!a.selected},selected:function(a){return a.parentNode&&a.parentNode.selectedIndex,a.selected===!0},empty:function(a){for(a=a.firstChild;a;a=a.nextSibling)if(a.nodeType<6)return!1;return!0},parent:function(a){return!d.pseudos.empty(a)},header:function(a){return Y.test(a.nodeName)},input:function(a){return X.test(a.nodeName)},button:function(a){var b=a.nodeName.toLowerCase();return"input"===b&&"button"===a.type||"button"===b},text:function(a){var b;return"input"===a.nodeName.toLowerCase()&&"text"===a.type&&(null==(b=a.getAttribute("type"))||"text"===b.toLowerCase())},first:na(function(){return[0]}),last:na(function(a,b){return[b-1]}),eq:na(function(a,b,c){return[0>c?c+b:c]}),even:na(function(a,b){for(var c=0;b>c;c+=2)a.push(c);return a}),odd:na(function(a,b){for(var c=1;b>c;c+=2)a.push(c);return a}),lt:na(function(a,b,c){for(var d=0>c?c+b:c;--d>=0;)a.push(d);return a}),gt:na(function(a,b,c){for(var d=0>c?c+b:c;++d<b;)a.push(d);return a})}},d.pseudos.nth=d.pseudos.eq;for(b in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})d.pseudos[b]=la(b);for(b in{submit:!0,reset:!0})d.pseudos[b]=ma(b);function pa(){}pa.prototype=d.filters=d.pseudos,d.setFilters=new pa,g=fa.tokenize=function(a,b){var c,e,f,g,h,i,j,k=z[a+" "];if(k)return b?0:k.slice(0);h=a,i=[],j=d.preFilter;while(h){c&&!(e=R.exec(h))||(e&&(h=h.slice(e[0].length)||h),i.push(f=[])),c=!1,(e=S.exec(h))&&(c=e.shift(),f.push({value:c,type:e[0].replace(Q," ")}),h=h.slice(c.length));for(g in d.filter)!(e=W[g].exec(h))||j[g]&&!(e=j[g](e))||(c=e.shift(),f.push({value:c,type:g,matches:e}),h=h.slice(c.length));if(!c)break}return b?h.length:h?fa.error(a):z(a,i).slice(0)};function qa(a){for(var b=0,c=a.length,d="";c>b;b++)d+=a[b].value;return d}function ra(a,b,c){var d=b.dir,e=c&&"parentNode"===d,f=x++;return b.first?function(b,c,f){while(b=b[d])if(1===b.nodeType||e)return a(b,c,f)}:function(b,c,g){var h,i,j,k=[w,f];if(g){while(b=b[d])if((1===b.nodeType||e)&&a(b,c,g))return!0}else while(b=b[d])if(1===b.nodeType||e){if(j=b[u]||(b[u]={}),i=j[b.uniqueID]||(j[b.uniqueID]={}),(h=i[d])&&h[0]===w&&h[1]===f)return k[2]=h[2];if(i[d]=k,k[2]=a(b,c,g))return!0}}}function sa(a){return a.length>1?function(b,c,d){var e=a.length;while(e--)if(!a[e](b,c,d))return!1;return!0}:a[0]}function ta(a,b,c){for(var d=0,e=b.length;e>d;d++)fa(a,b[d],c);return c}function ua(a,b,c,d,e){for(var f,g=[],h=0,i=a.length,j=null!=b;i>h;h++)(f=a[h])&&(c&&!c(f,d,e)||(g.push(f),j&&b.push(h)));return g}function va(a,b,c,d,e,f){return d&&!d[u]&&(d=va(d)),e&&!e[u]&&(e=va(e,f)),ha(function(f,g,h,i){var j,k,l,m=[],n=[],o=g.length,p=f||ta(b||"*",h.nodeType?[h]:h,[]),q=!a||!f&&b?p:ua(p,m,a,h,i),r=c?e||(f?a:o||d)?[]:g:q;if(c&&c(q,r,h,i),d){j=ua(r,n),d(j,[],h,i),k=j.length;while(k--)(l=j[k])&&(r[n[k]]=!(q[n[k]]=l))}if(f){if(e||a){if(e){j=[],k=r.length;while(k--)(l=r[k])&&j.push(q[k]=l);e(null,r=[],j,i)}k=r.length;while(k--)(l=r[k])&&(j=e?J(f,l):m[k])>-1&&(f[j]=!(g[j]=l))}}else r=ua(r===g?r.splice(o,r.length):r),e?e(null,g,r,i):H.apply(g,r)})}function wa(a){for(var b,c,e,f=a.length,g=d.relative[a[0].type],h=g||d.relative[" "],i=g?1:0,k=ra(function(a){return a===b},h,!0),l=ra(function(a){return J(b,a)>-1},h,!0),m=[function(a,c,d){var e=!g&&(d||c!==j)||((b=c).nodeType?k(a,c,d):l(a,c,d));return b=null,e}];f>i;i++)if(c=d.relative[a[i].type])m=[ra(sa(m),c)];else{if(c=d.filter[a[i].type].apply(null,a[i].matches),c[u]){for(e=++i;f>e;e++)if(d.relative[a[e].type])break;return va(i>1&&sa(m),i>1&&qa(a.slice(0,i-1).concat({value:" "===a[i-2].type?"*":""})).replace(Q,"$1"),c,e>i&&wa(a.slice(i,e)),f>e&&wa(a=a.slice(e)),f>e&&qa(a))}m.push(c)}return sa(m)}function xa(a,b){var c=b.length>0,e=a.length>0,f=function(f,g,h,i,k){var l,o,q,r=0,s="0",t=f&&[],u=[],v=j,x=f||e&&d.find.TAG("*",k),y=w+=null==v?1:Math.random()||.1,z=x.length;for(k&&(j=g===n||g||k);s!==z&&null!=(l=x[s]);s++){if(e&&l){o=0,g||l.ownerDocument===n||(m(l),h=!p);while(q=a[o++])if(q(l,g||n,h)){i.push(l);break}k&&(w=y)}c&&((l=!q&&l)&&r--,f&&t.push(l))}if(r+=s,c&&s!==r){o=0;while(q=b[o++])q(t,u,g,h);if(f){if(r>0)while(s--)t[s]||u[s]||(u[s]=F.call(i));u=ua(u)}H.apply(i,u),k&&!f&&u.length>0&&r+b.length>1&&fa.uniqueSort(i)}return k&&(w=y,j=v),t};return c?ha(f):f}return h=fa.compile=function(a,b){var c,d=[],e=[],f=A[a+" "];if(!f){b||(b=g(a)),c=b.length;while(c--)f=wa(b[c]),f[u]?d.push(f):e.push(f);f=A(a,xa(e,d)),f.selector=a}return f},i=fa.select=function(a,b,e,f){var i,j,k,l,m,n="function"==typeof a&&a,o=!f&&g(a=n.selector||a);if(e=e||[],1===o.length){if(j=o[0]=o[0].slice(0),j.length>2&&"ID"===(k=j[0]).type&&c.getById&&9===b.nodeType&&p&&d.relative[j[1].type]){if(b=(d.find.ID(k.matches[0].replace(ba,ca),b)||[])[0],!b)return e;n&&(b=b.parentNode),a=a.slice(j.shift().value.length)}i=W.needsContext.test(a)?0:j.length;while(i--){if(k=j[i],d.relative[l=k.type])break;if((m=d.find[l])&&(f=m(k.matches[0].replace(ba,ca),_.test(j[0].type)&&oa(b.parentNode)||b))){if(j.splice(i,1),a=f.length&&qa(j),!a)return H.apply(e,f),e;break}}}return(n||h(a,o))(f,b,!p,e,!b||_.test(a)&&oa(b.parentNode)||b),e},c.sortStable=u.split("").sort(B).join("")===u,c.detectDuplicates=!!l,m(),c.sortDetached=ia(function(a){return 1&a.compareDocumentPosition(n.createElement("div"))}),ia(function(a){return a.innerHTML="<a href='#'></a>","#"===a.firstChild.getAttribute("href")})||ja("type|href|height|width",function(a,b,c){return c?void 0:a.getAttribute(b,"type"===b.toLowerCase()?1:2)}),c.attributes&&ia(function(a){return a.innerHTML="<input/>",a.firstChild.setAttribute("value",""),""===a.firstChild.getAttribute("value")})||ja("value",function(a,b,c){return c||"input"!==a.nodeName.toLowerCase()?void 0:a.defaultValue}),ia(function(a){return null==a.getAttribute("disabled")})||ja(K,function(a,b,c){var d;return c?void 0:a[b]===!0?b.toLowerCase():(d=a.getAttributeNode(b))&&d.specified?d.value:null}),fa}(a);n.find=t,n.expr=t.selectors,n.expr[":"]=n.expr.pseudos,n.uniqueSort=n.unique=t.uniqueSort,n.text=t.getText,n.isXMLDoc=t.isXML,n.contains=t.contains;var u=function(a,b,c){var d=[],e=void 0!==c;while((a=a[b])&&9!==a.nodeType)if(1===a.nodeType){if(e&&n(a).is(c))break;d.push(a)}return d},v=function(a,b){for(var c=[];a;a=a.nextSibling)1===a.nodeType&&a!==b&&c.push(a);return c},w=n.expr.match.needsContext,x=/^<([\w-]+)\s*\/?>(?:<\/\1>|)$/,y=/^.[^:#\[\.,]*$/;function z(a,b,c){if(n.isFunction(b))return n.grep(a,function(a,d){return!!b.call(a,d,a)!==c});if(b.nodeType)return n.grep(a,function(a){return a===b!==c});if("string"==typeof b){if(y.test(b))return n.filter(b,a,c);b=n.filter(b,a)}return n.grep(a,function(a){return n.inArray(a,b)>-1!==c})}n.filter=function(a,b,c){var d=b[0];return c&&(a=":not("+a+")"),1===b.length&&1===d.nodeType?n.find.matchesSelector(d,a)?[d]:[]:n.find.matches(a,n.grep(b,function(a){return 1===a.nodeType}))},n.fn.extend({find:function(a){var b,c=[],d=this,e=d.length;if("string"!=typeof a)return this.pushStack(n(a).filter(function(){for(b=0;e>b;b++)if(n.contains(d[b],this))return!0}));for(b=0;e>b;b++)n.find(a,d[b],c);return c=this.pushStack(e>1?n.unique(c):c),c.selector=this.selector?this.selector+" "+a:a,c},filter:function(a){return this.pushStack(z(this,a||[],!1))},not:function(a){return this.pushStack(z(this,a||[],!0))},is:function(a){return!!z(this,"string"==typeof a&&w.test(a)?n(a):a||[],!1).length}});var A,B=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,C=n.fn.init=function(a,b,c){var e,f;if(!a)return this;if(c=c||A,"string"==typeof a){if(e="<"===a.charAt(0)&&">"===a.charAt(a.length-1)&&a.length>=3?[null,a,null]:B.exec(a),!e||!e[1]&&b)return!b||b.jquery?(b||c).find(a):this.constructor(b).find(a);if(e[1]){if(b=b instanceof n?b[0]:b,n.merge(this,n.parseHTML(e[1],b&&b.nodeType?b.ownerDocument||b:d,!0)),x.test(e[1])&&n.isPlainObject(b))for(e in b)n.isFunction(this[e])?this[e](b[e]):this.attr(e,b[e]);return this}if(f=d.getElementById(e[2]),f&&f.parentNode){if(f.id!==e[2])return A.find(a);this.length=1,this[0]=f}return this.context=d,this.selector=a,this}return a.nodeType?(this.context=this[0]=a,this.length=1,this):n.isFunction(a)?"undefined"!=typeof c.ready?c.ready(a):a(n):(void 0!==a.selector&&(this.selector=a.selector,this.context=a.context),n.makeArray(a,this))};C.prototype=n.fn,A=n(d);var D=/^(?:parents|prev(?:Until|All))/,E={children:!0,contents:!0,next:!0,prev:!0};n.fn.extend({has:function(a){var b,c=n(a,this),d=c.length;return this.filter(function(){for(b=0;d>b;b++)if(n.contains(this,c[b]))return!0})},closest:function(a,b){for(var c,d=0,e=this.length,f=[],g=w.test(a)||"string"!=typeof a?n(a,b||this.context):0;e>d;d++)for(c=this[d];c&&c!==b;c=c.parentNode)if(c.nodeType<11&&(g?g.index(c)>-1:1===c.nodeType&&n.find.matchesSelector(c,a))){f.push(c);break}return this.pushStack(f.length>1?n.uniqueSort(f):f)},index:function(a){return a?"string"==typeof a?n.inArray(this[0],n(a)):n.inArray(a.jquery?a[0]:a,this):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(a,b){return this.pushStack(n.uniqueSort(n.merge(this.get(),n(a,b))))},addBack:function(a){return this.add(null==a?this.prevObject:this.prevObject.filter(a))}});function F(a,b){do a=a[b];while(a&&1!==a.nodeType);return a}n.each({parent:function(a){var b=a.parentNode;return b&&11!==b.nodeType?b:null},parents:function(a){return u(a,"parentNode")},parentsUntil:function(a,b,c){return u(a,"parentNode",c)},next:function(a){return F(a,"nextSibling")},prev:function(a){return F(a,"previousSibling")},nextAll:function(a){return u(a,"nextSibling")},prevAll:function(a){return u(a,"previousSibling")},nextUntil:function(a,b,c){return u(a,"nextSibling",c)},prevUntil:function(a,b,c){return u(a,"previousSibling",c)},siblings:function(a){return v((a.parentNode||{}).firstChild,a)},children:function(a){return v(a.firstChild)},contents:function(a){return n.nodeName(a,"iframe")?a.contentDocument||a.contentWindow.document:n.merge([],a.childNodes)}},function(a,b){n.fn[a]=function(c,d){var e=n.map(this,b,c);return"Until"!==a.slice(-5)&&(d=c),d&&"string"==typeof d&&(e=n.filter(d,e)),this.length>1&&(E[a]||(e=n.uniqueSort(e)),D.test(a)&&(e=e.reverse())),this.pushStack(e)}});var G=/\S+/g;function H(a){var b={};return n.each(a.match(G)||[],function(a,c){b[c]=!0}),b}n.Callbacks=function(a){a="string"==typeof a?H(a):n.extend({},a);var b,c,d,e,f=[],g=[],h=-1,i=function(){for(e=a.once,d=b=!0;g.length;h=-1){c=g.shift();while(++h<f.length)f[h].apply(c[0],c[1])===!1&&a.stopOnFalse&&(h=f.length,c=!1)}a.memory||(c=!1),b=!1,e&&(f=c?[]:"")},j={add:function(){return f&&(c&&!b&&(h=f.length-1,g.push(c)),function d(b){n.each(b,function(b,c){n.isFunction(c)?a.unique&&j.has(c)||f.push(c):c&&c.length&&"string"!==n.type(c)&&d(c)})}(arguments),c&&!b&&i()),this},remove:function(){return n.each(arguments,function(a,b){var c;while((c=n.inArray(b,f,c))>-1)f.splice(c,1),h>=c&&h--}),this},has:function(a){return a?n.inArray(a,f)>-1:f.length>0},empty:function(){return f&&(f=[]),this},disable:function(){return e=g=[],f=c="",this},disabled:function(){return!f},lock:function(){return e=!0,c||j.disable(),this},locked:function(){return!!e},fireWith:function(a,c){return e||(c=c||[],c=[a,c.slice?c.slice():c],g.push(c),b||i()),this},fire:function(){return j.fireWith(this,arguments),this},fired:function(){return!!d}};return j},n.extend({Deferred:function(a){var b=[["resolve","done",n.Callbacks("once memory"),"resolved"],["reject","fail",n.Callbacks("once memory"),"rejected"],["notify","progress",n.Callbacks("memory")]],c="pending",d={state:function(){return c},always:function(){return e.done(arguments).fail(arguments),this},then:function(){var a=arguments;return n.Deferred(function(c){n.each(b,function(b,f){var g=n.isFunction(a[b])&&a[b];e[f[1]](function(){var a=g&&g.apply(this,arguments);a&&n.isFunction(a.promise)?a.promise().progress(c.notify).done(c.resolve).fail(c.reject):c[f[0]+"With"](this===d?c.promise():this,g?[a]:arguments)})}),a=null}).promise()},promise:function(a){return null!=a?n.extend(a,d):d}},e={};return d.pipe=d.then,n.each(b,function(a,f){var g=f[2],h=f[3];d[f[1]]=g.add,h&&g.add(function(){c=h},b[1^a][2].disable,b[2][2].lock),e[f[0]]=function(){return e[f[0]+"With"](this===e?d:this,arguments),this},e[f[0]+"With"]=g.fireWith}),d.promise(e),a&&a.call(e,e),e},when:function(a){var b=0,c=e.call(arguments),d=c.length,f=1!==d||a&&n.isFunction(a.promise)?d:0,g=1===f?a:n.Deferred(),h=function(a,b,c){return function(d){b[a]=this,c[a]=arguments.length>1?e.call(arguments):d,c===i?g.notifyWith(b,c):--f||g.resolveWith(b,c)}},i,j,k;if(d>1)for(i=new Array(d),j=new Array(d),k=new Array(d);d>b;b++)c[b]&&n.isFunction(c[b].promise)?c[b].promise().progress(h(b,j,i)).done(h(b,k,c)).fail(g.reject):--f;return f||g.resolveWith(k,c),g.promise()}});var I;n.fn.ready=function(a){return n.ready.promise().done(a),this},n.extend({isReady:!1,readyWait:1,holdReady:function(a){a?n.readyWait++:n.ready(!0)},ready:function(a){(a===!0?--n.readyWait:n.isReady)||(n.isReady=!0,a!==!0&&--n.readyWait>0||(I.resolveWith(d,[n]),n.fn.triggerHandler&&(n(d).triggerHandler("ready"),n(d).off("ready"))))}});function J(){d.addEventListener?(d.removeEventListener("DOMContentLoaded",K),a.removeEventListener("load",K)):(d.detachEvent("onreadystatechange",K),a.detachEvent("onload",K))}function K(){(d.addEventListener||"load"===a.event.type||"complete"===d.readyState)&&(J(),n.ready())}n.ready.promise=function(b){if(!I)if(I=n.Deferred(),"complete"===d.readyState||"loading"!==d.readyState&&!d.documentElement.doScroll)a.setTimeout(n.ready);else if(d.addEventListener)d.addEventListener("DOMContentLoaded",K),a.addEventListener("load",K);else{d.attachEvent("onreadystatechange",K),a.attachEvent("onload",K);var c=!1;try{c=null==a.frameElement&&d.documentElement}catch(e){}c&&c.doScroll&&!function f(){if(!n.isReady){try{c.doScroll("left")}catch(b){return a.setTimeout(f,50)}J(),n.ready()}}()}return I.promise(b)},n.ready.promise();var L;for(L in n(l))break;l.ownFirst="0"===L,l.inlineBlockNeedsLayout=!1,n(function(){var a,b,c,e;c=d.getElementsByTagName("body")[0],c&&c.style&&(b=d.createElement("div"),e=d.createElement("div"),e.style.cssText="position:absolute;border:0;width:0;height:0;top:0;left:-9999px",c.appendChild(e).appendChild(b),"undefined"!=typeof b.style.zoom&&(b.style.cssText="display:inline;margin:0;border:0;padding:1px;width:1px;zoom:1",l.inlineBlockNeedsLayout=a=3===b.offsetWidth,a&&(c.style.zoom=1)),c.removeChild(e))}),function(){var a=d.createElement("div");l.deleteExpando=!0;try{delete a.test}catch(b){l.deleteExpando=!1}a=null}();var M=function(a){var b=n.noData[(a.nodeName+" ").toLowerCase()],c=+a.nodeType||1;return 1!==c&&9!==c?!1:!b||b!==!0&&a.getAttribute("classid")===b},N=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,O=/([A-Z])/g;function P(a,b,c){if(void 0===c&&1===a.nodeType){var d="data-"+b.replace(O,"-$1").toLowerCase();if(c=a.getAttribute(d),"string"==typeof c){try{c="true"===c?!0:"false"===c?!1:"null"===c?null:+c+""===c?+c:N.test(c)?n.parseJSON(c):c}catch(e){}n.data(a,b,c)}else c=void 0;
}return c}function Q(a){var b;for(b in a)if(("data"!==b||!n.isEmptyObject(a[b]))&&"toJSON"!==b)return!1;return!0}function R(a,b,d,e){if(M(a)){var f,g,h=n.expando,i=a.nodeType,j=i?n.cache:a,k=i?a[h]:a[h]&&h;if(k&&j[k]&&(e||j[k].data)||void 0!==d||"string"!=typeof b)return k||(k=i?a[h]=c.pop()||n.guid++:h),j[k]||(j[k]=i?{}:{toJSON:n.noop}),"object"!=typeof b&&"function"!=typeof b||(e?j[k]=n.extend(j[k],b):j[k].data=n.extend(j[k].data,b)),g=j[k],e||(g.data||(g.data={}),g=g.data),void 0!==d&&(g[n.camelCase(b)]=d),"string"==typeof b?(f=g[b],null==f&&(f=g[n.camelCase(b)])):f=g,f}}function S(a,b,c){if(M(a)){var d,e,f=a.nodeType,g=f?n.cache:a,h=f?a[n.expando]:n.expando;if(g[h]){if(b&&(d=c?g[h]:g[h].data)){n.isArray(b)?b=b.concat(n.map(b,n.camelCase)):b in d?b=[b]:(b=n.camelCase(b),b=b in d?[b]:b.split(" ")),e=b.length;while(e--)delete d[b[e]];if(c?!Q(d):!n.isEmptyObject(d))return}(c||(delete g[h].data,Q(g[h])))&&(f?n.cleanData([a],!0):l.deleteExpando||g!=g.window?delete g[h]:g[h]=void 0)}}}n.extend({cache:{},noData:{"applet ":!0,"embed ":!0,"object ":"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"},hasData:function(a){return a=a.nodeType?n.cache[a[n.expando]]:a[n.expando],!!a&&!Q(a)},data:function(a,b,c){return R(a,b,c)},removeData:function(a,b){return S(a,b)},_data:function(a,b,c){return R(a,b,c,!0)},_removeData:function(a,b){return S(a,b,!0)}}),n.fn.extend({data:function(a,b){var c,d,e,f=this[0],g=f&&f.attributes;if(void 0===a){if(this.length&&(e=n.data(f),1===f.nodeType&&!n._data(f,"parsedAttrs"))){c=g.length;while(c--)g[c]&&(d=g[c].name,0===d.indexOf("data-")&&(d=n.camelCase(d.slice(5)),P(f,d,e[d])));n._data(f,"parsedAttrs",!0)}return e}return"object"==typeof a?this.each(function(){n.data(this,a)}):arguments.length>1?this.each(function(){n.data(this,a,b)}):f?P(f,a,n.data(f,a)):void 0},removeData:function(a){return this.each(function(){n.removeData(this,a)})}}),n.extend({queue:function(a,b,c){var d;return a?(b=(b||"fx")+"queue",d=n._data(a,b),c&&(!d||n.isArray(c)?d=n._data(a,b,n.makeArray(c)):d.push(c)),d||[]):void 0},dequeue:function(a,b){b=b||"fx";var c=n.queue(a,b),d=c.length,e=c.shift(),f=n._queueHooks(a,b),g=function(){n.dequeue(a,b)};"inprogress"===e&&(e=c.shift(),d--),e&&("fx"===b&&c.unshift("inprogress"),delete f.stop,e.call(a,g,f)),!d&&f&&f.empty.fire()},_queueHooks:function(a,b){var c=b+"queueHooks";return n._data(a,c)||n._data(a,c,{empty:n.Callbacks("once memory").add(function(){n._removeData(a,b+"queue"),n._removeData(a,c)})})}}),n.fn.extend({queue:function(a,b){var c=2;return"string"!=typeof a&&(b=a,a="fx",c--),arguments.length<c?n.queue(this[0],a):void 0===b?this:this.each(function(){var c=n.queue(this,a,b);n._queueHooks(this,a),"fx"===a&&"inprogress"!==c[0]&&n.dequeue(this,a)})},dequeue:function(a){return this.each(function(){n.dequeue(this,a)})},clearQueue:function(a){return this.queue(a||"fx",[])},promise:function(a,b){var c,d=1,e=n.Deferred(),f=this,g=this.length,h=function(){--d||e.resolveWith(f,[f])};"string"!=typeof a&&(b=a,a=void 0),a=a||"fx";while(g--)c=n._data(f[g],a+"queueHooks"),c&&c.empty&&(d++,c.empty.add(h));return h(),e.promise(b)}}),function(){var a;l.shrinkWrapBlocks=function(){if(null!=a)return a;a=!1;var b,c,e;return c=d.getElementsByTagName("body")[0],c&&c.style?(b=d.createElement("div"),e=d.createElement("div"),e.style.cssText="position:absolute;border:0;width:0;height:0;top:0;left:-9999px",c.appendChild(e).appendChild(b),"undefined"!=typeof b.style.zoom&&(b.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:1px;width:1px;zoom:1",b.appendChild(d.createElement("div")).style.width="5px",a=3!==b.offsetWidth),c.removeChild(e),a):void 0}}();var T=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,U=new RegExp("^(?:([+-])=|)("+T+")([a-z%]*)$","i"),V=["Top","Right","Bottom","Left"],W=function(a,b){return a=b||a,"none"===n.css(a,"display")||!n.contains(a.ownerDocument,a)};function X(a,b,c,d){var e,f=1,g=20,h=d?function(){return d.cur()}:function(){return n.css(a,b,"")},i=h(),j=c&&c[3]||(n.cssNumber[b]?"":"px"),k=(n.cssNumber[b]||"px"!==j&&+i)&&U.exec(n.css(a,b));if(k&&k[3]!==j){j=j||k[3],c=c||[],k=+i||1;do f=f||".5",k/=f,n.style(a,b,k+j);while(f!==(f=h()/i)&&1!==f&&--g)}return c&&(k=+k||+i||0,e=c[1]?k+(c[1]+1)*c[2]:+c[2],d&&(d.unit=j,d.start=k,d.end=e)),e}var Y=function(a,b,c,d,e,f,g){var h=0,i=a.length,j=null==c;if("object"===n.type(c)){e=!0;for(h in c)Y(a,b,h,c[h],!0,f,g)}else if(void 0!==d&&(e=!0,n.isFunction(d)||(g=!0),j&&(g?(b.call(a,d),b=null):(j=b,b=function(a,b,c){return j.call(n(a),c)})),b))for(;i>h;h++)b(a[h],c,g?d:d.call(a[h],h,b(a[h],c)));return e?a:j?b.call(a):i?b(a[0],c):f},Z=/^(?:checkbox|radio)$/i,$=/<([\w:-]+)/,_=/^$|\/(?:java|ecma)script/i,aa=/^\s+/,ba="abbr|article|aside|audio|bdi|canvas|data|datalist|details|dialog|figcaption|figure|footer|header|hgroup|main|mark|meter|nav|output|picture|progress|section|summary|template|time|video";function ca(a){var b=ba.split("|"),c=a.createDocumentFragment();if(c.createElement)while(b.length)c.createElement(b.pop());return c}!function(){var a=d.createElement("div"),b=d.createDocumentFragment(),c=d.createElement("input");a.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",l.leadingWhitespace=3===a.firstChild.nodeType,l.tbody=!a.getElementsByTagName("tbody").length,l.htmlSerialize=!!a.getElementsByTagName("link").length,l.html5Clone="<:nav></:nav>"!==d.createElement("nav").cloneNode(!0).outerHTML,c.type="checkbox",c.checked=!0,b.appendChild(c),l.appendChecked=c.checked,a.innerHTML="<textarea>x</textarea>",l.noCloneChecked=!!a.cloneNode(!0).lastChild.defaultValue,b.appendChild(a),c=d.createElement("input"),c.setAttribute("type","radio"),c.setAttribute("checked","checked"),c.setAttribute("name","t"),a.appendChild(c),l.checkClone=a.cloneNode(!0).cloneNode(!0).lastChild.checked,l.noCloneEvent=!!a.addEventListener,a[n.expando]=1,l.attributes=!a.getAttribute(n.expando)}();var da={option:[1,"<select multiple='multiple'>","</select>"],legend:[1,"<fieldset>","</fieldset>"],area:[1,"<map>","</map>"],param:[1,"<object>","</object>"],thead:[1,"<table>","</table>"],tr:[2,"<table><tbody>","</tbody></table>"],col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:l.htmlSerialize?[0,"",""]:[1,"X<div>","</div>"]};da.optgroup=da.option,da.tbody=da.tfoot=da.colgroup=da.caption=da.thead,da.th=da.td;function ea(a,b){var c,d,e=0,f="undefined"!=typeof a.getElementsByTagName?a.getElementsByTagName(b||"*"):"undefined"!=typeof a.querySelectorAll?a.querySelectorAll(b||"*"):void 0;if(!f)for(f=[],c=a.childNodes||a;null!=(d=c[e]);e++)!b||n.nodeName(d,b)?f.push(d):n.merge(f,ea(d,b));return void 0===b||b&&n.nodeName(a,b)?n.merge([a],f):f}function fa(a,b){for(var c,d=0;null!=(c=a[d]);d++)n._data(c,"globalEval",!b||n._data(b[d],"globalEval"))}var ga=/<|&#?\w+;/,ha=/<tbody/i;function ia(a){Z.test(a.type)&&(a.defaultChecked=a.checked)}function ja(a,b,c,d,e){for(var f,g,h,i,j,k,m,o=a.length,p=ca(b),q=[],r=0;o>r;r++)if(g=a[r],g||0===g)if("object"===n.type(g))n.merge(q,g.nodeType?[g]:g);else if(ga.test(g)){i=i||p.appendChild(b.createElement("div")),j=($.exec(g)||["",""])[1].toLowerCase(),m=da[j]||da._default,i.innerHTML=m[1]+n.htmlPrefilter(g)+m[2],f=m[0];while(f--)i=i.lastChild;if(!l.leadingWhitespace&&aa.test(g)&&q.push(b.createTextNode(aa.exec(g)[0])),!l.tbody){g="table"!==j||ha.test(g)?"<table>"!==m[1]||ha.test(g)?0:i:i.firstChild,f=g&&g.childNodes.length;while(f--)n.nodeName(k=g.childNodes[f],"tbody")&&!k.childNodes.length&&g.removeChild(k)}n.merge(q,i.childNodes),i.textContent="";while(i.firstChild)i.removeChild(i.firstChild);i=p.lastChild}else q.push(b.createTextNode(g));i&&p.removeChild(i),l.appendChecked||n.grep(ea(q,"input"),ia),r=0;while(g=q[r++])if(d&&n.inArray(g,d)>-1)e&&e.push(g);else if(h=n.contains(g.ownerDocument,g),i=ea(p.appendChild(g),"script"),h&&fa(i),c){f=0;while(g=i[f++])_.test(g.type||"")&&c.push(g)}return i=null,p}!function(){var b,c,e=d.createElement("div");for(b in{submit:!0,change:!0,focusin:!0})c="on"+b,(l[b]=c in a)||(e.setAttribute(c,"t"),l[b]=e.attributes[c].expando===!1);e=null}();var ka=/^(?:input|select|textarea)$/i,la=/^key/,ma=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,na=/^(?:focusinfocus|focusoutblur)$/,oa=/^([^.]*)(?:\.(.+)|)/;function pa(){return!0}function qa(){return!1}function ra(){try{return d.activeElement}catch(a){}}function sa(a,b,c,d,e,f){var g,h;if("object"==typeof b){"string"!=typeof c&&(d=d||c,c=void 0);for(h in b)sa(a,h,c,d,b[h],f);return a}if(null==d&&null==e?(e=c,d=c=void 0):null==e&&("string"==typeof c?(e=d,d=void 0):(e=d,d=c,c=void 0)),e===!1)e=qa;else if(!e)return a;return 1===f&&(g=e,e=function(a){return n().off(a),g.apply(this,arguments)},e.guid=g.guid||(g.guid=n.guid++)),a.each(function(){n.event.add(this,b,e,d,c)})}n.event={global:{},add:function(a,b,c,d,e){var f,g,h,i,j,k,l,m,o,p,q,r=n._data(a);if(r){c.handler&&(i=c,c=i.handler,e=i.selector),c.guid||(c.guid=n.guid++),(g=r.events)||(g=r.events={}),(k=r.handle)||(k=r.handle=function(a){return"undefined"==typeof n||a&&n.event.triggered===a.type?void 0:n.event.dispatch.apply(k.elem,arguments)},k.elem=a),b=(b||"").match(G)||[""],h=b.length;while(h--)f=oa.exec(b[h])||[],o=q=f[1],p=(f[2]||"").split(".").sort(),o&&(j=n.event.special[o]||{},o=(e?j.delegateType:j.bindType)||o,j=n.event.special[o]||{},l=n.extend({type:o,origType:q,data:d,handler:c,guid:c.guid,selector:e,needsContext:e&&n.expr.match.needsContext.test(e),namespace:p.join(".")},i),(m=g[o])||(m=g[o]=[],m.delegateCount=0,j.setup&&j.setup.call(a,d,p,k)!==!1||(a.addEventListener?a.addEventListener(o,k,!1):a.attachEvent&&a.attachEvent("on"+o,k))),j.add&&(j.add.call(a,l),l.handler.guid||(l.handler.guid=c.guid)),e?m.splice(m.delegateCount++,0,l):m.push(l),n.event.global[o]=!0);a=null}},remove:function(a,b,c,d,e){var f,g,h,i,j,k,l,m,o,p,q,r=n.hasData(a)&&n._data(a);if(r&&(k=r.events)){b=(b||"").match(G)||[""],j=b.length;while(j--)if(h=oa.exec(b[j])||[],o=q=h[1],p=(h[2]||"").split(".").sort(),o){l=n.event.special[o]||{},o=(d?l.delegateType:l.bindType)||o,m=k[o]||[],h=h[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"),i=f=m.length;while(f--)g=m[f],!e&&q!==g.origType||c&&c.guid!==g.guid||h&&!h.test(g.namespace)||d&&d!==g.selector&&("**"!==d||!g.selector)||(m.splice(f,1),g.selector&&m.delegateCount--,l.remove&&l.remove.call(a,g));i&&!m.length&&(l.teardown&&l.teardown.call(a,p,r.handle)!==!1||n.removeEvent(a,o,r.handle),delete k[o])}else for(o in k)n.event.remove(a,o+b[j],c,d,!0);n.isEmptyObject(k)&&(delete r.handle,n._removeData(a,"events"))}},trigger:function(b,c,e,f){var g,h,i,j,l,m,o,p=[e||d],q=k.call(b,"type")?b.type:b,r=k.call(b,"namespace")?b.namespace.split("."):[];if(i=m=e=e||d,3!==e.nodeType&&8!==e.nodeType&&!na.test(q+n.event.triggered)&&(q.indexOf(".")>-1&&(r=q.split("."),q=r.shift(),r.sort()),h=q.indexOf(":")<0&&"on"+q,b=b[n.expando]?b:new n.Event(q,"object"==typeof b&&b),b.isTrigger=f?2:3,b.namespace=r.join("."),b.rnamespace=b.namespace?new RegExp("(^|\\.)"+r.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,b.result=void 0,b.target||(b.target=e),c=null==c?[b]:n.makeArray(c,[b]),l=n.event.special[q]||{},f||!l.trigger||l.trigger.apply(e,c)!==!1)){if(!f&&!l.noBubble&&!n.isWindow(e)){for(j=l.delegateType||q,na.test(j+q)||(i=i.parentNode);i;i=i.parentNode)p.push(i),m=i;m===(e.ownerDocument||d)&&p.push(m.defaultView||m.parentWindow||a)}o=0;while((i=p[o++])&&!b.isPropagationStopped())b.type=o>1?j:l.bindType||q,g=(n._data(i,"events")||{})[b.type]&&n._data(i,"handle"),g&&g.apply(i,c),g=h&&i[h],g&&g.apply&&M(i)&&(b.result=g.apply(i,c),b.result===!1&&b.preventDefault());if(b.type=q,!f&&!b.isDefaultPrevented()&&(!l._default||l._default.apply(p.pop(),c)===!1)&&M(e)&&h&&e[q]&&!n.isWindow(e)){m=e[h],m&&(e[h]=null),n.event.triggered=q;try{e[q]()}catch(s){}n.event.triggered=void 0,m&&(e[h]=m)}return b.result}},dispatch:function(a){a=n.event.fix(a);var b,c,d,f,g,h=[],i=e.call(arguments),j=(n._data(this,"events")||{})[a.type]||[],k=n.event.special[a.type]||{};if(i[0]=a,a.delegateTarget=this,!k.preDispatch||k.preDispatch.call(this,a)!==!1){h=n.event.handlers.call(this,a,j),b=0;while((f=h[b++])&&!a.isPropagationStopped()){a.currentTarget=f.elem,c=0;while((g=f.handlers[c++])&&!a.isImmediatePropagationStopped())a.rnamespace&&!a.rnamespace.test(g.namespace)||(a.handleObj=g,a.data=g.data,d=((n.event.special[g.origType]||{}).handle||g.handler).apply(f.elem,i),void 0!==d&&(a.result=d)===!1&&(a.preventDefault(),a.stopPropagation()))}return k.postDispatch&&k.postDispatch.call(this,a),a.result}},handlers:function(a,b){var c,d,e,f,g=[],h=b.delegateCount,i=a.target;if(h&&i.nodeType&&("click"!==a.type||isNaN(a.button)||a.button<1))for(;i!=this;i=i.parentNode||this)if(1===i.nodeType&&(i.disabled!==!0||"click"!==a.type)){for(d=[],c=0;h>c;c++)f=b[c],e=f.selector+" ",void 0===d[e]&&(d[e]=f.needsContext?n(e,this).index(i)>-1:n.find(e,this,null,[i]).length),d[e]&&d.push(f);d.length&&g.push({elem:i,handlers:d})}return h<b.length&&g.push({elem:this,handlers:b.slice(h)}),g},fix:function(a){if(a[n.expando])return a;var b,c,e,f=a.type,g=a,h=this.fixHooks[f];h||(this.fixHooks[f]=h=ma.test(f)?this.mouseHooks:la.test(f)?this.keyHooks:{}),e=h.props?this.props.concat(h.props):this.props,a=new n.Event(g),b=e.length;while(b--)c=e[b],a[c]=g[c];return a.target||(a.target=g.srcElement||d),3===a.target.nodeType&&(a.target=a.target.parentNode),a.metaKey=!!a.metaKey,h.filter?h.filter(a,g):a},props:"altKey bubbles cancelable ctrlKey currentTarget detail eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(a,b){return null==a.which&&(a.which=null!=b.charCode?b.charCode:b.keyCode),a}},mouseHooks:{props:"button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(a,b){var c,e,f,g=b.button,h=b.fromElement;return null==a.pageX&&null!=b.clientX&&(e=a.target.ownerDocument||d,f=e.documentElement,c=e.body,a.pageX=b.clientX+(f&&f.scrollLeft||c&&c.scrollLeft||0)-(f&&f.clientLeft||c&&c.clientLeft||0),a.pageY=b.clientY+(f&&f.scrollTop||c&&c.scrollTop||0)-(f&&f.clientTop||c&&c.clientTop||0)),!a.relatedTarget&&h&&(a.relatedTarget=h===a.target?b.toElement:h),a.which||void 0===g||(a.which=1&g?1:2&g?3:4&g?2:0),a}},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==ra()&&this.focus)try{return this.focus(),!1}catch(a){}},delegateType:"focusin"},blur:{trigger:function(){return this===ra()&&this.blur?(this.blur(),!1):void 0},delegateType:"focusout"},click:{trigger:function(){return n.nodeName(this,"input")&&"checkbox"===this.type&&this.click?(this.click(),!1):void 0},_default:function(a){return n.nodeName(a.target,"a")}},beforeunload:{postDispatch:function(a){void 0!==a.result&&a.originalEvent&&(a.originalEvent.returnValue=a.result)}}},simulate:function(a,b,c){var d=n.extend(new n.Event,c,{type:a,isSimulated:!0});n.event.trigger(d,null,b),d.isDefaultPrevented()&&c.preventDefault()}},n.removeEvent=d.removeEventListener?function(a,b,c){a.removeEventListener&&a.removeEventListener(b,c)}:function(a,b,c){var d="on"+b;a.detachEvent&&("undefined"==typeof a[d]&&(a[d]=null),a.detachEvent(d,c))},n.Event=function(a,b){return this instanceof n.Event?(a&&a.type?(this.originalEvent=a,this.type=a.type,this.isDefaultPrevented=a.defaultPrevented||void 0===a.defaultPrevented&&a.returnValue===!1?pa:qa):this.type=a,b&&n.extend(this,b),this.timeStamp=a&&a.timeStamp||n.now(),void(this[n.expando]=!0)):new n.Event(a,b)},n.Event.prototype={constructor:n.Event,isDefaultPrevented:qa,isPropagationStopped:qa,isImmediatePropagationStopped:qa,preventDefault:function(){var a=this.originalEvent;this.isDefaultPrevented=pa,a&&(a.preventDefault?a.preventDefault():a.returnValue=!1)},stopPropagation:function(){var a=this.originalEvent;this.isPropagationStopped=pa,a&&!this.isSimulated&&(a.stopPropagation&&a.stopPropagation(),a.cancelBubble=!0)},stopImmediatePropagation:function(){var a=this.originalEvent;this.isImmediatePropagationStopped=pa,a&&a.stopImmediatePropagation&&a.stopImmediatePropagation(),this.stopPropagation()}},n.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(a,b){n.event.special[a]={delegateType:b,bindType:b,handle:function(a){var c,d=this,e=a.relatedTarget,f=a.handleObj;return e&&(e===d||n.contains(d,e))||(a.type=f.origType,c=f.handler.apply(this,arguments),a.type=b),c}}}),l.submit||(n.event.special.submit={setup:function(){return n.nodeName(this,"form")?!1:void n.event.add(this,"click._submit keypress._submit",function(a){var b=a.target,c=n.nodeName(b,"input")||n.nodeName(b,"button")?n.prop(b,"form"):void 0;c&&!n._data(c,"submit")&&(n.event.add(c,"submit._submit",function(a){a._submitBubble=!0}),n._data(c,"submit",!0))})},postDispatch:function(a){a._submitBubble&&(delete a._submitBubble,this.parentNode&&!a.isTrigger&&n.event.simulate("submit",this.parentNode,a))},teardown:function(){return n.nodeName(this,"form")?!1:void n.event.remove(this,"._submit")}}),l.change||(n.event.special.change={setup:function(){return ka.test(this.nodeName)?("checkbox"!==this.type&&"radio"!==this.type||(n.event.add(this,"propertychange._change",function(a){"checked"===a.originalEvent.propertyName&&(this._justChanged=!0)}),n.event.add(this,"click._change",function(a){this._justChanged&&!a.isTrigger&&(this._justChanged=!1),n.event.simulate("change",this,a)})),!1):void n.event.add(this,"beforeactivate._change",function(a){var b=a.target;ka.test(b.nodeName)&&!n._data(b,"change")&&(n.event.add(b,"change._change",function(a){!this.parentNode||a.isSimulated||a.isTrigger||n.event.simulate("change",this.parentNode,a)}),n._data(b,"change",!0))})},handle:function(a){var b=a.target;return this!==b||a.isSimulated||a.isTrigger||"radio"!==b.type&&"checkbox"!==b.type?a.handleObj.handler.apply(this,arguments):void 0},teardown:function(){return n.event.remove(this,"._change"),!ka.test(this.nodeName)}}),l.focusin||n.each({focus:"focusin",blur:"focusout"},function(a,b){var c=function(a){n.event.simulate(b,a.target,n.event.fix(a))};n.event.special[b]={setup:function(){var d=this.ownerDocument||this,e=n._data(d,b);e||d.addEventListener(a,c,!0),n._data(d,b,(e||0)+1)},teardown:function(){var d=this.ownerDocument||this,e=n._data(d,b)-1;e?n._data(d,b,e):(d.removeEventListener(a,c,!0),n._removeData(d,b))}}}),n.fn.extend({on:function(a,b,c,d){return sa(this,a,b,c,d)},one:function(a,b,c,d){return sa(this,a,b,c,d,1)},off:function(a,b,c){var d,e;if(a&&a.preventDefault&&a.handleObj)return d=a.handleObj,n(a.delegateTarget).off(d.namespace?d.origType+"."+d.namespace:d.origType,d.selector,d.handler),this;if("object"==typeof a){for(e in a)this.off(e,b,a[e]);return this}return b!==!1&&"function"!=typeof b||(c=b,b=void 0),c===!1&&(c=qa),this.each(function(){n.event.remove(this,a,c,b)})},trigger:function(a,b){return this.each(function(){n.event.trigger(a,b,this)})},triggerHandler:function(a,b){var c=this[0];return c?n.event.trigger(a,b,c,!0):void 0}});var ta=/ jQuery\d+="(?:null|\d+)"/g,ua=new RegExp("<(?:"+ba+")[\\s/>]","i"),va=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,wa=/<script|<style|<link/i,xa=/checked\s*(?:[^=]|=\s*.checked.)/i,ya=/^true\/(.*)/,za=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,Aa=ca(d),Ba=Aa.appendChild(d.createElement("div"));function Ca(a,b){return n.nodeName(a,"table")&&n.nodeName(11!==b.nodeType?b:b.firstChild,"tr")?a.getElementsByTagName("tbody")[0]||a.appendChild(a.ownerDocument.createElement("tbody")):a}function Da(a){return a.type=(null!==n.find.attr(a,"type"))+"/"+a.type,a}function Ea(a){var b=ya.exec(a.type);return b?a.type=b[1]:a.removeAttribute("type"),a}function Fa(a,b){if(1===b.nodeType&&n.hasData(a)){var c,d,e,f=n._data(a),g=n._data(b,f),h=f.events;if(h){delete g.handle,g.events={};for(c in h)for(d=0,e=h[c].length;e>d;d++)n.event.add(b,c,h[c][d])}g.data&&(g.data=n.extend({},g.data))}}function Ga(a,b){var c,d,e;if(1===b.nodeType){if(c=b.nodeName.toLowerCase(),!l.noCloneEvent&&b[n.expando]){e=n._data(b);for(d in e.events)n.removeEvent(b,d,e.handle);b.removeAttribute(n.expando)}"script"===c&&b.text!==a.text?(Da(b).text=a.text,Ea(b)):"object"===c?(b.parentNode&&(b.outerHTML=a.outerHTML),l.html5Clone&&a.innerHTML&&!n.trim(b.innerHTML)&&(b.innerHTML=a.innerHTML)):"input"===c&&Z.test(a.type)?(b.defaultChecked=b.checked=a.checked,b.value!==a.value&&(b.value=a.value)):"option"===c?b.defaultSelected=b.selected=a.defaultSelected:"input"!==c&&"textarea"!==c||(b.defaultValue=a.defaultValue)}}function Ha(a,b,c,d){b=f.apply([],b);var e,g,h,i,j,k,m=0,o=a.length,p=o-1,q=b[0],r=n.isFunction(q);if(r||o>1&&"string"==typeof q&&!l.checkClone&&xa.test(q))return a.each(function(e){var f=a.eq(e);r&&(b[0]=q.call(this,e,f.html())),Ha(f,b,c,d)});if(o&&(k=ja(b,a[0].ownerDocument,!1,a,d),e=k.firstChild,1===k.childNodes.length&&(k=e),e||d)){for(i=n.map(ea(k,"script"),Da),h=i.length;o>m;m++)g=k,m!==p&&(g=n.clone(g,!0,!0),h&&n.merge(i,ea(g,"script"))),c.call(a[m],g,m);if(h)for(j=i[i.length-1].ownerDocument,n.map(i,Ea),m=0;h>m;m++)g=i[m],_.test(g.type||"")&&!n._data(g,"globalEval")&&n.contains(j,g)&&(g.src?n._evalUrl&&n._evalUrl(g.src):n.globalEval((g.text||g.textContent||g.innerHTML||"").replace(za,"")));k=e=null}return a}function Ia(a,b,c){for(var d,e=b?n.filter(b,a):a,f=0;null!=(d=e[f]);f++)c||1!==d.nodeType||n.cleanData(ea(d)),d.parentNode&&(c&&n.contains(d.ownerDocument,d)&&fa(ea(d,"script")),d.parentNode.removeChild(d));return a}n.extend({htmlPrefilter:function(a){return a.replace(va,"<$1></$2>")},clone:function(a,b,c){var d,e,f,g,h,i=n.contains(a.ownerDocument,a);if(l.html5Clone||n.isXMLDoc(a)||!ua.test("<"+a.nodeName+">")?f=a.cloneNode(!0):(Ba.innerHTML=a.outerHTML,Ba.removeChild(f=Ba.firstChild)),!(l.noCloneEvent&&l.noCloneChecked||1!==a.nodeType&&11!==a.nodeType||n.isXMLDoc(a)))for(d=ea(f),h=ea(a),g=0;null!=(e=h[g]);++g)d[g]&&Ga(e,d[g]);if(b)if(c)for(h=h||ea(a),d=d||ea(f),g=0;null!=(e=h[g]);g++)Fa(e,d[g]);else Fa(a,f);return d=ea(f,"script"),d.length>0&&fa(d,!i&&ea(a,"script")),d=h=e=null,f},cleanData:function(a,b){for(var d,e,f,g,h=0,i=n.expando,j=n.cache,k=l.attributes,m=n.event.special;null!=(d=a[h]);h++)if((b||M(d))&&(f=d[i],g=f&&j[f])){if(g.events)for(e in g.events)m[e]?n.event.remove(d,e):n.removeEvent(d,e,g.handle);j[f]&&(delete j[f],k||"undefined"==typeof d.removeAttribute?d[i]=void 0:d.removeAttribute(i),c.push(f))}}}),n.fn.extend({domManip:Ha,detach:function(a){return Ia(this,a,!0)},remove:function(a){return Ia(this,a)},text:function(a){return Y(this,function(a){return void 0===a?n.text(this):this.empty().append((this[0]&&this[0].ownerDocument||d).createTextNode(a))},null,a,arguments.length)},append:function(){return Ha(this,arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=Ca(this,a);b.appendChild(a)}})},prepend:function(){return Ha(this,arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=Ca(this,a);b.insertBefore(a,b.firstChild)}})},before:function(){return Ha(this,arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this)})},after:function(){return Ha(this,arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this.nextSibling)})},empty:function(){for(var a,b=0;null!=(a=this[b]);b++){1===a.nodeType&&n.cleanData(ea(a,!1));while(a.firstChild)a.removeChild(a.firstChild);a.options&&n.nodeName(a,"select")&&(a.options.length=0)}return this},clone:function(a,b){return a=null==a?!1:a,b=null==b?a:b,this.map(function(){return n.clone(this,a,b)})},html:function(a){return Y(this,function(a){var b=this[0]||{},c=0,d=this.length;if(void 0===a)return 1===b.nodeType?b.innerHTML.replace(ta,""):void 0;if("string"==typeof a&&!wa.test(a)&&(l.htmlSerialize||!ua.test(a))&&(l.leadingWhitespace||!aa.test(a))&&!da[($.exec(a)||["",""])[1].toLowerCase()]){a=n.htmlPrefilter(a);try{for(;d>c;c++)b=this[c]||{},1===b.nodeType&&(n.cleanData(ea(b,!1)),b.innerHTML=a);b=0}catch(e){}}b&&this.empty().append(a)},null,a,arguments.length)},replaceWith:function(){var a=[];return Ha(this,arguments,function(b){var c=this.parentNode;n.inArray(this,a)<0&&(n.cleanData(ea(this)),c&&c.replaceChild(b,this))},a)}}),n.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(a,b){n.fn[a]=function(a){for(var c,d=0,e=[],f=n(a),h=f.length-1;h>=d;d++)c=d===h?this:this.clone(!0),n(f[d])[b](c),g.apply(e,c.get());return this.pushStack(e)}});var Ja,Ka={HTML:"block",BODY:"block"};function La(a,b){var c=n(b.createElement(a)).appendTo(b.body),d=n.css(c[0],"display");return c.detach(),d}function Ma(a){var b=d,c=Ka[a];return c||(c=La(a,b),"none"!==c&&c||(Ja=(Ja||n("<iframe frameborder='0' width='0' height='0'/>")).appendTo(b.documentElement),b=(Ja[0].contentWindow||Ja[0].contentDocument).document,b.write(),b.close(),c=La(a,b),Ja.detach()),Ka[a]=c),c}var Na=/^margin/,Oa=new RegExp("^("+T+")(?!px)[a-z%]+$","i"),Pa=function(a,b,c,d){var e,f,g={};for(f in b)g[f]=a.style[f],a.style[f]=b[f];e=c.apply(a,d||[]);for(f in b)a.style[f]=g[f];return e},Qa=d.documentElement;!function(){var b,c,e,f,g,h,i=d.createElement("div"),j=d.createElement("div");if(j.style){j.style.cssText="float:left;opacity:.5",l.opacity="0.5"===j.style.opacity,l.cssFloat=!!j.style.cssFloat,j.style.backgroundClip="content-box",j.cloneNode(!0).style.backgroundClip="",l.clearCloneStyle="content-box"===j.style.backgroundClip,i=d.createElement("div"),i.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",j.innerHTML="",i.appendChild(j),l.boxSizing=""===j.style.boxSizing||""===j.style.MozBoxSizing||""===j.style.WebkitBoxSizing,n.extend(l,{reliableHiddenOffsets:function(){return null==b&&k(),f},boxSizingReliable:function(){return null==b&&k(),e},pixelMarginRight:function(){return null==b&&k(),c},pixelPosition:function(){return null==b&&k(),b},reliableMarginRight:function(){return null==b&&k(),g},reliableMarginLeft:function(){return null==b&&k(),h}});function k(){var k,l,m=d.documentElement;m.appendChild(i),j.style.cssText="-webkit-box-sizing:border-box;box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",b=e=h=!1,c=g=!0,a.getComputedStyle&&(l=a.getComputedStyle(j),b="1%"!==(l||{}).top,h="2px"===(l||{}).marginLeft,e="4px"===(l||{width:"4px"}).width,j.style.marginRight="50%",c="4px"===(l||{marginRight:"4px"}).marginRight,k=j.appendChild(d.createElement("div")),k.style.cssText=j.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0",k.style.marginRight=k.style.width="0",j.style.width="1px",g=!parseFloat((a.getComputedStyle(k)||{}).marginRight),j.removeChild(k)),j.style.display="none",f=0===j.getClientRects().length,f&&(j.style.display="",j.innerHTML="<table><tr><td></td><td>t</td></tr></table>",j.childNodes[0].style.borderCollapse="separate",k=j.getElementsByTagName("td"),k[0].style.cssText="margin:0;border:0;padding:0;display:none",f=0===k[0].offsetHeight,f&&(k[0].style.display="",k[1].style.display="none",f=0===k[0].offsetHeight)),m.removeChild(i)}}}();var Ra,Sa,Ta=/^(top|right|bottom|left)$/;a.getComputedStyle?(Ra=function(b){var c=b.ownerDocument.defaultView;return c&&c.opener||(c=a),c.getComputedStyle(b)},Sa=function(a,b,c){var d,e,f,g,h=a.style;return c=c||Ra(a),g=c?c.getPropertyValue(b)||c[b]:void 0,""!==g&&void 0!==g||n.contains(a.ownerDocument,a)||(g=n.style(a,b)),c&&!l.pixelMarginRight()&&Oa.test(g)&&Na.test(b)&&(d=h.width,e=h.minWidth,f=h.maxWidth,h.minWidth=h.maxWidth=h.width=g,g=c.width,h.width=d,h.minWidth=e,h.maxWidth=f),void 0===g?g:g+""}):Qa.currentStyle&&(Ra=function(a){return a.currentStyle},Sa=function(a,b,c){var d,e,f,g,h=a.style;return c=c||Ra(a),g=c?c[b]:void 0,null==g&&h&&h[b]&&(g=h[b]),Oa.test(g)&&!Ta.test(b)&&(d=h.left,e=a.runtimeStyle,f=e&&e.left,f&&(e.left=a.currentStyle.left),h.left="fontSize"===b?"1em":g,g=h.pixelLeft+"px",h.left=d,f&&(e.left=f)),void 0===g?g:g+""||"auto"});function Ua(a,b){return{get:function(){return a()?void delete this.get:(this.get=b).apply(this,arguments)}}}var Va=/alpha\([^)]*\)/i,Wa=/opacity\s*=\s*([^)]*)/i,Xa=/^(none|table(?!-c[ea]).+)/,Ya=new RegExp("^("+T+")(.*)$","i"),Za={position:"absolute",visibility:"hidden",display:"block"},$a={letterSpacing:"0",fontWeight:"400"},_a=["Webkit","O","Moz","ms"],ab=d.createElement("div").style;function bb(a){if(a in ab)return a;var b=a.charAt(0).toUpperCase()+a.slice(1),c=_a.length;while(c--)if(a=_a[c]+b,a in ab)return a}function cb(a,b){for(var c,d,e,f=[],g=0,h=a.length;h>g;g++)d=a[g],d.style&&(f[g]=n._data(d,"olddisplay"),c=d.style.display,b?(f[g]||"none"!==c||(d.style.display=""),""===d.style.display&&W(d)&&(f[g]=n._data(d,"olddisplay",Ma(d.nodeName)))):(e=W(d),(c&&"none"!==c||!e)&&n._data(d,"olddisplay",e?c:n.css(d,"display"))));for(g=0;h>g;g++)d=a[g],d.style&&(b&&"none"!==d.style.display&&""!==d.style.display||(d.style.display=b?f[g]||"":"none"));return a}function db(a,b,c){var d=Ya.exec(b);return d?Math.max(0,d[1]-(c||0))+(d[2]||"px"):b}function eb(a,b,c,d,e){for(var f=c===(d?"border":"content")?4:"width"===b?1:0,g=0;4>f;f+=2)"margin"===c&&(g+=n.css(a,c+V[f],!0,e)),d?("content"===c&&(g-=n.css(a,"padding"+V[f],!0,e)),"margin"!==c&&(g-=n.css(a,"border"+V[f]+"Width",!0,e))):(g+=n.css(a,"padding"+V[f],!0,e),"padding"!==c&&(g+=n.css(a,"border"+V[f]+"Width",!0,e)));return g}function fb(a,b,c){var d=!0,e="width"===b?a.offsetWidth:a.offsetHeight,f=Ra(a),g=l.boxSizing&&"border-box"===n.css(a,"boxSizing",!1,f);if(0>=e||null==e){if(e=Sa(a,b,f),(0>e||null==e)&&(e=a.style[b]),Oa.test(e))return e;d=g&&(l.boxSizingReliable()||e===a.style[b]),e=parseFloat(e)||0}return e+eb(a,b,c||(g?"border":"content"),d,f)+"px"}n.extend({cssHooks:{opacity:{get:function(a,b){if(b){var c=Sa(a,"opacity");return""===c?"1":c}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":l.cssFloat?"cssFloat":"styleFloat"},style:function(a,b,c,d){if(a&&3!==a.nodeType&&8!==a.nodeType&&a.style){var e,f,g,h=n.camelCase(b),i=a.style;if(b=n.cssProps[h]||(n.cssProps[h]=bb(h)||h),g=n.cssHooks[b]||n.cssHooks[h],void 0===c)return g&&"get"in g&&void 0!==(e=g.get(a,!1,d))?e:i[b];if(f=typeof c,"string"===f&&(e=U.exec(c))&&e[1]&&(c=X(a,b,e),f="number"),null!=c&&c===c&&("number"===f&&(c+=e&&e[3]||(n.cssNumber[h]?"":"px")),l.clearCloneStyle||""!==c||0!==b.indexOf("background")||(i[b]="inherit"),!(g&&"set"in g&&void 0===(c=g.set(a,c,d)))))try{i[b]=c}catch(j){}}},css:function(a,b,c,d){var e,f,g,h=n.camelCase(b);return b=n.cssProps[h]||(n.cssProps[h]=bb(h)||h),g=n.cssHooks[b]||n.cssHooks[h],g&&"get"in g&&(f=g.get(a,!0,c)),void 0===f&&(f=Sa(a,b,d)),"normal"===f&&b in $a&&(f=$a[b]),""===c||c?(e=parseFloat(f),c===!0||isFinite(e)?e||0:f):f}}),n.each(["height","width"],function(a,b){n.cssHooks[b]={get:function(a,c,d){return c?Xa.test(n.css(a,"display"))&&0===a.offsetWidth?Pa(a,Za,function(){return fb(a,b,d)}):fb(a,b,d):void 0},set:function(a,c,d){var e=d&&Ra(a);return db(a,c,d?eb(a,b,d,l.boxSizing&&"border-box"===n.css(a,"boxSizing",!1,e),e):0)}}}),l.opacity||(n.cssHooks.opacity={get:function(a,b){return Wa.test((b&&a.currentStyle?a.currentStyle.filter:a.style.filter)||"")?.01*parseFloat(RegExp.$1)+"":b?"1":""},set:function(a,b){var c=a.style,d=a.currentStyle,e=n.isNumeric(b)?"alpha(opacity="+100*b+")":"",f=d&&d.filter||c.filter||"";c.zoom=1,(b>=1||""===b)&&""===n.trim(f.replace(Va,""))&&c.removeAttribute&&(c.removeAttribute("filter"),""===b||d&&!d.filter)||(c.filter=Va.test(f)?f.replace(Va,e):f+" "+e)}}),n.cssHooks.marginRight=Ua(l.reliableMarginRight,function(a,b){return b?Pa(a,{display:"inline-block"},Sa,[a,"marginRight"]):void 0}),n.cssHooks.marginLeft=Ua(l.reliableMarginLeft,function(a,b){return b?(parseFloat(Sa(a,"marginLeft"))||(n.contains(a.ownerDocument,a)?a.getBoundingClientRect().left-Pa(a,{
marginLeft:0},function(){return a.getBoundingClientRect().left}):0))+"px":void 0}),n.each({margin:"",padding:"",border:"Width"},function(a,b){n.cssHooks[a+b]={expand:function(c){for(var d=0,e={},f="string"==typeof c?c.split(" "):[c];4>d;d++)e[a+V[d]+b]=f[d]||f[d-2]||f[0];return e}},Na.test(a)||(n.cssHooks[a+b].set=db)}),n.fn.extend({css:function(a,b){return Y(this,function(a,b,c){var d,e,f={},g=0;if(n.isArray(b)){for(d=Ra(a),e=b.length;e>g;g++)f[b[g]]=n.css(a,b[g],!1,d);return f}return void 0!==c?n.style(a,b,c):n.css(a,b)},a,b,arguments.length>1)},show:function(){return cb(this,!0)},hide:function(){return cb(this)},toggle:function(a){return"boolean"==typeof a?a?this.show():this.hide():this.each(function(){W(this)?n(this).show():n(this).hide()})}});function gb(a,b,c,d,e){return new gb.prototype.init(a,b,c,d,e)}n.Tween=gb,gb.prototype={constructor:gb,init:function(a,b,c,d,e,f){this.elem=a,this.prop=c,this.easing=e||n.easing._default,this.options=b,this.start=this.now=this.cur(),this.end=d,this.unit=f||(n.cssNumber[c]?"":"px")},cur:function(){var a=gb.propHooks[this.prop];return a&&a.get?a.get(this):gb.propHooks._default.get(this)},run:function(a){var b,c=gb.propHooks[this.prop];return this.options.duration?this.pos=b=n.easing[this.easing](a,this.options.duration*a,0,1,this.options.duration):this.pos=b=a,this.now=(this.end-this.start)*b+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),c&&c.set?c.set(this):gb.propHooks._default.set(this),this}},gb.prototype.init.prototype=gb.prototype,gb.propHooks={_default:{get:function(a){var b;return 1!==a.elem.nodeType||null!=a.elem[a.prop]&&null==a.elem.style[a.prop]?a.elem[a.prop]:(b=n.css(a.elem,a.prop,""),b&&"auto"!==b?b:0)},set:function(a){n.fx.step[a.prop]?n.fx.step[a.prop](a):1!==a.elem.nodeType||null==a.elem.style[n.cssProps[a.prop]]&&!n.cssHooks[a.prop]?a.elem[a.prop]=a.now:n.style(a.elem,a.prop,a.now+a.unit)}}},gb.propHooks.scrollTop=gb.propHooks.scrollLeft={set:function(a){a.elem.nodeType&&a.elem.parentNode&&(a.elem[a.prop]=a.now)}},n.easing={linear:function(a){return a},swing:function(a){return.5-Math.cos(a*Math.PI)/2},_default:"swing"},n.fx=gb.prototype.init,n.fx.step={};var hb,ib,jb=/^(?:toggle|show|hide)$/,kb=/queueHooks$/;function lb(){return a.setTimeout(function(){hb=void 0}),hb=n.now()}function mb(a,b){var c,d={height:a},e=0;for(b=b?1:0;4>e;e+=2-b)c=V[e],d["margin"+c]=d["padding"+c]=a;return b&&(d.opacity=d.width=a),d}function nb(a,b,c){for(var d,e=(qb.tweeners[b]||[]).concat(qb.tweeners["*"]),f=0,g=e.length;g>f;f++)if(d=e[f].call(c,b,a))return d}function ob(a,b,c){var d,e,f,g,h,i,j,k,m=this,o={},p=a.style,q=a.nodeType&&W(a),r=n._data(a,"fxshow");c.queue||(h=n._queueHooks(a,"fx"),null==h.unqueued&&(h.unqueued=0,i=h.empty.fire,h.empty.fire=function(){h.unqueued||i()}),h.unqueued++,m.always(function(){m.always(function(){h.unqueued--,n.queue(a,"fx").length||h.empty.fire()})})),1===a.nodeType&&("height"in b||"width"in b)&&(c.overflow=[p.overflow,p.overflowX,p.overflowY],j=n.css(a,"display"),k="none"===j?n._data(a,"olddisplay")||Ma(a.nodeName):j,"inline"===k&&"none"===n.css(a,"float")&&(l.inlineBlockNeedsLayout&&"inline"!==Ma(a.nodeName)?p.zoom=1:p.display="inline-block")),c.overflow&&(p.overflow="hidden",l.shrinkWrapBlocks()||m.always(function(){p.overflow=c.overflow[0],p.overflowX=c.overflow[1],p.overflowY=c.overflow[2]}));for(d in b)if(e=b[d],jb.exec(e)){if(delete b[d],f=f||"toggle"===e,e===(q?"hide":"show")){if("show"!==e||!r||void 0===r[d])continue;q=!0}o[d]=r&&r[d]||n.style(a,d)}else j=void 0;if(n.isEmptyObject(o))"inline"===("none"===j?Ma(a.nodeName):j)&&(p.display=j);else{r?"hidden"in r&&(q=r.hidden):r=n._data(a,"fxshow",{}),f&&(r.hidden=!q),q?n(a).show():m.done(function(){n(a).hide()}),m.done(function(){var b;n._removeData(a,"fxshow");for(b in o)n.style(a,b,o[b])});for(d in o)g=nb(q?r[d]:0,d,m),d in r||(r[d]=g.start,q&&(g.end=g.start,g.start="width"===d||"height"===d?1:0))}}function pb(a,b){var c,d,e,f,g;for(c in a)if(d=n.camelCase(c),e=b[d],f=a[c],n.isArray(f)&&(e=f[1],f=a[c]=f[0]),c!==d&&(a[d]=f,delete a[c]),g=n.cssHooks[d],g&&"expand"in g){f=g.expand(f),delete a[d];for(c in f)c in a||(a[c]=f[c],b[c]=e)}else b[d]=e}function qb(a,b,c){var d,e,f=0,g=qb.prefilters.length,h=n.Deferred().always(function(){delete i.elem}),i=function(){if(e)return!1;for(var b=hb||lb(),c=Math.max(0,j.startTime+j.duration-b),d=c/j.duration||0,f=1-d,g=0,i=j.tweens.length;i>g;g++)j.tweens[g].run(f);return h.notifyWith(a,[j,f,c]),1>f&&i?c:(h.resolveWith(a,[j]),!1)},j=h.promise({elem:a,props:n.extend({},b),opts:n.extend(!0,{specialEasing:{},easing:n.easing._default},c),originalProperties:b,originalOptions:c,startTime:hb||lb(),duration:c.duration,tweens:[],createTween:function(b,c){var d=n.Tween(a,j.opts,b,c,j.opts.specialEasing[b]||j.opts.easing);return j.tweens.push(d),d},stop:function(b){var c=0,d=b?j.tweens.length:0;if(e)return this;for(e=!0;d>c;c++)j.tweens[c].run(1);return b?(h.notifyWith(a,[j,1,0]),h.resolveWith(a,[j,b])):h.rejectWith(a,[j,b]),this}}),k=j.props;for(pb(k,j.opts.specialEasing);g>f;f++)if(d=qb.prefilters[f].call(j,a,k,j.opts))return n.isFunction(d.stop)&&(n._queueHooks(j.elem,j.opts.queue).stop=n.proxy(d.stop,d)),d;return n.map(k,nb,j),n.isFunction(j.opts.start)&&j.opts.start.call(a,j),n.fx.timer(n.extend(i,{elem:a,anim:j,queue:j.opts.queue})),j.progress(j.opts.progress).done(j.opts.done,j.opts.complete).fail(j.opts.fail).always(j.opts.always)}n.Animation=n.extend(qb,{tweeners:{"*":[function(a,b){var c=this.createTween(a,b);return X(c.elem,a,U.exec(b),c),c}]},tweener:function(a,b){n.isFunction(a)?(b=a,a=["*"]):a=a.match(G);for(var c,d=0,e=a.length;e>d;d++)c=a[d],qb.tweeners[c]=qb.tweeners[c]||[],qb.tweeners[c].unshift(b)},prefilters:[ob],prefilter:function(a,b){b?qb.prefilters.unshift(a):qb.prefilters.push(a)}}),n.speed=function(a,b,c){var d=a&&"object"==typeof a?n.extend({},a):{complete:c||!c&&b||n.isFunction(a)&&a,duration:a,easing:c&&b||b&&!n.isFunction(b)&&b};return d.duration=n.fx.off?0:"number"==typeof d.duration?d.duration:d.duration in n.fx.speeds?n.fx.speeds[d.duration]:n.fx.speeds._default,null!=d.queue&&d.queue!==!0||(d.queue="fx"),d.old=d.complete,d.complete=function(){n.isFunction(d.old)&&d.old.call(this),d.queue&&n.dequeue(this,d.queue)},d},n.fn.extend({fadeTo:function(a,b,c,d){return this.filter(W).css("opacity",0).show().end().animate({opacity:b},a,c,d)},animate:function(a,b,c,d){var e=n.isEmptyObject(a),f=n.speed(b,c,d),g=function(){var b=qb(this,n.extend({},a),f);(e||n._data(this,"finish"))&&b.stop(!0)};return g.finish=g,e||f.queue===!1?this.each(g):this.queue(f.queue,g)},stop:function(a,b,c){var d=function(a){var b=a.stop;delete a.stop,b(c)};return"string"!=typeof a&&(c=b,b=a,a=void 0),b&&a!==!1&&this.queue(a||"fx",[]),this.each(function(){var b=!0,e=null!=a&&a+"queueHooks",f=n.timers,g=n._data(this);if(e)g[e]&&g[e].stop&&d(g[e]);else for(e in g)g[e]&&g[e].stop&&kb.test(e)&&d(g[e]);for(e=f.length;e--;)f[e].elem!==this||null!=a&&f[e].queue!==a||(f[e].anim.stop(c),b=!1,f.splice(e,1));!b&&c||n.dequeue(this,a)})},finish:function(a){return a!==!1&&(a=a||"fx"),this.each(function(){var b,c=n._data(this),d=c[a+"queue"],e=c[a+"queueHooks"],f=n.timers,g=d?d.length:0;for(c.finish=!0,n.queue(this,a,[]),e&&e.stop&&e.stop.call(this,!0),b=f.length;b--;)f[b].elem===this&&f[b].queue===a&&(f[b].anim.stop(!0),f.splice(b,1));for(b=0;g>b;b++)d[b]&&d[b].finish&&d[b].finish.call(this);delete c.finish})}}),n.each(["toggle","show","hide"],function(a,b){var c=n.fn[b];n.fn[b]=function(a,d,e){return null==a||"boolean"==typeof a?c.apply(this,arguments):this.animate(mb(b,!0),a,d,e)}}),n.each({slideDown:mb("show"),slideUp:mb("hide"),slideToggle:mb("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(a,b){n.fn[a]=function(a,c,d){return this.animate(b,a,c,d)}}),n.timers=[],n.fx.tick=function(){var a,b=n.timers,c=0;for(hb=n.now();c<b.length;c++)a=b[c],a()||b[c]!==a||b.splice(c--,1);b.length||n.fx.stop(),hb=void 0},n.fx.timer=function(a){n.timers.push(a),a()?n.fx.start():n.timers.pop()},n.fx.interval=13,n.fx.start=function(){ib||(ib=a.setInterval(n.fx.tick,n.fx.interval))},n.fx.stop=function(){a.clearInterval(ib),ib=null},n.fx.speeds={slow:600,fast:200,_default:400},n.fn.delay=function(b,c){return b=n.fx?n.fx.speeds[b]||b:b,c=c||"fx",this.queue(c,function(c,d){var e=a.setTimeout(c,b);d.stop=function(){a.clearTimeout(e)}})},function(){var a,b=d.createElement("input"),c=d.createElement("div"),e=d.createElement("select"),f=e.appendChild(d.createElement("option"));c=d.createElement("div"),c.setAttribute("className","t"),c.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",a=c.getElementsByTagName("a")[0],b.setAttribute("type","checkbox"),c.appendChild(b),a=c.getElementsByTagName("a")[0],a.style.cssText="top:1px",l.getSetAttribute="t"!==c.className,l.style=/top/.test(a.getAttribute("style")),l.hrefNormalized="/a"===a.getAttribute("href"),l.checkOn=!!b.value,l.optSelected=f.selected,l.enctype=!!d.createElement("form").enctype,e.disabled=!0,l.optDisabled=!f.disabled,b=d.createElement("input"),b.setAttribute("value",""),l.input=""===b.getAttribute("value"),b.value="t",b.setAttribute("type","radio"),l.radioValue="t"===b.value}();var rb=/\r/g,sb=/[\x20\t\r\n\f]+/g;n.fn.extend({val:function(a){var b,c,d,e=this[0];{if(arguments.length)return d=n.isFunction(a),this.each(function(c){var e;1===this.nodeType&&(e=d?a.call(this,c,n(this).val()):a,null==e?e="":"number"==typeof e?e+="":n.isArray(e)&&(e=n.map(e,function(a){return null==a?"":a+""})),b=n.valHooks[this.type]||n.valHooks[this.nodeName.toLowerCase()],b&&"set"in b&&void 0!==b.set(this,e,"value")||(this.value=e))});if(e)return b=n.valHooks[e.type]||n.valHooks[e.nodeName.toLowerCase()],b&&"get"in b&&void 0!==(c=b.get(e,"value"))?c:(c=e.value,"string"==typeof c?c.replace(rb,""):null==c?"":c)}}}),n.extend({valHooks:{option:{get:function(a){var b=n.find.attr(a,"value");return null!=b?b:n.trim(n.text(a)).replace(sb," ")}},select:{get:function(a){for(var b,c,d=a.options,e=a.selectedIndex,f="select-one"===a.type||0>e,g=f?null:[],h=f?e+1:d.length,i=0>e?h:f?e:0;h>i;i++)if(c=d[i],(c.selected||i===e)&&(l.optDisabled?!c.disabled:null===c.getAttribute("disabled"))&&(!c.parentNode.disabled||!n.nodeName(c.parentNode,"optgroup"))){if(b=n(c).val(),f)return b;g.push(b)}return g},set:function(a,b){var c,d,e=a.options,f=n.makeArray(b),g=e.length;while(g--)if(d=e[g],n.inArray(n.valHooks.option.get(d),f)>-1)try{d.selected=c=!0}catch(h){d.scrollHeight}else d.selected=!1;return c||(a.selectedIndex=-1),e}}}}),n.each(["radio","checkbox"],function(){n.valHooks[this]={set:function(a,b){return n.isArray(b)?a.checked=n.inArray(n(a).val(),b)>-1:void 0}},l.checkOn||(n.valHooks[this].get=function(a){return null===a.getAttribute("value")?"on":a.value})});var tb,ub,vb=n.expr.attrHandle,wb=/^(?:checked|selected)$/i,xb=l.getSetAttribute,yb=l.input;n.fn.extend({attr:function(a,b){return Y(this,n.attr,a,b,arguments.length>1)},removeAttr:function(a){return this.each(function(){n.removeAttr(this,a)})}}),n.extend({attr:function(a,b,c){var d,e,f=a.nodeType;if(3!==f&&8!==f&&2!==f)return"undefined"==typeof a.getAttribute?n.prop(a,b,c):(1===f&&n.isXMLDoc(a)||(b=b.toLowerCase(),e=n.attrHooks[b]||(n.expr.match.bool.test(b)?ub:tb)),void 0!==c?null===c?void n.removeAttr(a,b):e&&"set"in e&&void 0!==(d=e.set(a,c,b))?d:(a.setAttribute(b,c+""),c):e&&"get"in e&&null!==(d=e.get(a,b))?d:(d=n.find.attr(a,b),null==d?void 0:d))},attrHooks:{type:{set:function(a,b){if(!l.radioValue&&"radio"===b&&n.nodeName(a,"input")){var c=a.value;return a.setAttribute("type",b),c&&(a.value=c),b}}}},removeAttr:function(a,b){var c,d,e=0,f=b&&b.match(G);if(f&&1===a.nodeType)while(c=f[e++])d=n.propFix[c]||c,n.expr.match.bool.test(c)?yb&&xb||!wb.test(c)?a[d]=!1:a[n.camelCase("default-"+c)]=a[d]=!1:n.attr(a,c,""),a.removeAttribute(xb?c:d)}}),ub={set:function(a,b,c){return b===!1?n.removeAttr(a,c):yb&&xb||!wb.test(c)?a.setAttribute(!xb&&n.propFix[c]||c,c):a[n.camelCase("default-"+c)]=a[c]=!0,c}},n.each(n.expr.match.bool.source.match(/\w+/g),function(a,b){var c=vb[b]||n.find.attr;yb&&xb||!wb.test(b)?vb[b]=function(a,b,d){var e,f;return d||(f=vb[b],vb[b]=e,e=null!=c(a,b,d)?b.toLowerCase():null,vb[b]=f),e}:vb[b]=function(a,b,c){return c?void 0:a[n.camelCase("default-"+b)]?b.toLowerCase():null}}),yb&&xb||(n.attrHooks.value={set:function(a,b,c){return n.nodeName(a,"input")?void(a.defaultValue=b):tb&&tb.set(a,b,c)}}),xb||(tb={set:function(a,b,c){var d=a.getAttributeNode(c);return d||a.setAttributeNode(d=a.ownerDocument.createAttribute(c)),d.value=b+="","value"===c||b===a.getAttribute(c)?b:void 0}},vb.id=vb.name=vb.coords=function(a,b,c){var d;return c?void 0:(d=a.getAttributeNode(b))&&""!==d.value?d.value:null},n.valHooks.button={get:function(a,b){var c=a.getAttributeNode(b);return c&&c.specified?c.value:void 0},set:tb.set},n.attrHooks.contenteditable={set:function(a,b,c){tb.set(a,""===b?!1:b,c)}},n.each(["width","height"],function(a,b){n.attrHooks[b]={set:function(a,c){return""===c?(a.setAttribute(b,"auto"),c):void 0}}})),l.style||(n.attrHooks.style={get:function(a){return a.style.cssText||void 0},set:function(a,b){return a.style.cssText=b+""}});var zb=/^(?:input|select|textarea|button|object)$/i,Ab=/^(?:a|area)$/i;n.fn.extend({prop:function(a,b){return Y(this,n.prop,a,b,arguments.length>1)},removeProp:function(a){return a=n.propFix[a]||a,this.each(function(){try{this[a]=void 0,delete this[a]}catch(b){}})}}),n.extend({prop:function(a,b,c){var d,e,f=a.nodeType;if(3!==f&&8!==f&&2!==f)return 1===f&&n.isXMLDoc(a)||(b=n.propFix[b]||b,e=n.propHooks[b]),void 0!==c?e&&"set"in e&&void 0!==(d=e.set(a,c,b))?d:a[b]=c:e&&"get"in e&&null!==(d=e.get(a,b))?d:a[b]},propHooks:{tabIndex:{get:function(a){var b=n.find.attr(a,"tabindex");return b?parseInt(b,10):zb.test(a.nodeName)||Ab.test(a.nodeName)&&a.href?0:-1}}},propFix:{"for":"htmlFor","class":"className"}}),l.hrefNormalized||n.each(["href","src"],function(a,b){n.propHooks[b]={get:function(a){return a.getAttribute(b,4)}}}),l.optSelected||(n.propHooks.selected={get:function(a){var b=a.parentNode;return b&&(b.selectedIndex,b.parentNode&&b.parentNode.selectedIndex),null},set:function(a){var b=a.parentNode;b&&(b.selectedIndex,b.parentNode&&b.parentNode.selectedIndex)}}),n.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){n.propFix[this.toLowerCase()]=this}),l.enctype||(n.propFix.enctype="encoding");var Bb=/[\t\r\n\f]/g;function Cb(a){return n.attr(a,"class")||""}n.fn.extend({addClass:function(a){var b,c,d,e,f,g,h,i=0;if(n.isFunction(a))return this.each(function(b){n(this).addClass(a.call(this,b,Cb(this)))});if("string"==typeof a&&a){b=a.match(G)||[];while(c=this[i++])if(e=Cb(c),d=1===c.nodeType&&(" "+e+" ").replace(Bb," ")){g=0;while(f=b[g++])d.indexOf(" "+f+" ")<0&&(d+=f+" ");h=n.trim(d),e!==h&&n.attr(c,"class",h)}}return this},removeClass:function(a){var b,c,d,e,f,g,h,i=0;if(n.isFunction(a))return this.each(function(b){n(this).removeClass(a.call(this,b,Cb(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof a&&a){b=a.match(G)||[];while(c=this[i++])if(e=Cb(c),d=1===c.nodeType&&(" "+e+" ").replace(Bb," ")){g=0;while(f=b[g++])while(d.indexOf(" "+f+" ")>-1)d=d.replace(" "+f+" "," ");h=n.trim(d),e!==h&&n.attr(c,"class",h)}}return this},toggleClass:function(a,b){var c=typeof a;return"boolean"==typeof b&&"string"===c?b?this.addClass(a):this.removeClass(a):n.isFunction(a)?this.each(function(c){n(this).toggleClass(a.call(this,c,Cb(this),b),b)}):this.each(function(){var b,d,e,f;if("string"===c){d=0,e=n(this),f=a.match(G)||[];while(b=f[d++])e.hasClass(b)?e.removeClass(b):e.addClass(b)}else void 0!==a&&"boolean"!==c||(b=Cb(this),b&&n._data(this,"__className__",b),n.attr(this,"class",b||a===!1?"":n._data(this,"__className__")||""))})},hasClass:function(a){var b,c,d=0;b=" "+a+" ";while(c=this[d++])if(1===c.nodeType&&(" "+Cb(c)+" ").replace(Bb," ").indexOf(b)>-1)return!0;return!1}}),n.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(a,b){n.fn[b]=function(a,c){return arguments.length>0?this.on(b,null,a,c):this.trigger(b)}}),n.fn.extend({hover:function(a,b){return this.mouseenter(a).mouseleave(b||a)}});var Db=a.location,Eb=n.now(),Fb=/\?/,Gb=/(,)|(\[|{)|(}|])|"(?:[^"\\\r\n]|\\["\\\/bfnrt]|\\u[\da-fA-F]{4})*"\s*:?|true|false|null|-?(?!0\d)\d+(?:\.\d+|)(?:[eE][+-]?\d+|)/g;n.parseJSON=function(b){if(a.JSON&&a.JSON.parse)return a.JSON.parse(b+"");var c,d=null,e=n.trim(b+"");return e&&!n.trim(e.replace(Gb,function(a,b,e,f){return c&&b&&(d=0),0===d?a:(c=e||b,d+=!f-!e,"")}))?Function("return "+e)():n.error("Invalid JSON: "+b)},n.parseXML=function(b){var c,d;if(!b||"string"!=typeof b)return null;try{a.DOMParser?(d=new a.DOMParser,c=d.parseFromString(b,"text/xml")):(c=new a.ActiveXObject("Microsoft.XMLDOM"),c.async="false",c.loadXML(b))}catch(e){c=void 0}return c&&c.documentElement&&!c.getElementsByTagName("parsererror").length||n.error("Invalid XML: "+b),c};var Hb=/#.*$/,Ib=/([?&])_=[^&]*/,Jb=/^(.*?):[ \t]*([^\r\n]*)\r?$/gm,Kb=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,Lb=/^(?:GET|HEAD)$/,Mb=/^\/\//,Nb=/^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,Ob={},Pb={},Qb="*/".concat("*"),Rb=Db.href,Sb=Nb.exec(Rb.toLowerCase())||[];function Tb(a){return function(b,c){"string"!=typeof b&&(c=b,b="*");var d,e=0,f=b.toLowerCase().match(G)||[];if(n.isFunction(c))while(d=f[e++])"+"===d.charAt(0)?(d=d.slice(1)||"*",(a[d]=a[d]||[]).unshift(c)):(a[d]=a[d]||[]).push(c)}}function Ub(a,b,c,d){var e={},f=a===Pb;function g(h){var i;return e[h]=!0,n.each(a[h]||[],function(a,h){var j=h(b,c,d);return"string"!=typeof j||f||e[j]?f?!(i=j):void 0:(b.dataTypes.unshift(j),g(j),!1)}),i}return g(b.dataTypes[0])||!e["*"]&&g("*")}function Vb(a,b){var c,d,e=n.ajaxSettings.flatOptions||{};for(d in b)void 0!==b[d]&&((e[d]?a:c||(c={}))[d]=b[d]);return c&&n.extend(!0,a,c),a}function Wb(a,b,c){var d,e,f,g,h=a.contents,i=a.dataTypes;while("*"===i[0])i.shift(),void 0===e&&(e=a.mimeType||b.getResponseHeader("Content-Type"));if(e)for(g in h)if(h[g]&&h[g].test(e)){i.unshift(g);break}if(i[0]in c)f=i[0];else{for(g in c){if(!i[0]||a.converters[g+" "+i[0]]){f=g;break}d||(d=g)}f=f||d}return f?(f!==i[0]&&i.unshift(f),c[f]):void 0}function Xb(a,b,c,d){var e,f,g,h,i,j={},k=a.dataTypes.slice();if(k[1])for(g in a.converters)j[g.toLowerCase()]=a.converters[g];f=k.shift();while(f)if(a.responseFields[f]&&(c[a.responseFields[f]]=b),!i&&d&&a.dataFilter&&(b=a.dataFilter(b,a.dataType)),i=f,f=k.shift())if("*"===f)f=i;else if("*"!==i&&i!==f){if(g=j[i+" "+f]||j["* "+f],!g)for(e in j)if(h=e.split(" "),h[1]===f&&(g=j[i+" "+h[0]]||j["* "+h[0]])){g===!0?g=j[e]:j[e]!==!0&&(f=h[0],k.unshift(h[1]));break}if(g!==!0)if(g&&a["throws"])b=g(b);else try{b=g(b)}catch(l){return{state:"parsererror",error:g?l:"No conversion from "+i+" to "+f}}}return{state:"success",data:b}}n.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Rb,type:"GET",isLocal:Kb.test(Sb[1]),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Qb,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":n.parseJSON,"text xml":n.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(a,b){return b?Vb(Vb(a,n.ajaxSettings),b):Vb(n.ajaxSettings,a)},ajaxPrefilter:Tb(Ob),ajaxTransport:Tb(Pb),ajax:function(b,c){"object"==typeof b&&(c=b,b=void 0),c=c||{};var d,e,f,g,h,i,j,k,l=n.ajaxSetup({},c),m=l.context||l,o=l.context&&(m.nodeType||m.jquery)?n(m):n.event,p=n.Deferred(),q=n.Callbacks("once memory"),r=l.statusCode||{},s={},t={},u=0,v="canceled",w={readyState:0,getResponseHeader:function(a){var b;if(2===u){if(!k){k={};while(b=Jb.exec(g))k[b[1].toLowerCase()]=b[2]}b=k[a.toLowerCase()]}return null==b?null:b},getAllResponseHeaders:function(){return 2===u?g:null},setRequestHeader:function(a,b){var c=a.toLowerCase();return u||(a=t[c]=t[c]||a,s[a]=b),this},overrideMimeType:function(a){return u||(l.mimeType=a),this},statusCode:function(a){var b;if(a)if(2>u)for(b in a)r[b]=[r[b],a[b]];else w.always(a[w.status]);return this},abort:function(a){var b=a||v;return j&&j.abort(b),y(0,b),this}};if(p.promise(w).complete=q.add,w.success=w.done,w.error=w.fail,l.url=((b||l.url||Rb)+"").replace(Hb,"").replace(Mb,Sb[1]+"//"),l.type=c.method||c.type||l.method||l.type,l.dataTypes=n.trim(l.dataType||"*").toLowerCase().match(G)||[""],null==l.crossDomain&&(d=Nb.exec(l.url.toLowerCase()),l.crossDomain=!(!d||d[1]===Sb[1]&&d[2]===Sb[2]&&(d[3]||("http:"===d[1]?"80":"443"))===(Sb[3]||("http:"===Sb[1]?"80":"443")))),l.data&&l.processData&&"string"!=typeof l.data&&(l.data=n.param(l.data,l.traditional)),Ub(Ob,l,c,w),2===u)return w;i=n.event&&l.global,i&&0===n.active++&&n.event.trigger("ajaxStart"),l.type=l.type.toUpperCase(),l.hasContent=!Lb.test(l.type),f=l.url,l.hasContent||(l.data&&(f=l.url+=(Fb.test(f)?"&":"?")+l.data,delete l.data),l.cache===!1&&(l.url=Ib.test(f)?f.replace(Ib,"$1_="+Eb++):f+(Fb.test(f)?"&":"?")+"_="+Eb++)),l.ifModified&&(n.lastModified[f]&&w.setRequestHeader("If-Modified-Since",n.lastModified[f]),n.etag[f]&&w.setRequestHeader("If-None-Match",n.etag[f])),(l.data&&l.hasContent&&l.contentType!==!1||c.contentType)&&w.setRequestHeader("Content-Type",l.contentType),w.setRequestHeader("Accept",l.dataTypes[0]&&l.accepts[l.dataTypes[0]]?l.accepts[l.dataTypes[0]]+("*"!==l.dataTypes[0]?", "+Qb+"; q=0.01":""):l.accepts["*"]);for(e in l.headers)w.setRequestHeader(e,l.headers[e]);if(l.beforeSend&&(l.beforeSend.call(m,w,l)===!1||2===u))return w.abort();v="abort";for(e in{success:1,error:1,complete:1})w[e](l[e]);if(j=Ub(Pb,l,c,w)){if(w.readyState=1,i&&o.trigger("ajaxSend",[w,l]),2===u)return w;l.async&&l.timeout>0&&(h=a.setTimeout(function(){w.abort("timeout")},l.timeout));try{u=1,j.send(s,y)}catch(x){if(!(2>u))throw x;y(-1,x)}}else y(-1,"No Transport");function y(b,c,d,e){var k,s,t,v,x,y=c;2!==u&&(u=2,h&&a.clearTimeout(h),j=void 0,g=e||"",w.readyState=b>0?4:0,k=b>=200&&300>b||304===b,d&&(v=Wb(l,w,d)),v=Xb(l,v,w,k),k?(l.ifModified&&(x=w.getResponseHeader("Last-Modified"),x&&(n.lastModified[f]=x),x=w.getResponseHeader("etag"),x&&(n.etag[f]=x)),204===b||"HEAD"===l.type?y="nocontent":304===b?y="notmodified":(y=v.state,s=v.data,t=v.error,k=!t)):(t=y,!b&&y||(y="error",0>b&&(b=0))),w.status=b,w.statusText=(c||y)+"",k?p.resolveWith(m,[s,y,w]):p.rejectWith(m,[w,y,t]),w.statusCode(r),r=void 0,i&&o.trigger(k?"ajaxSuccess":"ajaxError",[w,l,k?s:t]),q.fireWith(m,[w,y]),i&&(o.trigger("ajaxComplete",[w,l]),--n.active||n.event.trigger("ajaxStop")))}return w},getJSON:function(a,b,c){return n.get(a,b,c,"json")},getScript:function(a,b){return n.get(a,void 0,b,"script")}}),n.each(["get","post"],function(a,b){n[b]=function(a,c,d,e){return n.isFunction(c)&&(e=e||d,d=c,c=void 0),n.ajax(n.extend({url:a,type:b,dataType:e,data:c,success:d},n.isPlainObject(a)&&a))}}),n._evalUrl=function(a){return n.ajax({url:a,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,"throws":!0})},n.fn.extend({wrapAll:function(a){if(n.isFunction(a))return this.each(function(b){n(this).wrapAll(a.call(this,b))});if(this[0]){var b=n(a,this[0].ownerDocument).eq(0).clone(!0);this[0].parentNode&&b.insertBefore(this[0]),b.map(function(){var a=this;while(a.firstChild&&1===a.firstChild.nodeType)a=a.firstChild;return a}).append(this)}return this},wrapInner:function(a){return n.isFunction(a)?this.each(function(b){n(this).wrapInner(a.call(this,b))}):this.each(function(){var b=n(this),c=b.contents();c.length?c.wrapAll(a):b.append(a)})},wrap:function(a){var b=n.isFunction(a);return this.each(function(c){n(this).wrapAll(b?a.call(this,c):a)})},unwrap:function(){return this.parent().each(function(){n.nodeName(this,"body")||n(this).replaceWith(this.childNodes)}).end()}});function Yb(a){return a.style&&a.style.display||n.css(a,"display")}function Zb(a){if(!n.contains(a.ownerDocument||d,a))return!0;while(a&&1===a.nodeType){if("none"===Yb(a)||"hidden"===a.type)return!0;a=a.parentNode}return!1}n.expr.filters.hidden=function(a){return l.reliableHiddenOffsets()?a.offsetWidth<=0&&a.offsetHeight<=0&&!a.getClientRects().length:Zb(a)},n.expr.filters.visible=function(a){return!n.expr.filters.hidden(a)};var $b=/%20/g,_b=/\[\]$/,ac=/\r?\n/g,bc=/^(?:submit|button|image|reset|file)$/i,cc=/^(?:input|select|textarea|keygen)/i;function dc(a,b,c,d){var e;if(n.isArray(b))n.each(b,function(b,e){c||_b.test(a)?d(a,e):dc(a+"["+("object"==typeof e&&null!=e?b:"")+"]",e,c,d)});else if(c||"object"!==n.type(b))d(a,b);else for(e in b)dc(a+"["+e+"]",b[e],c,d)}n.param=function(a,b){var c,d=[],e=function(a,b){b=n.isFunction(b)?b():null==b?"":b,d[d.length]=encodeURIComponent(a)+"="+encodeURIComponent(b)};if(void 0===b&&(b=n.ajaxSettings&&n.ajaxSettings.traditional),n.isArray(a)||a.jquery&&!n.isPlainObject(a))n.each(a,function(){e(this.name,this.value)});else for(c in a)dc(c,a[c],b,e);return d.join("&").replace($b,"+")},n.fn.extend({serialize:function(){return n.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var a=n.prop(this,"elements");return a?n.makeArray(a):this}).filter(function(){var a=this.type;return this.name&&!n(this).is(":disabled")&&cc.test(this.nodeName)&&!bc.test(a)&&(this.checked||!Z.test(a))}).map(function(a,b){var c=n(this).val();return null==c?null:n.isArray(c)?n.map(c,function(a){return{name:b.name,value:a.replace(ac,"\r\n")}}):{name:b.name,value:c.replace(ac,"\r\n")}}).get()}}),n.ajaxSettings.xhr=void 0!==a.ActiveXObject?function(){return this.isLocal?ic():d.documentMode>8?hc():/^(get|post|head|put|delete|options)$/i.test(this.type)&&hc()||ic()}:hc;var ec=0,fc={},gc=n.ajaxSettings.xhr();a.attachEvent&&a.attachEvent("onunload",function(){for(var a in fc)fc[a](void 0,!0)}),l.cors=!!gc&&"withCredentials"in gc,gc=l.ajax=!!gc,gc&&n.ajaxTransport(function(b){if(!b.crossDomain||l.cors){var c;return{send:function(d,e){var f,g=b.xhr(),h=++ec;if(g.open(b.type,b.url,b.async,b.username,b.password),b.xhrFields)for(f in b.xhrFields)g[f]=b.xhrFields[f];b.mimeType&&g.overrideMimeType&&g.overrideMimeType(b.mimeType),b.crossDomain||d["X-Requested-With"]||(d["X-Requested-With"]="XMLHttpRequest");for(f in d)void 0!==d[f]&&g.setRequestHeader(f,d[f]+"");g.send(b.hasContent&&b.data||null),c=function(a,d){var f,i,j;if(c&&(d||4===g.readyState))if(delete fc[h],c=void 0,g.onreadystatechange=n.noop,d)4!==g.readyState&&g.abort();else{j={},f=g.status,"string"==typeof g.responseText&&(j.text=g.responseText);try{i=g.statusText}catch(k){i=""}f||!b.isLocal||b.crossDomain?1223===f&&(f=204):f=j.text?200:404}j&&e(f,i,j,g.getAllResponseHeaders())},b.async?4===g.readyState?a.setTimeout(c):g.onreadystatechange=fc[h]=c:c()},abort:function(){c&&c(void 0,!0)}}}});function hc(){try{return new a.XMLHttpRequest}catch(b){}}function ic(){try{return new a.ActiveXObject("Microsoft.XMLHTTP")}catch(b){}}n.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(a){return n.globalEval(a),a}}}),n.ajaxPrefilter("script",function(a){void 0===a.cache&&(a.cache=!1),a.crossDomain&&(a.type="GET",a.global=!1)}),n.ajaxTransport("script",function(a){if(a.crossDomain){var b,c=d.head||n("head")[0]||d.documentElement;return{send:function(e,f){b=d.createElement("script"),b.async=!0,a.scriptCharset&&(b.charset=a.scriptCharset),b.src=a.url,b.onload=b.onreadystatechange=function(a,c){(c||!b.readyState||/loaded|complete/.test(b.readyState))&&(b.onload=b.onreadystatechange=null,b.parentNode&&b.parentNode.removeChild(b),b=null,c||f(200,"success"))},c.insertBefore(b,c.firstChild)},abort:function(){b&&b.onload(void 0,!0)}}}});var jc=[],kc=/(=)\?(?=&|$)|\?\?/;n.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var a=jc.pop()||n.expando+"_"+Eb++;return this[a]=!0,a}}),n.ajaxPrefilter("json jsonp",function(b,c,d){var e,f,g,h=b.jsonp!==!1&&(kc.test(b.url)?"url":"string"==typeof b.data&&0===(b.contentType||"").indexOf("application/x-www-form-urlencoded")&&kc.test(b.data)&&"data");return h||"jsonp"===b.dataTypes[0]?(e=b.jsonpCallback=n.isFunction(b.jsonpCallback)?b.jsonpCallback():b.jsonpCallback,h?b[h]=b[h].replace(kc,"$1"+e):b.jsonp!==!1&&(b.url+=(Fb.test(b.url)?"&":"?")+b.jsonp+"="+e),b.converters["script json"]=function(){return g||n.error(e+" was not called"),g[0]},b.dataTypes[0]="json",f=a[e],a[e]=function(){g=arguments},d.always(function(){void 0===f?n(a).removeProp(e):a[e]=f,b[e]&&(b.jsonpCallback=c.jsonpCallback,jc.push(e)),g&&n.isFunction(f)&&f(g[0]),g=f=void 0}),"script"):void 0}),n.parseHTML=function(a,b,c){if(!a||"string"!=typeof a)return null;"boolean"==typeof b&&(c=b,b=!1),b=b||d;var e=x.exec(a),f=!c&&[];return e?[b.createElement(e[1])]:(e=ja([a],b,f),f&&f.length&&n(f).remove(),n.merge([],e.childNodes))};var lc=n.fn.load;n.fn.load=function(a,b,c){if("string"!=typeof a&&lc)return lc.apply(this,arguments);var d,e,f,g=this,h=a.indexOf(" ");return h>-1&&(d=n.trim(a.slice(h,a.length)),a=a.slice(0,h)),n.isFunction(b)?(c=b,b=void 0):b&&"object"==typeof b&&(e="POST"),g.length>0&&n.ajax({url:a,type:e||"GET",dataType:"html",data:b}).done(function(a){f=arguments,g.html(d?n("<div>").append(n.parseHTML(a)).find(d):a)}).always(c&&function(a,b){g.each(function(){c.apply(this,f||[a.responseText,b,a])})}),this},n.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(a,b){n.fn[b]=function(a){return this.on(b,a)}}),n.expr.filters.animated=function(a){return n.grep(n.timers,function(b){return a===b.elem}).length};function mc(a){return n.isWindow(a)?a:9===a.nodeType?a.defaultView||a.parentWindow:!1}n.offset={setOffset:function(a,b,c){var d,e,f,g,h,i,j,k=n.css(a,"position"),l=n(a),m={};"static"===k&&(a.style.position="relative"),h=l.offset(),f=n.css(a,"top"),i=n.css(a,"left"),j=("absolute"===k||"fixed"===k)&&n.inArray("auto",[f,i])>-1,j?(d=l.position(),g=d.top,e=d.left):(g=parseFloat(f)||0,e=parseFloat(i)||0),n.isFunction(b)&&(b=b.call(a,c,n.extend({},h))),null!=b.top&&(m.top=b.top-h.top+g),null!=b.left&&(m.left=b.left-h.left+e),"using"in b?b.using.call(a,m):l.css(m)}},n.fn.extend({offset:function(a){if(arguments.length)return void 0===a?this:this.each(function(b){n.offset.setOffset(this,a,b)});var b,c,d={top:0,left:0},e=this[0],f=e&&e.ownerDocument;if(f)return b=f.documentElement,n.contains(b,e)?("undefined"!=typeof e.getBoundingClientRect&&(d=e.getBoundingClientRect()),c=mc(f),{top:d.top+(c.pageYOffset||b.scrollTop)-(b.clientTop||0),left:d.left+(c.pageXOffset||b.scrollLeft)-(b.clientLeft||0)}):d},position:function(){if(this[0]){var a,b,c={top:0,left:0},d=this[0];return"fixed"===n.css(d,"position")?b=d.getBoundingClientRect():(a=this.offsetParent(),b=this.offset(),n.nodeName(a[0],"html")||(c=a.offset()),c.top+=n.css(a[0],"borderTopWidth",!0),c.left+=n.css(a[0],"borderLeftWidth",!0)),{top:b.top-c.top-n.css(d,"marginTop",!0),left:b.left-c.left-n.css(d,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){var a=this.offsetParent;while(a&&!n.nodeName(a,"html")&&"static"===n.css(a,"position"))a=a.offsetParent;return a||Qa})}}),n.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(a,b){var c=/Y/.test(b);n.fn[a]=function(d){return Y(this,function(a,d,e){var f=mc(a);return void 0===e?f?b in f?f[b]:f.document.documentElement[d]:a[d]:void(f?f.scrollTo(c?n(f).scrollLeft():e,c?e:n(f).scrollTop()):a[d]=e)},a,d,arguments.length,null)}}),n.each(["top","left"],function(a,b){n.cssHooks[b]=Ua(l.pixelPosition,function(a,c){return c?(c=Sa(a,b),Oa.test(c)?n(a).position()[b]+"px":c):void 0})}),n.each({Height:"height",Width:"width"},function(a,b){n.each({
padding:"inner"+a,content:b,"":"outer"+a},function(c,d){n.fn[d]=function(d,e){var f=arguments.length&&(c||"boolean"!=typeof d),g=c||(d===!0||e===!0?"margin":"border");return Y(this,function(b,c,d){var e;return n.isWindow(b)?b.document.documentElement["client"+a]:9===b.nodeType?(e=b.documentElement,Math.max(b.body["scroll"+a],e["scroll"+a],b.body["offset"+a],e["offset"+a],e["client"+a])):void 0===d?n.css(b,c,g):n.style(b,c,d,g)},b,f?d:void 0,f,null)}})}),n.fn.extend({bind:function(a,b,c){return this.on(a,null,b,c)},unbind:function(a,b){return this.off(a,null,b)},delegate:function(a,b,c,d){return this.on(b,a,c,d)},undelegate:function(a,b,c){return 1===arguments.length?this.off(a,"**"):this.off(b,a||"**",c)}}),n.fn.size=function(){return this.length},n.fn.andSelf=n.fn.addBack,"function"==typeof define&&define.amd&&define("jquery",[],function(){return n});var nc=a.jQuery,oc=a.$;return n.noConflict=function(b){return a.$===n&&(a.$=oc),b&&a.jQuery===n&&(a.jQuery=nc),n},b||(a.jQuery=a.$=n),n});

document.createElement("canvas").getContext || function () {
    function q() {
    }

    function n(D) {
        this.type_ = D, this.r1_ = this.y1_ = this.x1_ = this.r0_ = this.y0_ = this.x0_ = 0, this.colors_ = []
    }

    function l(E, F, D) {
        !A(F) || (E.m_ = F, D && (E.lineScale_ = ah(ag(F[0][0] * F[1][1] - F[0][1] * F[1][0]))))
    }

    function A(E) {
        var F = 0;
        for (; F < 3; F++) {
            var D = 0;
            for (; D < 2; D++) {
                if (!isFinite(E[F][D]) || isNaN(E[F][D])) {
                    return !1
                }
            }
        }
        return !0
    }

    function y(F, G, D, E) {
        F.currentPath_.push({
            type: "bezierCurveTo",
            cp1x: G.x,
            cp1y: G.y,
            cp2x: D.x,
            cp2y: D.y,
            x: E.x,
            y: E.y
        }), F.currentX_ = E.x, F.currentY_ = E.y
    }

    function w(D) {
        this.m_ = p(), this.mStack_ = [], this.aStack_ = [], this.currentPath_ = [], this.fillStyle = this.strokeStyle = "#000", this.lineWidth = 1, this.lineJoin = "miter", this.lineCap = "butt", this.miterLimit = a * 1, this.globalAlpha = 1, this.canvas = D;
        var E = D.ownerDocument.createElement("div");
        E.style.width = D.clientWidth + "px", E.style.height = D.clientHeight + "px", E.style.overflow = "hidden", E.style.position = "absolute", D.appendChild(E), this.element_ = E, this.lineScale_ = this.arcScaleY_ = this.arcScaleX_ = 1
    }

    function v(D) {
        switch (D) {
            case"butt":
                return "flat";
            case"round":
                return "round";
            case"square":
            default:
                return "square"
        }
    }

    function u(F) {
        var G, H = 1;
        F = String(F);
        if (F.substring(0, 3) == "rgb") {
            var I = F.indexOf("(", 3), J = F.indexOf(")", I + 1), D = F.substring(I + 1, J).split(",");
            G = "#";
            var E = 0;
            for (; E < 3; E++) {
                G += k[Number(D[E])]
            }
            D.length == 4 && F.substr(3, 1) == "a" && (H = D[3])
        } else {
            G = F
        }
        return {color: G, alpha: H}
    }

    function s(D, E) {
        E.fillStyle = D.fillStyle, E.lineCap = D.lineCap, E.lineJoin = D.lineJoin, E.lineWidth = D.lineWidth, E.miterLimit = D.miterLimit, E.shadowBlur = D.shadowBlur, E.shadowColor = D.shadowColor, E.shadowOffsetX = D.shadowOffsetX, E.shadowOffsetY = D.shadowOffsetY, E.strokeStyle = D.strokeStyle, E.globalAlpha = D.globalAlpha, E.arcScaleX_ = D.arcScaleX_, E.arcScaleY_ = D.arcScaleY_, E.lineScale_ = D.lineScale_
    }

    function r(F, G) {
        var H = p(), I = 0;
        for (; I < 3; I++) {
            var J = 0;
            for (; J < 3; J++) {
                var D = 0, E = 0;
                for (; E < 3; E++) {
                    D += F[I][E] * G[E][J]
                }
                H[I][J] = D
            }
        }
        return H
    }

    function p() {
        return [[1, 0, 0], [0, 1, 0], [0, 0, 1]]
    }

    function h(D) {
        var E = D.srcElement;
        E.firstChild && (E.firstChild.style.width = E.clientWidth + "px", E.firstChild.style.height = E.clientHeight + "px")
    }

    function g(D) {
        var E = D.srcElement;
        switch (D.propertyName) {
            case"width":
                E.style.width = E.attributes.width.nodeValue + "px", E.getContext().clearRect();
                break;
            case"height":
                E.style.height = E.attributes.height.nodeValue + "px", E.getContext().clearRect()
        }
    }

    function e(E, F) {
        var D = d.call(arguments, 2);
        return function () {
            return E.apply(F, D.concat(d.call(arguments)))
        }
    }

    function c() {
        return this.context_ || (this.context_ = new w(this))
    }

    var B = Math, C = B.round, ae = B.sin, af = B.cos, ag = B.abs, ah = B.sqrt, a = 10, b = a / 2, d = Array.prototype.slice, f = {
        init: function (D) {
            if (/MSIE/.test(navigator.userAgent) && !window.opera) {
                var E = D || document;
                E.createElement("canvas"), E.attachEvent("onreadystatechange", e(this.init_, this, E))
            }
        }, init_: function (F) {
            F.namespaces.g_vml_ || F.namespaces.add("g_vml_", "urn:schemas-microsoft-com:vml", "#default#VML"), F.namespaces.g_o_ || F.namespaces.add("g_o_", "urn:schemas-microsoft-com:office:office", "#default#VML");
            if (!F.styleSheets.ex_canvas_) {
                var G = F.createStyleSheet();
                G.owningElement.id = "ex_canvas_", G.cssText = "canvas{display:inline-block;overflow:hidden;text-align:left;width:300px;height:150px}g_vml_\\:*{behavior:url(#default#VML)}g_o_\\:*{behavior:url(#default#VML)}"
            }
            var D = F.getElementsByTagName("canvas"), E = 0;
            for (; E < D.length; E++) {
                this.initElement(D[E])
            }
        }, initElement: function (D) {
            if (!D.getContext) {
                D.getContext = c, D.innerHTML = "", D.attachEvent("onpropertychange", g), D.attachEvent("onresize", h);
                var E = D.attributes;
                E.width && E.width.specified ? D.style.width = E.width.nodeValue + "px" : D.width = D.clientWidth, E.height && E.height.specified ? D.style.height = E.height.nodeValue + "px" : D.height = D.clientHeight
            }
            return D
        }
    };
    f.init();
    var k = [], m = 0;
    for (; m < 16; m++) {
        var o = 0;
        for (; o < 16; o++) {
            k[m * 16 + o] = m.toString(16) + o.toString(16)
        }
    }
    var x = w.prototype;
    x.clearRect = function () {
        this.element_.innerHTML = ""
    }, x.beginPath = function () {
        this.currentPath_ = []
    }, x.moveTo = function (E, F) {
        var D = this.getCoords_(E, F);
        this.currentPath_.push({
            type: "moveTo",
            x: D.x,
            y: D.y
        }), this.currentX_ = D.x, this.currentY_ = D.y
    }, x.lineTo = function (E, F) {
        var D = this.getCoords_(E, F);
        this.currentPath_.push({
            type: "lineTo",
            x: D.x,
            y: D.y
        }), this.currentX_ = D.x, this.currentY_ = D.y
    }, x.bezierCurveTo = function (L, D, E, F, G, H) {
        var I = this.getCoords_(G, H), J = this.getCoords_(L, D), K = this.getCoords_(E, F);
        y(this, J, K, I)
    }, x.quadraticCurveTo = function (F, G, H, I) {
        var J = this.getCoords_(F, G), D = this.getCoords_(H, I), E = {
            x: this.currentX_ + 0.6666666666666666 * (J.x - this.currentX_),
            y: this.currentY_ + 0.6666666666666666 * (J.y - this.currentY_)
        };
        y(this, E, {
            x: E.x + (D.x - this.currentX_) / 3,
            y: E.y + (D.y - this.currentY_) / 3
        }, D)
    }, x.arc = function (L, D, E, F, K, M) {
        E *= a;
        var N = M ? "at" : "wa", O = L + af(F) * E - b, P = D + ae(F) * E - b, Q = L + af(K) * E - b, G = D + ae(K) * E - b;
        O == Q && !M && (O += 0.125);
        var H = this.getCoords_(L, D), I = this.getCoords_(O, P), J = this.getCoords_(Q, G);
        this.currentPath_.push({
            type: N,
            x: H.x,
            y: H.y,
            radius: E,
            xStart: I.x,
            yStart: I.y,
            xEnd: J.x,
            yEnd: J.y
        })
    }, x.rect = function (F, G, D, E) {
        this.moveTo(F, G), this.lineTo(F + D, G), this.lineTo(F + D, G + E), this.lineTo(F, G + E), this.closePath()
    }, x.strokeRect = function (G, H, D, E) {
        var F = this.currentPath_;
        this.beginPath(), this.moveTo(G, H), this.lineTo(G + D, H), this.lineTo(G + D, H + E), this.lineTo(G, H + E), this.closePath(), this.stroke(), this.currentPath_ = F
    }, x.fillRect = function (G, H, D, E) {
        var F = this.currentPath_;
        this.beginPath(), this.moveTo(G, H), this.lineTo(G + D, H), this.lineTo(G + D, H + E), this.lineTo(G, H + E), this.closePath(), this.fill(), this.currentPath_ = F
    }, x.createLinearGradient = function (G, H, D, E) {
        var F = new n("gradient");
        F.x0_ = G, F.y0_ = H, F.x1_ = D, F.y1_ = E;
        return F
    }, x.createRadialGradient = function (F, G, H, I, J, D) {
        var E = new n("gradientradial");
        E.x0_ = F, E.y0_ = G, E.r0_ = H, E.x1_ = I, E.y1_ = J, E.r1_ = D;
        return E
    }, x.drawImage = function (G) {
        var I, K, L, M, N, O, P, Q, R = G.runtimeStyle.width, T = G.runtimeStyle.height;
        G.runtimeStyle.width = "auto", G.runtimeStyle.height = "auto";
        var U = G.width, F = G.height;
        G.runtimeStyle.width = R, G.runtimeStyle.height = T;
        if (arguments.length == 3) {
            I = arguments[1], K = arguments[2], N = O = 0, P = L = U, Q = M = F
        } else {
            if (arguments.length == 5) {
                I = arguments[1], K = arguments[2], L = arguments[3], M = arguments[4], N = O = 0, P = U, Q = F
            } else {
                if (arguments.length == 9) {
                    N = arguments[1], O = arguments[2], P = arguments[3], Q = arguments[4], I = arguments[5], K = arguments[6], L = arguments[7], M = arguments[8]
                } else {
                    throw Error("Invalid number of arguments")
                }
            }
        }
        var H = this.getCoords_(I, K), J = [];
        J.push(" <g_vml_:group", ' coordsize="', a * 10, ",", a * 10, '"', ' coordorigin="0,0"', ' style="width:', 10, "px;height:", 10, "px;position:absolute;");
        if (this.m_[0][0] != 1 || this.m_[0][1]) {
            var D = [];
            D.push("M11=", this.m_[0][0], ",", "M12=", this.m_[1][0], ",", "M21=", this.m_[0][1], ",", "M22=", this.m_[1][1], ",", "Dx=", C(H.x / a), ",", "Dy=", C(H.y / a), "");
            var E = H, S = this.getCoords_(I + L, K), V = this.getCoords_(I, K + M), W = this.getCoords_(I + L, K + M);
            E.x = B.max(E.x, S.x, V.x, W.x), E.y = B.max(E.y, S.y, V.y, W.y), J.push("padding:0 ", C(E.x / a), "px ", C(E.y / a), "px 0;filter:progid:DXImageTransform.Microsoft.Matrix(", D.join(""), ", sizingmethod='clip');")
        } else {
            J.push("top:", C(H.y / a), "px;left:", C(H.x / a), "px;")
        }
        J.push(' ">', '<g_vml_:image src="', G.src, '"', ' style="width:', a * L, "px;", " height:", a * M, 'px;"', ' cropleft="', N / U, '"', ' croptop="', O / F, '"', ' cropright="', (U - N - P) / U, '"', ' cropbottom="', (F - O - Q) / F, '"', " />", "</g_vml_:group>"), this.element_.insertAdjacentHTML("BeforeEnd", J.join(""))
    }, x.stroke = function (K) {
        var M = [], O = u(K ? this.fillStyle : this.strokeStyle), Q = O.color, R = O.alpha * this.globalAlpha;
        M.push("<g_vml_:shape", ' filled="', !!K, '"', ' style="position:absolute;width:', 10, "px;height:", 10, 'px;"', ' coordorigin="0 0" coordsize="', a * 10, " ", a * 10, '"', ' stroked="', !K, '"', ' path="');
        var U = {x: null, y: null}, D = {x: null, y: null}, E = 0;
        for (; E < this.currentPath_.length; E++) {
            var F = this.currentPath_[E];
            switch (F.type) {
                case"moveTo":
                    M.push(" m ", C(F.x), ",", C(F.y));
                    break;
                case"lineTo":
                    M.push(" l ", C(F.x), ",", C(F.y));
                    break;
                case"close":
                    M.push(" x "), F = null;
                    break;
                case"bezierCurveTo":
                    M.push(" c ", C(F.cp1x), ",", C(F.cp1y), ",", C(F.cp2x), ",", C(F.cp2y), ",", C(F.x), ",", C(F.y));
                    break;
                case"at":
                case"wa":
                    M.push(" ", F.type, " ", C(F.x - this.arcScaleX_ * F.radius), ",", C(F.y - this.arcScaleY_ * F.radius), " ", C(F.x + this.arcScaleX_ * F.radius), ",", C(F.y + this.arcScaleY_ * F.radius), " ", C(F.xStart), ",", C(F.yStart), " ", C(F.xEnd), ",", C(F.yEnd))
            }
            if (F) {
                if (U.x == null || F.x < U.x) {
                    U.x = F.x
                }
                if (D.x == null || F.x > D.x) {
                    D.x = F.x
                }
                if (U.y == null || F.y < U.y) {
                    U.y = F.y
                }
                if (D.y == null || F.y > D.y) {
                    D.y = F.y
                }
            }
        }
        M.push(' ">');
        if (K) {
            if (typeof this.fillStyle == "object") {
                var H = this.fillStyle, J = 0, L = {x: 0, y: 0}, N = 0, S = 1;
                if (H.type_ == "gradient") {
                    var V = H.x1_ / this.arcScaleX_, X = H.y1_ / this.arcScaleY_, Z = this.getCoords_(H.x0_ / this.arcScaleX_, H.y0_ / this.arcScaleY_), ak = this.getCoords_(V, X);
                    J = Math.atan2(ak.x - Z.x, ak.y - Z.y) * 180 / Math.PI, J < 0 && (J += 360), J < 0.000001 && (J = 0)
                } else {
                    var Z = this.getCoords_(H.x0_, H.y0_), I = D.x - U.x, al = D.y - U.y;
                    L = {
                        x: (Z.x - U.x) / I,
                        y: (Z.y - U.y) / al
                    }, I /= this.arcScaleX_ * a, al /= this.arcScaleY_ * a;
                    var am = B.max(I, al);
                    N = 2 * H.r0_ / am, S = 2 * H.r1_ / am - N
                }
                var P = H.colors_;
                P.sort(function (ai, aj) {
                    return ai.offset - aj.offset
                });
                var T = P.length, W = P[0].color, Y = P[T - 1].color, aa = P[0].alpha * this.globalAlpha, ab = P[T - 1].alpha * this.globalAlpha, ad = [], E = 0;
                for (; E < T; E++) {
                    var G = P[E];
                    ad.push(G.offset * S + N + " " + G.color)
                }
                M.push('<g_vml_:fill type="', H.type_, '"', ' method="none" focus="100%"', ' color="', W, '"', ' color2="', Y, '"', ' colors="', ad.join(","), '"', ' opacity="', ab, '"', ' g_o_:opacity2="', aa, '"', ' angle="', J, '"', ' focusposition="', L.x, ",", L.y, '" />')
            } else {
                M.push('<g_vml_:fill color="', Q, '" opacity="', R, '" />')
            }
        } else {
            var ac = this.lineScale_ * this.lineWidth;
            ac < 1 && (R *= ac), M.push("<g_vml_:stroke", ' opacity="', R, '"', ' joinstyle="', this.lineJoin, '"', ' miterlimit="', this.miterLimit, '"', ' endcap="', v(this.lineCap), '"', ' weight="', ac, 'px"', ' color="', Q, '" />')
        }
        M.push("</g_vml_:shape>"), this.element_.insertAdjacentHTML("beforeEnd", M.join(""))
    }, x.fill = function () {
        this.stroke(!0)
    }, x.closePath = function () {
        this.currentPath_.push({type: "close"})
    }, x.getCoords_ = function (E, F) {
        var D = this.m_;
        return {
            x: a * (E * D[0][0] + F * D[1][0] + D[2][0]) - b,
            y: a * (E * D[0][1] + F * D[1][1] + D[2][1]) - b
        }
    }, x.save = function () {
        var D = {};
        s(this, D), this.aStack_.push(D), this.mStack_.push(this.m_), this.m_ = r(p(), this.m_)
    }, x.restore = function () {
        s(this.aStack_.pop(), this), this.m_ = this.mStack_.pop()
    }, x.translate = function (D, E) {
        l(this, r([[1, 0, 0], [0, 1, 0], [D, E, 1]], this.m_), !1)
    }, x.rotate = function (E) {
        var F = af(E), D = ae(E);
        l(this, r([[F, D, 0], [-D, F, 0], [0, 0, 1]], this.m_), !1)
    }, x.scale = function (D, E) {
        this.arcScaleX_ *= D, this.arcScaleY_ *= E, l(this, r([[D, 0, 0], [0, E, 0], [0, 0, 1]], this.m_), !0)
    }, x.transform = function (G, H, I, D, E, F) {
        l(this, r([[G, H, 0], [I, D, 0], [E, F, 1]], this.m_), !0)
    }, x.setTransform = function (G, H, I, D, E, F) {
        l(this, [[G, H, 0], [I, D, 0], [E, F, 1]], !0)
    }, x.clip = function () {
    }, x.arcTo = function () {
    }, x.createPattern = function () {
        return new q
    }, n.prototype.addColorStop = function (D, E) {
        E = u(E), this.colors_.push({offset: D, color: E.color, alpha: E.alpha})
    }, G_vmlCanvasManager = f, CanvasRenderingContext2D = w, CanvasGradient = n, CanvasPattern = q
}();
/* jQuery UI - v1.11.4 - 2015-03-11
 * http://jqueryui.com
 * Includes: core.js, widget.js, mouse.js, position.js, accordion.js, autocomplete.js, button.js, datepicker.js, dialog.js, draggable.js, droppable.js, effect.js, effect-blind.js, effect-bounce.js, effect-clip.js, effect-drop.js, effect-explode.js, effect-fade.js, effect-fold.js, effect-highlight.js, effect-puff.js, effect-pulsate.js, effect-scale.js, effect-shake.js, effect-size.js, effect-slide.js, effect-transfer.js, menu.js, progressbar.js, resizable.js, selectable.js, selectmenu.js, slider.js, sortable.js, spinner.js, tabs.js, tooltip.js
 * Copyright 2015 jQuery Foundation and other contributors; Licensed MIT */
(function (b) {
    "function" == typeof define && define.amd ? define(["./jquery"], b) : b(jQuery)
})(function (e) {
    function l(B, A) {
        var q, k, w, x = B.nodeName.toLowerCase();
        return "area" === x ? (q = B.parentNode, k = q.name, B.href && k && "map" === q.nodeName.toLowerCase() ? (w = e("img[usemap='#" + k + "']")[0], !!w && m(w)) : !1) : (/^(input|select|textarea|button|object)$/.test(x) ? !B.disabled : "a" === x ? B.href || A : A) && m(B)
    }

    function m(k) {
        return e.expr.filters.visible(k) && !e(k).parents().addBack().filter(function () {
            return "hidden" === e.css(this, "visibility")
        }).length
    }

    function Q(w) {
        for (var k, q; w.length && w[0] !== document;) {
            if (k = w.css("position"), ("absolute" === k || "relative" === k || "fixed" === k) && (q = parseInt(w.css("zIndex"), 10), !isNaN(q) && 0 !== q)) {
                return q
            }
            w = w.parent()
        }
        return 0
    }

    function r() {
        this._curInst = null, this._keyEvent = !1, this._disabledInputs = [], this._datepickerShowing = !1, this._inDialog = !1, this._mainDivId = "ui-datepicker-div", this._inlineClass = "ui-datepicker-inline", this._appendClass = "ui-datepicker-append", this._triggerClass = "ui-datepicker-trigger", this._dialogClass = "ui-datepicker-dialog", this._disableClass = "ui-datepicker-disabled", this._unselectableClass = "ui-datepicker-unselectable", this._currentClass = "ui-datepicker-current-day", this._dayOverClass = "ui-datepicker-days-cell-over", this.regional = [], this.regional[""] = {
            closeText: "Done",
            prevText: "Prev",
            nextText: "Next",
            currentText: "Today",
            monthNames: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
            monthNamesShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
            dayNames: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
            dayNamesShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
            dayNamesMin: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
            weekHeader: "Wk",
            dateFormat: "mm/dd/yy",
            firstDay: 0,
            isRTL: !1,
            showMonthAfterYear: !1,
            yearSuffix: ""
        }, this._defaults = {
            showOn: "focus",
            showAnim: "fadeIn",
            showOptions: {},
            defaultDate: null,
            appendText: "",
            buttonText: "...",
            buttonImage: "",
            buttonImageOnly: !1,
            hideIfNoPrevNext: !1,
            navigationAsDateFormat: !1,
            gotoCurrent: !1,
            changeMonth: !1,
            changeYear: !1,
            yearRange: "c-10:c+10",
            showOtherMonths: !1,
            selectOtherMonths: !1,
            showWeek: !1,
            calculateWeek: this.iso8601Week,
            shortYearCutoff: "+10",
            minDate: null,
            maxDate: null,
            duration: "fast",
            beforeShowDay: null,
            beforeShow: null,
            onSelect: null,
            onChangeMonthYear: null,
            onClose: null,
            numberOfMonths: 1,
            showCurrentAtPos: 0,
            stepMonths: 1,
            stepBigMonths: 12,
            altField: "",
            altFormat: "",
            constrainInput: !0,
            showButtonPanel: !1,
            autoSize: !1,
            disabled: !1
        }, e.extend(this._defaults, this.regional[""]), this.regional.en = e.extend(!0, {}, this.regional[""]), this.regional["en-US"] = e.extend(!0, {}, this.regional.en), this.dpDiv = a(e("<div id='" + this._mainDivId + "' class='ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>"))
    }

    function a(k) {
        var q = "button, .ui-datepicker-prev, .ui-datepicker-next, .ui-datepicker-calendar td a";
        return k.delegate(q, "mouseout", function () {
            e(this).removeClass("ui-state-hover"), -1 !== this.className.indexOf("ui-datepicker-prev") && e(this).removeClass("ui-datepicker-prev-hover"), -1 !== this.className.indexOf("ui-datepicker-next") && e(this).removeClass("ui-datepicker-next-hover")
        }).delegate(q, "mouseover", s)
    }

    function s() {
        e.datepicker._isDisabledDatepicker(v.inline ? v.dpDiv.parent()[0] : v.input[0]) || (e(this).parents(".ui-datepicker-calendar").find("a").removeClass("ui-state-hover"), e(this).addClass("ui-state-hover"), -1 !== this.className.indexOf("ui-datepicker-prev") && e(this).addClass("ui-datepicker-prev-hover"), -1 !== this.className.indexOf("ui-datepicker-next") && e(this).addClass("ui-datepicker-next-hover"))
    }

    function y(k, q) {
        e.extend(k, q);
        for (var w in q) {
            null == q[w] && (k[w] = q[w])
        }
        return k
    }

    function h(k) {
        return function () {
            var q = this.element.val();
            k.apply(this, arguments), this._refresh(), q !== this.element.val() && this._trigger("change")
        }
    }

    e.ui = e.ui || {}, e.extend(e.ui, {
        version: "1.11.4",
        keyCode: {
            BACKSPACE: 8,
            COMMA: 188,
            DELETE: 46,
            DOWN: 40,
            END: 35,
            ENTER: 13,
            ESCAPE: 27,
            HOME: 36,
            LEFT: 37,
            PAGE_DOWN: 34,
            PAGE_UP: 33,
            PERIOD: 190,
            RIGHT: 39,
            SPACE: 32,
            TAB: 9,
            UP: 38
        }
    }), e.fn.extend({
        scrollParent: function (x) {
            var A = this.css("position"), w = "absolute" === A, q = x ? /(auto|scroll|hidden)/ : /(auto|scroll)/, k = this.parents().filter(function () {
                var B = e(this);
                return w && "static" === B.css("position") ? !1 : q.test(B.css("overflow") + B.css("overflow-y") + B.css("overflow-x"))
            }).eq(0);
            return "fixed" !== A && k.length ? k : e(this[0].ownerDocument || document)
        }, uniqueId: function () {
            var k = 0;
            return function () {
                return this.each(function () {
                    this.id || (this.id = "ui-id-" + ++k)
                })
            }
        }(), removeUniqueId: function () {
            return this.each(function () {
                /^ui-id-\d+$/.test(this.id) && e(this).removeAttr("id")
            })
        }
    }), e.extend(e.expr[":"], {
        data: e.expr.createPseudo ? e.expr.createPseudo(function (k) {
            return function (q) {
                return !!e.data(q, k)
            }
        }) : function (k, q, w) {
            return !!e.data(k, w[3])
        }, focusable: function (k) {
            return l(k, !isNaN(e.attr(k, "tabindex")))
        }, tabbable: function (q) {
            var k = e.attr(q, "tabindex"), w = isNaN(k);
            return (w || k >= 0) && l(q, !w)
        }
    }), e("<a>").outerWidth(1).jquery || e.each(["Width", "Height"], function (A, B) {
        function x(C, D, F, E) {
            return e.each(q, function () {
                D -= parseFloat(e.css(C, "padding" + this)) || 0, F && (D -= parseFloat(e.css(C, "border" + this + "Width")) || 0), E && (D -= parseFloat(e.css(C, "margin" + this)) || 0)
            }), D
        }

        var q = "Width" === B ? ["Left", "Right"] : ["Top", "Bottom"], k = B.toLowerCase(), w = {
            innerWidth: e.fn.innerWidth,
            innerHeight: e.fn.innerHeight,
            outerWidth: e.fn.outerWidth,
            outerHeight: e.fn.outerHeight
        };
        e.fn["inner" + B] = function (C) {
            return void 0 === C ? w["inner" + B].call(this) : this.each(function () {
                e(this).css(k, x(this, C) + "px")
            })
        }, e.fn["outer" + B] = function (C, D) {
            return "number" != typeof C ? w["outer" + B].call(this, C) : this.each(function () {
                e(this).css(k, x(this, C, !0, D) + "px")
            })
        }
    }), e.fn.addBack || (e.fn.addBack = function (k) {
        return this.add(null == k ? this.prevObject : this.prevObject.filter(k))
    }), e("<a>").data("a-b", "a").removeData("a-b").data("a-b") && (e.fn.removeData = function (k) {
        return function (q) {
            return arguments.length ? k.call(this, e.camelCase(q)) : k.call(this)
        }
    }(e.fn.removeData)), e.ui.ie = !!/msie [\w.]+/.exec(navigator.userAgent.toLowerCase()), e.fn.extend({
        focus: function (k) {
            return function (q, w) {
                return "number" == typeof q ? this.each(function () {
                    var x = this;
                    setTimeout(function () {
                        e(x).focus(), w && w.call(x)
                    }, q)
                }) : k.apply(this, arguments)
            }
        }(e.fn.focus), disableSelection: function () {
            var k = "onselectstart" in document.createElement("div") ? "selectstart" : "mousedown";
            return function () {
                return this.bind(k + ".ui-disableSelection", function (q) {
                    q.preventDefault()
                })
            }
        }(), enableSelection: function () {
            return this.unbind(".ui-disableSelection")
        }, zIndex: function (k) {
            if (void 0 !== k) {
                return this.css("zIndex", k)
            }
            if (this.length) {
                for (var q, x, w = e(this[0]); w.length && w[0] !== document;) {
                    if (q = w.css("position"), ("absolute" === q || "relative" === q || "fixed" === q) && (x = parseInt(w.css("zIndex"), 10), !isNaN(x) && 0 !== x)) {
                        return x
                    }
                    w = w.parent()
                }
            }
            return 0
        }
    }), e.ui.plugin = {
        add: function (x, A, w) {
            var q, k = e.ui[x].prototype;
            for (q in w) {
                k.plugins[q] = k.plugins[q] || [], k.plugins[q].push([A, w[q]])
            }
        }, call: function (w, A, B, x) {
            var q, k = w.plugins[A];
            if (k && (x || w.element[0].parentNode && 11 !== w.element[0].parentNode.nodeType)) {
                for (q = 0; k.length > q; q++) {
                    w.options[k[q][0]] && k[q][1].apply(w.element, B)
                }
            }
        }
    };
    var o = 0, n = Array.prototype.slice;
    e.cleanData = function (k) {
        return function (B) {
            var A, w, q;
            for (q = 0; null != (w = B[q]); q++) {
                try {
                    A = e._data(w, "events"), A && A.remove && e(w).triggerHandler("remove")
                } catch (x) {
                }
            }
            k(B)
        }
    }(e.cleanData), e.widget = function (k, x, E) {
        var B, q, C, D, w = {}, A = k.split(".")[0];
        return k = k.split(".")[1], B = A + "-" + k, E || (E = x, x = e.Widget), e.expr[":"][B.toLowerCase()] = function (F) {
            return !!e.data(F, B)
        }, e[A] = e[A] || {}, q = e[A][k], C = e[A][k] = function (G, F) {
            return this._createWidget ? (arguments.length && this._createWidget(G, F), void 0) : new C(G, F)
        }, e.extend(C, q, {
            version: E.version,
            _proto: e.extend({}, E),
            _childConstructors: []
        }), D = new x, D.options = e.widget.extend({}, D.options), e.each(E, function (F, G) {
            return e.isFunction(G) ? (w[F] = function () {
                var H = function () {
                    return x.prototype[F].apply(this, arguments)
                }, I = function (J) {
                    return x.prototype[F].apply(this, J)
                };
                return function () {
                    var J, K = this._super, L = this._superApply;
                    return this._super = H, this._superApply = I, J = G.apply(this, arguments), this._super = K, this._superApply = L, J
                }
            }(), void 0) : (w[F] = G, void 0)
        }), C.prototype = e.widget.extend(D, {widgetEventPrefix: q ? D.widgetEventPrefix || k : k}, w, {
            constructor: C,
            namespace: A,
            widgetName: k,
            widgetFullName: B
        }), q ? (e.each(q._childConstructors, function (H, G) {
            var F = G.prototype;
            e.widget(F.namespace + "." + F.widgetName, C, G._proto)
        }), delete q._childConstructors) : x._childConstructors.push(C), e.widget.bridge(k, C), C
    }, e.widget.extend = function (A) {
        for (var B, x, q = n.call(arguments, 1), k = 0, w = q.length; w > k; k++) {
            for (B in q[k]) {
                x = q[k][B], q[k].hasOwnProperty(B) && void 0 !== x && (A[B] = e.isPlainObject(x) ? e.isPlainObject(A[B]) ? e.widget.extend({}, A[B], x) : e.widget.extend({}, x) : x)
            }
        }
        return A
    }, e.widget.bridge = function (k, q) {
        var w = q.prototype.widgetFullName || k;
        e.fn[k] = function (x) {
            var C = "string" == typeof x, A = n.call(arguments, 1), B = this;
            return C ? this.each(function () {
                var D, E = e.data(this, w);
                return "instance" === x ? (B = E, !1) : E ? e.isFunction(E[x]) && "_" !== x.charAt(0) ? (D = E[x].apply(E, A), D !== E && void 0 !== D ? (B = D && D.jquery ? B.pushStack(D.get()) : D, !1) : void 0) : e.error("no such method '" + x + "' for " + k + " widget instance") : e.error("cannot call methods on " + k + " prior to initialization; attempted to call method '" + x + "'")
            }) : (A.length && (x = e.widget.extend.apply(null, [x].concat(A))), this.each(function () {
                var D = e.data(this, w);
                D ? (D.option(x || {}), D._init && D._init()) : e.data(this, w, new q(x, this))
            })), B
        }
    }, e.Widget = function () {
    }, e.Widget._childConstructors = [], e.Widget.prototype = {
        widgetName: "widget",
        widgetEventPrefix: "",
        defaultElement: "<div>",
        options: {disabled: !1, create: null},
        _createWidget: function (k, q) {
            q = e(q || this.defaultElement || this)[0], this.element = e(q), this.uuid = o++, this.eventNamespace = "." + this.widgetName + this.uuid, this.bindings = e(), this.hoverable = e(), this.focusable = e(), q !== this && (e.data(q, this.widgetFullName, this), this._on(!0, this.element, {
                remove: function (w) {
                    w.target === q && this.destroy()
                }
            }), this.document = e(q.style ? q.ownerDocument : q.document || q), this.window = e(this.document[0].defaultView || this.document[0].parentWindow)), this.options = e.widget.extend({}, this.options, this._getCreateOptions(), k), this._create(), this._trigger("create", null, this._getCreateEventData()), this._init()
        },
        _getCreateOptions: e.noop,
        _getCreateEventData: e.noop,
        _create: e.noop,
        _init: e.noop,
        destroy: function () {
            this._destroy(), this.element.unbind(this.eventNamespace).removeData(this.widgetFullName).removeData(e.camelCase(this.widgetFullName)), this.widget().unbind(this.eventNamespace).removeAttr("aria-disabled").removeClass(this.widgetFullName + "-disabled ui-state-disabled"), this.bindings.unbind(this.eventNamespace), this.hoverable.removeClass("ui-state-hover"), this.focusable.removeClass("ui-state-focus")
        },
        _destroy: e.noop,
        widget: function () {
            return this.element
        },
        option: function (A, B) {
            var x, q, k, w = A;
            if (0 === arguments.length) {
                return e.widget.extend({}, this.options)
            }
            if ("string" == typeof A) {
                if (w = {}, x = A.split("."), A = x.shift(), x.length) {
                    for (q = w[A] = e.widget.extend({}, this.options[A]), k = 0; x.length - 1 > k; k++) {
                        q[x[k]] = q[x[k]] || {}, q = q[x[k]]
                    }
                    if (A = x.pop(), 1 === arguments.length) {
                        return void 0 === q[A] ? null : q[A]
                    }
                    q[A] = B
                } else {
                    if (1 === arguments.length) {
                        return void 0 === this.options[A] ? null : this.options[A]
                    }
                    w[A] = B
                }
            }
            return this._setOptions(w), this
        },
        _setOptions: function (k) {
            var q;
            for (q in k) {
                this._setOption(q, k[q])
            }
            return this
        },
        _setOption: function (k, q) {
            return this.options[k] = q, "disabled" === k && (this.widget().toggleClass(this.widgetFullName + "-disabled", !!q), q && (this.hoverable.removeClass("ui-state-hover"), this.focusable.removeClass("ui-state-focus"))), this
        },
        enable: function () {
            return this._setOptions({disabled: !1})
        },
        disable: function () {
            return this._setOptions({disabled: !0})
        },
        _on: function (x, A, w) {
            var q, k = this;
            "boolean" != typeof x && (w = A, A = x, x = !1), w ? (A = q = e(A), this.bindings = this.bindings.add(A)) : (w = A, A = this.element, q = this.widget()), e.each(w, function (G, D) {
                function F() {
                    return x || k.options.disabled !== !0 && !e(this).hasClass("ui-state-disabled") ? ("string" == typeof D ? k[D] : D).apply(k, arguments) : void 0
                }

                "string" != typeof D && (F.guid = D.guid = D.guid || F.guid || e.guid++);
                var B = G.match(/^([\w:-]*)\s*(.*)$/), C = B[1] + k.eventNamespace, E = B[2];
                E ? q.delegate(E, C, F) : A.bind(C, F)
            })
        },
        _off: function (k, q) {
            q = (q || "").split(" ").join(this.eventNamespace + " ") + this.eventNamespace, k.unbind(q).undelegate(q), this.bindings = e(this.bindings.not(k).get()), this.focusable = e(this.focusable.not(k).get()), this.hoverable = e(this.hoverable.not(k).get())
        },
        _delay: function (w, k) {
            function q() {
                return ("string" == typeof w ? x[w] : w).apply(x, arguments)
            }

            var x = this;
            return setTimeout(q, k || 0)
        },
        _hoverable: function (k) {
            this.hoverable = this.hoverable.add(k), this._on(k, {
                mouseenter: function (q) {
                    e(q.currentTarget).addClass("ui-state-hover")
                }, mouseleave: function (q) {
                    e(q.currentTarget).removeClass("ui-state-hover")
                }
            })
        },
        _focusable: function (k) {
            this.focusable = this.focusable.add(k), this._on(k, {
                focusin: function (q) {
                    e(q.currentTarget).addClass("ui-state-focus")
                }, focusout: function (q) {
                    e(q.currentTarget).removeClass("ui-state-focus")
                }
            })
        },
        _trigger: function (A, B, x) {
            var q, k, w = this.options[A];
            if (x = x || {}, B = e.Event(B), B.type = (A === this.widgetEventPrefix ? A : this.widgetEventPrefix + A).toLowerCase(), B.target = this.element[0], k = B.originalEvent) {
                for (q in k) {
                    q in B || (B[q] = k[q])
                }
            }
            return this.element.trigger(B, x), !(e.isFunction(w) && w.apply(this.element[0], [B].concat(x)) === !1 || B.isDefaultPrevented())
        }
    }, e.each({show: "fadeIn", hide: "fadeOut"}, function (k, q) {
        e.Widget.prototype["_" + k] = function (B, w, C) {
            "string" == typeof w && (w = {effect: w});
            var x, A = w ? w === !0 || "number" == typeof w ? q : w.effect || q : k;
            w = w || {}, "number" == typeof w && (w = {duration: w}), x = !e.isEmptyObject(w), w.complete = C, w.delay && B.delay(w.delay), x && e.effects && e.effects.effect[A] ? B[k](w) : A !== k && B[A] ? B[A](w.duration, w.easing, C) : B.queue(function (D) {
                e(this)[k](), C && C.call(B[0]), D()
            })
        }
    }), e.widget;
    var d = !1;
    e(document).mouseup(function () {
        d = !1
    }), e.widget("ui.mouse", {
        version: "1.11.4",
        options: {
            cancel: "input,textarea,button,select,option",
            distance: 1,
            delay: 0
        },
        _mouseInit: function () {
            var k = this;
            this.element.bind("mousedown." + this.widgetName, function (q) {
                return k._mouseDown(q)
            }).bind("click." + this.widgetName, function (q) {
                return !0 === e.data(q.target, k.widgetName + ".preventClickEvent") ? (e.removeData(q.target, k.widgetName + ".preventClickEvent"), q.stopImmediatePropagation(), !1) : void 0
            }), this.started = !1
        },
        _mouseDestroy: function () {
            this.element.unbind("." + this.widgetName), this._mouseMoveDelegate && this.document.unbind("mousemove." + this.widgetName, this._mouseMoveDelegate).unbind("mouseup." + this.widgetName, this._mouseUpDelegate)
        },
        _mouseDown: function (k) {
            if (!d) {
                this._mouseMoved = !1, this._mouseStarted && this._mouseUp(k), this._mouseDownEvent = k;
                var q = this, x = 1 === k.which, w = "string" == typeof this.options.cancel && k.target.nodeName ? e(k.target).closest(this.options.cancel).length : !1;
                return x && !w && this._mouseCapture(k) ? (this.mouseDelayMet = !this.options.delay, this.mouseDelayMet || (this._mouseDelayTimer = setTimeout(function () {
                    q.mouseDelayMet = !0
                }, this.options.delay)), this._mouseDistanceMet(k) && this._mouseDelayMet(k) && (this._mouseStarted = this._mouseStart(k) !== !1, !this._mouseStarted) ? (k.preventDefault(), !0) : (!0 === e.data(k.target, this.widgetName + ".preventClickEvent") && e.removeData(k.target, this.widgetName + ".preventClickEvent"), this._mouseMoveDelegate = function (A) {
                    return q._mouseMove(A)
                }, this._mouseUpDelegate = function (A) {
                    return q._mouseUp(A)
                }, this.document.bind("mousemove." + this.widgetName, this._mouseMoveDelegate).bind("mouseup." + this.widgetName, this._mouseUpDelegate), k.preventDefault(), d = !0, !0)) : !0
            }
        },
        _mouseMove: function (k) {
            if (this._mouseMoved) {
                if (e.ui.ie && (!document.documentMode || 9 > document.documentMode) && !k.button) {
                    return this._mouseUp(k)
                }
                if (!k.which) {
                    return this._mouseUp(k)
                }
            }
            return (k.which || k.button) && (this._mouseMoved = !0), this._mouseStarted ? (this._mouseDrag(k), k.preventDefault()) : (this._mouseDistanceMet(k) && this._mouseDelayMet(k) && (this._mouseStarted = this._mouseStart(this._mouseDownEvent, k) !== !1, this._mouseStarted ? this._mouseDrag(k) : this._mouseUp(k)), !this._mouseStarted)
        },
        _mouseUp: function (k) {
            return this.document.unbind("mousemove." + this.widgetName, this._mouseMoveDelegate).unbind("mouseup." + this.widgetName, this._mouseUpDelegate), this._mouseStarted && (this._mouseStarted = !1, k.target === this._mouseDownEvent.target && e.data(k.target, this.widgetName + ".preventClickEvent", !0), this._mouseStop(k)), d = !1, !1
        },
        _mouseDistanceMet: function (k) {
            return Math.max(Math.abs(this._mouseDownEvent.pageX - k.pageX), Math.abs(this._mouseDownEvent.pageY - k.pageY)) >= this.options.distance
        },
        _mouseDelayMet: function () {
            return this.mouseDelayMet
        },
        _mouseStart: function () {
        },
        _mouseDrag: function () {
        },
        _mouseStop: function () {
        },
        _mouseCapture: function () {
            return !0
        }
    }), function () {
        function q(L, M, K) {
            return [parseFloat(L[0]) * (G.test(L[0]) ? M / 100 : 1), parseFloat(L[1]) * (G.test(L[1]) ? K / 100 : 1)]
        }

        function H(L, K) {
            return parseInt(e.css(L, K), 10) || 0
        }

        function k(L) {
            var K = L[0];
            return 9 === K.nodeType ? {
                width: L.width(),
                height: L.height(),
                offset: {top: 0, left: 0}
            } : e.isWindow(K) ? {
                width: L.width(),
                height: L.height(),
                offset: {top: L.scrollTop(), left: L.scrollLeft()}
            } : K.preventDefault ? {
                width: 0,
                height: 0,
                offset: {top: K.pageY, left: K.pageX}
            } : {
                width: L.outerWidth(),
                height: L.outerHeight(),
                offset: L.offset()
            }
        }

        e.ui = e.ui || {};
        var x, A, F = Math.max, I = Math.abs, E = Math.round, J = /left|center|right/, w = /top|center|bottom/, C = /[\+\-]\d+(\.[\d]+)?%?/, B = /^\w+/, G = /%$/, D = e.fn.position;
        e.position = {
            scrollbarWidth: function () {
                if (void 0 !== x) {
                    return x
                }
                var L, M, K = e("<div style='display:block;position:absolute;width:50px;height:50px;overflow:hidden;'><div style='height:100px;width:auto;'></div></div>"), N = K.children()[0];
                return e("body").append(K), L = N.offsetWidth, K.css("overflow", "scroll"), M = N.offsetWidth, L === M && (M = K[0].clientWidth), K.remove(), x = L - M
            }, getScrollInfo: function (M) {
                var N = M.isWindow || M.isDocument ? "" : M.element.css("overflow-x"), L = M.isWindow || M.isDocument ? "" : M.element.css("overflow-y"), K = "scroll" === N || "auto" === N && M.width < M.element[0].scrollWidth, O = "scroll" === L || "auto" === L && M.height < M.element[0].scrollHeight;
                return {
                    width: O ? e.position.scrollbarWidth() : 0,
                    height: K ? e.position.scrollbarWidth() : 0
                }
            }, getWithinInfo: function (N) {
                var K = e(N || window), M = e.isWindow(K[0]), L = !!K[0] && 9 === K[0].nodeType;
                return {
                    element: K,
                    isWindow: M,
                    isDocument: L,
                    offset: K.offset() || {left: 0, top: 0},
                    scrollLeft: K.scrollLeft(),
                    scrollTop: K.scrollTop(),
                    width: M || L ? K.width() : K.outerWidth(),
                    height: M || L ? K.height() : K.outerHeight()
                }
            }
        }, e.fn.position = function (U) {
            if (!U || !U.of) {
                return D.apply(this, arguments)
            }
            U = e.extend({}, U);
            var V, T, O, L, N, K, M = e(U.of), X = e.position.getWithinInfo(U.within), W = e.position.getScrollInfo(X), P = (U.collision || "flip").split(" "), S = {};
            return K = k(M), M[0].preventDefault && (U.at = "left top"), T = K.width, O = K.height, L = K.offset, N = e.extend({}, L), e.each(["my", "at"], function () {
                var Z, Y, aa = (U[this] || "").split(" ");
                1 === aa.length && (aa = J.test(aa[0]) ? aa.concat(["center"]) : w.test(aa[0]) ? ["center"].concat(aa) : ["center", "center"]), aa[0] = J.test(aa[0]) ? aa[0] : "center", aa[1] = w.test(aa[1]) ? aa[1] : "center", Z = C.exec(aa[0]), Y = C.exec(aa[1]), S[this] = [Z ? Z[0] : 0, Y ? Y[0] : 0], U[this] = [B.exec(aa[0])[0], B.exec(aa[1])[0]]
            }), 1 === P.length && (P[1] = P[0]), "right" === U.at[0] ? N.left += T : "center" === U.at[0] && (N.left += T / 2), "bottom" === U.at[1] ? N.top += O : "center" === U.at[1] && (N.top += O / 2), V = q(S.at, T, O), N.left += V[0], N.top += V[1], this.each(function () {
                var aj, Y, ak = e(this), an = ak.outerWidth(), am = ak.outerHeight(), ap = H(this, "marginLeft"), al = H(this, "marginTop"), aa = an + ap + H(this, "marginRight") + W.width, aq = am + al + H(this, "marginBottom") + W.height, ao = e.extend({}, N), Z = q(S.my, ak.outerWidth(), ak.outerHeight());
                "right" === U.my[0] ? ao.left -= an : "center" === U.my[0] && (ao.left -= an / 2), "bottom" === U.my[1] ? ao.top -= am : "center" === U.my[1] && (ao.top -= am / 2), ao.left += Z[0], ao.top += Z[1], A || (ao.left = E(ao.left), ao.top = E(ao.top)), aj = {
                    marginLeft: ap,
                    marginTop: al
                }, e.each(["left", "top"], function (ab, ac) {
                    e.ui.position[P[ab]] && e.ui.position[P[ab]][ac](ao, {
                        targetWidth: T,
                        targetHeight: O,
                        elemWidth: an,
                        elemHeight: am,
                        collisionPosition: aj,
                        collisionWidth: aa,
                        collisionHeight: aq,
                        offset: [V[0] + Z[0], V[1] + Z[1]],
                        my: U.my,
                        at: U.at,
                        within: X,
                        elem: ak
                    })
                }), U.using && (Y = function (ab) {
                    var ae = L.left - ao.left, af = ae + T - an, ac = L.top - ao.top, ag = ac + O - am, ad = {
                        target: {
                            element: M,
                            left: L.left,
                            top: L.top,
                            width: T,
                            height: O
                        },
                        element: {
                            element: ak,
                            left: ao.left,
                            top: ao.top,
                            width: an,
                            height: am
                        },
                        horizontal: 0 > af ? "left" : ae > 0 ? "right" : "center",
                        vertical: 0 > ag ? "top" : ac > 0 ? "bottom" : "middle"
                    };
                    an > T && T > I(ae + af) && (ad.horizontal = "center"), am > O && O > I(ac + ag) && (ad.vertical = "middle"), ad.important = F(I(ae), I(af)) > F(I(ac), I(ag)) ? "horizontal" : "vertical", U.using.call(this, ab, ad)
                }), ak.offset(e.extend(ao, {using: Y}))
            })
        }, e.ui.position = {
            fit: {
                left: function (U, L) {
                    var O, K = L.within, S = K.isWindow ? K.scrollLeft : K.offset.left, M = K.width, T = U.left - L.collisionPosition.marginLeft, N = S - T, P = T + L.collisionWidth - M - S;
                    L.collisionWidth > M ? N > 0 && 0 >= P ? (O = U.left + N + L.collisionWidth - M - S, U.left += N - O) : U.left = P > 0 && 0 >= N ? S : N > P ? S + M - L.collisionWidth : S : N > 0 ? U.left += N : P > 0 ? U.left -= P : U.left = F(U.left - T, U.left)
                }, top: function (U, L) {
                    var O, K = L.within, S = K.isWindow ? K.scrollTop : K.offset.top, M = L.within.height, T = U.top - L.collisionPosition.marginTop, N = S - T, P = T + L.collisionHeight - M - S;
                    L.collisionHeight > M ? N > 0 && 0 >= P ? (O = U.top + N + L.collisionHeight - M - S, U.top += N - O) : U.top = P > 0 && 0 >= N ? S : N > P ? S + M - L.collisionHeight : S : N > 0 ? U.top += N : P > 0 ? U.top -= P : U.top = F(U.top - T, U.top)
                }
            }, flip: {
                left: function (W, P) {
                    var ad, O, M = P.within, T = M.offset.left + M.scrollLeft, N = M.width, aa = M.isWindow ? M.scrollLeft : M.offset.left, L = W.left - P.collisionPosition.marginLeft, S = L - aa, V = L + P.collisionWidth - N - aa, U = "left" === P.my[0] ? -P.elemWidth : "right" === P.my[0] ? P.elemWidth : 0, K = "left" === P.at[0] ? P.targetWidth : "right" === P.at[0] ? -P.targetWidth : 0, X = -2 * P.offset[0];
                    0 > S ? (ad = W.left + U + K + X + P.collisionWidth - N - T, (0 > ad || I(S) > ad) && (W.left += U + K + X)) : V > 0 && (O = W.left - P.collisionPosition.marginLeft + U + K + X - aa, (O > 0 || V > I(O)) && (W.left += U + K + X))
                }, top: function (W, P) {
                    var ae, O, M = P.within, T = M.offset.top + M.scrollTop, N = M.height, aa = M.isWindow ? M.scrollTop : M.offset.top, af = W.top - P.collisionPosition.marginTop, S = af - aa, V = af + P.collisionHeight - N - aa, U = "top" === P.my[1], L = U ? -P.elemHeight : "bottom" === P.my[1] ? P.elemHeight : 0, X = "top" === P.at[1] ? P.targetHeight : "bottom" === P.at[1] ? -P.targetHeight : 0, K = -2 * P.offset[1];
                    0 > S ? (O = W.top + L + X + K + P.collisionHeight - N - T, (0 > O || I(S) > O) && (W.top += L + X + K)) : V > 0 && (ae = W.top - P.collisionPosition.marginTop + L + X + K - aa, (ae > 0 || V > I(ae)) && (W.top += L + X + K))
                }
            }, flipfit: {
                left: function () {
                    e.ui.position.flip.left.apply(this, arguments), e.ui.position.fit.left.apply(this, arguments)
                }, top: function () {
                    e.ui.position.flip.top.apply(this, arguments), e.ui.position.fit.top.apply(this, arguments)
                }
            }
        }, function () {
            var S, L, N, M, O, K = document.getElementsByTagName("body")[0], P = document.createElement("div");
            S = document.createElement(K ? "div" : "body"), N = {
                visibility: "hidden",
                width: 0,
                height: 0,
                border: 0,
                margin: 0,
                background: "none"
            }, K && e.extend(N, {
                position: "absolute",
                left: "-1000px",
                top: "-1000px"
            });
            for (O in N) {
                S.style[O] = N[O]
            }
            S.appendChild(P), L = K || document.documentElement, L.insertBefore(S, L.firstChild), P.style.cssText = "position: absolute; left: 10.7432222px;", M = e(P).offset().left, A = M > 10 && 11 > M, S.innerHTML = "", L.removeChild(S)
        }()
    }(), e.ui.position, e.widget("ui.accordion", {
        version: "1.11.4",
        options: {
            active: 0,
            animate: {},
            collapsible: !1,
            event: "click",
            header: "> li > :first-child,> :not(li):even",
            heightStyle: "auto",
            icons: {
                activeHeader: "ui-icon-triangle-1-s",
                header: "ui-icon-triangle-1-e"
            },
            activate: null,
            beforeActivate: null
        },
        hideProps: {
            borderTopWidth: "hide",
            borderBottomWidth: "hide",
            paddingTop: "hide",
            paddingBottom: "hide",
            height: "hide"
        },
        showProps: {
            borderTopWidth: "show",
            borderBottomWidth: "show",
            paddingTop: "show",
            paddingBottom: "show",
            height: "show"
        },
        _create: function () {
            var k = this.options;
            this.prevShow = this.prevHide = e(), this.element.addClass("ui-accordion ui-widget ui-helper-reset").attr("role", "tablist"), k.collapsible || k.active !== !1 && null != k.active || (k.active = 0), this._processPanels(), 0 > k.active && (k.active += this.headers.length), this._refresh()
        },
        _getCreateEventData: function () {
            return {
                header: this.active,
                panel: this.active.length ? this.active.next() : e()
            }
        },
        _createIcons: function () {
            var k = this.options.icons;
            k && (e("<span>").addClass("ui-accordion-header-icon ui-icon " + k.header).prependTo(this.headers), this.active.children(".ui-accordion-header-icon").removeClass(k.header).addClass(k.activeHeader), this.headers.addClass("ui-accordion-icons"))
        },
        _destroyIcons: function () {
            this.headers.removeClass("ui-accordion-icons").children(".ui-accordion-header-icon").remove()
        },
        _destroy: function () {
            var k;
            this.element.removeClass("ui-accordion ui-widget ui-helper-reset").removeAttr("role"), this.headers.removeClass("ui-accordion-header ui-accordion-header-active ui-state-default ui-corner-all ui-state-active ui-state-disabled ui-corner-top").removeAttr("role").removeAttr("aria-expanded").removeAttr("aria-selected").removeAttr("aria-controls").removeAttr("tabIndex").removeUniqueId(), this._destroyIcons(), k = this.headers.next().removeClass("ui-helper-reset ui-widget-content ui-corner-bottom ui-accordion-content ui-accordion-content-active ui-state-disabled").css("display", "").removeAttr("role").removeAttr("aria-hidden").removeAttr("aria-labelledby").removeUniqueId(), "content" !== this.options.heightStyle && k.css("height", "")
        },
        _setOption: function (k, q) {
            return "active" === k ? (this._activate(q), void 0) : ("event" === k && (this.options.event && this._off(this.headers, this.options.event), this._setupEvents(q)), this._super(k, q), "collapsible" !== k || q || this.options.active !== !1 || this._activate(0), "icons" === k && (this._destroyIcons(), q && this._createIcons()), "disabled" === k && (this.element.toggleClass("ui-state-disabled", !!q).attr("aria-disabled", q), this.headers.add(this.headers.next()).toggleClass("ui-state-disabled", !!q)), void 0)
        },
        _keydown: function (x) {
            if (!x.altKey && !x.ctrlKey) {
                var A = e.ui.keyCode, w = this.headers.length, q = this.headers.index(x.target), k = !1;
                switch (x.keyCode) {
                    case A.RIGHT:
                    case A.DOWN:
                        k = this.headers[(q + 1) % w];
                        break;
                    case A.LEFT:
                    case A.UP:
                        k = this.headers[(q - 1 + w) % w];
                        break;
                    case A.SPACE:
                    case A.ENTER:
                        this._eventHandler(x);
                        break;
                    case A.HOME:
                        k = this.headers[0];
                        break;
                    case A.END:
                        k = this.headers[w - 1]
                }
                k && (e(x.target).attr("tabIndex", -1), e(k).attr("tabIndex", 0), k.focus(), x.preventDefault())
            }
        },
        _panelKeyDown: function (k) {
            k.keyCode === e.ui.keyCode.UP && k.ctrlKey && e(k.currentTarget).prev().focus()
        },
        refresh: function () {
            var k = this.options;
            this._processPanels(), k.active === !1 && k.collapsible === !0 || !this.headers.length ? (k.active = !1, this.active = e()) : k.active === !1 ? this._activate(0) : this.active.length && !e.contains(this.element[0], this.active[0]) ? this.headers.length === this.headers.find(".ui-state-disabled").length ? (k.active = !1, this.active = e()) : this._activate(Math.max(0, k.active - 1)) : k.active = this.headers.index(this.active), this._destroyIcons(), this._refresh()
        },
        _processPanels: function () {
            var k = this.headers, q = this.panels;
            this.headers = this.element.find(this.options.header).addClass("ui-accordion-header ui-state-default ui-corner-all"), this.panels = this.headers.next().addClass("ui-accordion-content ui-helper-reset ui-widget-content ui-corner-bottom").filter(":not(.ui-accordion-content-active)").hide(), q && (this._off(k.not(this.headers)), this._off(q.not(this.panels)))
        },
        _refresh: function () {
            var k, q = this.options, x = q.heightStyle, w = this.element.parent();
            this.active = this._findActive(q.active).addClass("ui-accordion-header-active ui-state-active ui-corner-top").removeClass("ui-corner-all"), this.active.next().addClass("ui-accordion-content-active").show(), this.headers.attr("role", "tab").each(function () {
                var C = e(this), D = C.uniqueId().attr("id"), B = C.next(), A = B.uniqueId().attr("id");
                C.attr("aria-controls", A), B.attr("aria-labelledby", D)
            }).next().attr("role", "tabpanel"), this.headers.not(this.active).attr({
                "aria-selected": "false",
                "aria-expanded": "false",
                tabIndex: -1
            }).next().attr({"aria-hidden": "true"}).hide(), this.active.length ? this.active.attr({
                "aria-selected": "true",
                "aria-expanded": "true",
                tabIndex: 0
            }).next().attr({"aria-hidden": "false"}) : this.headers.eq(0).attr("tabIndex", 0), this._createIcons(), this._setupEvents(q.event), "fill" === x ? (k = w.height(), this.element.siblings(":visible").each(function () {
                var B = e(this), A = B.css("position");
                "absolute" !== A && "fixed" !== A && (k -= B.outerHeight(!0))
            }), this.headers.each(function () {
                k -= e(this).outerHeight(!0)
            }), this.headers.next().each(function () {
                e(this).height(Math.max(0, k - e(this).innerHeight() + e(this).height()))
            }).css("overflow", "auto")) : "auto" === x && (k = 0, this.headers.next().each(function () {
                k = Math.max(k, e(this).css("height", "").height())
            }).height(k))
        },
        _activate: function (k) {
            var q = this._findActive(k)[0];
            q !== this.active[0] && (q = q || this.active[0], this._eventHandler({
                target: q,
                currentTarget: q,
                preventDefault: e.noop
            }))
        },
        _findActive: function (k) {
            return "number" == typeof k ? this.headers.eq(k) : e()
        },
        _setupEvents: function (k) {
            var q = {keydown: "_keydown"};
            k && e.each(k.split(" "), function (w, x) {
                q[x] = "_eventHandler"
            }), this._off(this.headers.add(this.headers.next())), this._on(this.headers, q), this._on(this.headers.next(), {keydown: "_panelKeyDown"}), this._hoverable(this.headers), this._focusable(this.headers)
        },
        _eventHandler: function (k) {
            var x = this.options, E = this.active, B = e(k.currentTarget), q = B[0] === E[0], C = q && x.collapsible, D = C ? e() : B.next(), w = E.next(), A = {
                oldHeader: E,
                oldPanel: w,
                newHeader: C ? e() : B,
                newPanel: D
            };
            k.preventDefault(), q && !x.collapsible || this._trigger("beforeActivate", k, A) === !1 || (x.active = C ? !1 : this.headers.index(B), this.active = q ? e() : B, this._toggle(A), E.removeClass("ui-accordion-header-active ui-state-active"), x.icons && E.children(".ui-accordion-header-icon").removeClass(x.icons.activeHeader).addClass(x.icons.header), q || (B.removeClass("ui-corner-all").addClass("ui-accordion-header-active ui-state-active ui-corner-top"), x.icons && B.children(".ui-accordion-header-icon").removeClass(x.icons.header).addClass(x.icons.activeHeader), B.next().addClass("ui-accordion-content-active")))
        },
        _toggle: function (k) {
            var q = k.newPanel, w = this.prevShow.length ? this.prevShow : k.oldPanel;
            this.prevShow.add(this.prevHide).stop(!0, !0), this.prevShow = q, this.prevHide = w, this.options.animate ? this._animate(q, w, k) : (w.hide(), q.show(), this._toggleComplete(k)), w.attr({"aria-hidden": "true"}), w.prev().attr({
                "aria-selected": "false",
                "aria-expanded": "false"
            }), q.length && w.length ? w.prev().attr({
                tabIndex: -1,
                "aria-expanded": "false"
            }) : q.length && this.headers.filter(function () {
                return 0 === parseInt(e(this).attr("tabIndex"), 10)
            }).attr("tabIndex", -1), q.attr("aria-hidden", "false").prev().attr({
                "aria-selected": "true",
                "aria-expanded": "true",
                tabIndex: 0
            })
        },
        _animate: function (G, x, k) {
            var w, E, B, F = this, H = 0, I = G.css("box-sizing"), q = G.length && (!x.length || G.index() < x.index()), A = this.options.animate || {}, D = q && A.down || A, C = function () {
                F._toggleComplete(k)
            };
            return "number" == typeof D && (B = D), "string" == typeof D && (E = D), E = E || D.easing || A.easing, B = B || D.duration || A.duration, x.length ? G.length ? (w = G.show().outerHeight(), x.animate(this.hideProps, {
                duration: B,
                easing: E,
                step: function (K, J) {
                    J.now = Math.round(K)
                }
            }), G.hide().animate(this.showProps, {
                duration: B,
                easing: E,
                complete: C,
                step: function (K, J) {
                    J.now = Math.round(K), "height" !== J.prop ? "content-box" === I && (H += J.now) : "content" !== F.options.heightStyle && (J.now = Math.round(w - x.outerHeight() - H), H = 0)
                }
            }), void 0) : x.animate(this.hideProps, B, E, C) : G.animate(this.showProps, B, E, C)
        },
        _toggleComplete: function (k) {
            var q = k.oldPanel;
            q.removeClass("ui-accordion-content-active").prev().removeClass("ui-corner-top").addClass("ui-corner-all"), q.length && (q.parent()[0].className = q.parent()[0].className), this._trigger("activate", null, k)
        }
    }), e.widget("ui.menu", {
        version: "1.11.4",
        defaultElement: "<ul>",
        delay: 300,
        options: {
            icons: {submenu: "ui-icon-carat-1-e"},
            items: "> *",
            menus: "ul",
            position: {my: "left-1 top", at: "right top"},
            role: "menu",
            blur: null,
            focus: null,
            select: null
        },
        _create: function () {
            this.activeMenu = this.element, this.mouseHandled = !1, this.element.uniqueId().addClass("ui-menu ui-widget ui-widget-content").toggleClass("ui-menu-icons", !!this.element.find(".ui-icon").length).attr({
                role: this.options.role,
                tabIndex: 0
            }), this.options.disabled && this.element.addClass("ui-state-disabled").attr("aria-disabled", "true"), this._on({
                "mousedown .ui-menu-item": function (k) {
                    k.preventDefault()
                },
                "click .ui-menu-item": function (k) {
                    var q = e(k.target);
                    !this.mouseHandled && q.not(".ui-state-disabled").length && (this.select(k), k.isPropagationStopped() || (this.mouseHandled = !0), q.has(".ui-menu").length ? this.expand(k) : !this.element.is(":focus") && e(this.document[0].activeElement).closest(".ui-menu").length && (this.element.trigger("focus", [!0]), this.active && 1 === this.active.parents(".ui-menu").length && clearTimeout(this.timer)))
                },
                "mouseenter .ui-menu-item": function (k) {
                    if (!this.previousFilter) {
                        var q = e(k.currentTarget);
                        q.siblings(".ui-state-active").removeClass("ui-state-active"), this.focus(k, q)
                    }
                },
                mouseleave: "collapseAll",
                "mouseleave .ui-menu": "collapseAll",
                focus: function (w, k) {
                    var q = this.active || this.element.find(this.options.items).eq(0);
                    k || this.focus(w, q)
                },
                blur: function (k) {
                    this._delay(function () {
                        e.contains(this.element[0], this.document[0].activeElement) || this.collapseAll(k)
                    })
                },
                keydown: "_keydown"
            }), this.refresh(), this._on(this.document, {
                click: function (k) {
                    this._closeOnDocumentClick(k) && this.collapseAll(k), this.mouseHandled = !1
                }
            })
        },
        _destroy: function () {
            this.element.removeAttr("aria-activedescendant").find(".ui-menu").addBack().removeClass("ui-menu ui-widget ui-widget-content ui-menu-icons ui-front").removeAttr("role").removeAttr("tabIndex").removeAttr("aria-labelledby").removeAttr("aria-expanded").removeAttr("aria-hidden").removeAttr("aria-disabled").removeUniqueId().show(), this.element.find(".ui-menu-item").removeClass("ui-menu-item").removeAttr("role").removeAttr("aria-disabled").removeUniqueId().removeClass("ui-state-hover").removeAttr("tabIndex").removeAttr("role").removeAttr("aria-haspopup").children().each(function () {
                var k = e(this);
                k.data("ui-menu-submenu-carat") && k.remove()
            }), this.element.find(".ui-menu-divider").removeClass("ui-menu-divider ui-widget-content")
        },
        _keydown: function (A) {
            var B, x, q, k, w = !0;
            switch (A.keyCode) {
                case e.ui.keyCode.PAGE_UP:
                    this.previousPage(A);
                    break;
                case e.ui.keyCode.PAGE_DOWN:
                    this.nextPage(A);
                    break;
                case e.ui.keyCode.HOME:
                    this._move("first", "first", A);
                    break;
                case e.ui.keyCode.END:
                    this._move("last", "last", A);
                    break;
                case e.ui.keyCode.UP:
                    this.previous(A);
                    break;
                case e.ui.keyCode.DOWN:
                    this.next(A);
                    break;
                case e.ui.keyCode.LEFT:
                    this.collapse(A);
                    break;
                case e.ui.keyCode.RIGHT:
                    this.active && !this.active.is(".ui-state-disabled") && this.expand(A);
                    break;
                case e.ui.keyCode.ENTER:
                case e.ui.keyCode.SPACE:
                    this._activate(A);
                    break;
                case e.ui.keyCode.ESCAPE:
                    this.collapse(A);
                    break;
                default:
                    w = !1, x = this.previousFilter || "", q = String.fromCharCode(A.keyCode), k = !1, clearTimeout(this.filterTimer), q === x ? k = !0 : q = x + q, B = this._filterMenuItems(q), B = k && -1 !== B.index(this.active.next()) ? this.active.nextAll(".ui-menu-item") : B, B.length || (q = String.fromCharCode(A.keyCode), B = this._filterMenuItems(q)), B.length ? (this.focus(A, B), this.previousFilter = q, this.filterTimer = this._delay(function () {
                        delete this.previousFilter
                    }, 1000)) : delete this.previousFilter
            }
            w && A.preventDefault()
        },
        _activate: function (k) {
            this.active.is(".ui-state-disabled") || (this.active.is("[aria-haspopup='true']") ? this.expand(k) : this.select(k))
        },
        refresh: function () {
            var x, A, w = this, q = this.options.icons.submenu, k = this.element.find(this.options.menus);
            this.element.toggleClass("ui-menu-icons", !!this.element.find(".ui-icon").length), k.filter(":not(.ui-menu)").addClass("ui-menu ui-widget ui-widget-content ui-front").hide().attr({
                role: this.options.role,
                "aria-hidden": "true",
                "aria-expanded": "false"
            }).each(function () {
                var D = e(this), B = D.parent(), C = e("<span>").addClass("ui-menu-icon ui-icon " + q).data("ui-menu-submenu-carat", !0);
                B.attr("aria-haspopup", "true").prepend(C), D.attr("aria-labelledby", B.attr("id"))
            }), x = k.add(this.element), A = x.find(this.options.items), A.not(".ui-menu-item").each(function () {
                var B = e(this);
                w._isDivider(B) && B.addClass("ui-widget-content ui-menu-divider")
            }), A.not(".ui-menu-item, .ui-menu-divider").addClass("ui-menu-item").uniqueId().attr({
                tabIndex: -1,
                role: this._itemRole()
            }), A.filter(".ui-state-disabled").attr("aria-disabled", "true"), this.active && !e.contains(this.element[0], this.active[0]) && this.blur()
        },
        _itemRole: function () {
            return {menu: "menuitem", listbox: "option"}[this.options.role]
        },
        _setOption: function (k, q) {
            "icons" === k && this.element.find(".ui-menu-icon").removeClass(this.options.icons.submenu).addClass(q.submenu), "disabled" === k && this.element.toggleClass("ui-state-disabled", !!q).attr("aria-disabled", q), this._super(k, q)
        },
        focus: function (w, k) {
            var q, x;
            this.blur(w, w && "focus" === w.type), this._scrollIntoView(k), this.active = k.first(), x = this.active.addClass("ui-state-focus").removeClass("ui-state-active"), this.options.role && this.element.attr("aria-activedescendant", x.attr("id")), this.active.parent().closest(".ui-menu-item").addClass("ui-state-active"), w && "keydown" === w.type ? this._close() : this.timer = this._delay(function () {
                this._close()
            }, this.delay), q = k.children(".ui-menu"), q.length && w && /^mouse/.test(w.type) && this._startOpening(q), this.activeMenu = k.parent(), this._trigger("focus", w, {item: k})
        },
        _scrollIntoView: function (B) {
            var C, A, q, k, w, x;
            this._hasScroll() && (C = parseFloat(e.css(this.activeMenu[0], "borderTopWidth")) || 0, A = parseFloat(e.css(this.activeMenu[0], "paddingTop")) || 0, q = B.offset().top - this.activeMenu.offset().top - C - A, k = this.activeMenu.scrollTop(), w = this.activeMenu.height(), x = B.outerHeight(), 0 > q ? this.activeMenu.scrollTop(k + q) : q + x > w && this.activeMenu.scrollTop(k + q - w + x))
        },
        blur: function (k, q) {
            q || clearTimeout(this.timer), this.active && (this.active.removeClass("ui-state-focus"), this.active = null, this._trigger("blur", k, {item: this.active}))
        },
        _startOpening: function (k) {
            clearTimeout(this.timer), "true" === k.attr("aria-hidden") && (this.timer = this._delay(function () {
                this._close(), this._open(k)
            }, this.delay))
        },
        _open: function (k) {
            var q = e.extend({of: this.active}, this.options.position);
            clearTimeout(this.timer), this.element.find(".ui-menu").not(k.parents(".ui-menu")).hide().attr("aria-hidden", "true"), k.show().removeAttr("aria-hidden").attr("aria-expanded", "true").position(q)
        },
        collapseAll: function (k, q) {
            clearTimeout(this.timer), this.timer = this._delay(function () {
                var w = q ? this.element : e(k && k.target).closest(this.element.find(".ui-menu"));
                w.length || (w = this.element), this._close(w), this.blur(k), this.activeMenu = w
            }, this.delay)
        },
        _close: function (k) {
            k || (k = this.active ? this.active.parent() : this.element), k.find(".ui-menu").hide().attr("aria-hidden", "true").attr("aria-expanded", "false").end().find(".ui-state-active").not(".ui-state-focus").removeClass("ui-state-active")
        },
        _closeOnDocumentClick: function (k) {
            return !e(k.target).closest(".ui-menu").length
        },
        _isDivider: function (k) {
            return !/[^\-\u2014\u2013\s]/.test(k.text())
        },
        collapse: function (k) {
            var q = this.active && this.active.parent().closest(".ui-menu-item", this.element);
            q && q.length && (this._close(), this.focus(k, q))
        },
        expand: function (k) {
            var q = this.active && this.active.children(".ui-menu ").find(this.options.items).first();
            q && q.length && (this._open(q.parent()), this._delay(function () {
                this.focus(k, q)
            }))
        },
        next: function (k) {
            this._move("next", "first", k)
        },
        previous: function (k) {
            this._move("prev", "last", k)
        },
        isFirstItem: function () {
            return this.active && !this.active.prevAll(".ui-menu-item").length
        },
        isLastItem: function () {
            return this.active && !this.active.nextAll(".ui-menu-item").length
        },
        _move: function (w, k, q) {
            var x;
            this.active && (x = "first" === w || "last" === w ? this.active["first" === w ? "prevAll" : "nextAll"](".ui-menu-item").eq(-1) : this.active[w + "All"](".ui-menu-item").eq(0)), x && x.length && this.active || (x = this.activeMenu.find(this.options.items)[k]()), this.focus(q, x)
        },
        nextPage: function (k) {
            var q, x, w;
            return this.active ? (this.isLastItem() || (this._hasScroll() ? (x = this.active.offset().top, w = this.element.height(), this.active.nextAll(".ui-menu-item").each(function () {
                return q = e(this), 0 > q.offset().top - x - w
            }), this.focus(k, q)) : this.focus(k, this.activeMenu.find(this.options.items)[this.active ? "last" : "first"]())), void 0) : (this.next(k), void 0)
        },
        previousPage: function (k) {
            var q, x, w;
            return this.active ? (this.isFirstItem() || (this._hasScroll() ? (x = this.active.offset().top, w = this.element.height(), this.active.prevAll(".ui-menu-item").each(function () {
                return q = e(this), q.offset().top - x + w > 0
            }), this.focus(k, q)) : this.focus(k, this.activeMenu.find(this.options.items).first())), void 0) : (this.next(k), void 0)
        },
        _hasScroll: function () {
            return this.element.outerHeight() < this.element.prop("scrollHeight")
        },
        select: function (k) {
            this.active = this.active || e(k.target).closest(".ui-menu-item");
            var q = {item: this.active};
            this.active.has(".ui-menu").length || this.collapseAll(k, !0), this._trigger("select", k, q)
        },
        _filterMenuItems: function (k) {
            var q = k.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&"), w = RegExp("^" + q, "i");
            return this.activeMenu.find(this.options.items).filter(".ui-menu-item").filter(function () {
                return w.test(e.trim(e(this).text()))
            })
        }
    }), e.widget("ui.autocomplete", {
        version: "1.11.4",
        defaultElement: "<input>",
        options: {
            appendTo: null,
            autoFocus: !1,
            delay: 300,
            minLength: 1,
            position: {my: "left top", at: "left bottom", collision: "none"},
            source: null,
            change: null,
            close: null,
            focus: null,
            open: null,
            response: null,
            search: null,
            select: null
        },
        requestIndex: 0,
        pending: 0,
        _create: function () {
            var A, B, x, q = this.element[0].nodeName.toLowerCase(), k = "textarea" === q, w = "input" === q;
            this.isMultiLine = k ? !0 : w ? !1 : this.element.prop("isContentEditable"), this.valueMethod = this.element[k || w ? "val" : "text"], this.isNewMenu = !0, this.element.addClass("ui-autocomplete-input").attr("autocomplete", "off"), this._on(this.element, {
                keydown: function (C) {
                    if (this.element.prop("readOnly")) {
                        return A = !0, x = !0, B = !0, void 0
                    }
                    A = !1, x = !1, B = !1;
                    var D = e.ui.keyCode;
                    switch (C.keyCode) {
                        case D.PAGE_UP:
                            A = !0, this._move("previousPage", C);
                            break;
                        case D.PAGE_DOWN:
                            A = !0, this._move("nextPage", C);
                            break;
                        case D.UP:
                            A = !0, this._keyEvent("previous", C);
                            break;
                        case D.DOWN:
                            A = !0, this._keyEvent("next", C);
                            break;
                        case D.ENTER:
                            this.menu.active && (A = !0, C.preventDefault(), this.menu.select(C));
                            break;
                        case D.TAB:
                            this.menu.active && this.menu.select(C);
                            break;
                        case D.ESCAPE:
                            this.menu.element.is(":visible") && (this.isMultiLine || this._value(this.term), this.close(C), C.preventDefault());
                            break;
                        default:
                            B = !0, this._searchTimeout(C)
                    }
                }, keypress: function (C) {
                    if (A) {
                        return A = !1, (!this.isMultiLine || this.menu.element.is(":visible")) && C.preventDefault(), void 0
                    }
                    if (!B) {
                        var D = e.ui.keyCode;
                        switch (C.keyCode) {
                            case D.PAGE_UP:
                                this._move("previousPage", C);
                                break;
                            case D.PAGE_DOWN:
                                this._move("nextPage", C);
                                break;
                            case D.UP:
                                this._keyEvent("previous", C);
                                break;
                            case D.DOWN:
                                this._keyEvent("next", C)
                        }
                    }
                }, input: function (C) {
                    return x ? (x = !1, C.preventDefault(), void 0) : (this._searchTimeout(C), void 0)
                }, focus: function () {
                    this.selectedItem = null, this.previous = this._value()
                }, blur: function (C) {
                    return this.cancelBlur ? (delete this.cancelBlur, void 0) : (clearTimeout(this.searching), this.close(C), this._change(C), void 0)
                }
            }), this._initSource(), this.menu = e("<ul>").addClass("ui-autocomplete ui-front").appendTo(this._appendTo()).menu({role: null}).hide().menu("instance"), this._on(this.menu.element, {
                mousedown: function (D) {
                    D.preventDefault(), this.cancelBlur = !0, this._delay(function () {
                        delete this.cancelBlur
                    });
                    var C = this.menu.element[0];
                    e(D.target).closest(".ui-menu-item").length || this._delay(function () {
                        var E = this;
                        this.document.one("mousedown", function (F) {
                            F.target === E.element[0] || F.target === C || e.contains(C, F.target) || E.close()
                        })
                    })
                }, menufocus: function (F, E) {
                    var D, C;
                    return this.isNewMenu && (this.isNewMenu = !1, F.originalEvent && /^mouse/.test(F.originalEvent.type)) ? (this.menu.blur(), this.document.one("mousemove", function () {
                        e(F.target).trigger(F.originalEvent)
                    }), void 0) : (C = E.item.data("ui-autocomplete-item"), !1 !== this._trigger("focus", F, {item: C}) && F.originalEvent && /^key/.test(F.originalEvent.type) && this._value(C.value), D = E.item.attr("aria-label") || C.value, D && e.trim(D).length && (this.liveRegion.children().hide(), e("<div>").text(D).appendTo(this.liveRegion)), void 0)
                }, menuselect: function (C, F) {
                    var E = F.item.data("ui-autocomplete-item"), D = this.previous;
                    this.element[0] !== this.document[0].activeElement && (this.element.focus(), this.previous = D, this._delay(function () {
                        this.previous = D, this.selectedItem = E
                    })), !1 !== this._trigger("select", C, {item: E}) && this._value(E.value), this.term = this._value(), this.close(C), this.selectedItem = E
                }
            }), this.liveRegion = e("<span>", {
                role: "status",
                "aria-live": "assertive",
                "aria-relevant": "additions"
            }).addClass("ui-helper-hidden-accessible").appendTo(this.document[0].body), this._on(this.window, {
                beforeunload: function () {
                    this.element.removeAttr("autocomplete")
                }
            })
        },
        _destroy: function () {
            clearTimeout(this.searching), this.element.removeClass("ui-autocomplete-input").removeAttr("autocomplete"), this.menu.element.remove(), this.liveRegion.remove()
        },
        _setOption: function (k, q) {
            this._super(k, q), "source" === k && this._initSource(), "appendTo" === k && this.menu.element.appendTo(this._appendTo()), "disabled" === k && q && this.xhr && this.xhr.abort()
        },
        _appendTo: function () {
            var k = this.options.appendTo;
            return k && (k = k.jquery || k.nodeType ? e(k) : this.document.find(k).eq(0)), k && k[0] || (k = this.element.closest(".ui-front")), k.length || (k = this.document[0].body), k
        },
        _initSource: function () {
            var k, q, w = this;
            e.isArray(this.options.source) ? (k = this.options.source, this.source = function (A, x) {
                x(e.ui.autocomplete.filter(k, A.term))
            }) : "string" == typeof this.options.source ? (q = this.options.source, this.source = function (A, x) {
                w.xhr && w.xhr.abort(), w.xhr = e.ajax({
                    url: q,
                    data: A,
                    dataType: "json",
                    success: function (B) {
                        x(B)
                    },
                    error: function () {
                        x([])
                    }
                })
            }) : this.source = this.options.source
        },
        _searchTimeout: function (k) {
            clearTimeout(this.searching), this.searching = this._delay(function () {
                var x = this.term === this._value(), q = this.menu.element.is(":visible"), w = k.altKey || k.ctrlKey || k.metaKey || k.shiftKey;
                (!x || x && !q && !w) && (this.selectedItem = null, this.search(null, k))
            }, this.options.delay)
        },
        search: function (k, q) {
            return k = null != k ? k : this._value(), this.term = this._value(), k.length < this.options.minLength ? this.close(q) : this._trigger("search", q) !== !1 ? this._search(k) : void 0
        },
        _search: function (k) {
            this.pending++, this.element.addClass("ui-autocomplete-loading"), this.cancelSearch = !1, this.source({term: k}, this._response())
        },
        _response: function () {
            var k = ++this.requestIndex;
            return e.proxy(function (q) {
                k === this.requestIndex && this.__response(q), this.pending--, this.pending || this.element.removeClass("ui-autocomplete-loading")
            }, this)
        },
        __response: function (k) {
            k && (k = this._normalize(k)), this._trigger("response", null, {content: k}), !this.options.disabled && k && k.length && !this.cancelSearch ? (this._suggest(k), this._trigger("open")) : this._close()
        },
        close: function (k) {
            this.cancelSearch = !0, this._close(k)
        },
        _close: function (k) {
            this.menu.element.is(":visible") && (this.menu.element.hide(), this.menu.blur(), this.isNewMenu = !0, this._trigger("close", k))
        },
        _change: function (k) {
            this.previous !== this._value() && this._trigger("change", k, {item: this.selectedItem})
        },
        _normalize: function (k) {
            return k.length && k[0].label && k[0].value ? k : e.map(k, function (q) {
                return "string" == typeof q ? {
                    label: q,
                    value: q
                } : e.extend({}, q, {
                    label: q.label || q.value,
                    value: q.value || q.label
                })
            })
        },
        _suggest: function (k) {
            var q = this.menu.element.empty();
            this._renderMenu(q, k), this.isNewMenu = !0, this.menu.refresh(), q.show(), this._resizeMenu(), q.position(e.extend({of: this.element}, this.options.position)), this.options.autoFocus && this.menu.next()
        },
        _resizeMenu: function () {
            var k = this.menu.element;
            k.outerWidth(Math.max(k.width("").outerWidth() + 1, this.element.outerWidth()))
        },
        _renderMenu: function (k, q) {
            var w = this;
            e.each(q, function (x, A) {
                w._renderItemData(k, A)
            })
        },
        _renderItemData: function (k, q) {
            return this._renderItem(k, q).data("ui-autocomplete-item", q)
        },
        _renderItem: function (k, q) {
            return e("<li>").text(q.label).appendTo(k)
        },
        _move: function (k, q) {
            return this.menu.element.is(":visible") ? this.menu.isFirstItem() && /^previous/.test(k) || this.menu.isLastItem() && /^next/.test(k) ? (this.isMultiLine || this._value(this.term), this.menu.blur(), void 0) : (this.menu[k](q), void 0) : (this.search(null, q), void 0)
        },
        widget: function () {
            return this.menu.element
        },
        _value: function () {
            return this.valueMethod.apply(this.element, arguments)
        },
        _keyEvent: function (k, q) {
            (!this.isMultiLine || this.menu.element.is(":visible")) && (this._move(k, q), q.preventDefault())
        }
    }), e.extend(e.ui.autocomplete, {
        escapeRegex: function (k) {
            return k.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&")
        }, filter: function (k, q) {
            var w = RegExp(e.ui.autocomplete.escapeRegex(q), "i");
            return e.grep(k, function (x) {
                return w.test(x.label || x.value || x)
            })
        }
    }), e.widget("ui.autocomplete", e.ui.autocomplete, {
        options: {
            messages: {
                noResults: "No search results.",
                results: function (k) {
                    return k + (k > 1 ? " results are" : " result is") + " available, use up and down arrow keys to navigate."
                }
            }
        }, __response: function (k) {
            var q;
            this._superApply(arguments), this.options.disabled || this.cancelSearch || (q = k && k.length ? this.options.messages.results(k.length) : this.options.messages.noResults, this.liveRegion.children().hide(), e("<div>").text(q).appendTo(this.liveRegion))
        }
    }), e.ui.autocomplete;
    var c, u = "ui-button ui-widget ui-state-default ui-corner-all", f = "ui-button-icons-only ui-button-icon-only ui-button-text-icons ui-button-text-icon-primary ui-button-text-icon-secondary ui-button-text-only", p = function () {
        var k = e(this);
        setTimeout(function () {
            k.find(":ui-button").button("refresh")
        }, 1)
    }, g = function (k) {
        var q = k.name, x = k.form, w = e([]);
        return q && (q = q.replace(/'/g, "\\'"), w = x ? e(x).find("[name='" + q + "'][type=radio]") : e("[name='" + q + "'][type=radio]", k.ownerDocument).filter(function () {
            return !this.form
        })), w
    };
    e.widget("ui.button", {
        version: "1.11.4",
        defaultElement: "<button>",
        options: {
            disabled: null,
            text: !0,
            label: null,
            icons: {primary: null, secondary: null}
        },
        _create: function () {
            this.element.closest("form").unbind("reset" + this.eventNamespace).bind("reset" + this.eventNamespace, p), "boolean" != typeof this.options.disabled ? this.options.disabled = !!this.element.prop("disabled") : this.element.prop("disabled", this.options.disabled), this._determineButtonType(), this.hasTitle = !!this.buttonElement.attr("title");
            var k = this, q = this.options, x = "checkbox" === this.type || "radio" === this.type, w = x ? "" : "ui-state-active";
            null === q.label && (q.label = "input" === this.type ? this.buttonElement.val() : this.buttonElement.html()), this._hoverable(this.buttonElement), this.buttonElement.addClass(u).attr("role", "button").bind("mouseenter" + this.eventNamespace, function () {
                q.disabled || this === c && e(this).addClass("ui-state-active")
            }).bind("mouseleave" + this.eventNamespace, function () {
                q.disabled || e(this).removeClass(w)
            }).bind("click" + this.eventNamespace, function (A) {
                q.disabled && (A.preventDefault(), A.stopImmediatePropagation())
            }), this._on({
                focus: function () {
                    this.buttonElement.addClass("ui-state-focus")
                }, blur: function () {
                    this.buttonElement.removeClass("ui-state-focus")
                }
            }), x && this.element.bind("change" + this.eventNamespace, function () {
                k.refresh()
            }), "checkbox" === this.type ? this.buttonElement.bind("click" + this.eventNamespace, function () {
                return q.disabled ? !1 : void 0
            }) : "radio" === this.type ? this.buttonElement.bind("click" + this.eventNamespace, function () {
                if (q.disabled) {
                    return !1
                }
                e(this).addClass("ui-state-active"), k.buttonElement.attr("aria-pressed", "true");
                var A = k.element[0];
                g(A).not(A).map(function () {
                    return e(this).button("widget")[0]
                }).removeClass("ui-state-active").attr("aria-pressed", "false")
            }) : (this.buttonElement.bind("mousedown" + this.eventNamespace, function () {
                return q.disabled ? !1 : (e(this).addClass("ui-state-active"), c = this, k.document.one("mouseup", function () {
                    c = null
                }), void 0)
            }).bind("mouseup" + this.eventNamespace, function () {
                return q.disabled ? !1 : (e(this).removeClass("ui-state-active"), void 0)
            }).bind("keydown" + this.eventNamespace, function (A) {
                return q.disabled ? !1 : ((A.keyCode === e.ui.keyCode.SPACE || A.keyCode === e.ui.keyCode.ENTER) && e(this).addClass("ui-state-active"), void 0)
            }).bind("keyup" + this.eventNamespace + " blur" + this.eventNamespace, function () {
                e(this).removeClass("ui-state-active")
            }), this.buttonElement.is("a") && this.buttonElement.keyup(function (A) {
                A.keyCode === e.ui.keyCode.SPACE && e(this).click()
            })), this._setOption("disabled", q.disabled), this._resetButton()
        },
        _determineButtonType: function () {
            var w, k, q;
            this.type = this.element.is("[type=checkbox]") ? "checkbox" : this.element.is("[type=radio]") ? "radio" : this.element.is("input") ? "input" : "button", "checkbox" === this.type || "radio" === this.type ? (w = this.element.parents().last(), k = "label[for='" + this.element.attr("id") + "']", this.buttonElement = w.find(k), this.buttonElement.length || (w = w.length ? w.siblings() : this.element.siblings(), this.buttonElement = w.filter(k), this.buttonElement.length || (this.buttonElement = w.find(k))), this.element.addClass("ui-helper-hidden-accessible"), q = this.element.is(":checked"), q && this.buttonElement.addClass("ui-state-active"), this.buttonElement.prop("aria-pressed", q)) : this.buttonElement = this.element
        },
        widget: function () {
            return this.buttonElement
        },
        _destroy: function () {
            this.element.removeClass("ui-helper-hidden-accessible"), this.buttonElement.removeClass(u + " ui-state-active " + f).removeAttr("role").removeAttr("aria-pressed").html(this.buttonElement.find(".ui-button-text").html()), this.hasTitle || this.buttonElement.removeAttr("title")
        },
        _setOption: function (k, q) {
            return this._super(k, q), "disabled" === k ? (this.widget().toggleClass("ui-state-disabled", !!q), this.element.prop("disabled", !!q), q && ("checkbox" === this.type || "radio" === this.type ? this.buttonElement.removeClass("ui-state-focus") : this.buttonElement.removeClass("ui-state-focus ui-state-active")), void 0) : (this._resetButton(), void 0)
        },
        refresh: function () {
            var k = this.element.is("input, button") ? this.element.is(":disabled") : this.element.hasClass("ui-button-disabled");
            k !== this.options.disabled && this._setOption("disabled", k), "radio" === this.type ? g(this.element[0]).each(function () {
                e(this).is(":checked") ? e(this).button("widget").addClass("ui-state-active").attr("aria-pressed", "true") : e(this).button("widget").removeClass("ui-state-active").attr("aria-pressed", "false")
            }) : "checkbox" === this.type && (this.element.is(":checked") ? this.buttonElement.addClass("ui-state-active").attr("aria-pressed", "true") : this.buttonElement.removeClass("ui-state-active").attr("aria-pressed", "false"))
        },
        _resetButton: function () {
            if ("input" === this.type) {
                return this.options.label && this.element.val(this.options.label), void 0
            }
            var x = this.buttonElement.removeClass(f), A = e("<span></span>", this.document[0]).addClass("ui-button-text").html(this.options.label).appendTo(x.empty()).text(), w = this.options.icons, q = w.primary && w.secondary, k = [];
            w.primary || w.secondary ? (this.options.text && k.push("ui-button-text-icon" + (q ? "s" : w.primary ? "-primary" : "-secondary")), w.primary && x.prepend("<span class='ui-button-icon-primary ui-icon " + w.primary + "'></span>"), w.secondary && x.append("<span class='ui-button-icon-secondary ui-icon " + w.secondary + "'></span>"), this.options.text || (k.push(q ? "ui-button-icons-only" : "ui-button-icon-only"), this.hasTitle || x.attr("title", e.trim(A)))) : k.push("ui-button-text-only"), x.addClass(k.join(" "))
        }
    }), e.widget("ui.buttonset", {
        version: "1.11.4",
        options: {items: "button, input[type=button], input[type=submit], input[type=reset], input[type=checkbox], input[type=radio], a, :data(ui-button)"},
        _create: function () {
            this.element.addClass("ui-buttonset")
        },
        _init: function () {
            this.refresh()
        },
        _setOption: function (k, q) {
            "disabled" === k && this.buttons.button("option", k, q), this._super(k, q)
        },
        refresh: function () {
            var k = "rtl" === this.element.css("direction"), q = this.element.find(this.options.items), w = q.filter(":ui-button");
            q.not(":ui-button").button(), w.button("refresh"), this.buttons = q.map(function () {
                return e(this).button("widget")[0]
            }).removeClass("ui-corner-all ui-corner-left ui-corner-right").filter(":first").addClass(k ? "ui-corner-right" : "ui-corner-left").end().filter(":last").addClass(k ? "ui-corner-left" : "ui-corner-right").end().end()
        },
        _destroy: function () {
            this.element.removeClass("ui-buttonset"), this.buttons.map(function () {
                return e(this).button("widget")[0]
            }).removeClass("ui-corner-left ui-corner-right").end().button("destroy")
        }
    }), e.ui.button, e.extend(e.ui, {datepicker: {version: "1.11.4"}});
    var v;
    e.extend(r.prototype, {
        markerClassName: "hasDatepicker",
        maxRows: 4,
        _widgetDatepicker: function () {
            return this.dpDiv
        },
        setDefaults: function (k) {
            return y(this._defaults, k || {}), this
        },
        _attachDatepicker: function (x, A) {
            var w, q, k;
            w = x.nodeName.toLowerCase(), q = "div" === w || "span" === w, x.id || (this.uuid += 1, x.id = "dp" + this.uuid), k = this._newInst(e(x), q), k.settings = e.extend({}, A || {}), "input" === w ? this._connectDatepicker(x, k) : q && this._inlineDatepicker(x, k)
        },
        _newInst: function (k, q) {
            var w = k[0].id.replace(/([^A-Za-z0-9_\-])/g, "\\\\$1");
            return {
                id: w,
                input: k,
                selectedDay: 0,
                selectedMonth: 0,
                selectedYear: 0,
                drawMonth: 0,
                drawYear: 0,
                inline: q,
                dpDiv: q ? a(e("<div class='" + this._inlineClass + " ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>")) : this.dpDiv
            }
        },
        _connectDatepicker: function (k, q) {
            var w = e(k);
            q.append = e([]), q.trigger = e([]), w.hasClass(this.markerClassName) || (this._attachments(w, q), w.addClass(this.markerClassName).keydown(this._doKeyDown).keypress(this._doKeyPress).keyup(this._doKeyUp), this._autoSize(q), e.data(k, "datepicker", q), q.settings.disabled && this._disableDatepicker(k))
        },
        _attachments: function (B, C) {
            var A, q, k, w = this._get(C, "appendText"), x = this._get(C, "isRTL");
            C.append && C.append.remove(), w && (C.append = e("<span class='" + this._appendClass + "'>" + w + "</span>"), B[x ? "before" : "after"](C.append)), B.unbind("focus", this._showDatepicker), C.trigger && C.trigger.remove(), A = this._get(C, "showOn"), ("focus" === A || "both" === A) && B.focus(this._showDatepicker), ("button" === A || "both" === A) && (q = this._get(C, "buttonText"), k = this._get(C, "buttonImage"), C.trigger = e(this._get(C, "buttonImageOnly") ? e("<img/>").addClass(this._triggerClass).attr({
                src: k,
                alt: q,
                title: q
            }) : e("<button type='button'></button>").addClass(this._triggerClass).html(k ? e("<img/>").attr({
                src: k,
                alt: q,
                title: q
            }) : q)), B[x ? "before" : "after"](C.trigger), C.trigger.click(function () {
                return e.datepicker._datepickerShowing && e.datepicker._lastInput === B[0] ? e.datepicker._hideDatepicker() : e.datepicker._datepickerShowing && e.datepicker._lastInput !== B[0] ? (e.datepicker._hideDatepicker(), e.datepicker._showDatepicker(B[0])) : e.datepicker._showDatepicker(B[0]), !1
            }))
        },
        _autoSize: function (x) {
            if (this._get(x, "autoSize") && !x.inline) {
                var B, C, A, q, k = new Date(2009, 11, 20), w = this._get(x, "dateFormat");
                w.match(/[DM]/) && (B = function (D) {
                    for (C = 0, A = 0, q = 0; D.length > q; q++) {
                        D[q].length > C && (C = D[q].length, A = q)
                    }
                    return A
                }, k.setMonth(B(this._get(x, w.match(/MM/) ? "monthNames" : "monthNamesShort"))), k.setDate(B(this._get(x, w.match(/DD/) ? "dayNames" : "dayNamesShort")) + 20 - k.getDay())), x.input.attr("size", this._formatDate(x, k).length)
            }
        },
        _inlineDatepicker: function (k, q) {
            var w = e(k);
            w.hasClass(this.markerClassName) || (w.addClass(this.markerClassName).append(q.dpDiv), e.data(k, "datepicker", q), this._setDate(q, this._getDefaultDate(q), !0), this._updateDatepicker(q), this._updateAlternate(q), q.settings.disabled && this._disableDatepicker(k), q.dpDiv.css("display", "block"))
        },
        _dialogDatepicker: function (A, B, x, D, G) {
            var F, w, C, E, q, k = this._dialogInst;
            return k || (this.uuid += 1, F = "dp" + this.uuid, this._dialogInput = e("<input type='text' id='" + F + "' style='position: absolute; top: -100px; width: 0px;'/>"), this._dialogInput.keydown(this._doKeyDown), e("body").append(this._dialogInput), k = this._dialogInst = this._newInst(this._dialogInput, !1), k.settings = {}, e.data(this._dialogInput[0], "datepicker", k)), y(k.settings, D || {}), B = B && B.constructor === Date ? this._formatDate(k, B) : B, this._dialogInput.val(B), this._pos = G ? G.length ? G : [G.pageX, G.pageY] : null, this._pos || (w = document.documentElement.clientWidth, C = document.documentElement.clientHeight, E = document.documentElement.scrollLeft || document.body.scrollLeft, q = document.documentElement.scrollTop || document.body.scrollTop, this._pos = [w / 2 - 100 + E, C / 2 - 150 + q]), this._dialogInput.css("left", this._pos[0] + 20 + "px").css("top", this._pos[1] + "px"), k.settings.onSelect = x, this._inDialog = !0, this.dpDiv.addClass(this._dialogClass), this._showDatepicker(this._dialogInput[0]), e.blockUI && e.blockUI(this.dpDiv), e.data(this._dialogInput[0], "datepicker", k), this
        },
        _destroyDatepicker: function (k) {
            var q, x = e(k), w = e.data(k, "datepicker");
            x.hasClass(this.markerClassName) && (q = k.nodeName.toLowerCase(), e.removeData(k, "datepicker"), "input" === q ? (w.append.remove(), w.trigger.remove(), x.removeClass(this.markerClassName).unbind("focus", this._showDatepicker).unbind("keydown", this._doKeyDown).unbind("keypress", this._doKeyPress).unbind("keyup", this._doKeyUp)) : ("div" === q || "span" === q) && x.removeClass(this.markerClassName).empty(), v === w && (v = null))
        },
        _enableDatepicker: function (x) {
            var A, w, q = e(x), k = e.data(x, "datepicker");
            q.hasClass(this.markerClassName) && (A = x.nodeName.toLowerCase(), "input" === A ? (x.disabled = !1, k.trigger.filter("button").each(function () {
                this.disabled = !1
            }).end().filter("img").css({
                opacity: "1.0",
                cursor: ""
            })) : ("div" === A || "span" === A) && (w = q.children("." + this._inlineClass), w.children().removeClass("ui-state-disabled"), w.find("select.ui-datepicker-month, select.ui-datepicker-year").prop("disabled", !1)), this._disabledInputs = e.map(this._disabledInputs, function (B) {
                return B === x ? null : B
            }))
        },
        _disableDatepicker: function (x) {
            var A, w, q = e(x), k = e.data(x, "datepicker");
            q.hasClass(this.markerClassName) && (A = x.nodeName.toLowerCase(), "input" === A ? (x.disabled = !0, k.trigger.filter("button").each(function () {
                this.disabled = !0
            }).end().filter("img").css({
                opacity: "0.5",
                cursor: "default"
            })) : ("div" === A || "span" === A) && (w = q.children("." + this._inlineClass), w.children().addClass("ui-state-disabled"), w.find("select.ui-datepicker-month, select.ui-datepicker-year").prop("disabled", !0)), this._disabledInputs = e.map(this._disabledInputs, function (B) {
                return B === x ? null : B
            }), this._disabledInputs[this._disabledInputs.length] = x)
        },
        _isDisabledDatepicker: function (k) {
            if (!k) {
                return !1
            }
            for (var q = 0; this._disabledInputs.length > q; q++) {
                if (this._disabledInputs[q] === k) {
                    return !0
                }
            }
            return !1
        },
        _getInst: function (k) {
            try {
                return e.data(k, "datepicker")
            } catch (q) {
                throw"Missing instance data for this datepicker"
            }
        },
        _optionDatepicker: function (B, C, w) {
            var A, D, q, x, k = this._getInst(B);
            return 2 === arguments.length && "string" == typeof C ? "defaults" === C ? e.extend({}, e.datepicker._defaults) : k ? "all" === C ? e.extend({}, k.settings) : this._get(k, C) : null : (A = C || {}, "string" == typeof C && (A = {}, A[C] = w), k && (this._curInst === k && this._hideDatepicker(), D = this._getDateDatepicker(B, !0), q = this._getMinMaxDate(k, "min"), x = this._getMinMaxDate(k, "max"), y(k.settings, A), null !== q && void 0 !== A.dateFormat && void 0 === A.minDate && (k.settings.minDate = this._formatDate(k, q)), null !== x && void 0 !== A.dateFormat && void 0 === A.maxDate && (k.settings.maxDate = this._formatDate(k, x)), "disabled" in A && (A.disabled ? this._disableDatepicker(B) : this._enableDatepicker(B)), this._attachments(e(B), k), this._autoSize(k), this._setDate(k, D), this._updateAlternate(k), this._updateDatepicker(k)), void 0)
        },
        _changeDatepicker: function (w, k, q) {
            this._optionDatepicker(w, k, q)
        },
        _refreshDatepicker: function (k) {
            var q = this._getInst(k);
            q && this._updateDatepicker(q)
        },
        _setDateDatepicker: function (w, k) {
            var q = this._getInst(w);
            q && (this._setDate(q, k), this._updateDatepicker(q), this._updateAlternate(q))
        },
        _getDateDatepicker: function (w, k) {
            var q = this._getInst(w);
            return q && !q.inline && this._setDateFromField(q, k), q ? this._getDate(q) : null
        },
        _doKeyDown: function (B) {
            var C, A, q, k = e.datepicker._getInst(B.target), w = !0, x = k.dpDiv.is(".ui-datepicker-rtl");
            if (k._keyEvent = !0, e.datepicker._datepickerShowing) {
                switch (B.keyCode) {
                    case 9:
                        e.datepicker._hideDatepicker(), w = !1;
                        break;
                    case 13:
                        return q = e("td." + e.datepicker._dayOverClass + ":not(." + e.datepicker._currentClass + ")", k.dpDiv), q[0] && e.datepicker._selectDay(B.target, k.selectedMonth, k.selectedYear, q[0]), C = e.datepicker._get(k, "onSelect"), C ? (A = e.datepicker._formatDate(k), C.apply(k.input ? k.input[0] : null, [A, k])) : e.datepicker._hideDatepicker(), !1;
                    case 27:
                        e.datepicker._hideDatepicker();
                        break;
                    case 33:
                        e.datepicker._adjustDate(B.target, B.ctrlKey ? -e.datepicker._get(k, "stepBigMonths") : -e.datepicker._get(k, "stepMonths"), "M");
                        break;
                    case 34:
                        e.datepicker._adjustDate(B.target, B.ctrlKey ? +e.datepicker._get(k, "stepBigMonths") : +e.datepicker._get(k, "stepMonths"), "M");
                        break;
                    case 35:
                        (B.ctrlKey || B.metaKey) && e.datepicker._clearDate(B.target), w = B.ctrlKey || B.metaKey;
                        break;
                    case 36:
                        (B.ctrlKey || B.metaKey) && e.datepicker._gotoToday(B.target), w = B.ctrlKey || B.metaKey;
                        break;
                    case 37:
                        (B.ctrlKey || B.metaKey) && e.datepicker._adjustDate(B.target, x ? 1 : -1, "D"), w = B.ctrlKey || B.metaKey, B.originalEvent.altKey && e.datepicker._adjustDate(B.target, B.ctrlKey ? -e.datepicker._get(k, "stepBigMonths") : -e.datepicker._get(k, "stepMonths"), "M");
                        break;
                    case 38:
                        (B.ctrlKey || B.metaKey) && e.datepicker._adjustDate(B.target, -7, "D"), w = B.ctrlKey || B.metaKey;
                        break;
                    case 39:
                        (B.ctrlKey || B.metaKey) && e.datepicker._adjustDate(B.target, x ? -1 : 1, "D"), w = B.ctrlKey || B.metaKey, B.originalEvent.altKey && e.datepicker._adjustDate(B.target, B.ctrlKey ? +e.datepicker._get(k, "stepBigMonths") : +e.datepicker._get(k, "stepMonths"), "M");
                        break;
                    case 40:
                        (B.ctrlKey || B.metaKey) && e.datepicker._adjustDate(B.target, 7, "D"), w = B.ctrlKey || B.metaKey;
                        break;
                    default:
                        w = !1
                }
            } else {
                36 === B.keyCode && B.ctrlKey ? e.datepicker._showDatepicker(this) : w = !1
            }
            w && (B.preventDefault(), B.stopPropagation())
        },
        _doKeyPress: function (k) {
            var q, x, w = e.datepicker._getInst(k.target);
            return e.datepicker._get(w, "constrainInput") ? (q = e.datepicker._possibleChars(e.datepicker._get(w, "dateFormat")), x = String.fromCharCode(null == k.charCode ? k.keyCode : k.charCode), k.ctrlKey || k.metaKey || " " > x || !q || q.indexOf(x) > -1) : void 0
        },
        _doKeyUp: function (k) {
            var q, x = e.datepicker._getInst(k.target);
            if (x.input.val() !== x.lastVal) {
                try {
                    q = e.datepicker.parseDate(e.datepicker._get(x, "dateFormat"), x.input ? x.input.val() : null, e.datepicker._getFormatConfig(x)), q && (e.datepicker._setDateFromField(x), e.datepicker._updateAlternate(x), e.datepicker._updateDatepicker(x))
                } catch (w) {
                }
            }
            return !0
        },
        _showDatepicker: function (x) {
            if (x = x.target || x, "input" !== x.nodeName.toLowerCase() && (x = e("input", x.parentNode)[0]), !e.datepicker._isDisabledDatepicker(x) && e.datepicker._lastInput !== x) {
                var B, A, D, q, w, k, C;
                B = e.datepicker._getInst(x), e.datepicker._curInst && e.datepicker._curInst !== B && (e.datepicker._curInst.dpDiv.stop(!0, !0), B && e.datepicker._datepickerShowing && e.datepicker._hideDatepicker(e.datepicker._curInst.input[0])), A = e.datepicker._get(B, "beforeShow"), D = A ? A.apply(x, [x, B]) : {}, D !== !1 && (y(B.settings, D), B.lastVal = null, e.datepicker._lastInput = x, e.datepicker._setDateFromField(B), e.datepicker._inDialog && (x.value = ""), e.datepicker._pos || (e.datepicker._pos = e.datepicker._findPos(x), e.datepicker._pos[1] += x.offsetHeight), q = !1, e(x).parents().each(function () {
                    return q |= "fixed" === e(this).css("position"), !q
                }), w = {
                    left: e.datepicker._pos[0],
                    top: e.datepicker._pos[1]
                }, e.datepicker._pos = null, B.dpDiv.empty(), B.dpDiv.css({
                    position: "absolute",
                    display: "block",
                    top: "-1000px"
                }), e.datepicker._updateDatepicker(B), w = e.datepicker._checkOffset(B, w, q), B.dpDiv.css({
                    position: e.datepicker._inDialog && e.blockUI ? "static" : q ? "fixed" : "absolute",
                    display: "none",
                    left: w.left + "px",
                    top: w.top + "px"
                }), B.inline || (k = e.datepicker._get(B, "showAnim"), C = e.datepicker._get(B, "duration"), B.dpDiv.css("z-index", Q(e(x)) + 1), e.datepicker._datepickerShowing = !0, e.effects && e.effects.effect[k] ? B.dpDiv.show(k, e.datepicker._get(B, "showOptions"), C) : B.dpDiv[k || "show"](k ? C : null), e.datepicker._shouldFocusInput(B) && B.input.focus(), e.datepicker._curInst = B))
            }
        },
        _updateDatepicker: function (A) {
            this.maxRows = 4, v = A, A.dpDiv.empty().append(this._generateHTML(A)), this._attachHandlers(A);
            var B, x = this._getNumberOfMonths(A), q = x[1], k = 17, w = A.dpDiv.find("." + this._dayOverClass + " a");
            w.length > 0 && s.apply(w.get(0)), A.dpDiv.removeClass("ui-datepicker-multi-2 ui-datepicker-multi-3 ui-datepicker-multi-4").width(""), q > 1 && A.dpDiv.addClass("ui-datepicker-multi-" + q).css("width", k * q + "em"), A.dpDiv[(1 !== x[0] || 1 !== x[1] ? "add" : "remove") + "Class"]("ui-datepicker-multi"), A.dpDiv[(this._get(A, "isRTL") ? "add" : "remove") + "Class"]("ui-datepicker-rtl"), A === e.datepicker._curInst && e.datepicker._datepickerShowing && e.datepicker._shouldFocusInput(A) && A.input.focus(), A.yearshtml && (B = A.yearshtml, setTimeout(function () {
                B === A.yearshtml && A.yearshtml && A.dpDiv.find("select.ui-datepicker-year:first").replaceWith(A.yearshtml), B = A.yearshtml = null
            }, 0))
        },
        _shouldFocusInput: function (k) {
            return k.input && k.input.is(":visible") && !k.input.is(":disabled") && !k.input.is(":focus")
        },
        _checkOffset: function (k, x, E) {
            var B = k.dpDiv.outerWidth(), q = k.dpDiv.outerHeight(), C = k.input ? k.input.outerWidth() : 0, D = k.input ? k.input.outerHeight() : 0, w = document.documentElement.clientWidth + (E ? 0 : e(document).scrollLeft()), A = document.documentElement.clientHeight + (E ? 0 : e(document).scrollTop());
            return x.left -= this._get(k, "isRTL") ? B - C : 0, x.left -= E && x.left === k.input.offset().left ? e(document).scrollLeft() : 0, x.top -= E && x.top === k.input.offset().top + D ? e(document).scrollTop() : 0, x.left -= Math.min(x.left, x.left + B > w && w > B ? Math.abs(x.left + B - w) : 0), x.top -= Math.min(x.top, x.top + q > A && A > q ? Math.abs(q + D) : 0), x
        },
        _findPos: function (k) {
            for (var q, x = this._getInst(k), w = this._get(x, "isRTL"); k && ("hidden" === k.type || 1 !== k.nodeType || e.expr.filters.hidden(k));) {
                k = k[w ? "previousSibling" : "nextSibling"]
            }
            return q = e(k).offset(), [q.left, q.top]
        },
        _hideDatepicker: function (A) {
            var B, x, q, k, w = this._curInst;
            !w || A && w !== e.data(A, "datepicker") || this._datepickerShowing && (B = this._get(w, "showAnim"), x = this._get(w, "duration"), q = function () {
                e.datepicker._tidyDialog(w)
            }, e.effects && (e.effects.effect[B] || e.effects[B]) ? w.dpDiv.hide(B, e.datepicker._get(w, "showOptions"), x, q) : w.dpDiv["slideDown" === B ? "slideUp" : "fadeIn" === B ? "fadeOut" : "hide"](B ? x : null, q), B || q(), this._datepickerShowing = !1, k = this._get(w, "onClose"), k && k.apply(w.input ? w.input[0] : null, [w.input ? w.input.val() : "", w]), this._lastInput = null, this._inDialog && (this._dialogInput.css({
                position: "absolute",
                left: "0",
                top: "-100px"
            }), e.blockUI && (e.unblockUI(), e("body").append(this.dpDiv))), this._inDialog = !1)
        },
        _tidyDialog: function (k) {
            k.dpDiv.removeClass(this._dialogClass).unbind(".ui-datepicker-calendar")
        },
        _checkExternalClick: function (k) {
            if (e.datepicker._curInst) {
                var q = e(k.target), w = e.datepicker._getInst(q[0]);
                (q[0].id !== e.datepicker._mainDivId && 0 === q.parents("#" + e.datepicker._mainDivId).length && !q.hasClass(e.datepicker.markerClassName) && !q.closest("." + e.datepicker._triggerClass).length && e.datepicker._datepickerShowing && (!e.datepicker._inDialog || !e.blockUI) || q.hasClass(e.datepicker.markerClassName) && e.datepicker._curInst !== w) && e.datepicker._hideDatepicker()
            }
        },
        _adjustDate: function (x, A, w) {
            var q = e(x), k = this._getInst(q[0]);
            this._isDisabledDatepicker(q[0]) || (this._adjustInstDate(k, A + ("M" === w ? this._get(k, "showCurrentAtPos") : 0), w), this._updateDatepicker(k))
        },
        _gotoToday: function (k) {
            var q, x = e(k), w = this._getInst(x[0]);
            this._get(w, "gotoCurrent") && w.currentDay ? (w.selectedDay = w.currentDay, w.drawMonth = w.selectedMonth = w.currentMonth, w.drawYear = w.selectedYear = w.currentYear) : (q = new Date, w.selectedDay = q.getDate(), w.drawMonth = w.selectedMonth = q.getMonth(), w.drawYear = w.selectedYear = q.getFullYear()), this._notifyChange(w), this._adjustDate(x)
        },
        _selectMonthYear: function (x, A, w) {
            var q = e(x), k = this._getInst(q[0]);
            k["selected" + ("M" === w ? "Month" : "Year")] = k["draw" + ("M" === w ? "Month" : "Year")] = parseInt(A.options[A.selectedIndex].value, 10), this._notifyChange(k), this._adjustDate(q)
        },
        _selectDay: function (A, B, x, q) {
            var k, w = e(A);
            e(q).hasClass(this._unselectableClass) || this._isDisabledDatepicker(w[0]) || (k = this._getInst(w[0]), k.selectedDay = k.currentDay = e("a", q).html(), k.selectedMonth = k.currentMonth = B, k.selectedYear = k.currentYear = x, this._selectDate(A, this._formatDate(k, k.currentDay, k.currentMonth, k.currentYear)))
        },
        _clearDate: function (k) {
            var q = e(k);
            this._selectDate(q, "")
        },
        _selectDate: function (x, A) {
            var w, q = e(x), k = this._getInst(q[0]);
            A = null != A ? A : this._formatDate(k), k.input && k.input.val(A), this._updateAlternate(k), w = this._get(k, "onSelect"), w ? w.apply(k.input ? k.input[0] : null, [A, k]) : k.input && k.input.trigger("change"), k.inline ? this._updateDatepicker(k) : (this._hideDatepicker(), this._lastInput = k.input[0], "object" != typeof k.input[0] && k.input.focus(), this._lastInput = null)
        },
        _updateAlternate: function (x) {
            var A, w, q, k = this._get(x, "altField");
            k && (A = this._get(x, "altFormat") || this._get(x, "dateFormat"), w = this._getDate(x), q = this.formatDate(A, w, this._getFormatConfig(x)), e(k).each(function () {
                e(this).val(q)
            }))
        },
        noWeekends: function (k) {
            var q = k.getDay();
            return [q > 0 && 6 > q, ""]
        },
        iso8601Week: function (w) {
            var k, q = new Date(w.getTime());
            return q.setDate(q.getDate() + 4 - (q.getDay() || 7)), k = q.getTime(), q.setMonth(0), q.setDate(1), Math.floor(Math.round((k - q) / 86400000) / 7) + 1
        },
        parseDate: function (B, P, A) {
            if (null == B || null == P) {
                throw"Invalid arguments"
            }
            if (P = "object" == typeof P ? "" + P : P + "", "" === P) {
                return null
            }
            var k, H, q, x, O = 0, ae = (A ? A.shortYearCutoff : null) || this._defaults.shortYearCutoff, C = "string" != typeof ae ? ae : (new Date).getFullYear() % 100 + parseInt(ae, 10), K = (A ? A.dayNamesShort : null) || this._defaults.dayNamesShort, J = (A ? A.dayNames : null) || this._defaults.dayNames, w = (A ? A.monthNamesShort : null) || this._defaults.monthNamesShort, L = (A ? A.monthNames : null) || this._defaults.monthNames, af = -1, N = -1, D = -1, M = -1, I = !1, G = function (S) {
                var T = B.length > k + 1 && B.charAt(k + 1) === S;
                return T && k++, T
            }, F = function (V) {
                var X = G(V), W = "@" === V ? 14 : "!" === V ? 20 : "y" === V && X ? 4 : "o" === V ? 3 : 2, T = "y" === V ? W : 1, S = RegExp("^\\d{" + T + "," + W + "}"), U = P.substring(O).match(S);
                if (!U) {
                    throw"Missing number at position " + O
                }
                return O += U[0].length, parseInt(U[0], 10)
            }, E = function (W, V, T) {
                var S = -1, U = e.map(G(W) ? T : V, function (Y, X) {
                    return [[X, Y]]
                }).sort(function (Y, X) {
                    return -(Y[1].length - X[1].length)
                });
                if (e.each(U, function (Y, X) {
                    var Z = X[1];
                    return P.substr(O, Z.length).toLowerCase() === Z.toLowerCase() ? (S = X[0], O += Z.length, !1) : void 0
                }), -1 !== S) {
                    return S + 1
                }
                throw"Unknown name at position " + O
            }, ad = function () {
                if (P.charAt(O) !== B.charAt(k)) {
                    throw"Unexpected literal at position " + O
                }
                O++
            };
            for (k = 0; B.length > k; k++) {
                if (I) {
                    "'" !== B.charAt(k) || G("'") ? ad() : I = !1
                } else {
                    switch (B.charAt(k)) {
                        case"d":
                            D = F("d");
                            break;
                        case"D":
                            E("D", K, J);
                            break;
                        case"o":
                            M = F("o");
                            break;
                        case"m":
                            N = F("m");
                            break;
                        case"M":
                            N = E("M", w, L);
                            break;
                        case"y":
                            af = F("y");
                            break;
                        case"@":
                            x = new Date(F("@")), af = x.getFullYear(), N = x.getMonth() + 1, D = x.getDate();
                            break;
                        case"!":
                            x = new Date((F("!") - this._ticksTo1970) / 10000), af = x.getFullYear(), N = x.getMonth() + 1, D = x.getDate();
                            break;
                        case"'":
                            G("'") ? ad() : I = !0;
                            break;
                        default:
                            ad()
                    }
                }
            }
            if (P.length > O && (q = P.substr(O), !/^\s+/.test(q))) {
                throw"Extra/unparsed characters found in date: " + q
            }
            if (-1 === af ? af = (new Date).getFullYear() : 100 > af && (af += (new Date).getFullYear() - (new Date).getFullYear() % 100 + (C >= af ? 0 : -100)), M > -1) {
                for (N = 1, D = M; ;) {
                    if (H = this._getDaysInMonth(af, N - 1), H >= D) {
                        break
                    }
                    N++, D -= H
                }
            }
            if (x = this._daylightSavingAdjust(new Date(af, N - 1, D)), x.getFullYear() !== af || x.getMonth() + 1 !== N || x.getDate() !== D) {
                throw"Invalid date"
            }
            return x
        },
        ATOM: "yy-mm-dd",
        COOKIE: "D, dd M yy",
        ISO_8601: "yy-mm-dd",
        RFC_822: "D, d M y",
        RFC_850: "DD, dd-M-y",
        RFC_1036: "D, d M y",
        RFC_1123: "D, d M yy",
        RFC_2822: "D, d M yy",
        RSS: "D, d M y",
        TICKS: "!",
        TIMESTAMP: "@",
        W3C: "yy-mm-dd",
        _ticksTo1970: 10000000 * 60 * 60 * 24 * (718685 + Math.floor(492.5) - Math.floor(19.7) + Math.floor(4.925)),
        formatDate: function (G, x, k) {
            if (!x) {
                return ""
            }
            var w, E = (k ? k.dayNamesShort : null) || this._defaults.dayNamesShort, B = (k ? k.dayNames : null) || this._defaults.dayNames, F = (k ? k.monthNamesShort : null) || this._defaults.monthNamesShort, H = (k ? k.monthNames : null) || this._defaults.monthNames, I = function (K) {
                var J = G.length > w + 1 && G.charAt(w + 1) === K;
                return J && w++, J
            }, q = function (K, M, J) {
                var L = "" + M;
                if (I(K)) {
                    for (; J > L.length;) {
                        L = "0" + L
                    }
                }
                return L
            }, A = function (K, M, J, L) {
                return I(K) ? L[M] : J[M]
            }, D = "", C = !1;
            if (x) {
                for (w = 0; G.length > w; w++) {
                    if (C) {
                        "'" !== G.charAt(w) || I("'") ? D += G.charAt(w) : C = !1
                    } else {
                        switch (G.charAt(w)) {
                            case"d":
                                D += q("d", x.getDate(), 2);
                                break;
                            case"D":
                                D += A("D", x.getDay(), E, B);
                                break;
                            case"o":
                                D += q("o", Math.round((new Date(x.getFullYear(), x.getMonth(), x.getDate()).getTime() - new Date(x.getFullYear(), 0, 0).getTime()) / 86400000), 3);
                                break;
                            case"m":
                                D += q("m", x.getMonth() + 1, 2);
                                break;
                            case"M":
                                D += A("M", x.getMonth(), F, H);
                                break;
                            case"y":
                                D += I("y") ? x.getFullYear() : (10 > x.getYear() % 100 ? "0" : "") + x.getYear() % 100;
                                break;
                            case"@":
                                D += x.getTime();
                                break;
                            case"!":
                                D += 10000 * x.getTime() + this._ticksTo1970;
                                break;
                            case"'":
                                I("'") ? D += "'" : C = !0;
                                break;
                            default:
                                D += G.charAt(w)
                        }
                    }
                }
            }
            return D
        },
        _possibleChars: function (x) {
            var k, q = "", A = !1, w = function (C) {
                var B = x.length > k + 1 && x.charAt(k + 1) === C;
                return B && k++, B
            };
            for (k = 0; x.length > k; k++) {
                if (A) {
                    "'" !== x.charAt(k) || w("'") ? q += x.charAt(k) : A = !1
                } else {
                    switch (x.charAt(k)) {
                        case"d":
                        case"m":
                        case"y":
                        case"@":
                            q += "0123456789";
                            break;
                        case"D":
                        case"M":
                            return null;
                        case"'":
                            w("'") ? q += "'" : A = !0;
                            break;
                        default:
                            q += x.charAt(k)
                    }
                }
            }
            return q
        },
        _get: function (k, q) {
            return void 0 !== k.settings[q] ? k.settings[q] : this._defaults[q]
        },
        _setDateFromField: function (x, C) {
            if (x.input.val() !== x.lastVal) {
                var D = this._get(x, "dateFormat"), B = x.lastVal = x.input ? x.input.val() : null, q = this._getDefaultDate(x), k = q, w = this._getFormatConfig(x);
                try {
                    k = this.parseDate(D, B, w) || q
                } catch (A) {
                    B = C ? "" : B
                }
                x.selectedDay = k.getDate(), x.drawMonth = x.selectedMonth = k.getMonth(), x.drawYear = x.selectedYear = k.getFullYear(), x.currentDay = B ? k.getDate() : 0, x.currentMonth = B ? k.getMonth() : 0, x.currentYear = B ? k.getFullYear() : 0, this._adjustInstDate(x)
            }
        },
        _getDefaultDate: function (k) {
            return this._restrictMinMax(k, this._determineDate(k, this._get(k, "defaultDate"), new Date))
        },
        _determineDate: function (A, B, x) {
            var q = function (D) {
                var C = new Date;
                return C.setDate(C.getDate() + D), C
            }, k = function (E) {
                try {
                    return e.datepicker.parseDate(e.datepicker._get(A, "dateFormat"), E, e.datepicker._getFormatConfig(A))
                } catch (J) {
                }
                for (var F = (E.toLowerCase().match(/^c/) ? e.datepicker._getDate(A) : null) || new Date, I = F.getFullYear(), G = F.getMonth(), H = F.getDate(), D = /([+\-]?[0-9]+)\s*(d|D|w|W|m|M|y|Y)?/g, C = D.exec(E); C;) {
                    switch (C[2] || "d") {
                        case"d":
                        case"D":
                            H += parseInt(C[1], 10);
                            break;
                        case"w":
                        case"W":
                            H += 7 * parseInt(C[1], 10);
                            break;
                        case"m":
                        case"M":
                            G += parseInt(C[1], 10), H = Math.min(H, e.datepicker._getDaysInMonth(I, G));
                            break;
                        case"y":
                        case"Y":
                            I += parseInt(C[1], 10), H = Math.min(H, e.datepicker._getDaysInMonth(I, G))
                    }
                    C = D.exec(E)
                }
                return new Date(I, G, H)
            }, w = null == B || "" === B ? x : "string" == typeof B ? k(B) : "number" == typeof B ? isNaN(B) ? x : q(B) : new Date(B.getTime());
            return w = w && "Invalid Date" == "" + w ? x : w, w && (w.setHours(0), w.setMinutes(0), w.setSeconds(0), w.setMilliseconds(0)), this._daylightSavingAdjust(w)
        },
        _daylightSavingAdjust: function (k) {
            return k ? (k.setHours(k.getHours() > 12 ? k.getHours() + 2 : 0), k) : null
        },
        _setDate: function (x, B, C) {
            var A = !B, q = x.selectedMonth, k = x.selectedYear, w = this._restrictMinMax(x, this._determineDate(x, B, new Date));
            x.selectedDay = x.currentDay = w.getDate(), x.drawMonth = x.selectedMonth = x.currentMonth = w.getMonth(), x.drawYear = x.selectedYear = x.currentYear = w.getFullYear(), q === x.selectedMonth && k === x.selectedYear || C || this._notifyChange(x), this._adjustInstDate(x), x.input && x.input.val(A ? "" : this._formatDate(x))
        },
        _getDate: function (k) {
            var q = !k.currentYear || k.input && "" === k.input.val() ? null : this._daylightSavingAdjust(new Date(k.currentYear, k.currentMonth, k.currentDay));
            return q
        },
        _attachHandlers: function (k) {
            var q = this._get(k, "stepMonths"), w = "#" + k.id.replace(/\\\\/g, "\\");
            k.dpDiv.find("[data-handler]").map(function () {
                var x = {
                    prev: function () {
                        e.datepicker._adjustDate(w, -q, "M")
                    }, next: function () {
                        e.datepicker._adjustDate(w, +q, "M")
                    }, hide: function () {
                        e.datepicker._hideDatepicker()
                    }, today: function () {
                        e.datepicker._gotoToday(w)
                    }, selectDay: function () {
                        return e.datepicker._selectDay(w, +this.getAttribute("data-month"), +this.getAttribute("data-year"), this), !1
                    }, selectMonth: function () {
                        return e.datepicker._selectMonthYear(w, this, "M"), !1
                    }, selectYear: function () {
                        return e.datepicker._selectMonthYear(w, this, "Y"), !1
                    }
                };
                e(this).bind(this.getAttribute("data-event"), x[this.getAttribute("data-handler")])
            })
        },
        _generateHTML: function (Y) {
            var ao, ac, an, ah, az, ai, am, ab, af, ap, X, aY, aj, Z, ag, aa, aq, au, aX, ay, at, ar, ae, O, w, N, H, q, I, ax, K, D, C, av, A, x, J, ad, T, G = new Date, M = this._daylightSavingAdjust(new Date(G.getFullYear(), G.getMonth(), G.getDate())), V = this._get(Y, "isRTL"), k = this._get(Y, "showButtonPanel"), E = this._get(Y, "hideIfNoPrevNext"), al = this._get(Y, "navigationAsDateFormat"), F = this._getNumberOfMonths(Y), S = this._get(Y, "showCurrentAtPos"), P = this._get(Y, "stepMonths"), L = 1 !== F[0] || 1 !== F[1], B = this._daylightSavingAdjust(Y.currentDay ? new Date(Y.currentYear, Y.currentMonth, Y.currentDay) : new Date(9999, 9, 9)), U = this._getMinMaxDate(Y, "min"), aw = this._getMinMaxDate(Y, "max"), W = Y.drawMonth - S, ak = Y.drawYear;
            if (0 > W && (W += 12, ak--), aw) {
                for (ao = this._daylightSavingAdjust(new Date(aw.getFullYear(), aw.getMonth() - F[0] * F[1] + 1, aw.getDate())), ao = U && U > ao ? U : ao; this._daylightSavingAdjust(new Date(ak, W, 1)) > ao;) {
                    W--, 0 > W && (W = 11, ak--)
                }
            }
            for (Y.drawMonth = W, Y.drawYear = ak, ac = this._get(Y, "prevText"), ac = al ? this.formatDate(ac, this._daylightSavingAdjust(new Date(ak, W - P, 1)), this._getFormatConfig(Y)) : ac, an = this._canAdjustMonth(Y, -1, ak, W) ? "<a class='ui-datepicker-prev ui-corner-all' data-handler='prev' data-event='click' title='" + ac + "'><span class='ui-icon ui-icon-circle-triangle-" + (V ? "e" : "w") + "'>" + ac + "</span></a>" : E ? "" : "<a class='ui-datepicker-prev ui-corner-all ui-state-disabled' title='" + ac + "'><span class='ui-icon ui-icon-circle-triangle-" + (V ? "e" : "w") + "'>" + ac + "</span></a>", ah = this._get(Y, "nextText"), ah = al ? this.formatDate(ah, this._daylightSavingAdjust(new Date(ak, W + P, 1)), this._getFormatConfig(Y)) : ah, az = this._canAdjustMonth(Y, 1, ak, W) ? "<a class='ui-datepicker-next ui-corner-all' data-handler='next' data-event='click' title='" + ah + "'><span class='ui-icon ui-icon-circle-triangle-" + (V ? "w" : "e") + "'>" + ah + "</span></a>" : E ? "" : "<a class='ui-datepicker-next ui-corner-all ui-state-disabled' title='" + ah + "'><span class='ui-icon ui-icon-circle-triangle-" + (V ? "w" : "e") + "'>" + ah + "</span></a>", ai = this._get(Y, "currentText"), am = this._get(Y, "gotoCurrent") && Y.currentDay ? B : M, ai = al ? this.formatDate(ai, am, this._getFormatConfig(Y)) : ai, ab = Y.inline ? "" : "<button type='button' class='ui-datepicker-close ui-state-default ui-priority-primary ui-corner-all' data-handler='hide' data-event='click'>" + this._get(Y, "closeText") + "</button>", af = k ? "<div class='ui-datepicker-buttonpane ui-widget-content'>" + (V ? ab : "") + (this._isInRange(Y, am) ? "<button type='button' class='ui-datepicker-current ui-state-default ui-priority-secondary ui-corner-all' data-handler='today' data-event='click'>" + ai + "</button>" : "") + (V ? "" : ab) + "</div>" : "", ap = parseInt(this._get(Y, "firstDay"), 10), ap = isNaN(ap) ? 0 : ap, X = this._get(Y, "showWeek"), aY = this._get(Y, "dayNames"), aj = this._get(Y, "dayNamesMin"), Z = this._get(Y, "monthNames"), ag = this._get(Y, "monthNamesShort"), aa = this._get(Y, "beforeShowDay"), aq = this._get(Y, "showOtherMonths"), au = this._get(Y, "selectOtherMonths"), aX = this._getDefaultDate(Y), ay = "", ar = 0; F[0] > ar; ar++) {
                for (ae = "", this.maxRows = 4, O = 0; F[1] > O; O++) {
                    if (w = this._daylightSavingAdjust(new Date(ak, W, Y.selectedDay)), N = " ui-corner-all", H = "", L) {
                        if (H += "<div class='ui-datepicker-group", F[1] > 1) {
                            switch (O) {
                                case 0:
                                    H += " ui-datepicker-group-first", N = " ui-corner-" + (V ? "right" : "left");
                                    break;
                                case F[1] - 1:
                                    H += " ui-datepicker-group-last", N = " ui-corner-" + (V ? "left" : "right");
                                    break;
                                default:
                                    H += " ui-datepicker-group-middle", N = ""
                            }
                        }
                        H += "'>"
                    }
                    for (H += "<div class='ui-datepicker-header ui-widget-header ui-helper-clearfix" + N + "'>" + (/all|left/.test(N) && 0 === ar ? V ? az : an : "") + (/all|right/.test(N) && 0 === ar ? V ? an : az : "") + this._generateMonthYearHeader(Y, W, ak, U, aw, ar > 0 || O > 0, Z, ag) + "</div><table class='ui-datepicker-calendar'><thead><tr>", q = X ? "<th class='ui-datepicker-week-col'>" + this._get(Y, "weekHeader") + "</th>" : "", at = 0; 7 > at; at++) {
                        I = (at + ap) % 7, q += "<th scope='col'" + ((at + ap + 6) % 7 >= 5 ? " class='ui-datepicker-week-end'" : "") + "><span title='" + aY[I] + "'>" + aj[I] + "</span></th>"
                    }
                    for (H += q + "</tr></thead><tbody>", ax = this._getDaysInMonth(ak, W), ak === Y.selectedYear && W === Y.selectedMonth && (Y.selectedDay = Math.min(Y.selectedDay, ax)), K = (this._getFirstDayOfMonth(ak, W) - ap + 7) % 7, D = Math.ceil((K + ax) / 7), C = L ? this.maxRows > D ? this.maxRows : D : D, this.maxRows = C, av = this._daylightSavingAdjust(new Date(ak, W, 1 - K)), A = 0; C > A; A++) {
                        for (H += "<tr>", x = X ? "<td class='ui-datepicker-week-col'>" + this._get(Y, "calculateWeek")(av) + "</td>" : "", at = 0; 7 > at; at++) {
                            J = aa ? aa.apply(Y.input ? Y.input[0] : null, [av]) : [!0, ""], ad = av.getMonth() !== W, T = ad && !au || !J[0] || U && U > av || aw && av > aw, x += "<td class='" + ((at + ap + 6) % 7 >= 5 ? " ui-datepicker-week-end" : "") + (ad ? " ui-datepicker-other-month" : "") + (av.getTime() === w.getTime() && W === Y.selectedMonth && Y._keyEvent || aX.getTime() === av.getTime() && aX.getTime() === w.getTime() ? " " + this._dayOverClass : "") + (T ? " " + this._unselectableClass + " ui-state-disabled" : "") + (ad && !aq ? "" : " " + J[1] + (av.getTime() === B.getTime() ? " " + this._currentClass : "") + (av.getTime() === M.getTime() ? " ui-datepicker-today" : "")) + "'" + (ad && !aq || !J[2] ? "" : " title='" + J[2].replace(/'/g, "&#39;") + "'") + (T ? "" : " data-handler='selectDay' data-event='click' data-month='" + av.getMonth() + "' data-year='" + av.getFullYear() + "'") + ">" + (ad && !aq ? "&#xa0;" : T ? "<span class='ui-state-default'>" + av.getDate() + "</span>" : "<a class='ui-state-default" + (av.getTime() === M.getTime() ? " ui-state-highlight" : "") + (av.getTime() === B.getTime() ? " ui-state-active" : "") + (ad ? " ui-priority-secondary" : "") + "' href='#'>" + av.getDate() + "</a>") + "</td>", av.setDate(av.getDate() + 1), av = this._daylightSavingAdjust(av)
                        }
                        H += x + "</tr>"
                    }
                    W++, W > 11 && (W = 0, ak++), H += "</tbody></table>" + (L ? "</div>" + (F[0] > 0 && O === F[1] - 1 ? "<div class='ui-datepicker-row-break'></div>" : "") : ""), ae += H
                }
                ay += ae
            }
            return ay += af, Y._keyEvent = !1, ay
        },
        _generateMonthYearHeader: function (L, C, P, B, q, H, w, A) {
            var O, ab, D, K, J, x, M, k, N = this._get(L, "changeMonth"), E = this._get(L, "changeYear"), F = this._get(L, "showMonthAfterYear"), I = "<div class='ui-datepicker-title'>", G = "";
            if (H || !N) {
                G += "<span class='ui-datepicker-month'>" + w[C] + "</span>"
            } else {
                for (O = B && B.getFullYear() === P, ab = q && q.getFullYear() === P, G += "<select class='ui-datepicker-month' data-handler='selectMonth' data-event='change'>", D = 0; 12 > D; D++) {
                    (!O || D >= B.getMonth()) && (!ab || q.getMonth() >= D) && (G += "<option value='" + D + "'" + (D === C ? " selected='selected'" : "") + ">" + A[D] + "</option>")
                }
                G += "</select>"
            }
            if (F || (I += G + (!H && N && E ? "" : "&#xa0;")), !L.yearshtml) {
                if (L.yearshtml = "", H || !E) {
                    I += "<span class='ui-datepicker-year'>" + P + "</span>"
                } else {
                    for (K = this._get(L, "yearRange").split(":"), J = (new Date).getFullYear(), x = function (S) {
                        var T = S.match(/c[+\-].*/) ? P + parseInt(S.substring(1), 10) : S.match(/[+\-].*/) ? J + parseInt(S, 10) : parseInt(S, 10);
                        return isNaN(T) ? J : T
                    }, M = x(K[0]), k = Math.max(M, x(K[1] || "")), M = B ? Math.max(M, B.getFullYear()) : M, k = q ? Math.min(k, q.getFullYear()) : k, L.yearshtml += "<select class='ui-datepicker-year' data-handler='selectYear' data-event='change'>"; k >= M; M++) {
                        L.yearshtml += "<option value='" + M + "'" + (M === P ? " selected='selected'" : "") + ">" + M + "</option>"
                    }
                    L.yearshtml += "</select>", I += L.yearshtml, L.yearshtml = null
                }
            }
            return I += this._get(L, "yearSuffix"), F && (I += (!H && N && E ? "" : "&#xa0;") + G), I += "</div>"
        },
        _adjustInstDate: function (x, B, C) {
            var A = x.drawYear + ("Y" === C ? B : 0), q = x.drawMonth + ("M" === C ? B : 0), k = Math.min(x.selectedDay, this._getDaysInMonth(A, q)) + ("D" === C ? B : 0), w = this._restrictMinMax(x, this._daylightSavingAdjust(new Date(A, q, k)));
            x.selectedDay = w.getDate(), x.drawMonth = x.selectedMonth = w.getMonth(), x.drawYear = x.selectedYear = w.getFullYear(), ("M" === C || "Y" === C) && this._notifyChange(x)
        },
        _restrictMinMax: function (x, k) {
            var q = this._getMinMaxDate(x, "min"), A = this._getMinMaxDate(x, "max"), w = q && q > k ? q : k;
            return A && w > A ? A : w
        },
        _notifyChange: function (k) {
            var q = this._get(k, "onChangeMonthYear");
            q && q.apply(k.input ? k.input[0] : null, [k.selectedYear, k.selectedMonth + 1, k])
        },
        _getNumberOfMonths: function (k) {
            var q = this._get(k, "numberOfMonths");
            return null == q ? [1, 1] : "number" == typeof q ? [1, q] : q
        },
        _getMinMaxDate: function (k, q) {
            return this._determineDate(k, this._get(k, q + "Date"), null)
        },
        _getDaysInMonth: function (k, q) {
            return 32 - this._daylightSavingAdjust(new Date(k, q, 32)).getDate()
        },
        _getFirstDayOfMonth: function (k, q) {
            return new Date(k, q, 1).getDay()
        },
        _canAdjustMonth: function (w, A, B, x) {
            var q = this._getNumberOfMonths(w), k = this._daylightSavingAdjust(new Date(B, x + (0 > A ? A : q[0] * q[1]), 1));
            return 0 > A && k.setDate(this._getDaysInMonth(k.getFullYear(), k.getMonth())), this._isInRange(w, k)
        },
        _isInRange: function (w, k) {
            var A, E, B = this._getMinMaxDate(w, "min"), q = this._getMinMaxDate(w, "max"), C = null, D = null, x = this._get(w, "yearRange");
            return x && (A = x.split(":"), E = (new Date).getFullYear(), C = parseInt(A[0], 10), D = parseInt(A[1], 10), A[0].match(/[+\-].*/) && (C += E), A[1].match(/[+\-].*/) && (D += E)), (!B || k.getTime() >= B.getTime()) && (!q || k.getTime() <= q.getTime()) && (!C || k.getFullYear() >= C) && (!D || D >= k.getFullYear())
        },
        _getFormatConfig: function (k) {
            var q = this._get(k, "shortYearCutoff");
            return q = "string" != typeof q ? q : (new Date).getFullYear() % 100 + parseInt(q, 10), {
                shortYearCutoff: q,
                dayNamesShort: this._get(k, "dayNamesShort"),
                dayNames: this._get(k, "dayNames"),
                monthNamesShort: this._get(k, "monthNamesShort"),
                monthNames: this._get(k, "monthNames")
            }
        },
        _formatDate: function (x, k, q, A) {
            k || (x.currentDay = x.selectedDay, x.currentMonth = x.selectedMonth, x.currentYear = x.selectedYear);
            var w = k ? "object" == typeof k ? k : this._daylightSavingAdjust(new Date(A, q, k)) : this._daylightSavingAdjust(new Date(x.currentYear, x.currentMonth, x.currentDay));
            return this.formatDate(this._get(x, "dateFormat"), w, this._getFormatConfig(x))
        }
    }), e.fn.datepicker = function (k) {
        if (!this.length) {
            return this
        }
        e.datepicker.initialized || (e(document).mousedown(e.datepicker._checkExternalClick), e.datepicker.initialized = !0), 0 === e("#" + e.datepicker._mainDivId).length && e("body").append(e.datepicker.dpDiv);
        var q = Array.prototype.slice.call(arguments, 1);
        return "string" != typeof k || "isDisabled" !== k && "getDate" !== k && "widget" !== k ? "option" === k && 2 === arguments.length && "string" == typeof arguments[1] ? e.datepicker["_" + k + "Datepicker"].apply(e.datepicker, [this[0]].concat(q)) : this.each(function () {
            "string" == typeof k ? e.datepicker["_" + k + "Datepicker"].apply(e.datepicker, [this].concat(q)) : e.datepicker._attachDatepicker(this, k)
        }) : e.datepicker["_" + k + "Datepicker"].apply(e.datepicker, [this[0]].concat(q))
    }, e.datepicker = new r, e.datepicker.initialized = !1, e.datepicker.uuid = (new Date).getTime(), e.datepicker.version = "1.11.4", e.datepicker, e.widget("ui.draggable", e.ui.mouse, {
        version: "1.11.4",
        widgetEventPrefix: "drag",
        options: {
            addClasses: !0,
            appendTo: "parent",
            axis: !1,
            connectToSortable: !1,
            containment: !1,
            cursor: "auto",
            cursorAt: !1,
            grid: !1,
            handle: !1,
            helper: "original",
            iframeFix: !1,
            opacity: !1,
            refreshPositions: !1,
            revert: !1,
            revertDuration: 500,
            scope: "default",
            scroll: !0,
            scrollSensitivity: 20,
            scrollSpeed: 20,
            snap: !1,
            snapMode: "both",
            snapTolerance: 20,
            stack: !1,
            zIndex: !1,
            drag: null,
            start: null,
            stop: null
        },
        _create: function () {
            "original" === this.options.helper && this._setPositionRelative(), this.options.addClasses && this.element.addClass("ui-draggable"), this.options.disabled && this.element.addClass("ui-draggable-disabled"), this._setHandleClassName(), this._mouseInit()
        },
        _setOption: function (k, q) {
            this._super(k, q), "handle" === k && (this._removeHandleClassName(), this._setHandleClassName())
        },
        _destroy: function () {
            return (this.helper || this.element).is(".ui-draggable-dragging") ? (this.destroyOnClear = !0, void 0) : (this.element.removeClass("ui-draggable ui-draggable-dragging ui-draggable-disabled"), this._removeHandleClassName(), this._mouseDestroy(), void 0)
        },
        _mouseCapture: function (k) {
            var q = this.options;
            return this._blurActiveElement(k), this.helper || q.disabled || e(k.target).closest(".ui-resizable-handle").length > 0 ? !1 : (this.handle = this._getHandle(k), this.handle ? (this._blockFrames(q.iframeFix === !0 ? "iframe" : q.iframeFix), !0) : !1)
        },
        _blockFrames: function (k) {
            this.iframeBlocks = this.document.find(k).map(function () {
                var q = e(this);
                return e("<div>").css("position", "absolute").appendTo(q.parent()).outerWidth(q.outerWidth()).outerHeight(q.outerHeight()).offset(q.offset())[0]
            })
        },
        _unblockFrames: function () {
            this.iframeBlocks && (this.iframeBlocks.remove(), delete this.iframeBlocks)
        },
        _blurActiveElement: function (k) {
            var q = this.document[0];
            if (this.handleElement.is(k.target)) {
                try {
                    q.activeElement && "body" !== q.activeElement.nodeName.toLowerCase() && e(q.activeElement).blur()
                } catch (w) {
                }
            }
        },
        _mouseStart: function (k) {
            var q = this.options;
            return this.helper = this._createHelper(k), this.helper.addClass("ui-draggable-dragging"), this._cacheHelperProportions(), e.ui.ddmanager && (e.ui.ddmanager.current = this), this._cacheMargins(), this.cssPosition = this.helper.css("position"), this.scrollParent = this.helper.scrollParent(!0), this.offsetParent = this.helper.offsetParent(), this.hasFixedAncestor = this.helper.parents().filter(function () {
                return "fixed" === e(this).css("position")
            }).length > 0, this.positionAbs = this.element.offset(), this._refreshOffsets(k), this.originalPosition = this.position = this._generatePosition(k, !1), this.originalPageX = k.pageX, this.originalPageY = k.pageY, q.cursorAt && this._adjustOffsetFromHelper(q.cursorAt), this._setContainment(), this._trigger("start", k) === !1 ? (this._clear(), !1) : (this._cacheHelperProportions(), e.ui.ddmanager && !q.dropBehaviour && e.ui.ddmanager.prepareOffsets(this, k), this._normalizeRightBottom(), this._mouseDrag(k, !0), e.ui.ddmanager && e.ui.ddmanager.dragStart(this, k), !0)
        },
        _refreshOffsets: function (k) {
            this.offset = {
                top: this.positionAbs.top - this.margins.top,
                left: this.positionAbs.left - this.margins.left,
                scroll: !1,
                parent: this._getParentOffset(),
                relative: this._getRelativeOffset()
            }, this.offset.click = {
                left: k.pageX - this.offset.left,
                top: k.pageY - this.offset.top
            }
        },
        _mouseDrag: function (k, q) {
            if (this.hasFixedAncestor && (this.offset.parent = this._getParentOffset()), this.position = this._generatePosition(k, !0), this.positionAbs = this._convertPositionTo("absolute"), !q) {
                var w = this._uiHash();
                if (this._trigger("drag", k, w) === !1) {
                    return this._mouseUp({}), !1
                }
                this.position = w.position
            }
            return this.helper[0].style.left = this.position.left + "px", this.helper[0].style.top = this.position.top + "px", e.ui.ddmanager && e.ui.ddmanager.drag(this, k), !1
        },
        _mouseStop: function (k) {
            var q = this, w = !1;
            return e.ui.ddmanager && !this.options.dropBehaviour && (w = e.ui.ddmanager.drop(this, k)), this.dropped && (w = this.dropped, this.dropped = !1), "invalid" === this.options.revert && !w || "valid" === this.options.revert && w || this.options.revert === !0 || e.isFunction(this.options.revert) && this.options.revert.call(this.element, w) ? e(this.helper).animate(this.originalPosition, parseInt(this.options.revertDuration, 10), function () {
                q._trigger("stop", k) !== !1 && q._clear()
            }) : this._trigger("stop", k) !== !1 && this._clear(), !1
        },
        _mouseUp: function (k) {
            return this._unblockFrames(), e.ui.ddmanager && e.ui.ddmanager.dragStop(this, k), this.handleElement.is(k.target) && this.element.focus(), e.ui.mouse.prototype._mouseUp.call(this, k)
        },
        cancel: function () {
            return this.helper.is(".ui-draggable-dragging") ? this._mouseUp({}) : this._clear(), this
        },
        _getHandle: function (k) {
            return this.options.handle ? !!e(k.target).closest(this.element.find(this.options.handle)).length : !0
        },
        _setHandleClassName: function () {
            this.handleElement = this.options.handle ? this.element.find(this.options.handle) : this.element, this.handleElement.addClass("ui-draggable-handle")
        },
        _removeHandleClassName: function () {
            this.handleElement.removeClass("ui-draggable-handle")
        },
        _createHelper: function (k) {
            var q = this.options, x = e.isFunction(q.helper), w = x ? e(q.helper.apply(this.element[0], [k])) : "clone" === q.helper ? this.element.clone().removeAttr("id") : this.element;
            return w.parents("body").length || w.appendTo("parent" === q.appendTo ? this.element[0].parentNode : q.appendTo), x && w[0] === this.element[0] && this._setPositionRelative(), w[0] === this.element[0] || /(fixed|absolute)/.test(w.css("position")) || w.css("position", "absolute"), w
        },
        _setPositionRelative: function () {
            /^(?:r|a|f)/.test(this.element.css("position")) || (this.element[0].style.position = "relative")
        },
        _adjustOffsetFromHelper: function (k) {
            "string" == typeof k && (k = k.split(" ")), e.isArray(k) && (k = {
                left: +k[0],
                top: +k[1] || 0
            }), "left" in k && (this.offset.click.left = k.left + this.margins.left), "right" in k && (this.offset.click.left = this.helperProportions.width - k.right + this.margins.left), "top" in k && (this.offset.click.top = k.top + this.margins.top), "bottom" in k && (this.offset.click.top = this.helperProportions.height - k.bottom + this.margins.top)
        },
        _isRootNode: function (k) {
            return /(html|body)/i.test(k.tagName) || k === this.document[0]
        },
        _getParentOffset: function () {
            var k = this.offsetParent.offset(), q = this.document[0];
            return "absolute" === this.cssPosition && this.scrollParent[0] !== q && e.contains(this.scrollParent[0], this.offsetParent[0]) && (k.left += this.scrollParent.scrollLeft(), k.top += this.scrollParent.scrollTop()), this._isRootNode(this.offsetParent[0]) && (k = {
                top: 0,
                left: 0
            }), {
                top: k.top + (parseInt(this.offsetParent.css("borderTopWidth"), 10) || 0),
                left: k.left + (parseInt(this.offsetParent.css("borderLeftWidth"), 10) || 0)
            }
        },
        _getRelativeOffset: function () {
            if ("relative" !== this.cssPosition) {
                return {top: 0, left: 0}
            }
            var k = this.element.position(), q = this._isRootNode(this.scrollParent[0]);
            return {
                top: k.top - (parseInt(this.helper.css("top"), 10) || 0) + (q ? 0 : this.scrollParent.scrollTop()),
                left: k.left - (parseInt(this.helper.css("left"), 10) || 0) + (q ? 0 : this.scrollParent.scrollLeft())
            }
        },
        _cacheMargins: function () {
            this.margins = {
                left: parseInt(this.element.css("marginLeft"), 10) || 0,
                top: parseInt(this.element.css("marginTop"), 10) || 0,
                right: parseInt(this.element.css("marginRight"), 10) || 0,
                bottom: parseInt(this.element.css("marginBottom"), 10) || 0
            }
        },
        _cacheHelperProportions: function () {
            this.helperProportions = {
                width: this.helper.outerWidth(),
                height: this.helper.outerHeight()
            }
        },
        _setContainment: function () {
            var x, A, w, q = this.options, k = this.document[0];
            return this.relativeContainer = null, q.containment ? "window" === q.containment ? (this.containment = [e(window).scrollLeft() - this.offset.relative.left - this.offset.parent.left, e(window).scrollTop() - this.offset.relative.top - this.offset.parent.top, e(window).scrollLeft() + e(window).width() - this.helperProportions.width - this.margins.left, e(window).scrollTop() + (e(window).height() || k.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top], void 0) : "document" === q.containment ? (this.containment = [0, 0, e(k).width() - this.helperProportions.width - this.margins.left, (e(k).height() || k.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top], void 0) : q.containment.constructor === Array ? (this.containment = q.containment, void 0) : ("parent" === q.containment && (q.containment = this.helper[0].parentNode), A = e(q.containment), w = A[0], w && (x = /(scroll|auto)/.test(A.css("overflow")), this.containment = [(parseInt(A.css("borderLeftWidth"), 10) || 0) + (parseInt(A.css("paddingLeft"), 10) || 0), (parseInt(A.css("borderTopWidth"), 10) || 0) + (parseInt(A.css("paddingTop"), 10) || 0), (x ? Math.max(w.scrollWidth, w.offsetWidth) : w.offsetWidth) - (parseInt(A.css("borderRightWidth"), 10) || 0) - (parseInt(A.css("paddingRight"), 10) || 0) - this.helperProportions.width - this.margins.left - this.margins.right, (x ? Math.max(w.scrollHeight, w.offsetHeight) : w.offsetHeight) - (parseInt(A.css("borderBottomWidth"), 10) || 0) - (parseInt(A.css("paddingBottom"), 10) || 0) - this.helperProportions.height - this.margins.top - this.margins.bottom], this.relativeContainer = A), void 0) : (this.containment = null, void 0)
        },
        _convertPositionTo: function (w, k) {
            k || (k = this.position);
            var q = "absolute" === w ? 1 : -1, x = this._isRootNode(this.scrollParent[0]);
            return {
                top: k.top + this.offset.relative.top * q + this.offset.parent.top * q - ("fixed" === this.cssPosition ? -this.offset.scroll.top : x ? 0 : this.offset.scroll.top) * q,
                left: k.left + this.offset.relative.left * q + this.offset.parent.left * q - ("fixed" === this.cssPosition ? -this.offset.scroll.left : x ? 0 : this.offset.scroll.left) * q
            }
        },
        _generatePosition: function (k, E) {
            var w, C, A, F, B = this.options, D = this._isRootNode(this.scrollParent[0]), q = k.pageX, x = k.pageY;
            return D && this.offset.scroll || (this.offset.scroll = {
                top: this.scrollParent.scrollTop(),
                left: this.scrollParent.scrollLeft()
            }), E && (this.containment && (this.relativeContainer ? (C = this.relativeContainer.offset(), w = [this.containment[0] + C.left, this.containment[1] + C.top, this.containment[2] + C.left, this.containment[3] + C.top]) : w = this.containment, k.pageX - this.offset.click.left < w[0] && (q = w[0] + this.offset.click.left), k.pageY - this.offset.click.top < w[1] && (x = w[1] + this.offset.click.top), k.pageX - this.offset.click.left > w[2] && (q = w[2] + this.offset.click.left), k.pageY - this.offset.click.top > w[3] && (x = w[3] + this.offset.click.top)), B.grid && (A = B.grid[1] ? this.originalPageY + Math.round((x - this.originalPageY) / B.grid[1]) * B.grid[1] : this.originalPageY, x = w ? A - this.offset.click.top >= w[1] || A - this.offset.click.top > w[3] ? A : A - this.offset.click.top >= w[1] ? A - B.grid[1] : A + B.grid[1] : A, F = B.grid[0] ? this.originalPageX + Math.round((q - this.originalPageX) / B.grid[0]) * B.grid[0] : this.originalPageX, q = w ? F - this.offset.click.left >= w[0] || F - this.offset.click.left > w[2] ? F : F - this.offset.click.left >= w[0] ? F - B.grid[0] : F + B.grid[0] : F), "y" === B.axis && (q = this.originalPageX), "x" === B.axis && (x = this.originalPageY)), {
                top: x - this.offset.click.top - this.offset.relative.top - this.offset.parent.top + ("fixed" === this.cssPosition ? -this.offset.scroll.top : D ? 0 : this.offset.scroll.top),
                left: q - this.offset.click.left - this.offset.relative.left - this.offset.parent.left + ("fixed" === this.cssPosition ? -this.offset.scroll.left : D ? 0 : this.offset.scroll.left)
            }
        },
        _clear: function () {
            this.helper.removeClass("ui-draggable-dragging"), this.helper[0] === this.element[0] || this.cancelHelperRemoval || this.helper.remove(), this.helper = null, this.cancelHelperRemoval = !1, this.destroyOnClear && this.destroy()
        },
        _normalizeRightBottom: function () {
            "y" !== this.options.axis && "auto" !== this.helper.css("right") && (this.helper.width(this.helper.width()), this.helper.css("right", "auto")), "x" !== this.options.axis && "auto" !== this.helper.css("bottom") && (this.helper.height(this.helper.height()), this.helper.css("bottom", "auto"))
        },
        _trigger: function (k, q, w) {
            return w = w || this._uiHash(), e.ui.plugin.call(this, k, [q, w, this], !0), /^(drag|start|stop)/.test(k) && (this.positionAbs = this._convertPositionTo("absolute"), w.offset = this.positionAbs), e.Widget.prototype._trigger.call(this, k, q, w)
        },
        plugins: {},
        _uiHash: function () {
            return {
                helper: this.helper,
                position: this.position,
                originalPosition: this.originalPosition,
                offset: this.positionAbs
            }
        }
    }), e.ui.plugin.add("draggable", "connectToSortable", {
        start: function (k, q, x) {
            var w = e.extend({}, q, {item: x.element});
            x.sortables = [], e(x.options.connectToSortable).each(function () {
                var A = e(this).sortable("instance");
                A && !A.options.disabled && (x.sortables.push(A), A.refreshPositions(), A._trigger("activate", k, w))
            })
        }, stop: function (k, q, x) {
            var w = e.extend({}, q, {item: x.element});
            x.cancelHelperRemoval = !1, e.each(x.sortables, function () {
                var A = this;
                A.isOver ? (A.isOver = 0, x.cancelHelperRemoval = !0, A.cancelHelperRemoval = !1, A._storedCSS = {
                    position: A.placeholder.css("position"),
                    top: A.placeholder.css("top"),
                    left: A.placeholder.css("left")
                }, A._mouseStop(k), A.options.helper = A.options._helper) : (A.cancelHelperRemoval = !0, A._trigger("deactivate", k, w))
            })
        }, drag: function (k, q, w) {
            e.each(w.sortables, function () {
                var x = !1, A = this;
                A.positionAbs = w.positionAbs, A.helperProportions = w.helperProportions, A.offset.click = w.offset.click, A._intersectsWith(A.containerCache) && (x = !0, e.each(w.sortables, function () {
                    return this.positionAbs = w.positionAbs, this.helperProportions = w.helperProportions, this.offset.click = w.offset.click, this !== A && this._intersectsWith(this.containerCache) && e.contains(A.element[0], this.element[0]) && (x = !1), x
                })), x ? (A.isOver || (A.isOver = 1, w._parent = q.helper.parent(), A.currentItem = q.helper.appendTo(A.element).data("ui-sortable-item", !0), A.options._helper = A.options.helper, A.options.helper = function () {
                    return q.helper[0]
                }, k.target = A.currentItem[0], A._mouseCapture(k, !0), A._mouseStart(k, !0, !0), A.offset.click.top = w.offset.click.top, A.offset.click.left = w.offset.click.left, A.offset.parent.left -= w.offset.parent.left - A.offset.parent.left, A.offset.parent.top -= w.offset.parent.top - A.offset.parent.top, w._trigger("toSortable", k), w.dropped = A.element, e.each(w.sortables, function () {
                    this.refreshPositions()
                }), w.currentItem = w.element, A.fromOutside = w), A.currentItem && (A._mouseDrag(k), q.position = A.position)) : A.isOver && (A.isOver = 0, A.cancelHelperRemoval = !0, A.options._revert = A.options.revert, A.options.revert = !1, A._trigger("out", k, A._uiHash(A)), A._mouseStop(k, !0), A.options.revert = A.options._revert, A.options.helper = A.options._helper, A.placeholder && A.placeholder.remove(), q.helper.appendTo(w._parent), w._refreshOffsets(k), q.position = w._generatePosition(k, !0), w._trigger("fromSortable", k), w.dropped = !1, e.each(w.sortables, function () {
                    this.refreshPositions()
                }))
            })
        }
    }), e.ui.plugin.add("draggable", "cursor", {
        start: function (x, A, w) {
            var q = e("body"), k = w.options;
            q.css("cursor") && (k._cursor = q.css("cursor")), q.css("cursor", k.cursor)
        }, stop: function (k, q, x) {
            var w = x.options;
            w._cursor && e("body").css("cursor", w._cursor)
        }
    }), e.ui.plugin.add("draggable", "opacity", {
        start: function (x, A, w) {
            var q = e(A.helper), k = w.options;
            q.css("opacity") && (k._opacity = q.css("opacity")), q.css("opacity", k.opacity)
        }, stop: function (k, q, x) {
            var w = x.options;
            w._opacity && e(q.helper).css("opacity", w._opacity)
        }
    }), e.ui.plugin.add("draggable", "scroll", {
        start: function (w, k, q) {
            q.scrollParentNotHidden || (q.scrollParentNotHidden = q.helper.scrollParent(!1)), q.scrollParentNotHidden[0] !== q.document[0] && "HTML" !== q.scrollParentNotHidden[0].tagName && (q.overflowOffset = q.scrollParentNotHidden.offset())
        }, drag: function (B, C, A) {
            var q = A.options, k = !1, w = A.scrollParentNotHidden[0], x = A.document[0];
            w !== x && "HTML" !== w.tagName ? (q.axis && "x" === q.axis || (A.overflowOffset.top + w.offsetHeight - B.pageY < q.scrollSensitivity ? w.scrollTop = k = w.scrollTop + q.scrollSpeed : B.pageY - A.overflowOffset.top < q.scrollSensitivity && (w.scrollTop = k = w.scrollTop - q.scrollSpeed)), q.axis && "y" === q.axis || (A.overflowOffset.left + w.offsetWidth - B.pageX < q.scrollSensitivity ? w.scrollLeft = k = w.scrollLeft + q.scrollSpeed : B.pageX - A.overflowOffset.left < q.scrollSensitivity && (w.scrollLeft = k = w.scrollLeft - q.scrollSpeed))) : (q.axis && "x" === q.axis || (B.pageY - e(x).scrollTop() < q.scrollSensitivity ? k = e(x).scrollTop(e(x).scrollTop() - q.scrollSpeed) : e(window).height() - (B.pageY - e(x).scrollTop()) < q.scrollSensitivity && (k = e(x).scrollTop(e(x).scrollTop() + q.scrollSpeed))), q.axis && "y" === q.axis || (B.pageX - e(x).scrollLeft() < q.scrollSensitivity ? k = e(x).scrollLeft(e(x).scrollLeft() - q.scrollSpeed) : e(window).width() - (B.pageX - e(x).scrollLeft()) < q.scrollSensitivity && (k = e(x).scrollLeft(e(x).scrollLeft() + q.scrollSpeed)))), k !== !1 && e.ui.ddmanager && !q.dropBehaviour && e.ui.ddmanager.prepareOffsets(A, B)
        }
    }), e.ui.plugin.add("draggable", "snap", {
        start: function (k, q, x) {
            var w = x.options;
            x.snapElements = [], e(w.snap.constructor !== String ? w.snap.items || ":data(ui-draggable)" : w.snap).each(function () {
                var A = e(this), B = A.offset();
                this !== x.element[0] && x.snapElements.push({
                    item: this,
                    width: A.outerWidth(),
                    height: A.outerHeight(),
                    top: B.top,
                    left: B.left
                })
            })
        }, drag: function (D, O, C) {
            var w, G, x, B, N, k, E, K, J, A, L = C.options, q = L.snapTolerance, M = O.offset.left, F = M + C.helperProportions.width, I = O.offset.top, H = I + C.helperProportions.height;
            for (J = C.snapElements.length - 1; J >= 0; J--) {
                N = C.snapElements[J].left - C.margins.left, k = N + C.snapElements[J].width, E = C.snapElements[J].top - C.margins.top, K = E + C.snapElements[J].height, N - q > F || M > k + q || E - q > H || I > K + q || !e.contains(C.snapElements[J].item.ownerDocument, C.snapElements[J].item) ? (C.snapElements[J].snapping && C.options.snap.release && C.options.snap.release.call(C.element, D, e.extend(C._uiHash(), {snapItem: C.snapElements[J].item})), C.snapElements[J].snapping = !1) : ("inner" !== L.snapMode && (w = q >= Math.abs(E - H), G = q >= Math.abs(K - I), x = q >= Math.abs(N - F), B = q >= Math.abs(k - M), w && (O.position.top = C._convertPositionTo("relative", {
                    top: E - C.helperProportions.height,
                    left: 0
                }).top), G && (O.position.top = C._convertPositionTo("relative", {
                    top: K,
                    left: 0
                }).top), x && (O.position.left = C._convertPositionTo("relative", {
                    top: 0,
                    left: N - C.helperProportions.width
                }).left), B && (O.position.left = C._convertPositionTo("relative", {
                    top: 0,
                    left: k
                }).left)), A = w || G || x || B, "outer" !== L.snapMode && (w = q >= Math.abs(E - I), G = q >= Math.abs(K - H), x = q >= Math.abs(N - M), B = q >= Math.abs(k - F), w && (O.position.top = C._convertPositionTo("relative", {
                    top: E,
                    left: 0
                }).top), G && (O.position.top = C._convertPositionTo("relative", {
                    top: K - C.helperProportions.height,
                    left: 0
                }).top), x && (O.position.left = C._convertPositionTo("relative", {
                    top: 0,
                    left: N
                }).left), B && (O.position.left = C._convertPositionTo("relative", {
                    top: 0,
                    left: k - C.helperProportions.width
                }).left)), !C.snapElements[J].snapping && (w || G || x || B || A) && C.options.snap.snap && C.options.snap.snap.call(C.element, D, e.extend(C._uiHash(), {snapItem: C.snapElements[J].item})), C.snapElements[J].snapping = w || G || x || B || A)
            }
        }
    }), e.ui.plugin.add("draggable", "stack", {
        start: function (A, B, x) {
            var q, k = x.options, w = e.makeArray(e(k.stack)).sort(function (D, C) {
                return (parseInt(e(D).css("zIndex"), 10) || 0) - (parseInt(e(C).css("zIndex"), 10) || 0)
            });
            w.length && (q = parseInt(e(w[0]).css("zIndex"), 10) || 0, e(w).each(function (C) {
                e(this).css("zIndex", q + C)
            }), this.css("zIndex", q + w.length))
        }
    }), e.ui.plugin.add("draggable", "zIndex", {
        start: function (x, A, w) {
            var q = e(A.helper), k = w.options;
            q.css("zIndex") && (k._zIndex = q.css("zIndex")), q.css("zIndex", k.zIndex)
        }, stop: function (k, q, x) {
            var w = x.options;
            w._zIndex && e(q.helper).css("zIndex", w._zIndex)
        }
    }), e.ui.draggable, e.widget("ui.resizable", e.ui.mouse, {
        version: "1.11.4",
        widgetEventPrefix: "resize",
        options: {
            alsoResize: !1,
            animate: !1,
            animateDuration: "slow",
            animateEasing: "swing",
            aspectRatio: !1,
            autoHide: !1,
            containment: !1,
            ghost: !1,
            grid: !1,
            handles: "e,s,se",
            helper: !1,
            maxHeight: null,
            maxWidth: null,
            minHeight: 10,
            minWidth: 10,
            zIndex: 90,
            resize: null,
            start: null,
            stop: null
        },
        _num: function (k) {
            return parseInt(k, 10) || 0
        },
        _isNumber: function (k) {
            return !isNaN(parseInt(k, 10))
        },
        _hasScroll: function (k, q) {
            if ("hidden" === e(k).css("overflow")) {
                return !1
            }
            var x = q && "left" === q ? "scrollLeft" : "scrollTop", w = !1;
            return k[x] > 0 ? !0 : (k[x] = 1, w = k[x] > 0, k[x] = 0, w)
        },
        _create: function () {
            var B, C, A, q, k, w = this, x = this.options;
            if (this.element.addClass("ui-resizable"), e.extend(this, {
                _aspectRatio: !!x.aspectRatio,
                aspectRatio: x.aspectRatio,
                originalElement: this.element,
                _proportionallyResizeElements: [],
                _helper: x.helper || x.ghost || x.animate ? x.helper || "ui-resizable-helper" : null
            }), this.element[0].nodeName.match(/^(canvas|textarea|input|select|button|img)$/i) && (this.element.wrap(e("<div class='ui-wrapper' style='overflow: hidden;'></div>").css({
                position: this.element.css("position"),
                width: this.element.outerWidth(),
                height: this.element.outerHeight(),
                top: this.element.css("top"),
                left: this.element.css("left")
            })), this.element = this.element.parent().data("ui-resizable", this.element.resizable("instance")), this.elementIsWrapper = !0, this.element.css({
                marginLeft: this.originalElement.css("marginLeft"),
                marginTop: this.originalElement.css("marginTop"),
                marginRight: this.originalElement.css("marginRight"),
                marginBottom: this.originalElement.css("marginBottom")
            }), this.originalElement.css({
                marginLeft: 0,
                marginTop: 0,
                marginRight: 0,
                marginBottom: 0
            }), this.originalResizeStyle = this.originalElement.css("resize"), this.originalElement.css("resize", "none"), this._proportionallyResizeElements.push(this.originalElement.css({
                position: "static",
                zoom: 1,
                display: "block"
            })), this.originalElement.css({margin: this.originalElement.css("margin")}), this._proportionallyResize()), this.handles = x.handles || (e(".ui-resizable-handle", this.element).length ? {
                n: ".ui-resizable-n",
                e: ".ui-resizable-e",
                s: ".ui-resizable-s",
                w: ".ui-resizable-w",
                se: ".ui-resizable-se",
                sw: ".ui-resizable-sw",
                ne: ".ui-resizable-ne",
                nw: ".ui-resizable-nw"
            } : "e,s,se"), this._handles = e(), this.handles.constructor === String) {
                for ("all" === this.handles && (this.handles = "n,e,s,w,se,sw,ne,nw"), B = this.handles.split(","), this.handles = {}, C = 0; B.length > C; C++) {
                    A = e.trim(B[C]), k = "ui-resizable-" + A, q = e("<div class='ui-resizable-handle " + k + "'></div>"), q.css({zIndex: x.zIndex}), "se" === A && q.addClass("ui-icon ui-icon-gripsmall-diagonal-se"), this.handles[A] = ".ui-resizable-" + A, this.element.append(q)
                }
            }
            this._renderAxis = function (H) {
                var D, G, F, E;
                H = H || this.element;
                for (D in this.handles) {
                    this.handles[D].constructor === String ? this.handles[D] = this.element.children(this.handles[D]).first().show() : (this.handles[D].jquery || this.handles[D].nodeType) && (this.handles[D] = e(this.handles[D]), this._on(this.handles[D], {mousedown: w._mouseDown})), this.elementIsWrapper && this.originalElement[0].nodeName.match(/^(textarea|input|select|button)$/i) && (G = e(this.handles[D], this.element), E = /sw|ne|nw|se|n|s/.test(D) ? G.outerHeight() : G.outerWidth(), F = ["padding", /ne|nw|n/.test(D) ? "Top" : /se|sw|s/.test(D) ? "Bottom" : /^e$/.test(D) ? "Right" : "Left"].join(""), H.css(F, E), this._proportionallyResize()), this._handles = this._handles.add(this.handles[D])
                }
            }, this._renderAxis(this.element), this._handles = this._handles.add(this.element.find(".ui-resizable-handle")), this._handles.disableSelection(), this._handles.mouseover(function () {
                w.resizing || (this.className && (q = this.className.match(/ui-resizable-(se|sw|ne|nw|n|e|s|w)/i)), w.axis = q && q[1] ? q[1] : "se")
            }), x.autoHide && (this._handles.hide(), e(this.element).addClass("ui-resizable-autohide").mouseenter(function () {
                x.disabled || (e(this).removeClass("ui-resizable-autohide"), w._handles.show())
            }).mouseleave(function () {
                x.disabled || w.resizing || (e(this).addClass("ui-resizable-autohide"), w._handles.hide())
            })), this._mouseInit()
        },
        _destroy: function () {
            this._mouseDestroy();
            var k, q = function (w) {
                e(w).removeClass("ui-resizable ui-resizable-disabled ui-resizable-resizing").removeData("resizable").removeData("ui-resizable").unbind(".resizable").find(".ui-resizable-handle").remove()
            };
            return this.elementIsWrapper && (q(this.element), k = this.element, this.originalElement.css({
                position: k.css("position"),
                width: k.outerWidth(),
                height: k.outerHeight(),
                top: k.css("top"),
                left: k.css("left")
            }).insertAfter(k), k.remove()), this.originalElement.css("resize", this.originalResizeStyle), q(this.originalElement), this
        },
        _mouseCapture: function (k) {
            var q, x, w = !1;
            for (q in this.handles) {
                x = e(this.handles[q])[0], (x === k.target || e.contains(x, k.target)) && (w = !0)
            }
            return !this.options.disabled && w
        },
        _mouseStart: function (A) {
            var B, x, q, k = this.options, w = this.element;
            return this.resizing = !0, this._renderProxy(), B = this._num(this.helper.css("left")), x = this._num(this.helper.css("top")), k.containment && (B += e(k.containment).scrollLeft() || 0, x += e(k.containment).scrollTop() || 0), this.offset = this.helper.offset(), this.position = {
                left: B,
                top: x
            }, this.size = this._helper ? {
                width: this.helper.width(),
                height: this.helper.height()
            } : {
                width: w.width(),
                height: w.height()
            }, this.originalSize = this._helper ? {
                width: w.outerWidth(),
                height: w.outerHeight()
            } : {
                width: w.width(),
                height: w.height()
            }, this.sizeDiff = {
                width: w.outerWidth() - w.width(),
                height: w.outerHeight() - w.height()
            }, this.originalPosition = {
                left: B,
                top: x
            }, this.originalMousePosition = {
                left: A.pageX,
                top: A.pageY
            }, this.aspectRatio = "number" == typeof k.aspectRatio ? k.aspectRatio : this.originalSize.width / this.originalSize.height || 1, q = e(".ui-resizable-" + this.axis).css("cursor"), e("body").css("cursor", "auto" === q ? this.axis + "-resize" : q), w.addClass("ui-resizable-resizing"), this._propagate("start", A), !0
        },
        _mouseDrag: function (C) {
            var D, A, q = this.originalMousePosition, k = this.axis, w = C.pageX - q.left || 0, x = C.pageY - q.top || 0, B = this._change[k];
            return this._updatePrevProperties(), B ? (D = B.apply(this, [C, w, x]), this._updateVirtualBoundaries(C.shiftKey), (this._aspectRatio || C.shiftKey) && (D = this._updateRatio(D, C)), D = this._respectSize(D, C), this._updateCache(D), this._propagate("resize", C), A = this._applyChanges(), !this._helper && this._proportionallyResizeElements.length && this._proportionallyResize(), e.isEmptyObject(A) || (this._updatePrevProperties(), this._trigger("resize", C, this.ui()), this._applyChanges()), !1) : !1
        },
        _mouseStop: function (F) {
            this.resizing = !1;
            var x, D, B, q, C, E, w, A = this.options, k = this;
            return this._helper && (x = this._proportionallyResizeElements, D = x.length && /textarea/i.test(x[0].nodeName), B = D && this._hasScroll(x[0], "left") ? 0 : k.sizeDiff.height, q = D ? 0 : k.sizeDiff.width, C = {
                width: k.helper.width() - q,
                height: k.helper.height() - B
            }, E = parseInt(k.element.css("left"), 10) + (k.position.left - k.originalPosition.left) || null, w = parseInt(k.element.css("top"), 10) + (k.position.top - k.originalPosition.top) || null, A.animate || this.element.css(e.extend(C, {
                top: w,
                left: E
            })), k.helper.height(k.size.height), k.helper.width(k.size.width), this._helper && !A.animate && this._proportionallyResize()), e("body").css("cursor", "auto"), this.element.removeClass("ui-resizable-resizing"), this._propagate("stop", F), this._helper && this.helper.remove(), !1
        },
        _updatePrevProperties: function () {
            this.prevPosition = {
                top: this.position.top,
                left: this.position.left
            }, this.prevSize = {
                width: this.size.width,
                height: this.size.height
            }
        },
        _applyChanges: function () {
            var k = {};
            return this.position.top !== this.prevPosition.top && (k.top = this.position.top + "px"), this.position.left !== this.prevPosition.left && (k.left = this.position.left + "px"), this.size.width !== this.prevSize.width && (k.width = this.size.width + "px"), this.size.height !== this.prevSize.height && (k.height = this.size.height + "px"), this.helper.css(k), k
        },
        _updateVirtualBoundaries: function (x) {
            var B, C, A, q, k, w = this.options;
            k = {
                minWidth: this._isNumber(w.minWidth) ? w.minWidth : 0,
                maxWidth: this._isNumber(w.maxWidth) ? w.maxWidth : 1 / 0,
                minHeight: this._isNumber(w.minHeight) ? w.minHeight : 0,
                maxHeight: this._isNumber(w.maxHeight) ? w.maxHeight : 1 / 0
            }, (this._aspectRatio || x) && (B = k.minHeight * this.aspectRatio, A = k.minWidth / this.aspectRatio, C = k.maxHeight * this.aspectRatio, q = k.maxWidth / this.aspectRatio, B > k.minWidth && (k.minWidth = B), A > k.minHeight && (k.minHeight = A), k.maxWidth > C && (k.maxWidth = C), k.maxHeight > q && (k.maxHeight = q)), this._vBoundaries = k
        },
        _updateCache: function (k) {
            this.offset = this.helper.offset(), this._isNumber(k.left) && (this.position.left = k.left), this._isNumber(k.top) && (this.position.top = k.top), this._isNumber(k.height) && (this.size.height = k.height), this._isNumber(k.width) && (this.size.width = k.width)
        },
        _updateRatio: function (w) {
            var k = this.position, q = this.size, x = this.axis;
            return this._isNumber(w.height) ? w.width = w.height * this.aspectRatio : this._isNumber(w.width) && (w.height = w.width / this.aspectRatio), "sw" === x && (w.left = k.left + (q.width - w.width), w.top = null), "nw" === x && (w.top = k.top + (q.height - w.height), w.left = k.left + (q.width - w.width)), w
        },
        _respectSize: function (k) {
            var x = this._vBoundaries, A = this.axis, w = this._isNumber(k.width) && x.maxWidth && x.maxWidth < k.width, C = this._isNumber(k.height) && x.maxHeight && x.maxHeight < k.height, G = this._isNumber(k.width) && x.minWidth && x.minWidth > k.width, D = this._isNumber(k.height) && x.minHeight && x.minHeight > k.height, F = this.originalPosition.left + this.originalSize.width, q = this.position.top + this.size.height, B = /sw|nw|w/.test(A), E = /nw|ne|n/.test(A);
            return G && (k.width = x.minWidth), D && (k.height = x.minHeight), w && (k.width = x.maxWidth), C && (k.height = x.maxHeight), G && B && (k.left = F - x.minWidth), w && B && (k.left = F - x.maxWidth), D && E && (k.top = q - x.minHeight), C && E && (k.top = q - x.maxHeight), k.width || k.height || k.left || !k.top ? k.width || k.height || k.top || !k.left || (k.left = null) : k.top = null, k
        },
        _getPaddingPlusBorderDimensions: function (x) {
            for (var k = 0, q = [], A = [x.css("borderTopWidth"), x.css("borderRightWidth"), x.css("borderBottomWidth"), x.css("borderLeftWidth")], w = [x.css("paddingTop"), x.css("paddingRight"), x.css("paddingBottom"), x.css("paddingLeft")]; 4 > k; k++) {
                q[k] = parseInt(A[k], 10) || 0, q[k] += parseInt(w[k], 10) || 0
            }
            return {height: q[0] + q[2], width: q[1] + q[3]}
        },
        _proportionallyResize: function () {
            if (this._proportionallyResizeElements.length) {
                for (var w, k = 0, q = this.helper || this.element; this._proportionallyResizeElements.length > k; k++) {
                    w = this._proportionallyResizeElements[k], this.outerDimensions || (this.outerDimensions = this._getPaddingPlusBorderDimensions(w)), w.css({
                        height: q.height() - this.outerDimensions.height || 0,
                        width: q.width() - this.outerDimensions.width || 0
                    })
                }
            }
        },
        _renderProxy: function () {
            var k = this.element, q = this.options;
            this.elementOffset = k.offset(), this._helper ? (this.helper = this.helper || e("<div style='overflow:hidden;'></div>"), this.helper.addClass(this._helper).css({
                width: this.element.outerWidth() - 1,
                height: this.element.outerHeight() - 1,
                position: "absolute",
                left: this.elementOffset.left + "px",
                top: this.elementOffset.top + "px",
                zIndex: ++q.zIndex
            }), this.helper.appendTo("body").disableSelection()) : this.helper = this.element
        },
        _change: {
            e: function (k, q) {
                return {width: this.originalSize.width + q}
            }, w: function (w, k) {
                var q = this.originalSize, x = this.originalPosition;
                return {left: x.left + k, width: q.width - k}
            }, n: function (x, k, q) {
                var A = this.originalSize, w = this.originalPosition;
                return {top: w.top + q, height: A.height - q}
            }, s: function (w, k, q) {
                return {height: this.originalSize.height + q}
            }, se: function (k, q, w) {
                return e.extend(this._change.s.apply(this, arguments), this._change.e.apply(this, [k, q, w]))
            }, sw: function (k, q, w) {
                return e.extend(this._change.s.apply(this, arguments), this._change.w.apply(this, [k, q, w]))
            }, ne: function (k, q, w) {
                return e.extend(this._change.n.apply(this, arguments), this._change.e.apply(this, [k, q, w]))
            }, nw: function (k, q, w) {
                return e.extend(this._change.n.apply(this, arguments), this._change.w.apply(this, [k, q, w]))
            }
        },
        _propagate: function (k, q) {
            e.ui.plugin.call(this, k, [q, this.ui()]), "resize" !== k && this._trigger(k, q, this.ui())
        },
        plugins: {},
        ui: function () {
            return {
                originalElement: this.originalElement,
                element: this.element,
                helper: this.helper,
                position: this.position,
                size: this.size,
                originalSize: this.originalSize,
                originalPosition: this.originalPosition
            }
        }
    }), e.ui.plugin.add("resizable", "animate", {
        stop: function (F) {
            var x = e(this).resizable("instance"), D = x.options, B = x._proportionallyResizeElements, q = B.length && /textarea/i.test(B[0].nodeName), C = q && x._hasScroll(B[0], "left") ? 0 : x.sizeDiff.height, E = q ? 0 : x.sizeDiff.width, w = {
                width: x.size.width - E,
                height: x.size.height - C
            }, A = parseInt(x.element.css("left"), 10) + (x.position.left - x.originalPosition.left) || null, k = parseInt(x.element.css("top"), 10) + (x.position.top - x.originalPosition.top) || null;
            x.element.animate(e.extend(w, k && A ? {
                top: k,
                left: A
            } : {}), {
                duration: D.animateDuration,
                easing: D.animateEasing,
                step: function () {
                    var G = {
                        width: parseInt(x.element.css("width"), 10),
                        height: parseInt(x.element.css("height"), 10),
                        top: parseInt(x.element.css("top"), 10),
                        left: parseInt(x.element.css("left"), 10)
                    };
                    B && B.length && e(B[0]).css({
                        width: G.width,
                        height: G.height
                    }), x._updateCache(G), x._propagate("resize", F)
                }
            })
        }
    }), e.ui.plugin.add("resizable", "containment", {
        start: function () {
            var x, q, w, D, B, E, G, k = e(this).resizable("instance"), C = k.options, A = k.element, H = C.containment, F = H instanceof e ? H.get(0) : /parent/.test(H) ? A.parent().get(0) : H;
            F && (k.containerElement = e(F), /document/.test(H) || H === document ? (k.containerOffset = {
                left: 0,
                top: 0
            }, k.containerPosition = {
                left: 0,
                top: 0
            }, k.parentData = {
                element: e(document),
                left: 0,
                top: 0,
                width: e(document).width(),
                height: e(document).height() || document.body.parentNode.scrollHeight
            }) : (x = e(F), q = [], e(["Top", "Right", "Left", "Bottom"]).each(function (J, I) {
                q[J] = k._num(x.css("padding" + I))
            }), k.containerOffset = x.offset(), k.containerPosition = x.position(), k.containerSize = {
                height: x.innerHeight() - q[3],
                width: x.innerWidth() - q[1]
            }, w = k.containerOffset, D = k.containerSize.height, B = k.containerSize.width, E = k._hasScroll(F, "left") ? F.scrollWidth : B, G = k._hasScroll(F) ? F.scrollHeight : D, k.parentData = {
                element: F,
                left: w.left,
                top: w.top,
                width: E,
                height: G
            }))
        }, resize: function (w) {
            var I, q, D, A, E = e(this).resizable("instance"), H = E.options, G = E.containerOffset, k = E.position, x = E._aspectRatio || w.shiftKey, C = {
                top: 0,
                left: 0
            }, B = E.containerElement, F = !0;
            B[0] !== document && /static/.test(B.css("position")) && (C = G), k.left < (E._helper ? G.left : 0) && (E.size.width = E.size.width + (E._helper ? E.position.left - G.left : E.position.left - C.left), x && (E.size.height = E.size.width / E.aspectRatio, F = !1), E.position.left = H.helper ? G.left : 0), k.top < (E._helper ? G.top : 0) && (E.size.height = E.size.height + (E._helper ? E.position.top - G.top : E.position.top), x && (E.size.width = E.size.height * E.aspectRatio, F = !1), E.position.top = E._helper ? G.top : 0), D = E.containerElement.get(0) === E.element.parent().get(0), A = /relative|absolute/.test(E.containerElement.css("position")), D && A ? (E.offset.left = E.parentData.left + E.position.left, E.offset.top = E.parentData.top + E.position.top) : (E.offset.left = E.element.offset().left, E.offset.top = E.element.offset().top), I = Math.abs(E.sizeDiff.width + (E._helper ? E.offset.left - C.left : E.offset.left - G.left)), q = Math.abs(E.sizeDiff.height + (E._helper ? E.offset.top - C.top : E.offset.top - G.top)), I + E.size.width >= E.parentData.width && (E.size.width = E.parentData.width - I, x && (E.size.height = E.size.width / E.aspectRatio, F = !1)), q + E.size.height >= E.parentData.height && (E.size.height = E.parentData.height - q, x && (E.size.width = E.size.height * E.aspectRatio, F = !1)), F || (E.position.left = E.prevPosition.left, E.position.top = E.prevPosition.top, E.size.width = E.prevSize.width, E.size.height = E.prevSize.height)
        }, stop: function () {
            var k = e(this).resizable("instance"), x = k.options, E = k.containerOffset, B = k.containerPosition, q = k.containerElement, C = e(k.helper), D = C.offset(), w = C.outerWidth() - k.sizeDiff.width, A = C.outerHeight() - k.sizeDiff.height;
            k._helper && !x.animate && /relative/.test(q.css("position")) && e(this).css({
                left: D.left - B.left - E.left,
                width: w,
                height: A
            }), k._helper && !x.animate && /static/.test(q.css("position")) && e(this).css({
                left: D.left - B.left - E.left,
                width: w,
                height: A
            })
        }
    }), e.ui.plugin.add("resizable", "alsoResize", {
        start: function () {
            var k = e(this).resizable("instance"), q = k.options;
            e(q.alsoResize).each(function () {
                var w = e(this);
                w.data("ui-resizable-alsoresize", {
                    width: parseInt(w.width(), 10),
                    height: parseInt(w.height(), 10),
                    left: parseInt(w.css("left"), 10),
                    top: parseInt(w.css("top"), 10)
                })
            })
        }, resize: function (B, C) {
            var A = e(this).resizable("instance"), q = A.options, k = A.originalSize, w = A.originalPosition, x = {
                height: A.size.height - k.height || 0,
                width: A.size.width - k.width || 0,
                top: A.position.top - w.top || 0,
                left: A.position.left - w.left || 0
            };
            e(q.alsoResize).each(function () {
                var D = e(this), G = e(this).data("ui-resizable-alsoresize"), F = {}, E = D.parents(C.originalElement[0]).length ? ["width", "height"] : ["width", "height", "top", "left"];
                e.each(E, function (I, J) {
                    var H = (G[J] || 0) + (x[J] || 0);
                    H && H >= 0 && (F[J] = H || null)
                }), D.css(F)
            })
        }, stop: function () {
            e(this).removeData("resizable-alsoresize")
        }
    }), e.ui.plugin.add("resizable", "ghost", {
        start: function () {
            var k = e(this).resizable("instance"), q = k.options, w = k.size;
            k.ghost = k.originalElement.clone(), k.ghost.css({
                opacity: 0.25,
                display: "block",
                position: "relative",
                height: w.height,
                width: w.width,
                margin: 0,
                left: 0,
                top: 0
            }).addClass("ui-resizable-ghost").addClass("string" == typeof q.ghost ? q.ghost : ""), k.ghost.appendTo(k.helper)
        }, resize: function () {
            var k = e(this).resizable("instance");
            k.ghost && k.ghost.css({
                position: "relative",
                height: k.size.height,
                width: k.size.width
            })
        }, stop: function () {
            var k = e(this).resizable("instance");
            k.ghost && k.helper && k.helper.get(0).removeChild(k.ghost.get(0))
        }
    }), e.ui.plugin.add("resizable", "grid", {
        resize: function () {
            var E, k = e(this).resizable("instance"), D = k.options, x = k.size, G = k.originalSize, A = k.originalPosition, C = k.axis, N = "number" == typeof D.grid ? [D.grid, D.grid] : D.grid, q = N[0] || 1, F = N[1] || 1, J = Math.round((x.width - G.width) / q) * q, I = Math.round((x.height - G.height) / F) * F, B = G.width + J, L = G.height + I, w = D.maxWidth && B > D.maxWidth, M = D.maxHeight && L > D.maxHeight, H = D.minWidth && D.minWidth > B, K = D.minHeight && D.minHeight > L;
            D.grid = N, H && (B += q), K && (L += F), w && (B -= q), M && (L -= F), /^(se|s|e)$/.test(C) ? (k.size.width = B, k.size.height = L) : /^(ne)$/.test(C) ? (k.size.width = B, k.size.height = L, k.position.top = A.top - I) : /^(sw)$/.test(C) ? (k.size.width = B, k.size.height = L, k.position.left = A.left - J) : ((0 >= L - F || 0 >= B - q) && (E = k._getPaddingPlusBorderDimensions(this)), L - F > 0 ? (k.size.height = L, k.position.top = A.top - I) : (L = F - E.height, k.size.height = L, k.position.top = A.top + G.height - L), B - q > 0 ? (k.size.width = B, k.position.left = A.left - J) : (B = q - E.width, k.size.width = B, k.position.left = A.left + G.width - B))
        }
    }), e.ui.resizable, e.widget("ui.dialog", {
        version: "1.11.4",
        options: {
            appendTo: "body",
            autoOpen: !0,
            buttons: [],
            closeOnEscape: !0,
            closeText: "Close",
            dialogClass: "",
            draggable: !0,
            hide: null,
            height: "auto",
            maxHeight: null,
            maxWidth: null,
            minHeight: 150,
            minWidth: 150,
            modal: !1,
            position: {
                my: "center",
                at: "center",
                of: window,
                collision: "fit",
                using: function (k) {
                    var q = e(this).css(k).offset().top;
                    0 > q && e(this).css("top", k.top - q)
                }
            },
            resizable: !0,
            show: null,
            title: null,
            width: 300,
            beforeClose: null,
            close: null,
            drag: null,
            dragStart: null,
            dragStop: null,
            focus: null,
            open: null,
            resize: null,
            resizeStart: null,
            resizeStop: null
        },
        sizeRelatedOptions: {
            buttons: !0,
            height: !0,
            maxHeight: !0,
            maxWidth: !0,
            minHeight: !0,
            minWidth: !0,
            width: !0
        },
        resizableRelatedOptions: {
            maxHeight: !0,
            maxWidth: !0,
            minHeight: !0,
            minWidth: !0
        },
        _create: function () {
            this.originalCss = {
                display: this.element[0].style.display,
                width: this.element[0].style.width,
                minHeight: this.element[0].style.minHeight,
                maxHeight: this.element[0].style.maxHeight,
                height: this.element[0].style.height
            }, this.originalPosition = {
                parent: this.element.parent(),
                index: this.element.parent().children().index(this.element)
            }, this.originalTitle = this.element.attr("title"), this.options.title = this.options.title || this.originalTitle, this._createWrapper(), this.element.show().removeAttr("title").addClass("ui-dialog-content ui-widget-content").appendTo(this.uiDialog), this._createTitlebar(), this._createButtonPane(), this.options.draggable && e.fn.draggable && this._makeDraggable(), this.options.resizable && e.fn.resizable && this._makeResizable(), this._isOpen = !1, this._trackFocus()
        },
        _init: function () {
            this.options.autoOpen && this.open()
        },
        _appendTo: function () {
            var k = this.options.appendTo;
            return k && (k.jquery || k.nodeType) ? e(k) : this.document.find(k || "body").eq(0)
        },
        _destroy: function () {
            var k, q = this.originalPosition;
            this._untrackInstance(), this._destroyOverlay(), this.element.removeUniqueId().removeClass("ui-dialog-content ui-widget-content").css(this.originalCss).detach(), this.uiDialog.stop(!0, !0).remove(), this.originalTitle && this.element.attr("title", this.originalTitle), k = q.parent.children().eq(q.index), k.length && k[0] !== this.element[0] ? k.before(this.element) : q.parent.append(this.element)
        },
        widget: function () {
            return this.uiDialog
        },
        disable: e.noop,
        enable: e.noop,
        close: function (k) {
            var q, x = this;
            if (this._isOpen && this._trigger("beforeClose", k) !== !1) {
                if (this._isOpen = !1, this._focusedElement = null, this._destroyOverlay(), this._untrackInstance(), !this.opener.filter(":focusable").focus().length) {
                    try {
                        q = this.document[0].activeElement, q && "body" !== q.nodeName.toLowerCase() && e(q).blur()
                    } catch (w) {
                    }
                }
                this._hide(this.uiDialog, this.options.hide, function () {
                    x._trigger("close", k)
                })
            }
        },
        isOpen: function () {
            return this._isOpen
        },
        moveToTop: function () {
            this._moveToTop()
        },
        _moveToTop: function (x, A) {
            var w = !1, q = this.uiDialog.siblings(".ui-front:visible").map(function () {
                return +e(this).css("z-index")
            }).get(), k = Math.max.apply(null, q);
            return k >= +this.uiDialog.css("z-index") && (this.uiDialog.css("z-index", k + 1), w = !0), w && !A && this._trigger("focus", x), w
        },
        open: function () {
            var k = this;
            return this._isOpen ? (this._moveToTop() && this._focusTabbable(), void 0) : (this._isOpen = !0, this.opener = e(this.document[0].activeElement), this._size(), this._position(), this._createOverlay(), this._moveToTop(null, !0), this.overlay && this.overlay.css("z-index", this.uiDialog.css("z-index") - 1), this._show(this.uiDialog, this.options.show, function () {
                k._focusTabbable(), k._trigger("focus")
            }), this._makeFocusTarget(), this._trigger("open"), void 0)
        },
        _focusTabbable: function () {
            var k = this._focusedElement;
            k || (k = this.element.find("[autofocus]")), k.length || (k = this.element.find(":tabbable")), k.length || (k = this.uiDialogButtonPane.find(":tabbable")), k.length || (k = this.uiDialogTitlebarClose.filter(":tabbable")), k.length || (k = this.uiDialog), k.eq(0).focus()
        },
        _keepFocus: function (k) {
            function q() {
                var w = this.document[0].activeElement, x = this.uiDialog[0] === w || e.contains(this.uiDialog[0], w);
                x || this._focusTabbable()
            }

            k.preventDefault(), q.call(this), this._delay(q)
        },
        _createWrapper: function () {
            this.uiDialog = e("<div>").addClass("ui-dialog ui-widget ui-widget-content ui-corner-all ui-front " + this.options.dialogClass).hide().attr({
                tabIndex: -1,
                role: "dialog"
            }).appendTo(this._appendTo()), this._on(this.uiDialog, {
                keydown: function (k) {
                    if (this.options.closeOnEscape && !k.isDefaultPrevented() && k.keyCode && k.keyCode === e.ui.keyCode.ESCAPE) {
                        return k.preventDefault(), this.close(k), void 0
                    }
                    if (k.keyCode === e.ui.keyCode.TAB && !k.isDefaultPrevented()) {
                        var q = this.uiDialog.find(":tabbable"), x = q.filter(":first"), w = q.filter(":last");
                        k.target !== w[0] && k.target !== this.uiDialog[0] || k.shiftKey ? k.target !== x[0] && k.target !== this.uiDialog[0] || !k.shiftKey || (this._delay(function () {
                            w.focus()
                        }), k.preventDefault()) : (this._delay(function () {
                            x.focus()
                        }), k.preventDefault())
                    }
                }, mousedown: function (k) {
                    this._moveToTop(k) && this._focusTabbable()
                }
            }), this.element.find("[aria-describedby]").length || this.uiDialog.attr({"aria-describedby": this.element.uniqueId().attr("id")})
        },
        _createTitlebar: function () {
            var k;
            this.uiDialogTitlebar = e("<div>").addClass("ui-dialog-titlebar ui-widget-header ui-corner-all ui-helper-clearfix").prependTo(this.uiDialog), this._on(this.uiDialogTitlebar, {
                mousedown: function (q) {
                    e(q.target).closest(".ui-dialog-titlebar-close") || this.uiDialog.focus()
                }
            }), this.uiDialogTitlebarClose = e("<button type='button'></button>").button({
                label: this.options.closeText,
                icons: {primary: "ui-icon-closethick"},
                text: !1
            }).addClass("ui-dialog-titlebar-close").appendTo(this.uiDialogTitlebar), this._on(this.uiDialogTitlebarClose, {
                click: function (q) {
                    q.preventDefault(), this.close(q)
                }
            }), k = e("<span>").uniqueId().addClass("ui-dialog-title").prependTo(this.uiDialogTitlebar), this._title(k), this.uiDialog.attr({"aria-labelledby": k.attr("id")})
        },
        _title: function (k) {
            this.options.title || k.html("&#160;"), k.text(this.options.title)
        },
        _createButtonPane: function () {
            this.uiDialogButtonPane = e("<div>").addClass("ui-dialog-buttonpane ui-widget-content ui-helper-clearfix"), this.uiButtonSet = e("<div>").addClass("ui-dialog-buttonset").appendTo(this.uiDialogButtonPane), this._createButtons()
        },
        _createButtons: function () {
            var k = this, q = this.options.buttons;
            return this.uiDialogButtonPane.remove(), this.uiButtonSet.empty(), e.isEmptyObject(q) || e.isArray(q) && !q.length ? (this.uiDialog.removeClass("ui-dialog-buttons"), void 0) : (e.each(q, function (A, x) {
                var w, B;
                x = e.isFunction(x) ? {
                    click: x,
                    text: A
                } : x, x = e.extend({type: "button"}, x), w = x.click, x.click = function () {
                    w.apply(k.element[0], arguments)
                }, B = {
                    icons: x.icons,
                    text: x.showText
                }, delete x.icons, delete x.showText, e("<button></button>", x).button(B).appendTo(k.uiButtonSet)
            }), this.uiDialog.addClass("ui-dialog-buttons"), this.uiDialogButtonPane.appendTo(this.uiDialog), void 0)
        },
        _makeDraggable: function () {
            function k(x) {
                return {position: x.position, offset: x.offset}
            }

            var q = this, w = this.options;
            this.uiDialog.draggable({
                cancel: ".ui-dialog-content, .ui-dialog-titlebar-close",
                handle: ".ui-dialog-titlebar",
                containment: "document",
                start: function (A, x) {
                    e(this).addClass("ui-dialog-dragging"), q._blockFrames(), q._trigger("dragStart", A, k(x))
                },
                drag: function (x, A) {
                    q._trigger("drag", x, k(A))
                },
                stop: function (x, C) {
                    var A = C.offset.left - q.document.scrollLeft(), B = C.offset.top - q.document.scrollTop();
                    w.position = {
                        my: "left top",
                        at: "left" + (A >= 0 ? "+" : "") + A + " top" + (B >= 0 ? "+" : "") + B,
                        of: q.window
                    }, e(this).removeClass("ui-dialog-dragging"), q._unblockFrames(), q._trigger("dragStop", x, k(C))
                }
            })
        },
        _makeResizable: function () {
            function A(C) {
                return {
                    originalPosition: C.originalPosition,
                    originalSize: C.originalSize,
                    position: C.position,
                    size: C.size
                }
            }

            var B = this, x = this.options, q = x.resizable, k = this.uiDialog.css("position"), w = "string" == typeof q ? q : "n,e,s,w,se,sw,ne,nw";
            this.uiDialog.resizable({
                cancel: ".ui-dialog-content",
                containment: "document",
                alsoResize: this.element,
                maxWidth: x.maxWidth,
                maxHeight: x.maxHeight,
                minWidth: x.minWidth,
                minHeight: this._minHeight(),
                handles: w,
                start: function (C, D) {
                    e(this).addClass("ui-dialog-resizing"), B._blockFrames(), B._trigger("resizeStart", C, A(D))
                },
                resize: function (D, C) {
                    B._trigger("resize", D, A(C))
                },
                stop: function (E, D) {
                    var F = B.uiDialog.offset(), G = F.left - B.document.scrollLeft(), C = F.top - B.document.scrollTop();
                    x.height = B.uiDialog.height(), x.width = B.uiDialog.width(), x.position = {
                        my: "left top",
                        at: "left" + (G >= 0 ? "+" : "") + G + " top" + (C >= 0 ? "+" : "") + C,
                        of: B.window
                    }, e(this).removeClass("ui-dialog-resizing"), B._unblockFrames(), B._trigger("resizeStop", E, A(D))
                }
            }).css("position", k)
        },
        _trackFocus: function () {
            this._on(this.widget(), {
                focusin: function (k) {
                    this._makeFocusTarget(), this._focusedElement = e(k.target)
                }
            })
        },
        _makeFocusTarget: function () {
            this._untrackInstance(), this._trackingInstances().unshift(this)
        },
        _untrackInstance: function () {
            var k = this._trackingInstances(), q = e.inArray(this, k);
            -1 !== q && k.splice(q, 1)
        },
        _trackingInstances: function () {
            var k = this.document.data("ui-dialog-instances");
            return k || (k = [], this.document.data("ui-dialog-instances", k)), k
        },
        _minHeight: function () {
            var k = this.options;
            return "auto" === k.height ? k.minHeight : Math.min(k.minHeight, k.height)
        },
        _position: function () {
            var k = this.uiDialog.is(":visible");
            k || this.uiDialog.show(), this.uiDialog.position(this.options.position), k || this.uiDialog.hide()
        },
        _setOptions: function (k) {
            var q = this, x = !1, w = {};
            e.each(k, function (A, B) {
                q._setOption(A, B), A in q.sizeRelatedOptions && (x = !0), A in q.resizableRelatedOptions && (w[A] = B)
            }), x && (this._size(), this._position()), this.uiDialog.is(":data(ui-resizable)") && this.uiDialog.resizable("option", w)
        },
        _setOption: function (x, k) {
            var q, A, w = this.uiDialog;
            "dialogClass" === x && w.removeClass(this.options.dialogClass).addClass(k), "disabled" !== x && (this._super(x, k), "appendTo" === x && this.uiDialog.appendTo(this._appendTo()), "buttons" === x && this._createButtons(), "closeText" === x && this.uiDialogTitlebarClose.button({label: "" + k}), "draggable" === x && (q = w.is(":data(ui-draggable)"), q && !k && w.draggable("destroy"), !q && k && this._makeDraggable()), "position" === x && this._position(), "resizable" === x && (A = w.is(":data(ui-resizable)"), A && !k && w.resizable("destroy"), A && "string" == typeof k && w.resizable("option", "handles", k), A || k === !1 || this._makeResizable()), "title" === x && this._title(this.uiDialogTitlebar.find(".ui-dialog-title")))
        },
        _size: function () {
            var w, k, q, x = this.options;
            this.element.show().css({
                width: "auto",
                minHeight: 0,
                maxHeight: "none",
                height: 0
            }), x.minWidth > x.width && (x.width = x.minWidth), w = this.uiDialog.css({
                height: "auto",
                width: x.width
            }).outerHeight(), k = Math.max(0, x.minHeight - w), q = "number" == typeof x.maxHeight ? Math.max(0, x.maxHeight - w) : "none", "auto" === x.height ? this.element.css({
                minHeight: k,
                maxHeight: q,
                height: "auto"
            }) : this.element.height(Math.max(0, x.height - w)), this.uiDialog.is(":data(ui-resizable)") && this.uiDialog.resizable("option", "minHeight", this._minHeight())
        },
        _blockFrames: function () {
            this.iframeBlocks = this.document.find("iframe").map(function () {
                var k = e(this);
                return e("<div>").css({
                    position: "absolute",
                    width: k.outerWidth(),
                    height: k.outerHeight()
                }).appendTo(k.parent()).offset(k.offset())[0]
            })
        },
        _unblockFrames: function () {
            this.iframeBlocks && (this.iframeBlocks.remove(), delete this.iframeBlocks)
        },
        _allowInteraction: function (k) {
            return e(k.target).closest(".ui-dialog").length ? !0 : !!e(k.target).closest(".ui-datepicker").length
        },
        _createOverlay: function () {
            if (this.options.modal) {
                var k = !0;
                this._delay(function () {
                    k = !1
                }), this.document.data("ui-dialog-overlays") || this._on(this.document, {
                    focusin: function (q) {
                        k || this._allowInteraction(q) || (q.preventDefault(), this._trackingInstances()[0]._focusTabbable())
                    }
                }), this.overlay = e("<div>").addClass("ui-widget-overlay ui-front").appendTo(this._appendTo()), this._on(this.overlay, {mousedown: "_keepFocus"}), this.document.data("ui-dialog-overlays", (this.document.data("ui-dialog-overlays") || 0) + 1)
            }
        },
        _destroyOverlay: function () {
            if (this.options.modal && this.overlay) {
                var k = this.document.data("ui-dialog-overlays") - 1;
                k ? this.document.data("ui-dialog-overlays", k) : this.document.unbind("focusin").removeData("ui-dialog-overlays"), this.overlay.remove(), this.overlay = null
            }
        }
    }), e.widget("ui.droppable", {
        version: "1.11.4",
        widgetEventPrefix: "drop",
        options: {
            accept: "*",
            activeClass: !1,
            addClasses: !0,
            greedy: !1,
            hoverClass: !1,
            scope: "default",
            tolerance: "intersect",
            activate: null,
            deactivate: null,
            drop: null,
            out: null,
            over: null
        },
        _create: function () {
            var k, q = this.options, w = q.accept;
            this.isover = !1, this.isout = !0, this.accept = e.isFunction(w) ? w : function (x) {
                return x.is(w)
            }, this.proportions = function () {
                return arguments.length ? (k = arguments[0], void 0) : k ? k : k = {
                    width: this.element[0].offsetWidth,
                    height: this.element[0].offsetHeight
                }
            }, this._addToManager(q.scope), q.addClasses && this.element.addClass("ui-droppable")
        },
        _addToManager: function (k) {
            e.ui.ddmanager.droppables[k] = e.ui.ddmanager.droppables[k] || [], e.ui.ddmanager.droppables[k].push(this)
        },
        _splice: function (k) {
            for (var q = 0; k.length > q; q++) {
                k[q] === this && k.splice(q, 1)
            }
        },
        _destroy: function () {
            var k = e.ui.ddmanager.droppables[this.options.scope];
            this._splice(k), this.element.removeClass("ui-droppable ui-droppable-disabled")
        },
        _setOption: function (k, q) {
            if ("accept" === k) {
                this.accept = e.isFunction(q) ? q : function (x) {
                    return x.is(q)
                }
            } else {
                if ("scope" === k) {
                    var w = e.ui.ddmanager.droppables[this.options.scope];
                    this._splice(w), this._addToManager(q)
                }
            }
            this._super(k, q)
        },
        _activate: function (k) {
            var q = e.ui.ddmanager.current;
            this.options.activeClass && this.element.addClass(this.options.activeClass), q && this._trigger("activate", k, this.ui(q))
        },
        _deactivate: function (k) {
            var q = e.ui.ddmanager.current;
            this.options.activeClass && this.element.removeClass(this.options.activeClass), q && this._trigger("deactivate", k, this.ui(q))
        },
        _over: function (k) {
            var q = e.ui.ddmanager.current;
            q && (q.currentItem || q.element)[0] !== this.element[0] && this.accept.call(this.element[0], q.currentItem || q.element) && (this.options.hoverClass && this.element.addClass(this.options.hoverClass), this._trigger("over", k, this.ui(q)))
        },
        _out: function (k) {
            var q = e.ui.ddmanager.current;
            q && (q.currentItem || q.element)[0] !== this.element[0] && this.accept.call(this.element[0], q.currentItem || q.element) && (this.options.hoverClass && this.element.removeClass(this.options.hoverClass), this._trigger("out", k, this.ui(q)))
        },
        _drop: function (k, q) {
            var x = q || e.ui.ddmanager.current, w = !1;
            return x && (x.currentItem || x.element)[0] !== this.element[0] ? (this.element.find(":data(ui-droppable)").not(".ui-draggable-dragging").each(function () {
                var A = e(this).droppable("instance");
                return A.options.greedy && !A.options.disabled && A.options.scope === x.options.scope && A.accept.call(A.element[0], x.currentItem || x.element) && e.ui.intersect(x, e.extend(A, {offset: A.element.offset()}), A.options.tolerance, k) ? (w = !0, !1) : void 0
            }), w ? !1 : this.accept.call(this.element[0], x.currentItem || x.element) ? (this.options.activeClass && this.element.removeClass(this.options.activeClass), this.options.hoverClass && this.element.removeClass(this.options.hoverClass), this._trigger("drop", k, this.ui(x)), this.element) : !1) : !1
        },
        ui: function (k) {
            return {
                draggable: k.currentItem || k.element,
                helper: k.helper,
                position: k.position,
                offset: k.positionAbs
            }
        }
    }), e.ui.intersect = function () {
        function k(w, x, q) {
            return w >= x && x + q > w
        }

        return function (A, w, x, E) {
            if (!w.offset) {
                return !1
            }
            var C = (A.positionAbs || A.position.absolute).left + A.margins.left, F = (A.positionAbs || A.position.absolute).top + A.margins.top, H = C + A.helperProportions.width, q = F + A.helperProportions.height, D = w.offset.left, B = w.offset.top, I = D + w.proportions().width, G = B + w.proportions().height;
            switch (x) {
                case"fit":
                    return C >= D && I >= H && F >= B && G >= q;
                case"intersect":
                    return C + A.helperProportions.width / 2 > D && I > H - A.helperProportions.width / 2 && F + A.helperProportions.height / 2 > B && G > q - A.helperProportions.height / 2;
                case"pointer":
                    return k(E.pageY, B, w.proportions().height) && k(E.pageX, D, w.proportions().width);
                case"touch":
                    return (F >= B && G >= F || q >= B && G >= q || B > F && q > G) && (C >= D && I >= C || H >= D && I >= H || D > C && H > I);
                default:
                    return !1
            }
        }
    }(), e.ui.ddmanager = {
        current: null,
        droppables: {"default": []},
        prepareOffsets: function (B, C) {
            var A, q, k = e.ui.ddmanager.droppables[B.options.scope] || [], w = C ? C.type : null, x = (B.currentItem || B.element).find(":data(ui-droppable)").addBack();
            e:for (A = 0; k.length > A; A++) {
                if (!(k[A].options.disabled || B && !k[A].accept.call(k[A].element[0], B.currentItem || B.element))) {
                    for (q = 0; x.length > q; q++) {
                        if (x[q] === k[A].element[0]) {
                            k[A].proportions().height = 0;
                            continue e
                        }
                    }
                    k[A].visible = "none" !== k[A].element.css("display"), k[A].visible && ("mousedown" === w && k[A]._activate.call(k[A], C), k[A].offset = k[A].element.offset(), k[A].proportions({
                        width: k[A].element[0].offsetWidth,
                        height: k[A].element[0].offsetHeight
                    }))
                }
            }
        },
        drop: function (k, q) {
            var w = !1;
            return e.each((e.ui.ddmanager.droppables[k.options.scope] || []).slice(), function () {
                this.options && (!this.options.disabled && this.visible && e.ui.intersect(k, this, this.options.tolerance, q) && (w = this._drop.call(this, q) || w), !this.options.disabled && this.visible && this.accept.call(this.element[0], k.currentItem || k.element) && (this.isout = !0, this.isover = !1, this._deactivate.call(this, q)))
            }), w
        },
        dragStart: function (k, q) {
            k.element.parentsUntil("body").bind("scroll.droppable", function () {
                k.options.refreshPositions || e.ui.ddmanager.prepareOffsets(k, q)
            })
        },
        drag: function (k, q) {
            k.options.refreshPositions && e.ui.ddmanager.prepareOffsets(k, q), e.each(e.ui.ddmanager.droppables[k.options.scope] || [], function () {
                if (!this.options.disabled && !this.greedyChild && this.visible) {
                    var B, w, C, x = e.ui.intersect(k, this, this.options.tolerance, q), A = !x && this.isover ? "isout" : x && !this.isover ? "isover" : null;
                    A && (this.options.greedy && (w = this.options.scope, C = this.element.parents(":data(ui-droppable)").filter(function () {
                        return e(this).droppable("instance").options.scope === w
                    }), C.length && (B = e(C[0]).droppable("instance"), B.greedyChild = "isover" === A)), B && "isover" === A && (B.isover = !1, B.isout = !0, B._out.call(B, q)), this[A] = !0, this["isout" === A ? "isover" : "isout"] = !1, this["isover" === A ? "_over" : "_out"].call(this, q), B && "isout" === A && (B.isout = !1, B.isover = !0, B._over.call(B, q)))
                }
            })
        },
        dragStop: function (k, q) {
            k.element.parentsUntil("body").unbind("scroll.droppable"), k.options.refreshPositions || e.ui.ddmanager.prepareOffsets(k, q)
        }
    }, e.ui.droppable;
    var R = "ui-effects-", b = e;
    e.effects = {effect: {}}, function (D, q) {
        function G(M, O, L) {
            var N = C[O.type] || {};
            return null == M ? L || !O.def ? null : O.def : (M = N.floor ? ~~M : parseFloat(M), isNaN(M) ? O.def : N.mod ? (M + N.mod) % N.mod : 0 > M ? 0 : M > N.max ? N.max : M)
        }

        function k(L) {
            var N = I(), M = N._rgba = [];
            return L = L.toLowerCase(), E(F, function (O, V) {
                var U, P = V.re.exec(L), T = P && V.parse(P), S = V.space || "rgba";
                return T ? (U = N[S](T), N[w[S].cache] = U[w[S].cache], M = N._rgba = U._rgba, !1) : q
            }), M.length ? ("0,0,0,0" === M.join() && D.extend(M, x.transparent), N) : x[L]
        }

        function K(M, N, L) {
            return L = (L + 1) % 1, 1 > 6 * L ? M + 6 * (N - M) * L : 1 > 2 * L ? N : 2 > 3 * L ? M + 6 * (N - M) * (2 / 3 - L) : M
        }

        var x, B = "backgroundColor borderBottomColor borderLeftColor borderRightColor borderTopColor color columnRuleColor outlineColor textDecorationColor textEmphasisColor", J = /^([\-+])=\s*(\d+\.?\d*)/, F = [{
            re: /rgba?\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,
            parse: function (L) {
                return [L[1], L[2], L[3], L[4]]
            }
        }, {
            re: /rgba?\(\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,
            parse: function (L) {
                return [2.55 * L[1], 2.55 * L[2], 2.55 * L[3], L[4]]
            }
        }, {
            re: /#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})/,
            parse: function (L) {
                return [parseInt(L[1], 16), parseInt(L[2], 16), parseInt(L[3], 16)]
            }
        }, {
            re: /#([a-f0-9])([a-f0-9])([a-f0-9])/, parse: function (L) {
                return [parseInt(L[1] + L[1], 16), parseInt(L[2] + L[2], 16), parseInt(L[3] + L[3], 16)]
            }
        }, {
            re: /hsla?\(\s*(\d+(?:\.\d+)?)\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,
            space: "hsla",
            parse: function (L) {
                return [L[1], L[2] / 100, L[3] / 100, L[4]]
            }
        }], I = D.Color = function (O, L, N, M) {
            return new D.Color.fn.parse(O, L, N, M)
        }, w = {
            rgba: {
                props: {
                    red: {idx: 0, type: "byte"},
                    green: {idx: 1, type: "byte"},
                    blue: {idx: 2, type: "byte"}
                }
            },
            hsla: {
                props: {
                    hue: {idx: 0, type: "degrees"},
                    saturation: {idx: 1, type: "percent"},
                    lightness: {idx: 2, type: "percent"}
                }
            }
        }, C = {
            "byte": {floor: !0, max: 255},
            percent: {max: 1},
            degrees: {mod: 360, floor: !0}
        }, A = I.support = {}, H = D("<p>")[0], E = D.each;
        H.style.cssText = "background-color:rgba(1,1,1,.5)", A.rgba = H.style.backgroundColor.indexOf("rgba") > -1, E(w, function (M, L) {
            L.cache = "_" + M, L.props.alpha = {idx: 3, type: "percent", def: 1}
        }), I.fn = D.extend(I.prototype, {
            parse: function (T, O, S, M) {
                if (T === q) {
                    return this._rgba = [null, null, null, null], this
                }
                (T.jquery || T.nodeType) && (T = D(T).css(O), O = q);
                var L = this, N = D.type(T), P = this._rgba = [];
                return O !== q && (T = [T, O, S, M], N = "array"), "string" === N ? this.parse(k(T) || x._default) : "array" === N ? (E(w.rgba.props, function (U, V) {
                    P[V.idx] = G(T[V.idx], V)
                }), this) : "object" === N ? (T instanceof I ? E(w, function (U, V) {
                    T[V.cache] && (L[V.cache] = T[V.cache].slice())
                }) : E(w, function (V, U) {
                    var W = U.cache;
                    E(U.props, function (X, Y) {
                        if (!L[W] && U.to) {
                            if ("alpha" === X || null == T[X]) {
                                return
                            }
                            L[W] = U.to(L._rgba)
                        }
                        L[W][Y.idx] = G(T[X], Y, !0)
                    }), L[W] && 0 > D.inArray(null, L[W].slice(0, 3)) && (L[W][3] = 1, U.from && (L._rgba = U.from(L[W])))
                }), this) : q
            }, is: function (N) {
                var L = I(N), O = !0, M = this;
                return E(w, function (U, S) {
                    var T, P = L[S.cache];
                    return P && (T = M[S.cache] || S.to && S.to(M._rgba) || [], E(S.props, function (V, W) {
                        return null != P[W.idx] ? O = P[W.idx] === T[W.idx] : q
                    })), O
                }), O
            }, _space: function () {
                var M = [], L = this;
                return E(w, function (O, N) {
                    L[N.cache] && M.push(O)
                }), M.pop()
            }, transition: function (M, T) {
                var L = I(M), O = L._space(), U = w[O], S = 0 === this.alpha() ? I("transparent") : this, P = S[U.cache] || U.to(S._rgba), N = P.slice();
                return L = L[U.cache], E(U.props, function (aa, V) {
                    var Z = V.idx, Y = P[Z], X = L[Z], W = C[V.type] || {};
                    null !== X && (null === Y ? N[Z] = X : (W.mod && (X - Y > W.mod / 2 ? Y += W.mod : Y - X > W.mod / 2 && (Y -= W.mod)), N[Z] = G((X - Y) * T + Y, V)))
                }), this[O](N)
            }, blend: function (O) {
                if (1 === this._rgba[3]) {
                    return this
                }
                var L = this._rgba.slice(), N = L.pop(), M = I(O)._rgba;
                return I(D.map(L, function (P, S) {
                    return (1 - N) * M[S] + N * P
                }))
            }, toRgbaString: function () {
                var M = "rgba(", L = D.map(this._rgba, function (N, O) {
                    return null == N ? O > 2 ? 1 : 0 : N
                });
                return 1 === L[3] && (L.pop(), M = "rgb("), M + L.join() + ")"
            }, toHslaString: function () {
                var M = "hsla(", L = D.map(this.hsla(), function (N, O) {
                    return null == N && (N = O > 2 ? 1 : 0), O && 3 > O && (N = Math.round(100 * N) + "%"), N
                });
                return 1 === L[3] && (L.pop(), M = "hsl("), M + L.join() + ")"
            }, toHexString: function (N) {
                var L = this._rgba.slice(), M = L.pop();
                return N && L.push(~~(255 * M)), "#" + D.map(L, function (O) {
                    return O = (O || 0).toString(16), 1 === O.length ? "0" + O : O
                }).join("")
            }, toString: function () {
                return 0 === this._rgba[3] ? "transparent" : this.toRgbaString()
            }
        }), I.fn.parse.prototype = I.fn, w.hsla.to = function (W) {
            if (null == W[0] || null == W[1] || null == W[2]) {
                return [null, null, null, W[3]]
            }
            var S, Y, P = W[0] / 255, M = W[1] / 255, U = W[2] / 255, N = W[3], O = Math.max(P, M, U), X = Math.min(P, M, U), L = O - X, T = O + X, V = 0.5 * T;
            return S = X === O ? 0 : P === O ? 60 * (M - U) / L + 360 : M === O ? 60 * (U - P) / L + 120 : 60 * (P - M) / L + 240, Y = 0 === L ? 0 : 0.5 >= V ? L / T : L / (2 - T), [Math.round(S) % 360, Y, V, null == N ? 1 : N]
        }, w.hsla.from = function (T) {
            if (null == T[0] || null == T[1] || null == T[2]) {
                return [null, null, null, T[3]]
            }
            var N = T[0] / 360, P = T[1], M = T[2], S = T[3], O = 0.5 >= M ? M * (1 + P) : M + P - M * P, L = 2 * M - O;
            return [Math.round(255 * K(L, O, N + 1 / 3)), Math.round(255 * K(L, O, N)), Math.round(255 * K(L, O, N - 1 / 3)), S]
        }, E(w, function (M, O) {
            var S = O.props, L = O.cache, N = O.to, P = O.from;
            I.fn[M] = function (T) {
                if (N && !this[L] && (this[L] = N(this._rgba)), T === q) {
                    return this[L].slice()
                }
                var W, V = D.type(T), X = "array" === V || "object" === V ? T : arguments, U = this[L].slice();
                return E(S, function (Z, aa) {
                    var Y = X["object" === V ? Z : aa.idx];
                    null == Y && (Y = U[aa.idx]), U[aa.idx] = G(Y, aa)
                }), P ? (W = I(P(U)), W[L] = U, W) : I(U)
            }, E(S, function (U, T) {
                I.fn[U] || (I.fn[U] = function (W) {
                    var V, Y = D.type(W), Z = "alpha" === U ? this._hsla ? "hsla" : "rgba" : M, X = this[Z](), ab = X[T.idx];
                    return "undefined" === Y ? ab : ("function" === Y && (W = W.call(this, ab), Y = D.type(W)), null == W && T.empty ? this : ("string" === Y && (V = J.exec(W), V && (W = ab + parseFloat(V[2]) * ("+" === V[1] ? 1 : -1))), X[T.idx] = W, this[Z](X)))
                })
            })
        }), I.hook = function (M) {
            var L = M.split(" ");
            E(L, function (N, O) {
                D.cssHooks[O] = {
                    set: function (P, W) {
                        var U, S, T = "";
                        if ("transparent" !== W && ("string" !== D.type(W) || (U = k(W)))) {
                            if (W = I(U || W), !A.rgba && 1 !== W._rgba[3]) {
                                for (S = "backgroundColor" === O ? P.parentNode : P; ("" === T || "transparent" === T) && S && S.style;) {
                                    try {
                                        T = D.css(S, "backgroundColor"), S = S.parentNode
                                    } catch (V) {
                                    }
                                }
                                W = W.blend(T && "transparent" !== T ? T : "_default")
                            }
                            W = W.toRgbaString()
                        }
                        try {
                            P.style[O] = W
                        } catch (V) {
                        }
                    }
                }, D.fx.step[O] = function (P) {
                    P.colorInit || (P.start = I(P.elem, O), P.end = I(P.end), P.colorInit = !0), D.cssHooks[O].set(P.elem, P.start.transition(P.end, P.pos))
                }
            })
        }, I.hook(B), D.cssHooks.borderColor = {
            expand: function (M) {
                var L = {};
                return E(["Top", "Right", "Bottom", "Left"], function (O, N) {
                    L["border" + N + "Color"] = M
                }), L
            }
        }, x = D.Color.names = {
            aqua: "#00ffff",
            black: "#000000",
            blue: "#0000ff",
            fuchsia: "#ff00ff",
            gray: "#808080",
            green: "#008000",
            lime: "#00ff00",
            maroon: "#800000",
            navy: "#000080",
            olive: "#808000",
            purple: "#800080",
            red: "#ff0000",
            silver: "#c0c0c0",
            teal: "#008080",
            white: "#ffffff",
            yellow: "#ffff00",
            transparent: [null, null, null, 0],
            _default: "#ffffff"
        }
    }(b), function () {
        function k(C) {
            var D, B, A = C.ownerDocument.defaultView ? C.ownerDocument.defaultView.getComputedStyle(C, null) : C.currentStyle, E = {};
            if (A && A.length && A[0] && A[A[0]]) {
                for (B = A.length; B--;) {
                    D = A[B], "string" == typeof A[D] && (E[e.camelCase(D)] = A[D])
                }
            } else {
                for (D in A) {
                    "string" == typeof A[D] && (E[D] = A[D])
                }
            }
            return E
        }

        function q(C, D) {
            var B, E, A = {};
            for (B in D) {
                E = D[B], C[B] !== E && (w[B] || (e.fx.step[B] || !isNaN(parseFloat(E))) && (A[B] = E))
            }
            return A
        }

        var x = ["add", "remove", "toggle"], w = {
            border: 1,
            borderBottom: 1,
            borderColor: 1,
            borderLeft: 1,
            borderRight: 1,
            borderTop: 1,
            borderWidth: 1,
            margin: 1,
            padding: 1
        };
        e.each(["borderLeftStyle", "borderRightStyle", "borderBottomStyle", "borderTopStyle"], function (A, B) {
            e.fx.step[B] = function (C) {
                ("none" !== C.end && !C.setAttr || 1 === C.pos && !C.setAttr) && (b.style(C.elem, B, C.end), C.setAttr = !0)
            }
        }), e.fn.addBack || (e.fn.addBack = function (A) {
            return this.add(null == A ? this.prevObject : this.prevObject.filter(A))
        }), e.effects.animateClass = function (A, E, B, C) {
            var D = e.speed(E, B, C);
            return this.queue(function () {
                var I, G = e(this), H = G.attr("class") || "", F = D.children ? G.find("*").addBack() : G;
                F = F.map(function () {
                    var J = e(this);
                    return {el: J, start: k(this)}
                }), I = function () {
                    e.each(x, function (J, K) {
                        A[K] && G[K + "Class"](A[K])
                    })
                }, I(), F = F.map(function () {
                    return this.end = k(this.el[0]), this.diff = q(this.start, this.end), this
                }), G.attr("class", H), F = F.map(function () {
                    var K = this, L = e.Deferred(), J = e.extend({}, D, {
                        queue: !1,
                        complete: function () {
                            L.resolve(K)
                        }
                    });
                    return this.el.animate(this.diff, J), L.promise()
                }), e.when.apply(e, F.get()).done(function () {
                    I(), e.each(arguments, function () {
                        var J = this.el;
                        e.each(this.diff, function (K) {
                            J.css(K, "")
                        })
                    }), D.complete.call(G[0])
                })
            })
        }, e.fn.extend({
            addClass: function (A) {
                return function (D, C, B, E) {
                    return C ? e.effects.animateClass.call(this, {add: D}, C, B, E) : A.apply(this, arguments)
                }
            }(e.fn.addClass), removeClass: function (A) {
                return function (D, C, B, E) {
                    return arguments.length > 1 ? e.effects.animateClass.call(this, {remove: D}, C, B, E) : A.apply(this, arguments)
                }
            }(e.fn.removeClass), toggleClass: function (A) {
                return function (E, D, B, F, C) {
                    return "boolean" == typeof D || void 0 === D ? B ? e.effects.animateClass.call(this, D ? {add: E} : {remove: E}, B, F, C) : A.apply(this, arguments) : e.effects.animateClass.call(this, {toggle: E}, D, B, F)
                }
            }(e.fn.toggleClass), switchClass: function (C, D, B, A, E) {
                return e.effects.animateClass.call(this, {
                    add: D,
                    remove: C
                }, B, A, E)
            }
        })
    }(), function () {
        function k(A, B, x, w) {
            return e.isPlainObject(A) && (B = A, A = A.effect), A = {effect: A}, null == B && (B = {}), e.isFunction(B) && (w = B, x = null, B = {}), ("number" == typeof B || e.fx.speeds[B]) && (w = x, x = B, B = {}), e.isFunction(x) && (w = x, x = null), B && e.extend(A, B), x = x || B.duration, A.duration = e.fx.off ? 0 : "number" == typeof x ? x : x in e.fx.speeds ? e.fx.speeds[x] : e.fx.speeds._default, A.complete = w || B.complete, A
        }

        function q(w) {
            return !w || "number" == typeof w || e.fx.speeds[w] ? !0 : "string" != typeof w || e.effects.effect[w] ? e.isFunction(w) ? !0 : "object" != typeof w || w.effect ? !1 : !0 : !0
        }

        e.extend(e.effects, {
            version: "1.11.4", save: function (w, x) {
                for (var A = 0; x.length > A; A++) {
                    null !== x[A] && w.data(R + x[A], w[0].style[x[A]])
                }
            }, restore: function (w, A) {
                var B, x;
                for (x = 0; A.length > x; x++) {
                    null !== A[x] && (B = w.data(R + A[x]), void 0 === B && (B = ""), w.css(A[x], B))
                }
            }, setMode: function (w, x) {
                return "toggle" === x && (x = w.is(":hidden") ? "show" : "hide"), x
            }, getBaseline: function (w, A) {
                var B, x;
                switch (w[0]) {
                    case"top":
                        B = 0;
                        break;
                    case"middle":
                        B = 0.5;
                        break;
                    case"bottom":
                        B = 1;
                        break;
                    default:
                        B = w[0] / A.height
                }
                switch (w[1]) {
                    case"left":
                        x = 0;
                        break;
                    case"center":
                        x = 0.5;
                        break;
                    case"right":
                        x = 1;
                        break;
                    default:
                        x = w[1] / A.width
                }
                return {x: x, y: B}
            }, createWrapper: function (B) {
                if (B.parent().is(".ui-effects-wrapper")) {
                    return B.parent()
                }
                var C = {
                    width: B.outerWidth(!0),
                    height: B.outerHeight(!0),
                    "float": B.css("float")
                }, A = e("<div></div>").addClass("ui-effects-wrapper").css({
                    fontSize: "100%",
                    background: "transparent",
                    border: "none",
                    margin: 0,
                    padding: 0
                }), w = {
                    width: B.width(),
                    height: B.height()
                }, D = document.activeElement;
                try {
                    D.id
                } catch (x) {
                    D = document.body
                }
                return B.wrap(A), (B[0] === D || e.contains(B[0], D)) && e(D).focus(), A = B.parent(), "static" === B.css("position") ? (A.css({position: "relative"}), B.css({position: "relative"})) : (e.extend(C, {
                    position: B.css("position"),
                    zIndex: B.css("z-index")
                }), e.each(["top", "left", "bottom", "right"], function (E, F) {
                    C[F] = B.css(F), isNaN(parseInt(C[F], 10)) && (C[F] = "auto")
                }), B.css({
                    position: "relative",
                    top: 0,
                    left: 0,
                    right: "auto",
                    bottom: "auto"
                })), B.css(w), A.css(C).show()
            }, removeWrapper: function (w) {
                var x = document.activeElement;
                return w.parent().is(".ui-effects-wrapper") && (w.parent().replaceWith(w), (w[0] === x || e.contains(w[0], x)) && e(x).focus()), w
            }, setTransition: function (A, B, x, w) {
                return w = w || {}, e.each(B, function (C, D) {
                    var E = A.cssUnit(D);
                    E[0] > 0 && (w[D] = E[0] * x + E[1])
                }), w
            }
        }), e.fn.extend({
            effect: function () {
                function B(D) {
                    function E() {
                        e.isFunction(F) && F.call(G[0]), e.isFunction(D) && D()
                    }

                    var G = e(this), F = A.complete, H = A.mode;
                    (G.is(":hidden") ? "hide" === H : "show" === H) ? (G[H](), E()) : x.call(G[0], A, E)
                }

                var A = k.apply(this, arguments), w = A.mode, C = A.queue, x = e.effects.effect[A.effect];
                return e.fx.off || !x ? w ? this[w](A.duration, A.complete) : this.each(function () {
                    A.complete && A.complete.call(this)
                }) : C === !1 ? this.each(B) : this.queue(C || "fx", B)
            }, show: function (w) {
                return function (A) {
                    if (q(A)) {
                        return w.apply(this, arguments)
                    }
                    var x = k.apply(this, arguments);
                    return x.mode = "show", this.effect.call(this, x)
                }
            }(e.fn.show), hide: function (w) {
                return function (A) {
                    if (q(A)) {
                        return w.apply(this, arguments)
                    }
                    var x = k.apply(this, arguments);
                    return x.mode = "hide", this.effect.call(this, x)
                }
            }(e.fn.hide), toggle: function (w) {
                return function (A) {
                    if (q(A) || "boolean" == typeof A) {
                        return w.apply(this, arguments)
                    }
                    var x = k.apply(this, arguments);
                    return x.mode = "toggle", this.effect.call(this, x)
                }
            }(e.fn.toggle), cssUnit: function (x) {
                var A = this.css(x), w = [];
                return e.each(["em", "px", "%", "pt"], function (B, C) {
                    A.indexOf(C) > 0 && (w = [parseFloat(A), C])
                }), w
            }
        })
    }(), function () {
        var k = {};
        e.each(["Quad", "Cubic", "Quart", "Quint", "Expo"], function (w, q) {
            k[q] = function (x) {
                return Math.pow(x, w + 2)
            }
        }), e.extend(k, {
            Sine: function (q) {
                return 1 - Math.cos(q * Math.PI / 2)
            }, Circ: function (q) {
                return 1 - Math.sqrt(1 - q * q)
            }, Elastic: function (q) {
                return 0 === q || 1 === q ? q : -Math.pow(2, 8 * (q - 1)) * Math.sin((80 * (q - 1) - 7.5) * Math.PI / 15)
            }, Back: function (q) {
                return q * q * (3 * q - 2)
            }, Bounce: function (w) {
                for (var x, q = 4; ((x = Math.pow(2, --q)) - 1) / 11 > w;) {
                }
                return 1 / Math.pow(4, 3 - q) - 7.5625 * Math.pow((3 * x - 2) / 22 - w, 2)
            }
        }), e.each(k, function (w, q) {
            e.easing["easeIn" + w] = q, e.easing["easeOut" + w] = function (x) {
                return 1 - q(1 - x)
            }, e.easing["easeInOut" + w] = function (x) {
                return 0.5 > x ? q(2 * x) / 2 : 1 - q(-2 * x + 2) / 2
            }
        })
    }(), e.effects, e.effects.effect.blind = function (L, D) {
        var K, G, q, I = e(this), J = /up|down|vertical/, C = /up|left|vertical|horizontal/, E = ["position", "top", "bottom", "left", "right", "height", "width"], M = e.effects.setMode(I, L.mode || "hide"), x = L.direction || "up", w = J.test(x), H = w ? "height" : "width", A = w ? "top" : "left", F = C.test(x), B = {}, k = "show" === M;
        I.parent().is(".ui-effects-wrapper") ? e.effects.save(I.parent(), E) : e.effects.save(I, E), I.show(), K = e.effects.createWrapper(I).css({overflow: "hidden"}), G = K[H](), q = parseFloat(K.css(A)) || 0, B[H] = k ? G : 0, F || (I.css(w ? "bottom" : "right", 0).css(w ? "top" : "left", "auto").css({position: "absolute"}), B[A] = k ? q : G + q), k && (K.css(H, 0), F || K.css(A, q + G)), K.animate(B, {
            duration: L.duration,
            easing: L.easing,
            queue: !1,
            complete: function () {
                "hide" === M && I.hide(), e.effects.restore(I, E), e.effects.removeWrapper(I), D()
            }
        })
    }, e.effects.effect.bounce = function (D, P) {
        var C, w, H, x = e(this), B = ["position", "top", "bottom", "left", "right", "height", "width"], O = e.effects.setMode(x, D.mode || "effect"), k = "hide" === O, E = "show" === O, L = D.direction || "up", K = D.distance, A = D.times || 5, M = 2 * A + (E || k ? 1 : 0), q = D.duration / M, N = D.easing, F = "up" === L || "down" === L ? "top" : "left", J = "up" === L || "left" === L, I = x.queue(), G = I.length;
        for ((E || k) && B.push("opacity"), e.effects.save(x, B), x.show(), e.effects.createWrapper(x), K || (K = x["top" === F ? "outerHeight" : "outerWidth"]() / 3), E && (H = {opacity: 1}, H[F] = 0, x.css("opacity", 0).css(F, J ? 2 * -K : 2 * K).animate(H, q, N)), k && (K /= Math.pow(2, A - 1)), H = {}, H[F] = 0, C = 0; A > C; C++) {
            w = {}, w[F] = (J ? "-=" : "+=") + K, x.animate(w, q, N).animate(H, q, N), K = k ? 2 * K : K / 2
        }
        k && (w = {opacity: 0}, w[F] = (J ? "-=" : "+=") + K, x.animate(w, q, N)), x.queue(function () {
            k && x.hide(), e.effects.restore(x, B), e.effects.removeWrapper(x), P()
        }), G > 1 && I.splice.apply(I, [1, 0].concat(I.splice(G, M + 1))), x.dequeue()
    }, e.effects.effect.clip = function (q, H) {
        var k, x, A, F = e(this), I = ["position", "top", "bottom", "left", "right", "height", "width"], E = e.effects.setMode(F, q.mode || "hide"), J = "show" === E, w = q.direction || "vertical", C = "vertical" === w, B = C ? "height" : "width", G = C ? "top" : "left", D = {};
        e.effects.save(F, I), F.show(), k = e.effects.createWrapper(F).css({overflow: "hidden"}), x = "IMG" === F[0].tagName ? k : F, A = x[B](), J && (x.css(B, 0), x.css(G, A / 2)), D[B] = J ? A : 0, D[G] = J ? 0 : A / 2, x.animate(D, {
            queue: !1,
            duration: q.duration,
            easing: q.easing,
            complete: function () {
                J || F.hide(), e.effects.restore(F, I), e.effects.removeWrapper(F), H()
            }
        })
    }, e.effects.effect.drop = function (x, A) {
        var w, C = e(this), G = ["position", "top", "bottom", "left", "right", "opacity", "height", "width"], D = e.effects.setMode(C, x.mode || "hide"), F = "show" === D, q = x.direction || "left", B = "up" === q || "down" === q ? "top" : "left", E = "up" === q || "left" === q ? "pos" : "neg", k = {opacity: F ? 1 : 0};
        e.effects.save(C, G), C.show(), e.effects.createWrapper(C), w = x.distance || C["top" === B ? "outerHeight" : "outerWidth"](!0) / 2, F && C.css("opacity", 0).css(B, "pos" === E ? -w : w), k[B] = (F ? "pos" === E ? "+=" : "-=" : "pos" === E ? "-=" : "+=") + w, C.animate(k, {
            queue: !1,
            duration: x.duration,
            easing: x.easing,
            complete: function () {
                "hide" === D && C.hide(), e.effects.restore(C, G), e.effects.removeWrapper(C), A()
            }
        })
    }, e.effects.effect.explode = function (D, O) {
        function C() {
            H.push(this), H.length === K * J && w()
        }

        function w() {
            A.css({visibility: "visible"}), e(H).remove(), q || A.hide(), O()
        }

        var G, x, B, N, k, E, K = D.pieces ? Math.round(Math.sqrt(D.pieces)) : 3, J = K, A = e(this), L = e.effects.setMode(A, D.mode || "hide"), q = "show" === L, M = A.show().css("visibility", "hidden").offset(), F = Math.ceil(A.outerWidth() / J), I = Math.ceil(A.outerHeight() / K), H = [];
        for (G = 0; K > G; G++) {
            for (N = M.top + G * I, E = G - (K - 1) / 2, x = 0; J > x; x++) {
                B = M.left + x * F, k = x - (J - 1) / 2, A.clone().appendTo("body").wrap("<div></div>").css({
                    position: "absolute",
                    visibility: "visible",
                    left: -x * F,
                    top: -G * I
                }).parent().addClass("ui-effects-explode").css({
                    position: "absolute",
                    overflow: "hidden",
                    width: F,
                    height: I,
                    left: B + (q ? k * F : 0),
                    top: N + (q ? E * I : 0),
                    opacity: q ? 0 : 1
                }).animate({
                    left: B + (q ? 0 : k * F),
                    top: N + (q ? 0 : E * I),
                    opacity: q ? 1 : 0
                }, D.duration || 500, D.easing, C)
            }
        }
    }, e.effects.effect.fade = function (k, q) {
        var x = e(this), w = e.effects.setMode(x, k.mode || "toggle");
        x.animate({opacity: w}, {
            queue: !1,
            duration: k.duration,
            easing: k.easing,
            complete: q
        })
    }, e.effects.effect.fold = function (L, D) {
        var K, G, q = e(this), I = ["position", "top", "bottom", "left", "right", "height", "width"], J = e.effects.setMode(q, L.mode || "hide"), C = "show" === J, E = "hide" === J, M = L.size || 15, x = /([0-9]+)%/.exec(M), w = !!L.horizFirst, H = C !== w, A = H ? ["width", "height"] : ["height", "width"], F = L.duration / 2, B = {}, k = {};
        e.effects.save(q, I), q.show(), K = e.effects.createWrapper(q).css({overflow: "hidden"}), G = H ? [K.width(), K.height()] : [K.height(), K.width()], x && (M = parseInt(x[1], 10) / 100 * G[E ? 0 : 1]), C && K.css(w ? {
            height: 0,
            width: M
        } : {
            height: M,
            width: 0
        }), B[A[0]] = C ? G[0] : M, k[A[1]] = C ? G[1] : 0, K.animate(B, F, L.easing).animate(k, F, L.easing, function () {
            E && q.hide(), e.effects.restore(q, I), e.effects.removeWrapper(q), D()
        })
    }, e.effects.effect.highlight = function (A, B) {
        var x = e(this), q = ["backgroundImage", "backgroundColor", "opacity"], k = e.effects.setMode(x, A.mode || "show"), w = {backgroundColor: x.css("backgroundColor")};
        "hide" === k && (w.opacity = 0), e.effects.save(x, q), x.show().css({
            backgroundImage: "none",
            backgroundColor: A.color || "#ffff99"
        }).animate(w, {
            queue: !1,
            duration: A.duration,
            easing: A.easing,
            complete: function () {
                "hide" === k && x.hide(), e.effects.restore(x, q), B()
            }
        })
    }, e.effects.effect.size = function (D, O) {
        var C, w, G, x = e(this), B = ["position", "top", "bottom", "left", "right", "width", "height", "overflow", "opacity"], N = ["position", "top", "bottom", "left", "right", "overflow", "opacity"], k = ["width", "height", "overflow"], E = ["fontSize"], K = ["borderTopWidth", "borderBottomWidth", "paddingTop", "paddingBottom"], J = ["borderLeftWidth", "borderRightWidth", "paddingLeft", "paddingRight"], A = e.effects.setMode(x, D.mode || "effect"), L = D.restore || "effect" !== A, q = D.scale || "both", M = D.origin || ["middle", "center"], F = x.css("position"), I = L ? B : N, H = {
            height: 0,
            width: 0,
            outerHeight: 0,
            outerWidth: 0
        };
        "show" === A && x.show(), C = {
            height: x.height(),
            width: x.width(),
            outerHeight: x.outerHeight(),
            outerWidth: x.outerWidth()
        }, "toggle" === D.mode && "show" === A ? (x.from = D.to || H, x.to = D.from || C) : (x.from = D.from || ("show" === A ? H : C), x.to = D.to || ("hide" === A ? H : C)), G = {
            from: {
                y: x.from.height / C.height,
                x: x.from.width / C.width
            }, to: {y: x.to.height / C.height, x: x.to.width / C.width}
        }, ("box" === q || "both" === q) && (G.from.y !== G.to.y && (I = I.concat(K), x.from = e.effects.setTransition(x, K, G.from.y, x.from), x.to = e.effects.setTransition(x, K, G.to.y, x.to)), G.from.x !== G.to.x && (I = I.concat(J), x.from = e.effects.setTransition(x, J, G.from.x, x.from), x.to = e.effects.setTransition(x, J, G.to.x, x.to))), ("content" === q || "both" === q) && G.from.y !== G.to.y && (I = I.concat(E).concat(k), x.from = e.effects.setTransition(x, E, G.from.y, x.from), x.to = e.effects.setTransition(x, E, G.to.y, x.to)), e.effects.save(x, I), x.show(), e.effects.createWrapper(x), x.css("overflow", "hidden").css(x.from), M && (w = e.effects.getBaseline(M, C), x.from.top = (C.outerHeight - x.outerHeight()) * w.y, x.from.left = (C.outerWidth - x.outerWidth()) * w.x, x.to.top = (C.outerHeight - x.to.outerHeight) * w.y, x.to.left = (C.outerWidth - x.to.outerWidth) * w.x), x.css(x.from), ("content" === q || "both" === q) && (K = K.concat(["marginTop", "marginBottom"]).concat(E), J = J.concat(["marginLeft", "marginRight"]), k = B.concat(K).concat(J), x.find("*[width]").each(function () {
            var S = e(this), P = {
                height: S.height(),
                width: S.width(),
                outerHeight: S.outerHeight(),
                outerWidth: S.outerWidth()
            };
            L && e.effects.save(S, k), S.from = {
                height: P.height * G.from.y,
                width: P.width * G.from.x,
                outerHeight: P.outerHeight * G.from.y,
                outerWidth: P.outerWidth * G.from.x
            }, S.to = {
                height: P.height * G.to.y,
                width: P.width * G.to.x,
                outerHeight: P.height * G.to.y,
                outerWidth: P.width * G.to.x
            }, G.from.y !== G.to.y && (S.from = e.effects.setTransition(S, K, G.from.y, S.from), S.to = e.effects.setTransition(S, K, G.to.y, S.to)), G.from.x !== G.to.x && (S.from = e.effects.setTransition(S, J, G.from.x, S.from), S.to = e.effects.setTransition(S, J, G.to.x, S.to)), S.css(S.from), S.animate(S.to, D.duration, D.easing, function () {
                L && e.effects.restore(S, k)
            })
        })), x.animate(x.to, {
            queue: !1,
            duration: D.duration,
            easing: D.easing,
            complete: function () {
                0 === x.to.opacity && x.css("opacity", x.from.opacity), "hide" === A && x.hide(), e.effects.restore(x, I), L || ("static" === F ? x.css({
                    position: "relative",
                    top: x.to.top,
                    left: x.to.left
                }) : e.each(["top", "left"], function (P, S) {
                    x.css(S, function (V, W) {
                        var U = parseInt(W, 10), T = P ? x.to.left : x.to.top;
                        return "auto" === W ? T + "px" : U + T + "px"
                    })
                })), e.effects.removeWrapper(x), O()
            }
        })
    }, e.effects.effect.scale = function (F, x) {
        var D = e(this), B = e.extend(!0, {}, F), q = e.effects.setMode(D, F.mode || "effect"), C = parseInt(F.percent, 10) || (0 === parseInt(F.percent, 10) ? 0 : "hide" === q ? 0 : 100), E = F.direction || "both", w = F.origin, A = {
            height: D.height(),
            width: D.width(),
            outerHeight: D.outerHeight(),
            outerWidth: D.outerWidth()
        }, k = {
            y: "horizontal" !== E ? C / 100 : 1,
            x: "vertical" !== E ? C / 100 : 1
        };
        B.effect = "size", B.queue = !1, B.complete = x, "effect" !== q && (B.origin = w || ["middle", "center"], B.restore = !0), B.from = F.from || ("show" === q ? {
            height: 0,
            width: 0,
            outerHeight: 0,
            outerWidth: 0
        } : A), B.to = {
            height: A.height * k.y,
            width: A.width * k.x,
            outerHeight: A.outerHeight * k.y,
            outerWidth: A.outerWidth * k.x
        }, B.fade && ("show" === q && (B.from.opacity = 0, B.to.opacity = 1), "hide" === q && (B.from.opacity = 1, B.to.opacity = 0)), D.effect(B)
    }, e.effects.effect.puff = function (C, D) {
        var A = e(this), q = e.effects.setMode(A, C.mode || "hide"), k = "hide" === q, w = parseInt(C.percent, 10) || 150, x = w / 100, B = {
            height: A.height(),
            width: A.width(),
            outerHeight: A.outerHeight(),
            outerWidth: A.outerWidth()
        };
        e.extend(C, {
            effect: "scale",
            queue: !1,
            fade: !0,
            mode: q,
            complete: D,
            percent: k ? w : 100,
            from: k ? B : {
                height: B.height * x,
                width: B.width * x,
                outerHeight: B.outerHeight * x,
                outerWidth: B.outerWidth * x
            }
        }), A.effect(C)
    }, e.effects.effect.pulsate = function (w, I) {
        var q, D = e(this), A = e.effects.setMode(D, w.mode || "show"), E = "show" === A, H = "hide" === A, G = E || "hide" === A, k = 2 * (w.times || 5) + (G ? 1 : 0), x = w.duration / k, C = 0, B = D.queue(), F = B.length;
        for ((E || !D.is(":visible")) && (D.css("opacity", 0).show(), C = 1), q = 1; k > q; q++) {
            D.animate({opacity: C}, x, w.easing), C = 1 - C
        }
        D.animate({opacity: C}, x, w.easing), D.queue(function () {
            H && D.hide(), I()
        }), F > 1 && B.splice.apply(B, [1, 0].concat(B.splice(F, k + 1))), D.dequeue()
    }, e.effects.effect.shake = function (E, k) {
        var D, x = e(this), G = ["position", "top", "bottom", "left", "right", "height", "width"], A = e.effects.setMode(x, E.mode || "effect"), C = E.direction || "left", N = E.distance || 20, q = E.times || 3, F = 2 * q + 1, J = Math.round(E.duration / F), I = "up" === C || "down" === C ? "top" : "left", B = "up" === C || "left" === C, L = {}, w = {}, M = {}, H = x.queue(), K = H.length;
        for (e.effects.save(x, G), x.show(), e.effects.createWrapper(x), L[I] = (B ? "-=" : "+=") + N, w[I] = (B ? "+=" : "-=") + 2 * N, M[I] = (B ? "-=" : "+=") + 2 * N, x.animate(L, J, E.easing), D = 1; q > D; D++) {
            x.animate(w, J, E.easing).animate(M, J, E.easing)
        }
        x.animate(w, J, E.easing).animate(L, J / 2, E.easing).queue(function () {
            "hide" === A && x.hide(), e.effects.restore(x, G), e.effects.removeWrapper(x), k()
        }), K > 1 && H.splice.apply(H, [1, 0].concat(H.splice(K, F + 1))), x.dequeue()
    }, e.effects.effect.slide = function (x, A) {
        var w, C = e(this), G = ["position", "top", "bottom", "left", "right", "width", "height"], D = e.effects.setMode(C, x.mode || "show"), F = "show" === D, q = x.direction || "left", B = "up" === q || "down" === q ? "top" : "left", E = "up" === q || "left" === q, k = {};
        e.effects.save(C, G), C.show(), w = x.distance || C["top" === B ? "outerHeight" : "outerWidth"](!0), e.effects.createWrapper(C).css({overflow: "hidden"}), F && C.css(B, E ? isNaN(w) ? "-" + w : -w : w), k[B] = (F ? E ? "+=" : "-=" : E ? "-=" : "+=") + w, C.animate(k, {
            queue: !1,
            duration: x.duration,
            easing: x.easing,
            complete: function () {
                "hide" === D && C.hide(), e.effects.restore(C, G), e.effects.removeWrapper(C), A()
            }
        })
    }, e.effects.effect.transfer = function (x, q) {
        var w = e(this), D = e(x.to), B = "fixed" === D.css("position"), E = e("body"), G = B ? E.scrollTop() : 0, k = B ? E.scrollLeft() : 0, C = D.offset(), A = {
            top: C.top - G,
            left: C.left - k,
            height: D.innerHeight(),
            width: D.innerWidth()
        }, H = w.offset(), F = e("<div class='ui-effects-transfer'></div>").appendTo(document.body).addClass(x.className).css({
            top: H.top - G,
            left: H.left - k,
            height: w.innerHeight(),
            width: w.innerWidth(),
            position: B ? "fixed" : "absolute"
        }).animate(A, x.duration, x.easing, function () {
            F.remove(), q()
        })
    }, e.widget("ui.progressbar", {
        version: "1.11.4",
        options: {max: 100, value: 0, change: null, complete: null},
        min: 0,
        _create: function () {
            this.oldValue = this.options.value = this._constrainedValue(), this.element.addClass("ui-progressbar ui-widget ui-widget-content ui-corner-all").attr({
                role: "progressbar",
                "aria-valuemin": this.min
            }), this.valueDiv = e("<div class='ui-progressbar-value ui-widget-header ui-corner-left'></div>").appendTo(this.element), this._refreshValue()
        },
        _destroy: function () {
            this.element.removeClass("ui-progressbar ui-widget ui-widget-content ui-corner-all").removeAttr("role").removeAttr("aria-valuemin").removeAttr("aria-valuemax").removeAttr("aria-valuenow"), this.valueDiv.remove()
        },
        value: function (k) {
            return void 0 === k ? this.options.value : (this.options.value = this._constrainedValue(k), this._refreshValue(), void 0)
        },
        _constrainedValue: function (k) {
            return void 0 === k && (k = this.options.value), this.indeterminate = k === !1, "number" != typeof k && (k = 0), this.indeterminate ? !1 : Math.min(this.options.max, Math.max(this.min, k))
        },
        _setOptions: function (k) {
            var q = k.value;
            delete k.value, this._super(k), this.options.value = this._constrainedValue(q), this._refreshValue()
        },
        _setOption: function (k, q) {
            "max" === k && (q = Math.max(this.min, q)), "disabled" === k && this.element.toggleClass("ui-state-disabled", !!q).attr("aria-disabled", q), this._super(k, q)
        },
        _percentage: function () {
            return this.indeterminate ? 100 : 100 * (this.options.value - this.min) / (this.options.max - this.min)
        },
        _refreshValue: function () {
            var k = this.options.value, q = this._percentage();
            this.valueDiv.toggle(this.indeterminate || k > this.min).toggleClass("ui-corner-right", k === this.options.max).width(q.toFixed(0) + "%"), this.element.toggleClass("ui-progressbar-indeterminate", this.indeterminate), this.indeterminate ? (this.element.removeAttr("aria-valuenow"), this.overlayDiv || (this.overlayDiv = e("<div class='ui-progressbar-overlay'></div>").appendTo(this.valueDiv))) : (this.element.attr({
                "aria-valuemax": this.options.max,
                "aria-valuenow": k
            }), this.overlayDiv && (this.overlayDiv.remove(), this.overlayDiv = null)), this.oldValue !== k && (this.oldValue = k, this._trigger("change")), k === this.options.max && this._trigger("complete")
        }
    }), e.widget("ui.selectable", e.ui.mouse, {
        version: "1.11.4",
        options: {
            appendTo: "body",
            autoRefresh: !0,
            distance: 0,
            filter: "*",
            tolerance: "touch",
            selected: null,
            selecting: null,
            start: null,
            stop: null,
            unselected: null,
            unselecting: null
        },
        _create: function () {
            var k, q = this;
            this.element.addClass("ui-selectable"), this.dragged = !1, this.refresh = function () {
                k = e(q.options.filter, q.element[0]), k.addClass("ui-selectee"), k.each(function () {
                    var w = e(this), x = w.offset();
                    e.data(this, "selectable-item", {
                        element: this,
                        $element: w,
                        left: x.left,
                        top: x.top,
                        right: x.left + w.outerWidth(),
                        bottom: x.top + w.outerHeight(),
                        startselected: !1,
                        selected: w.hasClass("ui-selected"),
                        selecting: w.hasClass("ui-selecting"),
                        unselecting: w.hasClass("ui-unselecting")
                    })
                })
            }, this.refresh(), this.selectees = k.addClass("ui-selectee"), this._mouseInit(), this.helper = e("<div class='ui-selectable-helper'></div>")
        },
        _destroy: function () {
            this.selectees.removeClass("ui-selectee").removeData("selectable-item"), this.element.removeClass("ui-selectable ui-selectable-disabled"), this._mouseDestroy()
        },
        _mouseStart: function (k) {
            var q = this, w = this.options;
            this.opos = [k.pageX, k.pageY], this.options.disabled || (this.selectees = e(w.filter, this.element[0]), this._trigger("start", k), e(w.appendTo).append(this.helper), this.helper.css({
                left: k.pageX,
                top: k.pageY,
                width: 0,
                height: 0
            }), w.autoRefresh && this.refresh(), this.selectees.filter(".ui-selected").each(function () {
                var x = e.data(this, "selectable-item");
                x.startselected = !0, k.metaKey || k.ctrlKey || (x.$element.removeClass("ui-selected"), x.selected = !1, x.$element.addClass("ui-unselecting"), x.unselecting = !0, q._trigger("unselecting", k, {unselecting: x.element}))
            }), e(k.target).parents().addBack().each(function () {
                var A, x = e.data(this, "selectable-item");
                return x ? (A = !k.metaKey && !k.ctrlKey || !x.$element.hasClass("ui-selected"), x.$element.removeClass(A ? "ui-unselecting" : "ui-selected").addClass(A ? "ui-selecting" : "ui-unselecting"), x.unselecting = !A, x.selecting = A, x.selected = A, A ? q._trigger("selecting", k, {selecting: x.element}) : q._trigger("unselecting", k, {unselecting: x.element}), !1) : void 0
            }))
        },
        _mouseDrag: function (C) {
            if (this.dragged = !0, !this.options.disabled) {
                var D, A = this, q = this.options, k = this.opos[0], w = this.opos[1], x = C.pageX, B = C.pageY;
                return k > x && (D = x, x = k, k = D), w > B && (D = B, B = w, w = D), this.helper.css({
                    left: k,
                    top: w,
                    width: x - k,
                    height: B - w
                }), this.selectees.each(function () {
                    var F = e.data(this, "selectable-item"), E = !1;
                    F && F.element !== A.element[0] && ("touch" === q.tolerance ? E = !(F.left > x || k > F.right || F.top > B || w > F.bottom) : "fit" === q.tolerance && (E = F.left > k && x > F.right && F.top > w && B > F.bottom), E ? (F.selected && (F.$element.removeClass("ui-selected"), F.selected = !1), F.unselecting && (F.$element.removeClass("ui-unselecting"), F.unselecting = !1), F.selecting || (F.$element.addClass("ui-selecting"), F.selecting = !0, A._trigger("selecting", C, {selecting: F.element}))) : (F.selecting && ((C.metaKey || C.ctrlKey) && F.startselected ? (F.$element.removeClass("ui-selecting"), F.selecting = !1, F.$element.addClass("ui-selected"), F.selected = !0) : (F.$element.removeClass("ui-selecting"), F.selecting = !1, F.startselected && (F.$element.addClass("ui-unselecting"), F.unselecting = !0), A._trigger("unselecting", C, {unselecting: F.element}))), F.selected && (C.metaKey || C.ctrlKey || F.startselected || (F.$element.removeClass("ui-selected"), F.selected = !1, F.$element.addClass("ui-unselecting"), F.unselecting = !0, A._trigger("unselecting", C, {unselecting: F.element})))))
                }), !1
            }
        },
        _mouseStop: function (k) {
            var q = this;
            return this.dragged = !1, e(".ui-unselecting", this.element[0]).each(function () {
                var w = e.data(this, "selectable-item");
                w.$element.removeClass("ui-unselecting"), w.unselecting = !1, w.startselected = !1, q._trigger("unselected", k, {unselected: w.element})
            }), e(".ui-selecting", this.element[0]).each(function () {
                var w = e.data(this, "selectable-item");
                w.$element.removeClass("ui-selecting").addClass("ui-selected"), w.selecting = !1, w.selected = !0, w.startselected = !0, q._trigger("selected", k, {selected: w.element})
            }), this._trigger("stop", k), this.helper.remove(), !1
        }
    }), e.widget("ui.selectmenu", {
        version: "1.11.4",
        defaultElement: "<select>",
        options: {
            appendTo: null,
            disabled: null,
            icons: {button: "ui-icon-triangle-1-s"},
            position: {my: "left top", at: "left bottom", collision: "none"},
            width: null,
            change: null,
            close: null,
            focus: null,
            open: null,
            select: null
        },
        _create: function () {
            var k = this.element.uniqueId().attr("id");
            this.ids = {
                element: k,
                button: k + "-button",
                menu: k + "-menu"
            }, this._drawButton(), this._drawMenu(), this.options.disabled && this.disable()
        },
        _drawButton: function () {
            var k = this;
            this.label = e("label[for='" + this.ids.element + "']").attr("for", this.ids.button), this._on(this.label, {
                click: function (q) {
                    this.button.focus(), q.preventDefault()
                }
            }), this.element.hide(), this.button = e("<span>", {
                "class": "ui-selectmenu-button ui-widget ui-state-default ui-corner-all",
                tabindex: this.options.disabled ? -1 : 0,
                id: this.ids.button,
                role: "combobox",
                "aria-expanded": "false",
                "aria-autocomplete": "list",
                "aria-owns": this.ids.menu,
                "aria-haspopup": "true"
            }).insertAfter(this.element), e("<span>", {"class": "ui-icon " + this.options.icons.button}).prependTo(this.button), this.buttonText = e("<span>", {"class": "ui-selectmenu-text"}).appendTo(this.button), this._setText(this.buttonText, this.element.find("option:selected").text()), this._resizeButton(), this._on(this.button, this._buttonEvents), this.button.one("focusin", function () {
                k.menuItems || k._refreshMenu()
            }), this._hoverable(this.button), this._focusable(this.button)
        },
        _drawMenu: function () {
            var k = this;
            this.menu = e("<ul>", {
                "aria-hidden": "true",
                "aria-labelledby": this.ids.button,
                id: this.ids.menu
            }), this.menuWrap = e("<div>", {"class": "ui-selectmenu-menu ui-front"}).append(this.menu).appendTo(this._appendTo()), this.menuInstance = this.menu.menu({
                role: "listbox",
                select: function (w, q) {
                    w.preventDefault(), k._setSelection(), k._select(q.item.data("ui-selectmenu-item"), w)
                },
                focus: function (w, q) {
                    var x = q.item.data("ui-selectmenu-item");
                    null != k.focusIndex && x.index !== k.focusIndex && (k._trigger("focus", w, {item: x}), k.isOpen || k._select(x, w)), k.focusIndex = x.index, k.button.attr("aria-activedescendant", k.menuItems.eq(x.index).attr("id"))
                }
            }).menu("instance"), this.menu.addClass("ui-corner-bottom").removeClass("ui-corner-all"), this.menuInstance._off(this.menu, "mouseleave"), this.menuInstance._closeOnDocumentClick = function () {
                return !1
            }, this.menuInstance._isDivider = function () {
                return !1
            }
        },
        refresh: function () {
            this._refreshMenu(), this._setText(this.buttonText, this._getSelectedItem().text()), this.options.width || this._resizeButton()
        },
        _refreshMenu: function () {
            this.menu.empty();
            var k, q = this.element.find("option");
            q.length && (this._parseOptions(q), this._renderMenu(this.menu, this.items), this.menuInstance.refresh(), this.menuItems = this.menu.find("li").not(".ui-selectmenu-optgroup"), k = this._getSelectedItem(), this.menuInstance.focus(null, k), this._setAria(k.data("ui-selectmenu-item")), this._setOption("disabled", this.element.prop("disabled")))
        },
        open: function (k) {
            this.options.disabled || (this.menuItems ? (this.menu.find(".ui-state-focus").removeClass("ui-state-focus"), this.menuInstance.focus(null, this._getSelectedItem())) : this._refreshMenu(), this.isOpen = !0, this._toggleAttr(), this._resizeMenu(), this._position(), this._on(this.document, this._documentClick), this._trigger("open", k))
        },
        _position: function () {
            this.menuWrap.position(e.extend({of: this.button}, this.options.position))
        },
        close: function (k) {
            this.isOpen && (this.isOpen = !1, this._toggleAttr(), this.range = null, this._off(this.document), this._trigger("close", k))
        },
        widget: function () {
            return this.button
        },
        menuWidget: function () {
            return this.menu
        },
        _renderMenu: function (k, q) {
            var x = this, w = "";
            e.each(q, function (A, B) {
                B.optgroup !== w && (e("<li>", {
                    "class": "ui-selectmenu-optgroup ui-menu-divider" + (B.element.parent("optgroup").prop("disabled") ? " ui-state-disabled" : ""),
                    text: B.optgroup
                }).appendTo(k), w = B.optgroup), x._renderItemData(k, B)
            })
        },
        _renderItemData: function (k, q) {
            return this._renderItem(k, q).data("ui-selectmenu-item", q)
        },
        _renderItem: function (k, q) {
            var w = e("<li>");
            return q.disabled && w.addClass("ui-state-disabled"), this._setText(w, q.label), w.appendTo(k)
        },
        _setText: function (k, q) {
            q ? k.text(q) : k.html("&#160;")
        },
        _move: function (x, k) {
            var q, A, w = ".ui-menu-item";
            this.isOpen ? q = this.menuItems.eq(this.focusIndex) : (q = this.menuItems.eq(this.element[0].selectedIndex), w += ":not(.ui-state-disabled)"), A = "first" === x || "last" === x ? q["first" === x ? "prevAll" : "nextAll"](w).eq(-1) : q[x + "All"](w).eq(0), A.length && this.menuInstance.focus(k, A)
        },
        _getSelectedItem: function () {
            return this.menuItems.eq(this.element[0].selectedIndex)
        },
        _toggle: function (k) {
            this[this.isOpen ? "close" : "open"](k)
        },
        _setSelection: function () {
            var k;
            this.range && (window.getSelection ? (k = window.getSelection(), k.removeAllRanges(), k.addRange(this.range)) : this.range.select(), this.button.focus())
        },
        _documentClick: {
            mousedown: function (k) {
                this.isOpen && (e(k.target).closest(".ui-selectmenu-menu, #" + this.ids.button).length || this.close(k))
            }
        },
        _buttonEvents: {
            mousedown: function () {
                var k;
                window.getSelection ? (k = window.getSelection(), k.rangeCount && (this.range = k.getRangeAt(0))) : this.range = document.selection.createRange()
            }, click: function (k) {
                this._setSelection(), this._toggle(k)
            }, keydown: function (k) {
                var q = !0;
                switch (k.keyCode) {
                    case e.ui.keyCode.TAB:
                    case e.ui.keyCode.ESCAPE:
                        this.close(k), q = !1;
                        break;
                    case e.ui.keyCode.ENTER:
                        this.isOpen && this._selectFocusedItem(k);
                        break;
                    case e.ui.keyCode.UP:
                        k.altKey ? this._toggle(k) : this._move("prev", k);
                        break;
                    case e.ui.keyCode.DOWN:
                        k.altKey ? this._toggle(k) : this._move("next", k);
                        break;
                    case e.ui.keyCode.SPACE:
                        this.isOpen ? this._selectFocusedItem(k) : this._toggle(k);
                        break;
                    case e.ui.keyCode.LEFT:
                        this._move("prev", k);
                        break;
                    case e.ui.keyCode.RIGHT:
                        this._move("next", k);
                        break;
                    case e.ui.keyCode.HOME:
                    case e.ui.keyCode.PAGE_UP:
                        this._move("first", k);
                        break;
                    case e.ui.keyCode.END:
                    case e.ui.keyCode.PAGE_DOWN:
                        this._move("last", k);
                        break;
                    default:
                        this.menu.trigger(k), q = !1
                }
                q && k.preventDefault()
            }
        },
        _selectFocusedItem: function (k) {
            var q = this.menuItems.eq(this.focusIndex);
            q.hasClass("ui-state-disabled") || this._select(q.data("ui-selectmenu-item"), k)
        },
        _select: function (w, k) {
            var q = this.element[0].selectedIndex;
            this.element[0].selectedIndex = w.index, this._setText(this.buttonText, w.label), this._setAria(w), this._trigger("select", k, {item: w}), w.index !== q && this._trigger("change", k, {item: w}), this.close(k)
        },
        _setAria: function (k) {
            var q = this.menuItems.eq(k.index).attr("id");
            this.button.attr({
                "aria-labelledby": q,
                "aria-activedescendant": q
            }), this.menu.attr("aria-activedescendant", q)
        },
        _setOption: function (k, q) {
            "icons" === k && this.button.find("span.ui-icon").removeClass(this.options.icons.button).addClass(q.button), this._super(k, q), "appendTo" === k && this.menuWrap.appendTo(this._appendTo()), "disabled" === k && (this.menuInstance.option("disabled", q), this.button.toggleClass("ui-state-disabled", q).attr("aria-disabled", q), this.element.prop("disabled", q), q ? (this.button.attr("tabindex", -1), this.close()) : this.button.attr("tabindex", 0)), "width" === k && this._resizeButton()
        },
        _appendTo: function () {
            var k = this.options.appendTo;
            return k && (k = k.jquery || k.nodeType ? e(k) : this.document.find(k).eq(0)), k && k[0] || (k = this.element.closest(".ui-front")), k.length || (k = this.document[0].body), k
        },
        _toggleAttr: function () {
            this.button.toggleClass("ui-corner-top", this.isOpen).toggleClass("ui-corner-all", !this.isOpen).attr("aria-expanded", this.isOpen), this.menuWrap.toggleClass("ui-selectmenu-open", this.isOpen), this.menu.attr("aria-hidden", !this.isOpen)
        },
        _resizeButton: function () {
            var k = this.options.width;
            k || (k = this.element.show().outerWidth(), this.element.hide()), this.button.outerWidth(k)
        },
        _resizeMenu: function () {
            this.menu.outerWidth(Math.max(this.button.outerWidth(), this.menu.width("").outerWidth() + 1))
        },
        _getCreateOptions: function () {
            return {disabled: this.element.prop("disabled")}
        },
        _parseOptions: function (k) {
            var q = [];
            k.each(function (A, x) {
                var w = e(x), B = w.parent("optgroup");
                q.push({
                    element: w,
                    index: A,
                    value: w.val(),
                    label: w.text(),
                    optgroup: B.attr("label") || "",
                    disabled: B.prop("disabled") || w.prop("disabled")
                })
            }), this.items = q
        },
        _destroy: function () {
            this.menuWrap.remove(), this.button.remove(), this.element.show(), this.element.removeUniqueId(), this.label.attr("for", this.ids.element)
        }
    }), e.widget("ui.slider", e.ui.mouse, {
        version: "1.11.4",
        widgetEventPrefix: "slide",
        options: {
            animate: !1,
            distance: 0,
            max: 100,
            min: 0,
            orientation: "horizontal",
            range: !1,
            step: 1,
            value: 0,
            values: null,
            change: null,
            slide: null,
            start: null,
            stop: null
        },
        numPages: 5,
        _create: function () {
            this._keySliding = !1, this._mouseSliding = !1, this._animateOff = !0, this._handleIndex = null, this._detectOrientation(), this._mouseInit(), this._calculateNewMax(), this.element.addClass("ui-slider ui-slider-" + this.orientation + " ui-widget ui-widget-content ui-corner-all"), this._refresh(), this._setOption("disabled", this.options.disabled), this._animateOff = !1
        },
        _refresh: function () {
            this._createRange(), this._createHandles(), this._setupEvents(), this._refreshValue()
        },
        _createHandles: function () {
            var A, B, x = this.options, q = this.element.find(".ui-slider-handle").addClass("ui-state-default ui-corner-all"), k = "<span class='ui-slider-handle ui-state-default ui-corner-all' tabindex='0'></span>", w = [];
            for (B = x.values && x.values.length || 1, q.length > B && (q.slice(B).remove(), q = q.slice(0, B)), A = q.length; B > A; A++) {
                w.push(k)
            }
            this.handles = q.add(e(w.join("")).appendTo(this.element)), this.handle = this.handles.eq(0), this.handles.each(function (C) {
                e(this).data("ui-slider-handle-index", C)
            })
        },
        _createRange: function () {
            var k = this.options, q = "";
            k.range ? (k.range === !0 && (k.values ? k.values.length && 2 !== k.values.length ? k.values = [k.values[0], k.values[0]] : e.isArray(k.values) && (k.values = k.values.slice(0)) : k.values = [this._valueMin(), this._valueMin()]), this.range && this.range.length ? this.range.removeClass("ui-slider-range-min ui-slider-range-max").css({
                left: "",
                bottom: ""
            }) : (this.range = e("<div></div>").appendTo(this.element), q = "ui-slider-range ui-widget-header ui-corner-all"), this.range.addClass(q + ("min" === k.range || "max" === k.range ? " ui-slider-range-" + k.range : ""))) : (this.range && this.range.remove(), this.range = null)
        },
        _setupEvents: function () {
            this._off(this.handles), this._on(this.handles, this._handleEvents), this._hoverable(this.handles), this._focusable(this.handles)
        },
        _destroy: function () {
            this.handles.remove(), this.range && this.range.remove(), this.element.removeClass("ui-slider ui-slider-horizontal ui-slider-vertical ui-widget ui-widget-content ui-corner-all"), this._mouseDestroy()
        },
        _mouseCapture: function (x) {
            var A, w, C, G, D, F, q, B, E = this, k = this.options;
            return k.disabled ? !1 : (this.elementSize = {
                width: this.element.outerWidth(),
                height: this.element.outerHeight()
            }, this.elementOffset = this.element.offset(), A = {
                x: x.pageX,
                y: x.pageY
            }, w = this._normValueFromMouse(A), C = this._valueMax() - this._valueMin() + 1, this.handles.each(function (I) {
                var H = Math.abs(w - E.values(I));
                (C > H || C === H && (I === E._lastChangedValue || E.values(I) === k.min)) && (C = H, G = e(this), D = I)
            }), F = this._start(x, D), F === !1 ? !1 : (this._mouseSliding = !0, this._handleIndex = D, G.addClass("ui-state-active").focus(), q = G.offset(), B = !e(x.target).parents().addBack().is(".ui-slider-handle"), this._clickOffset = B ? {
                left: 0,
                top: 0
            } : {
                left: x.pageX - q.left - G.width() / 2,
                top: x.pageY - q.top - G.height() / 2 - (parseInt(G.css("borderTopWidth"), 10) || 0) - (parseInt(G.css("borderBottomWidth"), 10) || 0) + (parseInt(G.css("marginTop"), 10) || 0)
            }, this.handles.hasClass("ui-state-hover") || this._slide(x, D, w), this._animateOff = !0, !0))
        },
        _mouseStart: function () {
            return !0
        },
        _mouseDrag: function (w) {
            var k = {x: w.pageX, y: w.pageY}, q = this._normValueFromMouse(k);
            return this._slide(w, this._handleIndex, q), !1
        },
        _mouseStop: function (k) {
            return this.handles.removeClass("ui-state-active"), this._mouseSliding = !1, this._stop(k, this._handleIndex), this._change(k, this._handleIndex), this._handleIndex = null, this._clickOffset = null, this._animateOff = !1, !1
        },
        _detectOrientation: function () {
            this.orientation = "vertical" === this.options.orientation ? "vertical" : "horizontal"
        },
        _normValueFromMouse: function (w) {
            var A, B, x, q, k;
            return "horizontal" === this.orientation ? (A = this.elementSize.width, B = w.x - this.elementOffset.left - (this._clickOffset ? this._clickOffset.left : 0)) : (A = this.elementSize.height, B = w.y - this.elementOffset.top - (this._clickOffset ? this._clickOffset.top : 0)), x = B / A, x > 1 && (x = 1), 0 > x && (x = 0), "vertical" === this.orientation && (x = 1 - x), q = this._valueMax() - this._valueMin(), k = this._valueMin() + x * q, this._trimAlignValue(k)
        },
        _start: function (w, k) {
            var q = {handle: this.handles[k], value: this.value()};
            return this.options.values && this.options.values.length && (q.value = this.values(k), q.values = this.values()), this._trigger("start", w, q)
        },
        _slide: function (w, A, B) {
            var x, q, k;
            this.options.values && this.options.values.length ? (x = this.values(A ? 0 : 1), 2 === this.options.values.length && this.options.range === !0 && (0 === A && B > x || 1 === A && x > B) && (B = x), B !== this.values(A) && (q = this.values(), q[A] = B, k = this._trigger("slide", w, {
                handle: this.handles[A],
                value: B,
                values: q
            }), x = this.values(A ? 0 : 1), k !== !1 && this.values(A, B))) : B !== this.value() && (k = this._trigger("slide", w, {
                handle: this.handles[A],
                value: B
            }), k !== !1 && this.value(B))
        },
        _stop: function (w, k) {
            var q = {handle: this.handles[k], value: this.value()};
            this.options.values && this.options.values.length && (q.value = this.values(k), q.values = this.values()), this._trigger("stop", w, q)
        },
        _change: function (w, k) {
            if (!this._keySliding && !this._mouseSliding) {
                var q = {handle: this.handles[k], value: this.value()};
                this.options.values && this.options.values.length && (q.value = this.values(k), q.values = this.values()), this._lastChangedValue = k, this._trigger("change", w, q)
            }
        },
        value: function (k) {
            return arguments.length ? (this.options.value = this._trimAlignValue(k), this._refreshValue(), this._change(null, 0), void 0) : this._value()
        },
        values: function (x, A) {
            var w, q, k;
            if (arguments.length > 1) {
                return this.options.values[x] = this._trimAlignValue(A), this._refreshValue(), this._change(null, x), void 0
            }
            if (!arguments.length) {
                return this._values()
            }
            if (!e.isArray(arguments[0])) {
                return this.options.values && this.options.values.length ? this._values(x) : this.value()
            }
            for (w = this.options.values, q = arguments[0], k = 0; w.length > k; k += 1) {
                w[k] = this._trimAlignValue(q[k]), this._change(null, k)
            }
            this._refreshValue()
        },
        _setOption: function (k, q) {
            var x, w = 0;
            switch ("range" === k && this.options.range === !0 && ("min" === q ? (this.options.value = this._values(0), this.options.values = null) : "max" === q && (this.options.value = this._values(this.options.values.length - 1), this.options.values = null)), e.isArray(this.options.values) && (w = this.options.values.length), "disabled" === k && this.element.toggleClass("ui-state-disabled", !!q), this._super(k, q), k) {
                case"orientation":
                    this._detectOrientation(), this.element.removeClass("ui-slider-horizontal ui-slider-vertical").addClass("ui-slider-" + this.orientation), this._refreshValue(), this.handles.css("horizontal" === q ? "bottom" : "left", "");
                    break;
                case"value":
                    this._animateOff = !0, this._refreshValue(), this._change(null, 0), this._animateOff = !1;
                    break;
                case"values":
                    for (this._animateOff = !0, this._refreshValue(), x = 0; w > x; x += 1) {
                        this._change(null, x)
                    }
                    this._animateOff = !1;
                    break;
                case"step":
                case"min":
                case"max":
                    this._animateOff = !0, this._calculateNewMax(), this._refreshValue(), this._animateOff = !1;
                    break;
                case"range":
                    this._animateOff = !0, this._refresh(), this._animateOff = !1
            }
        },
        _value: function () {
            var k = this.options.value;
            return k = this._trimAlignValue(k)
        },
        _values: function (w) {
            var k, q, x;
            if (arguments.length) {
                return k = this.options.values[w], k = this._trimAlignValue(k)
            }
            if (this.options.values && this.options.values.length) {
                for (q = this.options.values.slice(), x = 0; q.length > x; x += 1) {
                    q[x] = this._trimAlignValue(q[x])
                }
                return q
            }
            return []
        },
        _trimAlignValue: function (w) {
            if (this._valueMin() >= w) {
                return this._valueMin()
            }
            if (w >= this._valueMax()) {
                return this._valueMax()
            }
            var k = this.options.step > 0 ? this.options.step : 1, q = (w - this._valueMin()) % k, x = w - q;
            return 2 * Math.abs(q) >= k && (x += q > 0 ? k : -k), parseFloat(x.toFixed(5))
        },
        _calculateNewMax: function () {
            var w = this.options.max, k = this._valueMin(), q = this.options.step, x = Math.floor(+(w - k).toFixed(this._precision()) / q) * q;
            w = x + k, this.max = parseFloat(w.toFixed(this._precision()))
        },
        _precision: function () {
            var k = this._precisionOf(this.options.step);
            return null !== this.options.min && (k = Math.max(k, this._precisionOf(this.options.min))), k
        },
        _precisionOf: function (w) {
            var k = "" + w, q = k.indexOf(".");
            return -1 === q ? 0 : k.length - q - 1
        },
        _valueMin: function () {
            return this.options.min
        },
        _valueMax: function () {
            return this.max
        },
        _refreshValue: function () {
            var F, x, D, B, q, C = this.options.range, E = this.options, w = this, A = this._animateOff ? !1 : E.animate, k = {};
            this.options.values && this.options.values.length ? this.handles.each(function (G) {
                x = 100 * ((w.values(G) - w._valueMin()) / (w._valueMax() - w._valueMin())), k["horizontal" === w.orientation ? "left" : "bottom"] = x + "%", e(this).stop(1, 1)[A ? "animate" : "css"](k, E.animate), w.options.range === !0 && ("horizontal" === w.orientation ? (0 === G && w.range.stop(1, 1)[A ? "animate" : "css"]({left: x + "%"}, E.animate), 1 === G && w.range[A ? "animate" : "css"]({width: x - F + "%"}, {
                    queue: !1,
                    duration: E.animate
                })) : (0 === G && w.range.stop(1, 1)[A ? "animate" : "css"]({bottom: x + "%"}, E.animate), 1 === G && w.range[A ? "animate" : "css"]({height: x - F + "%"}, {
                    queue: !1,
                    duration: E.animate
                }))), F = x
            }) : (D = this.value(), B = this._valueMin(), q = this._valueMax(), x = q !== B ? 100 * ((D - B) / (q - B)) : 0, k["horizontal" === this.orientation ? "left" : "bottom"] = x + "%", this.handle.stop(1, 1)[A ? "animate" : "css"](k, E.animate), "min" === C && "horizontal" === this.orientation && this.range.stop(1, 1)[A ? "animate" : "css"]({width: x + "%"}, E.animate), "max" === C && "horizontal" === this.orientation && this.range[A ? "animate" : "css"]({width: 100 - x + "%"}, {
                queue: !1,
                duration: E.animate
            }), "min" === C && "vertical" === this.orientation && this.range.stop(1, 1)[A ? "animate" : "css"]({height: x + "%"}, E.animate), "max" === C && "vertical" === this.orientation && this.range[A ? "animate" : "css"]({height: 100 - x + "%"}, {
                queue: !1,
                duration: E.animate
            }))
        },
        _handleEvents: {
            keydown: function (A) {
                var B, x, q, k, w = e(A.target).data("ui-slider-handle-index");
                switch (A.keyCode) {
                    case e.ui.keyCode.HOME:
                    case e.ui.keyCode.END:
                    case e.ui.keyCode.PAGE_UP:
                    case e.ui.keyCode.PAGE_DOWN:
                    case e.ui.keyCode.UP:
                    case e.ui.keyCode.RIGHT:
                    case e.ui.keyCode.DOWN:
                    case e.ui.keyCode.LEFT:
                        if (A.preventDefault(), !this._keySliding && (this._keySliding = !0, e(A.target).addClass("ui-state-active"), B = this._start(A, w), B === !1)) {
                            return
                        }
                }
                switch (k = this.options.step, x = q = this.options.values && this.options.values.length ? this.values(w) : this.value(), A.keyCode) {
                    case e.ui.keyCode.HOME:
                        q = this._valueMin();
                        break;
                    case e.ui.keyCode.END:
                        q = this._valueMax();
                        break;
                    case e.ui.keyCode.PAGE_UP:
                        q = this._trimAlignValue(x + (this._valueMax() - this._valueMin()) / this.numPages);
                        break;
                    case e.ui.keyCode.PAGE_DOWN:
                        q = this._trimAlignValue(x - (this._valueMax() - this._valueMin()) / this.numPages);
                        break;
                    case e.ui.keyCode.UP:
                    case e.ui.keyCode.RIGHT:
                        if (x === this._valueMax()) {
                            return
                        }
                        q = this._trimAlignValue(x + k);
                        break;
                    case e.ui.keyCode.DOWN:
                    case e.ui.keyCode.LEFT:
                        if (x === this._valueMin()) {
                            return
                        }
                        q = this._trimAlignValue(x - k)
                }
                this._slide(A, w, q)
            }, keyup: function (k) {
                var q = e(k.target).data("ui-slider-handle-index");
                this._keySliding && (this._keySliding = !1, this._stop(k, q), this._change(k, q), e(k.target).removeClass("ui-state-active"))
            }
        }
    }), e.widget("ui.sortable", e.ui.mouse, {
        version: "1.11.4",
        widgetEventPrefix: "sort",
        ready: !1,
        options: {
            appendTo: "parent",
            axis: !1,
            connectWith: !1,
            containment: !1,
            cursor: "auto",
            cursorAt: !1,
            dropOnEmpty: !0,
            forcePlaceholderSize: !1,
            forceHelperSize: !1,
            grid: !1,
            handle: !1,
            helper: "original",
            items: "> *",
            opacity: !1,
            placeholder: !1,
            revert: !1,
            scroll: !0,
            scrollSensitivity: 20,
            scrollSpeed: 20,
            scope: "default",
            tolerance: "intersect",
            zIndex: 1000,
            activate: null,
            beforeStop: null,
            change: null,
            deactivate: null,
            out: null,
            over: null,
            receive: null,
            remove: null,
            sort: null,
            start: null,
            stop: null,
            update: null
        },
        _isOverAxis: function (w, k, q) {
            return w >= k && k + q > w
        },
        _isFloating: function (k) {
            return /left|right/.test(k.css("float")) || /inline|table-cell/.test(k.css("display"))
        },
        _create: function () {
            this.containerCache = {}, this.element.addClass("ui-sortable"), this.refresh(), this.offset = this.element.offset(), this._mouseInit(), this._setHandleClassName(), this.ready = !0
        },
        _setOption: function (k, q) {
            this._super(k, q), "handle" === k && this._setHandleClassName()
        },
        _setHandleClassName: function () {
            this.element.find(".ui-sortable-handle").removeClass("ui-sortable-handle"), e.each(this.items, function () {
                (this.instance.options.handle ? this.item.find(this.instance.options.handle) : this.item).addClass("ui-sortable-handle")
            })
        },
        _destroy: function () {
            this.element.removeClass("ui-sortable ui-sortable-disabled").find(".ui-sortable-handle").removeClass("ui-sortable-handle"), this._mouseDestroy();
            for (var k = this.items.length - 1; k >= 0; k--) {
                this.items[k].item.removeData(this.widgetName + "-item")
            }
            return this
        },
        _mouseCapture: function (x, A) {
            var w = null, q = !1, k = this;
            return this.reverting ? !1 : this.options.disabled || "static" === this.options.type ? !1 : (this._refreshItems(x), e(x.target).parents().each(function () {
                return e.data(this, k.widgetName + "-item") === k ? (w = e(this), !1) : void 0
            }), e.data(x.target, k.widgetName + "-item") === k && (w = e(x.target)), w ? !this.options.handle || A || (e(this.options.handle, w).find("*").addBack().each(function () {
                this === x.target && (q = !0)
            }), q) ? (this.currentItem = w, this._removeCurrentsFromItems(), !0) : !1 : !1)
        },
        _mouseStart: function (A, B, x) {
            var q, k, w = this.options;
            if (this.currentContainer = this, this.refreshPositions(), this.helper = this._createHelper(A), this._cacheHelperProportions(), this._cacheMargins(), this.scrollParent = this.helper.scrollParent(), this.offset = this.currentItem.offset(), this.offset = {
                top: this.offset.top - this.margins.top,
                left: this.offset.left - this.margins.left
            }, e.extend(this.offset, {
                click: {
                    left: A.pageX - this.offset.left,
                    top: A.pageY - this.offset.top
                },
                parent: this._getParentOffset(),
                relative: this._getRelativeOffset()
            }), this.helper.css("position", "absolute"), this.cssPosition = this.helper.css("position"), this.originalPosition = this._generatePosition(A), this.originalPageX = A.pageX, this.originalPageY = A.pageY, w.cursorAt && this._adjustOffsetFromHelper(w.cursorAt), this.domPosition = {
                prev: this.currentItem.prev()[0],
                parent: this.currentItem.parent()[0]
            }, this.helper[0] !== this.currentItem[0] && this.currentItem.hide(), this._createPlaceholder(), w.containment && this._setContainment(), w.cursor && "auto" !== w.cursor && (k = this.document.find("body"), this.storedCursor = k.css("cursor"), k.css("cursor", w.cursor), this.storedStylesheet = e("<style>*{ cursor: " + w.cursor + " !important; }</style>").appendTo(k)), w.opacity && (this.helper.css("opacity") && (this._storedOpacity = this.helper.css("opacity")), this.helper.css("opacity", w.opacity)), w.zIndex && (this.helper.css("zIndex") && (this._storedZIndex = this.helper.css("zIndex")), this.helper.css("zIndex", w.zIndex)), this.scrollParent[0] !== this.document[0] && "HTML" !== this.scrollParent[0].tagName && (this.overflowOffset = this.scrollParent.offset()), this._trigger("start", A, this._uiHash()), this._preserveHelperProportions || this._cacheHelperProportions(), !x) {
                for (q = this.containers.length - 1; q >= 0; q--) {
                    this.containers[q]._trigger("activate", A, this._uiHash(this))
                }
            }
            return e.ui.ddmanager && (e.ui.ddmanager.current = this), e.ui.ddmanager && !w.dropBehaviour && e.ui.ddmanager.prepareOffsets(this, A), this.dragging = !0, this.helper.addClass("ui-sortable-helper"), this._mouseDrag(A), !0
        },
        _mouseDrag: function (B) {
            var C, A, q, k, w = this.options, x = !1;
            for (this.position = this._generatePosition(B), this.positionAbs = this._convertPositionTo("absolute"), this.lastPositionAbs || (this.lastPositionAbs = this.positionAbs), this.options.scroll && (this.scrollParent[0] !== this.document[0] && "HTML" !== this.scrollParent[0].tagName ? (this.overflowOffset.top + this.scrollParent[0].offsetHeight - B.pageY < w.scrollSensitivity ? this.scrollParent[0].scrollTop = x = this.scrollParent[0].scrollTop + w.scrollSpeed : B.pageY - this.overflowOffset.top < w.scrollSensitivity && (this.scrollParent[0].scrollTop = x = this.scrollParent[0].scrollTop - w.scrollSpeed), this.overflowOffset.left + this.scrollParent[0].offsetWidth - B.pageX < w.scrollSensitivity ? this.scrollParent[0].scrollLeft = x = this.scrollParent[0].scrollLeft + w.scrollSpeed : B.pageX - this.overflowOffset.left < w.scrollSensitivity && (this.scrollParent[0].scrollLeft = x = this.scrollParent[0].scrollLeft - w.scrollSpeed)) : (B.pageY - this.document.scrollTop() < w.scrollSensitivity ? x = this.document.scrollTop(this.document.scrollTop() - w.scrollSpeed) : this.window.height() - (B.pageY - this.document.scrollTop()) < w.scrollSensitivity && (x = this.document.scrollTop(this.document.scrollTop() + w.scrollSpeed)), B.pageX - this.document.scrollLeft() < w.scrollSensitivity ? x = this.document.scrollLeft(this.document.scrollLeft() - w.scrollSpeed) : this.window.width() - (B.pageX - this.document.scrollLeft()) < w.scrollSensitivity && (x = this.document.scrollLeft(this.document.scrollLeft() + w.scrollSpeed))), x !== !1 && e.ui.ddmanager && !w.dropBehaviour && e.ui.ddmanager.prepareOffsets(this, B)), this.positionAbs = this._convertPositionTo("absolute"), this.options.axis && "y" === this.options.axis || (this.helper[0].style.left = this.position.left + "px"), this.options.axis && "x" === this.options.axis || (this.helper[0].style.top = this.position.top + "px"), C = this.items.length - 1; C >= 0; C--) {
                if (A = this.items[C], q = A.item[0], k = this._intersectsWithPointer(A), k && A.instance === this.currentContainer && q !== this.currentItem[0] && this.placeholder[1 === k ? "next" : "prev"]()[0] !== q && !e.contains(this.placeholder[0], q) && ("semi-dynamic" === this.options.type ? !e.contains(this.element[0], q) : !0)) {
                    if (this.direction = 1 === k ? "down" : "up", "pointer" !== this.options.tolerance && !this._intersectsWithSides(A)) {
                        break
                    }
                    this._rearrange(B, A), this._trigger("change", B, this._uiHash());
                    break
                }
            }
            return this._contactContainers(B), e.ui.ddmanager && e.ui.ddmanager.drag(this, B), this._trigger("sort", B, this._uiHash()), this.lastPositionAbs = this.positionAbs, !1
        },
        _mouseStop: function (A, B) {
            if (A) {
                if (e.ui.ddmanager && !this.options.dropBehaviour && e.ui.ddmanager.drop(this, A), this.options.revert) {
                    var x = this, q = this.placeholder.offset(), k = this.options.axis, w = {};
                    k && "x" !== k || (w.left = q.left - this.offset.parent.left - this.margins.left + (this.offsetParent[0] === this.document[0].body ? 0 : this.offsetParent[0].scrollLeft)), k && "y" !== k || (w.top = q.top - this.offset.parent.top - this.margins.top + (this.offsetParent[0] === this.document[0].body ? 0 : this.offsetParent[0].scrollTop)), this.reverting = !0, e(this.helper).animate(w, parseInt(this.options.revert, 10) || 500, function () {
                        x._clear(A)
                    })
                } else {
                    this._clear(A, B)
                }
                return !1
            }
        },
        cancel: function () {
            if (this.dragging) {
                this._mouseUp({target: null}), "original" === this.options.helper ? this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper") : this.currentItem.show();
                for (var k = this.containers.length - 1; k >= 0; k--) {
                    this.containers[k]._trigger("deactivate", null, this._uiHash(this)), this.containers[k].containerCache.over && (this.containers[k]._trigger("out", null, this._uiHash(this)), this.containers[k].containerCache.over = 0)
                }
            }
            return this.placeholder && (this.placeholder[0].parentNode && this.placeholder[0].parentNode.removeChild(this.placeholder[0]), "original" !== this.options.helper && this.helper && this.helper[0].parentNode && this.helper.remove(), e.extend(this, {
                helper: null,
                dragging: !1,
                reverting: !1,
                _noFinalSort: null
            }), this.domPosition.prev ? e(this.domPosition.prev).after(this.currentItem) : e(this.domPosition.parent).prepend(this.currentItem)), this
        },
        serialize: function (k) {
            var q = this._getItemsAsjQuery(k && k.connected), w = [];
            return k = k || {}, e(q).each(function () {
                var x = (e(k.item || this).attr(k.attribute || "id") || "").match(k.expression || /(.+)[\-=_](.+)/);
                x && w.push((k.key || x[1] + "[]") + "=" + (k.key && k.expression ? x[1] : x[2]))
            }), !w.length && k.key && w.push(k.key + "="), w.join("&")
        },
        toArray: function (k) {
            var q = this._getItemsAsjQuery(k && k.connected), w = [];
            return k = k || {}, q.each(function () {
                w.push(e(k.item || this).attr(k.attribute || "id") || "")
            }), w
        },
        _intersectsWith: function (D) {
            var q = this.positionAbs.left, H = q + this.helperProportions.width, k = this.positionAbs.top, x = k + this.helperProportions.height, A = D.left, F = A + D.width, I = D.top, E = I + D.height, J = this.offset.click.top, w = this.offset.click.left, C = "x" === this.options.axis || k + J > I && E > k + J, B = "y" === this.options.axis || q + w > A && F > q + w, G = C && B;
            return "pointer" === this.options.tolerance || this.options.forcePointerForContainers || "pointer" !== this.options.tolerance && this.helperProportions[this.floating ? "width" : "height"] > D[this.floating ? "width" : "height"] ? G : q + this.helperProportions.width / 2 > A && F > H - this.helperProportions.width / 2 && k + this.helperProportions.height / 2 > I && E > x - this.helperProportions.height / 2
        },
        _intersectsWithPointer: function (w) {
            var A = "x" === this.options.axis || this._isOverAxis(this.positionAbs.top + this.offset.click.top, w.top, w.height), B = "y" === this.options.axis || this._isOverAxis(this.positionAbs.left + this.offset.click.left, w.left, w.width), x = A && B, q = this._getDragVerticalDirection(), k = this._getDragHorizontalDirection();
            return x ? this.floating ? k && "right" === k || "down" === q ? 2 : 1 : q && ("down" === q ? 2 : 1) : !1
        },
        _intersectsWithSides: function (x) {
            var k = this._isOverAxis(this.positionAbs.top + this.offset.click.top, x.top + x.height / 2, x.height), q = this._isOverAxis(this.positionAbs.left + this.offset.click.left, x.left + x.width / 2, x.width), A = this._getDragVerticalDirection(), w = this._getDragHorizontalDirection();
            return this.floating && w ? "right" === w && q || "left" === w && !q : A && ("down" === A && k || "up" === A && !k)
        },
        _getDragVerticalDirection: function () {
            var k = this.positionAbs.top - this.lastPositionAbs.top;
            return 0 !== k && (k > 0 ? "down" : "up")
        },
        _getDragHorizontalDirection: function () {
            var k = this.positionAbs.left - this.lastPositionAbs.left;
            return 0 !== k && (k > 0 ? "right" : "left")
        },
        refresh: function (k) {
            return this._refreshItems(k), this._setHandleClassName(), this.refreshPositions(), this
        },
        _connectWith: function () {
            var k = this.options;
            return k.connectWith.constructor === String ? [k.connectWith] : k.connectWith
        },
        _getItemsAsjQuery: function (k) {
            function x() {
                D.push(this)
            }

            var E, B, q, C, D = [], w = [], A = this._connectWith();
            if (A && k) {
                for (E = A.length - 1; E >= 0; E--) {
                    for (q = e(A[E], this.document[0]), B = q.length - 1; B >= 0; B--) {
                        C = e.data(q[B], this.widgetFullName), C && C !== this && !C.options.disabled && w.push([e.isFunction(C.options.items) ? C.options.items.call(C.element) : e(C.options.items, C.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"), C])
                    }
                }
            }
            for (w.push([e.isFunction(this.options.items) ? this.options.items.call(this.element, null, {
                options: this.options,
                item: this.currentItem
            }) : e(this.options.items, this.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"), this]), E = w.length - 1; E >= 0; E--) {
                w[E][0].each(x)
            }
            return e(D)
        },
        _removeCurrentsFromItems: function () {
            var k = this.currentItem.find(":data(" + this.widgetName + "-item)");
            this.items = e.grep(this.items, function (w) {
                for (var q = 0; k.length > q; q++) {
                    if (k[q] === w.item[0]) {
                        return !1
                    }
                }
                return !0
            })
        },
        _refreshItems: function (x) {
            this.items = [], this.containers = [this];
            var q, w, D, B, E, G, k, C, A = this.items, H = [[e.isFunction(this.options.items) ? this.options.items.call(this.element[0], x, {item: this.currentItem}) : e(this.options.items, this.element), this]], F = this._connectWith();
            if (F && this.ready) {
                for (q = F.length - 1; q >= 0; q--) {
                    for (D = e(F[q], this.document[0]), w = D.length - 1; w >= 0; w--) {
                        B = e.data(D[w], this.widgetFullName), B && B !== this && !B.options.disabled && (H.push([e.isFunction(B.options.items) ? B.options.items.call(B.element[0], x, {item: this.currentItem}) : e(B.options.items, B.element), B]), this.containers.push(B))
                    }
                }
            }
            for (q = H.length - 1; q >= 0; q--) {
                for (E = H[q][1], G = H[q][0], w = 0, C = G.length; C > w; w++) {
                    k = e(G[w]), k.data(this.widgetName + "-item", E), A.push({
                        item: k,
                        instance: E,
                        width: 0,
                        height: 0,
                        left: 0,
                        top: 0
                    })
                }
            }
        },
        refreshPositions: function (x) {
            this.floating = this.items.length ? "x" === this.options.axis || this._isFloating(this.items[0].item) : !1, this.offsetParent && this.helper && (this.offset.parent = this._getParentOffset());
            var A, w, q, k;
            for (A = this.items.length - 1; A >= 0; A--) {
                w = this.items[A], w.instance !== this.currentContainer && this.currentContainer && w.item[0] !== this.currentItem[0] || (q = this.options.toleranceElement ? e(this.options.toleranceElement, w.item) : w.item, x || (w.width = q.outerWidth(), w.height = q.outerHeight()), k = q.offset(), w.left = k.left, w.top = k.top)
            }
            if (this.options.custom && this.options.custom.refreshContainers) {
                this.options.custom.refreshContainers.call(this)
            } else {
                for (A = this.containers.length - 1; A >= 0; A--) {
                    k = this.containers[A].element.offset(), this.containers[A].containerCache.left = k.left, this.containers[A].containerCache.top = k.top, this.containers[A].containerCache.width = this.containers[A].element.outerWidth(), this.containers[A].containerCache.height = this.containers[A].element.outerHeight()
                }
            }
            return this
        },
        _createPlaceholder: function (k) {
            k = k || this;
            var q, w = k.options;
            w.placeholder && w.placeholder.constructor !== String || (q = w.placeholder, w.placeholder = {
                element: function () {
                    var A = k.currentItem[0].nodeName.toLowerCase(), x = e("<" + A + ">", k.document[0]).addClass(q || k.currentItem[0].className + " ui-sortable-placeholder").removeClass("ui-sortable-helper");
                    return "tbody" === A ? k._createTrPlaceholder(k.currentItem.find("tr").eq(0), e("<tr>", k.document[0]).appendTo(x)) : "tr" === A ? k._createTrPlaceholder(k.currentItem, x) : "img" === A && x.attr("src", k.currentItem.attr("src")), q || x.css("visibility", "hidden"), x
                }, update: function (A, x) {
                    (!q || w.forcePlaceholderSize) && (x.height() || x.height(k.currentItem.innerHeight() - parseInt(k.currentItem.css("paddingTop") || 0, 10) - parseInt(k.currentItem.css("paddingBottom") || 0, 10)), x.width() || x.width(k.currentItem.innerWidth() - parseInt(k.currentItem.css("paddingLeft") || 0, 10) - parseInt(k.currentItem.css("paddingRight") || 0, 10)))
                }
            }), k.placeholder = e(w.placeholder.element.call(k.element, k.currentItem)), k.currentItem.after(k.placeholder), w.placeholder.update(k, k.placeholder)
        },
        _createTrPlaceholder: function (k, q) {
            var w = this;
            k.children().each(function () {
                e("<td>&#160;</td>", w.document[0]).attr("colspan", e(this).attr("colspan") || 1).appendTo(q)
            })
        },
        _contactContainers: function (w) {
            var I, q, D, A, E, H, G, k, x, C, B = null, F = null;
            for (I = this.containers.length - 1; I >= 0; I--) {
                if (!e.contains(this.currentItem[0], this.containers[I].element[0])) {
                    if (this._intersectsWith(this.containers[I].containerCache)) {
                        if (B && e.contains(this.containers[I].element[0], B.element[0])) {
                            continue
                        }
                        B = this.containers[I], F = I
                    } else {
                        this.containers[I].containerCache.over && (this.containers[I]._trigger("out", w, this._uiHash(this)), this.containers[I].containerCache.over = 0)
                    }
                }
            }
            if (B) {
                if (1 === this.containers.length) {
                    this.containers[F].containerCache.over || (this.containers[F]._trigger("over", w, this._uiHash(this)), this.containers[F].containerCache.over = 1)
                } else {
                    for (D = 10000, A = null, x = B.floating || this._isFloating(this.currentItem), E = x ? "left" : "top", H = x ? "width" : "height", C = x ? "clientX" : "clientY", q = this.items.length - 1; q >= 0; q--) {
                        e.contains(this.containers[F].element[0], this.items[q].item[0]) && this.items[q].item[0] !== this.currentItem[0] && (G = this.items[q].item.offset()[E], k = !1, w[C] - G > this.items[q][H] / 2 && (k = !0), D > Math.abs(w[C] - G) && (D = Math.abs(w[C] - G), A = this.items[q], this.direction = k ? "up" : "down"))
                    }
                    if (!A && !this.options.dropOnEmpty) {
                        return
                    }
                    if (this.currentContainer === this.containers[F]) {
                        return this.currentContainer.containerCache.over || (this.containers[F]._trigger("over", w, this._uiHash()), this.currentContainer.containerCache.over = 1), void 0
                    }
                    A ? this._rearrange(w, A, null, !0) : this._rearrange(w, null, this.containers[F].element, !0), this._trigger("change", w, this._uiHash()), this.containers[F]._trigger("change", w, this._uiHash(this)), this.currentContainer = this.containers[F], this.options.placeholder.update(this.currentContainer, this.placeholder), this.containers[F]._trigger("over", w, this._uiHash(this)), this.containers[F].containerCache.over = 1
                }
            }
        },
        _createHelper: function (k) {
            var q = this.options, w = e.isFunction(q.helper) ? e(q.helper.apply(this.element[0], [k, this.currentItem])) : "clone" === q.helper ? this.currentItem.clone() : this.currentItem;
            return w.parents("body").length || e("parent" !== q.appendTo ? q.appendTo : this.currentItem[0].parentNode)[0].appendChild(w[0]), w[0] === this.currentItem[0] && (this._storedCSS = {
                width: this.currentItem[0].style.width,
                height: this.currentItem[0].style.height,
                position: this.currentItem.css("position"),
                top: this.currentItem.css("top"),
                left: this.currentItem.css("left")
            }), (!w[0].style.width || q.forceHelperSize) && w.width(this.currentItem.width()), (!w[0].style.height || q.forceHelperSize) && w.height(this.currentItem.height()), w
        },
        _adjustOffsetFromHelper: function (k) {
            "string" == typeof k && (k = k.split(" ")), e.isArray(k) && (k = {
                left: +k[0],
                top: +k[1] || 0
            }), "left" in k && (this.offset.click.left = k.left + this.margins.left), "right" in k && (this.offset.click.left = this.helperProportions.width - k.right + this.margins.left), "top" in k && (this.offset.click.top = k.top + this.margins.top), "bottom" in k && (this.offset.click.top = this.helperProportions.height - k.bottom + this.margins.top)
        },
        _getParentOffset: function () {
            this.offsetParent = this.helper.offsetParent();
            var k = this.offsetParent.offset();
            return "absolute" === this.cssPosition && this.scrollParent[0] !== this.document[0] && e.contains(this.scrollParent[0], this.offsetParent[0]) && (k.left += this.scrollParent.scrollLeft(), k.top += this.scrollParent.scrollTop()), (this.offsetParent[0] === this.document[0].body || this.offsetParent[0].tagName && "html" === this.offsetParent[0].tagName.toLowerCase() && e.ui.ie) && (k = {
                top: 0,
                left: 0
            }), {
                top: k.top + (parseInt(this.offsetParent.css("borderTopWidth"), 10) || 0),
                left: k.left + (parseInt(this.offsetParent.css("borderLeftWidth"), 10) || 0)
            }
        },
        _getRelativeOffset: function () {
            if ("relative" === this.cssPosition) {
                var k = this.currentItem.position();
                return {
                    top: k.top - (parseInt(this.helper.css("top"), 10) || 0) + this.scrollParent.scrollTop(),
                    left: k.left - (parseInt(this.helper.css("left"), 10) || 0) + this.scrollParent.scrollLeft()
                }
            }
            return {top: 0, left: 0}
        },
        _cacheMargins: function () {
            this.margins = {
                left: parseInt(this.currentItem.css("marginLeft"), 10) || 0,
                top: parseInt(this.currentItem.css("marginTop"), 10) || 0
            }
        },
        _cacheHelperProportions: function () {
            this.helperProportions = {
                width: this.helper.outerWidth(),
                height: this.helper.outerHeight()
            }
        },
        _setContainment: function () {
            var k, q, x, w = this.options;
            "parent" === w.containment && (w.containment = this.helper[0].parentNode), ("document" === w.containment || "window" === w.containment) && (this.containment = [0 - this.offset.relative.left - this.offset.parent.left, 0 - this.offset.relative.top - this.offset.parent.top, "document" === w.containment ? this.document.width() : this.window.width() - this.helperProportions.width - this.margins.left, ("document" === w.containment ? this.document.width() : this.window.height() || this.document[0].body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top]), /^(document|window|parent)$/.test(w.containment) || (k = e(w.containment)[0], q = e(w.containment).offset(), x = "hidden" !== e(k).css("overflow"), this.containment = [q.left + (parseInt(e(k).css("borderLeftWidth"), 10) || 0) + (parseInt(e(k).css("paddingLeft"), 10) || 0) - this.margins.left, q.top + (parseInt(e(k).css("borderTopWidth"), 10) || 0) + (parseInt(e(k).css("paddingTop"), 10) || 0) - this.margins.top, q.left + (x ? Math.max(k.scrollWidth, k.offsetWidth) : k.offsetWidth) - (parseInt(e(k).css("borderLeftWidth"), 10) || 0) - (parseInt(e(k).css("paddingRight"), 10) || 0) - this.helperProportions.width - this.margins.left, q.top + (x ? Math.max(k.scrollHeight, k.offsetHeight) : k.offsetHeight) - (parseInt(e(k).css("borderTopWidth"), 10) || 0) - (parseInt(e(k).css("paddingBottom"), 10) || 0) - this.helperProportions.height - this.margins.top])
        },
        _convertPositionTo: function (x, A) {
            A || (A = this.position);
            var w = "absolute" === x ? 1 : -1, q = "absolute" !== this.cssPosition || this.scrollParent[0] !== this.document[0] && e.contains(this.scrollParent[0], this.offsetParent[0]) ? this.scrollParent : this.offsetParent, k = /(html|body)/i.test(q[0].tagName);
            return {
                top: A.top + this.offset.relative.top * w + this.offset.parent.top * w - ("fixed" === this.cssPosition ? -this.scrollParent.scrollTop() : k ? 0 : q.scrollTop()) * w,
                left: A.left + this.offset.relative.left * w + this.offset.parent.left * w - ("fixed" === this.cssPosition ? -this.scrollParent.scrollLeft() : k ? 0 : q.scrollLeft()) * w
            }
        },
        _generatePosition: function (C) {
            var D, A, q = this.options, k = C.pageX, w = C.pageY, x = "absolute" !== this.cssPosition || this.scrollParent[0] !== this.document[0] && e.contains(this.scrollParent[0], this.offsetParent[0]) ? this.scrollParent : this.offsetParent, B = /(html|body)/i.test(x[0].tagName);
            return "relative" !== this.cssPosition || this.scrollParent[0] !== this.document[0] && this.scrollParent[0] !== this.offsetParent[0] || (this.offset.relative = this._getRelativeOffset()), this.originalPosition && (this.containment && (C.pageX - this.offset.click.left < this.containment[0] && (k = this.containment[0] + this.offset.click.left), C.pageY - this.offset.click.top < this.containment[1] && (w = this.containment[1] + this.offset.click.top), C.pageX - this.offset.click.left > this.containment[2] && (k = this.containment[2] + this.offset.click.left), C.pageY - this.offset.click.top > this.containment[3] && (w = this.containment[3] + this.offset.click.top)), q.grid && (D = this.originalPageY + Math.round((w - this.originalPageY) / q.grid[1]) * q.grid[1], w = this.containment ? D - this.offset.click.top >= this.containment[1] && D - this.offset.click.top <= this.containment[3] ? D : D - this.offset.click.top >= this.containment[1] ? D - q.grid[1] : D + q.grid[1] : D, A = this.originalPageX + Math.round((k - this.originalPageX) / q.grid[0]) * q.grid[0], k = this.containment ? A - this.offset.click.left >= this.containment[0] && A - this.offset.click.left <= this.containment[2] ? A : A - this.offset.click.left >= this.containment[0] ? A - q.grid[0] : A + q.grid[0] : A)), {
                top: w - this.offset.click.top - this.offset.relative.top - this.offset.parent.top + ("fixed" === this.cssPosition ? -this.scrollParent.scrollTop() : B ? 0 : x.scrollTop()),
                left: k - this.offset.click.left - this.offset.relative.left - this.offset.parent.left + ("fixed" === this.cssPosition ? -this.scrollParent.scrollLeft() : B ? 0 : x.scrollLeft())
            }
        },
        _rearrange: function (x, k, q, A) {
            q ? q[0].appendChild(this.placeholder[0]) : k.item[0].parentNode.insertBefore(this.placeholder[0], "down" === this.direction ? k.item[0] : k.item[0].nextSibling), this.counter = this.counter ? ++this.counter : 1;
            var w = this.counter;
            this._delay(function () {
                w === this.counter && this.refreshPositions(!A)
            })
        },
        _clear: function (x, k) {
            function q(B, C, D) {
                return function (E) {
                    D._trigger(B, E, C._uiHash(C))
                }
            }

            this.reverting = !1;
            var A, w = [];
            if (!this._noFinalSort && this.currentItem.parent().length && this.placeholder.before(this.currentItem), this._noFinalSort = null, this.helper[0] === this.currentItem[0]) {
                for (A in this._storedCSS) {
                    ("auto" === this._storedCSS[A] || "static" === this._storedCSS[A]) && (this._storedCSS[A] = "")
                }
                this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper")
            } else {
                this.currentItem.show()
            }
            for (this.fromOutside && !k && w.push(function (B) {
                this._trigger("receive", B, this._uiHash(this.fromOutside))
            }), !this.fromOutside && this.domPosition.prev === this.currentItem.prev().not(".ui-sortable-helper")[0] && this.domPosition.parent === this.currentItem.parent()[0] || k || w.push(function (B) {
                this._trigger("update", B, this._uiHash())
            }), this !== this.currentContainer && (k || (w.push(function (B) {
                this._trigger("remove", B, this._uiHash())
            }), w.push(function (B) {
                return function (C) {
                    B._trigger("receive", C, this._uiHash(this))
                }
            }.call(this, this.currentContainer)), w.push(function (B) {
                return function (C) {
                    B._trigger("update", C, this._uiHash(this))
                }
            }.call(this, this.currentContainer)))), A = this.containers.length - 1; A >= 0; A--) {
                k || w.push(q("deactivate", this, this.containers[A])), this.containers[A].containerCache.over && (w.push(q("out", this, this.containers[A])), this.containers[A].containerCache.over = 0)
            }
            if (this.storedCursor && (this.document.find("body").css("cursor", this.storedCursor), this.storedStylesheet.remove()), this._storedOpacity && this.helper.css("opacity", this._storedOpacity), this._storedZIndex && this.helper.css("zIndex", "auto" === this._storedZIndex ? "" : this._storedZIndex), this.dragging = !1, k || this._trigger("beforeStop", x, this._uiHash()), this.placeholder[0].parentNode.removeChild(this.placeholder[0]), this.cancelHelperRemoval || (this.helper[0] !== this.currentItem[0] && this.helper.remove(), this.helper = null), !k) {
                for (A = 0; w.length > A; A++) {
                    w[A].call(this, x)
                }
                this._trigger("stop", x, this._uiHash())
            }
            return this.fromOutside = !1, !this.cancelHelperRemoval
        },
        _trigger: function () {
            e.Widget.prototype._trigger.apply(this, arguments) === !1 && this.cancel()
        },
        _uiHash: function (k) {
            var q = k || this;
            return {
                helper: q.helper,
                placeholder: q.placeholder || e([]),
                position: q.position,
                originalPosition: q.originalPosition,
                offset: q.positionAbs,
                item: q.currentItem,
                sender: k ? k.element : null
            }
        }
    }), e.widget("ui.spinner", {
        version: "1.11.4",
        defaultElement: "<input>",
        widgetEventPrefix: "spin",
        options: {
            culture: null,
            icons: {down: "ui-icon-triangle-1-s", up: "ui-icon-triangle-1-n"},
            incremental: !0,
            max: null,
            min: null,
            numberFormat: null,
            page: 10,
            step: 1,
            change: null,
            spin: null,
            start: null,
            stop: null
        },
        _create: function () {
            this._setOption("max", this.options.max), this._setOption("min", this.options.min), this._setOption("step", this.options.step), "" !== this.value() && this._value(this.element.val(), !0), this._draw(), this._on(this._events), this._refresh(), this._on(this.window, {
                beforeunload: function () {
                    this.element.removeAttr("autocomplete")
                }
            })
        },
        _getCreateOptions: function () {
            var k = {}, q = this.element;
            return e.each(["min", "max", "step"], function (x, A) {
                var w = q.attr(A);
                void 0 !== w && w.length && (k[A] = w)
            }), k
        },
        _events: {
            keydown: function (k) {
                this._start(k) && this._keydown(k) && k.preventDefault()
            },
            keyup: "_stop",
            focus: function () {
                this.previous = this.element.val()
            },
            blur: function (k) {
                return this.cancelBlur ? (delete this.cancelBlur, void 0) : (this._stop(), this._refresh(), this.previous !== this.element.val() && this._trigger("change", k), void 0)
            },
            mousewheel: function (k, q) {
                if (q) {
                    if (!this.spinning && !this._start(k)) {
                        return !1
                    }
                    this._spin((q > 0 ? 1 : -1) * this.options.step, k), clearTimeout(this.mousewheelTimer), this.mousewheelTimer = this._delay(function () {
                        this.spinning && this._stop(k)
                    }, 100), k.preventDefault()
                }
            },
            "mousedown .ui-spinner-button": function (k) {
                function q() {
                    var x = this.element[0] === this.document[0].activeElement;
                    x || (this.element.focus(), this.previous = w, this._delay(function () {
                        this.previous = w
                    }))
                }

                var w;
                w = this.element[0] === this.document[0].activeElement ? this.previous : this.element.val(), k.preventDefault(), q.call(this), this.cancelBlur = !0, this._delay(function () {
                    delete this.cancelBlur, q.call(this)
                }), this._start(k) !== !1 && this._repeat(null, e(k.currentTarget).hasClass("ui-spinner-up") ? 1 : -1, k)
            },
            "mouseup .ui-spinner-button": "_stop",
            "mouseenter .ui-spinner-button": function (k) {
                return e(k.currentTarget).hasClass("ui-state-active") ? this._start(k) === !1 ? !1 : (this._repeat(null, e(k.currentTarget).hasClass("ui-spinner-up") ? 1 : -1, k), void 0) : void 0
            },
            "mouseleave .ui-spinner-button": "_stop"
        },
        _draw: function () {
            var k = this.uiSpinner = this.element.addClass("ui-spinner-input").attr("autocomplete", "off").wrap(this._uiSpinnerHtml()).parent().append(this._buttonHtml());
            this.element.attr("role", "spinbutton"), this.buttons = k.find(".ui-spinner-button").attr("tabIndex", -1).button().removeClass("ui-corner-all"), this.buttons.height() > Math.ceil(0.5 * k.height()) && k.height() > 0 && k.height(k.height()), this.options.disabled && this.disable()
        },
        _keydown: function (k) {
            var q = this.options, w = e.ui.keyCode;
            switch (k.keyCode) {
                case w.UP:
                    return this._repeat(null, 1, k), !0;
                case w.DOWN:
                    return this._repeat(null, -1, k), !0;
                case w.PAGE_UP:
                    return this._repeat(null, q.page, k), !0;
                case w.PAGE_DOWN:
                    return this._repeat(null, -q.page, k), !0
            }
            return !1
        },
        _uiSpinnerHtml: function () {
            return "<span class='ui-spinner ui-widget ui-widget-content ui-corner-all'></span>"
        },
        _buttonHtml: function () {
            return "<a class='ui-spinner-button ui-spinner-up ui-corner-tr'><span class='ui-icon " + this.options.icons.up + "'>&#9650;</span></a><a class='ui-spinner-button ui-spinner-down ui-corner-br'><span class='ui-icon " + this.options.icons.down + "'>&#9660;</span></a>"
        },
        _start: function (k) {
            return this.spinning || this._trigger("start", k) !== !1 ? (this.counter || (this.counter = 1), this.spinning = !0, !0) : !1
        },
        _repeat: function (w, k, q) {
            w = w || 500, clearTimeout(this.timer), this.timer = this._delay(function () {
                this._repeat(40, k, q)
            }, w), this._spin(k * this.options.step, q)
        },
        _spin: function (w, k) {
            var q = this.value() || 0;
            this.counter || (this.counter = 1), q = this._adjustValue(q + w * this._increment(this.counter)), this.spinning && this._trigger("spin", k, {value: q}) === !1 || (this._value(q), this.counter++)
        },
        _increment: function (k) {
            var q = this.options.incremental;
            return q ? e.isFunction(q) ? q(k) : Math.floor(k * k * k / 50000 - k * k / 500 + 17 * k / 200 + 1) : 1
        },
        _precision: function () {
            var k = this._precisionOf(this.options.step);
            return null !== this.options.min && (k = Math.max(k, this._precisionOf(this.options.min))), k
        },
        _precisionOf: function (w) {
            var k = "" + w, q = k.indexOf(".");
            return -1 === q ? 0 : k.length - q - 1
        },
        _adjustValue: function (w) {
            var k, q, x = this.options;
            return k = null !== x.min ? x.min : 0, q = w - k, q = Math.round(q / x.step) * x.step, w = k + q, w = parseFloat(w.toFixed(this._precision())), null !== x.max && w > x.max ? x.max : null !== x.min && x.min > w ? x.min : w
        },
        _stop: function (k) {
            this.spinning && (clearTimeout(this.timer), clearTimeout(this.mousewheelTimer), this.counter = 0, this.spinning = !1, this._trigger("stop", k))
        },
        _setOption: function (w, k) {
            if ("culture" === w || "numberFormat" === w) {
                var q = this._parse(this.element.val());
                return this.options[w] = k, this.element.val(this._format(q)), void 0
            }
            ("max" === w || "min" === w || "step" === w) && "string" == typeof k && (k = this._parse(k)), "icons" === w && (this.buttons.first().find(".ui-icon").removeClass(this.options.icons.up).addClass(k.up), this.buttons.last().find(".ui-icon").removeClass(this.options.icons.down).addClass(k.down)), this._super(w, k), "disabled" === w && (this.widget().toggleClass("ui-state-disabled", !!k), this.element.prop("disabled", !!k), this.buttons.button(k ? "disable" : "enable"))
        },
        _setOptions: h(function (k) {
            this._super(k)
        }),
        _parse: function (k) {
            return "string" == typeof k && "" !== k && (k = window.Globalize && this.options.numberFormat ? Globalize.parseFloat(k, 10, this.options.culture) : +k), "" === k || isNaN(k) ? null : k
        },
        _format: function (k) {
            return "" === k ? "" : window.Globalize && this.options.numberFormat ? Globalize.format(k, this.options.numberFormat, this.options.culture) : k
        },
        _refresh: function () {
            this.element.attr({
                "aria-valuemin": this.options.min,
                "aria-valuemax": this.options.max,
                "aria-valuenow": this._parse(this.element.val())
            })
        },
        isValid: function () {
            var k = this.value();
            return null === k ? !1 : k === this._adjustValue(k)
        },
        _value: function (w, k) {
            var q;
            "" !== w && (q = this._parse(w), null !== q && (k || (q = this._adjustValue(q)), w = this._format(q))), this.element.val(w), this._refresh()
        },
        _destroy: function () {
            this.element.removeClass("ui-spinner-input").prop("disabled", !1).removeAttr("autocomplete").removeAttr("role").removeAttr("aria-valuemin").removeAttr("aria-valuemax").removeAttr("aria-valuenow"), this.uiSpinner.replaceWith(this.element)
        },
        stepUp: h(function (k) {
            this._stepUp(k)
        }),
        _stepUp: function (k) {
            this._start() && (this._spin((k || 1) * this.options.step), this._stop())
        },
        stepDown: h(function (k) {
            this._stepDown(k)
        }),
        _stepDown: function (k) {
            this._start() && (this._spin((k || 1) * -this.options.step), this._stop())
        },
        pageUp: h(function (k) {
            this._stepUp((k || 1) * this.options.page)
        }),
        pageDown: h(function (k) {
            this._stepDown((k || 1) * this.options.page)
        }),
        value: function (k) {
            return arguments.length ? (h(this._value).call(this, k), void 0) : this._parse(this.element.val())
        },
        widget: function () {
            return this.uiSpinner
        }
    }), e.widget("ui.tabs", {
        version: "1.11.4",
        delay: 300,
        options: {
            active: null,
            collapsible: !1,
            event: "click",
            heightStyle: "content",
            hide: null,
            show: null,
            activate: null,
            beforeActivate: null,
            beforeLoad: null,
            load: null
        },
        _isLocal: function () {
            var k = /#.*$/;
            return function (A) {
                var q, x;
                A = A.cloneNode(!1), q = A.href.replace(k, ""), x = location.href.replace(k, "");
                try {
                    q = decodeURIComponent(q)
                } catch (w) {
                }
                try {
                    x = decodeURIComponent(x)
                } catch (w) {
                }
                return A.hash.length > 1 && q === x
            }
        }(),
        _create: function () {
            var k = this, q = this.options;
            this.running = !1, this.element.addClass("ui-tabs ui-widget ui-widget-content ui-corner-all").toggleClass("ui-tabs-collapsible", q.collapsible), this._processTabs(), q.active = this._initialActive(), e.isArray(q.disabled) && (q.disabled = e.unique(q.disabled.concat(e.map(this.tabs.filter(".ui-state-disabled"), function (w) {
                return k.tabs.index(w)
            }))).sort()), this.active = this.options.active !== !1 && this.anchors.length ? this._findActive(q.active) : e(), this._refresh(), this.active.length && this.load(q.active)
        },
        _initialActive: function () {
            var k = this.options.active, q = this.options.collapsible, w = location.hash.substring(1);
            return null === k && (w && this.tabs.each(function (A, x) {
                return e(x).attr("aria-controls") === w ? (k = A, !1) : void 0
            }), null === k && (k = this.tabs.index(this.tabs.filter(".ui-tabs-active"))), (null === k || -1 === k) && (k = this.tabs.length ? 0 : !1)), k !== !1 && (k = this.tabs.index(this.tabs.eq(k)), -1 === k && (k = q ? !1 : 0)), !q && k === !1 && this.anchors.length && (k = 0), k
        },
        _getCreateEventData: function () {
            return {
                tab: this.active,
                panel: this.active.length ? this._getPanelForTab(this.active) : e()
            }
        },
        _tabKeydown: function (k) {
            var q = e(this.document[0].activeElement).closest("li"), x = this.tabs.index(q), w = !0;
            if (!this._handlePageNav(k)) {
                switch (k.keyCode) {
                    case e.ui.keyCode.RIGHT:
                    case e.ui.keyCode.DOWN:
                        x++;
                        break;
                    case e.ui.keyCode.UP:
                    case e.ui.keyCode.LEFT:
                        w = !1, x--;
                        break;
                    case e.ui.keyCode.END:
                        x = this.anchors.length - 1;
                        break;
                    case e.ui.keyCode.HOME:
                        x = 0;
                        break;
                    case e.ui.keyCode.SPACE:
                        return k.preventDefault(), clearTimeout(this.activating), this._activate(x), void 0;
                    case e.ui.keyCode.ENTER:
                        return k.preventDefault(), clearTimeout(this.activating), this._activate(x === this.options.active ? !1 : x), void 0;
                    default:
                        return
                }
                k.preventDefault(), clearTimeout(this.activating), x = this._focusNextTab(x, w), k.ctrlKey || k.metaKey || (q.attr("aria-selected", "false"), this.tabs.eq(x).attr("aria-selected", "true"), this.activating = this._delay(function () {
                    this.option("active", x)
                }, this.delay))
            }
        },
        _panelKeydown: function (k) {
            this._handlePageNav(k) || k.ctrlKey && k.keyCode === e.ui.keyCode.UP && (k.preventDefault(), this.active.focus())
        },
        _handlePageNav: function (k) {
            return k.altKey && k.keyCode === e.ui.keyCode.PAGE_UP ? (this._activate(this._focusNextTab(this.options.active - 1, !1)), !0) : k.altKey && k.keyCode === e.ui.keyCode.PAGE_DOWN ? (this._activate(this._focusNextTab(this.options.active + 1, !0)), !0) : void 0
        },
        _findNextTab: function (k, q) {
            function x() {
                return k > w && (k = 0), 0 > k && (k = w), k
            }

            for (var w = this.tabs.length - 1; -1 !== e.inArray(x(), this.options.disabled);) {
                k = q ? k + 1 : k - 1
            }
            return k
        },
        _focusNextTab: function (k, q) {
            return k = this._findNextTab(k, q), this.tabs.eq(k).focus(), k
        },
        _setOption: function (k, q) {
            return "active" === k ? (this._activate(q), void 0) : "disabled" === k ? (this._setupDisabled(q), void 0) : (this._super(k, q), "collapsible" === k && (this.element.toggleClass("ui-tabs-collapsible", q), q || this.options.active !== !1 || this._activate(0)), "event" === k && this._setupEvents(q), "heightStyle" === k && this._setupHeightStyle(q), void 0)
        },
        _sanitizeSelector: function (k) {
            return k ? k.replace(/[!"$%&'()*+,.\/:;<=>?@\[\]\^`{|}~]/g, "\\$&") : ""
        },
        refresh: function () {
            var k = this.options, q = this.tablist.children(":has(a[href])");
            k.disabled = e.map(q.filter(".ui-state-disabled"), function (w) {
                return q.index(w)
            }), this._processTabs(), k.active !== !1 && this.anchors.length ? this.active.length && !e.contains(this.tablist[0], this.active[0]) ? this.tabs.length === k.disabled.length ? (k.active = !1, this.active = e()) : this._activate(this._findNextTab(Math.max(0, k.active - 1), !1)) : k.active = this.tabs.index(this.active) : (k.active = !1, this.active = e()), this._refresh()
        },
        _refresh: function () {
            this._setupDisabled(this.options.disabled), this._setupEvents(this.options.event), this._setupHeightStyle(this.options.heightStyle), this.tabs.not(this.active).attr({
                "aria-selected": "false",
                "aria-expanded": "false",
                tabIndex: -1
            }), this.panels.not(this._getPanelForTab(this.active)).hide().attr({"aria-hidden": "true"}), this.active.length ? (this.active.addClass("ui-tabs-active ui-state-active").attr({
                "aria-selected": "true",
                "aria-expanded": "true",
                tabIndex: 0
            }), this._getPanelForTab(this.active).show().attr({"aria-hidden": "false"})) : this.tabs.eq(0).attr("tabIndex", 0)
        },
        _processTabs: function () {
            var k = this, q = this.tabs, x = this.anchors, w = this.panels;
            this.tablist = this._getList().addClass("ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all").attr("role", "tablist").delegate("> li", "mousedown" + this.eventNamespace, function (A) {
                e(this).is(".ui-state-disabled") && A.preventDefault()
            }).delegate(".ui-tabs-anchor", "focus" + this.eventNamespace, function () {
                e(this).closest("li").is(".ui-state-disabled") && this.blur()
            }), this.tabs = this.tablist.find("> li:has(a[href])").addClass("ui-state-default ui-corner-top").attr({
                role: "tab",
                tabIndex: -1
            }), this.anchors = this.tabs.map(function () {
                return e("a", this)[0]
            }).addClass("ui-tabs-anchor").attr({
                role: "presentation",
                tabIndex: -1
            }), this.panels = e(), this.anchors.each(function (D, G) {
                var H, E, B, C = e(G).uniqueId().attr("id"), A = e(G).closest("li"), F = A.attr("aria-controls");
                k._isLocal(G) ? (H = G.hash, B = H.substring(1), E = k.element.find(k._sanitizeSelector(H))) : (B = A.attr("aria-controls") || e({}).uniqueId()[0].id, H = "#" + B, E = k.element.find(H), E.length || (E = k._createPanel(B), E.insertAfter(k.panels[D - 1] || k.tablist)), E.attr("aria-live", "polite")), E.length && (k.panels = k.panels.add(E)), F && A.data("ui-tabs-aria-controls", F), A.attr({
                    "aria-controls": B,
                    "aria-labelledby": C
                }), E.attr("aria-labelledby", C)
            }), this.panels.addClass("ui-tabs-panel ui-widget-content ui-corner-bottom").attr("role", "tabpanel"), q && (this._off(q.not(this.tabs)), this._off(x.not(this.anchors)), this._off(w.not(this.panels)))
        },
        _getList: function () {
            return this.tablist || this.element.find("ol,ul").eq(0)
        },
        _createPanel: function (k) {
            return e("<div>").attr("id", k).addClass("ui-tabs-panel ui-widget-content ui-corner-bottom").data("ui-tabs-destroy", !0)
        },
        _setupDisabled: function (k) {
            e.isArray(k) && (k.length ? k.length === this.anchors.length && (k = !0) : k = !1);
            for (var q, w = 0; q = this.tabs[w]; w++) {
                k === !0 || -1 !== e.inArray(w, k) ? e(q).addClass("ui-state-disabled").attr("aria-disabled", "true") : e(q).removeClass("ui-state-disabled").removeAttr("aria-disabled")
            }
            this.options.disabled = k
        },
        _setupEvents: function (k) {
            var q = {};
            k && e.each(k.split(" "), function (w, x) {
                q[x] = "_eventHandler"
            }), this._off(this.anchors.add(this.tabs).add(this.panels)), this._on(!0, this.anchors, {
                click: function (w) {
                    w.preventDefault()
                }
            }), this._on(this.anchors, q), this._on(this.tabs, {keydown: "_tabKeydown"}), this._on(this.panels, {keydown: "_panelKeydown"}), this._focusable(this.tabs), this._hoverable(this.tabs)
        },
        _setupHeightStyle: function (k) {
            var q, w = this.element.parent();
            "fill" === k ? (q = w.height(), q -= this.element.outerHeight() - this.element.height(), this.element.siblings(":visible").each(function () {
                var A = e(this), x = A.css("position");
                "absolute" !== x && "fixed" !== x && (q -= A.outerHeight(!0))
            }), this.element.children().not(this.panels).each(function () {
                q -= e(this).outerHeight(!0)
            }), this.panels.each(function () {
                e(this).height(Math.max(0, q - e(this).innerHeight() + e(this).height()))
            }).css("overflow", "auto")) : "auto" === k && (q = 0, this.panels.each(function () {
                q = Math.max(q, e(this).height("").height())
            }).height(q))
        },
        _eventHandler: function (F) {
            var x = this.options, D = this.active, B = e(F.currentTarget), q = B.closest("li"), C = q[0] === D[0], E = C && x.collapsible, w = E ? e() : this._getPanelForTab(q), A = D.length ? this._getPanelForTab(D) : e(), k = {
                oldTab: D,
                oldPanel: A,
                newTab: E ? e() : q,
                newPanel: w
            };
            F.preventDefault(), q.hasClass("ui-state-disabled") || q.hasClass("ui-tabs-loading") || this.running || C && !x.collapsible || this._trigger("beforeActivate", F, k) === !1 || (x.active = E ? !1 : this.tabs.index(q), this.active = C ? e() : q, this.xhr && this.xhr.abort(), A.length || w.length || e.error("jQuery UI Tabs: Mismatching fragment identifier."), w.length && this.load(this.tabs.index(q), F), this._toggle(F, k))
        },
        _toggle: function (B, C) {
            function A() {
                k.running = !1, k._trigger("activate", B, C)
            }

            function q() {
                C.newTab.closest("li").addClass("ui-tabs-active ui-state-active"), w.length && k.options.show ? k._show(w, k.options.show, A) : (w.show(), A())
            }

            var k = this, w = C.newPanel, x = C.oldPanel;
            this.running = !0, x.length && this.options.hide ? this._hide(x, this.options.hide, function () {
                C.oldTab.closest("li").removeClass("ui-tabs-active ui-state-active"), q()
            }) : (C.oldTab.closest("li").removeClass("ui-tabs-active ui-state-active"), x.hide(), q()), x.attr("aria-hidden", "true"), C.oldTab.attr({
                "aria-selected": "false",
                "aria-expanded": "false"
            }), w.length && x.length ? C.oldTab.attr("tabIndex", -1) : w.length && this.tabs.filter(function () {
                return 0 === e(this).attr("tabIndex")
            }).attr("tabIndex", -1), w.attr("aria-hidden", "false"), C.newTab.attr({
                "aria-selected": "true",
                "aria-expanded": "true",
                tabIndex: 0
            })
        },
        _activate: function (k) {
            var q, w = this._findActive(k);
            w[0] !== this.active[0] && (w.length || (w = this.active), q = w.find(".ui-tabs-anchor")[0], this._eventHandler({
                target: q,
                currentTarget: q,
                preventDefault: e.noop
            }))
        },
        _findActive: function (k) {
            return k === !1 ? e() : this.tabs.eq(k)
        },
        _getIndex: function (k) {
            return "string" == typeof k && (k = this.anchors.index(this.anchors.filter("[href$='" + k + "']"))), k
        },
        _destroy: function () {
            this.xhr && this.xhr.abort(), this.element.removeClass("ui-tabs ui-widget ui-widget-content ui-corner-all ui-tabs-collapsible"), this.tablist.removeClass("ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all").removeAttr("role"), this.anchors.removeClass("ui-tabs-anchor").removeAttr("role").removeAttr("tabIndex").removeUniqueId(), this.tablist.unbind(this.eventNamespace), this.tabs.add(this.panels).each(function () {
                e.data(this, "ui-tabs-destroy") ? e(this).remove() : e(this).removeClass("ui-state-default ui-state-active ui-state-disabled ui-corner-top ui-corner-bottom ui-widget-content ui-tabs-active ui-tabs-panel").removeAttr("tabIndex").removeAttr("aria-live").removeAttr("aria-busy").removeAttr("aria-selected").removeAttr("aria-labelledby").removeAttr("aria-hidden").removeAttr("aria-expanded").removeAttr("role")
            }), this.tabs.each(function () {
                var k = e(this), q = k.data("ui-tabs-aria-controls");
                q ? k.attr("aria-controls", q).removeData("ui-tabs-aria-controls") : k.removeAttr("aria-controls")
            }), this.panels.show(), "content" !== this.options.heightStyle && this.panels.css("height", "")
        },
        enable: function (k) {
            var q = this.options.disabled;
            q !== !1 && (void 0 === k ? q = !1 : (k = this._getIndex(k), q = e.isArray(q) ? e.map(q, function (w) {
                return w !== k ? w : null
            }) : e.map(this.tabs, function (w, x) {
                return x !== k ? x : null
            })), this._setupDisabled(q))
        },
        disable: function (k) {
            var q = this.options.disabled;
            if (q !== !0) {
                if (void 0 === k) {
                    q = !0
                } else {
                    if (k = this._getIndex(k), -1 !== e.inArray(k, q)) {
                        return
                    }
                    q = e.isArray(q) ? e.merge([k], q).sort() : [k]
                }
                this._setupDisabled(q)
            }
        },
        load: function (C, D) {
            C = this._getIndex(C);
            var A = this, q = this.tabs.eq(C), k = q.find(".ui-tabs-anchor"), w = this._getPanelForTab(q), x = {
                tab: q,
                panel: w
            }, B = function (F, E) {
                "abort" === E && A.panels.stop(!1, !0), q.removeClass("ui-tabs-loading"), w.removeAttr("aria-busy"), F === A.xhr && delete A.xhr
            };
            this._isLocal(k[0]) || (this.xhr = e.ajax(this._ajaxSettings(k, D, x)), this.xhr && "canceled" !== this.xhr.statusText && (q.addClass("ui-tabs-loading"), w.attr("aria-busy", "true"), this.xhr.done(function (F, E, G) {
                setTimeout(function () {
                    w.html(F), A._trigger("load", D, x), B(G, E)
                }, 1)
            }).fail(function (F, E) {
                setTimeout(function () {
                    B(F, E)
                }, 1)
            })))
        },
        _ajaxSettings: function (k, q, x) {
            var w = this;
            return {
                url: k.attr("href"), beforeSend: function (A, B) {
                    return w._trigger("beforeLoad", q, e.extend({
                        jqXHR: A,
                        ajaxSettings: B
                    }, x))
                }
            }
        },
        _getPanelForTab: function (k) {
            var q = e(k).attr("aria-controls");
            return this.element.find(this._sanitizeSelector("#" + q))
        }
    }), e.widget("ui.tooltip", {
        version: "1.11.4",
        options: {
            content: function () {
                var k = e(this).attr("title") || "";
                return e("<a>").text(k).html()
            },
            hide: !0,
            items: "[title]:not([disabled])",
            position: {
                my: "left top+15",
                at: "left bottom",
                collision: "flipfit flip"
            },
            show: !0,
            tooltipClass: null,
            track: !1,
            close: null,
            open: null
        },
        _addDescribedBy: function (k, q) {
            var w = (k.attr("aria-describedby") || "").split(/\s+/);
            w.push(q), k.data("ui-tooltip-id", q).attr("aria-describedby", e.trim(w.join(" ")))
        },
        _removeDescribedBy: function (k) {
            var q = k.data("ui-tooltip-id"), x = (k.attr("aria-describedby") || "").split(/\s+/), w = e.inArray(q, x);
            -1 !== w && x.splice(w, 1), k.removeData("ui-tooltip-id"), x = e.trim(x.join(" ")), x ? k.attr("aria-describedby", x) : k.removeAttr("aria-describedby")
        },
        _create: function () {
            this._on({
                mouseover: "open",
                focusin: "open"
            }), this.tooltips = {}, this.parents = {}, this.options.disabled && this._disable(), this.liveRegion = e("<div>").attr({
                role: "log",
                "aria-live": "assertive",
                "aria-relevant": "additions"
            }).addClass("ui-helper-hidden-accessible").appendTo(this.document[0].body)
        },
        _setOption: function (k, q) {
            var w = this;
            return "disabled" === k ? (this[q ? "_disable" : "_enable"](), this.options[k] = q, void 0) : (this._super(k, q), "content" === k && e.each(this.tooltips, function (x, A) {
                w._updateContent(A.element)
            }), void 0)
        },
        _disable: function () {
            var k = this;
            e.each(this.tooltips, function (q, x) {
                var w = e.Event("blur");
                w.target = w.currentTarget = x.element[0], k.close(w, !0)
            }), this.element.find(this.options.items).addBack().each(function () {
                var q = e(this);
                q.is("[title]") && q.data("ui-tooltip-title", q.attr("title")).removeAttr("title")
            })
        },
        _enable: function () {
            this.element.find(this.options.items).addBack().each(function () {
                var k = e(this);
                k.data("ui-tooltip-title") && k.attr("title", k.data("ui-tooltip-title"))
            })
        },
        open: function (k) {
            var q = this, w = e(k ? k.target : this.element).closest(this.options.items);
            w.length && !w.data("ui-tooltip-id") && (w.attr("title") && w.data("ui-tooltip-title", w.attr("title")), w.data("ui-tooltip-open", !0), k && "mouseover" === k.type && w.parents().each(function () {
                var A, x = e(this);
                x.data("ui-tooltip-open") && (A = e.Event("blur"), A.target = A.currentTarget = this, q.close(A, !0)), x.attr("title") && (x.uniqueId(), q.parents[this.id] = {
                    element: this,
                    title: x.attr("title")
                }, x.attr("title", ""))
            }), this._registerCloseHandlers(k, w), this._updateContent(w, k))
        },
        _updateContent: function (w, A) {
            var B, x = this.options.content, q = this, k = A ? A.type : null;
            return "string" == typeof x ? this._open(A, w, x) : (B = x.call(w[0], function (C) {
                q._delay(function () {
                    w.data("ui-tooltip-open") && (A && (A.type = k), this._open(A, w, C))
                })
            }), B && this._open(A, w, B), void 0)
        },
        _open: function (k, x, E) {
            function B(F) {
                A.of = F, C.is(":hidden") || C.position(A)
            }

            var q, C, D, w, A = e.extend({}, this.options.position);
            if (E) {
                if (q = this._find(x)) {
                    return q.tooltip.find(".ui-tooltip-content").html(E), void 0
                }
                x.is("[title]") && (k && "mouseover" === k.type ? x.attr("title", "") : x.removeAttr("title")), q = this._tooltip(x), C = q.tooltip, this._addDescribedBy(x, C.attr("id")), C.find(".ui-tooltip-content").html(E), this.liveRegion.children().hide(), E.clone ? (w = E.clone(), w.removeAttr("id").find("[id]").removeAttr("id")) : w = E, e("<div>").html(w).appendTo(this.liveRegion), this.options.track && k && /^mouse/.test(k.type) ? (this._on(this.document, {mousemove: B}), B(k)) : C.position(e.extend({of: x}, this.options.position)), C.hide(), this._show(C, this.options.show), this.options.show && this.options.show.delay && (D = this.delayedShow = setInterval(function () {
                    C.is(":visible") && (B(A.of), clearInterval(D))
                }, e.fx.interval)), this._trigger("open", k, {tooltip: C})
            }
        },
        _registerCloseHandlers: function (k, q) {
            var w = {
                keyup: function (A) {
                    if (A.keyCode === e.ui.keyCode.ESCAPE) {
                        var x = e.Event(A);
                        x.currentTarget = q[0], this.close(x, !0)
                    }
                }
            };
            q[0] !== this.element[0] && (w.remove = function () {
                this._removeTooltip(this._find(q).tooltip)
            }), k && "mouseover" !== k.type || (w.mouseleave = "close"), k && "focusin" !== k.type || (w.focusout = "close"), this._on(!0, q, w)
        },
        close: function (x) {
            var A, w = this, q = e(x ? x.currentTarget : this.element), k = this._find(q);
            return k ? (A = k.tooltip, k.closing || (clearInterval(this.delayedShow), q.data("ui-tooltip-title") && !q.attr("title") && q.attr("title", q.data("ui-tooltip-title")), this._removeDescribedBy(q), k.hiding = !0, A.stop(!0), this._hide(A, this.options.hide, function () {
                w._removeTooltip(e(this))
            }), q.removeData("ui-tooltip-open"), this._off(q, "mouseleave focusout keyup"), q[0] !== this.element[0] && this._off(q, "remove"), this._off(this.document, "mousemove"), x && "mouseleave" === x.type && e.each(this.parents, function (C, B) {
                e(B.element).attr("title", B.title), delete w.parents[C]
            }), k.closing = !0, this._trigger("close", x, {tooltip: A}), k.hiding || (k.closing = !1)), void 0) : (q.removeData("ui-tooltip-open"), void 0)
        },
        _tooltip: function (k) {
            var q = e("<div>").attr("role", "tooltip").addClass("ui-tooltip ui-widget ui-corner-all ui-widget-content " + (this.options.tooltipClass || "")), w = q.uniqueId().attr("id");
            return e("<div>").addClass("ui-tooltip-content").appendTo(q), q.appendTo(this.document[0].body), this.tooltips[w] = {
                element: k,
                tooltip: q
            }
        },
        _find: function (k) {
            var q = k.data("ui-tooltip-id");
            return q ? this.tooltips[q] : null
        },
        _removeTooltip: function (k) {
            k.remove(), delete this.tooltips[k.attr("id")]
        },
        _destroy: function () {
            var k = this;
            e.each(this.tooltips, function (A, x) {
                var w = e.Event("blur"), q = x.element;
                w.target = w.currentTarget = q[0], k.close(w, !0), e("#" + A).remove(), q.data("ui-tooltip-title") && (q.attr("title") || q.attr("title", q.data("ui-tooltip-title")), q.removeData("ui-tooltip-title"))
            }), this.liveRegion.remove()
        }
    })
});
/*
 AnythingSlider v1.8.6
 Original by Chris Coyier: http://css-tricks.com
 Get the latest version: https://github.com/ProLoser/AnythingSlider

 To use the navigationFormatter function, you must have a function that
 accepts two paramaters, and returns a string of HTML text.

 index = integer index (1 based);
 panel = jQuery wrapped LI item this tab references
 @return = Must return a string of HTML/Text

 navigationFormatter: function(index, panel){
 return "Panel #" + index; // This would have each tab with the text 'Panel #X' where X = index
 }
 */
(function (b) {
    b.anythingSlider = function (k, a) {
        var h = this, g, l;
        h.el = k;
        h.$el = b(k).addClass("anythingBase").wrap('<div class="anythingSlider"><div class="anythingWindow" /></div>');
        h.$el.data("AnythingSlider", h);
        h.init = function () {
            h.options = g = b.extend({}, b.anythingSlider.defaults, a);
            h.initialized = false;
            if (b.isFunction(g.onBeforeInitialize)) {
                h.$el.bind("before_initialize", g.onBeforeInitialize)
            }
            h.$el.trigger("before_initialize", h);
            b('<!--[if lte IE 8]><script>jQuery("body").addClass("as-oldie");<\/script><![endif]-->').appendTo("body").remove();
            h.$wrapper = h.$el.parent().closest("div.anythingSlider").addClass("anythingSlider-" + g.theme);
            h.$window = h.$el.closest("div.anythingWindow");
            h.win = window;
            h.$win = b(h.win);
            h.$controls = b('<div class="anythingControls"></div>');
            h.$nav = b('<ul class="thumbNav"><li><a><span></span></a></li></ul>');
            h.$startStop = b('<a href="#" class="start-stop"></a>');
            if (g.buildStartStop || g.buildNavigation) {
                h.$controls.appendTo((g.appendControlsTo && b(g.appendControlsTo).length) ? b(g.appendControlsTo) : h.$wrapper)
            }
            if (g.buildNavigation) {
                h.$nav.appendTo((g.appendNavigationTo && b(g.appendNavigationTo).length) ? b(g.appendNavigationTo) : h.$controls)
            }
            if (g.buildStartStop) {
                h.$startStop.appendTo((g.appendStartStopTo && b(g.appendStartStopTo).length) ? b(g.appendStartStopTo) : h.$controls)
            }
            h.runTimes = b(".anythingBase").length;
            h.regex = new RegExp("panel" + h.runTimes + "-(\\d+)", "i");
            if (h.runTimes === 1) {
                h.makeActive()
            }
            h.flag = false;
            h.playing = g.autoPlay;
            h.slideshow = false;
            h.hovered = false;
            h.panelSize = [];
            h.currentPage = h.targetPage = g.startPanel = parseInt(g.startPanel, 10) || 1;
            g.changeBy = parseInt(g.changeBy, 10) || 1;
            l = (g.mode || "h").toLowerCase().match(/(h|v|f)/);
            l = g.vertical ? "v" : (l || ["h"])[0];
            g.mode = l === "v" ? "vertical" : l === "f" ? "fade" : "horizontal";
            if (l === "f") {
                g.showMultiple = 1;
                g.infiniteSlides = false
            }
            h.adj = (g.infiniteSlides) ? 0 : 1;
            h.adjustMultiple = 0;
            h.width = h.$el.width();
            h.height = h.$el.height();
            h.outerPad = [h.$wrapper.innerWidth() - h.$wrapper.width(), h.$wrapper.innerHeight() - h.$wrapper.height()];
            if (g.playRtl) {
                h.$wrapper.addClass("rtl")
            }
            if (g.expand) {
                h.$outer = h.$wrapper.parent();
                h.$window.css({width: "100%", height: "100%"});
                h.checkResize()
            }
            if (g.buildStartStop) {
                h.buildAutoPlay()
            }
            if (g.buildArrows) {
                h.buildNextBackButtons()
            }
            if (!g.autoPlay) {
                g.autoPlayLocked = false
            }
            h.$lastPage = h.$targetPage = h.$currentPage;
            h.updateSlider();
            if (!b.isFunction(b.easing[g.easing])) {
                g.easing = "swing"
            }
            if (g.pauseOnHover) {
                h.$wrapper.hover(function () {
                    if (h.playing) {
                        h.$el.trigger("slideshow_paused", h);
                        h.clearTimer(true)
                    }
                }, function () {
                    if (h.playing) {
                        h.$el.trigger("slideshow_unpaused", h);
                        h.startStop(h.playing, true)
                    }
                })
            }
            h.slideControls(false);
            h.$wrapper.bind("mouseenter mouseleave", function (d) {
                b(this)[d.type === "mouseenter" ? "addClass" : "removeClass"]("anythingSlider-hovered");
                h.hovered = (d.type === "mouseenter") ? true : false;
                h.slideControls(h.hovered)
            });
            b(document).keyup(function (d) {
                if (g.enableKeyboard && h.$wrapper.hasClass("activeSlider") && !d.target.tagName.match("TEXTAREA|INPUT|SELECT")) {
                    if (g.mode !== "vertical" && (d.which === 38 || d.which === 40)) {
                        return
                    }
                    switch (d.which) {
                        case 39:
                        case 40:
                            h.goForward();
                            break;
                        case 37:
                        case 38:
                            h.goBack();
                            break
                    }
                }
            });
            h.currentPage = h.gotoHash() || g.startPanel || 1;
            h.gotoPage(h.currentPage, false, null, -1);
            var c = "slideshow_paused slideshow_unpaused slide_init slide_begin slideshow_stop slideshow_start initialized swf_completed".split(" ");
            b.each("onShowPause onShowUnpause onSlideInit onSlideBegin onShowStop onShowStart onInitialized onSWFComplete".split(" "), function (e, d) {
                if (b.isFunction(g[d])) {
                    h.$el.bind(c[e], g[d])
                }
            });
            if (b.isFunction(g.onSlideComplete)) {
                h.$el.bind("slide_complete", function () {
                    setTimeout(function () {
                        g.onSlideComplete(h)
                    }, 0);
                    return false
                })
            }
            h.initialized = true;
            h.$el.trigger("initialized", h);
            h.startStop(g.autoPlay)
        };
        h.updateSlider = function () {
            h.$el.children(".cloned").remove();
            h.navTextVisible = h.$nav.find("span:first").css("visibility") !== "hidden";
            h.$nav.empty();
            h.currentPage = h.currentPage || 1;
            h.$items = h.$el.children();
            h.pages = h.$items.length;
            h.dir = (g.mode === "vertical") ? "top" : "left";
            g.showMultiple = (g.mode === "vertical") ? 1 : parseInt(g.showMultiple, 10) || 1;
            g.navigationSize = (g.navigationSize === false) ? 0 : parseInt(g.navigationSize, 10) || 0;
            h.$items.find("a").unbind("focus.AnythingSlider").bind("focus.AnythingSlider", function (d) {
                var f = b(this).closest(".panel"), e = h.$items.index(f) + h.adj;
                h.$items.find(".focusedLink").removeClass("focusedLink");
                b(this).addClass("focusedLink");
                h.$window.scrollLeft(0).scrollTop(0);
                if ((e !== -1 && (e >= h.currentPage + g.showMultiple || e < h.currentPage))) {
                    h.gotoPage(e);
                    d.preventDefault()
                }
            });
            if (g.showMultiple > 1) {
                if (g.showMultiple > h.pages) {
                    g.showMultiple = h.pages
                }
                h.adjustMultiple = (g.infiniteSlides && h.pages > 1) ? 0 : g.showMultiple - 1
            }
            h.$controls.add(h.$nav).add(h.$startStop).add(h.$forward).add(h.$back)[(h.pages <= 1) ? "hide" : "show"]();
            if (h.pages > 1) {
                h.buildNavigation()
            }
            if (g.mode !== "fade" && g.infiniteSlides && h.pages > 1) {
                h.$el.prepend(h.$items.filter(":last").clone().addClass("cloned"));
                if (g.showMultiple > 1) {
                    h.$el.append(h.$items.filter(":lt(" + g.showMultiple + ")").clone().addClass("cloned multiple"))
                } else {
                    h.$el.append(h.$items.filter(":first").clone().addClass("cloned"))
                }
                h.$el.find(".cloned").each(function () {
                    b(this).find("a,input,textarea,select,button,area,form").attr({
                        disabled: "disabled",
                        name: ""
                    });
                    b(this).find("[id]").andSelf().removeAttr("id")
                })
            }
            h.$items = h.$el.addClass(g.mode).children().addClass("panel");
            h.setDimensions();
            if (g.resizeContents) {
                h.$items.css("width", h.width);
                h.$wrapper.css("width", h.getDim(h.currentPage)[0]).add(h.$items).css("height", h.height)
            } else {
                h.$win.load(function () {
                    h.setDimensions();
                    c = h.getDim(h.currentPage);
                    h.$wrapper.css({width: c[0], height: c[1]});
                    h.setCurrentPage(h.currentPage, false)
                })
            }
            if (h.currentPage > h.pages) {
                h.currentPage = h.pages
            }
            h.setCurrentPage(h.currentPage, false);
            h.$nav.find("a").eq(h.currentPage - 1).addClass("cur");
            if (g.mode === "fade") {
                var c = h.$items.eq(h.currentPage - 1);
                if (g.resumeOnVisible) {
                    c.css({opacity: 1}).siblings().css({opacity: 0})
                } else {
                    h.$items.css("opacity", 1);
                    c.fadeIn(0).siblings().fadeOut(0)
                }
            }
        };
        h.buildNavigation = function () {
            if (g.buildNavigation && (h.pages > 1)) {
                var n, c, e, f, d;
                h.$items.filter(":not(.cloned)").each(function (m) {
                    d = b("<li/>");
                    e = m + 1;
                    c = (e === 1 ? " first" : "") + (e === h.pages ? " last" : "");
                    n = '<a class="panel' + e + (h.navTextVisible ? '"' : " " + g.tooltipClass + '" title="@"') + ' href="#"><span>@</span></a>';
                    if (b.isFunction(g.navigationFormatter)) {
                        f = g.navigationFormatter(e, b(this));
                        if (typeof(f) === "string") {
                            d.html(n.replace(/@/g, f))
                        } else {
                            d = b("<li/>", f)
                        }
                    } else {
                        d.html(n.replace(/@/g, e))
                    }
                    d.appendTo(h.$nav).addClass(c).data("index", e)
                });
                h.$nav.children("li").bind(g.clickControls, function (m) {
                    if (!h.flag && g.enableNavigation) {
                        h.flag = true;
                        setTimeout(function () {
                            h.flag = false
                        }, 100);
                        h.gotoPage(b(this).data("index"))
                    }
                    m.preventDefault()
                });
                if (!!g.navigationSize && g.navigationSize < h.pages) {
                    if (!h.$controls.find(".anythingNavWindow").length) {
                        h.$nav.before('<ul><li class="prev"><a href="#"><span>' + g.backText + "</span></a></li></ul>").after('<ul><li class="next"><a href="#"><span>' + g.forwardText + "</span></a></li></ul>").wrap('<div class="anythingNavWindow"></div>')
                    }
                    h.navWidths = h.$nav.find("li").map(function () {
                        return b(this).outerWidth(true) + Math.ceil(parseInt(b(this).find("span").css("left"), 10) / 2 || 0)
                    }).get();
                    h.navLeft = h.currentPage;
                    h.$nav.width(h.navWidth(1, h.pages + 1) + 25);
                    h.$controls.find(".anythingNavWindow").width(h.navWidth(1, g.navigationSize + 1)).end().find(".prev,.next").bind(g.clickControls, function (m) {
                        if (!h.flag) {
                            h.flag = true;
                            setTimeout(function () {
                                h.flag = false
                            }, 200);
                            h.navWindow(h.navLeft + g.navigationSize * (b(this).is(".prev") ? -1 : 1))
                        }
                        m.preventDefault()
                    })
                }
            }
        };
        h.navWidth = function (o, p) {
            var e, d = Math.min(o, p), c = Math.max(o, p), f = 0;
            for (e = d; e < c; e++) {
                f += h.navWidths[e - 1] || 0
            }
            return f
        };
        h.navWindow = function (c) {
            if (!!g.navigationSize && g.navigationSize < h.pages && h.navWidths) {
                var d = h.pages - g.navigationSize + 1;
                c = (c <= 1) ? 1 : (c > 1 && c < d) ? c : d;
                if (c !== h.navLeft) {
                    h.$controls.find(".anythingNavWindow").animate({
                        scrollLeft: h.navWidth(1, c),
                        width: h.navWidth(c, c + g.navigationSize)
                    }, {queue: false, duration: g.animationTime});
                    h.navLeft = c
                }
            }
        };
        h.buildNextBackButtons = function () {
            h.$forward = b('<span class="arrow forward"><a href="#"><span>' + g.forwardText + "</span></a></span>");
            h.$back = b('<span class="arrow back"><a href="#"><span>' + g.backText + "</span></a></span>");
            h.$back.bind(g.clickBackArrow, function (c) {
                if (g.enableArrows && !h.flag) {
                    h.flag = true;
                    setTimeout(function () {
                        h.flag = false
                    }, 100);
                    h.goBack()
                }
                c.preventDefault()
            });
            h.$forward.bind(g.clickForwardArrow, function (c) {
                if (g.enableArrows && !h.flag) {
                    h.flag = true;
                    setTimeout(function () {
                        h.flag = false
                    }, 100);
                    h.goForward()
                }
                c.preventDefault()
            });
            h.$back.add(h.$forward).find("a").bind("focusin focusout", function () {
                b(this).toggleClass("hover")
            });
            h.$back.appendTo((g.appendBackTo && b(g.appendBackTo).length) ? b(g.appendBackTo) : h.$wrapper);
            h.$forward.appendTo((g.appendForwardTo && b(g.appendForwardTo).length) ? b(g.appendForwardTo) : h.$wrapper);
            h.arrowWidth = h.$forward.width();
            h.arrowRight = parseInt(h.$forward.css("right"), 10);
            h.arrowLeft = parseInt(h.$back.css("left"), 10)
        };
        h.buildAutoPlay = function () {
            h.$startStop.html("<span>" + (h.playing ? g.stopText : g.startText) + "</span>").bind(g.clickSlideshow, function (c) {
                if (g.enableStartStop) {
                    h.startStop(!h.playing);
                    h.makeActive();
                    if (h.playing && !g.autoPlayDelayed) {
                        h.goForward(true)
                    }
                }
                c.preventDefault()
            }).bind("focusin focusout", function () {
                b(this).toggleClass("hover")
            })
        };
        h.checkResize = function (c) {
            clearTimeout(h.resizeTimer);
            h.resizeTimer = setTimeout(function () {
                var e = h.$outer.width() - h.outerPad[0], d = (h.$outer[0].tagName === "BODY" ? h.$win.height() : h.$outer.height()) - h.outerPad[1];
                if (h.width * g.showMultiple !== e || h.height !== d) {
                    h.setDimensions();
                    h.gotoPage(h.currentPage, h.playing, null, -1)
                }
                if (typeof(c) === "undefined") {
                    h.checkResize()
                }
            }, 500)
        };
        h.setDimensions = function () {
            var f, u, r, d, s = 0, e = {
                width: "100%",
                height: "100%"
            }, v = (g.showMultiple > 1) ? h.width || h.$window.width() / g.showMultiple : h.$window.width(), c = h.$win.width();
            if (g.expand) {
                f = h.$outer.width() - h.outerPad[0];
                h.height = u = h.$outer.height() - h.outerPad[1];
                h.$wrapper.add(h.$window).add(h.$items).css({
                    width: f,
                    height: u
                });
                h.width = v = (g.showMultiple > 1) ? f / g.showMultiple : f
            }
            h.$items.each(function (m) {
                d = b(this);
                r = d.children();
                if (g.resizeContents) {
                    f = h.width;
                    u = h.height;
                    d.css({width: f, height: u});
                    if (r.length) {
                        if (r[0].tagName === "EMBED") {
                            r.attr(e)
                        }
                        if (r[0].tagName === "OBJECT") {
                            r.find("embed").attr(e)
                        }
                        if (r.length === 1) {
                            r.css(e)
                        }
                    }
                } else {
                    f = d.width() || h.width;
                    if (r.length === 1 && f >= c) {
                        f = (r.width() >= c) ? v : r.width();
                        r.css("max-width", f)
                    }
                    d.css("width", f);
                    u = (r.length === 1 ? r.outerHeight(true) : d.height());
                    if (u <= h.outerPad[1]) {
                        u = h.height
                    }
                    d.css("height", u)
                }
                h.panelSize[m] = [f, u, s];
                s += (g.mode === "vertical") ? u : f
            });
            h.$el.css((g.mode === "vertical" ? "height" : "width"), g.mode === "fade" ? h.width : s)
        };
        h.getDim = function (c) {
            var e, f = h.width, d = h.height;
            if (h.pages < 1 || isNaN(c)) {
                return [f, d]
            }
            c = (g.infiniteSlides && h.pages > 1) ? c : c - 1;
            e = h.panelSize[c];
            if (e) {
                f = e[0] || f;
                d = e[1] || d
            }
            if (g.showMultiple > 1) {
                for (e = 1; e < g.showMultiple; e++) {
                    f += h.panelSize[(c + e)][0];
                    d = Math.max(d, h.panelSize[c + e][1])
                }
            }
            return [f, d]
        };
        h.goForward = function (c) {
            h.gotoPage(h[g.allowRapidChange ? "targetPage" : "currentPage"] + g.changeBy * (g.playRtl ? -1 : 1), c)
        };
        h.goBack = function (c) {
            h.gotoPage(h[g.allowRapidChange ? "targetPage" : "currentPage"] + g.changeBy * (g.playRtl ? 1 : -1), c)
        };
        h.gotoPage = function (e, f, c, d) {
            if (f !== true) {
                f = false;
                h.startStop(false);
                h.makeActive()
            }
            if (/^[#|.]/.test(e) && b(e).length) {
                e = b(e).closest(".panel").index() + h.adj
            }
            if (g.changeBy !== 1) {
                var n = h.pages - h.adjustMultiple;
                if (e < 1) {
                    e = g.stopAtEnd ? 1 : (g.infiniteSlides ? h.pages + e : (g.showMultiple > 1 - e ? 1 : n))
                }
                if (e > h.pages) {
                    e = g.stopAtEnd ? h.pages : (g.showMultiple > 1 - e ? 1 : e -= n)
                } else {
                    if (e >= n) {
                        e = n
                    }
                }
            }
            if (h.pages <= 1) {
                return
            }
            h.$lastPage = h.$currentPage;
            if (typeof(e) !== "number") {
                e = parseInt(e, 10) || g.startPanel;
                h.setCurrentPage(e)
            }
            if (f && g.isVideoPlaying(h)) {
                return
            }
            h.exactPage = e;
            if (e > h.pages + 1 - h.adj) {
                e = (!g.infiniteSlides && !g.stopAtEnd) ? 1 : h.pages
            }
            if (e < h.adj) {
                e = (!g.infiniteSlides && !g.stopAtEnd) ? h.pages : 1
            }
            if (!g.infiniteSlides) {
                h.exactPage = e
            }
            h.currentPage = (e > h.pages) ? h.pages : (e < 1) ? 1 : h.currentPage;
            h.$currentPage = h.$items.eq(h.currentPage - h.adj);
            h.targetPage = (e === 0) ? h.pages : (e > h.pages) ? 1 : e;
            h.$targetPage = h.$items.eq(h.targetPage - h.adj);
            d = typeof d !== "undefined" ? d : g.animationTime;
            if (d >= 0) {
                h.$el.trigger("slide_init", h)
            }
            if (d > 0) {
                h.slideControls(true)
            }
            if (g.buildNavigation) {
                h.setNavigation(h.targetPage)
            }
            if (f !== true) {
                f = false
            }
            if (!f || (g.stopAtEnd && e === h.pages)) {
                h.startStop(false)
            }
            if (d >= 0) {
                h.$el.trigger("slide_begin", h)
            }
            setTimeout(function (m) {
                var p, r = true;
                if (g.allowRapidChange) {
                    h.$wrapper.add(h.$el).add(h.$items).stop(true, true)
                }
                if (!g.resizeContents) {
                    p = h.getDim(e);
                    m = {};
                    if (h.$wrapper.width() !== p[0]) {
                        m.width = p[0] || h.width;
                        r = false
                    }
                    if (h.$wrapper.height() !== p[1]) {
                        m.height = p[1] || h.height;
                        r = false
                    }
                    if (!r) {
                        h.$wrapper.filter(":not(:animated)").animate(m, {
                            queue: false,
                            duration: (d < 0 ? 0 : d),
                            easing: g.easing
                        })
                    }
                }
                if (g.mode === "fade") {
                    if (h.$lastPage[0] !== h.$targetPage[0]) {
                        h.fadeIt(h.$lastPage, 0, d);
                        h.fadeIt(h.$targetPage, 1, d, function () {
                            h.endAnimation(e, c, d)
                        })
                    } else {
                        h.endAnimation(e, c, d)
                    }
                } else {
                    m = {};
                    m[h.dir] = -h.panelSize[(g.infiniteSlides && h.pages > 1) ? e : e - 1][2];
                    h.$el.filter(":not(:animated)").animate(m, {
                        queue: false,
                        duration: d < 0 ? 0 : d,
                        easing: g.easing,
                        complete: function () {
                            h.endAnimation(e, c, d)
                        }
                    })
                }
            }, parseInt(g.delayBeforeAnimate, 10) || 0)
        };
        h.endAnimation = function (e, c, d) {
            if (e === 0) {
                h.$el.css(h.dir, g.mode === "fade" ? 0 : -h.panelSize[h.pages][2]);
                e = h.pages
            } else {
                if (e > h.pages) {
                    h.$el.css(h.dir, g.mode === "fade" ? 0 : -h.panelSize[1][2]);
                    e = 1
                }
            }
            h.exactPage = e;
            h.setCurrentPage(e, false);
            if (g.mode === "fade") {
                h.fadeIt(h.$items.not(":eq(" + (e - h.adj) + ")"), 0, 0)
            }
            if (!h.hovered) {
                h.slideControls(false)
            }
            if (g.hashTags) {
                h.setHash(e)
            }
            if (d >= 0) {
                h.$el.trigger("slide_complete", h)
            }
            if (typeof c === "function") {
                c(h)
            }
            if (g.autoPlayLocked && !h.playing) {
                setTimeout(function () {
                    h.startStop(true)
                }, g.resumeDelay - (g.autoPlayDelayed ? g.delay : 0))
            }
        };
        h.fadeIt = function (e, n, d, c) {
            var f = d < 0 ? 0 : d;
            if (g.resumeOnVisible) {
                e.filter(":not(:animated)").fadeTo(f, n, c)
            } else {
                e.filter(":not(:animated)")[n === 0 ? "fadeOut" : "fadeIn"](f, c)
            }
        };
        h.setCurrentPage = function (d, e) {
            d = parseInt(d, 10);
            if (h.pages < 1 || d === 0 || isNaN(d)) {
                return
            }
            if (d > h.pages + 1 - h.adj) {
                d = h.pages - h.adj
            }
            if (d < h.adj) {
                d = 1
            }
            if (g.buildArrows && !g.infiniteSlides && g.stopAtEnd) {
                h.$forward[d === h.pages - h.adjustMultiple ? "addClass" : "removeClass"]("disabled");
                h.$back[d === 1 ? "addClass" : "removeClass"]("disabled");
                if (d === h.pages && h.playing) {
                    h.startStop()
                }
            }
            if (!e) {
                var c = h.getDim(d);
                h.$wrapper.css({
                    width: c[0],
                    height: c[1]
                }).add(h.$window).scrollLeft(0).scrollTop(0);
                h.$el.css(h.dir, g.mode === "fade" ? 0 : -h.panelSize[(g.infiniteSlides && h.pages > 1) ? d : d - 1][2])
            }
            h.currentPage = d;
            h.$currentPage = h.$items.removeClass("activePage").eq(d - h.adj).addClass("activePage");
            if (g.buildNavigation) {
                h.setNavigation(d)
            }
        };
        h.setNavigation = function (c) {
            h.$nav.find(".cur").removeClass("cur").end().find("a").eq(c - 1).addClass("cur")
        };
        h.makeActive = function () {
            if (!h.$wrapper.hasClass("activeSlider")) {
                b(".activeSlider").removeClass("activeSlider");
                h.$wrapper.addClass("activeSlider")
            }
        };
        h.gotoHash = function () {
            var e = h.win.location.hash, f = e.indexOf("&"), c = e.match(h.regex);
            if (c === null && !/^#&/.test(e) && !/#!?\//.test(e)) {
                e = e.substring(0, (f >= 0 ? f : e.length));
                try {
                    c = (b(e).length && b(e).closest(".anythingBase")[0] === h.el) ? h.$items.index(b(e).closest(".panel")) + h.adj : null
                } catch (d) {
                    c = null
                }
            } else {
                if (c !== null) {
                    c = (g.hashTags) ? parseInt(c[1], 10) : null
                }
            }
            return c
        };
        h.setHash = function (c) {
            var d = "panel" + h.runTimes + "-", e = h.win.location.hash;
            if (typeof e !== "undefined") {
                h.win.location.hash = (e.indexOf(d) > 0) ? e.replace(h.regex, d + c) : e + "&" + d + c
            }
        };
        h.slideControls = function (o) {
            var e = (o) ? "slideDown" : "slideUp", c = (o) ? 0 : g.animationTime, d = (o) ? g.animationTime : 0, p = (o) ? 1 : 0, f = (o) ? 0 : 1;
            if (g.toggleControls) {
                h.$controls.stop(true, true).delay(c)[e](g.animationTime / 2).delay(d)
            }
            if (g.buildArrows && g.toggleArrows) {
                if (!h.hovered && h.playing) {
                    f = 1;
                    p = 0
                }
                h.$forward.stop(true, true).delay(c).animate({
                    right: h.arrowRight + (f * h.arrowWidth),
                    opacity: p
                }, g.animationTime / 2);
                h.$back.stop(true, true).delay(c).animate({
                    left: h.arrowLeft + (f * h.arrowWidth),
                    opacity: p
                }, g.animationTime / 2)
            }
        };
        h.clearTimer = function (c) {
            if (h.timer) {
                h.win.clearInterval(h.timer);
                if (!c && h.slideshow) {
                    h.$el.trigger("slideshow_stop", h);
                    h.slideshow = false
                }
            }
        };
        h.startStop = function (c, d) {
            if (c !== true) {
                c = false
            }
            h.playing = c;
            if (c && !d) {
                h.$el.trigger("slideshow_start", h);
                h.slideshow = true
            }
            if (g.buildStartStop) {
                h.$startStop.toggleClass("playing", c).find("span").html(c ? g.stopText : g.startText);
                if (h.$startStop.find("span").css("visibility") === "hidden") {
                    h.$startStop.addClass(g.tooltipClass).attr("title", c ? g.stopText : g.startText)
                }
            }
            if (c) {
                h.clearTimer(true);
                h.timer = h.win.setInterval(function () {
                    if (!g.isVideoPlaying(h)) {
                        h.goForward(true)
                    } else {
                        if (!g.resumeOnVideoEnd) {
                            h.startStop()
                        }
                    }
                }, g.delay)
            } else {
                h.clearTimer()
            }
        };
        h.init()
    };
    b.anythingSlider.defaults = {
        theme: "default",
        mode: "horiz",
        expand: false,
        resizeContents: true,
        showMultiple: false,
        easing: "swing",
        buildArrows: true,
        buildNavigation: true,
        buildStartStop: true,
        toggleArrows: false,
        toggleControls: false,
        startText: "Start",
        stopText: "Stop",
        forwardText: "&raquo;",
        backText: "&laquo;",
        tooltipClass: "tooltip",
        enableArrows: true,
        enableNavigation: true,
        enableStartStop: true,
        enableKeyboard: true,
        startPanel: 1,
        changeBy: 1,
        hashTags: true,
        infiniteSlides: true,
        navigationFormatter: null,
        navigationSize: false,
        autoPlay: false,
        autoPlayLocked: false,
        autoPlayDelayed: false,
        pauseOnHover: true,
        stopAtEnd: false,
        playRtl: false,
        delay: 3000,
        resumeDelay: 15000,
        animationTime: 600,
        delayBeforeAnimate: 0,
        clickForwardArrow: "click",
        clickBackArrow: "click",
        clickControls: "click focusin",
        clickSlideshow: "click",
        allowRapidChange: false,
        resumeOnVideoEnd: true,
        resumeOnVisible: true,
        addWmodeToObject: "opaque",
        isVideoPlaying: function (a) {
            return false
        }
    };
    b.fn.anythingSlider = function (a, d) {
        return this.each(function () {
            var c, f = b(this).data("AnythingSlider");
            if ((typeof(a)).match("object|undefined")) {
                if (!f) {
                    (new b.anythingSlider(this, a))
                } else {
                    f.updateSlider()
                }
            } else {
                if (/\d/.test(a) && !isNaN(a) && f) {
                    c = (typeof(a) === "number") ? a : parseInt(b.trim(a), 10);
                    if (c >= 1 && c <= f.pages) {
                        f.gotoPage(c, false, d)
                    }
                } else {
                    if (/^[#|.]/.test(a) && b(a).length) {
                        f.gotoPage(a, false, d)
                    }
                }
            }
        })
    }
})(jQuery);
/*
 * jQuery BBQ: Back Button & Query Library - v1.4pre - 1/15/2013
 * http://benalman.com/projects/jquery-bbq-plugin/
 *
 * Copyright (c) 2010-2013 "Cowboy" Ben Alman
 * Dual licensed under the MIT and GPL licenses.
 * http://benalman.com/about/license/
 */
(function (M, Y) {
    var an, ah = Array.prototype.slice, U = decodeURIComponent, av = M.param, al, at, ai, ad, au = M.bbq = M.bbq || {}, W, af, ak, aq = M.event.special, ar = "hashchange", X = "querystring", Q = "fragment", ab = "elemUrlAttr", aj = "href", ag = "src", ac = /^.*\?|#.*$/g, S, N, ao, am, V, R = {};

    function O(a) {
        return typeof a === "string"
    }

    function T(a) {
        var b = ah.call(arguments, 1);
        return function () {
            return a.apply(this, b.concat(ah.call(arguments)))
        }
    }

    function ae(a) {
        return a.replace(N, "$2")
    }

    function aa(a) {
        return a.replace(/(?:^[^?#]*\?([^#]*).*$)?.*/, "$1")
    }

    function ap(h, c, l, g, k) {
        var a, d, e, b, f;
        if (g !== an) {
            e = l.match(h ? N : /^([^#?]*)\??([^#]*)(#?.*)/);
            f = e[3] || "";
            if (k === 2 && O(g)) {
                d = g.replace(h ? S : ac, "")
            } else {
                b = ai(e[2]);
                g = O(g) ? ai[h ? Q : X](g) : g;
                d = k === 2 ? g : k === 1 ? M.extend({}, g, b) : M.extend({}, b, g);
                d = al(d);
                if (h) {
                    d = d.replace(ao, U)
                }
            }
            a = e[1] + (h ? V : d || !e[1] ? "?" : "") + d + f
        } else {
            a = c(l !== an ? l : location.href)
        }
        return a
    }

    av[X] = T(ap, 0, aa);
    av[Q] = at = T(ap, 1, ae);
    av.sorted = al = function (c, b) {
        var d = [], a = {};
        M.each(av(c, b).split("&"), function (e, h) {
            var f = h.replace(/(?:%5B|=).*$/, ""), g = a[f];
            if (!g) {
                g = a[f] = [];
                d.push(f)
            }
            g.push(h)
        });
        return M.map(d.sort(), function (e) {
            return a[e]
        }).join("&")
    };
    at.noEscape = function (a) {
        a = a || "";
        var b = M.map(a.split(""), encodeURIComponent);
        ao = new RegExp(b.join("|"), "g")
    };
    at.noEscape(",/");
    at.ajaxCrawlable = function (a) {
        if (a !== an) {
            if (a) {
                S = /^.*(?:#!|#)/;
                N = /^([^#]*)(?:#!|#)?(.*)$/;
                V = "#!"
            } else {
                S = /^.*#/;
                N = /^([^#]*)#?(.*)$/;
                V = "#"
            }
            am = !!a
        }
        return am
    };
    at.ajaxCrawlable(0);
    M.deparam = ai = function (a, d) {
        var b = {}, c = {"true": !0, "false": !1, "null": null};
        M.each(a.replace(/\+/g, " ").split("&"), function (m, f) {
            var n = f.split("="), g = U(n[0]), o, h = b, l = 0, e = g.split("]["), k = e.length - 1;
            if (/\[/.test(e[0]) && /\]$/.test(e[k])) {
                e[k] = e[k].replace(/\]$/, "");
                e = e.shift().split("[").concat(e);
                k = e.length - 1
            } else {
                k = 0
            }
            if (n.length === 2) {
                o = U(n[1]);
                if (d) {
                    o = o && !isNaN(o) ? +o : o === "undefined" ? an : c[o] !== an ? c[o] : o
                }
                if (k) {
                    for (; l <= k; l++) {
                        g = e[l] === "" ? h.length : e[l];
                        h = h[g] = l < k ? h[g] || (e[l + 1] && isNaN(e[l + 1]) ? {} : []) : o
                    }
                } else {
                    if (M.isArray(b[g])) {
                        b[g].push(o)
                    } else {
                        if (b[g] !== an) {
                            b[g] = [b[g], o]
                        } else {
                            b[g] = o
                        }
                    }
                }
            } else {
                if (g) {
                    b[g] = d ? an : ""
                }
            }
        });
        return b
    };
    function Z(a, c, b) {
        if (c === an || typeof c === "boolean") {
            b = c;
            c = av[a ? Q : X]()
        } else {
            c = O(c) ? c.replace(a ? S : ac, "") : c
        }
        return ai(c, b)
    }

    ai[X] = T(Z, 0);
    ai[Q] = ad = T(Z, 1);
    M[ab] || (M[ab] = function (a) {
        return M.extend(R, a)
    })({
        a: aj,
        base: aj,
        iframe: ag,
        img: ag,
        input: ag,
        form: "action",
        link: aj,
        script: ag
    });
    ak = M[ab];
    function P(a, c, b, d) {
        if (!O(b) && typeof b !== "object") {
            d = b;
            b = c;
            c = an
        }
        return this.each(function () {
            var e = M(this), g = c || ak()[(this.nodeName || "").toLowerCase()] || "", f = g && e.attr(g) || "";
            e.attr(g, av[a](f, b, d))
        })
    }

    M.fn[X] = T(P, X);
    M.fn[Q] = T(P, Q);
    au.pushState = W = function (a, d) {
        if (O(a) && /^#/.test(a) && d === an) {
            d = 2
        }
        var b = a !== an, c = at(location.href, b ? a : {}, b ? d : 2);
        location.href = c
    };
    au.getState = af = function (b, a) {
        return b === an || typeof b === "boolean" ? ad(b) : ad(a)[b]
    };
    au.removeState = function (b) {
        var a = {};
        if (b !== an) {
            a = af();
            M.each(M.isArray(b) ? b : arguments, function (c, d) {
                delete a[d]
            })
        }
        W(a, 2)
    };
    aq[ar] = M.extend(aq[ar], {
        add: function (c) {
            var a;

            function b(d) {
                var e = d[Q] = at();
                d.getState = function (g, f) {
                    return g === an || typeof g === "boolean" ? ai(e, g) : ai(e, f)[g]
                };
                a.apply(this, arguments)
            }

            if (M.isFunction(c)) {
                a = c;
                return b
            } else {
                a = c.handler;
                c.handler = b
            }
        }
    })
})(jQuery, this);
/*
 * jQuery hashchange event - v1.3 - 7/21/2010
 * http://benalman.com/projects/jquery-hashchange-plugin/
 *
 * Copyright (c) 2010 "Cowboy" Ben Alman
 * Dual licensed under the MIT and GPL licenses.
 * http://benalman.com/about/license/
 */
(function (m, q, u) {
    var s = "hashchange", n = document, p, o = m.event.special, l = n.documentMode, r = "on" + s in q && (l === u || l > 7);

    function v(a) {
        a = a || location.href;
        return "#" + a.replace(/^[^#]*#?(.*)$/, "$1")
    }

    m.fn[s] = function (a) {
        return a ? this.bind(s, a) : this.trigger(s)
    };
    m.fn[s].delay = 50;
    o[s] = m.extend(o[s], {
        setup: function () {
            if (r) {
                return false
            }
            m(p.start)
        }, teardown: function () {
            if (r) {
                return false
            }
            m(p.stop)
        }
    });
    p = (function () {
        var b = {}, c, f = v(), a = function (h) {
            return h
        }, g = a, d = a;
        b.start = function () {
            c || e()
        };
        b.stop = function () {
            c && clearTimeout(c);
            c = u
        };
        function e() {
            var h = v(), k = d(f);
            if (h !== f) {
                g(f = h, k);
                m(q).trigger(s)
            } else {
                if (k !== f) {
                    location.href = location.href.replace(/#.*/, "") + k
                }
            }
            c = setTimeout(e, m.fn[s].delay)
        }

        (navigator.userAgent.match(/MSIE/i) !== null) && !r && (function () {
            var k, h;
            b.start = function () {
                if (!k) {
                    h = m.fn[s].src;
                    h = h && h + v();
                    k = m('<iframe tabindex="-1" title="empty"/>').hide().one("load", function () {
                        h || g(v());
                        e()
                    }).attr("src", h || "javascript:0").insertAfter("body")[0].contentWindow;
                    n.onpropertychange = function () {
                        try {
                            if (event.propertyName === "title") {
                                k.document.title = n.title
                            }
                        } catch (w) {
                        }
                    }
                }
            };
            b.stop = a;
            d = function () {
                return v(k.location.href)
            };
            g = function (D, C) {
                var A = k.document, B = m.fn[s].domain;
                if (D !== C) {
                    A.title = n.title;
                    A.open();
                    B && A.write('<script>document.domain="' + B + '"<\/script>');
                    A.close();
                    k.location.hash = D
                }
            }
        })();
        return b
    })()
})(jQuery, this);
(function (h) {
    var k = !!h.Tween;
    if (k) {
        h.Tween.propHooks.backgroundPosition = {
            get: function (a) {
                return f(h(a.elem).css(a.prop))
            }, set: l
        }
    } else {
        h.fx.step.backgroundPosition = l
    }
    function f(a) {
        var b = (a || "").split(/ /);
        var c = {
            center: "50%",
            left: "0%",
            right: "100%",
            top: "0%",
            bottom: "100%"
        };
        var d = function (e) {
            var n = (c[b[e]] || b[e] || "50%").match(/^([+-]=)?([+-]?\d+(\.\d*)?)(.*)$/);
            b[e] = [n[1], parseFloat(n[2]), n[4] || "px"]
        };
        if (b.length == 1 && h.inArray(b[0], ["top", "bottom"]) > -1) {
            b[1] = b[0];
            b[0] = "50%"
        }
        d(0);
        d(1);
        return b
    }

    function l(a) {
        if (!a.set) {
            g(a)
        }
        h(a.elem).css("background-position", ((a.pos * (a.end[0][1] - a.start[0][1]) + a.start[0][1]) + a.end[0][2]) + " " + ((a.pos * (a.end[1][1] - a.start[1][1]) + a.start[1][1]) + a.end[1][2]))
    }

    function g(b) {
        b.start = f(h(b.elem).css("backgroundPosition"));
        b.end = f(b.end);
        for (var a = 0; a < b.end.length; a++) {
            if (b.end[a][0]) {
                b.end[a][1] = b.start[a][1] + (b.end[a][0] == "-=" ? -1 : +1) * b.end[a][1]
            }
        }
        b.set = true
    }
})(jQuery);
(function (v) {
    v.colorpicker = new function () {
        this.regional = [];
        this.regional[""] = {
            ok: "OK",
            cancel: "Cancel",
            none: "None",
            button: "Color",
            title: "Pick a color",
            transparent: "Transparent",
            hsvH: "H",
            hsvS: "S",
            hsvV: "V",
            rgbR: "R",
            rgbG: "G",
            rgbB: "B",
            labL: "L",
            labA: "a",
            labB: "b",
            hslH: "H",
            hslS: "S",
            hslL: "L",
            cmykC: "C",
            cmykM: "M",
            cmykY: "Y",
            cmykK: "K",
            alphaA: "A"
        };
        this.swatches = [];
        this.swatches.html = {
            black: {r: 0, g: 0, b: 0},
            dimgray: {
                r: 0.4117647058823529,
                g: 0.4117647058823529,
                b: 0.4117647058823529
            },
            gray: {
                r: 0.5019607843137255,
                g: 0.5019607843137255,
                b: 0.5019607843137255
            },
            darkgray: {
                r: 0.6627450980392157,
                g: 0.6627450980392157,
                b: 0.6627450980392157
            },
            silver: {
                r: 0.7529411764705882,
                g: 0.7529411764705882,
                b: 0.7529411764705882
            },
            lightgrey: {
                r: 0.8274509803921568,
                g: 0.8274509803921568,
                b: 0.8274509803921568
            },
            gainsboro: {
                r: 0.8627450980392157,
                g: 0.8627450980392157,
                b: 0.8627450980392157
            },
            whitesmoke: {
                r: 0.9607843137254902,
                g: 0.9607843137254902,
                b: 0.9607843137254902
            },
            white: {r: 1, g: 1, b: 1},
            rosybrown: {
                r: 0.7372549019607844,
                g: 0.5607843137254902,
                b: 0.5607843137254902
            },
            indianred: {
                r: 0.803921568627451,
                g: 0.3607843137254902,
                b: 0.3607843137254902
            },
            brown: {
                r: 0.6470588235294118,
                g: 0.16470588235294117,
                b: 0.16470588235294117
            },
            firebrick: {
                r: 0.6980392156862745,
                g: 0.13333333333333333,
                b: 0.13333333333333333
            },
            lightcoral: {
                r: 0.9411764705882353,
                g: 0.5019607843137255,
                b: 0.5019607843137255
            },
            maroon: {r: 0.5019607843137255, g: 0, b: 0},
            darkred: {r: 0.5450980392156862, g: 0, b: 0},
            red: {r: 1, g: 0, b: 0},
            snow: {r: 1, g: 0.9803921568627451, b: 0.9803921568627451},
            salmon: {
                r: 0.9803921568627451,
                g: 0.5019607843137255,
                b: 0.4470588235294118
            },
            mistyrose: {r: 1, g: 0.8941176470588236, b: 0.8823529411764706},
            tomato: {r: 1, g: 0.38823529411764707, b: 0.2784313725490196},
            darksalmon: {
                r: 0.9137254901960784,
                g: 0.5882352941176471,
                b: 0.47843137254901963
            },
            orangered: {r: 1, g: 0.27058823529411763, b: 0},
            coral: {r: 1, g: 0.4980392156862745, b: 0.3137254901960784},
            lightsalmon: {r: 1, g: 0.6274509803921569, b: 0.47843137254901963},
            sienna: {
                r: 0.6274509803921569,
                g: 0.3215686274509804,
                b: 0.17647058823529413
            },
            seashell: {r: 1, g: 0.9607843137254902, b: 0.9333333333333333},
            chocolate: {
                r: 0.8235294117647058,
                g: 0.4117647058823529,
                b: 0.11764705882352941
            },
            saddlebrown: {
                r: 0.5450980392156862,
                g: 0.27058823529411763,
                b: 0.07450980392156863
            },
            sandybrown: {
                r: 0.9568627450980393,
                g: 0.6431372549019608,
                b: 0.3764705882352941
            },
            peachpuff: {r: 1, g: 0.8549019607843137, b: 0.7254901960784313},
            peru: {
                r: 0.803921568627451,
                g: 0.5215686274509804,
                b: 0.24705882352941178
            },
            linen: {
                r: 0.9803921568627451,
                g: 0.9411764705882353,
                b: 0.9019607843137255
            },
            darkorange: {r: 1, g: 0.5490196078431373, b: 0},
            bisque: {r: 1, g: 0.8941176470588236, b: 0.7686274509803922},
            burlywood: {
                r: 0.8705882352941177,
                g: 0.7215686274509804,
                b: 0.5294117647058824
            },
            tan: {
                r: 0.8235294117647058,
                g: 0.7058823529411765,
                b: 0.5490196078431373
            },
            antiquewhite: {
                r: 0.9803921568627451,
                g: 0.9215686274509803,
                b: 0.8431372549019608
            },
            navajowhite: {r: 1, g: 0.8705882352941177, b: 0.6784313725490196},
            blanchedalmond: {r: 1, g: 0.9215686274509803, b: 0.803921568627451},
            papayawhip: {r: 1, g: 0.9372549019607843, b: 0.8352941176470589},
            orange: {r: 1, g: 0.6470588235294118, b: 0},
            moccasin: {r: 1, g: 0.8941176470588236, b: 0.7098039215686275},
            wheat: {
                r: 0.9607843137254902,
                g: 0.8705882352941177,
                b: 0.7019607843137254
            },
            oldlace: {
                r: 0.9921568627450981,
                g: 0.9607843137254902,
                b: 0.9019607843137255
            },
            floralwhite: {r: 1, g: 0.9803921568627451, b: 0.9411764705882353},
            goldenrod: {
                r: 0.8549019607843137,
                g: 0.6470588235294118,
                b: 0.12549019607843137
            },
            darkgoldenrod: {
                r: 0.7215686274509804,
                g: 0.5254901960784314,
                b: 0.043137254901960784
            },
            cornsilk: {r: 1, g: 0.9725490196078431, b: 0.8627450980392157},
            gold: {r: 1, g: 0.8431372549019608, b: 0},
            palegoldenrod: {
                r: 0.9333333333333333,
                g: 0.9098039215686274,
                b: 0.6666666666666666
            },
            khaki: {
                r: 0.9411764705882353,
                g: 0.9019607843137255,
                b: 0.5490196078431373
            },
            lemonchiffon: {r: 1, g: 0.9803921568627451, b: 0.803921568627451},
            darkkhaki: {
                r: 0.7411764705882353,
                g: 0.7176470588235294,
                b: 0.4196078431372549
            },
            beige: {
                r: 0.9607843137254902,
                g: 0.9607843137254902,
                b: 0.8627450980392157
            },
            lightgoldenrodyellow: {
                r: 0.9803921568627451,
                g: 0.9803921568627451,
                b: 0.8235294117647058
            },
            olive: {r: 0.5019607843137255, g: 0.5019607843137255, b: 0},
            yellow: {r: 1, g: 1, b: 0},
            lightyellow: {r: 1, g: 1, b: 0.8784313725490196},
            ivory: {r: 1, g: 1, b: 0.9411764705882353},
            olivedrab: {
                r: 0.4196078431372549,
                g: 0.5568627450980392,
                b: 0.13725490196078433
            },
            yellowgreen: {
                r: 0.6039215686274509,
                g: 0.803921568627451,
                b: 0.19607843137254902
            },
            darkolivegreen: {
                r: 0.3333333333333333,
                g: 0.4196078431372549,
                b: 0.1843137254901961
            },
            greenyellow: {r: 0.6784313725490196, g: 1, b: 0.1843137254901961},
            lawngreen: {r: 0.48627450980392156, g: 0.9882352941176471, b: 0},
            chartreuse: {r: 0.4980392156862745, g: 1, b: 0},
            darkseagreen: {
                r: 0.5607843137254902,
                g: 0.7372549019607844,
                b: 0.5607843137254902
            },
            forestgreen: {
                r: 0.13333333333333333,
                g: 0.5450980392156862,
                b: 0.13333333333333333
            },
            limegreen: {
                r: 0.19607843137254902,
                g: 0.803921568627451,
                b: 0.19607843137254902
            },
            lightgreen: {
                r: 0.5647058823529412,
                g: 0.9333333333333333,
                b: 0.5647058823529412
            },
            palegreen: {
                r: 0.596078431372549,
                g: 0.984313725490196,
                b: 0.596078431372549
            },
            darkgreen: {r: 0, g: 0.39215686274509803, b: 0},
            green: {r: 0, g: 0.5019607843137255, b: 0},
            lime: {r: 0, g: 1, b: 0},
            honeydew: {r: 0.9411764705882353, g: 1, b: 0.9411764705882353},
            mediumseagreen: {
                r: 0.23529411764705882,
                g: 0.7019607843137254,
                b: 0.44313725490196076
            },
            seagreen: {
                r: 0.1803921568627451,
                g: 0.5450980392156862,
                b: 0.3411764705882353
            },
            springgreen: {r: 0, g: 1, b: 0.4980392156862745},
            mintcream: {r: 0.9607843137254902, g: 1, b: 0.9803921568627451},
            mediumspringgreen: {
                r: 0,
                g: 0.9803921568627451,
                b: 0.6039215686274509
            },
            mediumaquamarine: {
                r: 0.4,
                g: 0.803921568627451,
                b: 0.6666666666666666
            },
            aquamarine: {r: 0.4980392156862745, g: 1, b: 0.8313725490196079},
            turquoise: {
                r: 0.25098039215686274,
                g: 0.8784313725490196,
                b: 0.8156862745098039
            },
            lightseagreen: {
                r: 0.12549019607843137,
                g: 0.6980392156862745,
                b: 0.6666666666666666
            },
            mediumturquoise: {
                r: 0.2823529411764706,
                g: 0.8196078431372549,
                b: 0.8
            },
            darkslategray: {
                r: 0.1843137254901961,
                g: 0.30980392156862746,
                b: 0.30980392156862746
            },
            paleturquoise: {
                r: 0.6862745098039216,
                g: 0.9333333333333333,
                b: 0.9333333333333333
            },
            teal: {r: 0, g: 0.5019607843137255, b: 0.5019607843137255},
            darkcyan: {r: 0, g: 0.5450980392156862, b: 0.5450980392156862},
            darkturquoise: {r: 0, g: 0.807843137254902, b: 0.8196078431372549},
            aqua: {r: 0, g: 1, b: 1},
            cyan: {r: 0, g: 1, b: 1},
            lightcyan: {r: 0.8784313725490196, g: 1, b: 1},
            azure: {r: 0.9411764705882353, g: 1, b: 1},
            cadetblue: {
                r: 0.37254901960784315,
                g: 0.6196078431372549,
                b: 0.6274509803921569
            },
            powderblue: {
                r: 0.6901960784313725,
                g: 0.8784313725490196,
                b: 0.9019607843137255
            },
            lightblue: {
                r: 0.6784313725490196,
                g: 0.8470588235294118,
                b: 0.9019607843137255
            },
            deepskyblue: {r: 0, g: 0.7490196078431373, b: 1},
            skyblue: {
                r: 0.5294117647058824,
                g: 0.807843137254902,
                b: 0.9215686274509803
            },
            lightskyblue: {
                r: 0.5294117647058824,
                g: 0.807843137254902,
                b: 0.9803921568627451
            },
            steelblue: {
                r: 0.27450980392156865,
                g: 0.5098039215686274,
                b: 0.7058823529411765
            },
            aliceblue: {r: 0.9411764705882353, g: 0.9725490196078431, b: 1},
            dodgerblue: {r: 0.11764705882352941, g: 0.5647058823529412, b: 1},
            slategray: {
                r: 0.4392156862745098,
                g: 0.5019607843137255,
                b: 0.5647058823529412
            },
            lightslategray: {
                r: 0.4666666666666667,
                g: 0.5333333333333333,
                b: 0.6
            },
            lightsteelblue: {
                r: 0.6901960784313725,
                g: 0.7686274509803922,
                b: 0.8705882352941177
            },
            cornflowerblue: {
                r: 0.39215686274509803,
                g: 0.5843137254901961,
                b: 0.9294117647058824
            },
            royalblue: {
                r: 0.2549019607843137,
                g: 0.4117647058823529,
                b: 0.8823529411764706
            },
            midnightblue: {
                r: 0.09803921568627451,
                g: 0.09803921568627451,
                b: 0.4392156862745098
            },
            lavender: {
                r: 0.9019607843137255,
                g: 0.9019607843137255,
                b: 0.9803921568627451
            },
            navy: {r: 0, g: 0, b: 0.5019607843137255},
            darkblue: {r: 0, g: 0, b: 0.5450980392156862},
            mediumblue: {r: 0, g: 0, b: 0.803921568627451},
            blue: {r: 0, g: 0, b: 1},
            ghostwhite: {r: 0.9725490196078431, g: 0.9725490196078431, b: 1},
            darkslateblue: {
                r: 0.2823529411764706,
                g: 0.23921568627450981,
                b: 0.5450980392156862
            },
            slateblue: {
                r: 0.41568627450980394,
                g: 0.35294117647058826,
                b: 0.803921568627451
            },
            mediumslateblue: {
                r: 0.4823529411764706,
                g: 0.40784313725490196,
                b: 0.9333333333333333
            },
            mediumpurple: {
                r: 0.5764705882352941,
                g: 0.4392156862745098,
                b: 0.8588235294117647
            },
            blueviolet: {
                r: 0.5411764705882353,
                g: 0.16862745098039217,
                b: 0.8862745098039215
            },
            indigo: {r: 0.29411764705882354, g: 0, b: 0.5098039215686274},
            darkorchid: {r: 0.6, g: 0.19607843137254902, b: 0.8},
            darkviolet: {r: 0.5803921568627451, g: 0, b: 0.8274509803921568},
            mediumorchid: {
                r: 0.7294117647058823,
                g: 0.3333333333333333,
                b: 0.8274509803921568
            },
            thistle: {
                r: 0.8470588235294118,
                g: 0.7490196078431373,
                b: 0.8470588235294118
            },
            plum: {
                r: 0.8666666666666667,
                g: 0.6274509803921569,
                b: 0.8666666666666667
            },
            violet: {
                r: 0.9333333333333333,
                g: 0.5098039215686274,
                b: 0.9333333333333333
            },
            purple: {r: 0.5019607843137255, g: 0, b: 0.5019607843137255},
            darkmagenta: {r: 0.5450980392156862, g: 0, b: 0.5450980392156862},
            magenta: {r: 1, g: 0, b: 1},
            fuchsia: {r: 1, g: 0, b: 1},
            orchid: {
                r: 0.8549019607843137,
                g: 0.4392156862745098,
                b: 0.8392156862745098
            },
            mediumvioletred: {
                r: 0.7803921568627451,
                g: 0.08235294117647059,
                b: 0.5215686274509804
            },
            deeppink: {r: 1, g: 0.0784313725490196, b: 0.5764705882352941},
            hotpink: {r: 1, g: 0.4117647058823529, b: 0.7058823529411765},
            palevioletred: {
                r: 0.8588235294117647,
                g: 0.4392156862745098,
                b: 0.5764705882352941
            },
            lavenderblush: {r: 1, g: 0.9411764705882353, b: 0.9607843137254902},
            crimson: {
                r: 0.8627450980392157,
                g: 0.0784313725490196,
                b: 0.23529411764705882
            },
            pink: {r: 1, g: 0.7529411764705882, b: 0.796078431372549},
            lightpink: {r: 1, g: 0.7137254901960784, b: 0.7568627450980392}
        }
    };
    var m = 0, u = '<div class="ui-colorpicker ui-colorpicker-dialog ui-dialog ui-widget ui-widget-content ui-corner-all" style="display: none;"></div>', s = '<div class="ui-colorpicker ui-colorpicker-inline ui-dialog ui-widget ui-widget-content ui-corner-all"></div>', p = {
        full: ["header", "map", "bar", "hex", "hsv", "rgb", "alpha", "lab", "cmyk", "preview", "swatches", "footer"],
        popup: ["map", "bar", "hex", "hsv", "rgb", "alpha", "preview", "footer"],
        draggable: ["header", "map", "bar", "hex", "hsv", "rgb", "alpha", "preview", "footer"],
        inline: ["map", "bar", "hex", "hsv", "rgb", "alpha", "preview"]
    }, o = function (b) {
        var a = Math.round(b).toString(16);
        if (a.length === 1) {
            a = ("0" + a)
        }
        return a.toLowerCase()
    }, r = function (b) {
        var a, c;
        c = /^#?([a-fA-F0-9]{1,6})$/.exec(b);
        if (c) {
            a = parseInt(c[1], 16);
            return new w(((a >> 16) & 255) / 255, ((a >> 8) & 255) / 255, (a & 255) / 255)
        }
        return new w()
    }, n = function (b, K) {
        var h, f, x, l, I, g, H, J, a, d, c, e, k, y;
        b.sort(function (A, B) {
            if (A.pos[1] == B.pos[1]) {
                return A.pos[0] - B.pos[0]
            }
            return A.pos[1] - B.pos[1]
        });
        l = 0;
        I = 0;
        v.each(b, function (A, B) {
            l = Math.max(l, B.pos[0] + B.pos[2]);
            I = Math.max(I, B.pos[1] + B.pos[3])
        });
        h = [];
        for (f = 0; f < l; ++f) {
            h.push([])
        }
        H = [];
        g = [];
        v.each(b, function (A, B) {
            for (f = 0; f < B.pos[2]; f += 1) {
                g[B.pos[0] + f] = true
            }
            for (x = 0; x < B.pos[3]; x += 1) {
                H[B.pos[1] + x] = true
            }
        });
        d = "";
        a = b[J = 0];
        for (x = 0; x < I; ++x) {
            d += "<tr>";
            for (f = 0; f < l; f) {
                if (typeof a !== "undefined" && f == a.pos[0] && x == a.pos[1]) {
                    d += K(a, f, x);
                    for (e = 0; e < a.pos[3]; e += 1) {
                        for (c = 0; c < a.pos[2]; c += 1) {
                            h[f + c][x + e] = true
                        }
                    }
                    f += a.pos[2];
                    a = b[++J]
                } else {
                    k = 0;
                    y = false;
                    while (f < l && h[f][x] === undefined && (a === undefined || x < a.pos[1] || (x == a.pos[1] && f < a.pos[0]))) {
                        if (g[f] === true) {
                            k += 1
                        }
                        y = true;
                        f += 1
                    }
                    if (k > 0) {
                        d += '<td colspan="' + k + '"></td>'
                    } else {
                        if (!y) {
                            f += 1
                        }
                    }
                }
            }
            d += "</tr>"
        }
        return '<table cellspacing="0" cellpadding="0" border="0"><tbody>' + d + "</tbody></table>"
    }, q = {
        header: function (c) {
            var d = this, b = null, a = function () {
                var e = c.options.title || c._getRegional("title"), f = '<span class="ui-dialog-title">' + e + "</span>";
                if (!c.inline && c.options.showCloseButton) {
                    f += '<a href="#" class="ui-dialog-titlebar-close ui-corner-all" role="button"><span class="ui-icon ui-icon-closethick">close</span></a>'
                }
                return '<div class="ui-dialog-titlebar ui-widget-header ui-corner-all ui-helper-clearfix">' + f + "</div>"
            };
            this.init = function () {
                b = v(a()).prependTo(c.dialog);
                var e = v(".ui-dialog-titlebar-close", b);
                c._hoverable(e);
                c._focusable(e);
                e.click(function (f) {
                    f.preventDefault();
                    c.close()
                });
                if (!c.inline && c.options.draggable) {
                    c.dialog.draggable({handle: b})
                }
            }
        }, map: function (c) {
            var e = this, b = null, d = null, h, f, g, a;
            h = function (H) {
                if (!c.opened) {
                    return
                }
                var y = v(".ui-colorpicker-map-layer-pointer", b), G = y.offset(), k = y.width(), l = y.height(), x = H.pageX - G.left, F = H.pageY - G.top;
                if (x >= 0 && x < k && F >= 0 && F < l) {
                    H.stopImmediatePropagation();
                    H.preventDefault();
                    b.unbind("mousedown", h);
                    v(document).bind("mouseup", f);
                    v(document).bind("mousemove", g);
                    g(H)
                }
            };
            f = function (k) {
                k.stopImmediatePropagation();
                k.preventDefault();
                v(document).unbind("mouseup", f);
                v(document).unbind("mousemove", g);
                b.bind("mousedown", h)
            };
            g = function (H) {
                H.stopImmediatePropagation();
                H.preventDefault();
                if (H.pageX === e.x && H.pageY === e.y) {
                    return
                }
                e.x = H.pageX;
                e.y = H.pageY;
                var y = v(".ui-colorpicker-map-layer-pointer", b), G = y.offset(), k = y.width(), l = y.height(), x = H.pageX - G.left, F = H.pageY - G.top;
                x = Math.max(0, Math.min(x / k, 1));
                F = Math.max(0, Math.min(F / l, 1));
                switch (c.mode) {
                    case"h":
                        c.color.setHSV(null, x, 1 - F);
                        break;
                    case"s":
                    case"a":
                        c.color.setHSV(x, null, 1 - F);
                        break;
                    case"v":
                        c.color.setHSV(x, 1 - F, null);
                        break;
                    case"r":
                        c.color.setRGB(null, 1 - F, x);
                        break;
                    case"g":
                        c.color.setRGB(1 - F, null, x);
                        break;
                    case"b":
                        c.color.setRGB(x, 1 - F, null);
                        break
                }
                c._change()
            };
            a = function () {
                var k = '<div class="ui-colorpicker-map ui-colorpicker-border"><span class="ui-colorpicker-map-layer-1">&nbsp;</span><span class="ui-colorpicker-map-layer-2">&nbsp;</span>' + (c.options.alpha ? '<span class="ui-colorpicker-map-layer-alpha">&nbsp;</span>' : "") + '<span class="ui-colorpicker-map-layer-pointer"><span class="ui-colorpicker-map-pointer"></span></span></div>';
                return k
            };
            this.update = function () {
                switch (c.mode) {
                    case"h":
                        v(".ui-colorpicker-map-layer-1", b).css({
                            "background-position": "0 0",
                            opacity: ""
                        }).show();
                        v(".ui-colorpicker-map-layer-2", b).hide();
                        break;
                    case"s":
                    case"a":
                        v(".ui-colorpicker-map-layer-1", b).css({
                            "background-position": "0 -260px",
                            opacity: ""
                        }).show();
                        v(".ui-colorpicker-map-layer-2", b).css({
                            "background-position": "0 -520px",
                            opacity: ""
                        }).show();
                        break;
                    case"v":
                        v(b).css("background-color", "black");
                        v(".ui-colorpicker-map-layer-1", b).css({
                            "background-position": "0 -780px",
                            opacity: ""
                        }).show();
                        v(".ui-colorpicker-map-layer-2", b).hide();
                        break;
                    case"r":
                        v(".ui-colorpicker-map-layer-1", b).css({
                            "background-position": "0 -1040px",
                            opacity: ""
                        }).show();
                        v(".ui-colorpicker-map-layer-2", b).css({
                            "background-position": "0 -1300px",
                            opacity: ""
                        }).show();
                        break;
                    case"g":
                        v(".ui-colorpicker-map-layer-1", b).css({
                            "background-position": "0 -1560px",
                            opacity: ""
                        }).show();
                        v(".ui-colorpicker-map-layer-2", b).css({
                            "background-position": "0 -1820px",
                            opacity: ""
                        }).show();
                        break;
                    case"b":
                        v(".ui-colorpicker-map-layer-1", b).css({
                            "background-position": "0 -2080px",
                            opacity: ""
                        }).show();
                        v(".ui-colorpicker-map-layer-2", b).css({
                            "background-position": "0 -2340px",
                            opacity: ""
                        }).show();
                        break
                }
                e.repaint()
            };
            this.repaint = function () {
                var k = v(".ui-colorpicker-map-layer-pointer", b), x = 0, l = 0;
                switch (c.mode) {
                    case"h":
                        x = c.color.getHSV().s * k.width();
                        l = (1 - c.color.getHSV().v) * k.width();
                        v(b).css("background-color", c.color.copy().normalize().toCSS());
                        break;
                    case"s":
                    case"a":
                        x = c.color.getHSV().h * k.width();
                        l = (1 - c.color.getHSV().v) * k.width();
                        v(".ui-colorpicker-map-layer-2", b).css("opacity", 1 - c.color.getHSV().s);
                        break;
                    case"v":
                        x = c.color.getHSV().h * k.width();
                        l = (1 - c.color.getHSV().s) * k.width();
                        v(".ui-colorpicker-map-layer-1", b).css("opacity", c.color.getHSV().v);
                        break;
                    case"r":
                        x = c.color.getRGB().b * k.width();
                        l = (1 - c.color.getRGB().g) * k.width();
                        v(".ui-colorpicker-map-layer-2", b).css("opacity", c.color.getRGB().r);
                        break;
                    case"g":
                        x = c.color.getRGB().b * k.width();
                        l = (1 - c.color.getRGB().r) * k.width();
                        v(".ui-colorpicker-map-layer-2", b).css("opacity", c.color.getRGB().g);
                        break;
                    case"b":
                        x = c.color.getRGB().r * k.width();
                        l = (1 - c.color.getRGB().g) * k.width();
                        v(".ui-colorpicker-map-layer-2", b).css("opacity", c.color.getRGB().b);
                        break
                }
                if (c.options.alpha) {
                    v(".ui-colorpicker-map-layer-alpha", b).css("opacity", 1 - c.color.getAlpha())
                }
                v(".ui-colorpicker-map-pointer", b).css({
                    left: x - 7,
                    top: l - 7
                })
            };
            this.init = function () {
                b = v(a()).appendTo(v(".ui-colorpicker-map-container", c.dialog));
                b.bind("mousedown", h)
            }
        }, bar: function (c) {
            var d = this, b = null, g, e, f, a;
            g = function (h) {
                if (!c.opened) {
                    return
                }
                var y = v(".ui-colorpicker-bar-layer-pointer", b), F = y.offset(), k = y.width(), l = y.height(), x = h.pageX - F.left, E = h.pageY - F.top;
                if (x >= 0 && x < k && E >= 0 && E < l) {
                    h.stopImmediatePropagation();
                    h.preventDefault();
                    b.unbind("mousedown", g);
                    v(document).bind("mouseup", e);
                    v(document).bind("mousemove", f);
                    f(h)
                }
            };
            e = function (h) {
                h.stopImmediatePropagation();
                h.preventDefault();
                v(document).unbind("mouseup", e);
                v(document).unbind("mousemove", f);
                b.bind("mousedown", g)
            };
            f = function (y) {
                y.stopImmediatePropagation();
                y.preventDefault();
                if (y.pageY === d.y) {
                    return
                }
                d.y = y.pageY;
                var k = v(".ui-colorpicker-bar-layer-pointer", b), l = k.offset(), B = k.height(), h = y.pageY - l.top;
                h = Math.max(0, Math.min(h / B, 1));
                switch (c.mode) {
                    case"h":
                        c.color.setHSV(1 - h, null, null);
                        break;
                    case"s":
                        c.color.setHSV(null, 1 - h, null);
                        break;
                    case"v":
                        c.color.setHSV(null, null, 1 - h);
                        break;
                    case"r":
                        c.color.setRGB(1 - h, null, null);
                        break;
                    case"g":
                        c.color.setRGB(null, 1 - h, null);
                        break;
                    case"b":
                        c.color.setRGB(null, null, 1 - h);
                        break;
                    case"a":
                        c.color.setAlpha(1 - h);
                        break
                }
                c._change()
            };
            a = function () {
                var h = '<div class="ui-colorpicker-bar ui-colorpicker-border"><span class="ui-colorpicker-bar-layer-1">&nbsp;</span><span class="ui-colorpicker-bar-layer-2">&nbsp;</span><span class="ui-colorpicker-bar-layer-3">&nbsp;</span><span class="ui-colorpicker-bar-layer-4">&nbsp;</span>';
                if (c.options.alpha) {
                    h += '<span class="ui-colorpicker-bar-layer-alpha">&nbsp;</span><span class="ui-colorpicker-bar-layer-alphabar">&nbsp;</span>'
                }
                h += '<span class="ui-colorpicker-bar-layer-pointer"><span class="ui-colorpicker-bar-pointer"></span></span></div>';
                return h
            };
            this.update = function () {
                switch (c.mode) {
                    case"h":
                    case"s":
                    case"v":
                    case"r":
                    case"g":
                    case"b":
                        v(".ui-colorpicker-bar-layer-alpha", b).show();
                        v(".ui-colorpicker-bar-layer-alphabar", b).hide();
                        break;
                    case"a":
                        v(".ui-colorpicker-bar-layer-alpha", b).hide();
                        v(".ui-colorpicker-bar-layer-alphabar", b).show();
                        break
                }
                switch (c.mode) {
                    case"h":
                        v(".ui-colorpicker-bar-layer-1", b).css({
                            "background-position": "0 0",
                            opacity: ""
                        }).show();
                        v(".ui-colorpicker-bar-layer-2", b).hide();
                        v(".ui-colorpicker-bar-layer-3", b).hide();
                        v(".ui-colorpicker-bar-layer-4", b).hide();
                        break;
                    case"s":
                        v(".ui-colorpicker-bar-layer-1", b).css({
                            "background-position": "0 -260px",
                            opacity: ""
                        }).show();
                        v(".ui-colorpicker-bar-layer-2", b).css({
                            "background-position": "0 -520px",
                            opacity: ""
                        }).show();
                        v(".ui-colorpicker-bar-layer-3", b).hide();
                        v(".ui-colorpicker-bar-layer-4", b).hide();
                        break;
                    case"v":
                        v(".ui-colorpicker-bar-layer-1", b).css({
                            "background-position": "0 -520px",
                            opacity: ""
                        }).show();
                        v(".ui-colorpicker-bar-layer-2", b).hide();
                        v(".ui-colorpicker-bar-layer-3", b).hide();
                        v(".ui-colorpicker-bar-layer-4", b).hide();
                        break;
                    case"r":
                        v(".ui-colorpicker-bar-layer-1", b).css({
                            "background-position": "0 -1560px",
                            opacity: ""
                        }).show();
                        v(".ui-colorpicker-bar-layer-2", b).css({
                            "background-position": "0 -1300px",
                            opacity: ""
                        }).show();
                        v(".ui-colorpicker-bar-layer-3", b).css({
                            "background-position": "0 -780px",
                            opacity: ""
                        }).show();
                        v(".ui-colorpicker-bar-layer-4", b).css({
                            "background-position": "0 -1040px",
                            opacity: ""
                        }).show();
                        break;
                    case"g":
                        v(".ui-colorpicker-bar-layer-1", b).css({
                            "background-position": "0 -2600px",
                            opacity: ""
                        }).show();
                        v(".ui-colorpicker-bar-layer-2", b).css({
                            "background-position": "0 -2340px",
                            opacity: ""
                        }).show();
                        v(".ui-colorpicker-bar-layer-3", b).css({
                            "background-position": "0 -1820px",
                            opacity: ""
                        }).show();
                        v(".ui-colorpicker-bar-layer-4", b).css({
                            "background-position": "0 -2080px",
                            opacity: ""
                        }).show();
                        break;
                    case"b":
                        v(".ui-colorpicker-bar-layer-1", b).css({
                            "background-position": "0 -3640px",
                            opacity: ""
                        }).show();
                        v(".ui-colorpicker-bar-layer-2", b).css({
                            "background-position": "0 -3380px",
                            opacity: ""
                        }).show();
                        v(".ui-colorpicker-bar-layer-3", b).css({
                            "background-position": "0 -2860px",
                            opacity: ""
                        }).show();
                        v(".ui-colorpicker-bar-layer-4", b).css({
                            "background-position": "0 -3120px",
                            opacity: ""
                        }).show();
                        break;
                    case"a":
                        v(".ui-colorpicker-bar-layer-1", b).hide();
                        v(".ui-colorpicker-bar-layer-2", b).hide();
                        v(".ui-colorpicker-bar-layer-3", b).hide();
                        v(".ui-colorpicker-bar-layer-4", b).hide();
                        break
                }
                d.repaint()
            };
            this.repaint = function () {
                var h = v(".ui-colorpicker-bar-layer-pointer", b), k = 0;
                switch (c.mode) {
                    case"h":
                        k = (1 - c.color.getHSV().h) * h.height();
                        break;
                    case"s":
                        k = (1 - c.color.getHSV().s) * h.height();
                        v(".ui-colorpicker-bar-layer-2", b).css("opacity", 1 - c.color.getHSV().v);
                        v(b).css("background-color", c.color.copy().normalize().toCSS());
                        break;
                    case"v":
                        k = (1 - c.color.getHSV().v) * h.height();
                        v(b).css("background-color", c.color.copy().normalize().toCSS());
                        break;
                    case"r":
                        k = (1 - c.color.getRGB().r) * h.height();
                        v(".ui-colorpicker-bar-layer-2", b).css("opacity", Math.max(0, (c.color.getRGB().b - c.color.getRGB().g)));
                        v(".ui-colorpicker-bar-layer-3", b).css("opacity", Math.max(0, (c.color.getRGB().g - c.color.getRGB().b)));
                        v(".ui-colorpicker-bar-layer-4", b).css("opacity", Math.min(c.color.getRGB().b, c.color.getRGB().g));
                        break;
                    case"g":
                        k = (1 - c.color.getRGB().g) * h.height();
                        v(".ui-colorpicker-bar-layer-2", b).css("opacity", Math.max(0, (c.color.getRGB().b - c.color.getRGB().r)));
                        v(".ui-colorpicker-bar-layer-3", b).css("opacity", Math.max(0, (c.color.getRGB().r - c.color.getRGB().b)));
                        v(".ui-colorpicker-bar-layer-4", b).css("opacity", Math.min(c.color.getRGB().r, c.color.getRGB().b));
                        break;
                    case"b":
                        k = (1 - c.color.getRGB().b) * h.height();
                        v(".ui-colorpicker-bar-layer-2", b).css("opacity", Math.max(0, (c.color.getRGB().r - c.color.getRGB().g)));
                        v(".ui-colorpicker-bar-layer-3", b).css("opacity", Math.max(0, (c.color.getRGB().g - c.color.getRGB().r)));
                        v(".ui-colorpicker-bar-layer-4", b).css("opacity", Math.min(c.color.getRGB().r, c.color.getRGB().g));
                        break;
                    case"a":
                        k = (1 - c.color.getAlpha()) * h.height();
                        v(b).css("background-color", c.color.copy().normalize().toCSS());
                        break
                }
                if (c.mode !== "a") {
                    v(".ui-colorpicker-bar-layer-alpha", b).css("opacity", 1 - c.color.getAlpha())
                }
                v(".ui-colorpicker-bar-pointer", b).css("top", k - 3)
            };
            this.init = function () {
                b = v(a()).appendTo(v(".ui-colorpicker-bar-container", c.dialog));
                b.bind("mousedown", g)
            }
        }, preview: function (c) {
            var d = this, b = null, a;
            a = function () {
                return '<div class="ui-colorpicker-preview ui-colorpicker-border"><div class="ui-colorpicker-preview-initial"><div class="ui-colorpicker-preview-initial-alpha"></div></div><div class="ui-colorpicker-preview-current"><div class="ui-colorpicker-preview-current-alpha"></div></div></div>'
            };
            this.init = function () {
                b = v(a()).appendTo(v(".ui-colorpicker-preview-container", c.dialog));
                v(".ui-colorpicker-preview-initial", b).click(function () {
                    c.color = c.currentColor.copy();
                    c._change()
                })
            };
            this.update = function () {
                if (c.options.alpha) {
                    v(".ui-colorpicker-preview-initial-alpha, .ui-colorpicker-preview-current-alpha", b).show()
                } else {
                    v(".ui-colorpicker-preview-initial-alpha, .ui-colorpicker-preview-current-alpha", b).hide()
                }
                this.repaint()
            };
            this.repaint = function () {
                v(".ui-colorpicker-preview-initial", b).css("background-color", c.currentColor.toCSS()).attr("title", c.currentColor.toHex());
                v(".ui-colorpicker-preview-initial-alpha", b).css("opacity", 1 - c.currentColor.getAlpha());
                v(".ui-colorpicker-preview-current", b).css("background-color", c.color.toCSS()).attr("title", c.color.toHex());
                v(".ui-colorpicker-preview-current-alpha", b).css("opacity", 1 - c.color.getAlpha())
            }
        }, hsv: function (c) {
            var d = this, b = null, a;
            a = function () {
                var e = "";
                if (c.options.hsv) {
                    e += '<div class="ui-colorpicker-hsv-h"><input class="ui-colorpicker-mode" type="radio" value="h"/><label>' + c._getRegional("hsvH") + '</label><input class="ui-colorpicker-number" type="number" min="0" max="360" size="10"/><span class="ui-colorpicker-unit">&deg;</span></div><div class="ui-colorpicker-hsv-s"><input class="ui-colorpicker-mode" type="radio" value="s"/><label>' + c._getRegional("hsvS") + '</label><input class="ui-colorpicker-number" type="number" min="0" max="100" size="10"/><span class="ui-colorpicker-unit">%</span></div><div class="ui-colorpicker-hsv-v"><input class="ui-colorpicker-mode" type="radio" value="v"/><label>' + c._getRegional("hsvV") + '</label><input class="ui-colorpicker-number" type="number" min="0" max="100" size="10"/><span class="ui-colorpicker-unit">%</span></div>'
                }
                return '<div class="ui-colorpicker-hsv">' + e + "</div>"
            };
            this.init = function () {
                b = v(a()).appendTo(v(".ui-colorpicker-hsv-container", c.dialog));
                v(".ui-colorpicker-mode", b).click(function () {
                    c.mode = v(this).val();
                    c._updateAllParts()
                });
                v(".ui-colorpicker-number", b).bind("change keyup", function () {
                    c.color.setHSV(v(".ui-colorpicker-hsv-h .ui-colorpicker-number", b).val() / 360, v(".ui-colorpicker-hsv-s .ui-colorpicker-number", b).val() / 100, v(".ui-colorpicker-hsv-v .ui-colorpicker-number", b).val() / 100);
                    c._change()
                })
            };
            this.repaint = function () {
                var e = c.color.getHSV();
                e.h *= 360;
                e.s *= 100;
                e.v *= 100;
                v.each(e, function (g, f) {
                    var h = v(".ui-colorpicker-hsv-" + g + " .ui-colorpicker-number", b);
                    f = Math.round(f);
                    if (h.val() !== f) {
                        h.val(f)
                    }
                })
            };
            this.update = function () {
                v(".ui-colorpicker-mode", b).each(function () {
                    v(this).attr("checked", v(this).val() === c.mode)
                });
                this.repaint()
            }
        }, rgb: function (c) {
            var d = this, b = null, a;
            a = function () {
                var e = "";
                if (c.options.rgb) {
                    e += '<div class="ui-colorpicker-rgb-r"><input class="ui-colorpicker-mode" type="radio" value="r"/><label>' + c._getRegional("rgbR") + '</label><input class="ui-colorpicker-number" type="number" min="0" max="255"/></div><div class="ui-colorpicker-rgb-g"><input class="ui-colorpicker-mode" type="radio" value="g"/><label>' + c._getRegional("rgbG") + '</label><input class="ui-colorpicker-number" type="number" min="0" max="255"/></div><div class="ui-colorpicker-rgb-b"><input class="ui-colorpicker-mode" type="radio" value="b"/><label>' + c._getRegional("rgbB") + '</label><input class="ui-colorpicker-number" type="number" min="0" max="255"/></div>'
                }
                return '<div class="ui-colorpicker-rgb">' + e + "</div>"
            };
            this.init = function () {
                b = v(a()).appendTo(v(".ui-colorpicker-rgb-container", c.dialog));
                v(".ui-colorpicker-mode", b).click(function () {
                    c.mode = v(this).val();
                    c._updateAllParts()
                });
                v(".ui-colorpicker-number", b).bind("change keyup", function () {
                    c.color.setRGB(v(".ui-colorpicker-rgb-r .ui-colorpicker-number", b).val() / 255, v(".ui-colorpicker-rgb-g .ui-colorpicker-number", b).val() / 255, v(".ui-colorpicker-rgb-b .ui-colorpicker-number", b).val() / 255);
                    c._change()
                })
            };
            this.repaint = function () {
                v.each(c.color.getRGB(), function (f, e) {
                    var g = v(".ui-colorpicker-rgb-" + f + " .ui-colorpicker-number", b);
                    e = Math.round(e * 255);
                    if (g.val() !== e) {
                        g.val(e)
                    }
                })
            };
            this.update = function () {
                v(".ui-colorpicker-mode", b).each(function () {
                    v(this).attr("checked", v(this).val() === c.mode)
                });
                this.repaint()
            }
        }, lab: function (b) {
            var c = this, a = null, d = function () {
                var e = "";
                if (b.options.hsv) {
                    e += '<div class="ui-colorpicker-lab-l"><label>' + b._getRegional("labL") + '</label><input class="ui-colorpicker-number" type="number" min="0" max="100"/></div><div class="ui-colorpicker-lab-a"><label>' + b._getRegional("labA") + '</label><input class="ui-colorpicker-number" type="number" min="-128" max="127"/></div><div class="ui-colorpicker-lab-b"><label>' + b._getRegional("labB") + '</label><input class="ui-colorpicker-number" type="number" min="-128" max="127"/></div>'
                }
                return '<div class="ui-colorpicker-lab">' + e + "</div>"
            };
            this.init = function () {
                var e = 0;
                a = v(d()).appendTo(v(".ui-colorpicker-lab-container", b.dialog));
                v(".ui-colorpicker-number", a).on("change keyup", function (f) {
                    b.color.setLAB(parseInt(v(".ui-colorpicker-lab-l .ui-colorpicker-number", a).val(), 10) / 100, (parseInt(v(".ui-colorpicker-lab-a .ui-colorpicker-number", a).val(), 10) + 128) / 255, (parseInt(v(".ui-colorpicker-lab-b .ui-colorpicker-number", a).val(), 10) + 128) / 255);
                    b._change()
                })
            };
            this.repaint = function () {
                var e = b.color.getLAB();
                e.l *= 100;
                e.a = (e.a * 255) - 128;
                e.b = (e.b * 255) - 128;
                v.each(e, function (g, f) {
                    var h = v(".ui-colorpicker-lab-" + g + " .ui-colorpicker-number", a);
                    f = Math.round(f);
                    if (h.val() !== f) {
                        h.val(f)
                    }
                })
            };
            this.update = function () {
                this.repaint()
            }
        }, cmyk: function (b) {
            var c = this, a = null, d = function () {
                var e = "";
                if (b.options.hsv) {
                    e += '<div class="ui-colorpicker-cmyk-c"><label>' + b._getRegional("cmykC") + '</label><input class="ui-colorpicker-number" type="number" min="0" max="100"/><span class="ui-colorpicker-unit">%</span></div><div class="ui-colorpicker-cmyk-m"><label>' + b._getRegional("cmykM") + '</label><input class="ui-colorpicker-number" type="number" min="0" max="100"/><span class="ui-colorpicker-unit">%</span></div><div class="ui-colorpicker-cmyk-y"><label>' + b._getRegional("cmykY") + '</label><input class="ui-colorpicker-number" type="number" min="0" max="100"/><span class="ui-colorpicker-unit">%</span></div><div class="ui-colorpicker-cmyk-k"><label>' + b._getRegional("cmykK") + '</label><input class="ui-colorpicker-number" type="number" min="0" max="100"/><span class="ui-colorpicker-unit">%</span></div>'
                }
                return '<div class="ui-colorpicker-cmyk">' + e + "</div>"
            };
            this.init = function () {
                a = v(d()).appendTo(v(".ui-colorpicker-cmyk-container", b.dialog));
                v(".ui-colorpicker-number", a).on("change keyup", function (e) {
                    b.color.setCMYK(parseInt(v(".ui-colorpicker-cmyk-c .ui-colorpicker-number", a).val(), 10) / 100, parseInt(v(".ui-colorpicker-cmyk-m .ui-colorpicker-number", a).val(), 10) / 100, parseInt(v(".ui-colorpicker-cmyk-y .ui-colorpicker-number", a).val(), 10) / 100, parseInt(v(".ui-colorpicker-cmyk-k .ui-colorpicker-number", a).val(), 10) / 100);
                    b._change()
                })
            };
            this.repaint = function () {
                v.each(b.color.getCMYK(), function (f, e) {
                    var g = v(".ui-colorpicker-cmyk-" + f + " .ui-colorpicker-number", a);
                    e = Math.round(e * 100);
                    if (g.val() !== e) {
                        g.val(e)
                    }
                })
            };
            this.update = function () {
                this.repaint()
            }
        }, alpha: function (c) {
            var d = this, b = null, a;
            a = function () {
                var e = "";
                if (c.options.alpha) {
                    e += '<div class="ui-colorpicker-a"><input class="ui-colorpicker-mode" name="mode" type="radio" value="a"/><label>' + c._getRegional("alphaA") + '</label><input class="ui-colorpicker-number" type="number" min="0" max="100"/><span class="ui-colorpicker-unit">%</span></div>'
                }
                return '<div class="ui-colorpicker-alpha">' + e + "</div>"
            };
            this.init = function () {
                b = v(a()).appendTo(v(".ui-colorpicker-alpha-container", c.dialog));
                v(".ui-colorpicker-mode", b).click(function () {
                    c.mode = v(this).val();
                    c._updateAllParts()
                });
                v(".ui-colorpicker-number", b).bind("change keyup", function () {
                    c.color.setAlpha(v(".ui-colorpicker-a .ui-colorpicker-number", b).val() / 100);
                    c._change()
                })
            };
            this.update = function () {
                v(".ui-colorpicker-mode", b).each(function () {
                    v(this).attr("checked", v(this).val() === c.mode)
                });
                this.repaint()
            };
            this.repaint = function () {
                var f = v(".ui-colorpicker-a .ui-colorpicker-number", b), e = Math.round(c.color.getAlpha() * 100);
                if (!f.is(":focus") && f.val() !== e) {
                    f.val(e)
                }
            }
        }, hex: function (c) {
            var d = this, b = null, a;
            a = function () {
                var e = "";
                if (c.options.alpha) {
                    e += '<input class="ui-colorpicker-hex-alpha" type="text" maxlength="2" size="2"/>'
                }
                e += '<input class="ui-colorpicker-hex-input" type="text" maxlength="6" size="6"/>';
                return '<div class="ui-colorpicker-hex"><label>#</label>' + e + "</div>"
            };
            this.init = function () {
                b = v(a()).appendTo(v(".ui-colorpicker-hex-container", c.dialog));
                v(".ui-colorpicker-hex-input", b).bind("change keydown keyup", function (f, g, e) {
                    if (/[^a-fA-F0-9]/.test(v(this).val())) {
                        v(this).val(v(this).val().replace(/[^a-fA-F0-9]/, ""))
                    }
                });
                v(".ui-colorpicker-hex-input", b).bind("change keyup", function () {
                    c.color = r(v(this).val()).setAlpha(c.color.getAlpha());
                    c._change()
                });
                v(".ui-colorpicker-hex-alpha", b).bind("change keydown keyup", function () {
                    if (/[^a-fA-F0-9]/.test(v(this).val())) {
                        v(this).val(v(this).val().replace(/[^a-fA-F0-9]/, ""))
                    }
                });
                v(".ui-colorpicker-hex-alpha", b).bind("change keyup", function () {
                    c.color.setAlpha(parseInt(v(".ui-colorpicker-hex-alpha", b).val(), 16) / 255);
                    c._change()
                })
            };
            this.update = function () {
                this.repaint()
            };
            this.repaint = function () {
                if (!v(".ui-colorpicker-hex-input", b).is(":focus")) {
                    v(".ui-colorpicker-hex-input", b).val(c.color.toHex(true))
                }
                if (!v(".ui-colorpicker-hex-alpha", b).is(":focus")) {
                    v(".ui-colorpicker-hex-alpha", b).val(o(c.color.getAlpha() * 255))
                }
            }
        }, swatches: function (b) {
            var c = this, a = null, d = function () {
                var e = "";
                v.each(b._getSwatches(), function (h, k) {
                    var f = new w(k.r, k.g, k.b), g = f.toCSS();
                    e += '<div class="ui-colorpicker-swatch" style="background-color:' + g + '" title="' + h + '"></div>'
                });
                return '<div class="ui-colorpicker-swatches ui-colorpicker-border" style="width:' + b.options.swatchesWidth + 'px">' + e + "</div>"
            };
            this.init = function () {
                a = v(d()).appendTo(v(".ui-colorpicker-swatches-container", b.dialog));
                v(".ui-colorpicker-swatch", a).click(function () {
                    b.color = b._parseColor(v(this).css("background-color"));
                    b._change()
                })
            }
        }, footer: function (b) {
            var c = this, e = null, a = "ui-colorpicker-special-transparent-" + m, f = "ui-colorpicker-special-none-" + m, d = function () {
                var g = "";
                if (b.options.alpha || (!b.inline && b.options.showNoneButton)) {
                    g += '<div class="ui-colorpicker-buttonset">';
                    if (b.options.alpha) {
                        g += '<input type="radio" name="ui-colorpicker-special" id="' + a + '" class="ui-colorpicker-special-transparent"/><label for="' + a + '">' + b._getRegional("transparent") + "</label>"
                    }
                    if (!b.inline && b.options.showNoneButton) {
                        g += '<input type="radio" name="ui-colorpicker-special" id="' + f + '" class="ui-colorpicker-special-none"><label for="' + f + '">' + b._getRegional("none") + "</label>"
                    }
                    g += "</div>"
                }
                if (!b.inline) {
                    g += '<div class="ui-dialog-buttonset">';
                    if (b.options.showCancelButton) {
                        g += '<button class="ui-colorpicker-cancel">' + b._getRegional("cancel") + "</button>"
                    }
                    g += '<button class="ui-colorpicker-ok">' + b._getRegional("ok") + "</button>";
                    g += "</div>"
                }
                return '<div class="ui-dialog-buttonpane ui-widget-content">' + g + "</div>"
            };
            this.init = function () {
                e = v(d()).appendTo(b.dialog);
                v(".ui-colorpicker-ok", e).button().click(function () {
                    b.close()
                });
                v(".ui-colorpicker-cancel", e).button().click(function () {
                    b.color = b.currentColor.copy();
                    b._change(b.color.set);
                    b.close()
                });
                v(".ui-colorpicker-buttonset", e).buttonset();
                v(".ui-colorpicker-special-color", e).click(function () {
                    b._change()
                });
                v("#" + f, e).click(function () {
                    b._change(false)
                });
                v("#" + a, e).click(function () {
                    b.color.setAlpha(0);
                    b._change()
                })
            };
            this.repaint = function () {
                if (!b.color.set) {
                    v(".ui-colorpicker-special-none", e).attr("checked", true).button("refresh")
                } else {
                    if (b.color.getAlpha() == 0) {
                        v(".ui-colorpicker-special-transparent", e).attr("checked", true).button("refresh")
                    } else {
                        v("input", e).attr("checked", false).button("refresh")
                    }
                }
                v(".ui-colorpicker-cancel", e).button(b.changed ? "enable" : "disable")
            };
            this.update = function () {
            }
        }
    }, w = function () {
        var F = {
            rgb: {r: 0, g: 0, b: 0},
            hsv: {h: 0, s: 0, v: 0},
            hsl: {h: 0, s: 0, l: 0},
            lab: {l: 0, a: 0, b: 0},
            cmyk: {c: 0, m: 0, y: 0, k: 1}
        }, c = 1, h = arguments, L = function (x) {
            if (isNaN(x) || x === null) {
                return 0
            }
            if (typeof x == "string") {
                x = parseInt(x, 10)
            }
            return Math.max(0, Math.min(x, 1))
        }, J = function (y) {
            var x = "0123456789abcdef", A = y % 16, B = (y - A) / 16, C = x.charAt(B) + x.charAt(A);
            return C
        }, b = function (A) {
            var x = (A.r > 0.04045) ? Math.pow((A.r + 0.055) / 1.055, 2.4) : A.r / 12.92, y = (A.g > 0.04045) ? Math.pow((A.g + 0.055) / 1.055, 2.4) : A.g / 12.92, B = (A.b > 0.04045) ? Math.pow((A.b + 0.055) / 1.055, 2.4) : A.b / 12.92;
            return {
                x: x * 0.4124 + y * 0.3576 + B * 0.1805,
                y: x * 0.2126 + y * 0.7152 + B * 0.0722,
                z: x * 0.0193 + y * 0.1192 + B * 0.9505
            }
        }, d = function (y) {
            var x = {
                r: y.x * 3.2406 + y.y * -1.5372 + y.z * -0.4986,
                g: y.x * -0.9689 + y.y * 1.8758 + y.z * 0.0415,
                b: y.x * 0.0557 + y.y * -0.204 + y.z * 1.057
            };
            x.r = (x.r > 0.0031308) ? 1.055 * Math.pow(x.r, (1 / 2.4)) - 0.055 : 12.92 * x.r;
            x.g = (x.g > 0.0031308) ? 1.055 * Math.pow(x.g, (1 / 2.4)) - 0.055 : 12.92 * x.g;
            x.b = (x.b > 0.0031308) ? 1.055 * Math.pow(x.b, (1 / 2.4)) - 0.055 : 12.92 * x.b;
            return x
        }, k = function (C) {
            var E = Math.min(C.r, C.g, C.b), N = Math.max(C.r, C.g, C.b), x = N - E, A, B, y, D = {
                h: 0,
                s: 0,
                v: N
            };
            if (x === 0) {
                D.h = 0;
                D.s = 0
            } else {
                D.s = x / N;
                A = (((N - C.r) / 6) + (x / 2)) / x;
                B = (((N - C.g) / 6) + (x / 2)) / x;
                y = (((N - C.b) / 6) + (x / 2)) / x;
                if (C.r === N) {
                    D.h = y - B
                } else {
                    if (C.g === N) {
                        D.h = (1 / 3) + A - y
                    } else {
                        if (C.b === N) {
                            D.h = (2 / 3) + B - A
                        }
                    }
                }
                if (D.h < 0) {
                    D.h += 1
                } else {
                    if (D.h > 1) {
                        D.h -= 1
                    }
                }
            }
            return D
        }, f = function (x) {
            var y = {r: 0, g: 0, b: 0}, A, C, B, D, E;
            if (x.s === 0) {
                y.r = y.g = y.b = x.v
            } else {
                A = x.h === 1 ? 0 : x.h * 6;
                C = Math.floor(A);
                B = x.v * (1 - x.s);
                D = x.v * (1 - x.s * (A - C));
                E = x.v * (1 - x.s * (1 - (A - C)));
                if (C === 0) {
                    y.r = x.v;
                    y.g = E;
                    y.b = B
                } else {
                    if (C === 1) {
                        y.r = D;
                        y.g = x.v;
                        y.b = B
                    } else {
                        if (C === 2) {
                            y.r = B;
                            y.g = x.v;
                            y.b = E
                        } else {
                            if (C === 3) {
                                y.r = B;
                                y.g = D;
                                y.b = x.v
                            } else {
                                if (C === 4) {
                                    y.r = E;
                                    y.g = B;
                                    y.b = x.v
                                } else {
                                    y.r = x.v;
                                    y.g = B;
                                    y.b = D
                                }
                            }
                        }
                    }
                }
            }
            return y
        }, I = function (C) {
            var E = Math.min(C.r, C.g, C.b), N = Math.max(C.r, C.g, C.b), x = N - E, A, B, y, D = {
                h: 0,
                s: 0,
                l: (N + E) / 2
            };
            if (x === 0) {
                D.h = 0;
                D.s = 0
            } else {
                D.s = D.l < 0.5 ? x / (N + E) : x / (2 - N - E);
                A = (((N - C.r) / 6) + (x / 2)) / x;
                B = (((N - C.g) / 6) + (x / 2)) / x;
                y = (((N - C.b) / 6) + (x / 2)) / x;
                if (C.r === N) {
                    D.h = y - B
                } else {
                    if (C.g === N) {
                        D.h = (1 / 3) + A - y
                    } else {
                        if (C.b === N) {
                            D.h = (2 / 3) + B - A
                        }
                    }
                }
                if (D.h < 0) {
                    D.h += 1
                } else {
                    if (D.h > 1) {
                        D.h -= 1
                    }
                }
            }
            return D
        }, G = function (y) {
            var A, B, x = function (C, D, E) {
                if (E < 0) {
                    E += 1
                }
                if (E > 1) {
                    E -= 1
                }
                if ((6 * E) < 1) {
                    return C + (D - C) * 6 * E
                }
                if ((2 * E) < 1) {
                    return D
                }
                if ((3 * E) < 2) {
                    return C + (D - C) * ((2 / 3) - E) * 6
                }
                return C
            };
            if (y.s === 0) {
                return {r: y.l, g: y.l, b: y.l}
            }
            B = (y.l < 0.5) ? y.l * (1 + y.s) : (y.l + y.s) - (y.s * y.l);
            A = 2 * y.l - B;
            return {
                r: x(A, B, y.h + (1 / 3)),
                g: x(A, B, y.h),
                b: x(A, B, y.h - (1 / 3))
            }
        }, l = function (A) {
            var B = A.x / 0.95047, x = A.y, y = A.z / 1.08883;
            B = (B > 0.008856) ? Math.pow(B, (1 / 3)) : (7.787 * B) + (16 / 116);
            x = (x > 0.008856) ? Math.pow(x, (1 / 3)) : (7.787 * x) + (16 / 116);
            y = (y > 0.008856) ? Math.pow(y, (1 / 3)) : (7.787 * y) + (16 / 116);
            return {
                l: ((116 * x) - 16) / 100,
                a: ((500 * (B - x)) + 128) / 255,
                b: ((200 * (x - y)) + 128) / 255
            }
        }, K = function (y) {
            var x = {
                l: y.l * 100,
                a: (y.a * 255) - 128,
                b: (y.b * 255) - 128
            }, A = {x: 0, y: (x.l + 16) / 116, z: 0};
            A.x = x.a / 500 + A.y;
            A.z = A.y - x.b / 200;
            A.x = (Math.pow(A.x, 3) > 0.008856) ? Math.pow(A.x, 3) : (A.x - 16 / 116) / 7.787;
            A.y = (Math.pow(A.y, 3) > 0.008856) ? Math.pow(A.y, 3) : (A.y - 16 / 116) / 7.787;
            A.z = (Math.pow(A.z, 3) > 0.008856) ? Math.pow(A.z, 3) : (A.z - 16 / 116) / 7.787;
            A.x *= 0.95047;
            A.y *= 1;
            A.z *= 1.08883;
            return A
        }, a = function (x) {
            return {c: 1 - (x.r), m: 1 - (x.g), y: 1 - (x.b)}
        }, H = function (x) {
            return {r: 1 - (x.c), g: 1 - (x.m), b: 1 - (x.y)}
        }, e = function (x) {
            var y = 1;
            if (x.c < y) {
                y = x.c
            }
            if (x.m < y) {
                y = x.m
            }
            if (x.y < y) {
                y = x.y
            }
            if (y == 1) {
                return {c: 0, m: 0, y: 0, k: 1}
            }
            return {
                c: (x.c - y) / (1 - y),
                m: (x.m - y) / (1 - y),
                y: (x.y - y) / (1 - y),
                k: y
            }
        }, g = function (x) {
            return {
                c: x.c * (1 - x.k) + x.k,
                m: x.m * (1 - x.k) + x.k,
                y: x.y * (1 - x.k) + x.k
            }
        };
        this.set = true;
        this.setAlpha = function (x) {
            if (x !== null) {
                c = L(x)
            }
            return this
        };
        this.getAlpha = function () {
            return c
        };
        this.setRGB = function (x, y, A) {
            F = {rgb: this.getRGB()};
            if (x !== null) {
                F.rgb.r = L(x)
            }
            if (y !== null) {
                F.rgb.g = L(y)
            }
            if (A !== null) {
                F.rgb.b = L(A)
            }
            return this
        };
        this.setHSV = function (x, y, A) {
            F = {hsv: this.getHSV()};
            if (x !== null) {
                F.hsv.h = L(x)
            }
            if (y !== null) {
                F.hsv.s = L(y)
            }
            if (A !== null) {
                F.hsv.v = L(A)
            }
            return this
        };
        this.setHSL = function (x, y, A) {
            F = {hsl: this.getHSL()};
            if (x !== null) {
                F.hsl.h = L(x)
            }
            if (y !== null) {
                F.hsl.s = L(y)
            }
            if (A !== null) {
                F.hsl.l = L(A)
            }
            return this
        };
        this.setLAB = function (x, y, A) {
            F = {lab: this.getLAB()};
            if (x !== null) {
                F.lab.l = L(x)
            }
            if (y !== null) {
                F.lab.a = L(y)
            }
            if (A !== null) {
                F.lab.b = L(A)
            }
            return this
        };
        this.setCMYK = function (x, B, y, A) {
            F = {cmyk: this.getCMYK()};
            if (x !== null) {
                F.cmyk.c = L(x)
            }
            if (B !== null) {
                F.cmyk.m = L(B)
            }
            if (y !== null) {
                F.cmyk.y = L(y)
            }
            if (A !== null) {
                F.cmyk.k = L(A)
            }
            return this
        };
        this.getRGB = function () {
            if (!F.rgb) {
                F.rgb = F.lab ? d(K(F.lab)) : F.hsv ? f(F.hsv) : F.hsl ? G(F.hsl) : F.cmyk ? H(g(F.cmyk)) : {
                    r: 0,
                    g: 0,
                    b: 0
                };
                F.rgb.r = L(F.rgb.r);
                F.rgb.g = L(F.rgb.g);
                F.rgb.b = L(F.rgb.b)
            }
            return v.extend({}, F.rgb)
        };
        this.getHSV = function () {
            if (!F.hsv) {
                F.hsv = F.lab ? k(this.getRGB()) : F.rgb ? k(F.rgb) : F.hsl ? k(this.getRGB()) : F.cmyk ? k(this.getRGB()) : {
                    h: 0,
                    s: 0,
                    v: 0
                };
                F.hsv.h = L(F.hsv.h);
                F.hsv.s = L(F.hsv.s);
                F.hsv.v = L(F.hsv.v)
            }
            return v.extend({}, F.hsv)
        };
        this.getHSL = function () {
            if (!F.hsl) {
                F.hsl = F.rgb ? I(F.rgb) : F.hsv ? I(this.getRGB()) : F.cmyk ? I(this.getRGB()) : F.hsv ? I(this.getRGB()) : {
                    h: 0,
                    s: 0,
                    l: 0
                };
                F.hsl.h = L(F.hsl.h);
                F.hsl.s = L(F.hsl.s);
                F.hsl.l = L(F.hsl.l)
            }
            return v.extend({}, F.hsl)
        };
        this.getCMYK = function () {
            if (!F.cmyk) {
                F.cmyk = F.rgb ? e(a(F.rgb)) : F.hsv ? e(a(this.getRGB())) : F.hsl ? e(a(this.getRGB())) : F.lab ? e(a(this.getRGB())) : {
                    c: 0,
                    m: 0,
                    y: 0,
                    k: 1
                };
                F.cmyk.c = L(F.cmyk.c);
                F.cmyk.m = L(F.cmyk.m);
                F.cmyk.y = L(F.cmyk.y);
                F.cmyk.k = L(F.cmyk.k)
            }
            return v.extend({}, F.cmyk)
        };
        this.getLAB = function () {
            if (!F.lab) {
                F.lab = F.rgb ? l(b(F.rgb)) : F.hsv ? l(b(this.getRGB())) : F.hsl ? l(b(this.getRGB())) : F.cmyk ? l(b(this.getRGB())) : {
                    l: 0,
                    a: 0,
                    b: 0
                };
                F.lab.l = L(F.lab.l);
                F.lab.a = L(F.lab.a);
                F.lab.b = L(F.lab.b)
            }
            return v.extend({}, F.lab)
        };
        this.getChannels = function () {
            return {
                r: this.getRGB().r,
                g: this.getRGB().g,
                b: this.getRGB().b,
                a: this.getAlpha(),
                h: this.getHSV().h,
                s: this.getHSV().s,
                v: this.getHSV().v,
                c: this.getCMYK().c,
                m: this.getCMYK().m,
                y: this.getCMYK().y,
                k: this.getCMYK().k,
                L: this.getLAB().l,
                A: this.getLAB().a,
                B: this.getLAB().b
            }
        };
        this.getSpaces = function () {
            return v.extend(true, {}, F)
        };
        this.setSpaces = function (x) {
            F = x;
            return this
        };
        this.distance = function (B) {
            var y = "lab", D = "get" + y.toUpperCase(), C = this[D](), E = B[D](), x = 0, A;
            for (A in C) {
                x += Math.pow(C[A] - E[A], 2)
            }
            return x
        };
        this.equals = function (x) {
            var y = this.getRGB(), A = x.getRGB();
            return this.getAlpha() == x.getAlpha() && y.r == A.r && y.g == A.g && y.b == A.b
        };
        this.limit = function (y) {
            y -= 1;
            var x = this.getRGB();
            this.setRGB(Math.round(x.r * y) / y, Math.round(x.g * y) / y, Math.round(x.b * y) / y)
        };
        this.toHex = function () {
            var x = this.getRGB();
            return J(x.r * 255) + J(x.g * 255) + J(x.b * 255)
        };
        this.toCSS = function () {
            return "#" + this.toHex()
        };
        this.normalize = function () {
            this.setHSV(null, 1, 1);
            return this
        };
        this.copy = function () {
            var x = this.getSpaces(), y = this.getAlpha();
            return new w(x, y)
        };
        if (h.length == 2) {
            this.setSpaces(h[0]);
            this.setAlpha(h[1] === 0 ? 0 : h[1] || 1)
        }
        if (h.length > 2) {
            this.setRGB(h[0], h[1], h[2]);
            this.setAlpha(h[3] === 0 ? 0 : h[3] || 1)
        }
    };
    v.widget("vanderlee.colorpicker", {
        options: {
            alpha: false,
            altAlpha: true,
            altField: "",
            altOnChange: true,
            altProperties: "background-color",
            autoOpen: false,
            buttonColorize: false,
            buttonImage: "images/ui-colorpicker.png",
            buttonImageOnly: false,
            buttonText: null,
            closeOnEscape: true,
            closeOnOutside: true,
            color: "#00FF00",
            colorFormat: "HEX",
            draggable: true,
            duration: "fast",
            hsv: true,
            inline: true,
            layout: {
                map: [0, 0, 1, 5],
                bar: [1, 0, 1, 5],
                preview: [2, 0, 1, 1],
                hsv: [2, 1, 1, 1],
                rgb: [2, 2, 1, 1],
                alpha: [2, 3, 1, 1],
                hex: [2, 4, 1, 1],
                lab: [3, 1, 1, 1],
                cmyk: [3, 2, 1, 2],
                swatches: [4, 0, 1, 5]
            },
            limit: "",
            modal: false,
            mode: "h",
            parts: "",
            regional: "",
            rgb: true,
            showAnim: "fadeIn",
            showCancelButton: true,
            showNoneButton: false,
            showCloseButton: true,
            showOn: "focus",
            showOptions: {},
            swatches: null,
            swatchesWidth: 84,
            title: null,
            close: null,
            init: null,
            select: null,
            open: null
        }, _create: function () {
            var a = this, b;
            ++m;
            a.widgetEventPrefix = "color";
            a.opened = false;
            a.generated = false;
            a.inline = false;
            a.changed = false;
            a.dialog = null;
            a.button = null;
            a.image = null;
            a.overlay = null;
            a.mode = a.options.mode;
            if (this.element[0].nodeName.toLowerCase() === "input" || !a.options.inline) {
                a._setColor(a.element.val());
                this._callback("init");
                v("body").append(u);
                a.dialog = v(".ui-colorpicker:last");
                v(document).delegate("html", "touchstart click", function (d) {
                    if (!a.opened || d.target === a.element[0] || a.overlay) {
                        return
                    }
                    if (a.dialog.is(d.target) || a.dialog.has(d.target).length > 0) {
                        a.element.blur();
                        return
                    }
                    var c, e = v(d.target).parents();
                    for (c = 0; c <= e.length; ++c) {
                        if (a.button !== null && e[c] === a.button[0]) {
                            return
                        }
                    }
                    if (!a.options.closeOnOutside) {
                        return
                    }
                    a.close()
                });
                v(document).keydown(function (c) {
                    if (c.keyCode == 27 && a.opened && a.options.closeOnEscape) {
                        a.close()
                    }
                });
                if (a.options.showOn === "focus" || a.options.showOn === "both") {
                    a.element.on("focus click", function () {
                        a.open()
                    })
                }
                if (a.options.showOn === "button" || a.options.showOn === "both") {
                    if (a.options.buttonImage !== "") {
                        b = a.options.buttonText || a._getRegional("button");
                        a.image = v("<img/>").attr({
                            src: a.options.buttonImage,
                            alt: b,
                            title: b
                        });
                        a._setImageBackground()
                    }
                    if (a.options.buttonImageOnly && a.image) {
                        a.button = a.image
                    } else {
                        a.button = v('<button type="button"></button>').html(a.image || a.options.buttonText).button();
                        a.image = a.image ? v("img", a.button).first() : null
                    }
                    a.button.insertAfter(a.element).click(function () {
                        a[a.opened ? "close" : "open"]()
                    })
                }
                if (a.options.autoOpen) {
                    a.open()
                }
                a.element.keydown(function (c) {
                    if (c.keyCode === 9) {
                        a.close()
                    }
                }).keyup(function (c) {
                    var d = a._parseColor(a.element.val());
                    if (!a.color.equals(d)) {
                        a.color = d;
                        a._change()
                    }
                })
            } else {
                a.inline = true;
                v(this.element).html(s);
                a.dialog = v(".ui-colorpicker", this.element);
                a._generate();
                a.opened = true
            }
            return this
        }, _setOption: function (a, b) {
            var c = this;
            switch (a) {
                case"disabled":
                    if (b) {
                        c.dialog.addClass("ui-colorpicker-disabled")
                    } else {
                        c.dialog.removeClass("ui-colorpicker-disabled")
                    }
                    break
            }
            v.Widget.prototype._setOption.apply(c, arguments)
        }, _setImageBackground: function () {
            if (this.image && this.options.buttonColorize) {
                this.image.css("background-color", this.color.set ? this._formatColor("RGBA", this.color) : "")
            }
        }, _setAltField: function () {
            if (this.options.altOnChange && this.options.altField && this.options.altProperties) {
                var a, b, c = this.options.altProperties.split(",");
                for (a = 0; a <= c.length; ++a) {
                    b = v.trim(c[a]);
                    switch (b) {
                        case"color":
                        case"background-color":
                        case"outline-color":
                        case"border-color":
                            v(this.options.altField).css(b, this.color.set ? this.color.toCSS() : "");
                            break
                    }
                }
                if (this.options.altAlpha) {
                    v(this.options.altField).css("opacity", this.color.set ? this.color.getAlpha() : "")
                }
            }
        }, _setColor: function (a) {
            this.color = this._parseColor(a);
            this.currentColor = this.color.copy();
            this._setImageBackground();
            this._setAltField()
        }, setColor: function (a) {
            this._setColor(a);
            this._change(this.color.set)
        }, _generate: function () {
            var b = this, d, e, c, a;
            b._setColor(b.inline ? b.options.color : b.element.val());
            if (typeof b.options.parts === "string") {
                if (p[b.options.parts]) {
                    c = p[b.options.parts]
                } else {
                    c = p[b.inline ? "inline" : "popup"]
                }
            } else {
                c = b.options.parts
            }
            b.parts = {};
            v.each(c, function (f, g) {
                if (q[g]) {
                    b.parts[g] = new q[g](b)
                }
            });
            if (!b.generated) {
                a = [];
                v.each(b.options.layout, function (g, f) {
                    if (b.parts[g]) {
                        a.push({part: g, pos: f})
                    }
                });
                v(n(a, function (h, k, f) {
                    var g = ["ui-colorpicker-" + h.part + "-container"];
                    if (k > 0) {
                        g.push("ui-colorpicker-padding-left")
                    }
                    if (f > 0) {
                        g.push("ui-colorpicker-padding-top")
                    }
                    return '<td  class="' + g.join(" ") + '"' + (h.pos[2] > 1 ? ' colspan="' + h.pos[2] + '"' : "") + (h.pos[3] > 1 ? ' rowspan="' + h.pos[3] + '"' : "") + ' valign="top"></td>'
                })).appendTo(b.dialog).addClass("ui-dialog-content ui-widget-content");
                b._initAllParts();
                b._updateAllParts();
                b.generated = true
            }
        }, _effectGeneric: function (e, f, a, c, b) {
            var d = this;
            if (v.effects && v.effects[d.options.showAnim]) {
                e[f](d.options.showAnim, d.options.showOptions, d.options.duration, b)
            } else {
                e[(d.options.showAnim === "slideDown" ? a : (d.options.showAnim === "fadeIn" ? c : f))]((d.options.showAnim ? d.options.duration : null), b);
                if (!d.options.showAnim || !d.options.duration) {
                    b()
                }
            }
        }, _effectShow: function (a, b) {
            this._effectGeneric(a, "show", "slideDown", "fadeIn", b)
        }, _effectHide: function (a, b) {
            this._effectGeneric(a, "hide", "slideUp", "fadeOut", b)
        }, open: function () {
            var c = this, d, f, h, g, e, k, a, b;
            if (!c.opened) {
                c._generate();
                d = c.element.offset();
                f = v(window).height() + v(window).scrollTop();
                h = v(window).width() + v(window).scrollLeft();
                g = c.dialog.outerHeight();
                e = c.dialog.outerWidth();
                k = d.left;
                a = d.top + c.element.outerHeight();
                if (k + e > h) {
                    k = Math.max(0, h - e)
                }
                if (a + g > f) {
                    if (d.top - g >= v(window).scrollTop()) {
                        a = d.top - g
                    } else {
                        a = Math.max(0, f - g)
                    }
                }
                c.dialog.css({left: k, top: a});
                b = 0;
                v(c.element[0]).parents().each(function () {
                    var l = v(this).css("z-index");
                    if ((typeof(l) === "number" || typeof(l) === "string") && l !== "" && !isNaN(l)) {
                        b = parseInt(l);
                        return false
                    }
                });
                c.dialog.css("z-index", b += 2);
                c.overlay = c.options.modal ? new v.ui.dialog.overlay(c) : null;
                c._effectShow(this.dialog);
                c.opened = true;
                c._callback("open", true);
                v(function () {
                    c._repaintAllParts()
                })
            }
        }, close: function () {
            var a = this;
            a.currentColor = a.color.copy();
            a.changed = false;
            a._effectHide(a.dialog, function () {
                a.dialog.empty();
                a.generated = false;
                a.opened = false;
                a._callback("close", true)
            });
            if (a.overlay) {
                a.overlay.destroy()
            }
        }, destroy: function () {
            this.element.unbind();
            if (this.image !== null) {
                this.image.remove()
            }
            if (this.button !== null) {
                this.button.remove()
            }
            if (this.dialog !== null) {
                this.dialog.remove()
            }
            if (this.overlay) {
                this.overlay.destroy()
            }
        }, _callback: function (b, a) {
            var d = this, c, e;
            if (d.color.set) {
                c = {formatted: d._formatColor(d.options.colorFormat, d.color)};
                e = d.color.getLAB();
                e.a = (e.a * 2) - 1;
                e.b = (e.b * 2) - 1;
                if (a === true) {
                    c.a = d.color.getAlpha();
                    c.rgb = d.color.getRGB();
                    c.hsv = d.color.getHSV();
                    c.cmyk = d.color.getCMYK();
                    c.hsl = d.color.getHSL();
                    c.lab = e
                }
                return d._trigger(b, null, c)
            } else {
                return d._trigger(b, null, {formatted: ""})
            }
        }, _initAllParts: function () {
            v.each(this.parts, function (b, a) {
                if (a.init) {
                    a.init()
                }
            })
        }, _updateAllParts: function () {
            v.each(this.parts, function (b, a) {
                if (a.update) {
                    a.update()
                }
            })
        }, _repaintAllParts: function () {
            v.each(this.parts, function (b, a) {
                if (a.repaint) {
                    a.repaint()
                }
            })
        }, _change: function (b) {
            this.color.set = (b !== false);
            this.changed = true;
            switch (this.options.limit) {
                case"websafe":
                    this.color.limit(6);
                    break;
                case"nibble":
                    this.color.limit(16);
                    break;
                case"binary":
                    this.color.limit(2);
                    break;
                case"name":
                    var a = this._getSwatch(this._closestName(this.color));
                    this.color.setRGB(a.r, a.g, a.b);
                    break
            }
            if (!this.inline) {
                if (!this.color.set) {
                    this.element.val("")
                } else {
                    if (!this.color.equals(this._parseColor(this.element.val()))) {
                        this.element.val(this._formatColor(this.options.colorFormat, this.color))
                    }
                }
                this._setImageBackground();
                this._setAltField()
            }
            if (this.opened) {
                this._repaintAllParts()
            }
            this._callback("select")
        }, _hoverable: function (a) {
            a.hover(function () {
                a.addClass("ui-state-hover")
            }, function () {
                a.removeClass("ui-state-hover")
            })
        }, _focusable: function (a) {
            a.focus(function () {
                a.addClass("ui-state-focus")
            }).blur(function () {
                a.removeClass("ui-state-focus")
            })
        }, _getRegional: function (a) {
            return v.colorpicker.regional[this.options.regional][a] !== undefined ? v.colorpicker.regional[this.options.regional][a] : v.colorpicker.regional[""][a]
        }, _getSwatches: function () {
            if (typeof(this.options.swatches) === "string") {
                return v.colorpicker.swatches[this.options.swatches]
            }
            if (v.isPlainObject(this.options.swatches)) {
                return v.colorpicker.swatches
            }
            return v.colorpicker.swatches.html
        }, _getSwatch: function (c) {
            var a = this._getSwatches(), b = false;
            if (a[c] !== undefined) {
                return a[c]
            }
            v.each(a, function (e, d) {
                if (e.toLowerCase() == c.toLowerCase()) {
                    b = d;
                    return false
                }
                return true
            });
            return b
        }, _parseColor: function (b) {
            var a, c;
            if (b == "") {
                return new w()
            }
            a = this._getSwatch(v.trim(b));
            if (a) {
                return new w(a.r, a.g, a.b)
            }
            c = /^rgba?\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*(?:,\s*(\d+(?:\.\d+)?)\s*)?\)$/.exec(b);
            if (c) {
                return new w(c[1] / 255, c[2] / 255, c[3] / 255, parseFloat(c[4]))
            }
            c = /^hsla?\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*(?:,\s*(\d+(?:\.\d+)?)\s*)?\)$/.exec(b);
            if (c) {
                return (new w()).setHSL(c[1] / 255, c[2] / 255, c[3] / 255).setAlpha(parseFloat(c[4]))
            }
            c = /^rgba?\(\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d+(?:\.\d+)?)\s*)?\)$/.exec(b);
            if (c) {
                return new w(c[1] / 100, c[2] / 100, c[3] / 100, c[4] / 100)
            }
            c = /^hsla?\(\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d+(?:\.\d+)?)\s*)?\)$/.exec(b);
            if (c) {
                return (new w()).setHSL(c[1] / 100, c[2] / 100, c[3] / 100).setAlpha(c[4] / 100)
            }
            c = /^#([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})$/.exec(b);
            if (c) {
                return new w(parseInt(c[1], 16) / 255, parseInt(c[2], 16) / 255, parseInt(c[3], 16) / 255)
            }
            c = /^#([a-fA-F0-9])([a-fA-F0-9])([a-fA-F0-9])$/.exec(b);
            if (c) {
                return new w(parseInt(c[1] + c[1], 16) / 255, parseInt(c[2] + c[2], 16) / 255, parseInt(c[3] + c[3], 16) / 255)
            }
            return r(b)
        }, _exactName: function (a) {
            var b = false;
            v.each(this._getSwatches(), function (c, d) {
                if (a.equals(new w(d.r, d.g, d.b))) {
                    b = c;
                    return false
                }
                return true
            });
            return b
        }, _closestName: function (a) {
            var d = a.getRGB(), b = null, e = false, c;
            v.each(this._getSwatches(), function (f, g) {
                c = a.distance(new w(g.r, g.g, g.b));
                if (c < b || b === null) {
                    e = f;
                    if (c == 0) {
                        return false
                    }
                    b = c
                }
                return true
            });
            return e
        }, _formatColor: function (f, e) {
            var c = this, b = null, d = {
                x: function (g) {
                    return o(g * 255)
                }, d: function (g) {
                    return Math.round(g * 255)
                }, f: function (g) {
                    return g
                }, p: function (g) {
                    return g * 100
                }
            }, a = e.getChannels();
            if (!v.isArray(f)) {
                f = [f]
            }
            v.each(f, function (h, g) {
                if (c._formats[g]) {
                    b = c._formats[g](e, c);
                    return (b === false)
                } else {
                    b = g.replace(/\\?[argbhsvcmykLAB][xdfp]/g, function (k) {
                        if (k.match(/^\\/)) {
                            return k.slice(1)
                        }
                        return d[k.charAt(1)](a[k.charAt(0)])
                    });
                    return false
                }
            });
            return b
        }, _formats: {
            "#HEX": function (a, b) {
                return b._formatColor("#rxgxbx", a)
            }, "#HEX3": function (c, b) {
                var a = b._formats.HEX3(c);
                return a === false ? false : "#" + a
            }, HEX: function (a, b) {
                return b._formatColor("rxgxbx", a)
            }, HEX3: function (f, b) {
                var e = f.getRGB(), c = Math.round(e.r * 255), d = Math.round(e.g * 255), a = Math.round(e.b * 255);
                if (((c >>> 4) == (c &= 15)) && ((d >>> 4) == (d &= 15)) && ((a >>> 4) == (a &= 15))) {
                    return c.toString(16) + d.toString(16) + a.toString(16)
                }
                return false
            }, RGB: function (a, b) {
                return a.getAlpha() >= 1 ? b._formatColor("rgb(rd,gd,bd)", a) : false
            }, RGBA: function (a, b) {
                return b._formatColor("rgba(rd,gd,bd,af)", a)
            }, "RGB%": function (a, b) {
                return a.getAlpha() >= 1 ? b._formatColor("rgb(rp%,gp%,bp%)", a) : false
            }, "RGBA%": function (a, b) {
                return b._formatColor("rgba(rp%,gp%,bp%,af)", a)
            }, HSL: function (a, b) {
                return a.getAlpha() >= 1 ? b._formatColor("hsl(hd,sd,vd)", a) : false
            }, HSLA: function (a, b) {
                return b._formatColor("hsla(hd,sd,vd,af)", a)
            }, "HSL%": function (a, b) {
                return a.getAlpha() >= 1 ? b._formatColor("hsl(hp%,sp%,vp%)", a) : false
            }, "HSLA%": function (a, b) {
                return b._formatColor("hsla(hp%,sp%,vp%,af)", a)
            }, NAME: function (a, b) {
                return b._closestName(a)
            }, EXACT: function (a, b) {
                return b._exactName(a)
            }
        }
    })
}(jQuery));
/*
 * jQuery Cookie Plugin v1.3.1
 * https://github.com/carhartl/jquery-cookie
 *
 * Copyright 2013 Klaus Hartl
 * Released under the MIT license
 */
(function (b) {
    if (typeof define === "function" && define.amd) {
        define(["./jquery"], b)
    } else {
        b(jQuery)
    }
}(function (l) {
    var h = /\+/g;

    function m(a) {
        return a
    }

    function g(a) {
        return decodeURIComponent(a.replace(h, " "))
    }

    function k(b) {
        if (b.indexOf('"') === 0) {
            b = b.slice(1, -1).replace(/\\"/g, '"').replace(/\\\\/g, "\\")
        }
        try {
            return n.json ? JSON.parse(b) : b
        } catch (a) {
        }
    }

    var n = l.cookie = function (b, c, C) {
        if (c !== undefined) {
            C = l.extend({}, n.defaults, C);
            if (typeof C.expires === "number") {
                var a = C.expires, D = C.expires = new Date();
                D.setDate(D.getDate() + a)
            }
            c = n.json ? JSON.stringify(c) : String(c);
            return (document.cookie = [n.raw ? b : encodeURIComponent(b), "=", n.raw ? c : encodeURIComponent(c), C.expires ? "; expires=" + C.expires.toUTCString() : "", C.path ? "; path=" + C.path : "", C.domain ? "; domain=" + C.domain : "", C.secure ? "; secure" : ""].join(""))
        }
        var A = n.raw ? m : g;
        var E = document.cookie.split("; ");
        var B = b ? undefined : {};
        for (var d = 0, f = E.length; d < f; d++) {
            var e = E[d].split("=");
            var y = A(e.shift());
            var x = A(e.join("="));
            if (b && b === y) {
                B = k(x);
                break
            }
            if (!b) {
                B[y] = k(x)
            }
        }
        return B
    };
    n.defaults = {};
    l.removeCookie = function (a, b) {
        if (l.cookie(a) !== undefined) {
            l.cookie(a, "", l.extend({}, b, {expires: -1}));
            return true
        }
        return false
    }
}));
(function (h) {
    h.fn.dump = function () {
        return h.dump(this)
    };
    h.dump = function (b) {
        var c = function (d, r) {
            if (!r) {
                r = 0
            }
            var o = "", p = "";
            for (i = 0; i < r; i++) {
                p += "\t"
            }
            t = a(d);
            switch (t) {
                case"string":
                    return '"' + d + '"';
                    break;
                case"number":
                    return d.toString();
                    break;
                case"boolean":
                    return d ? "true" : "false";
                case"date":
                    return "Date: " + d.toLocaleString();
                case"array":
                    o += "Array ( \n";
                    h.each(d, function (k, l) {
                        o += p + "\t" + k + " => " + c(l, r + 1) + "\n"
                    });
                    o += p + ")";
                    break;
                case"object":
                    o += "Object { \n";
                    h.each(d, function (k, l) {
                        o += p + "\t" + k + ": " + c(l, r + 1) + "\n"
                    });
                    o += p + "}";
                    break;
                case"jquery":
                    o += "jQuery Object { \n";
                    h.each(d, function (k, l) {
                        o += p + "\t" + k + " = " + c(l, r + 1) + "\n"
                    });
                    o += p + "}";
                    break;
                case"regexp":
                    return "RegExp: " + d.toString();
                case"error":
                    return d.toString();
                case"document":
                case"domelement":
                    o += "DOMElement [ \n" + p + "\tnodeName: " + d.nodeName + "\n" + p + "\tnodeValue: " + d.nodeValue + "\n" + p + "\tinnerHTML: [ \n";
                    h.each(d.childNodes, function (l, m) {
                        if (l < 1) {
                            var k = 0
                        }
                        if (a(m) == "string") {
                            if (m.textContent.match(/[^\s]/)) {
                                o += p + "\t\t" + (l - (k || 0)) + " = String: " + f(m.textContent) + "\n"
                            } else {
                                k--
                            }
                        } else {
                            o += p + "\t\t" + (l - (k || 0)) + " = " + c(m, r + 2) + "\n"
                        }
                    });
                    o += p + "\t]\n" + p + "]";
                    break;
                case"function":
                    var q = d.toString().match(/^(.*)\(([^\)]*)\)/im);
                    q[1] = f(q[1].replace(new RegExp("[\\s]+", "g"), " "));
                    q[2] = f(q[2].replace(new RegExp("[\\s]+", "g"), " "));
                    return q[1] + "(" + q[2] + ")";
                case"window":
                default:
                    o += "N/A: " + t;
                    break
            }
            return o
        };
        var a = function (d) {
            var l = typeof(d);
            if (l != "object") {
                return l
            }
            switch (d) {
                case null:
                    return "null";
                case window:
                    return "window";
                case document:
                    return "document";
                case window.event:
                    return "event";
                default:
                    break
            }
            if (d.jquery) {
                return "jquery"
            }
            switch (d.constructor) {
                case Array:
                    return "array";
                case Boolean:
                    return "boolean";
                case Date:
                    return "date";
                case Object:
                    return "object";
                case RegExp:
                    return "regexp";
                case ReferenceError:
                case Error:
                    return "error";
                case null:
                default:
                    break
            }
            switch (d.nodeType) {
                case 1:
                    return "domelement";
                case 3:
                    return "string";
                case null:
                default:
                    break
            }
            return "Unknown"
        };
        return c(b)
    };
    function f(a) {
        return g(e(a))
    }

    function g(a) {
        return a.replace(new RegExp("^[\\s]+", "g"), "")
    }

    function e(a) {
        return a.replace(new RegExp("[\\s]+$", "g"), "")
    }
})(jQuery);
(function () {
    var b = {
        getSelection: function () {
            var a = (this.jquery) ? this[0] : this;
            return (("selectionStart" in a && function () {
                var d = a.selectionEnd - a.selectionStart;
                return {
                    start: a.selectionStart,
                    end: a.selectionEnd,
                    length: d,
                    text: a.value.substr(a.selectionStart, d)
                }
            }) || (document.selection && function () {
                a.focus();
                var g = document.selection.createRange();
                if (g === null) {
                    return {start: 0, end: a.value.length, length: 0}
                }
                var h = a.createTextRange();
                var f = h.duplicate();
                h.moveToBookmark(g.getBookmark());
                f.setEndPoint("EndToStart", h);
                return {
                    start: f.text.length,
                    end: f.text.length + g.text.length,
                    length: g.text.length,
                    text: g.text
                }
            }) || function () {
                return null
            })()
        }, setSelection: function () {
            var d = (this.jquery) ? this[0] : this;
            var a = arguments[0] || {};
            return (("selectionStart" in d && function () {
                var c = typeof a == "object" ? a.start : a;
                if (c != undefined) {
                    d.selectionStart = c
                }
                if (a.end != undefined) {
                    d.selectionEnd = a.end
                }
                d.focus();
                return this
            }) || (document.selection && function () {
                d.focus();
                var f = document.selection.createRange();
                if (f === null) {
                    return this
                }
                var c = typeof a == "object" ? a.start : a;
                if (c != undefined) {
                    f.moveStart("character", -d.value.length);
                    f.moveStart("character", c);
                    f.collapse()
                }
                if (a.end != undefined) {
                    f.moveEnd("character", a.end - c)
                }
                f.select();
                return this
            }) || function () {
                d.focus();
                return jQuery(d)
            })()
        }, replaceSelection: function () {
            var a = (this.jquery) ? this[0] : this;
            var d = arguments[0] || "";
            return (("selectionStart" in a && function () {
                a.value = a.value.substr(0, a.selectionStart) + d + a.value.substr(a.selectionEnd, a.value.length);
                return this
            }) || (document.selection && function () {
                a.focus();
                document.selection.createRange().text = d;
                return this
            }) || function () {
                a.value += d;
                return jQuery(a)
            })()
        }
    };
    jQuery.each(b, function (a) {
        jQuery.fn[a] = this
    })
})();
(function (b) {
    b.fn.hoverIntent = function (q, r) {
        var g = {sensitivity: 7, interval: 100, timeout: 0};
        g = b.extend(g, r ? {over: q, out: r} : q);
        var a, f, u, w;
        var v = function (c) {
            a = c.pageX;
            f = c.pageY
        };
        var x = function (c, d) {
            d.hoverIntent_t = clearTimeout(d.hoverIntent_t);
            if ((Math.abs(u - a) + Math.abs(w - f)) < g.sensitivity) {
                b(d).unbind("mousemove", v);
                d.hoverIntent_s = 1;
                return g.over.apply(d, [c])
            } else {
                u = a;
                w = f;
                d.hoverIntent_t = setTimeout(function () {
                    x(c, d)
                }, g.interval)
            }
        };
        var s = function (c, d) {
            d.hoverIntent_t = clearTimeout(d.hoverIntent_t);
            d.hoverIntent_s = 0;
            return g.out.apply(d, [c])
        };
        var y = function (e) {
            var c = jQuery.extend({}, e);
            var d = this;
            if (d.hoverIntent_t) {
                d.hoverIntent_t = clearTimeout(d.hoverIntent_t)
            }
            if (e.type == "mouseenter") {
                u = c.pageX;
                w = c.pageY;
                b(d).bind("mousemove", v);
                if (d.hoverIntent_s != 1) {
                    d.hoverIntent_t = setTimeout(function () {
                        x(c, d)
                    }, g.interval)
                }
            } else {
                b(d).unbind("mousemove", v);
                if (d.hoverIntent_s == 1) {
                    d.hoverIntent_t = setTimeout(function () {
                        s(c, d)
                    }, g.timeout)
                }
            }
        };
        return this.bind("mouseenter", y).bind("mouseleave", y)
    }
})(jQuery);
(function (ai) {
    function ak() {
    }

    function J(a) {
        al = [a]
    }

    function Y(a, c, b) {
        return a && a.apply(c.context || c, b)
    }

    function aa(a) {
        return /\?/.test(a) ? "&" : "?"
    }

    var W = "async", N = "charset", R = "", M = "error", L = "insertBefore", P = "_jqjsp", S = "on", ah = S + "click", ad = S + M, U = S + "load", V = S + "readystatechange", am = "readyState", O = "removeChild", ae = "<script>", T = "success", Q = "timeout", aj = window, an = ai.Deferred, ag = ai("head")[0] || document.documentElement, X = {}, ab = 0, al, ac = {
        callback: P,
        url: location.href
    }, Z = aj.opera, af = !!ai("<div>").html("<!--[if IE]><i><![endif]-->").find("i").length;

    function K(n) {
        n = ai.extend({}, ac, n);
        var p = n.success, g = n.error, q = n.complete, y = n.dataFilter, w = n.callbackParameter, f = n.callback, x = n.cache, r = n.pageCache, o = n.charset, m = n.url, u = n.data, d = n.timeout, h, B = 0, b = ak, e, k, s, v, l, a;
        an && an(function (C) {
            C.done(p).fail(g);
            p = C.resolve;
            g = C.reject
        }).promise(n);
        n.abort = function () {
            !(B++) && b()
        };
        if (Y(n.beforeSend, n, [n]) === !1 || B) {
            return n
        }
        m = m || R;
        u = u ? ((typeof u) == "string" ? u : ai.param(u, n.traditional)) : R;
        m += u ? (aa(m) + u) : R;
        w && (m += aa(m) + encodeURIComponent(w) + "=?");
        !x && !r && (m += aa(m) + "_" + (new Date()).getTime() + "=");
        m = m.replace(/=\?(&|$)/, "=" + f + "$1");
        function A(C) {
            if (!(B++)) {
                b();
                r && (X[m] = {s: [C]});
                y && (C = y.apply(n, [C]));
                Y(p, n, [C, T, n]);
                Y(q, n, [n, T])
            }
        }

        function c(C) {
            if (!(B++)) {
                b();
                r && C != Q && (X[m] = C);
                Y(g, n, [n, C]);
                Y(q, n, [n, C])
            }
        }

        if (r && (h = X[m])) {
            h.s ? A(h.s[0]) : c(h)
        } else {
            aj[f] = J;
            v = ai(ae)[0];
            v.id = P + ab++;
            if (o) {
                v[N] = o
            }
            Z && Z.version() < 11.6 ? ((l = ai(ae)[0]).text = "document.getElementById('" + v.id + "')." + ad + "()") : (v[W] = W);
            if (af) {
                v.htmlFor = v.id;
                v.event = ah
            }
            v[U] = v[ad] = v[V] = function (D) {
                if (!v[am] || !/i/.test(v[am])) {
                    try {
                        v[ah] && v[ah]()
                    } catch (C) {
                    }
                    D = al;
                    al = 0;
                    D ? A(D[0]) : c(M)
                }
            };
            v.src = m;
            b = function (C) {
                a && clearTimeout(a);
                v[V] = v[U] = v[ad] = null;
                ag[O](v);
                l && ag[O](l)
            };
            ag[L](v, (s = ag.firstChild));
            l && ag[L](l, s);
            a = d > 0 && setTimeout(function () {
                c(Q)
            }, d)
        }
        return n
    }

    K.setup = function (a) {
        ai.extend(ac, a)
    };
    ai.jsonp = K
})(jQuery);
(function () {
    var b = function (e, f, a) {
        e = jsPlumbUtil.isArray(e) ? e : [e.x, e.y];
        f = jsPlumbUtil.isArray(f) ? f : [f.x, f.y];
        return a(e, f)
    };
    jsPlumbUtil = {
        isArray: function (a) {
            return Object.prototype.toString.call(a) === "[object Array]"
        },
        isNumber: function (a) {
            return Object.prototype.toString.call(a) === "[object Number]"
        },
        isString: function (a) {
            return typeof a === "string"
        },
        isBoolean: function (a) {
            return typeof a === "boolean"
        },
        isNull: function (a) {
            return a == null
        },
        isObject: function (a) {
            return a == null ? false : Object.prototype.toString.call(a) === "[object Object]"
        },
        isDate: function (a) {
            return Object.prototype.toString.call(a) === "[object Date]"
        },
        isFunction: function (a) {
            return Object.prototype.toString.call(a) === "[object Function]"
        },
        clone: function (f) {
            if (this.isString(f)) {
                return "" + f
            } else {
                if (this.isBoolean(f)) {
                    return !!f
                } else {
                    if (this.isDate(f)) {
                        return new Date(f.getTime())
                    } else {
                        if (this.isFunction(f)) {
                            return f
                        } else {
                            if (this.isArray(f)) {
                                var g = [];
                                for (var a = 0; a < f.length; a++) {
                                    g.push(this.clone(f[a]))
                                }
                                return g
                            } else {
                                if (this.isObject(f)) {
                                    var g = {};
                                    for (var a in f) {
                                        g[a] = this.clone(f[a])
                                    }
                                    return g
                                } else {
                                    return f
                                }
                            }
                        }
                    }
                }
            }
        },
        merge: function (n, o) {
            var a = this.clone(n);
            for (var c in o) {
                if (a[c] == null || this.isString(o[c]) || this.isBoolean(o[c])) {
                    a[c] = o[c]
                } else {
                    if (this.isArray(o[c])) {
                        var m = [];
                        if (this.isArray(a[c])) {
                            m.push.apply(m, a[c])
                        }
                        m.push.apply(m, o[c]);
                        a[c] = m
                    } else {
                        if (this.isObject(o[c])) {
                            if (!this.isObject(a[c])) {
                                a[c] = {}
                            }
                            for (var l in o[c]) {
                                a[c][l] = o[c][l]
                            }
                        }
                    }
                }
            }
            return a
        },
        copyValues: function (h, f, g) {
            for (var a = 0; a < h.length; a++) {
                g[h[a]] = f[h[a]]
            }
        },
        functionChain: function (k, g, l) {
            for (var a = 0; a < l.length; a++) {
                var h = l[a][0][l[a][1]].apply(l[a][0], l[a][2]);
                if (h === g) {
                    return h
                }
            }
            return k
        },
        populate: function (g, h) {
            var a = function (c) {
                var e = c.match(/(\${.*?})/g);
                if (e != null) {
                    for (var l = 0; l < e.length; l++) {
                        var d = h[e[l].substring(2, e[l].length - 1)];
                        if (d != null) {
                            c = c.replace(e[l], d)
                        }
                    }
                }
                return c
            }, f = function (c) {
                if (c != null) {
                    if (jsPlumbUtil.isString(c)) {
                        return a(c)
                    } else {
                        if (jsPlumbUtil.isArray(c)) {
                            var d = [];
                            for (var e = 0; e < c.length; e++) {
                                d.push(f(c[e]))
                            }
                            return d
                        } else {
                            if (jsPlumbUtil.isObject(c)) {
                                var d = {};
                                for (var e in c) {
                                    d[e] = f(c[e])
                                }
                                return d
                            } else {
                                return c
                            }
                        }
                    }
                }
            };
            return f(g)
        },
        convertStyle: function (p, a) {
            if ("transparent" === p) {
                return p
            }
            var k = p, l = function (c) {
                return c.length == 1 ? "0" + c : c
            }, o = function (c) {
                return l(Number(c).toString(16))
            }, n = /(rgb[a]?\()(.*)(\))/;
            if (p.match(n)) {
                var m = p.match(n)[2].split(",");
                k = "#" + o(m[0]) + o(m[1]) + o(m[2]);
                if (!a && m.length == 4) {
                    k = k + o(m[3])
                }
            }
            return k
        },
        gradient: function (d, a) {
            return b(d, a, function (c, f) {
                if (f[0] == c[0]) {
                    return f[1] > c[1] ? Infinity : -Infinity
                } else {
                    if (f[1] == c[1]) {
                        return f[0] > c[0] ? 0 : -0
                    } else {
                        return (f[1] - c[1]) / (f[0] - c[0])
                    }
                }
            })
        },
        normal: function (d, a) {
            return -1 / this.gradient(d, a)
        },
        lineLength: function (d, a) {
            return b(d, a, function (c, f) {
                return Math.sqrt(Math.pow(f[1] - c[1], 2) + Math.pow(f[0] - c[0], 2))
            })
        },
        segment: function (d, a) {
            return b(d, a, function (c, f) {
                if (f[0] > c[0]) {
                    return (f[1] > c[1]) ? 2 : 1
                } else {
                    if (f[0] == c[0]) {
                        return f[1] > c[1] ? 2 : 1
                    } else {
                        return (f[1] > c[1]) ? 3 : 4
                    }
                }
            })
        },
        theta: function (d, a) {
            return b(d, a, function (l, m) {
                var n = jsPlumbUtil.gradient(l, m), k = Math.atan(n), c = jsPlumbUtil.segment(l, m);
                if ((c == 4 || c == 3)) {
                    k += Math.PI
                }
                if (k < 0) {
                    k += (2 * Math.PI)
                }
                return k
            })
        },
        intersects: function (q, r) {
            var u = q.x, w = q.x + q.w, a = q.y, o = q.y + q.h, s = r.x, v = r.x + r.w, n = r.y, p = r.y + r.h;
            return ((u <= s && s <= w) && (a <= n && n <= o)) || ((u <= v && v <= w) && (a <= n && n <= o)) || ((u <= s && s <= w) && (a <= p && p <= o)) || ((u <= v && s <= w) && (a <= p && p <= o)) || ((s <= u && u <= v) && (n <= a && a <= p)) || ((s <= w && w <= v) && (n <= a && a <= p)) || ((s <= u && u <= v) && (n <= o && o <= p)) || ((s <= w && u <= v) && (n <= o && o <= p))
        },
        segmentMultipliers: [null, [1, -1], [1, 1], [-1, 1], [-1, -1]],
        inverseSegmentMultipliers: [null, [-1, -1], [-1, 1], [1, 1], [1, -1]],
        pointOnLine: function (u, p, s) {
            var q = jsPlumbUtil.gradient(u, p), a = jsPlumbUtil.segment(u, p), m = s > 0 ? jsPlumbUtil.segmentMultipliers[a] : jsPlumbUtil.inverseSegmentMultipliers[a], r = Math.atan(q), o = Math.abs(s * Math.sin(r)) * m[1], n = Math.abs(s * Math.cos(r)) * m[0];
            return {x: u.x + n, y: u.y + o}
        },
        perpendicularLineTo: function (o, n, m) {
            var p = jsPlumbUtil.gradient(o, n), l = Math.atan(-1 / p), k = m / 2 * Math.sin(l), a = m / 2 * Math.cos(l);
            return [{x: n.x + a, y: n.y + k}, {x: n.x - a, y: n.y - k}]
        },
        findWithFunction: function (a, e) {
            if (a) {
                for (var f = 0; f < a.length; f++) {
                    if (e(a[f])) {
                        return f
                    }
                }
            }
            return -1
        },
        clampToGrid: function (a, h, m, k, l) {
            var n = function (g, f) {
                var c = g % f, e = Math.floor(g / f), d = c >= (f / 2) ? 1 : 0;
                return (e + d) * f
            };
            return [k || m == null ? a : n(a, m[0]), l || m == null ? h : n(h, m[1])]
        },
        indexOf: function (a, d) {
            return jsPlumbUtil.findWithFunction(a, function (c) {
                return c == d
            })
        },
        removeWithFunction: function (f, e) {
            var a = jsPlumbUtil.findWithFunction(f, e);
            if (a > -1) {
                f.splice(a, 1)
            }
            return a != -1
        },
        remove: function (f, e) {
            var a = jsPlumbUtil.indexOf(f, e);
            if (a > -1) {
                f.splice(a, 1)
            }
            return a != -1
        },
        addWithFunction: function (e, f, a) {
            if (jsPlumbUtil.findWithFunction(e, a) == -1) {
                e.push(f)
            }
        },
        addToList: function (f, h, g) {
            var a = f[h];
            if (a == null) {
                a = [], f[h] = a
            }
            a.push(g);
            return a
        },
        EventGenerator: function () {
            var g = {}, h = this, f = false;
            var a = ["ready"];
            this.bind = function (d, c) {
                jsPlumbUtil.addToList(g, d, c);
                return h
            };
            this.fire = function (e, d, n) {
                if (!f && g[e]) {
                    for (var m = 0; m < g[e].length; m++) {
                        if (jsPlumbUtil.findWithFunction(a, function (k) {
                            return k === e
                        }) != -1) {
                            g[e][m](d, n)
                        } else {
                            try {
                                g[e][m](d, n)
                            } catch (c) {
                                jsPlumbUtil.log("jsPlumb: fire failed for event " + e + " : " + c)
                            }
                        }
                    }
                }
                return h
            };
            this.unbind = function (c) {
                if (c) {
                    delete g[c]
                } else {
                    g = {}
                }
                return h
            };
            this.getListener = function (c) {
                return g[c]
            };
            this.setSuspendEvents = function (c) {
                f = c
            };
            this.isSuspendEvents = function () {
                return f
            }
        },
        logEnabled: true,
        log: function () {
            if (jsPlumbUtil.logEnabled && typeof console != "undefined") {
                try {
                    var d = arguments[arguments.length - 1];
                    console.log(d)
                } catch (a) {
                }
            }
        },
        group: function (a) {
            if (jsPlumbUtil.logEnabled && typeof console != "undefined") {
                console.group(a)
            }
        },
        groupEnd: function (a) {
            if (jsPlumbUtil.logEnabled && typeof console != "undefined") {
                console.groupEnd(a)
            }
        },
        time: function (a) {
            if (jsPlumbUtil.logEnabled && typeof console != "undefined") {
                console.time(a)
            }
        },
        timeEnd: function (a) {
            if (jsPlumbUtil.logEnabled && typeof console != "undefined") {
                console.timeEnd(a)
            }
        },
        removeElement: function (a) {
            if (a != null && a.parentNode != null) {
                a.parentNode.removeChild(a)
            }
        },
        removeElements: function (d) {
            for (var a = 0; a < d.length; a++) {
                jsPlumbUtil.removeElement(d[a])
            }
        }
    }
})();
(function () {
    var e = !!document.createElement("canvas").getContext, f = !!window.SVGAngle || document.implementation.hasFeature("http://www.w3.org/TR/SVG11/feature#BasicStructure", "1.1"), g = function () {
        if (g.vml == undefined) {
            var a = document.body.appendChild(document.createElement("div"));
            a.innerHTML = '<v:shape id="vml_flag1" adj="1" />';
            var b = a.firstChild;
            b.style.behavior = "url(#default#VML)";
            g.vml = b ? typeof b.adj == "object" : true;
            a.parentNode.removeChild(a)
        }
        return g.vml
    };
    var h = function (a) {
        var b = {}, c = [], m = {}, n = {}, d = {};
        this.register = function (u) {
            var v = jsPlumb.CurrentLibrary;
            u = v.getElementObject(u);
            var l = a.getId(u), w = v.getDOMElement(u), k = v.getOffset(u);
            if (!b[l]) {
                b[l] = u;
                c.push(u);
                m[l] = {}
            }
            var s = function (o, A) {
                if (o) {
                    for (var r = 0; r < o.childNodes.length; r++) {
                        if (o.childNodes[r].nodeType != 3 && o.childNodes[r].nodeType != 8) {
                            var p = v.getElementObject(o.childNodes[r]), B = a.getId(p, null, true);
                            if (B && n[B] && n[B] > 0) {
                                var q = v.getOffset(p);
                                m[l][B] = {
                                    id: B,
                                    offset: {
                                        left: q.left - k.left,
                                        top: q.top - k.top
                                    }
                                };
                                d[B] = l
                            }
                            s(o.childNodes[r])
                        }
                    }
                }
            };
            s(w)
        };
        this.updateOffsets = function (l) {
            var C = jsPlumb.CurrentLibrary, x = C.getElementObject(l), y = a.getId(x), w = m[y], A = C.getOffset(x);
            if (w) {
                for (var D in w) {
                    var B = C.getElementObject(D), k = C.getOffset(B);
                    m[y][D] = {
                        id: D,
                        offset: {left: k.left - A.left, top: k.top - A.top}
                    };
                    d[D] = y
                }
            }
        };
        this.endpointAdded = function (B) {
            var I = jsPlumb.CurrentLibrary, F = document.body, D = a.getId(B), G = I.getDOMElement(B), C = G.parentNode, k = C == F;
            n[D] = n[D] ? n[D] + 1 : 1;
            while (C != null && C != F) {
                var J = a.getId(C, null, true);
                if (J && b[J]) {
                    var p = -1, H = I.getElementObject(C), l = I.getOffset(H);
                    if (m[J][D] == null) {
                        var E = jsPlumb.CurrentLibrary.getOffset(B);
                        m[J][D] = {
                            id: D,
                            offset: {left: E.left - l.left, top: E.top - l.top}
                        };
                        d[D] = J
                    }
                    break
                }
                C = C.parentNode
            }
        };
        this.endpointDeleted = function (l) {
            if (n[l.elementId]) {
                n[l.elementId]--;
                if (n[l.elementId] <= 0) {
                    for (var k in m) {
                        if (m[k]) {
                            delete m[k][l.elementId];
                            delete d[l.elementId]
                        }
                    }
                }
            }
        };
        this.changeId = function (l, k) {
            m[k] = m[l];
            m[l] = {};
            d[k] = d[l];
            d[l] = null
        };
        this.getElementsForDraggable = function (k) {
            return m[k]
        };
        this.elementRemoved = function (k) {
            var l = d[k];
            if (l) {
                delete m[l][k];
                delete d[k]
            }
        };
        this.reset = function () {
            b = {};
            c = [];
            m = {};
            n = {}
        }
    };
    if (!window.console) {
        window.console = {
            time: function () {
            }, timeEnd: function () {
            }, group: function () {
            }, groupEnd: function () {
            }, log: function () {
            }
        }
    }
    window.jsPlumbAdapter = {
        headless: false, appendToRoot: function (a) {
            document.body.appendChild(a)
        }, getRenderModes: function () {
            return ["canvas", "svg", "vml"]
        }, isRenderModeAvailable: function (a) {
            return {canvas: e, svg: f, vml: g()}[a]
        }, getDragManager: function (a) {
            return new h(a)
        }, setRenderMode: function (a) {
            var b;
            if (a) {
                a = a.toLowerCase();
                var d = this.isRenderModeAvailable("canvas"), l = this.isRenderModeAvailable("svg"), c = this.isRenderModeAvailable("vml");
                if (a === "svg") {
                    if (l) {
                        b = "svg"
                    } else {
                        if (d) {
                            b = "canvas"
                        } else {
                            if (c) {
                                b = "vml"
                            }
                        }
                    }
                } else {
                    if (a === "canvas" && d) {
                        b = "canvas"
                    } else {
                        if (c) {
                            b = "vml"
                        }
                    }
                }
            }
            return b
        }
    }
})();
(function () {
    var ad = jsPlumbUtil.findWithFunction, K = jsPlumbUtil.indexOf, U = jsPlumbUtil.removeWithFunction, aa = jsPlumbUtil.remove, S = jsPlumbUtil.addWithFunction, ab = jsPlumbUtil.addToList, Z = jsPlumbUtil.isArray, W = jsPlumbUtil.isString, L = jsPlumbUtil.isObject;
    var Q = function (b, a) {
        return X.CurrentLibrary.getAttribute(af(b), a)
    }, ah = function (b, a, c) {
        X.CurrentLibrary.setAttribute(af(b), a, c)
    }, H = function (a, b) {
        X.CurrentLibrary.addClass(af(a), b)
    }, ac = function (a, b) {
        return X.CurrentLibrary.hasClass(af(a), b)
    }, Y = function (a, b) {
        X.CurrentLibrary.removeClass(af(a), b)
    }, af = function (a) {
        return X.CurrentLibrary.getElementObject(a)
    }, P = function (c, d) {
        var a = X.CurrentLibrary.getOffset(af(c));
        if (d != null) {
            var b = d.getZoom();
            return {left: a.left / b, top: a.top / b}
        } else {
            return a
        }
    }, aj = function (a) {
        return X.CurrentLibrary.getSize(af(a))
    }, V = jsPlumbUtil.log, N = jsPlumbUtil.group, ae = jsPlumbUtil.groupEnd, O = jsPlumbUtil.time, M = jsPlumbUtil.timeEnd, T = function () {
        return "" + (new Date()).getTime()
    }, R = window.jsPlumbUIComponent = function (y) {
        var f = this, x = arguments, h = false, p = y.parameters || {}, r = f.idPrefix, d = r + (new Date()).getTime(), e = null, w = null;
        f._jsPlumb = y._jsPlumb;
        f.getId = function () {
            return d
        };
        f.hoverClass = y.hoverClass || f._jsPlumb.Defaults.HoverClass || X.Defaults.HoverClass;
        jsPlumbUtil.EventGenerator.apply(this);
        if (y.events) {
            for (var c in y.events) {
                f.bind(c, y.events[c])
            }
        }
        this.clone = function () {
            var A = new Object();
            f.constructor.apply(A, x);
            return A
        };
        this.getParameter = function (A) {
            return p[A]
        }, this.getParameters = function () {
            return p
        }, this.setParameter = function (B, A) {
            p[B] = A
        }, this.setParameters = function (A) {
            p = A
        }, this.overlayPlacements = [];
        var q = y.beforeDetach;
        this.isDetachAllowed = function (C) {
            var B = true;
            if (q) {
                try {
                    B = q(C)
                } catch (A) {
                    V("jsPlumb: beforeDetach callback failed", A)
                }
            }
            return B
        };
        var n = y.beforeDrop;
        this.isDropAllowed = function (A, D, C, F, E) {
            var B = f._jsPlumb.checkCondition("beforeDrop", {
                sourceId: A,
                targetId: D,
                scope: C,
                connection: F,
                dropEndpoint: E
            });
            if (n) {
                try {
                    B = n({
                        sourceId: A,
                        targetId: D,
                        scope: C,
                        connection: F,
                        dropEndpoint: E
                    })
                } catch (G) {
                    V("jsPlumb: beforeDrop callback failed", G)
                }
            }
            return B
        };
        var b = function () {
            if (e && w) {
                var A = {};
                X.extend(A, e);
                X.extend(A, w);
                delete f.hoverPaintStyle;
                if (A.gradient && e.fillStyle) {
                    delete A.gradient
                }
                w = A
            }
        };
        this.setPaintStyle = function (B, A) {
            e = B;
            f.paintStyleInUse = e;
            b();
            if (!A) {
                f.repaint()
            }
        };
        this.getPaintStyle = function () {
            return e
        };
        this.setHoverPaintStyle = function (B, A) {
            w = B;
            b();
            if (!A) {
                f.repaint()
            }
        };
        this.getHoverPaintStyle = function () {
            return w
        };
        this.setHover = function (C, A, B) {
            if (!f._jsPlumb.currentlyDragging && !f._jsPlumb.isHoverSuspended()) {
                h = C;
                if (f.canvas != null) {
                    if (f.hoverClass != null) {
                        if (C) {
                            s.addClass(f.canvas, f.hoverClass)
                        } else {
                            s.removeClass(f.canvas, f.hoverClass)
                        }
                    }
                    if (C) {
                        s.addClass(f.canvas, f._jsPlumb.hoverClass)
                    } else {
                        s.removeClass(f.canvas, f._jsPlumb.hoverClass)
                    }
                }
                if (w != null) {
                    f.paintStyleInUse = C ? w : e;
                    if (!f._jsPlumb.isSuspendDrawing()) {
                        B = B || T();
                        f.repaint({timestamp: B, recalc: false})
                    }
                }
                if (f.getAttachedElements && !A) {
                    a(C, T(), f)
                }
            }
        };
        this.isHover = function () {
            return h
        };
        this.bindListeners = function (A, C, B) {
            A.bind("click", function (E, D) {
                C.fire("click", C, D)
            });
            A.bind("dblclick", function (E, D) {
                C.fire("dblclick", C, D)
            });
            A.bind("contextmenu", function (E, D) {
                C.fire("contextmenu", C, D)
            });
            A.bind("mouseenter", function (E, D) {
                if (!C.isHover()) {
                    B(true);
                    C.fire("mouseenter", C, D)
                }
            });
            A.bind("mouseexit", function (E, D) {
                if (C.isHover()) {
                    B(false);
                    C.fire("mouseexit", C, D)
                }
            });
            A.bind("mousedown", function (E, D) {
                C.fire("mousedown", C, D)
            });
            A.bind("mouseup", function (E, D) {
                C.fire("mouseup", C, D)
            })
        };
        var s = X.CurrentLibrary, u = ["click", "dblclick", "mouseenter", "mouseout", "mousemove", "mousedown", "mouseup", "contextmenu"], g = {mouseout: "mouseexit"}, o = function (B, A, C) {
            var D = g[C] || C;
            s.bind(B, C, function (E) {
                A.fire(D, A, E)
            })
        }, k = function (A, B) {
            var C = g[B] || B;
            s.unbind(A, B)
        };
        this.attachListeners = function (B, A) {
            for (var C = 0, D = u.length; C < D; C++) {
                o(B, A, u[C])
            }
        };
        var a = function (A, B, E) {
            var C = f.getAttachedElements();
            if (C) {
                for (var D = 0, F = C.length; D < F; D++) {
                    if (!E || E != C[D]) {
                        C[D].setHover(A, true, B)
                    }
                }
            }
        };
        this.reattachListenersForElement = function (A) {
            if (arguments.length > 1) {
                for (var B = 0, C = u.length; B < C; B++) {
                    k(A, u[B])
                }
                for (var B = 1, C = arguments.length; B < C; B++) {
                    f.attachListeners(A, arguments[B])
                }
            }
        };
        var v = [], m = function (A) {
            return A == null ? null : A.split(" ")
        }, l = function (B, D) {
            if (f.getDefaultType) {
                var A = f.getTypeDescriptor();
                var C = jsPlumbUtil.merge({}, f.getDefaultType());
                for (var E = 0, F = v.length; E < F; E++) {
                    C = jsPlumbUtil.merge(C, f._jsPlumb.getType(v[E], A))
                }
                if (B) {
                    C = jsPlumbUtil.populate(C, B)
                }
                f.applyType(C, D);
                if (!D) {
                    f.repaint()
                }
            }
        };
        f.setType = function (C, A, B) {
            v = m(C) || [];
            l(A, B)
        };
        f.getType = function () {
            return v
        };
        f.reapplyTypes = function (A, B) {
            l(A, B)
        };
        f.hasType = function (A) {
            return jsPlumbUtil.indexOf(v, A) != -1
        };
        f.addType = function (C, G, B) {
            var D = m(C), A = false;
            if (D != null) {
                for (var E = 0, F = D.length; E < F; E++) {
                    if (!f.hasType(D[E])) {
                        v.push(D[E]);
                        A = true
                    }
                }
                if (A) {
                    l(G, B)
                }
            }
        };
        f.removeType = function (B, A) {
            var D = m(B), G = false, C = function (am) {
                var an = jsPlumbUtil.indexOf(v, am);
                if (an != -1) {
                    v.splice(an, 1);
                    return true
                }
                return false
            };
            if (D != null) {
                for (var E = 0, F = D.length; E < F; E++) {
                    G = C(D[E]) || G
                }
                if (G) {
                    l(null, A)
                }
            }
        };
        f.toggleType = function (B, G, A) {
            var C = m(B);
            if (C != null) {
                for (var D = 0, E = C.length; D < E; D++) {
                    var F = jsPlumbUtil.indexOf(v, C[D]);
                    if (F != -1) {
                        v.splice(F, 1)
                    } else {
                        v.push(C[D])
                    }
                }
                l(G, A)
            }
        };
        this.applyType = function (B, A) {
            f.setPaintStyle(B.paintStyle, A);
            f.setHoverPaintStyle(B.hoverPaintStyle, A);
            if (B.parameters) {
                for (var C in B.parameters) {
                    f.setParameter(C, B.parameters[C])
                }
            }
        };
        this.addClass = function (A) {
            if (f.canvas != null) {
                H(f.canvas, A)
            }
        };
        this.removeClass = function (A) {
            if (f.canvas != null) {
                Y(f.canvas, A)
            }
        }
    }, I = window.overlayCapableJsPlumbUIComponent = function (k) {
        R.apply(this, arguments);
        var a = this;
        this.overlays = [];
        var m = function (s) {
            var q = null;
            if (Z(s)) {
                var r = s[0], u = X.extend({
                    component: a,
                    _jsPlumb: a._jsPlumb
                }, s[1]);
                if (s.length == 3) {
                    X.extend(u, s[2])
                }
                q = new X.Overlays[a._jsPlumb.getRenderMode()][r](u)
            } else {
                if (s.constructor == String) {
                    q = new X.Overlays[a._jsPlumb.getRenderMode()][s]({
                        component: a,
                        _jsPlumb: a._jsPlumb
                    })
                } else {
                    q = s
                }
            }
            a.overlays.push(q)
        }, l = function (u) {
            var r = a.defaultOverlayKeys || [], s = u.overlays, q = function (x) {
                return a._jsPlumb.Defaults[x] || X.Defaults[x] || []
            };
            if (!s) {
                s = []
            }
            for (var v = 0, w = r.length; v < w; v++) {
                s.unshift.apply(s, q(r[v]))
            }
            return s
        };
        var o = l(k);
        if (o) {
            for (var f = 0, h = o.length; f < h; f++) {
                m(o[f])
            }
        }
        var p = function (s) {
            var r = -1;
            for (var u = 0, q = a.overlays.length; u < q; u++) {
                if (s === a.overlays[u].id) {
                    r = u;
                    break
                }
            }
            return r
        };
        this.addOverlay = function (r, q) {
            m(r);
            if (!q) {
                a.repaint()
            }
        };
        this.getOverlay = function (q) {
            var r = p(q);
            return r >= 0 ? a.overlays[r] : null
        };
        this.getOverlays = function () {
            return a.overlays
        };
        this.hideOverlay = function (q) {
            var r = a.getOverlay(q);
            if (r) {
                r.hide()
            }
        };
        this.hideOverlays = function () {
            for (var q = 0, r = a.overlays.length; q < r; q++) {
                a.overlays[q].hide()
            }
        };
        this.showOverlay = function (q) {
            var r = a.getOverlay(q);
            if (r) {
                r.show()
            }
        };
        this.showOverlays = function () {
            for (var q = 0, r = a.overlays.length; q < r; q++) {
                a.overlays[q].show()
            }
        };
        this.removeAllOverlays = function () {
            for (var q = 0, r = a.overlays.length; q < r; q++) {
                if (a.overlays[q].cleanup) {
                    a.overlays[q].cleanup()
                }
            }
            a.overlays.splice(0, a.overlays.length);
            a.repaint()
        };
        this.removeOverlay = function (q) {
            var r = p(q);
            if (r != -1) {
                var s = a.overlays[r];
                if (s.cleanup) {
                    s.cleanup()
                }
                a.overlays.splice(r, 1)
            }
        };
        this.removeOverlays = function () {
            for (var q = 0, r = arguments.length; q < r; q++) {
                a.removeOverlay(arguments[q])
            }
        };
        var n = "__label", b = function (s) {
            var r = {
                cssClass: s.cssClass,
                labelStyle: this.labelStyle,
                id: n,
                component: a,
                _jsPlumb: a._jsPlumb
            }, q = X.extend(r, s);
            return new X.Overlays[a._jsPlumb.getRenderMode()].Label(q)
        };
        if (k.label) {
            var e = k.labelLocation || a.defaultLabelLocation || 0.5, d = k.labelStyle || a._jsPlumb.Defaults.LabelStyle || X.Defaults.LabelStyle;
            this.overlays.push(b({label: k.label, location: e, labelStyle: d}))
        }
        this.setLabel = function (r) {
            var q = a.getOverlay(n);
            if (!q) {
                var s = r.constructor == String || r.constructor == Function ? {label: r} : r;
                q = b(s);
                this.overlays.push(q)
            } else {
                if (r.constructor == String || r.constructor == Function) {
                    q.setLabel(r)
                } else {
                    if (r.label) {
                        q.setLabel(r.label)
                    }
                    if (r.location) {
                        q.setLocation(r.location)
                    }
                }
            }
            if (!a._jsPlumb.isSuspendDrawing()) {
                a.repaint()
            }
        };
        this.getLabel = function () {
            var q = a.getOverlay(n);
            return q != null ? q.getLabel() : null
        };
        this.getLabelOverlay = function () {
            return a.getOverlay(n)
        };
        var g = this.applyType;
        this.applyType = function (u, s) {
            g(u, s);
            a.removeAllOverlays();
            if (u.overlays) {
                for (var q = 0, r = u.overlays.length; q < r; q++) {
                    a.addOverlay(u.overlays[q], true)
                }
            }
        };
        var c = this.setHover;
        this.setHover = function (v, s, u) {
            c.apply(a, arguments);
            for (var q = 0, r = a.overlays.length; q < r; q++) {
                a.overlays[q][v ? "addClass" : "removeClass"](a._jsPlumb.hoverClass)
            }
        }
    };
    var ag = 0, ai = function () {
        var a = ag + 1;
        ag++;
        return a
    };
    var J = function (v) {
        this.Defaults = {
            Anchor: "BottomCenter",
            Anchors: [null, null],
            ConnectionsDetachable: true,
            ConnectionOverlays: [],
            Connector: "Bezier",
            Container: null,
            DoNotThrowErrors: false,
            DragOptions: {},
            DropOptions: {},
            Endpoint: "Dot",
            EndpointOverlays: [],
            Endpoints: [null, null],
            EndpointStyle: {fillStyle: "#456"},
            EndpointStyles: [null, null],
            EndpointHoverStyle: null,
            EndpointHoverStyles: [null, null],
            HoverPaintStyle: null,
            LabelStyle: {color: "black"},
            LogEnabled: false,
            Overlays: [],
            MaxConnections: 1,
            PaintStyle: {lineWidth: 8, strokeStyle: "#456"},
            ReattachConnections: false,
            RenderMode: "svg",
            Scope: "jsPlumb_DefaultScope"
        };
        if (v) {
            X.extend(this.Defaults, v)
        }
        this.logEnabled = this.Defaults.LogEnabled;
        var bt = {}, bb = {};
        this.registerConnectionType = function (ak, al) {
            bt[ak] = X.extend({}, al)
        };
        this.registerConnectionTypes = function (ak) {
            for (var al in ak) {
                bt[al] = X.extend({}, ak[al])
            }
        };
        this.registerEndpointType = function (ak, al) {
            bb[ak] = X.extend({}, al)
        };
        this.registerEndpointTypes = function (ak) {
            for (var al in ak) {
                bb[al] = X.extend({}, ak[al])
            }
        };
        this.getType = function (ak, al) {
            return al === "connection" ? bt[ak] : bb[ak]
        };
        jsPlumbUtil.EventGenerator.apply(this);
        var bM = this, w = ai(), bD = bM.bind, G = {}, d = 1;
        this.getInstanceIndex = function () {
            return w
        };
        this.setZoom = function (ak, al) {
            d = ak;
            if (al) {
                bM.repaintEverything()
            }
        };
        this.getZoom = function () {
            return d
        };
        for (var aq in this.Defaults) {
            G[aq] = this.Defaults[aq]
        }
        this.bind = function (ak, al) {
            if ("ready" === ak && s) {
                al()
            } else {
                bD.apply(bM, [ak, al])
            }
        };
        bM.importDefaults = function (ak) {
            for (var al in ak) {
                bM.Defaults[al] = ak[al]
            }
        };
        bM.restoreDefaults = function () {
            bM.Defaults = X.extend({}, G)
        };
        var p = null, bi = null, s = false, bd = null, bv = {}, bA = {}, by = {}, bc = {}, bK = {}, bh = {}, bN = {}, bG = [], bf = [], m = this.Defaults.Scope, g = null, bx = function (ak, al) {
            if (bM.Defaults.Container) {
                X.CurrentLibrary.appendElement(ak, bM.Defaults.Container)
            } else {
                if (!al) {
                    jsPlumbAdapter.appendToRoot(ak)
                } else {
                    X.CurrentLibrary.appendElement(ak, al)
                }
            }
        }, F = 1, a0 = function () {
            return "" + F++
        }, A = function (ak) {
            return ak._nodes ? ak._nodes : ak
        }, bm = function (ao, al, am, an) {
            if (!jsPlumbAdapter.headless && !bq) {
                var ak = Q(ao, "id"), aA = bM.dragManager.getElementsForDraggable(ak);
                if (am == null) {
                    am = T()
                }
                bM.anchorManager.redraw(ak, al, am, null, an);
                if (aA) {
                    for (var ap in aA) {
                        bM.anchorManager.redraw(aA[ap].id, al, am, aA[ap].offset, an)
                    }
                }
            }
        }, C = function (ao, am) {
            var al = null;
            if (Z(ao)) {
                al = [];
                for (var ap = 0, aA = ao.length; ap < aA; ap++) {
                    var an = af(ao[ap]), ak = Q(an, "id");
                    al.push(am(an, ak))
                }
            } else {
                var an = af(ao), ak = Q(an, "id");
                al = am(an, ak)
            }
            return al
        }, aw = function (ak) {
            return by[ak]
        }, bk = function (ap, aD, am) {
            if (!jsPlumbAdapter.headless) {
                var ak = aD == null ? false : aD, ao = X.CurrentLibrary;
                if (ak) {
                    if (ao.isDragSupported(ap) && !ao.isAlreadyDraggable(ap)) {
                        var al = am || bM.Defaults.DragOptions || X.Defaults.DragOptions;
                        al = X.extend({}, al);
                        var an = ao.dragEvents.drag, aC = ao.dragEvents.stop, aA = ao.dragEvents.start;
                        al[aA] = az(al[aA], function () {
                            bM.setHoverSuspended(true);
                            bM.select({source: ap}).addClass(bM.elementDraggingClass + " " + bM.sourceElementDraggingClass, true);
                            bM.select({target: ap}).addClass(bM.elementDraggingClass + " " + bM.targetElementDraggingClass, true)
                        });
                        al[an] = az(al[an], function () {
                            var aE = ao.getUIPosition(arguments, bM.getZoom());
                            bm(ap, aE, null, true);
                            H(ap, "jsPlumb_dragged")
                        });
                        al[aC] = az(al[aC], function () {
                            var aE = ao.getUIPosition(arguments, bM.getZoom());
                            bm(ap, aE);
                            Y(ap, "jsPlumb_dragged");
                            bM.setHoverSuspended(false);
                            bM.select({source: ap}).removeClass(bM.elementDraggingClass + " " + bM.sourceElementDraggingClass, true);
                            bM.select({target: ap}).removeClass(bM.elementDraggingClass + " " + bM.targetElementDraggingClass, true)
                        });
                        var aB = x(ap);
                        bN[aB] = true;
                        var ak = bN[aB];
                        al.disabled = ak == null ? false : !ak;
                        ao.initDraggable(ap, al, false, bM);
                        bM.dragManager.register(ap)
                    }
                }
            }
        }, ar = function (ap, al) {
            var aC = X.extend({sourceIsNew: true, targetIsNew: true}, ap);
            if (al) {
                X.extend(aC, al)
            }
            if (aC.source && aC.source.endpoint) {
                aC.sourceEndpoint = aC.source
            }
            if (aC.target && aC.target.endpoint) {
                aC.targetEndpoint = aC.target
            }
            if (ap.uuids) {
                aC.sourceEndpoint = aw(ap.uuids[0]);
                aC.targetEndpoint = aw(ap.uuids[1])
            }
            if (aC.sourceEndpoint && aC.sourceEndpoint.isFull()) {
                V(bM, "could not add connection; source endpoint is full");
                return
            }
            if (aC.targetEndpoint && aC.targetEndpoint.isFull()) {
                V(bM, "could not add connection; target endpoint is full");
                return
            }
            if (aC.sourceEndpoint && !aC.sourceEndpoint.addedViaMouse) {
                aC.sourceIsNew = false
            }
            if (aC.targetEndpoint && !aC.targetEndpoint.addedViaMouse) {
                aC.targetIsNew = false
            }
            if (!aC.type && aC.sourceEndpoint) {
                aC.type = aC.sourceEndpoint.connectionType
            }
            if (aC.sourceEndpoint && aC.sourceEndpoint.connectorOverlays) {
                aC.overlays = aC.overlays || [];
                for (var am = 0, an = aC.sourceEndpoint.connectorOverlays.length; am < an; am++) {
                    aC.overlays.push(aC.sourceEndpoint.connectorOverlays[am])
                }
            }
            if (!aC["pointer-events"] && aC.sourceEndpoint && aC.sourceEndpoint.connectorPointerEvents) {
                aC["pointer-events"] = aC.sourceEndpoint.connectorPointerEvents
            }
            if (aC.target && !aC.target.endpoint && !aC.targetEndpoint && !aC.newConnection) {
                var ao = x(aC.target), aB = bu[ao], aA = B[ao];
                if (aB) {
                    if (!ba[ao]) {
                        return
                    }
                    var ak = aA != null ? aA : bM.addEndpoint(aC.target, aB);
                    if (bg[ao]) {
                        B[ao] = ak
                    }
                    aC.targetEndpoint = ak;
                    ak._makeTargetCreator = true;
                    aC.targetIsNew = true
                }
            }
            if (aC.source && !aC.source.endpoint && !aC.sourceEndpoint && !aC.newConnection) {
                var ao = x(aC.source), aB = at[ao], aA = br[ao];
                if (aB) {
                    if (!c[ao]) {
                        return
                    }
                    var ak = aA != null ? aA : bM.addEndpoint(aC.source, aB);
                    if (bo[ao]) {
                        br[ao] = ak
                    }
                    aC.sourceEndpoint = ak;
                    aC.sourceIsNew = true
                }
            }
            return aC
        }, b = function (ak) {
            var al = bM.Defaults.ConnectionType || bM.getDefaultConnectionType(), am = bM.Defaults.EndpointType || X.Endpoint, an = X.CurrentLibrary.getParent;
            if (ak.container) {
                ak.parent = ak.container
            } else {
                if (ak.sourceEndpoint) {
                    ak.parent = ak.sourceEndpoint.parent
                } else {
                    if (ak.source.constructor == am) {
                        ak.parent = ak.source.parent
                    } else {
                        ak.parent = an(ak.source)
                    }
                }
            }
            ak._jsPlumb = bM;
            ak.newConnection = b;
            ak.newEndpoint = E;
            ak.endpointsByUUID = by;
            ak.endpointsByElement = bA;
            ak.finaliseConnection = bH;
            var ao = new al(ak);
            ao.id = "con_" + a0();
            bI("click", "click", ao);
            bI("dblclick", "dblclick", ao);
            bI("contextmenu", "contextmenu", ao);
            return ao
        }, bH = function (al, ak, an) {
            ak = ak || {};
            if (!al.suspendedEndpoint) {
                ab(bv, al.scope, al)
            }
            bM.anchorManager.newConnection(al);
            bm(al.source);
            if (!ak.doNotFireConnectionEvent && ak.fireEvent !== false) {
                var am = {
                    connection: al,
                    source: al.source,
                    target: al.target,
                    sourceId: al.sourceId,
                    targetId: al.targetId,
                    sourceEndpoint: al.endpoints[0],
                    targetEndpoint: al.endpoints[1]
                };
                bM.fire("jsPlumbConnection", am, an);
                bM.fire("connection", am, an)
            }
        }, bI = function (am, al, ak) {
            ak.bind(am, function (an, ao) {
                bM.fire(al, ak, ao)
            })
        }, av = function (ak) {
            if (ak.container) {
                return ak.container
            } else {
                var am = X.CurrentLibrary.getTagName(ak.source), al = X.CurrentLibrary.getParent(ak.source);
                if (am && am.toLowerCase() === "td") {
                    return X.CurrentLibrary.getParent(al)
                } else {
                    return al
                }
            }
        }, E = function (ak) {
            var al = bM.Defaults.EndpointType || X.Endpoint;
            var an = X.extend({}, ak);
            an.parent = av(an);
            an._jsPlumb = bM;
            an.newConnection = b;
            an.newEndpoint = E;
            an.endpointsByUUID = by;
            an.endpointsByElement = bA;
            an.finaliseConnection = bH;
            an.fireDetachEvent = bp;
            an.floatingConnections = bh;
            an.getParentFromParams = av;
            an.connectionsByScope = bv;
            var am = new al(an);
            am.id = "ep_" + a0();
            bI("click", "endpointClick", am);
            bI("dblclick", "endpointDblClick", am);
            bI("contextmenu", "contextmenu", am);
            if (!jsPlumbAdapter.headless) {
                bM.dragManager.endpointAdded(ak.source)
            }
            return am
        }, k = function (ap, aA, an) {
            var aB = bA[ap];
            if (aB && aB.length) {
                for (var am = 0, ak = aB.length; am < ak; am++) {
                    for (var ao = 0, al = aB[am].connections.length; ao < al; ao++) {
                        var aC = aA(aB[am].connections[ao]);
                        if (aC) {
                            return
                        }
                    }
                    if (an) {
                        an(aB[am])
                    }
                }
            }
        }, f = function (ak) {
            for (var al in bA) {
                k(al, ak)
            }
        }, bO = function (ak, al) {
            return C(ak, function (an, am) {
                bN[am] = al;
                if (X.CurrentLibrary.isDragSupported(an)) {
                    X.CurrentLibrary.setDraggable(an, al)
                }
            })
        }, bs = function (am, al, ao) {
            al = al === "block";
            var an = null;
            if (ao) {
                if (al) {
                    an = function (ap) {
                        ap.setVisible(true, true, true)
                    }
                } else {
                    an = function (ap) {
                        ap.setVisible(false, true, true)
                    }
                }
            }
            var ak = Q(am, "id");
            k(ak, function (ap) {
                if (al && ao) {
                    var aA = ap.sourceId === ak ? 1 : 0;
                    if (ap.endpoints[aA].isVisible()) {
                        ap.setVisible(true)
                    }
                } else {
                    ap.setVisible(al)
                }
            }, an)
        }, a = function (ak) {
            return C(ak, function (am, an) {
                var al = bN[an] == null ? false : bN[an];
                al = !al;
                bN[an] = al;
                X.CurrentLibrary.setDraggable(am, al);
                return al
            })
        }, bC = function (am, ak) {
            var al = null;
            if (ak) {
                al = function (ao) {
                    var an = ao.isVisible();
                    ao.setVisible(!an)
                }
            }
            k(am, function (an) {
                var ao = an.isVisible();
                an.setVisible(!ao)
            }, al)
        }, h = function (ak) {
            var am = ak.timestamp, ap = ak.recalc, al = ak.offset, ao = ak.elId;
            if (bq && !am) {
                am = bn
            }
            if (!ap) {
                if (am && am === bK[ao]) {
                    return {o: bc[ao], s: bf[ao]}
                }
            }
            if (ap || !al) {
                var an = af(ao);
                if (an != null) {
                    bf[ao] = aj(an);
                    bc[ao] = P(an, bM);
                    bK[ao] = am
                }
            } else {
                bc[ao] = al;
                if (bf[ao] == null) {
                    var an = af(ao);
                    if (an != null) {
                        bf[ao] = aj(an)
                    }
                }
            }
            if (bc[ao] && !bc[ao].right) {
                bc[ao].right = bc[ao].left + bf[ao][0];
                bc[ao].bottom = bc[ao].top + bf[ao][1];
                bc[ao].width = bf[ao][0];
                bc[ao].height = bf[ao][1];
                bc[ao].centerx = bc[ao].left + (bc[ao].width / 2);
                bc[ao].centery = bc[ao].top + (bc[ao].height / 2)
            }
            return {o: bc[ao], s: bf[ao]}
        }, bE = function (al) {
            var ak = bc[al];
            if (!ak) {
                return h({elId: al})
            } else {
                return {o: ak, s: bf[al]}
            }
        }, x = function (ao, an, al) {
            var am = af(ao);
            var ak = Q(am, "id");
            if (!ak || ak == "undefined") {
                if (arguments.length == 2 && arguments[1] != undefined) {
                    ak = an
                } else {
                    if (arguments.length == 1 || (arguments.length == 3 && !arguments[2])) {
                        ak = "jsPlumb_" + w + "_" + a0()
                    }
                }
                if (!al) {
                    ah(am, "id", ak)
                }
            }
            return ak
        }, az = function (ak, am, al) {
            ak = ak || function () {
            };
            am = am || function () {
            };
            return function () {
                var ao = null;
                try {
                    ao = am.apply(this, arguments)
                } catch (an) {
                    V(bM, "jsPlumb function failed : " + an)
                }
                if (al == null || (ao !== al)) {
                    try {
                        ak.apply(this, arguments)
                    } catch (an) {
                        V(bM, "wrapped function failed : " + an)
                    }
                }
                return ao
            }
        };
        this.isConnectionBeingDragged = function () {
            return bd != null
        };
        this.setConnectionBeingDragged = function (ak) {
            bd = ak
        };
        this.connectorClass = "_jsPlumb_connector";
        this.hoverClass = "_jsPlumb_hover";
        this.endpointClass = "_jsPlumb_endpoint";
        this.endpointConnectedClass = "_jsPlumb_endpoint_connected";
        this.endpointFullClass = "_jsPlumb_endpoint_full";
        this.endpointDropAllowedClass = "_jsPlumb_endpoint_drop_allowed";
        this.endpointDropForbiddenClass = "_jsPlumb_endpoint_drop_forbidden";
        this.overlayClass = "_jsPlumb_overlay";
        this.draggingClass = "_jsPlumb_dragging";
        this.elementDraggingClass = "_jsPlumb_element_dragging";
        this.sourceElementDraggingClass = "_jsPlumb_source_element_dragging";
        this.targetElementDraggingClass = "_jsPlumb_target_element_dragging";
        this.endpointAnchorClassPrefix = "_jsPlumb_endpoint_anchor";
        this.Anchors = {};
        this.Connectors = {canvas: {}, svg: {}, vml: {}};
        this.Endpoints = {canvas: {}, svg: {}, vml: {}};
        this.Overlays = {canvas: {}, svg: {}, vml: {}};
        this.ConnectorRenderers = {};
        this.addClass = function (ak, al) {
            return X.CurrentLibrary.addClass(ak, al)
        };
        this.removeClass = function (ak, al) {
            return X.CurrentLibrary.removeClass(ak, al)
        };
        this.hasClass = function (ak, al) {
            return X.CurrentLibrary.hasClass(ak, al)
        };
        this.addEndpoint = function (aF, aE, ak) {
            ak = ak || {};
            var aG = X.extend({}, ak);
            X.extend(aG, aE);
            aG.endpoint = aG.endpoint || bM.Defaults.Endpoint || X.Defaults.Endpoint;
            aG.paintStyle = aG.paintStyle || bM.Defaults.EndpointStyle || X.Defaults.EndpointStyle;
            aF = A(aF);
            var aC = [], ap = (Z(aF) || (aF.length != null && !W(aF))) ? aF : [aF];
            for (var aB = 0, aD = ap.length; aB < aD; aB++) {
                var am = af(ap[aB]), aH = x(am);
                aG.source = am;
                h({elId: aH, timestamp: bn});
                var an = E(aG);
                if (aG.parentAnchor) {
                    an.parentAnchor = aG.parentAnchor
                }
                ab(bA, aH, an);
                var ao = bc[aH], aA = bf[aH];
                var al = an.anchor.compute({
                    xy: [ao.left, ao.top],
                    wh: aA,
                    element: an,
                    timestamp: bn
                });
                var aI = {anchorLoc: al, timestamp: bn};
                if (bq) {
                    aI.recalc = false
                }
                if (!bq) {
                    an.paint(aI)
                }
                aC.push(an)
            }
            return aC.length == 1 ? aC[0] : aC
        };
        this.addEndpoints = function (al, ap, aA) {
            var am = [];
            for (var an = 0, ao = ap.length; an < ao; an++) {
                var ak = bM.addEndpoint(al, ap[an], aA);
                if (Z(ak)) {
                    Array.prototype.push.apply(am, ak)
                } else {
                    am.push(ak)
                }
            }
            return am
        };
        this.animate = function (ao, ap, aA) {
            var an = af(ao), ak = Q(ao, "id");
            aA = aA || {};
            var al = X.CurrentLibrary.dragEvents.step;
            var am = X.CurrentLibrary.dragEvents.complete;
            aA[al] = az(aA[al], function () {
                bM.repaint(ak)
            });
            aA[am] = az(aA[am], function () {
                bM.repaint(ak)
            });
            X.CurrentLibrary.animate(an, ap, aA)
        };
        this.checkCondition = function (an, al) {
            var aA = bM.getListener(an), am = true;
            if (aA && aA.length > 0) {
                try {
                    for (var ao = 0, ap = aA.length; ao < ap; ao++) {
                        am = am && aA[ao](al)
                    }
                } catch (ak) {
                    V(bM, "cannot check condition [" + an + "]" + ak)
                }
            }
            return am
        };
        this.checkASyncCondition = function (an, al, am, ao) {
            var ap = bM.getListener(an);
            if (ap && ap.length > 0) {
                try {
                    ap[0](al, am, ao)
                } catch (ak) {
                    V(bM, "cannot asynchronously check condition [" + an + "]" + ak)
                }
            }
        };
        this.connect = function (ak, am) {
            var an = ar(ak, am), al;
            if (an) {
                if (an.deleteEndpointsOnDetach == null) {
                    an.deleteEndpointsOnDetach = true
                }
                al = b(an);
                bH(al, an)
            }
            return al
        };
        this.deleteEndpoint = function (ak, al) {
            bM.doWhileSuspended(function () {
                var am = (typeof ak == "string") ? by[ak] : ak;
                if (am) {
                    var ap = am.getUuid();
                    if (ap) {
                        by[ap] = null
                    }
                    am.detachAll().cleanup();
                    if (am.endpoint.cleanup) {
                        am.endpoint.cleanup()
                    }
                    jsPlumbUtil.removeElements(am.endpoint.getDisplayElements());
                    bM.anchorManager.deleteEndpoint(am);
                    for (var an in bA) {
                        var aC = bA[an];
                        if (aC) {
                            var ao = [];
                            for (var aA = 0, aB = aC.length; aA < aB; aA++) {
                                if (aC[aA] != am) {
                                    ao.push(aC[aA])
                                }
                            }
                            bA[an] = ao
                        }
                        if (bA[an].length < 1) {
                            delete bA[an]
                        }
                    }
                    if (!jsPlumbAdapter.headless) {
                        bM.dragManager.endpointDeleted(am)
                    }
                }
                return bM
            }, al)
        };
        this.deleteEveryEndpoint = function () {
            bM.doWhileSuspended(function () {
                for (var ak in bA) {
                    var an = bA[ak];
                    if (an && an.length) {
                        for (var al = 0, am = an.length; al < am; al++) {
                            bM.deleteEndpoint(an[al], true)
                        }
                    }
                }
                bA = {};
                by = {};
                bM.anchorManager.reset();
                bM.dragManager.reset()
            });
            return bM
        };
        var bp = function (am, ak, ap) {
            var an = bM.Defaults.ConnectionType || bM.getDefaultConnectionType(), ao = am.constructor == an, al = ao ? {
                connection: am,
                source: am.source,
                target: am.target,
                sourceId: am.sourceId,
                targetId: am.targetId,
                sourceEndpoint: am.endpoints[0],
                targetEndpoint: am.endpoints[1]
            } : am;
            if (ak) {
                bM.fire("jsPlumbConnectionDetached", al, ap);
                bM.fire("connectionDetached", al, ap)
            }
            bM.anchorManager.connectionDetached(al)
        };
        this.detach = function () {
            if (arguments.length == 0) {
                return
            }
            var ao = bM.Defaults.ConnectionType || bM.getDefaultConnectionType(), an = arguments[0].constructor == ao, ap = arguments.length == 2 ? an ? (arguments[1] || {}) : arguments[0] : arguments[0], ak = (ap.fireEvent !== false), aB = ap.forceDetach, aA = an ? arguments[0] : ap.connection;
            if (aA) {
                if (aB || jsPlumbUtil.functionChain(true, false, [[aA.endpoints[0], "isDetachAllowed", [aA]], [aA.endpoints[1], "isDetachAllowed", [aA]], [aA, "isDetachAllowed", [aA]], [bM, "checkCondition", ["beforeDetach", aA]]])) {
                    aA.endpoints[0].detach(aA, false, true, ak)
                }
            } else {
                var aC = X.extend({}, ap);
                if (aC.uuids) {
                    aw(aC.uuids[0]).detachFrom(aw(aC.uuids[1]), ak)
                } else {
                    if (aC.sourceEndpoint && aC.targetEndpoint) {
                        aC.sourceEndpoint.detachFrom(aC.targetEndpoint)
                    } else {
                        var al = x(aC.source), am = x(aC.target);
                        k(al, function (aD) {
                            if ((aD.sourceId == al && aD.targetId == am) || (aD.targetId == al && aD.sourceId == am)) {
                                if (bM.checkCondition("beforeDetach", aD)) {
                                    aD.endpoints[0].detach(aD, false, true, ak)
                                }
                            }
                        })
                    }
                }
            }
        };
        this.detachAllConnections = function (am, al) {
            al = al || {};
            am = af(am);
            var ak = Q(am, "id"), ap = bA[ak];
            if (ap && ap.length) {
                for (var an = 0, ao = ap.length; an < ao; an++) {
                    ap[an].detachAll(al.fireEvent)
                }
            }
            return bM
        };
        this.detachEveryConnection = function (al) {
            al = al || {};
            for (var ak in bA) {
                var ao = bA[ak];
                if (ao && ao.length) {
                    for (var am = 0, an = ao.length; am < an; am++) {
                        ao[am].detachAll(al.fireEvent)
                    }
                }
            }
            bv = {};
            return bM
        };
        this.draggable = function (al, an) {
            if (typeof al == "object" && al.length) {
                for (var am = 0, ao = al.length; am < ao; am++) {
                    var ak = af(al[am]);
                    if (ak) {
                        bk(ak, true, an)
                    }
                }
            } else {
                if (al._nodes) {
                    for (var am = 0, ao = al._nodes.length; am < ao; am++) {
                        var ak = af(al._nodes[am]);
                        if (ak) {
                            bk(ak, true, an)
                        }
                    }
                } else {
                    var ak = af(al);
                    if (ak) {
                        bk(ak, true, an)
                    }
                }
            }
            return bM
        };
        this.extend = function (ak, al) {
            return X.CurrentLibrary.extend(ak, al)
        };
        this.getDefaultEndpointType = function () {
            return X.Endpoint
        };
        this.getDefaultConnectionType = function () {
            return X.Connection
        };
        var bL = function (ak, al, an, ap) {
            for (var am = 0, ao = ak.length; am < ao; am++) {
                ak[am][al].apply(ak[am], an)
            }
            return ap(ak)
        }, l = function (ak, al, an) {
            var ao = [];
            for (var am = 0, ap = ak.length; am < ap; am++) {
                ao.push([ak[am][al].apply(ak[am], an), ak[am]])
            }
            return ao
        }, ay = function (ak, al, am) {
            return function () {
                return bL(ak, al, arguments, am)
            }
        }, au = function (ak, al) {
            return function () {
                return l(ak, al, arguments)
            }
        }, bJ = function (ao, ak) {
            var al = [];
            if (ao) {
                if (typeof ao == "string") {
                    if (ao === "*") {
                        return ao
                    }
                    al.push(ao)
                } else {
                    if (ak) {
                        al = ao
                    } else {
                        for (var am = 0, an = ao.length; am < an; am++) {
                            al.push(x(af(ao[am])))
                        }
                    }
                }
            }
            return al
        }, D = function (ak, al, am) {
            if (ak === "*") {
                return true
            }
            return ak.length > 0 ? K(ak, al) != -1 : !am
        };
        this.getConnections = function (al, aE) {
            if (!al) {
                al = {}
            } else {
                if (al.constructor == String) {
                    al = {scope: al}
                }
            }
            var am = al.scope || bM.getDefaultScope(), an = bJ(am, true), aF = bJ(al.source), ap = bJ(al.target), aB = (!aE && an.length > 1) ? {} : [], ak = function (aH, aG) {
                if (!aE && an.length > 1) {
                    var aI = aB[aH];
                    if (aI == null) {
                        aI = [];
                        aB[aH] = aI
                    }
                    aI.push(aG)
                } else {
                    aB.push(aG)
                }
            };
            for (var aC in bv) {
                if (D(an, aC)) {
                    for (var aD = 0, aA = bv[aC].length; aD < aA; aD++) {
                        var ao = bv[aC][aD];
                        if (D(aF, ao.sourceId) && D(ap, ao.targetId)) {
                            ak(aC, ao)
                        }
                    }
                }
            }
            return aB
        };
        var r = function (al, ak) {
            return function (am) {
                for (var ao = 0, an = al.length; ao < an; ao++) {
                    am(al[ao])
                }
                return ak(al)
            }
        }, o = function (ak) {
            return function (al) {
                return ak[al]
            }
        };
        var n = function (al, ak) {
            var aA = {
                length: al.length,
                each: r(al, ak),
                get: o(al)
            }, am = ["setHover", "removeAllOverlays", "setLabel", "addClass", "addOverlay", "removeOverlay", "removeOverlays", "showOverlay", "hideOverlay", "showOverlays", "hideOverlays", "setPaintStyle", "setHoverPaintStyle", "setSuspendEvents", "setParameter", "setParameters", "setVisible", "repaint", "addType", "toggleType", "removeType", "removeClass", "setType", "bind", "unbind"], an = ["getLabel", "getOverlay", "isHover", "getParameter", "getParameters", "getPaintStyle", "getHoverPaintStyle", "isVisible", "hasType", "getType", "isSuspendEvents"];
            for (var ap = 0, ao = am.length; ap < ao; ap++) {
                aA[am[ap]] = ay(al, am[ap], ak)
            }
            for (var ap = 0, ao = an.length; ap < ao; ap++) {
                aA[an[ap]] = au(al, an[ap])
            }
            return aA
        };
        var y = function (ak) {
            var al = n(ak, y);
            return X.CurrentLibrary.extend(al, {
                setDetachable: ay(ak, "setDetachable", y),
                setReattach: ay(ak, "setReattach", y),
                setConnector: ay(ak, "setConnector", y),
                detach: function () {
                    for (var an = 0, am = ak.length; an < am; an++) {
                        bM.detach(ak[an])
                    }
                },
                isDetachable: au(ak, "isDetachable"),
                isReattach: au(ak, "isReattach")
            })
        };
        var bl = function (ak) {
            var al = n(ak, bl);
            return X.CurrentLibrary.extend(al, {
                setEnabled: ay(ak, "setEnabled", bl),
                setAnchor: ay(ak, "setAnchor", bl),
                isEnabled: au(ak, "isEnabled"),
                detachAll: function () {
                    for (var an = 0, am = ak.length; an < am; an++) {
                        ak[an].detachAll()
                    }
                },
                remove: function () {
                    for (var an = 0, am = ak.length; an < am; an++) {
                        bM.deleteEndpoint(ak[an])
                    }
                }
            })
        };
        this.select = function (al) {
            al = al || {};
            al.scope = al.scope || "*";
            var ak = al.connections || bM.getConnections(al, true);
            return y(ak)
        };
        this.selectEndpoints = function (am) {
            am = am || {};
            am.scope = am.scope || "*";
            var aE = !am.element && !am.source && !am.target, aB = aE ? "*" : bJ(am.element), aH = aE ? "*" : bJ(am.source), aK = aE ? "*" : bJ(am.target), ap = bJ(am.scope, true);
            var aI = [];
            for (var aG in bA) {
                var al = D(aB, aG, true), ao = D(aH, aG, true), aL = aH != "*", aJ = D(aK, aG, true), aC = aK != "*";
                if (al || ao || aJ) {
                    inner:for (var an = 0, aD = bA[aG].length; an < aD; an++) {
                        var aA = bA[aG][an];
                        if (D(ap, aA.scope, true)) {
                            var ak = (aL && aH.length > 0 && !aA.isSource), aF = (aC && aK.length > 0 && !aA.isTarget);
                            if (ak || aF) {
                                continue inner
                            }
                            aI.push(aA)
                        }
                    }
                }
            }
            return bl(aI)
        };
        this.getAllConnections = function () {
            return bv
        };
        this.getDefaultScope = function () {
            return m
        };
        this.getEndpoint = aw;
        this.getEndpoints = function (ak) {
            return bA[x(ak)]
        };
        this.getId = x;
        this.getOffset = function (ak) {
            var al = bc[ak];
            return h({elId: ak})
        };
        this.getSelector = function () {
            return X.CurrentLibrary.getSelector.apply(null, arguments)
        };
        this.getSize = function (ak) {
            var al = bf[ak];
            if (!al) {
                h({elId: ak})
            }
            return bf[ak]
        };
        this.appendElement = bx;
        var bB = false;
        this.isHoverSuspended = function () {
            return bB
        };
        this.setHoverSuspended = function (ak) {
            bB = ak
        };
        var bw = function (ak) {
            return function () {
                return jsPlumbAdapter.isRenderModeAvailable(ak)
            }
        };
        this.isCanvasAvailable = bw("canvas");
        this.isSVGAvailable = bw("svg");
        this.isVMLAvailable = bw("vml");
        this.hide = function (al, ak) {
            bs(al, "none", ak);
            return bM
        };
        this.idstamp = a0;
        this.init = function () {
            if (!s) {
                bM.anchorManager = new X.AnchorManager({jsPlumbInstance: bM});
                bM.setRenderMode(bM.Defaults.RenderMode);
                s = true;
                bM.fire("ready", bM)
            }
        };
        this.log = p;
        this.jsPlumbUIComponent = R;
        this.makeAnchor = function () {
            var am = function (aC, aB) {
                if (X.Anchors[aC]) {
                    return new X.Anchors[aC](aB)
                }
                if (!bM.Defaults.DoNotThrowErrors) {
                    throw {msg: "jsPlumb: unknown anchor type '" + aC + "'"}
                }
            };
            if (arguments.length == 0) {
                return null
            }
            var ak = arguments[0], ao = arguments[1], ap = arguments[2], an = null;
            if (ak.compute && ak.getOrientation) {
                return ak
            } else {
                if (typeof ak == "string") {
                    an = am(arguments[0], {elementId: ao, jsPlumbInstance: bM})
                } else {
                    if (Z(ak)) {
                        if (Z(ak[0]) || W(ak[0])) {
                            if (ak.length == 2 && W(ak[0]) && L(ak[1])) {
                                var aA = X.extend({
                                    elementId: ao,
                                    jsPlumbInstance: bM
                                }, ak[1]);
                                an = am(ak[0], aA)
                            } else {
                                an = new X.DynamicAnchor({
                                    anchors: ak,
                                    selector: null,
                                    elementId: ao,
                                    jsPlumbInstance: ap
                                })
                            }
                        } else {
                            var al = {
                                x: ak[0],
                                y: ak[1],
                                orientation: (ak.length >= 4) ? [ak[2], ak[3]] : [0, 0],
                                offsets: (ak.length >= 6) ? [ak[4], ak[5]] : [0, 0],
                                elementId: ao,
                                jsPlumbInstance: ap,
                                cssClass: ak.length == 7 ? ak[6] : null
                            };
                            an = new X.Anchor(al);
                            an.clone = function () {
                                return new X.Anchor(al)
                            }
                        }
                    }
                }
            }
            if (!an.id) {
                an.id = "anchor_" + a0()
            }
            return an
        };
        this.makeAnchors = function (am, ao, ap) {
            var ak = [];
            for (var an = 0, al = am.length; an < al; an++) {
                if (typeof am[an] == "string") {
                    ak.push(X.Anchors[am[an]]({
                        elementId: ao,
                        jsPlumbInstance: ap
                    }))
                } else {
                    if (Z(am[an])) {
                        ak.push(bM.makeAnchor(am[an], ao, ap))
                    }
                }
            }
            return ak
        };
        this.makeDynamicAnchor = function (al, ak) {
            return new X.DynamicAnchor({
                anchors: al,
                selector: ak,
                elementId: null,
                jsPlumbInstance: bM
            })
        };
        var bu = {}, B = {}, bg = {}, ax = {}, e = function (al, ak) {
            al.paintStyle = al.paintStyle || bM.Defaults.EndpointStyles[ak] || bM.Defaults.EndpointStyle || X.Defaults.EndpointStyles[ak] || X.Defaults.EndpointStyle;
            al.hoverPaintStyle = al.hoverPaintStyle || bM.Defaults.EndpointHoverStyles[ak] || bM.Defaults.EndpointHoverStyle || X.Defaults.EndpointHoverStyles[ak] || X.Defaults.EndpointHoverStyle;
            al.anchor = al.anchor || bM.Defaults.Anchors[ak] || bM.Defaults.Anchor || X.Defaults.Anchors[ak] || X.Defaults.Anchor;
            al.endpoint = al.endpoint || bM.Defaults.Endpoints[ak] || bM.Defaults.Endpoint || X.Defaults.Endpoints[ak] || X.Defaults.Endpoint
        };
        this.makeTarget = function (aC, aB, ak) {
            var aE = X.extend({_jsPlumb: bM}, ak);
            X.extend(aE, aB);
            e(aE, 1);
            var an = X.CurrentLibrary, am = aE.scope || bM.Defaults.Scope, aA = !(aE.deleteEndpointsOnDetach === false), aD = aE.maxConnections || -1, aF = aE.onMaxConnections;
            _doOne = function (aG) {
                var aI = x(aG);
                bu[aI] = aE;
                bg[aI] = aE.uniqueEndpoint, ax[aI] = aD, ba[aI] = true, proxyComponent = new R(aE);
                var aJ = X.extend({}, aE.dropOptions || {}), aK = function () {
                    var aU = X.CurrentLibrary.getDropEvent(arguments), aR = bM.select({target: aI}).length;
                    bM.currentlyDragging = false;
                    var aT = af(an.getDragObject(arguments)), aS = Q(aT, "dragId"), aX = Q(aT, "originalScope"), aM = bh[aS], aW = aM.endpoints[0], aY = aE.endpoint ? X.extend({}, aE.endpoint) : {};
                    if (!ba[aI] || ax[aI] > 0 && aR >= ax[aI]) {
                        if (aF) {
                            aF({element: aG, connection: aM}, aU)
                        }
                        return false
                    }
                    aW.anchor.locked = false;
                    if (aX) {
                        an.setDragScope(aT, aX)
                    }
                    var aO = proxyComponent.isDropAllowed(aM.sourceId, x(aG), aM.scope, aM, null);
                    if (aM.endpointsToDeleteOnDetach) {
                        if (aW === aM.endpointsToDeleteOnDetach[0]) {
                            aM.endpointsToDeleteOnDetach[0] = null
                        } else {
                            if (aW === aM.endpointsToDeleteOnDetach[1]) {
                                aM.endpointsToDeleteOnDetach[1] = null
                            }
                        }
                    }
                    if (aM.suspendedEndpoint) {
                        aM.targetId = aM.suspendedEndpoint.elementId;
                        aM.target = an.getElementObject(aM.suspendedEndpoint.elementId);
                        aM.endpoints[1] = aM.suspendedEndpoint
                    }
                    if (aO) {
                        aW.detach(aM, false, true, false);
                        var aV = B[aI] || bM.addEndpoint(aG, aE);
                        if (aE.uniqueEndpoint) {
                            B[aI] = aV
                        }
                        aV._makeTargetCreator = true;
                        if (aV.anchor.positionFinder != null) {
                            var aL = an.getUIPosition(arguments, bM.getZoom()), aP = P(aG, bM), aZ = aj(aG), aQ = aV.anchor.positionFinder(aL, aP, aZ, aV.anchor.constructorParams);
                            aV.anchor.x = aQ[0];
                            aV.anchor.y = aQ[1]
                        }
                        var aN = bM.connect({
                            source: aW,
                            target: aV,
                            scope: aX,
                            previousConnection: aM,
                            container: aM.parent,
                            deleteEndpointsOnDetach: aA,
                            endpointsToDeleteOnDetach: aA ? [aW, aV] : null,
                            doNotFireConnectionEvent: aW.endpointWillMoveAfterConnection
                        });
                        if (aM.endpoints[1]._makeTargetCreator && aM.endpoints[1].connections.length < 2) {
                            bM.deleteEndpoint(aM.endpoints[1])
                        }
                        aN.repaint()
                    } else {
                        if (aM.suspendedEndpoint) {
                            if (aM.isReattach()) {
                                aM.setHover(false);
                                aM.floatingAnchorIndex = null;
                                aM.suspendedEndpoint.addConnection(aM);
                                bM.repaint(aW.elementId)
                            } else {
                                aW.detach(aM, false, true, true, aU)
                            }
                        }
                    }
                };
                var aH = an.dragEvents.drop;
                aJ.scope = aJ.scope || am;
                aJ[aH] = az(aJ[aH], aK);
                an.initDroppable(aG, aJ, true)
            };
            aC = A(aC);
            var ao = aC.length && aC.constructor != String ? aC : [aC];
            for (var ap = 0, al = ao.length; ap < al; ap++) {
                _doOne(af(ao[ap]))
            }
            return bM
        };
        this.unmakeTarget = function (al, ak) {
            al = X.CurrentLibrary.getElementObject(al);
            var am = x(al);
            if (!ak) {
                delete bu[am];
                delete bg[am];
                delete ax[am];
                delete ba[am]
            }
            return bM
        };
        this.makeTargets = function (am, ak, ao) {
            for (var an = 0, al = am.length; an < al; an++) {
                bM.makeTarget(am[an], ak, ao)
            }
        };
        var at = {}, br = {}, bo = {}, c = {}, u = {}, q = {}, ba = {}, bz = function (ap, ak, aA) {
            var am = ap.target || ap.srcElement, an = false, al = bM.getSelector(ak, aA);
            for (var ao = 0; ao < al.length; ao++) {
                if (al[ao] == am) {
                    an = true;
                    break
                }
            }
            return an
        };
        this.makeSource = function (aA, ap, ak) {
            var aC = X.extend({}, ak);
            X.extend(aC, ap);
            e(aC, 0);
            var am = X.CurrentLibrary, aB = aC.maxConnections || -1, aD = aC.onMaxConnections, aE = function (aO) {
                var aI = x(aO), aM = function () {
                    return aC.parent == null ? aC.parent : aC.parent === "parent" ? am.getElementObject(am.getDOMElement(aO).parentNode) : am.getElementObject(aC.parent)
                }, aJ = aC.parent != null ? bM.getId(aM()) : aI;
                at[aJ] = aC;
                bo[aJ] = aC.uniqueEndpoint;
                c[aJ] = true;
                var aH = am.dragEvents.stop, aP = am.dragEvents.drag, aN = X.extend({}, aC.dragOptions || {}), aF = aN.drag, aL = aN.stop, aK = null, aQ = false;
                q[aJ] = aB;
                aN.scope = aN.scope || aC.scope;
                aN[aP] = az(aN[aP], function () {
                    if (aF) {
                        aF.apply(this, arguments)
                    }
                    aQ = false
                });
                aN[aH] = az(aN[aH], function () {
                    if (aL) {
                        aL.apply(this, arguments)
                    }
                    bM.currentlyDragging = false;
                    if (aK.connections.length == 0) {
                        bM.deleteEndpoint(aK)
                    } else {
                        am.unbind(aK.canvas, "mousedown");
                        var aU = aC.anchor || bM.Defaults.Anchor, aS = aK.anchor, aT = aK.connections[0];
                        aK.setAnchor(bM.makeAnchor(aU, aI, bM));
                        if (aC.parent) {
                            var aW = aM();
                            if (aW) {
                                var aV = aK.elementId, aR = aC.container || bM.Defaults.Container || X.Defaults.Container;
                                aK.setElement(aW, aR);
                                aK.endpointWillMoveAfterConnection = false;
                                bM.anchorManager.rehomeEndpoint(aV, aW);
                                aT.previousConnection = null;
                                U(bv[aT.scope], function (aX) {
                                    return aX.id === aT.id
                                });
                                bM.anchorManager.connectionDetached({
                                    sourceId: aT.sourceId,
                                    targetId: aT.targetId,
                                    connection: aT
                                });
                                bH(aT)
                            }
                        }
                        aK.repaint();
                        bM.repaint(aK.elementId);
                        bM.repaint(aT.targetId)
                    }
                });
                var aG = function (aR) {
                    if (!c[aJ]) {
                        return
                    }
                    if (aC.filter) {
                        var aZ = am.getOriginalEvent(aR), aY = jsPlumbUtil.isString(aC.filter) ? bz(aZ, aO, aC.filter) : aC.filter(aZ, aO);
                        if (aY === false) {
                            return
                        }
                    }
                    var aU = bM.select({source: aJ}).length;
                    if (q[aJ] >= 0 && aU >= q[aJ]) {
                        if (aD) {
                            aD({element: aO, maxConnections: aB}, aR)
                        }
                        return false
                    }
                    var a2 = h({elId: aI}).o, a5 = bM.getZoom(), a3 = (((aR.pageX || aR.page.x) / a5) - a2.left) / a2.width, a4 = (((aR.pageY || aR.page.y) / a5) - a2.top) / a2.height, aT = a3, aW = a4;
                    if (aC.parent) {
                        var a6 = aM(), aS = x(a6);
                        a2 = h({elId: aS}).o;
                        aT = ((aR.pageX || aR.page.x) - a2.left) / a2.width, aW = ((aR.pageY || aR.page.y) - a2.top) / a2.height
                    }
                    var aX = {};
                    X.extend(aX, aC);
                    aX.isSource = true;
                    aX.anchor = [a3, a4, 0, 0];
                    aX.parentAnchor = [aT, aW, 0, 0];
                    aX.dragOptions = aN;
                    if (aC.parent) {
                        var aV = aX.container || bM.Defaults.Container || X.Defaults.Container;
                        if (aV) {
                            aX.container = aV
                        } else {
                            aX.container = X.CurrentLibrary.getParent(aM())
                        }
                    }
                    aK = bM.addEndpoint(aI, aX);
                    aQ = true;
                    aK.endpointWillMoveAfterConnection = aC.parent != null;
                    aK.endpointWillMoveTo = aC.parent ? aM() : null;
                    aK.addedViaMouse = true;
                    var a1 = function () {
                        if (aQ) {
                            bM.deleteEndpoint(aK)
                        }
                    };
                    bM.registerListener(aK.canvas, "mouseup", a1);
                    bM.registerListener(aO, "mouseup", a1);
                    am.trigger(aK.canvas, "mousedown", aR)
                };
                bM.registerListener(aO, "mousedown", aG);
                u[aI] = aG;
                if (aC.filter && jsPlumbUtil.isString(aC.filter)) {
                    am.setDragFilter(aO, aC.filter)
                }
            };
            aA = A(aA);
            var an = aA.length && aA.constructor != String ? aA : [aA];
            for (var ao = 0, al = an.length; ao < al; ao++) {
                aE(af(an[ao]))
            }
            return bM
        };
        this.unmakeSource = function (am, al) {
            am = X.CurrentLibrary.getElementObject(am);
            var ak = x(am), an = u[ak];
            if (an) {
                bM.unregisterListener(am, "mousedown", an)
            }
            if (!al) {
                delete at[ak];
                delete bo[ak];
                delete c[ak];
                delete u[ak];
                delete q[ak]
            }
            return bM
        };
        this.unmakeEverySource = function () {
            for (var ak in c) {
                bM.unmakeSource(ak, true)
            }
            at = {};
            bo = {};
            c = {};
            u = {}
        };
        this.unmakeEveryTarget = function () {
            for (var ak in ba) {
                bM.unmakeTarget(ak, true)
            }
            bu = {};
            bg = {};
            ax = {};
            ba = {};
            return bM
        };
        this.makeSources = function (am, ak, ao) {
            for (var an = 0, al = am.length; an < al; an++) {
                bM.makeSource(am[an], ak, ao)
            }
            return bM
        };
        var bF = function (am, an, al, aB) {
            var aA = am == "source" ? c : ba;
            if (W(an)) {
                aA[an] = aB ? !aA[an] : al
            } else {
                if (an.length) {
                    an = A(an);
                    for (var ap = 0, ao = an.length; ap < ao; ap++) {
                        var ak = _el = X.CurrentLibrary.getElementObject(an[ap]), ak = x(_el);
                        aA[ak] = aB ? !aA[ak] : al
                    }
                }
            }
            return bM
        };
        this.setSourceEnabled = function (al, ak) {
            return bF("source", al, ak)
        };
        this.toggleSourceEnabled = function (ak) {
            bF("source", ak, null, true);
            return bM.isSourceEnabled(ak)
        };
        this.isSource = function (ak) {
            ak = X.CurrentLibrary.getElementObject(ak);
            return c[x(ak)] != null
        };
        this.isSourceEnabled = function (ak) {
            ak = X.CurrentLibrary.getElementObject(ak);
            return c[x(ak)] === true
        };
        this.setTargetEnabled = function (al, ak) {
            return bF("target", al, ak)
        };
        this.toggleTargetEnabled = function (ak) {
            bF("target", ak, null, true);
            return bM.isTargetEnabled(ak)
        };
        this.isTarget = function (ak) {
            ak = X.CurrentLibrary.getElementObject(ak);
            return ba[x(ak)] != null
        };
        this.isTargetEnabled = function (ak) {
            ak = X.CurrentLibrary.getElementObject(ak);
            return ba[x(ak)] === true
        };
        this.ready = function (ak) {
            bM.bind("ready", ak)
        };
        this.repaint = function (am, ak, al) {
            if (typeof am == "object" && am.length) {
                for (var ao = 0, an = am.length; ao < an; ao++) {
                    bm(af(am[ao]), ak, al)
                }
            } else {
                bm(af(am), ak, al)
            }
            return bM
        };
        this.repaintEverything = function () {
            var ak = null;
            for (var al in bA) {
                bm(af(al), null, ak)
            }
            return bM
        };
        this.removeAllEndpoints = function (al, ak) {
            var am = function (an) {
                var aB = jsPlumbUtil.isString(an) ? an : x(af(an)), ao = bA[aB];
                if (ao) {
                    for (var aA = 0, ap = ao.length; aA < ap; aA++) {
                        bM.deleteEndpoint(ao[aA])
                    }
                }
                delete bA[aB];
                if (ak) {
                    var aC = X.CurrentLibrary.getDOMElement(af(an));
                    if (aC && aC.nodeType != 3 && aC.nodeType != 8) {
                        for (var aA = 0, ap = aC.childNodes.length; aA < ap; aA++) {
                            am(aC.childNodes[aA])
                        }
                    }
                }
            };
            am(al);
            return bM
        };
        this.remove = function (am) {
            var ak = af(am);
            var al = jsPlumbUtil.isString(am) ? am : x(ak);
            bM.doWhileSuspended(function () {
                bM.removeAllEndpoints(al, true);
                bM.dragManager.elementRemoved(al)
            });
            X.CurrentLibrary.removeElement(ak)
        };
        var be = {}, bj = function () {
            for (var am in be) {
                for (var an = 0, al = be[am].length; an < al; an++) {
                    var ak = be[am][an];
                    X.CurrentLibrary.unbind(ak.el, ak.event, ak.listener)
                }
            }
            be = {}
        };
        this.registerListener = function (al, am, ak) {
            X.CurrentLibrary.bind(al, am, ak);
            ab(be, am, {el: al, event: am, listener: ak})
        };
        this.unregisterListener = function (al, am, ak) {
            X.CurrentLibrary.unbind(al, am, ak);
            U(be, function (an) {
                return an.type == am && an.listener == ak
            })
        };
        this.reset = function () {
            bM.deleteEveryEndpoint();
            bM.unbind();
            bu = {};
            B = {};
            bg = {};
            ax = {};
            at = {};
            br = {};
            bo = {};
            q = {};
            bj();
            bM.anchorManager.reset();
            if (!jsPlumbAdapter.headless) {
                bM.dragManager.reset()
            }
        };
        this.setDefaultScope = function (ak) {
            m = ak;
            return bM
        };
        this.setDraggable = bO;
        this.setId = function (aA, ap, al) {
            var aC = aA.constructor == String ? aA : bM.getId(aA), aB = bM.getConnections({
                source: aC,
                scope: "*"
            }, true), an = bM.getConnections({target: aC, scope: "*"}, true);
            ap = "" + ap;
            if (!al) {
                aA = X.CurrentLibrary.getElementObject(aC);
                X.CurrentLibrary.setAttribute(aA, "id", ap)
            }
            aA = X.CurrentLibrary.getElementObject(ap);
            bA[ap] = bA[aC] || [];
            for (var am = 0, ak = bA[ap].length; am < ak; am++) {
                bA[ap][am].setElementId(ap);
                bA[ap][am].setReferenceElement(aA)
            }
            delete bA[aC];
            bM.anchorManager.changeId(aC, ap);
            if (!jsPlumbAdapter.headless) {
                bM.dragManager.changeId(aC, ap)
            }
            var ao = function (aF, aE, aG) {
                for (var aD = 0, aH = aF.length; aD < aH; aD++) {
                    aF[aD].endpoints[aE].setElementId(ap);
                    aF[aD].endpoints[aE].setReferenceElement(aA);
                    aF[aD][aG + "Id"] = ap;
                    aF[aD][aG] = aA
                }
            };
            ao(aB, 0, "source");
            ao(an, 1, "target");
            bM.repaint(ap)
        };
        this.setIdChanged = function (ak, al) {
            bM.setId(ak, al, true)
        };
        this.setDebugLog = function (ak) {
            p = ak
        };
        var bq = false, bn = null;
        this.setSuspendDrawing = function (ak, al) {
            bq = ak;
            if (ak) {
                bn = new Date().getTime()
            } else {
                bn = null
            }
            if (al) {
                bM.repaintEverything()
            }
        };
        this.isSuspendDrawing = function () {
            return bq
        };
        this.getSuspendedAt = function () {
            return bn
        };
        this.doWhileSuspended = function (al, am) {
            bM.setSuspendDrawing(true);
            try {
                al()
            } catch (ak) {
                V("Function run while suspended failed", ak)
            }
            bM.setSuspendDrawing(false, !am)
        };
        this.updateOffset = h;
        this.getOffset = function (ak) {
            return bc[ak]
        };
        this.getSize = function (ak) {
            return bf[ak]
        };
        this.getCachedData = bE;
        this.timestamp = T;
        this.SVG = "svg";
        this.CANVAS = "canvas";
        this.VML = "vml";
        this.setRenderMode = function (ak) {
            g = jsPlumbAdapter.setRenderMode(ak);
            return g
        };
        this.getRenderMode = function () {
            return g
        };
        this.show = function (al, ak) {
            bs(al, "block", ak);
            return bM
        };
        this.sizeCanvas = function (am, ao, ak, an, al) {
            if (am) {
                am.style.height = al + "px";
                am.height = al;
                am.style.width = an + "px";
                am.width = an;
                am.style.left = ao + "px";
                am.style.top = ak + "px"
            }
            return bM
        };
        this.getTestHarness = function () {
            return {
                endpointsByElement: bA,
                endpointCount: function (al) {
                    var ak = bA[al];
                    return ak ? ak.length : 0
                },
                connectionCount: function (al) {
                    al = al || m;
                    var ak = bv[al];
                    return ak ? ak.length : 0
                },
                getId: x,
                makeAnchor: self.makeAnchor,
                makeDynamicAnchor: self.makeDynamicAnchor
            }
        };
        this.toggleVisible = bC;
        this.toggleDraggable = a;
        this.wrap = az;
        this.addListener = this.bind;
        this.adjustForParentOffsetAndScroll = function (ak, an) {
            var am = null, ap = ak;
            if (an.tagName.toLowerCase() === "svg" && an.parentNode) {
                am = an.parentNode
            } else {
                if (an.offsetParent) {
                    am = an.offsetParent
                }
            }
            if (am != null) {
                var ao = am.tagName.toLowerCase() === "body" ? {
                    left: 0,
                    top: 0
                } : P(am, bM), al = am.tagName.toLowerCase() === "body" ? {
                    left: 0,
                    top: 0
                } : {left: am.scrollLeft, top: am.scrollTop};
                ap[0] = ak[0] - ao.left + al.left;
                ap[1] = ak[1] - ao.top + al.top
            }
            return ap
        };
        if (!jsPlumbAdapter.headless) {
            bM.dragManager = jsPlumbAdapter.getDragManager(bM);
            bM.recalculateOffsets = bM.dragManager.updateOffsets
        }
    };
    var X = new J();
    if (typeof window != "undefined") {
        window.jsPlumb = X
    }
    X.getInstance = function (a) {
        var b = new J(a);
        b.init();
        return b
    };
    if (typeof define === "function") {
        define("jsplumb", [], function () {
            return X
        });
        define("jsplumbinstance", [], function () {
            return X.getInstance()
        })
    }
    if (typeof exports !== "undefined") {
        exports.jsPlumb = X
    }
})();
(function () {
    jsPlumb.AnchorManager = function (a) {
        var V = {}, G = {}, D = {}, O = {}, J = {}, b = {
            HORIZONTAL: "horizontal",
            VERTICAL: "vertical",
            DIAGONAL: "diagonal",
            IDENTITY: "identity"
        }, T = {}, M = this, S = {}, K = a.jsPlumbInstance, U = jsPlumb.CurrentLibrary, N = {}, Q = function (g, f, m, q, l, e) {
            if (g === f) {
                return {orientation: b.IDENTITY, a: ["top", "top"]}
            }
            var r = Math.atan2((q.centery - m.centery), (q.centerx - m.centerx)), n = Math.atan2((m.centery - q.centery), (m.centerx - q.centerx)), o = ((m.left <= q.left && m.right >= q.left) || (m.left <= q.right && m.right >= q.right) || (m.left <= q.left && m.right >= q.right) || (q.left <= m.left && q.right >= m.right)), h = ((m.top <= q.top && m.bottom >= q.top) || (m.top <= q.bottom && m.bottom >= q.bottom) || (m.top <= q.top && m.bottom >= q.bottom) || (q.top <= m.top && q.bottom >= m.bottom)), k = function (s) {
                return [l.isContinuous ? l.verifyEdge(s[0]) : s[0], e.isContinuous ? e.verifyEdge(s[1]) : s[1]]
            }, p = {orientation: b.DIAGONAL, theta: r, theta2: n};
            if (!(o || h)) {
                if (q.left > m.left && q.top > m.top) {
                    p.a = ["right", "top"]
                } else {
                    if (q.left > m.left && m.top > q.top) {
                        p.a = ["top", "left"]
                    } else {
                        if (q.left < m.left && q.top < m.top) {
                            p.a = ["top", "right"]
                        } else {
                            if (q.left < m.left && q.top > m.top) {
                                p.a = ["left", "top"]
                            }
                        }
                    }
                }
            } else {
                if (o) {
                    p.orientation = b.HORIZONTAL;
                    p.a = m.top < q.top ? ["bottom", "top"] : ["top", "bottom"]
                } else {
                    p.orientation = b.VERTICAL;
                    p.a = m.left < q.left ? ["right", "left"] : ["left", "right"]
                }
            }
            p.a = k(p.a);
            return p
        }, I = function (h, n, p, o, g, m, w) {
            var f = [], x = n[g ? 0 : 1] / (o.length + 1);
            for (var l = 0; l < o.length; l++) {
                var e = (l + 1) * x, y = m * n[g ? 1 : 0];
                if (w) {
                    e = n[g ? 0 : 1] - e
                }
                var q = (g ? e : y), u = p[0] + q, r = q / n[0], s = (g ? y : e), v = p[1] + s, k = s / n[1];
                f.push([u, v, r, k, o[l][1], o[l][2]])
            }
            return f
        }, L = function (e) {
            return function (g, h) {
                var f = true;
                if (e) {
                    f = g[0][0] < h[0][0]
                } else {
                    f = g[0][0] > h[0][0]
                }
                return f === false ? -1 : 1
            }
        }, X = function (g, h) {
            var e = g[0][0] < 0 ? -Math.PI - g[0][0] : Math.PI - g[0][0], f = h[0][0] < 0 ? -Math.PI - h[0][0] : Math.PI - h[0][0];
            if (e > f) {
                return 1
            } else {
                return g[0][1] > h[0][1] ? 1 : -1
            }
        }, F = {
            top: function (e, f) {
                return e[0] > f[0] ? 1 : -1
            }, right: L(true), bottom: L(true), left: X
        }, H = function (f, e) {
            return f.sort(e)
        }, R = function (k, l) {
            var e = K.getCachedData(k), g = e.s, f = e.o, h = function (v, n, A, w, p, q, B) {
                if (w.length > 0) {
                    var r = H(w, F[v]), u = v === "right" || v === "top", C = I(v, n, A, r, p, q, u);
                    var m = function (ac, ab) {
                        var ad = K.adjustForParentOffsetAndScroll([ab[0], ab[1]], ac.canvas);
                        D[ac.id] = [ad[0], ad[1], ab[2], ab[3]];
                        J[ac.id] = B
                    };
                    for (var y = 0; y < C.length; y++) {
                        var s = C[y][4], o = s.endpoints[0].elementId === k, x = s.endpoints[1].elementId === k;
                        if (o) {
                            m(s.endpoints[0], C[y])
                        } else {
                            if (x) {
                                m(s.endpoints[1], C[y])
                            }
                        }
                    }
                }
            };
            h("bottom", g, [f.left, f.top], l.bottom, true, 1, [0, 1]);
            h("top", g, [f.left, f.top], l.top, true, 0, [0, -1]);
            h("left", g, [f.left, f.top], l.left, false, 0, [-1, 0]);
            h("right", g, [f.left, f.top], l.right, false, 1, [1, 0])
        };
        this.reset = function () {
            V = {};
            T = {};
            S = {}
        };
        this.addFloatingConnection = function (f, e) {
            N[f] = e
        };
        this.removeFloatingConnection = function (e) {
            delete N[e]
        };
        this.newConnection = function (g) {
            var e = g.sourceId, h = g.targetId, l = g.endpoints, f = true, k = function (o, n, q, m, p) {
                if ((e == h) && q.isContinuous) {
                    U.removeElement(l[1].canvas);
                    f = false
                }
                jsPlumbUtil.addToList(T, m, [p, n, q.constructor == jsPlumb.DynamicAnchor])
            };
            k(0, l[0], l[0].anchor, h, g);
            if (f) {
                k(1, l[1], l[1].anchor, e, g)
            }
        };
        var W = function (e) {
            (function (f, h) {
                if (f) {
                    var g = function (k) {
                        return k[4] == h
                    };
                    jsPlumbUtil.removeWithFunction(f.top, g);
                    jsPlumbUtil.removeWithFunction(f.left, g);
                    jsPlumbUtil.removeWithFunction(f.bottom, g);
                    jsPlumbUtil.removeWithFunction(f.right, g)
                }
            })(S[e.elementId], e.id)
        };
        this.connectionDetached = function (e) {
            var k = e.connection || e, f = e.sourceId, h = e.targetId, l = k.endpoints, g = function (o, n, q, m, p) {
                if (q.constructor == jsPlumb.FloatingAnchor) {
                } else {
                    jsPlumbUtil.removeWithFunction(T[m], function (r) {
                        return r[0].id == p.id
                    })
                }
            };
            g(1, l[1], l[1].anchor, f, k);
            g(0, l[0], l[0].anchor, h, k);
            W(k.endpoints[0]);
            W(k.endpoints[1]);
            M.redraw(k.sourceId);
            M.redraw(k.targetId)
        };
        this.add = function (e, f) {
            jsPlumbUtil.addToList(V, f, e)
        };
        this.changeId = function (e, f) {
            T[f] = T[e];
            V[f] = V[e];
            delete T[e];
            delete V[e]
        };
        this.getConnectionsFor = function (e) {
            return T[e] || []
        };
        this.getEndpointsFor = function (e) {
            return V[e] || []
        };
        this.deleteEndpoint = function (e) {
            jsPlumbUtil.removeWithFunction(V[e.elementId], function (f) {
                return f.id == e.id
            });
            W(e)
        };
        this.clearFor = function (e) {
            delete V[e];
            V[e] = []
        };
        var P = function (g, w, n, A, s, r, p, u, e, q, B, h) {
            var l = -1, C = -1, y = A.endpoints[p], o = y.id, v = [1, 0][p], ab = [[w, n], A, s, r, o], aa = g[e], f = y._continuousAnchorEdge ? g[y._continuousAnchorEdge] : null;
            if (f) {
                var k = jsPlumbUtil.findWithFunction(f, function (Y) {
                    return Y[4] == o
                });
                if (k != -1) {
                    f.splice(k, 1);
                    for (var m = 0; m < f.length; m++) {
                        jsPlumbUtil.addWithFunction(B, f[m][1], function (Y) {
                            return Y.id == f[m][1].id
                        });
                        jsPlumbUtil.addWithFunction(h, f[m][1].endpoints[p], function (Y) {
                            return Y.id == f[m][1].endpoints[p].id
                        });
                        jsPlumbUtil.addWithFunction(h, f[m][1].endpoints[v], function (Y) {
                            return Y.id == f[m][1].endpoints[v].id
                        })
                    }
                }
            }
            for (var m = 0; m < aa.length; m++) {
                if (a.idx == 1 && aa[m][3] === r && C == -1) {
                    C = m
                }
                jsPlumbUtil.addWithFunction(B, aa[m][1], function (Y) {
                    return Y.id == aa[m][1].id
                });
                jsPlumbUtil.addWithFunction(h, aa[m][1].endpoints[p], function (Y) {
                    return Y.id == aa[m][1].endpoints[p].id
                });
                jsPlumbUtil.addWithFunction(h, aa[m][1].endpoints[v], function (Y) {
                    return Y.id == aa[m][1].endpoints[v].id
                })
            }
            if (l != -1) {
                aa[l] = ab
            } else {
                var x = u ? C != -1 ? C : 0 : aa.length;
                aa.splice(x, 0, ab)
            }
            y._continuousAnchorEdge = e
        };
        this.redraw = function (o, l, C, y, e) {
            if (!K.isSuspendDrawing()) {
                var ah = V[o] || [], ai = T[o] || [], af = [], aj = [], B = [];
                C = C || K.timestamp();
                y = y || {left: 0, top: 0};
                if (l) {
                    l = {left: l.left + y.left, top: l.top + y.top}
                }
                var u = K.updateOffset({
                    elId: o,
                    offset: l,
                    recalc: false,
                    timestamp: C
                }), r = {};
                for (var al = 0; al < ai.length; al++) {
                    var x = ai[al][0], v = x.sourceId, A = x.targetId, w = x.endpoints[0].anchor.isContinuous, p = x.endpoints[1].anchor.isContinuous;
                    if (w || p) {
                        var ak = v + "_" + A, g = A + "_" + v, h = r[ak], q = x.sourceId == o ? 1 : 0;
                        if (w && !S[v]) {
                            S[v] = {top: [], right: [], bottom: [], left: []}
                        }
                        if (p && !S[A]) {
                            S[A] = {top: [], right: [], bottom: [], left: []}
                        }
                        if (o != A) {
                            K.updateOffset({elId: A, timestamp: C})
                        }
                        if (o != v) {
                            K.updateOffset({elId: v, timestamp: C})
                        }
                        var s = K.getCachedData(A), ag = K.getCachedData(v);
                        if (A == v && (w || p)) {
                            P(S[v], -Math.PI / 2, 0, x, false, A, 0, false, "top", v, af, aj)
                        } else {
                            if (!h) {
                                h = Q(v, A, ag.o, s.o, x.endpoints[0].anchor, x.endpoints[1].anchor);
                                r[ak] = h
                            }
                            if (w) {
                                P(S[v], h.theta, 0, x, false, A, 0, false, h.a[0], v, af, aj)
                            }
                            if (p) {
                                P(S[A], h.theta2, -1, x, true, v, 1, true, h.a[1], A, af, aj)
                            }
                        }
                        if (w) {
                            jsPlumbUtil.addWithFunction(B, v, function (Y) {
                                return Y === v
                            })
                        }
                        if (p) {
                            jsPlumbUtil.addWithFunction(B, A, function (Y) {
                                return Y === A
                            })
                        }
                        jsPlumbUtil.addWithFunction(af, x, function (Y) {
                            return Y.id == x.id
                        });
                        if ((w && q == 0) || (p && q == 1)) {
                            jsPlumbUtil.addWithFunction(aj, x.endpoints[q], function (Y) {
                                return Y.id == x.endpoints[q].id
                            })
                        }
                    }
                }
                for (var al = 0; al < ah.length; al++) {
                    if (ah[al].connections.length == 0 && ah[al].anchor.isContinuous) {
                        if (!S[o]) {
                            S[o] = {top: [], right: [], bottom: [], left: []}
                        }
                        P(S[o], -Math.PI / 2, 0, {
                            endpoints: [ah[al], ah[al]],
                            paint: function () {
                            }
                        }, false, o, 0, false, "top", o, af, aj);
                        jsPlumbUtil.addWithFunction(B, o, function (Y) {
                            return Y === o
                        })
                    }
                }
                for (var al = 0; al < B.length; al++) {
                    R(B[al], S[B[al]])
                }
                for (var al = 0; al < ah.length; al++) {
                    ah[al].paint({timestamp: C, offset: u, dimensions: u.s})
                }
                for (var al = 0; al < aj.length; al++) {
                    var m = K.getCachedData(aj[al].elementId);
                    aj[al].paint({timestamp: C, offset: m, dimensions: m.s})
                }
                for (var al = 0; al < ai.length; al++) {
                    var n = ai[al][1];
                    if (n.anchor.constructor == jsPlumb.DynamicAnchor) {
                        n.paint({elementWithPrecedence: o});
                        jsPlumbUtil.addWithFunction(af, ai[al][0], function (Y) {
                            return Y.id == ai[al][0].id
                        });
                        for (var f = 0; f < n.connections.length; f++) {
                            if (n.connections[f] !== ai[al][0]) {
                                jsPlumbUtil.addWithFunction(af, n.connections[f], function (Y) {
                                    return Y.id == n.connections[f].id
                                })
                            }
                        }
                    } else {
                        if (n.anchor.constructor == jsPlumb.Anchor) {
                            jsPlumbUtil.addWithFunction(af, ai[al][0], function (Y) {
                                return Y.id == ai[al][0].id
                            })
                        }
                    }
                }
                var k = N[o];
                if (k) {
                    k.paint({timestamp: C, recalc: false, elId: o})
                }
                for (var al = 0; al < af.length; al++) {
                    af[al].paint({
                        elId: o,
                        timestamp: C,
                        recalc: false,
                        clearEdits: e
                    })
                }
            }
        };
        this.rehomeEndpoint = function (k, e) {
            var h = V[k] || [], g = K.getId(e);
            if (g !== k) {
                for (var f = 0; f < h.length; f++) {
                    M.add(h[f], g)
                }
                h.splice(0, h.length)
            }
        };
        var E = function (p) {
            jsPlumbUtil.EventGenerator.apply(this);
            this.type = "Continuous";
            this.isDynamic = true;
            this.isContinuous = true;
            var m = p.faces || ["top", "right", "bottom", "left"], q = !(p.clockwise === false), f = {}, h = {
                top: "bottom",
                right: "left",
                left: "right",
                bottom: "top"
            }, n = {
                top: "right",
                right: "bottom",
                left: "top",
                bottom: "left"
            }, l = {
                top: "left",
                right: "top",
                left: "bottom",
                bottom: "right"
            }, o = q ? n : l, e = q ? l : n, g = p.cssClass || "";
            for (var k = 0; k < m.length; k++) {
                f[m[k]] = true
            }
            this.verifyEdge = function (r) {
                if (f[r]) {
                    return r
                } else {
                    if (f[h[r]]) {
                        return h[r]
                    } else {
                        if (f[o[r]]) {
                            return o[r]
                        } else {
                            if (f[e[r]]) {
                                return e[r]
                            }
                        }
                    }
                }
                return r
            };
            this.compute = function (r) {
                return O[r.element.id] || D[r.element.id] || [0, 0]
            };
            this.getCurrentLocation = function (r) {
                return O[r.id] || D[r.id] || [0, 0]
            };
            this.getOrientation = function (r) {
                return J[r.id] || [0, 0]
            };
            this.clearUserDefinedLocation = function () {
                delete O[p.elementId]
            };
            this.setUserDefinedLocation = function (r) {
                O[p.elementId] = r
            };
            this.getCssClass = function () {
                return g
            };
            this.setCssClass = function (r) {
                g = r
            }
        };
        K.continuousAnchorFactory = {
            get: function (e) {
                var f = G[e.elementId];
                if (!f) {
                    f = new E(e);
                    G[e.elementId] = f
                }
                return f
            }
        }
    };
    jsPlumb.Anchor = function (a) {
        var m = this;
        this.x = a.x || 0;
        this.y = a.y || 0;
        this.elementId = a.elementId;
        jsPlumbUtil.EventGenerator.apply(this);
        var n = a.orientation || [0, 0], o = a.jsPlumbInstance, b = null, p = null, q = null, r = a.cssClass || "";
        this.getCssClass = function () {
            return r
        };
        this.offsets = a.offsets || [0, 0];
        m.timestamp = null;
        this.compute = function (f) {
            var g = f.xy, e = f.wh, k = f.element, h = f.timestamp;
            if (f.clearUserDefinedLocation) {
                q = null
            }
            if (h && h === m.timestamp) {
                return p
            }
            if (q != null) {
                p = q
            } else {
                p = [g[0] + (m.x * e[0]) + m.offsets[0], g[1] + (m.y * e[1]) + m.offsets[1]];
                p = o.adjustForParentOffsetAndScroll(p, k.canvas)
            }
            m.timestamp = h;
            return p
        };
        this.getOrientation = function (e) {
            return n
        };
        this.equals = function (e) {
            if (!e) {
                return false
            }
            var g = e.getOrientation();
            var f = this.getOrientation();
            return this.x == e.x && this.y == e.y && this.offsets[0] == e.offsets[0] && this.offsets[1] == e.offsets[1] && f[0] == g[0] && f[1] == g[1]
        };
        this.getCurrentLocation = function () {
            return p
        };
        this.getUserDefinedLocation = function () {
            return q
        };
        this.setUserDefinedLocation = function (e) {
            q = e
        };
        this.clearUserDefinedLocation = function () {
            q = null
        }
    };
    jsPlumb.FloatingAnchor = function (u) {
        jsPlumb.Anchor.apply(this, arguments);
        var v = u.reference, s = jsPlumb.CurrentLibrary, q = u.jsPlumbInstance, p = u.referenceCanvas, b = s.getSize(s.getElementObject(p)), a = 0, r = 0, w = null, o = null;
        this.x = 0;
        this.y = 0;
        this.isFloating = true;
        this.compute = function (e) {
            var f = e.xy, g = e.element, h = [f[0] + (b[0] / 2), f[1] + (b[1] / 2)];
            h = q.adjustForParentOffsetAndScroll(h, g.canvas);
            o = h;
            return h
        };
        this.getOrientation = function (e) {
            if (w) {
                return w
            } else {
                var f = v.getOrientation(e);
                return [Math.abs(f[0]) * a * -1, Math.abs(f[1]) * r * -1]
            }
        };
        this.over = function (e) {
            w = e.getOrientation()
        };
        this.out = function () {
            w = null
        };
        this.getCurrentLocation = function () {
            return o
        }
    };
    jsPlumb.DynamicAnchor = function (r) {
        jsPlumb.Anchor.apply(this, arguments);
        this.isSelective = true;
        this.isDynamic = true;
        var a = [], b = this, o = function (e) {
            return e.constructor == jsPlumb.Anchor ? e : r.jsPlumbInstance.makeAnchor(e, r.elementId, r.jsPlumbInstance)
        };
        for (var p = 0; p < r.anchors.length; p++) {
            a[p] = o(r.anchors[p])
        }
        this.addAnchor = function (e) {
            a.push(o(e))
        };
        this.getAnchors = function () {
            return a
        };
        this.locked = false;
        var v = a.length > 0 ? a[0] : null, s = a.length > 0 ? 0 : -1, q = v, b = this, u = function (m, e, f, l, g) {
            var h = l[0] + (m.x * g[0]), k = l[1] + (m.y * g[1]), n = l[0] + (g[0] / 2), y = l[1] + (g[1] / 2);
            return (Math.sqrt(Math.pow(e - h, 2) + Math.pow(f - k, 2)) + Math.sqrt(Math.pow(n - h, 2) + Math.pow(y - k, 2)))
        }, w = r.selector || function (k, g, f, e, h) {
            var C = f[0] + (e[0] / 2), D = f[1] + (e[1] / 2);
            var n = -1, l = Infinity;
            for (var B = 0; B < h.length; B++) {
                var m = u(h[B], C, D, k, g);
                if (m < l) {
                    n = B + 0;
                    l = m
                }
            }
            return h[n]
        };
        this.compute = function (f) {
            var g = f.xy, m = f.wh, k = f.timestamp, l = f.txy, e = f.twh;
            if (f.clearUserDefinedLocation) {
                userDefinedLocation = null
            }
            var h = b.getUserDefinedLocation();
            if (h != null) {
                return h
            }
            if (b.locked || l == null || e == null) {
                return v.compute(f)
            } else {
                f.timestamp = null
            }
            v = w(g, m, l, e, a);
            b.x = v.x;
            b.y = v.y;
            if (v != q) {
                b.fire("anchorChanged", v)
            }
            q = v;
            return v.compute(f)
        };
        this.getCurrentLocation = function () {
            return b.getUserDefinedLocation() || (v != null ? v.getCurrentLocation() : null)
        };
        this.getOrientation = function (e) {
            return v != null ? v.getOrientation(e) : [0, 0]
        };
        this.over = function (e) {
            if (v != null) {
                v.over(e)
            }
        };
        this.out = function () {
            if (v != null) {
                v.out()
            }
        };
        this.getCssClass = function () {
            return (v && v.getCssClass()) || ""
        }
    };
    var c = function (n, a, l, m, b, k) {
        jsPlumb.Anchors[b] = function (e) {
            var f = e.jsPlumbInstance.makeAnchor([n, a, l, m, 0, 0], e.elementId, e.jsPlumbInstance);
            f.type = b;
            if (k) {
                k(f, e)
            }
            return f
        }
    };
    c(0.5, 0, 0, -1, "TopCenter");
    c(0.5, 1, 0, 1, "BottomCenter");
    c(0, 0.5, -1, 0, "LeftMiddle");
    c(1, 0.5, 1, 0, "RightMiddle");
    c(0.5, 0, 0, -1, "Top");
    c(0.5, 1, 0, 1, "Bottom");
    c(0, 0.5, -1, 0, "Left");
    c(1, 0.5, 1, 0, "Right");
    c(0.5, 0.5, 0, 0, "Center");
    c(1, 0, 0, -1, "TopRight");
    c(1, 1, 0, 1, "BottomRight");
    c(0, 0, 0, -1, "TopLeft");
    c(0, 1, 0, 1, "BottomLeft");
    jsPlumb.Defaults.DynamicAnchors = function (a) {
        return a.jsPlumbInstance.makeAnchors(["TopCenter", "RightMiddle", "BottomCenter", "LeftMiddle"], a.elementId, a.jsPlumbInstance)
    };
    jsPlumb.Anchors.AutoDefault = function (a) {
        var b = a.jsPlumbInstance.makeDynamicAnchor(jsPlumb.Defaults.DynamicAnchors(a));
        b.type = "AutoDefault";
        return b
    };
    var d = function (a, b) {
        jsPlumb.Anchors[a] = function (g) {
            var h = g.jsPlumbInstance.makeAnchor(["Continuous", {faces: b}], g.elementId, g.jsPlumbInstance);
            h.type = a;
            return h
        }
    };
    jsPlumb.Anchors.Continuous = function (a) {
        return a.jsPlumbInstance.continuousAnchorFactory.get(a)
    };
    d("ContinuousLeft", ["left"]);
    d("ContinuousTop", ["top"]);
    d("ContinuousBottom", ["bottom"]);
    d("ContinuousRight", ["right"]);
    jsPlumb.Anchors.Assign = c(0, 0, 0, 0, "Assign", function (b, a) {
        var f = a.position || "Fixed";
        b.positionFinder = f.constructor == String ? a.jsPlumbInstance.AnchorPositionFinders[f] : f;
        b.constructorParams = a
    });
    jsPlumb.AnchorPositionFinders = {
        Fixed: function (a, h, b, g) {
            return [(a.left - h.left) / b[0], (a.top - h.top) / b[1]]
        }, Grid: function (w, a, r, v) {
            var b = w.left - a.left, o = w.top - a.top, p = r[0] / (v.grid[0]), q = r[1] / (v.grid[1]), s = Math.floor(b / p), u = Math.floor(o / q);
            return [((s * p) + (p / 2)) / r[0], ((u * q) + (q / 2)) / r[1]]
        }
    };
    jsPlumb.Anchors.Perimeter = function (y) {
        y = y || {};
        var x = y.anchorCount || 60, u = y.shape;
        if (!u) {
            throw new Error("no shape supplied to Perimeter Anchor type")
        }
        var w = function () {
            var g = 0.5, h = Math.PI * 2 / x, f = 0, l = [];
            for (var k = 0; k < x; k++) {
                var m = g + (g * Math.sin(f)), e = g + (g * Math.cos(f));
                l.push([m, e, 0, 0]);
                f += h
            }
            return l
        }, s = function (g) {
            var e = x / g.length, k = [], h = function (H, F, m, G, E) {
                e = x * E;
                var n = (m - H) / e, o = (G - F) / e;
                for (var l = 0; l < e; l++) {
                    k.push([H + (n * l), F + (o * l), 0, 0])
                }
            };
            for (var f = 0; f < g.length; f++) {
                h.apply(null, g[f])
            }
            return k
        }, p = function (g) {
            var e = [];
            for (var f = 0; f < g.length; f++) {
                e.push([g[f][0], g[f][1], g[f][2], g[f][3], 1 / g.length])
            }
            return s(e)
        }, r = function () {
            return p([[0, 0, 1, 0], [1, 0, 1, 1], [1, 1, 0, 1], [0, 1, 0, 0]])
        };
        var v = {
            Circle: w, Ellipse: w, Diamond: function () {
                return p([[0.5, 0, 1, 0.5], [1, 0.5, 0.5, 1], [0.5, 1, 0, 0.5], [0, 0.5, 0.5, 0]])
            }, Rectangle: r, Square: r, Triangle: function () {
                return p([[0.5, 0, 1, 1], [1, 1, 0, 1], [0, 1, 0.5, 0]])
            }, Path: function (e) {
                var g = e.points, f = [], k = 0;
                for (var h = 0; h < g.length - 1; h++) {
                    var l = Math.sqrt(Math.pow(g[h][2] - g[h][0]) + Math.pow(g[h][3] - g[h][1]));
                    k += l;
                    f.push([g[h][0], g[h][1], g[h + 1][0], g[h + 1][1], l])
                }
                for (var h = 0; h < f.length; h++) {
                    f[h][4] = f[h][4] / k
                }
                return s(f)
            }
        }, b = function (f, g) {
            var e = [], h = g / 180 * Math.PI;
            for (var k = 0; k < f.length; k++) {
                var l = f[k][0] - 0.5, m = f[k][1] - 0.5;
                e.push([0.5 + ((l * Math.cos(h)) - (m * Math.sin(h))), 0.5 + ((l * Math.sin(h)) + (m * Math.cos(h))), f[k][2], f[k][3]])
            }
            return e
        };
        if (!v[u]) {
            throw new Error("Shape [" + u + "] is unknown by Perimeter Anchor type")
        }
        var a = v[u](y);
        if (y.rotation) {
            a = b(a, y.rotation)
        }
        var q = y.jsPlumbInstance.makeDynamicAnchor(a);
        q.type = "Perimeter";
        return q
    }
})();
(function () {
    var h = function (a, c) {
        var b = false;
        return {
            drag: function () {
                if (b) {
                    b = false;
                    return true
                }
                var d = jsPlumb.CurrentLibrary.getUIPosition(arguments, c.getZoom());
                if (a.element) {
                    jsPlumb.CurrentLibrary.setOffset(a.element, d);
                    c.repaint(a.element, d)
                }
            }, stopDrag: function () {
                b = true
            }
        }
    };
    var f = function (c, m, n) {
        var a = document.createElement("div");
        a.style.position = "absolute";
        var d = jsPlumb.CurrentLibrary.getElementObject(a);
        jsPlumb.CurrentLibrary.appendElement(a, m);
        var b = n.getId(d);
        n.updateOffset({elId: b});
        c.id = b;
        c.element = d
    };
    var g = function (a, b, r, c, o, p, q) {
        var d = new jsPlumb.FloatingAnchor({
            reference: b,
            referenceCanvas: c,
            jsPlumbInstance: p
        });
        return q({
            paintStyle: a,
            endpoint: r,
            anchor: d,
            source: o,
            scope: "__floating"
        })
    };
    var e = ["connectorStyle", "connectorHoverStyle", "connectorOverlays", "connector", "connectionType", "connectorClass", "connectorHoverClass"];
    jsPlumb.Endpoint = function (aR) {
        var aJ = this, aH = aR._jsPlumb, aQ = jsPlumb.CurrentLibrary, ap = aQ.getAttribute, aB = aQ.getElementObject, aK = jsPlumbUtil, aS = aQ.getOffset, aC = aR.newConnection, ah = aR.newEndpoint, b = aR.finaliseConnection, a = aR.fireDetachEvent, aw = aR.floatingConnections;
        aJ.idPrefix = "_jsplumb_e_";
        aJ.defaultLabelLocation = [0.5, 0.5];
        aJ.defaultOverlayKeys = ["Overlays", "EndpointOverlays"];
        this.parent = aR.parent;
        overlayCapableJsPlumbUIComponent.apply(this, arguments);
        aR = aR || {};
        this.getTypeDescriptor = function () {
            return "endpoint"
        };
        this.getDefaultType = function () {
            return {
                parameters: {},
                scope: null,
                maxConnections: aJ._jsPlumb.Defaults.MaxConnections,
                paintStyle: aJ._jsPlumb.Defaults.EndpointStyle || jsPlumb.Defaults.EndpointStyle,
                endpoint: aJ._jsPlumb.Defaults.Endpoint || jsPlumb.Defaults.Endpoint,
                hoverPaintStyle: aJ._jsPlumb.Defaults.EndpointHoverStyle || jsPlumb.Defaults.EndpointHoverStyle,
                overlays: aJ._jsPlumb.Defaults.EndpointOverlays || jsPlumb.Defaults.EndpointOverlays,
                connectorStyle: aR.connectorStyle,
                connectorHoverStyle: aR.connectorHoverStyle,
                connectorClass: aR.connectorClass,
                connectorHoverClass: aR.connectorHoverClass,
                connectorOverlays: aR.connectorOverlays,
                connector: aR.connector,
                connectorTooltip: aR.connectorTooltip
            }
        };
        var ag = this.applyType;
        this.applyType = function (l, k) {
            ag(l, k);
            if (l.maxConnections != null) {
                al = l.maxConnections
            }
            if (l.scope) {
                aJ.scope = l.scope
            }
            aK.copyValues(e, l, aJ)
        };
        var az = true, aP = !(aR.enabled === false);
        this.isVisible = function () {
            return az
        };
        this.setVisible = function (n, k, o) {
            az = n;
            if (aJ.canvas) {
                aJ.canvas.style.display = n ? "block" : "none"
            }
            aJ[n ? "showOverlays" : "hideOverlays"]();
            if (!k) {
                for (var l = 0; l < aJ.connections.length; l++) {
                    aJ.connections[l].setVisible(n);
                    if (!o) {
                        var m = aJ === aJ.connections[l].endpoints[0] ? 1 : 0;
                        if (aJ.connections[l].endpoints[m].connections.length == 1) {
                            aJ.connections[l].endpoints[m].setVisible(n, true, true)
                        }
                    }
                }
            }
        };
        this.isEnabled = function () {
            return aP
        };
        this.setEnabled = function (k) {
            aP = k
        };
        var ao = aR.source, aM = aR.uuid, aT = null, an = null;
        if (aM) {
            aR.endpointsByUUID[aM] = aJ
        }
        var c = ap(ao, "id");
        this.elementId = c;
        this.element = ao;
        aJ.setElementId = function (k) {
            c = k;
            aJ.elementId = k;
            aJ.anchor.elementId = k
        };
        aJ.setReferenceElement = function (k) {
            ao = k;
            aJ.element = k
        };
        var aU = aR.connectionCost;
        this.getConnectionCost = function () {
            return aU
        };
        this.setConnectionCost = function (k) {
            aU = k
        };
        var am = aR.connectionsDirected;
        this.areConnectionsDirected = function () {
            return am
        };
        this.setConnectionsDirected = function (k) {
            am = k
        };
        var at = "", ak = function () {
            aQ.removeClass(ao, aH.endpointAnchorClassPrefix + "_" + at);
            aJ.removeClass(aH.endpointAnchorClassPrefix + "_" + at);
            at = aJ.anchor.getCssClass();
            aJ.addClass(aH.endpointAnchorClassPrefix + "_" + at);
            aQ.addClass(ao, aH.endpointAnchorClassPrefix + "_" + at)
        };
        this.setAnchor = function (l, k) {
            aJ.anchor = aH.makeAnchor(l, c, aH);
            ak();
            aJ.anchor.bind("anchorChanged", function (m) {
                aJ.fire("anchorChanged", {endpoint: aJ, anchor: m});
                ak()
            });
            if (!k) {
                aH.repaint(c)
            }
        };
        this.cleanup = function () {
            aQ.removeClass(ao, aH.endpointAnchorClassPrefix + "_" + at)
        };
        var ai = aR.anchor ? aR.anchor : aR.anchors ? aR.anchors : (aH.Defaults.Anchor || "Top");
        aJ.setAnchor(ai, true);
        if (!aR._transient) {
            aH.anchorManager.add(aJ, c)
        }
        var d = null, af = null;
        this.setEndpoint = function (m) {
            var n = function (p, q) {
                var o = aH.getRenderMode();
                if (jsPlumb.Endpoints[o][p]) {
                    return new jsPlumb.Endpoints[o][p](q)
                }
                if (!aH.Defaults.DoNotThrowErrors) {
                    throw {msg: "jsPlumb: unknown endpoint type '" + p + "'"}
                }
            };
            var l = {
                _jsPlumb: aJ._jsPlumb,
                cssClass: aR.cssClass,
                parent: aR.parent,
                container: aR.container,
                tooltip: aR.tooltip,
                connectorTooltip: aR.connectorTooltip,
                endpoint: aJ
            };
            if (aK.isString(m)) {
                d = n(m, l)
            } else {
                if (aK.isArray(m)) {
                    l = aK.merge(m[1], l);
                    d = n(m[0], l)
                } else {
                    d = m.clone()
                }
            }
            var k = jsPlumb.extend({}, l);
            d.clone = function () {
                var o = new Object();
                d.constructor.apply(o, [k]);
                return o
            };
            aJ.endpoint = d;
            aJ.type = aJ.endpoint.type
        };
        this.setEndpoint(aR.endpoint || aH.Defaults.Endpoint || jsPlumb.Defaults.Endpoint || "Dot");
        af = d;
        var aF = aJ.setHover;
        aJ.setHover = function () {
            aJ.endpoint.setHover.apply(aJ.endpoint, arguments);
            aF.apply(aJ, arguments)
        };
        var aq = function (k) {
            if (aJ.connections.length > 0) {
                aJ.connections[0].setHover(k, false)
            } else {
                aJ.setHover(k)
            }
        };
        aJ.bindListeners(aJ.endpoint, aJ, aq);
        this.setPaintStyle(aR.paintStyle || aR.style || aH.Defaults.EndpointStyle || jsPlumb.Defaults.EndpointStyle, true);
        this.setHoverPaintStyle(aR.hoverPaintStyle || aH.Defaults.EndpointHoverStyle || jsPlumb.Defaults.EndpointHoverStyle, true);
        this.paintStyleInUse = this.getPaintStyle();
        var aE = this.getPaintStyle();
        aK.copyValues(e, aR, this);
        this.isSource = aR.isSource || false;
        this.isTarget = aR.isTarget || false;
        var al = aR.maxConnections || aH.Defaults.MaxConnections;
        this.getAttachedElements = function () {
            return aJ.connections
        };
        this.canvas = this.endpoint.canvas;
        aJ.addClass(aH.endpointAnchorClassPrefix + "_" + at);
        aQ.addClass(ao, aH.endpointAnchorClassPrefix + "_" + at);
        this.connections = aR.connections || [];
        this.connectorPointerEvents = aR["connector-pointer-events"];
        this.scope = aR.scope || aH.getDefaultScope();
        this.timestamp = null;
        aJ.reattachConnections = aR.reattach || aH.Defaults.ReattachConnections;
        aJ.connectionsDetachable = aH.Defaults.ConnectionsDetachable;
        if (aR.connectionsDetachable === false || aR.detachable === false) {
            aJ.connectionsDetachable = false
        }
        var au = aR.dragAllowedWhenFull || true;
        if (aR.onMaxConnections) {
            aJ.bind("maxConnections", aR.onMaxConnections)
        }
        this.computeAnchor = function (k) {
            return aJ.anchor.compute(k)
        };
        this.addConnection = function (k) {
            aJ.connections.push(k);
            aJ[(aJ.connections.length > 0 ? "add" : "remove") + "Class"](aH.endpointConnectedClass);
            aJ[(aJ.isFull() ? "add" : "remove") + "Class"](aH.endpointFullClass)
        };
        this.detach = function (s, o, r, l, u) {
            var m = aK.findWithFunction(aJ.connections, function (v) {
                return v.id == s.id
            }), n = false;
            l = (l !== false);
            if (m >= 0) {
                if (r || s._forceDetach || s.isDetachable() || s.isDetachAllowed(s)) {
                    var k = s.endpoints[0] == aJ ? s.endpoints[1] : s.endpoints[0];
                    if (r || s._forceDetach || (aJ.isDetachAllowed(s))) {
                        aJ.connections.splice(m, 1);
                        if (!o) {
                            k.detach(s, true, r);
                            if (s.endpointsToDeleteOnDetach) {
                                for (var p = 0; p < s.endpointsToDeleteOnDetach.length; p++) {
                                    var q = s.endpointsToDeleteOnDetach[p];
                                    if (q && q.connections.length == 0) {
                                        aH.deleteEndpoint(q)
                                    }
                                }
                            }
                        }
                        if (s.getConnector() != null) {
                            aK.removeElements(s.getConnector().getDisplayElements(), s.parent)
                        }
                        aK.removeWithFunction(aR.connectionsByScope[s.scope], function (v) {
                            return v.id == s.id
                        });
                        aJ[(aJ.connections.length > 0 ? "add" : "remove") + "Class"](aH.endpointConnectedClass);
                        aJ[(aJ.isFull() ? "add" : "remove") + "Class"](aH.endpointFullClass);
                        n = true;
                        a(s, (!o && l), u)
                    }
                }
            }
            return n
        };
        this.detachAll = function (k, l) {
            while (aJ.connections.length > 0) {
                aJ.detach(aJ.connections[0], false, true, k, l)
            }
            return aJ
        };
        this.detachFrom = function (l, m, o) {
            var k = [];
            for (var n = 0; n < aJ.connections.length; n++) {
                if (aJ.connections[n].endpoints[1] == l || aJ.connections[n].endpoints[0] == l) {
                    k.push(aJ.connections[n])
                }
            }
            for (var n = 0; n < k.length; n++) {
                if (aJ.detach(k[n], false, true, m, o)) {
                    k[n].setHover(false, false)
                }
            }
            return aJ
        };
        this.detachFromConnection = function (k) {
            var l = aK.findWithFunction(aJ.connections, function (m) {
                return m.id == k.id
            });
            if (l >= 0) {
                aJ.connections.splice(l, 1);
                aJ[(aJ.connections.length > 0 ? "add" : "remove") + "Class"](aH.endpointConnectedClass);
                aJ[(aJ.isFull() ? "add" : "remove") + "Class"](aH.endpointFullClass)
            }
        };
        this.getElement = function () {
            return ao
        };
        this.setElement = function (m, p) {
            var k = aH.getId(m);
            aK.removeWithFunction(aR.endpointsByElement[aJ.elementId], function (q) {
                return q.id == aJ.id
            });
            ao = aB(m);
            c = aH.getId(ao);
            aJ.elementId = c;
            var l = aR.getParentFromParams({
                source: k,
                container: p
            }), n = aQ.getParent(aJ.canvas);
            aQ.removeElement(aJ.canvas, n);
            aQ.appendElement(aJ.canvas, l);
            for (var o = 0; o < aJ.connections.length; o++) {
                aJ.connections[o].moveParent(l);
                aJ.connections[o].sourceId = c;
                aJ.connections[o].source = ao
            }
            aK.addToList(aR.endpointsByElement, k, aJ)
        };
        this.getUuid = function () {
            return aM
        };
        aJ.makeInPlaceCopy = function () {
            var k = aJ.anchor.getCurrentLocation(aJ), l = aJ.anchor.getOrientation(aJ), m = aJ.anchor.getCssClass(), n = {
                bind: function () {
                }, compute: function () {
                    return [k[0], k[1]]
                }, getCurrentLocation: function () {
                    return [k[0], k[1]]
                }, getOrientation: function () {
                    return l
                }, getCssClass: function () {
                    return m
                }
            };
            return ah({
                anchor: n,
                source: ao,
                paintStyle: this.getPaintStyle(),
                endpoint: aR.hideOnDrag ? "Blank" : d,
                _transient: true,
                scope: aJ.scope
            })
        };
        this.isConnectedTo = function (k) {
            var l = false;
            if (k) {
                for (var m = 0; m < aJ.connections.length; m++) {
                    if (aJ.connections[m].endpoints[1] == k) {
                        l = true;
                        break
                    }
                }
            }
            return l
        };
        this.isFloating = function () {
            return aT != null
        };
        this.connectorSelector = function () {
            var k = aJ.connections[0];
            if (aJ.isTarget && k) {
                return k
            } else {
                return (aJ.connections.length < al) || al == -1 ? null : k
            }
        };
        this.isFull = function () {
            return !(aJ.isFloating() || al < 1 || aJ.connections.length < al)
        };
        this.setDragAllowedWhenFull = function (k) {
            au = k
        };
        this.setStyle = aJ.setPaintStyle;
        this.equals = function (k) {
            return this.anchor.equals(k.anchor)
        };
        var av = function (l) {
            var m = 0;
            if (l != null) {
                for (var k = 0; k < aJ.connections.length; k++) {
                    if (aJ.connections[k].sourceId == l || aJ.connections[k].targetId == l) {
                        m = k;
                        break
                    }
                }
            }
            return aJ.connections[m]
        };
        this.paint = function (x) {
            x = x || {};
            var q = x.timestamp, r = !(x.recalc === false);
            if (!q || aJ.timestamp !== q) {
                var y = aH.updateOffset({elId: c, timestamp: q, recalc: r});
                var k = x.offset ? x.offset.o : y.o;
                if (k) {
                    var u = x.anchorPoint, w = x.connectorPaintStyle;
                    if (u == null) {
                        var C = x.dimensions || y.s;
                        if (k == null || C == null) {
                            y = aH.updateOffset({elId: c, timestamp: q});
                            k = y.o;
                            C = y.s
                        }
                        var A = {
                            xy: [k.left, k.top],
                            wh: C,
                            element: aJ,
                            timestamp: q
                        };
                        if (r && aJ.anchor.isDynamic && aJ.connections.length > 0) {
                            var o = av(x.elementWithPrecedence), l = o.endpoints[0] == aJ ? 1 : 0, v = l == 0 ? o.sourceId : o.targetId, m = aH.getCachedData(v), p = m.o, n = m.s;
                            A.txy = [p.left, p.top];
                            A.twh = n;
                            A.tElement = o.endpoints[l]
                        }
                        u = aJ.anchor.compute(A)
                    }
                    d.compute(u, aJ.anchor.getOrientation(aJ), aJ.paintStyleInUse, w || aJ.paintStyleInUse);
                    d.paint(aJ.paintStyleInUse, aJ.anchor);
                    aJ.timestamp = q;
                    for (var s = 0; s < aJ.overlays.length; s++) {
                        var B = aJ.overlays[s];
                        if (B.isVisible()) {
                            aJ.overlayPlacements[s] = B.draw(aJ.endpoint, aJ.paintStyleInUse);
                            B.paint(aJ.overlayPlacements[s])
                        }
                    }
                }
            }
        };
        this.repaint = this.paint;
        if (aQ.isDragSupported(ao)) {
            var ay = {
                id: null,
                element: null
            }, aO = null, aI = false, aD = null, aA = h(ay, aH);
            var ax = function () {
                aO = aJ.connectorSelector();
                var p = true;
                if (!aJ.isEnabled()) {
                    p = false
                }
                if (aO == null && !aR.isSource) {
                    p = false
                }
                if (aR.isSource && aJ.isFull() && !au) {
                    p = false
                }
                if (aO != null && !aO.isDetachable()) {
                    p = false
                }
                if (p === false) {
                    if (aQ.stopDrag) {
                        aQ.stopDrag()
                    }
                    aA.stopDrag();
                    return false
                }
                aJ.addClass("endpointDrag");
                if (aO && !aJ.isFull() && aR.isSource) {
                    aO = null
                }
                aH.updateOffset({elId: c});
                an = aJ.makeInPlaceCopy();
                an.referenceEndpoint = aJ;
                an.paint();
                f(ay, aJ.parent, aH);
                var q = aB(an.canvas), k = aS(q, aH), n = aH.adjustForParentOffsetAndScroll([k.left, k.top], an.canvas), o = aB(aJ.canvas);
                aQ.setOffset(ay.element, {left: n[0], top: n[1]});
                if (aJ.parentAnchor) {
                    aJ.anchor = aH.makeAnchor(aJ.parentAnchor, aJ.elementId, aH)
                }
                aQ.setAttribute(o, "dragId", ay.id);
                aQ.setAttribute(o, "elId", c);
                aT = g(aJ.getPaintStyle(), aJ.anchor, d, aJ.canvas, ay.element, aH, ah);
                aJ.canvas.style.visibility = "hidden";
                if (aO == null) {
                    aJ.anchor.locked = true;
                    aJ.setHover(false, false);
                    aO = aC({
                        sourceEndpoint: aJ,
                        targetEndpoint: aT,
                        source: aJ.endpointWillMoveTo || ao,
                        target: ay.element,
                        anchors: [aJ.anchor, aT.anchor],
                        paintStyle: aR.connectorStyle,
                        hoverPaintStyle: aR.connectorHoverStyle,
                        connector: aR.connector,
                        overlays: aR.connectorOverlays,
                        type: aJ.connectionType,
                        cssClass: aJ.connectorClass,
                        hoverClass: aJ.connectorHoverClass
                    });
                    aO.addClass(aH.draggingClass);
                    aT.addClass(aH.draggingClass);
                    aH.fire("connectionDrag", aO)
                } else {
                    aI = true;
                    aO.setHover(false);
                    aL(q, false, true);
                    var l = aO.endpoints[0].id == aJ.id ? 0 : 1;
                    aO.floatingAnchorIndex = l;
                    aJ.detachFromConnection(aO);
                    var r = jsPlumb.CurrentLibrary.getDragScope(o);
                    aQ.setAttribute(o, "originalScope", r);
                    var m = aQ.getDropScope(o);
                    aQ.setDragScope(o, m);
                    if (l == 0) {
                        aD = [aO.source, aO.sourceId, ae, r];
                        aO.source = ay.element;
                        aO.sourceId = ay.id
                    } else {
                        aD = [aO.target, aO.targetId, ae, r];
                        aO.target = ay.element;
                        aO.targetId = ay.id
                    }
                    aO.endpoints[l == 0 ? 1 : 0].anchor.locked = true;
                    aO.suspendedEndpoint = aO.endpoints[l];
                    aO.suspendedElement = aO.endpoints[l].getElement();
                    aO.suspendedElementId = aO.endpoints[l].elementId;
                    aO.suspendedElementType = l == 0 ? "source" : "target";
                    aO.suspendedEndpoint.setHover(false);
                    aT.referenceEndpoint = aO.suspendedEndpoint;
                    aO.endpoints[l] = aT;
                    aO.addClass(aH.draggingClass);
                    aT.addClass(aH.draggingClass);
                    aH.fire("connectionDrag", aO)
                }
                aw[ay.id] = aO;
                aH.anchorManager.addFloatingConnection(ay.id, aO);
                aT.addConnection(aO);
                aK.addToList(aR.endpointsByElement, ay.id, aT);
                aH.currentlyDragging = true
            };
            var aN = aR.dragOptions || {}, aG = jsPlumb.extend({}, aQ.defaultDragOptions), aj = aQ.dragEvents.start, ad = aQ.dragEvents.stop, ar = aQ.dragEvents.drag;
            aN = jsPlumb.extend(aG, aN);
            aN.scope = aN.scope || aJ.scope;
            aN[aj] = aH.wrap(aN[aj], ax);
            aN[ar] = aH.wrap(aN[ar], aA.drag);
            aN[ad] = aH.wrap(aN[ad], function () {
                var k = aQ.getDropEvent(arguments);
                aK.removeWithFunction(aR.endpointsByElement[ay.id], function (m) {
                    return m.id == aT.id
                });
                aK.removeElement(an.canvas, ao);
                aH.anchorManager.clearFor(ay.id);
                var l = aO.floatingAnchorIndex == null ? 1 : aO.floatingAnchorIndex;
                aO.endpoints[l == 0 ? 1 : 0].anchor.locked = false;
                if (aO.endpoints[l] == aT) {
                    if (aI && aO.suspendedEndpoint) {
                        if (l == 0) {
                            aO.source = aD[0];
                            aO.sourceId = aD[1]
                        } else {
                            aO.target = aD[0];
                            aO.targetId = aD[1]
                        }
                        aQ.setDragScope(aD[2], aD[3]);
                        aO.endpoints[l] = aO.suspendedEndpoint;
                        if (aO.isReattach() || aO._forceReattach || aO._forceDetach || !aO.endpoints[l == 0 ? 1 : 0].detach(aO, false, false, true, k)) {
                            aO.setHover(false);
                            aO.floatingAnchorIndex = null;
                            aO.suspendedEndpoint.addConnection(aO);
                            aH.repaint(aD[1])
                        }
                        aO._forceDetach = null;
                        aO._forceReattach = null
                    } else {
                        aK.removeElements(aO.getConnector().getDisplayElements(), aJ.parent);
                        aJ.detachFromConnection(aO)
                    }
                }
                aK.removeElements([ay.element[0], aT.canvas], ao);
                aH.dragManager.elementRemoved(aT.elementId);
                aJ.canvas.style.visibility = "visible";
                aJ.anchor.locked = false;
                aJ.paint({recalc: false});
                aO.removeClass(aH.draggingClass);
                aT.removeClass(aH.draggingClass);
                aH.fire("connectionDragStop", aO);
                aO = null;
                an = null;
                delete aR.endpointsByElement[aT.elementId];
                aT.anchor = null;
                aT = null;
                aH.currentlyDragging = false
            });
            var ae = aB(aJ.canvas);
            aQ.initDraggable(ae, aN, true, aH)
        }
        var aL = function (q, l, n, k) {
            if ((aR.isTarget || l) && aQ.isDropSupported(ao)) {
                var p = aR.dropOptions || aH.Defaults.DropOptions || jsPlumb.Defaults.DropOptions;
                p = jsPlumb.extend({}, p);
                p.scope = p.scope || aJ.scope;
                var r = aQ.dragEvents.drop, m = aQ.dragEvents.over, s = aQ.dragEvents.out, o = function () {
                    aJ.removeClass(aH.endpointDropAllowedClass);
                    aJ.removeClass(aH.endpointDropForbiddenClass);
                    var G = aQ.getDropEvent(arguments), D = aB(aQ.getDragObject(arguments)), E = ap(D, "dragId"), B = ap(D, "elId"), H = ap(D, "originalScope"), x = aw[E];
                    var A = x.suspendedEndpoint && (x.suspendedEndpoint.id == aJ.id || aJ.referenceEndpoint && x.suspendedEndpoint.id == aJ.referenceEndpoint.id);
                    if (A) {
                        x._forceReattach = true;
                        return
                    }
                    if (x != null) {
                        var v = x.floatingAnchorIndex == null ? 1 : x.floatingAnchorIndex, u = v == 0 ? 1 : 0;
                        if (H) {
                            jsPlumb.CurrentLibrary.setDragScope(D, H)
                        }
                        var I = k != null ? k.isEnabled() : true;
                        if (aJ.isFull()) {
                            aJ.fire("maxConnections", {
                                endpoint: aJ,
                                connection: x,
                                maxConnections: al
                            }, G)
                        }
                        if (!aJ.isFull() && !(v == 0 && !aJ.isSource) && !(v == 1 && !aJ.isTarget) && I) {
                            var y = true;
                            if (x.suspendedEndpoint && x.suspendedEndpoint.id != aJ.id) {
                                if (v == 0) {
                                    x.source = x.suspendedEndpoint.element;
                                    x.sourceId = x.suspendedEndpoint.elementId
                                } else {
                                    x.target = x.suspendedEndpoint.element;
                                    x.targetId = x.suspendedEndpoint.elementId
                                }
                                if (!x.isDetachAllowed(x) || !x.endpoints[v].isDetachAllowed(x) || !x.suspendedEndpoint.isDetachAllowed(x) || !aH.checkCondition("beforeDetach", x)) {
                                    y = false
                                }
                            }
                            if (v == 0) {
                                x.source = aJ.element;
                                x.sourceId = aJ.elementId
                            } else {
                                x.target = aJ.element;
                                x.targetId = aJ.elementId
                            }
                            var w = function () {
                                x.floatingAnchorIndex = null
                            };
                            var F = function () {
                                x.endpoints[v].detachFromConnection(x);
                                if (x.suspendedEndpoint) {
                                    x.suspendedEndpoint.detachFromConnection(x)
                                }
                                x.endpoints[v] = aJ;
                                aJ.addConnection(x);
                                var J = aJ.getParameters();
                                for (var L in J) {
                                    x.setParameter(L, J[L])
                                }
                                if (!x.suspendedEndpoint) {
                                    if (J.draggable) {
                                        jsPlumb.CurrentLibrary.initDraggable(aJ.element, aN, true, aH)
                                    }
                                } else {
                                    var K = x.suspendedEndpoint.getElement(), M = x.suspendedEndpoint.elementId;
                                    a({
                                        source: v == 0 ? K : x.source,
                                        target: v == 1 ? K : x.target,
                                        sourceId: v == 0 ? M : x.sourceId,
                                        targetId: v == 1 ? M : x.targetId,
                                        sourceEndpoint: v == 0 ? x.suspendedEndpoint : x.endpoints[0],
                                        targetEndpoint: v == 1 ? x.suspendedEndpoint : x.endpoints[1],
                                        connection: x
                                    }, true, G)
                                }
                                if (x.endpoints[0].addedViaMouse) {
                                    x.endpointsToDeleteOnDetach[0] = x.endpoints[0]
                                }
                                if (x.endpoints[1].addedViaMouse) {
                                    x.endpointsToDeleteOnDetach[1] = x.endpoints[1]
                                }
                                b(x, null, G);
                                w()
                            };
                            var C = function () {
                                if (x.suspendedEndpoint) {
                                    x.endpoints[v] = x.suspendedEndpoint;
                                    x.setHover(false);
                                    x._forceDetach = true;
                                    if (v == 0) {
                                        x.source = x.suspendedEndpoint.element;
                                        x.sourceId = x.suspendedEndpoint.elementId
                                    } else {
                                        x.target = x.suspendedEndpoint.element;
                                        x.targetId = x.suspendedEndpoint.elementId
                                    }
                                    x.suspendedEndpoint.addConnection(x);
                                    x.endpoints[0].repaint();
                                    x.repaint();
                                    aH.repaint(x.sourceId);
                                    x._forceDetach = false
                                }
                                w()
                            };
                            y = y && aJ.isDropAllowed(x.sourceId, x.targetId, x.scope, x, aJ);
                            if (y) {
                                F()
                            } else {
                                C()
                            }
                        }
                        aH.currentlyDragging = false;
                        delete aw[E];
                        aH.anchorManager.removeFloatingConnection(E)
                    }
                };
                p[r] = aH.wrap(p[r], o);
                p[m] = aH.wrap(p[m], function () {
                    var y = aQ.getDragObject(arguments), u = ap(aB(y), "dragId"), v = aw[u];
                    if (v != null) {
                        var A = v.floatingAnchorIndex == null ? 1 : v.floatingAnchorIndex;
                        var w = (aJ.isTarget && v.floatingAnchorIndex != 0) || (v.suspendedEndpoint && aJ.referenceEndpoint && aJ.referenceEndpoint.id == v.suspendedEndpoint.id);
                        if (w) {
                            var x = aH.checkCondition("checkDropAllowed", {
                                sourceEndpoint: v.endpoints[A],
                                targetEndpoint: aJ,
                                connection: v
                            });
                            aJ[(x ? "add" : "remove") + "Class"](aH.endpointDropAllowedClass);
                            aJ[(x ? "remove" : "add") + "Class"](aH.endpointDropForbiddenClass);
                            v.endpoints[A].anchor.over(aJ.anchor)
                        }
                    }
                });
                p[s] = aH.wrap(p[s], function () {
                    var x = aQ.getDragObject(arguments), u = ap(aB(x), "dragId"), v = aw[u];
                    if (v != null) {
                        var y = v.floatingAnchorIndex == null ? 1 : v.floatingAnchorIndex;
                        var w = (aJ.isTarget && v.floatingAnchorIndex != 0) || (v.suspendedEndpoint && aJ.referenceEndpoint && aJ.referenceEndpoint.id == v.suspendedEndpoint.id);
                        if (w) {
                            aJ.removeClass(aH.endpointDropAllowedClass);
                            aJ.removeClass(aH.endpointDropForbiddenClass);
                            v.endpoints[y].anchor.out()
                        }
                    }
                });
                aQ.initDroppable(q, p, true, n)
            }
        };
        aL(aB(aJ.canvas), true, !(aR._transient || aJ.anchor.isFloating), aJ);
        if (aR.type) {
            aJ.addType(aR.type, aR.data, aH.isSuspendDrawing())
        }
        return aJ
    }
})();
(function () {
    jsPlumb.Connection = function (aD) {
        var au = this, an = true, T, Y, aq = aD._jsPlumb, az = jsPlumb.CurrentLibrary, ai = az.getAttribute, U = az.getElementObject, aw = jsPlumbUtil, aE = az.getOffset, V = aD.newConnection, aa = aD.newEndpoint, aB = null;
        au.idPrefix = "_jsplumb_c_";
        au.defaultLabelLocation = 0.5;
        au.defaultOverlayKeys = ["Overlays", "ConnectionOverlays"];
        this.parent = aD.parent;
        overlayCapableJsPlumbUIComponent.apply(this, arguments);
        this.isVisible = function () {
            return an
        };
        this.setVisible = function (a) {
            an = a;
            au[a ? "showOverlays" : "hideOverlays"]();
            if (aB && aB.canvas) {
                aB.canvas.style.display = a ? "block" : "none"
            }
            au.repaint()
        };
        var ag = aD.editable === true;
        this.setEditable = function (a) {
            if (aB && aB.isEditable()) {
                ag = a
            }
            return ag
        };
        this.isEditable = function () {
            return ag
        };
        this.editStarted = function () {
            au.fire("editStarted", {path: aB.getPath()});
            aq.setHoverSuspended(true)
        };
        this.editCompleted = function () {
            au.fire("editCompleted", {path: aB.getPath()});
            au.setHover(false);
            aq.setHoverSuspended(false)
        };
        this.editCanceled = function () {
            au.fire("editCanceled", {path: aB.getPath()});
            au.setHover(false);
            aq.setHoverSuspended(false)
        };
        var at = this.addClass, af = this.removeClass;
        this.addClass = function (a, b) {
            at(a);
            if (b) {
                au.endpoints[0].addClass(a);
                au.endpoints[1].addClass(a)
            }
        };
        this.removeClass = function (a, b) {
            af(a);
            if (b) {
                au.endpoints[0].removeClass(a);
                au.endpoints[1].removeClass(a)
            }
        };
        this.getTypeDescriptor = function () {
            return "connection"
        };
        this.getDefaultType = function () {
            return {
                parameters: {},
                scope: null,
                detachable: au._jsPlumb.Defaults.ConnectionsDetachable,
                rettach: au._jsPlumb.Defaults.ReattachConnections,
                paintStyle: au._jsPlumb.Defaults.PaintStyle || jsPlumb.Defaults.PaintStyle,
                connector: au._jsPlumb.Defaults.Connector || jsPlumb.Defaults.Connector,
                hoverPaintStyle: au._jsPlumb.Defaults.HoverPaintStyle || jsPlumb.Defaults.HoverPaintStyle,
                overlays: au._jsPlumb.Defaults.ConnectorOverlays || jsPlumb.Defaults.ConnectorOverlays
            }
        };
        var Z = this.applyType;
        this.applyType = function (b, a) {
            Z(b, a);
            if (b.detachable != null) {
                au.setDetachable(b.detachable)
            }
            if (b.reattach != null) {
                au.setReattach(b.reattach)
            }
            if (b.scope) {
                au.scope = b.scope
            }
            ag = b.editable;
            au.setConnector(b.connector, a)
        };
        Y = au.setHover;
        au.setHover = function (a) {
            aB.setHover.apply(aB, arguments);
            Y.apply(au, arguments)
        };
        T = function (a) {
            if (!aq.isConnectionBeingDragged()) {
                au.setHover(a, false)
            }
        };
        var ad = function (d, a, b) {
            var c = new Object();
            if (!aq.Defaults.DoNotThrowErrors && jsPlumb.Connectors[a] == null) {
                throw {msg: "jsPlumb: unknown connector type '" + a + "'"}
            }
            jsPlumb.Connectors[a].apply(c, [b]);
            jsPlumb.ConnectorRenderers[d].apply(c, [b]);
            return c
        };
        this.setConnector = function (b, d) {
            if (aB != null) {
                aw.removeElements(aB.getDisplayElements())
            }
            var a = {
                _jsPlumb: au._jsPlumb,
                parent: aD.parent,
                cssClass: aD.cssClass,
                container: aD.container,
                tooltip: au.tooltip,
                "pointer-events": aD["pointer-events"]
            }, c = aq.getRenderMode();
            if (aw.isString(b)) {
                aB = ad(c, b, a)
            } else {
                if (aw.isArray(b)) {
                    if (b.length == 1) {
                        aB = ad(c, b[0], a)
                    } else {
                        aB = ad(c, b[0], aw.merge(b[1], a))
                    }
                }
            }
            au.bindListeners(aB, au, T);
            au.canvas = aB.canvas;
            if (ag && jsPlumb.ConnectorEditors != null && jsPlumb.ConnectorEditors[aB.type] && aB.isEditable()) {
                new jsPlumb.ConnectorEditors[aB.type]({
                    connector: aB,
                    connection: au,
                    params: aD.editorParams || {}
                })
            } else {
                ag = false
            }
            if (!d) {
                au.repaint()
            }
        };
        this.getConnector = function () {
            return aB
        };
        this.source = U(aD.source);
        this.target = U(aD.target);
        if (aD.sourceEndpoint) {
            this.source = aD.sourceEndpoint.endpointWillMoveTo || aD.sourceEndpoint.getElement()
        }
        if (aD.targetEndpoint) {
            this.target = aD.targetEndpoint.getElement()
        }
        au.previousConnection = aD.previousConnection;
        this.sourceId = ai(this.source, "id");
        this.targetId = ai(this.target, "id");
        this.scope = aD.scope;
        this.endpoints = [];
        this.endpointStyles = [];
        var ah = function (a, b) {
            return (a) ? aq.makeAnchor(a, b, aq) : null
        }, ae = function (l, d, k, g, f, h, e) {
            var c;
            if (l) {
                au.endpoints[d] = l;
                l.addConnection(au)
            } else {
                if (!k.endpoints) {
                    k.endpoints = [null, null]
                }
                var m = k.endpoints[d] || k.endpoint || aq.Defaults.Endpoints[d] || jsPlumb.Defaults.Endpoints[d] || aq.Defaults.Endpoint || jsPlumb.Defaults.Endpoint;
                if (!k.endpointStyles) {
                    k.endpointStyles = [null, null]
                }
                if (!k.endpointHoverStyles) {
                    k.endpointHoverStyles = [null, null]
                }
                var o = k.endpointStyles[d] || k.endpointStyle || aq.Defaults.EndpointStyles[d] || jsPlumb.Defaults.EndpointStyles[d] || aq.Defaults.EndpointStyle || jsPlumb.Defaults.EndpointStyle;
                if (o.fillStyle == null && h != null) {
                    o.fillStyle = h.strokeStyle
                }
                if (o.outlineColor == null && h != null) {
                    o.outlineColor = h.outlineColor
                }
                if (o.outlineWidth == null && h != null) {
                    o.outlineWidth = h.outlineWidth
                }
                var a = k.endpointHoverStyles[d] || k.endpointHoverStyle || aq.Defaults.EndpointHoverStyles[d] || jsPlumb.Defaults.EndpointHoverStyles[d] || aq.Defaults.EndpointHoverStyle || jsPlumb.Defaults.EndpointHoverStyle;
                if (e != null) {
                    if (a == null) {
                        a = {}
                    }
                    if (a.fillStyle == null) {
                        a.fillStyle = e.strokeStyle
                    }
                }
                var b = k.anchors ? k.anchors[d] : k.anchor ? k.anchor : ah(aq.Defaults.Anchors[d], f) || ah(jsPlumb.Defaults.Anchors[d], f) || ah(aq.Defaults.Anchor, f) || ah(jsPlumb.Defaults.Anchor, f), n = k.uuids ? k.uuids[d] : null;
                c = aa({
                    paintStyle: o,
                    hoverPaintStyle: a,
                    endpoint: m,
                    connections: [au],
                    uuid: n,
                    anchor: b,
                    source: g,
                    scope: k.scope,
                    container: k.container,
                    reattach: k.reattach || aq.Defaults.ReattachConnections,
                    detachable: k.detachable || aq.Defaults.ConnectionsDetachable
                });
                au.endpoints[d] = c;
                if (k.drawEndpoints === false) {
                    c.setVisible(false, true, true)
                }
            }
            return c
        };
        var ax = ae(aD.sourceEndpoint, 0, aD, au.source, au.sourceId, aD.paintStyle, aD.hoverPaintStyle);
        if (ax) {
            aw.addToList(aD.endpointsByElement, this.sourceId, ax)
        }
        var ay = ae(aD.targetEndpoint, 1, aD, au.target, au.targetId, aD.paintStyle, aD.hoverPaintStyle);
        if (ay) {
            aw.addToList(aD.endpointsByElement, this.targetId, ay)
        }
        if (!this.scope) {
            this.scope = this.endpoints[0].scope
        }
        au.endpointsToDeleteOnDetach = [null, null];
        if (aD.deleteEndpointsOnDetach) {
            if (aD.sourceIsNew) {
                au.endpointsToDeleteOnDetach[0] = au.endpoints[0]
            }
            if (aD.targetIsNew) {
                au.endpointsToDeleteOnDetach[1] = au.endpoints[1]
            }
        }
        if (aD.endpointsToDeleteOnDetach) {
            au.endpointsToDeleteOnDetach = aD.endpointsToDeleteOnDetach
        }
        au.setConnector(this.endpoints[0].connector || this.endpoints[1].connector || aD.connector || aq.Defaults.Connector || jsPlumb.Defaults.Connector, true);
        if (aD.path) {
            aB.setPath(aD.path)
        }
        this.setPaintStyle(this.endpoints[0].connectorStyle || this.endpoints[1].connectorStyle || aD.paintStyle || aq.Defaults.PaintStyle || jsPlumb.Defaults.PaintStyle, true);
        this.setHoverPaintStyle(this.endpoints[0].connectorHoverStyle || this.endpoints[1].connectorHoverStyle || aD.hoverPaintStyle || aq.Defaults.HoverPaintStyle || jsPlumb.Defaults.HoverPaintStyle, true);
        this.paintStyleInUse = this.getPaintStyle();
        var al = aq.getSuspendedAt();
        aq.updateOffset({elId: this.sourceId, timestamp: al});
        aq.updateOffset({elId: this.targetId, timestamp: al});
        if (!aq.isSuspendDrawing()) {
            var X = aq.getCachedData(this.sourceId), aA = X.o, ak = X.s, ap = aq.getCachedData(this.targetId), ar = ap.o, ac = ap.s, S = al || aq.timestamp(), av = this.endpoints[0].anchor.compute({
                xy: [aA.left, aA.top],
                wh: ak,
                element: this.endpoints[0],
                elementId: this.endpoints[0].elementId,
                txy: [ar.left, ar.top],
                twh: ac,
                tElement: this.endpoints[1],
                timestamp: S
            });
            this.endpoints[0].paint({anchorLoc: av, timestamp: S});
            av = this.endpoints[1].anchor.compute({
                xy: [ar.left, ar.top],
                wh: ac,
                element: this.endpoints[1],
                elementId: this.endpoints[1].elementId,
                txy: [aA.left, aA.top],
                twh: ak,
                tElement: this.endpoints[0],
                timestamp: S
            });
            this.endpoints[1].paint({anchorLoc: av, timestamp: S})
        }
        var ao = aq.Defaults.ConnectionsDetachable;
        if (aD.detachable === false) {
            ao = false
        }
        if (au.endpoints[0].connectionsDetachable === false) {
            ao = false
        }
        if (au.endpoints[1].connectionsDetachable === false) {
            ao = false
        }
        this.isDetachable = function () {
            return ao === true
        };
        this.setDetachable = function (a) {
            ao = a === true
        };
        var W = aD.reattach || au.endpoints[0].reattachConnections || au.endpoints[1].reattachConnections || aq.Defaults.ReattachConnections;
        this.isReattach = function () {
            return W === true
        };
        this.setReattach = function (a) {
            W = a === true
        };
        var aC = aD.cost || au.endpoints[0].getConnectionCost();
        au.getCost = function () {
            return aC
        };
        au.setCost = function (a) {
            aC = a
        };
        var am = aD.directed;
        if (aD.directed == null) {
            am = au.endpoints[0].areConnectionsDirected()
        }
        au.isDirected = function () {
            return am === true
        };
        var ab = jsPlumb.extend({}, this.endpoints[0].getParameters());
        jsPlumb.extend(ab, this.endpoints[1].getParameters());
        jsPlumb.extend(ab, au.getParameters());
        au.setParameters(ab);
        this.getAttachedElements = function () {
            return au.endpoints
        };
        this.moveParent = function (a) {
            var b = jsPlumb.CurrentLibrary, c = b.getParent(aB.canvas);
            if (aB.bgCanvas) {
                b.removeElement(aB.bgCanvas);
                b.appendElement(aB.bgCanvas, a)
            }
            b.removeElement(aB.canvas);
            b.appendElement(aB.canvas, a);
            for (var d = 0; d < au.overlays.length; d++) {
                if (au.overlays[d].isAppendedAtTopLevel) {
                    b.removeElement(au.overlays[d].canvas);
                    b.appendElement(au.overlays[d].canvas, a);
                    if (au.overlays[d].reattachListeners) {
                        au.overlays[d].reattachListeners(aB)
                    }
                }
            }
            if (aB.reattachListeners) {
                aB.reattachListeners()
            }
        };
        var aj = null;
        this.paint = function (o) {
            if (an) {
                o = o || {};
                var y = o.elId, x = o.ui, c = o.recalc, g = o.timestamp, w = false, p = w ? this.sourceId : this.targetId, d = w ? this.targetId : this.sourceId, f = w ? 0 : 1, m = w ? 1 : 0;
                if (g == null || g != aj) {
                    var l = aq.updateOffset({
                        elId: y,
                        offset: x,
                        recalc: c,
                        timestamp: g
                    }).o, b = aq.updateOffset({
                        elId: p,
                        timestamp: g
                    }).o, u = this.endpoints[m], h = this.endpoints[f];
                    if (o.clearEdits) {
                        u.anchor.clearUserDefinedLocation();
                        h.anchor.clearUserDefinedLocation();
                        aB.setEdited(false)
                    }
                    var e = u.anchor.getCurrentLocation(u), q = h.anchor.getCurrentLocation(h);
                    aB.resetBounds();
                    aB.compute({
                        sourcePos: e,
                        targetPos: q,
                        sourceEndpoint: this.endpoints[m],
                        targetEndpoint: this.endpoints[f],
                        lineWidth: au.paintStyleInUse.lineWidth,
                        sourceInfo: l,
                        targetInfo: b,
                        clearEdits: o.clearEdits === true
                    });
                    var a = {
                        minX: Infinity,
                        minY: Infinity,
                        maxX: -Infinity,
                        maxY: -Infinity
                    };
                    for (var r = 0; r < au.overlays.length; r++) {
                        var v = au.overlays[r];
                        if (v.isVisible()) {
                            au.overlayPlacements[r] = v.draw(aB, au.paintStyleInUse);
                            a.minX = Math.min(a.minX, au.overlayPlacements[r].minX);
                            a.maxX = Math.max(a.maxX, au.overlayPlacements[r].maxX);
                            a.minY = Math.min(a.minY, au.overlayPlacements[r].minY);
                            a.maxY = Math.max(a.maxY, au.overlayPlacements[r].maxY)
                        }
                    }
                    var k = parseFloat(au.paintStyleInUse.lineWidth || 1) / 2, n = parseFloat(au.paintStyleInUse.lineWidth || 0), s = {
                        xmin: Math.min(aB.bounds.minX - (k + n), a.minX),
                        ymin: Math.min(aB.bounds.minY - (k + n), a.minY),
                        xmax: Math.max(aB.bounds.maxX + (k + n), a.maxX),
                        ymax: Math.max(aB.bounds.maxY + (k + n), a.maxY)
                    };
                    aB.paint(au.paintStyleInUse, null, s);
                    for (var r = 0; r < au.overlays.length; r++) {
                        var v = au.overlays[r];
                        if (v.isVisible()) {
                            v.paint(au.overlayPlacements[r], s)
                        }
                    }
                }
                aj = g
            }
        };
        this.repaint = function (a) {
            a = a || {};
            var b = !(a.recalc === false);
            this.paint({
                elId: this.sourceId,
                recalc: b,
                timestamp: a.timestamp,
                clearEdits: a.clearEdits
            })
        };
        var R = aD.type || au.endpoints[0].connectionType || au.endpoints[1].connectionType;
        if (R) {
            au.addType(R, aD.data, aq.isSuspendDrawing())
        }
    }
})();
(function () {
    jsPlumb.DOMElementComponent = function (a) {
        jsPlumb.jsPlumbUIComponent.apply(this, arguments);
        this.mousemove = this.dblclick = this.click = this.mousedown = this.mouseup = function (b) {
        }
    };
    jsPlumb.Segments = {
        AbstractSegment: function (a) {
            this.params = a;
            this.findClosestPointOnPath = function (c, b) {
                return {d: Infinity, x: null, y: null, l: null}
            };
            this.getBounds = function () {
                return {
                    minX: Math.min(a.x1, a.x2),
                    minY: Math.min(a.y1, a.y2),
                    maxX: Math.max(a.x1, a.x2),
                    maxY: Math.max(a.y1, a.y2)
                }
            }
        }, Straight: function (s) {
            var a = this, c = jsPlumb.Segments.AbstractSegment.apply(this, arguments), v, u, b, w, x, d, m, y = function () {
                v = Math.sqrt(Math.pow(x - w, 2) + Math.pow(m - d, 2));
                u = jsPlumbUtil.gradient({x: w, y: d}, {x: x, y: m});
                b = -1 / u
            };
            this.type = "Straight";
            a.getLength = function () {
                return v
            };
            a.getGradient = function () {
                return u
            };
            this.getCoordinates = function () {
                return {x1: w, y1: d, x2: x, y2: m}
            };
            this.setCoordinates = function (k) {
                w = k.x1;
                d = k.y1;
                x = k.x2;
                m = k.y2;
                y()
            };
            this.setCoordinates({x1: s.x1, y1: s.y1, x2: s.x2, y2: s.y2});
            this.getBounds = function () {
                return {
                    minX: Math.min(w, x),
                    minY: Math.min(d, m),
                    maxX: Math.max(w, x),
                    maxY: Math.max(d, m)
                }
            };
            this.pointOnPath = function (n, l) {
                if (n == 0 && !l) {
                    return {x: w, y: d}
                } else {
                    if (n == 1 && !l) {
                        return {x: x, y: m}
                    } else {
                        var k = l ? n > 0 ? n : v + n : n * v;
                        return jsPlumbUtil.pointOnLine({x: w, y: d}, {
                            x: x,
                            y: m
                        }, k)
                    }
                }
            };
            this.gradientAtPoint = function (k) {
                return u
            };
            this.pointAlongPathFrom = function (k, l, n) {
                var o = a.pointOnPath(k, n), p = k == 1 ? {
                    x: w + ((x - w) * 10),
                    y: d + ((d - m) * 10)
                } : l <= 0 ? {x: w, y: d} : {x: x, y: m};
                if (l <= 0 && Math.abs(l) > 1) {
                    l *= -1
                }
                return jsPlumbUtil.pointOnLine(o, p, l)
            };
            this.findClosestPointOnPath = function (q, r) {
                if (u == 0) {
                    return {x: q, y: d, d: Math.abs(r - d)}
                } else {
                    if (u == Infinity || u == -Infinity) {
                        return {x: w, y: r, d: Math.abs(q - 1)}
                    } else {
                        var l = d - (u * w), p = r - (b * q), o = (p - l) / (u - b), D = (u * o) + l, k = jsPlumbUtil.lineLength([q, r], [o, D]), n = jsPlumbUtil.lineLength([o, D], [w, d]);
                        return {d: k, x: o, y: D, l: n / v}
                    }
                }
            }
        }, Arc: function (w) {
            var a = this, b = jsPlumb.Segments.AbstractSegment.apply(this, arguments), u = function (k, l) {
                return jsPlumbUtil.theta([w.cx, w.cy], [k, l])
            }, B = function (m) {
                if (a.anticlockwise) {
                    var n = a.startAngle < a.endAngle ? a.startAngle + x : a.startAngle, k = Math.abs(n - a.endAngle);
                    return n - (k * m)
                } else {
                    var l = a.endAngle < a.startAngle ? a.endAngle + x : a.endAngle, k = Math.abs(l - a.startAngle);
                    return a.startAngle + (k * m)
                }
            }, x = 2 * Math.PI;
            this.radius = w.r;
            this.anticlockwise = w.ac;
            this.type = "Arc";
            if (w.startAngle && w.endAngle) {
                this.startAngle = w.startAngle;
                this.endAngle = w.endAngle;
                this.x1 = w.cx + (a.radius * Math.cos(w.startAngle));
                this.y1 = w.cy + (a.radius * Math.sin(w.startAngle));
                this.x2 = w.cx + (a.radius * Math.cos(w.endAngle));
                this.y2 = w.cy + (a.radius * Math.sin(w.endAngle))
            } else {
                this.startAngle = u(w.x1, w.y1);
                this.endAngle = u(w.x2, w.y2);
                this.x1 = w.x1;
                this.y1 = w.y1;
                this.x2 = w.x2;
                this.y2 = w.y2
            }
            if (this.endAngle < 0) {
                this.endAngle += x
            }
            if (this.startAngle < 0) {
                this.startAngle += x
            }
            this.segment = jsPlumbUtil.segment([this.x1, this.y1], [this.x2, this.y2]);
            var s = a.endAngle < a.startAngle ? a.endAngle + x : a.endAngle;
            a.sweep = Math.abs(s - a.startAngle);
            if (a.anticlockwise) {
                a.sweep = x - a.sweep
            }
            var c = 2 * Math.PI * a.radius, A = a.sweep / x, y = c * A;
            this.getLength = function () {
                return y
            };
            this.getBounds = function () {
                return {
                    minX: w.cx - w.r,
                    maxX: w.cx + w.r,
                    minY: w.cy - w.r,
                    maxY: w.cy + w.r
                }
            };
            var v = 1e-10, d = function (k) {
                var l = Math.floor(k), m = Math.ceil(k);
                if (k - l < v) {
                    return l
                } else {
                    if (m - k < v) {
                        return m
                    }
                }
                return k
            };
            this.pointOnPath = function (o, k) {
                if (o == 0) {
                    return {x: a.x1, y: a.y1, theta: a.startAngle}
                } else {
                    if (o == 1) {
                        return {x: a.x2, y: a.y2, theta: a.endAngle}
                    }
                }
                if (k) {
                    o = o / y
                }
                var l = B(o), m = w.cx + (w.r * Math.cos(l)), n = w.cy + (w.r * Math.sin(l));
                return {x: d(m), y: d(n), theta: l}
            };
            this.gradientAtPoint = function (m, k) {
                var l = a.pointOnPath(m, k);
                var n = jsPlumbUtil.normal([w.cx, w.cy], [l.x, l.y]);
                if (!a.anticlockwise && (n == Infinity || n == -Infinity)) {
                    n *= -1
                }
                return n
            };
            this.pointAlongPathFrom = function (k, D, l) {
                var q = a.pointOnPath(k, l), r = D / c * 2 * Math.PI, p = a.anticlockwise ? -1 : 1, m = q.theta + (p * r), n = w.cx + (a.radius * Math.cos(m)), o = w.cy + (a.radius * Math.sin(m));
                return {x: n, y: o}
            }
        }, Bezier: function (a) {
            var n = this, d = jsPlumb.Segments.AbstractSegment.apply(this, arguments), b = [{
                x: a.x1,
                y: a.y1
            }, {x: a.cp1x, y: a.cp1y}, {x: a.cp2x, y: a.cp2y}, {
                x: a.x2,
                y: a.y2
            }], m = {
                minX: Math.min(a.x1, a.x2, a.cp1x, a.cp2x),
                minY: Math.min(a.y1, a.y2, a.cp1y, a.cp2y),
                maxX: Math.max(a.x1, a.x2, a.cp1x, a.cp2x),
                maxY: Math.max(a.y1, a.y2, a.cp1y, a.cp2y)
            };
            this.type = "Bezier";
            var c = function (p, k, l) {
                if (l) {
                    k = jsBezier.locationAlongCurveFrom(p, k > 0 ? 0 : 1, k)
                }
                return k
            };
            this.pointOnPath = function (k, l) {
                k = c(b, k, l);
                return jsBezier.pointOnCurve(b, k)
            };
            this.gradientAtPoint = function (k, l) {
                k = c(b, k, l);
                return jsBezier.gradientAtPoint(b, k)
            };
            this.pointAlongPathFrom = function (k, l, p) {
                k = c(b, k, p);
                return jsBezier.pointAlongCurveFrom(b, k, l)
            };
            this.getLength = function () {
                return jsBezier.getLength(b)
            };
            this.getBounds = function () {
                return m
            }
        }
    };
    var g = function () {
        var a = this;
        a.resetBounds = function () {
            a.bounds = {
                minX: Infinity,
                minY: Infinity,
                maxX: -Infinity,
                maxY: -Infinity
            }
        };
        a.resetBounds()
    };
    jsPlumb.Connectors.AbstractConnector = function (I) {
        g.apply(this, arguments);
        var c = this, L = [], U = false, K = 0, S = [], E = [], V = I.stub || 0, P = jsPlumbUtil.isArray(V) ? V[0] : V, G = jsPlumbUtil.isArray(V) ? V[1] : V, b = I.gap || 0, O = jsPlumbUtil.isArray(b) ? b[0] : b, M = jsPlumbUtil.isArray(b) ? b[1] : b, N = null, R = false, Q = null;
        this.isEditable = function () {
            return false
        };
        this.setEdited = function (k) {
            R = k
        };
        this.getPath = function () {
        };
        this.setPath = function (k) {
        };
        this.findSegmentForPoint = function (o, k) {
            var n = {d: Infinity, s: null, x: null, y: null, l: null};
            for (var m = 0; m < L.length; m++) {
                var l = L[m].findClosestPointOnPath(o, k);
                if (l.d < n.d) {
                    n.d = l.d;
                    n.l = l.l;
                    n.x = l.x;
                    n.y = l.y;
                    n.s = L[m]
                }
            }
            return n
        };
        var J = function () {
            var k = 0;
            for (var l = 0; l < L.length; l++) {
                var m = L[l].getLength();
                E[l] = m / K;
                S[l] = [k, (k += (m / K))]
            }
        }, T = function (m, k) {
            if (k) {
                m = m > 0 ? m / K : (K + m) / K
            }
            var o = S.length - 1, n = 1;
            for (var l = 0; l < S.length; l++) {
                if (S[l][1] >= m) {
                    o = l;
                    n = m == 1 ? 1 : m == 0 ? 0 : (m - S[l][0]) / E[l];
                    break
                }
            }
            return {segment: L[o], proportion: n, index: o}
        }, a = function (l, k) {
            var m = new jsPlumb.Segments[l](k);
            L.push(m);
            K += m.getLength();
            c.updateBounds(m)
        }, F = function () {
            K = 0;
            L.splice(0, L.length);
            S.splice(0, S.length);
            E.splice(0, E.length)
        };
        this.setSegments = function (k) {
            N = [];
            K = 0;
            for (var l = 0; l < k.length; l++) {
                N.push(k[l]);
                K += k[l].getLength()
            }
        };
        var H = function (m) {
            c.lineWidth = m.lineWidth;
            var X = jsPlumbUtil.segment(m.sourcePos, m.targetPos), q = m.targetPos[0] < m.sourcePos[0], s = m.targetPos[1] < m.sourcePos[1], B = m.lineWidth || 1, n = m.sourceEndpoint.anchor.orientation || m.sourceEndpoint.anchor.getOrientation(m.sourceEndpoint), D = m.targetEndpoint.anchor.orientation || m.targetEndpoint.anchor.getOrientation(m.targetEndpoint), x = q ? m.targetPos[0] : m.sourcePos[0], y = s ? m.targetPos[1] : m.sourcePos[1], v = Math.abs(m.targetPos[0] - m.sourcePos[0]), o = Math.abs(m.targetPos[1] - m.sourcePos[1]);
            if (n[0] == 0 && n[1] == 0 || D[0] == 0 && D[1] == 0) {
                var A = v > o ? 0 : 1, C = [1, 0][A];
                n = [];
                D = [];
                n[A] = m.sourcePos[A] > m.targetPos[A] ? -1 : 1;
                D[A] = m.sourcePos[A] > m.targetPos[A] ? 1 : -1;
                n[C] = 0;
                D[C] = 0
            }
            var r = q ? v + (O * n[0]) : O * n[0], u = s ? o + (O * n[1]) : O * n[1], k = q ? M * D[0] : v + (M * D[0]), l = s ? M * D[1] : o + (M * D[1]), p = ((n[0] * D[0]) + (n[1] * D[1]));
            var w = {
                sx: r,
                sy: u,
                tx: k,
                ty: l,
                lw: B,
                xSpan: Math.abs(k - r),
                ySpan: Math.abs(l - u),
                mx: (r + k) / 2,
                my: (u + l) / 2,
                so: n,
                to: D,
                x: x,
                y: y,
                w: v,
                h: o,
                segment: X,
                startStubX: r + (n[0] * P),
                startStubY: u + (n[1] * P),
                endStubX: k + (D[0] * G),
                endStubY: l + (D[1] * G),
                isXGreaterThanStubTimes2: Math.abs(r - k) > (P + G),
                isYGreaterThanStubTimes2: Math.abs(u - l) > (P + G),
                opposite: p == -1,
                perpendicular: p == 0,
                orthogonal: p == 1,
                sourceAxis: n[0] == 0 ? "y" : "x",
                points: [x, y, v, o, r, u, k, l]
            };
            w.anchorOrientation = w.opposite ? "opposite" : w.orthogonal ? "orthogonal" : "perpendicular";
            return w
        };
        this.getSegments = function () {
            return L
        };
        c.updateBounds = function (k) {
            var l = k.getBounds();
            c.bounds.minX = Math.min(c.bounds.minX, l.minX);
            c.bounds.maxX = Math.max(c.bounds.maxX, l.maxX);
            c.bounds.minY = Math.min(c.bounds.minY, l.minY);
            c.bounds.maxY = Math.max(c.bounds.maxY, l.maxY)
        };
        var d = function () {
            console.log("SEGMENTS:");
            for (var k = 0; k < L.length; k++) {
                console.log(L[k].type, L[k].getLength(), S[k])
            }
        };
        this.pointOnPath = function (l, k) {
            var m = T(l, k);
            return m.segment.pointOnPath(m.proportion, k)
        };
        this.gradientAtPoint = function (k) {
            var l = T(k, absolute);
            return l.segment.gradientAtPoint(l.proportion, absolute)
        };
        this.pointAlongPathFrom = function (m, k, l) {
            var n = T(m, l);
            return n.segment.pointAlongPathFrom(n.proportion, k, false)
        };
        this.compute = function (k) {
            if (!R) {
                Q = H(k)
            }
            F();
            this._compute(Q, k);
            c.x = Q.points[0];
            c.y = Q.points[1];
            c.w = Q.points[2];
            c.h = Q.points[3];
            c.segment = Q.segment;
            J()
        };
        return {
            addSegment: a,
            prepareCompute: H,
            sourceStub: P,
            targetStub: G,
            maxStub: Math.max(P, G),
            sourceGap: O,
            targetGap: M,
            maxGap: Math.max(O, M)
        }
    };
    jsPlumb.Connectors.Straight = function () {
        this.type = "Straight";
        var a = jsPlumb.Connectors.AbstractConnector.apply(this, arguments);
        this._compute = function (b, c) {
            a.addSegment("Straight", {
                x1: b.sx,
                y1: b.sy,
                x2: b.startStubX,
                y2: b.startStubY
            });
            a.addSegment("Straight", {
                x1: b.startStubX,
                y1: b.startStubY,
                x2: b.endStubX,
                y2: b.endStubY
            });
            a.addSegment("Straight", {
                x1: b.endStubX,
                y1: b.endStubY,
                x2: b.tx,
                y2: b.ty
            })
        }
    };
    jsPlumb.Connectors.Bezier = function (a) {
        a = a || {};
        var m = this, c = jsPlumb.Connectors.AbstractConnector.apply(this, arguments), b = a.stub || 50, n = a.curviness || 150, d = 10;
        this.type = "Bezier";
        this.getCurviness = function () {
            return n
        };
        this._findControlPoint = function (A, y, D, x, l) {
            var C = x.anchor.getOrientation(x), B = l.anchor.getOrientation(l), k = C[0] != B[0] || C[1] == B[1], p = [];
            if (!k) {
                if (C[0] == 0) {
                    p.push(y[0] < D[0] ? A[0] + d : A[0] - d)
                } else {
                    p.push(A[0] - (n * C[0]))
                }
                if (C[1] == 0) {
                    p.push(y[1] < D[1] ? A[1] + d : A[1] - d)
                } else {
                    p.push(A[1] + (n * B[1]))
                }
            } else {
                if (B[0] == 0) {
                    p.push(D[0] < y[0] ? A[0] + d : A[0] - d)
                } else {
                    p.push(A[0] + (n * B[0]))
                }
                if (B[1] == 0) {
                    p.push(D[1] < y[1] ? A[1] + d : A[1] - d)
                } else {
                    p.push(A[1] + (n * C[1]))
                }
            }
            return p
        };
        this._compute = function (k, B) {
            var l = B.sourcePos, F = B.targetPos, E = Math.abs(l[0] - F[0]), I = Math.abs(l[1] - F[1]), H = l[0] < F[0] ? E : 0, J = l[1] < F[1] ? I : 0, C = l[0] < F[0] ? 0 : E, D = l[1] < F[1] ? 0 : I, p = m._findControlPoint([H, J], l, F, B.sourceEndpoint, B.targetEndpoint), G = m._findControlPoint([C, D], F, l, B.targetEndpoint, B.sourceEndpoint);
            c.addSegment("Bezier", {
                x1: H,
                y1: J,
                x2: C,
                y2: D,
                cp1x: p[0],
                cp1y: p[1],
                cp2x: G[0],
                cp2y: G[1]
            })
        }
    };
    jsPlumb.Endpoints.AbstractEndpoint = function (a) {
        g.apply(this, arguments);
        var b = this;
        this.compute = function (d, p, c, n) {
            var o = b._compute.apply(b, arguments);
            b.x = o[0];
            b.y = o[1];
            b.w = o[2];
            b.h = o[3];
            b.bounds.minX = b.x;
            b.bounds.minY = b.y;
            b.bounds.maxX = b.x + b.w;
            b.bounds.maxY = b.y + b.h;
            return o
        };
        return {compute: b.compute, cssClass: a.cssClass}
    };
    jsPlumb.Endpoints.Dot = function (a) {
        this.type = "Dot";
        var c = this, b = jsPlumb.Endpoints.AbstractEndpoint.apply(this, arguments);
        a = a || {};
        this.radius = a.radius || 10;
        this.defaultOffset = 0.5 * this.radius;
        this.defaultInnerRadius = this.radius / 3;
        this._compute = function (d, B, A, x) {
            c.radius = A.radius || c.radius;
            var u = d[0] - c.radius, v = d[1] - c.radius, C = c.radius * 2, w = c.radius * 2;
            if (A.strokeStyle) {
                var y = A.lineWidth || 1;
                u -= y;
                v -= y;
                C += (y * 2);
                w += (y * 2)
            }
            return [u, v, C, w, c.radius]
        }
    };
    jsPlumb.Endpoints.Rectangle = function (a) {
        this.type = "Rectangle";
        var c = this, b = jsPlumb.Endpoints.AbstractEndpoint.apply(this, arguments);
        a = a || {};
        this.width = a.width || 20;
        this.height = a.height || 20;
        this._compute = function (x, r, v, y) {
            var d = v.width || c.width, s = v.height || c.height, u = x[0] - (d / 2), w = x[1] - (s / 2);
            return [u, w, d, s]
        }
    };
    var e = function (a) {
        jsPlumb.DOMElementComponent.apply(this, arguments);
        var c = this;
        var b = [];
        this.getDisplayElements = function () {
            return b
        };
        this.appendDisplayElement = function (d) {
            b.push(d)
        }
    };
    jsPlumb.Endpoints.Image = function (s) {
        this.type = "Image";
        e.apply(this, arguments);
        var a = this, b = jsPlumb.Endpoints.AbstractEndpoint.apply(this, arguments), u = false, v = false, w = s.width, x = s.height, d = null, y = s.endpoint;
        this.img = new Image();
        a.ready = false;
        this.img.onload = function () {
            a.ready = true;
            w = w || a.img.width;
            x = x || a.img.height;
            if (d) {
                d(a)
            }
        };
        y.setImage = function (m, k) {
            var l = m.constructor == String ? m : m.src;
            d = k;
            a.img.src = m;
            if (a.canvas != null) {
                a.canvas.setAttribute("src", m)
            }
        };
        y.setImage(s.src || s.url, s.onload);
        this._compute = function (l, n, k, m) {
            a.anchorPoint = l;
            if (a.ready) {
                return [l[0] - w / 2, l[1] - x / 2, w, x]
            } else {
                return [0, 0, 0, 0]
            }
        };
        a.canvas = document.createElement("img"), u = false;
        a.canvas.style.margin = 0;
        a.canvas.style.padding = 0;
        a.canvas.style.outline = 0;
        a.canvas.style.position = "absolute";
        var r = s.cssClass ? " " + s.cssClass : "";
        a.canvas.className = jsPlumb.endpointClass + r;
        if (w) {
            a.canvas.setAttribute("width", w)
        }
        if (x) {
            a.canvas.setAttribute("height", x)
        }
        jsPlumb.appendElement(a.canvas, s.parent);
        a.attachListeners(a.canvas, a);
        a.cleanup = function () {
            v = true
        };
        var c = function (l, m, n) {
            if (!v) {
                if (!u) {
                    a.canvas.setAttribute("src", a.img.src);
                    a.appendDisplayElement(a.canvas);
                    u = true
                }
                var o = a.anchorPoint[0] - (w / 2), k = a.anchorPoint[1] - (x / 2);
                jsPlumb.sizeCanvas(a.canvas, o, k, w, x)
            }
        };
        this.paint = function (k, l) {
            if (a.ready) {
                c(k, l)
            } else {
                window.setTimeout(function () {
                    a.paint(k, l)
                }, 200)
            }
        }
    };
    jsPlumb.Endpoints.Blank = function (a) {
        var c = this, b = jsPlumb.Endpoints.AbstractEndpoint.apply(this, arguments);
        this.type = "Blank";
        e.apply(this, arguments);
        this._compute = function (n, p, d, o) {
            return [n[0], n[1], 10, 0]
        };
        c.canvas = document.createElement("div");
        c.canvas.style.display = "block";
        c.canvas.style.width = "1px";
        c.canvas.style.height = "1px";
        c.canvas.style.background = "transparent";
        c.canvas.style.position = "absolute";
        c.canvas.className = c._jsPlumb.endpointClass;
        jsPlumb.appendElement(c.canvas, a.parent);
        this.paint = function (d, l) {
            jsPlumb.sizeCanvas(c.canvas, c.x, c.y, c.w, c.h)
        }
    };
    jsPlumb.Endpoints.Triangle = function (a) {
        this.type = "Triangle";
        var c = this, b = jsPlumb.Endpoints.AbstractEndpoint.apply(this, arguments);
        a = a || {};
        a.width = a.width || 55;
        a.height = a.height || 55;
        this.width = a.width;
        this.height = a.height;
        this._compute = function (x, r, v, y) {
            var d = v.width || c.width, s = v.height || c.height, u = x[0] - (d / 2), w = x[1] - (s / 2);
            return [u, w, d, s]
        }
    };
    var h = jsPlumb.Overlays.AbstractOverlay = function (a) {
        var b = true, c = this;
        this.isAppendedAtTopLevel = true;
        this.component = a.component;
        this.loc = a.location == null ? 0.5 : a.location;
        this.endpointLoc = a.endpointLocation == null ? [0.5, 0.5] : a.endpointLocation;
        this.setVisible = function (d) {
            b = d;
            c.component.repaint()
        };
        this.isVisible = function () {
            return b
        };
        this.hide = function () {
            c.setVisible(false)
        };
        this.show = function () {
            c.setVisible(true)
        };
        this.incrementLocation = function (d) {
            c.loc += d;
            c.component.repaint()
        };
        this.setLocation = function (d) {
            c.loc = d;
            c.component.repaint()
        };
        this.getLocation = function () {
            return c.loc
        }
    };
    jsPlumb.Overlays.Arrow = function (a) {
        this.type = "Arrow";
        h.apply(this, arguments);
        this.isAppendedAtTopLevel = false;
        a = a || {};
        var d = this, n = jsPlumbUtil;
        this.length = a.length || 20;
        this.width = a.width || 20;
        this.id = a.id;
        var b = (a.direction || 1) < 0 ? -1 : 1, c = a.paintStyle || {lineWidth: 1}, m = a.foldback || 0.623;
        this.computeMaxSize = function () {
            return d.width * 1.5
        };
        this.cleanup = function () {
        };
        this.draw = function (K, D) {
            var k, J, G, N, l;
            if (K.pointAlongPathFrom) {
                if (n.isString(d.loc) || d.loc > 1 || d.loc < 0) {
                    var F = parseInt(d.loc);
                    k = K.pointAlongPathFrom(F, b * d.length / 2, true), J = K.pointOnPath(F, true), G = n.pointOnLine(k, J, d.length)
                } else {
                    if (d.loc == 1) {
                        k = K.pointOnPath(d.loc);
                        J = K.pointAlongPathFrom(d.loc, -(d.length));
                        G = n.pointOnLine(k, J, d.length);
                        if (b == -1) {
                            var E = G;
                            G = k;
                            k = E
                        }
                    } else {
                        if (d.loc == 0) {
                            G = K.pointOnPath(d.loc);
                            J = K.pointAlongPathFrom(d.loc, d.length);
                            k = n.pointOnLine(G, J, d.length);
                            if (b == -1) {
                                var E = G;
                                G = k;
                                k = E
                            }
                        } else {
                            k = K.pointAlongPathFrom(d.loc, b * d.length / 2), J = K.pointOnPath(d.loc), G = n.pointOnLine(k, J, d.length)
                        }
                    }
                }
                N = n.perpendicularLineTo(k, G, d.width);
                l = n.pointOnLine(k, G, m * d.length);
                var M = {
                    hxy: k,
                    tail: N,
                    cxy: l
                }, L = c.strokeStyle || D.strokeStyle, I = c.fillStyle || D.strokeStyle, C = c.lineWidth || D.lineWidth, H = {
                    component: K,
                    d: M,
                    lineWidth: C,
                    strokeStyle: L,
                    fillStyle: I,
                    minX: Math.min(k.x, N[0].x, N[1].x),
                    maxX: Math.max(k.x, N[0].x, N[1].x),
                    minY: Math.min(k.y, N[0].y, N[1].y),
                    maxY: Math.max(k.y, N[0].y, N[1].y)
                };
                return H
            } else {
                return {component: K, minX: 0, maxX: 0, minY: 0, maxY: 0}
            }
        }
    };
    jsPlumb.Overlays.PlainArrow = function (a) {
        a = a || {};
        var b = jsPlumb.extend(a, {foldback: 1});
        jsPlumb.Overlays.Arrow.call(this, b);
        this.type = "PlainArrow"
    };
    jsPlumb.Overlays.Diamond = function (a) {
        a = a || {};
        var c = a.length || 40, b = jsPlumb.extend(a, {
            length: c / 2,
            foldback: 2
        });
        jsPlumb.Overlays.Arrow.call(this, b);
        this.type = "Diamond"
    };
    var f = function (s) {
        jsPlumb.DOMElementComponent.apply(this, arguments);
        h.apply(this, arguments);
        var b = this, p = false, q = jsPlumb.CurrentLibrary;
        s = s || {};
        this.id = s.id;
        var u;
        var r = function () {
            u = s.create(s.component);
            u = q.getDOMElement(u);
            u.style.position = "absolute";
            var k = s._jsPlumb.overlayClass + " " + (b.cssClass ? b.cssClass : s.cssClass ? s.cssClass : "");
            u.className = k;
            s._jsPlumb.appendElement(u, s.component.parent);
            s._jsPlumb.getId(u);
            b.attachListeners(u, b);
            b.canvas = u
        };
        this.getElement = function () {
            if (u == null) {
                r()
            }
            return u
        };
        this.getDimensions = function () {
            return q.getSize(q.getElementObject(b.getElement()))
        };
        var d = null, c = function (k) {
            if (d == null) {
                d = b.getDimensions()
            }
            return d
        };
        this.clearCachedDimensions = function () {
            d = null
        };
        this.computeMaxSize = function () {
            var k = c();
            return Math.max(k[0], k[1])
        };
        var a = b.setVisible;
        b.setVisible = function (k) {
            a(k);
            u.style.display = k ? "block" : "none"
        };
        this.cleanup = function () {
            if (u != null) {
                q.removeElement(u)
            }
        };
        this.paint = function (k, l) {
            if (!p) {
                b.getElement();
                k.component.appendDisplayElement(u);
                b.attachListeners(u, k.component);
                p = true
            }
            u.style.left = (k.component.x + k.d.minx) + "px";
            u.style.top = (k.component.y + k.d.miny) + "px"
        };
        this.draw = function (D, n) {
            var m = c();
            if (m != null && m.length == 2) {
                var l = {x: 0, y: 0};
                if (D.pointOnPath) {
                    var k = b.loc, C = false;
                    if (jsPlumbUtil.isString(b.loc) || b.loc < 0 || b.loc > 1) {
                        k = parseInt(b.loc);
                        C = true
                    }
                    l = D.pointOnPath(k, C)
                } else {
                    var A = b.loc.constructor == Array ? b.loc : b.endpointLoc;
                    l = {x: A[0] * D.w, y: A[1] * D.h}
                }
                var o = l.x - (m[0] / 2), B = l.y - (m[1] / 2);
                return {
                    component: D,
                    d: {minx: o, miny: B, td: m, cxy: l},
                    minX: o,
                    maxX: o + m[0],
                    minY: B,
                    maxY: B + m[1]
                }
            } else {
                return {minX: 0, maxX: 0, minY: 0, maxY: 0}
            }
        };
        this.reattachListeners = function (k) {
            if (u) {
                b.reattachListenersForElement(u, b, k)
            }
        }
    };
    jsPlumb.Overlays.Custom = function (a) {
        this.type = "Custom";
        f.apply(this, arguments)
    };
    jsPlumb.Overlays.GuideLines = function () {
        var a = this;
        a.length = 50;
        a.lineWidth = 5;
        this.type = "GuideLines";
        h.apply(this, arguments);
        jsPlumb.jsPlumbUIComponent.apply(this, arguments);
        this.draw = function (p, r) {
            var b = p.pointAlongPathFrom(a.loc, a.length / 2), c = p.pointOnPath(a.loc), d = jsPlumbUtil.pointOnLine(b, c, a.length), o = jsPlumbUtil.perpendicularLineTo(b, d, 40), q = jsPlumbUtil.perpendicularLineTo(d, b, 20);
            return {
                connector: p,
                head: b,
                tail: d,
                headLine: q,
                tailLine: o,
                minX: Math.min(b.x, d.x, q[0].x, q[1].x),
                minY: Math.min(b.y, d.y, q[0].y, q[1].y),
                maxX: Math.max(b.x, d.x, q[0].x, q[1].x),
                maxY: Math.max(b.y, d.y, q[0].y, q[1].y)
            }
        };
        this.cleanup = function () {
        }
    };
    jsPlumb.Overlays.Label = function (b) {
        var n = this;
        this.labelStyle = b.labelStyle || jsPlumb.Defaults.LabelStyle;
        this.cssClass = this.labelStyle != null ? this.labelStyle.cssClass : null;
        b.create = function () {
            return document.createElement("div")
        };
        jsPlumb.Overlays.Custom.apply(this, arguments);
        this.type = "Label";
        var d = b.label || "", n = this, c = null;
        this.setLabel = function (k) {
            d = k;
            c = null;
            n.clearCachedDimensions();
            m();
            n.component.repaint()
        };
        var m = function () {
            if (typeof d == "function") {
                var k = d(n);
                n.getElement().innerHTML = k.replace(/\r\n/g, "<br/>")
            } else {
                if (c == null) {
                    c = d;
                    n.getElement().innerHTML = c.replace(/\r\n/g, "<br/>")
                }
            }
        };
        this.getLabel = function () {
            return d
        };
        var a = this.getDimensions;
        this.getDimensions = function () {
            m();
            return a()
        }
    }
})();
(function () {
    var f = function (c, a, h, b) {
        this.m = (b - a) / (h - c);
        this.b = -1 * ((this.m * c) - a);
        this.rectIntersect = function (g, w, F, x) {
            var y = [];
            var C = (w - this.b) / this.m;
            if (C >= g && C <= (g + F)) {
                y.push([C, (this.m * C) + this.b])
            }
            var E = (this.m * (g + F)) + this.b;
            if (E >= w && E <= (w + x)) {
                y.push([(E - this.b) / this.m, E])
            }
            var C = ((w + x) - this.b) / this.m;
            if (C >= g && C <= (g + F)) {
                y.push([C, (this.m * C) + this.b])
            }
            var E = (this.m * g) + this.b;
            if (E >= w && E <= (w + x)) {
                y.push([(E - this.b) / this.m, E])
            }
            if (y.length == 2) {
                var A = (y[0][0] + y[1][0]) / 2, B = (y[0][1] + y[1][1]) / 2;
                y.push([A, B]);
                var D = A <= g + (F / 2) ? -1 : 1, G = B <= w + (x / 2) ? -1 : 1;
                y.push([D, G]);
                return y
            }
            return null
        }
    }, e = function (c, a, h, b) {
        if (c <= h && b <= a) {
            return 1
        } else {
            if (c <= h && a <= b) {
                return 2
            } else {
                if (h <= c && b >= a) {
                    return 3
                }
            }
        }
        return 4
    }, d = function (q, r, o, s, p, a, b, u, c) {
        if (u <= c) {
            return [q, r]
        }
        if (o === 1) {
            if (s[3] <= 0 && p[3] >= 1) {
                return [q + (s[2] < 0.5 ? -1 * a : a), r]
            } else {
                if (s[2] >= 1 && p[2] <= 0) {
                    return [q, r + (s[3] < 0.5 ? -1 * b : b)]
                } else {
                    return [q + (-1 * a), r + (-1 * b)]
                }
            }
        } else {
            if (o === 2) {
                if (s[3] >= 1 && p[3] <= 0) {
                    return [q + (s[2] < 0.5 ? -1 * a : a), r]
                } else {
                    if (s[2] >= 1 && p[2] <= 0) {
                        return [q, r + (s[3] < 0.5 ? -1 * b : b)]
                    } else {
                        return [q + (1 * a), r + (-1 * b)]
                    }
                }
            } else {
                if (o === 3) {
                    if (s[3] >= 1 && p[3] <= 0) {
                        return [q + (s[2] < 0.5 ? -1 * a : a), r]
                    } else {
                        if (s[2] <= 0 && p[2] >= 1) {
                            return [q, r + (s[3] < 0.5 ? -1 * b : b)]
                        } else {
                            return [q + (-1 * a), r + (-1 * b)]
                        }
                    }
                } else {
                    if (o === 4) {
                        if (s[3] <= 0 && p[3] >= 1) {
                            return [q + (s[2] < 0.5 ? -1 * a : a), r]
                        } else {
                            if (s[2] <= 0 && p[2] >= 1) {
                                return [q, r + (s[3] < 0.5 ? -1 * b : b)]
                            } else {
                                return [q + (1 * a), r + (-1 * b)]
                            }
                        }
                    }
                }
            }
        }
    };
    jsPlumb.Connectors.StateMachine = function (q) {
        q = q || {};
        this.type = "StateMachine";
        var a = this, c = jsPlumb.Connectors.AbstractConnector.apply(this, arguments), u = q.curviness || 10, p = q.margin || 5, o = q.proximityLimit || 80, s = q.orientation && q.orientation === "clockwise", r = q.loopbackRadius || 25, b = q.showLoopback !== false;
        this._compute = function (ae, g) {
            var y = Math.abs(g.sourcePos[0] - g.targetPos[0]), k = Math.abs(g.sourcePos[1] - g.targetPos[1]), T = Math.min(g.sourcePos[0], g.targetPos[0]), X = Math.min(g.sourcePos[1], g.targetPos[1]);
            if (!b || (g.sourceEndpoint.elementId !== g.targetEndpoint.elementId)) {
                var af = g.sourcePos[0] < g.targetPos[0] ? 0 : y, Z = g.sourcePos[1] < g.targetPos[1] ? 0 : k, n = g.sourcePos[0] < g.targetPos[0] ? y : 0, x = g.sourcePos[1] < g.targetPos[1] ? k : 0;
                if (g.sourcePos[2] === 0) {
                    af -= p
                }
                if (g.sourcePos[2] === 1) {
                    af += p
                }
                if (g.sourcePos[3] === 0) {
                    Z -= p
                }
                if (g.sourcePos[3] === 1) {
                    Z += p
                }
                if (g.targetPos[2] === 0) {
                    n -= p
                }
                if (g.targetPos[2] === 1) {
                    n += p
                }
                if (g.targetPos[3] === 0) {
                    x -= p
                }
                if (g.targetPos[3] === 1) {
                    x += p
                }
                var V = (af + n) / 2, aa = (Z + x) / 2, ah = (-1 * V) / aa, m = Math.atan(ah), S = (ah == Infinity || ah == -Infinity) ? 0 : Math.abs(u / 2 * Math.sin(m)), w = (ah == Infinity || ah == -Infinity) ? 0 : Math.abs(u / 2 * Math.cos(m)), ag = e(af, Z, n, x), ac = Math.sqrt(Math.pow(n - af, 2) + Math.pow(x - Z, 2)), Y = d(V, aa, ag, g.sourcePos, g.targetPos, u, u, ac, o);
                c.addSegment("Bezier", {
                    x1: n,
                    y1: x,
                    x2: af,
                    y2: Z,
                    cp1x: Y[0],
                    cp1y: Y[1],
                    cp2x: Y[0],
                    cp2y: Y[1]
                })
            } else {
                var h = g.sourcePos[0], l = g.sourcePos[0], U = g.sourcePos[1] - p, ab = g.sourcePos[1] - p, W = h, ad = U - r;
                y = 2 * r, k = 2 * r, T = W - r, X = ad - r;
                ae.points[0] = T;
                ae.points[1] = X;
                ae.points[2] = y;
                ae.points[3] = k;
                c.addSegment("Arc", {
                    x1: (h - T) + 4,
                    y1: U - X,
                    startAngle: 0,
                    endAngle: 2 * Math.PI,
                    r: r,
                    ac: !s,
                    x2: (h - T) - 4,
                    y2: U - X,
                    cx: W - T,
                    cy: ad - X
                })
            }
        }
    }
})();
(function () {
    jsPlumb.Connectors.Flowchart = function (params) {
        this.type = "Flowchart";
        params = params || {};
        params.stub = params.stub || 30;
        var self = this, _super = jsPlumb.Connectors.AbstractConnector.apply(this, arguments), midpoint = params.midpoint || 0.5, points = [], segments = [], grid = params.grid, alwaysRespectStubs = params.alwaysRespectStubs, userSuppliedSegments = null, lastx = null, lasty = null, lastOrientation, cornerRadius = params.cornerRadius != null ? params.cornerRadius : 0, sgn = function (n) {
            return n < 0 ? -1 : n == 0 ? 0 : 1
        }, addSegment = function (segments, x, y, paintInfo) {
            if (lastx == x && lasty == y) {
                return
            }
            var lx = lastx == null ? paintInfo.sx : lastx, ly = lasty == null ? paintInfo.sy : lasty, o = lx == x ? "v" : "h", sgnx = sgn(x - lx), sgny = sgn(y - ly);
            lastx = x;
            lasty = y;
            segments.push([lx, ly, x, y, o, sgnx, sgny])
        }, segLength = function (s) {
            return Math.sqrt(Math.pow(s[0] - s[2], 2) + Math.pow(s[1] - s[3], 2))
        }, _cloneArray = function (a) {
            var _a = [];
            _a.push.apply(_a, a);
            return _a
        }, updateMinMax = function (a1) {
            self.bounds.minX = Math.min(self.bounds.minX, a1[2]);
            self.bounds.maxX = Math.max(self.bounds.maxX, a1[2]);
            self.bounds.minY = Math.min(self.bounds.minY, a1[3]);
            self.bounds.maxY = Math.max(self.bounds.maxY, a1[3])
        }, writeSegments = function (segments, paintInfo) {
            var current, next;
            for (var i = 0; i < segments.length - 1; i++) {
                current = current || _cloneArray(segments[i]);
                next = _cloneArray(segments[i + 1]);
                if (cornerRadius > 0 && current[4] != next[4]) {
                    var radiusToUse = Math.min(cornerRadius, segLength(current), segLength(next));
                    current[2] -= current[5] * radiusToUse;
                    current[3] -= current[6] * radiusToUse;
                    next[0] += next[5] * radiusToUse;
                    next[1] += next[6] * radiusToUse;
                    var ac = (current[6] == next[5] && next[5] == 1) || ((current[6] == next[5] && next[5] == 0) && current[5] != next[6]) || (current[6] == next[5] && next[5] == -1), sgny = next[1] > current[3] ? 1 : -1, sgnx = next[0] > current[2] ? 1 : -1, sgnEqual = sgny == sgnx, cx = (sgnEqual && ac || (!sgnEqual && !ac)) ? next[0] : current[2], cy = (sgnEqual && ac || (!sgnEqual && !ac)) ? current[3] : next[1];
                    _super.addSegment("Straight", {
                        x1: current[0],
                        y1: current[1],
                        x2: current[2],
                        y2: current[3]
                    });
                    _super.addSegment("Arc", {
                        r: radiusToUse,
                        x1: current[2],
                        y1: current[3],
                        x2: next[0],
                        y2: next[1],
                        cx: cx,
                        cy: cy,
                        ac: ac
                    })
                } else {
                    var dx = (current[2] == current[0]) ? 0 : (current[2] > current[0]) ? (paintInfo.lw / 2) : -(paintInfo.lw / 2), dy = (current[3] == current[1]) ? 0 : (current[3] > current[1]) ? (paintInfo.lw / 2) : -(paintInfo.lw / 2);
                    _super.addSegment("Straight", {
                        x1: current[0] - dx,
                        y1: current[1] - dy,
                        x2: current[2] + dx,
                        y2: current[3] + dy
                    })
                }
                current = next
            }
            _super.addSegment("Straight", {
                x1: next[0],
                y1: next[1],
                x2: next[2],
                y2: next[3]
            })
        };
        this.setSegments = function (s) {
            userSuppliedSegments = s
        };
        this.isEditable = function () {
            return true
        };
        this.getOriginalSegments = function () {
            return userSuppliedSegments || segments
        };
        this._compute = function (paintInfo, params) {
            if (params.clearEdits) {
                userSuppliedSegments = null
            }
            if (userSuppliedSegments != null) {
                writeSegments(userSuppliedSegments, paintInfo);
                return
            }
            segments = [];
            lastx = null;
            lasty = null;
            lastOrientation = null;
            var midx = paintInfo.startStubX + ((paintInfo.endStubX - paintInfo.startStubX) * midpoint), midy = paintInfo.startStubY + ((paintInfo.endStubY - paintInfo.startStubY) * midpoint);
            var findClearedLine = function (start, mult, anchorPos, dimension) {
                return start + (mult * ((1 - anchorPos) * dimension) + _super.maxStub)
            }, orientations = {
                x: [0, 1],
                y: [1, 0]
            }, commonStubCalculator = function (axis) {
                return [paintInfo.startStubX, paintInfo.startStubY, paintInfo.endStubX, paintInfo.endStubY]
            }, stubCalculators = {
                perpendicular: commonStubCalculator,
                orthogonal: commonStubCalculator,
                opposite: function (axis) {
                    var pi = paintInfo, idx = axis == "x" ? 0 : 1, areInProximity = {
                        x: function () {
                            return ((pi.so[idx] == 1 && (((pi.startStubX > pi.endStubX) && (pi.tx > pi.startStubX)) || ((pi.sx > pi.endStubX) && (pi.tx > pi.sx))))) || ((pi.so[idx] == -1 && (((pi.startStubX < pi.endStubX) && (pi.tx < pi.startStubX)) || ((pi.sx < pi.endStubX) && (pi.tx < pi.sx)))))
                        }, y: function () {
                            return ((pi.so[idx] == 1 && (((pi.startStubY > pi.endStubY) && (pi.ty > pi.startStubY)) || ((pi.sy > pi.endStubY) && (pi.ty > pi.sy))))) || ((pi.so[idx] == -1 && (((pi.startStubY < pi.endStubY) && (pi.ty < pi.startStubY)) || ((pi.sy < pi.endStubY) && (pi.ty < pi.sy)))))
                        }
                    };
                    if (!alwaysRespectStubs && areInProximity[axis]()) {
                        return {
                            x: [(paintInfo.sx + paintInfo.tx) / 2, paintInfo.startStubY, (paintInfo.sx + paintInfo.tx) / 2, paintInfo.endStubY],
                            y: [paintInfo.startStubX, (paintInfo.sy + paintInfo.ty) / 2, paintInfo.endStubX, (paintInfo.sy + paintInfo.ty) / 2]
                        }[axis]
                    } else {
                        return [paintInfo.startStubX, paintInfo.startStubY, paintInfo.endStubX, paintInfo.endStubY]
                    }
                }
            }, lineCalculators = {
                perpendicular: function (axis, ss, oss, es, oes) {
                    var sis = {
                            x: [[[1, 2, 3, 4], null, [2, 1, 4, 3]], null, [[4, 3, 2, 1], null, [3, 4, 1, 2]]],
                            y: [[[3, 2, 1, 4], null, [2, 3, 4, 1]], null, [[4, 1, 2, 3], null, [1, 4, 3, 2]]]
                        },
                        stubs = {
                            x: [[paintInfo.startStubX, paintInfo.endStubX], null, [paintInfo.endStubX, paintInfo.startStubX]],
                            y: [[paintInfo.startStubY, paintInfo.endStubY], null, [paintInfo.endStubY, paintInfo.startStubY]]
                        },
                        midLines = {
                            x: [[paintInfo.midx, paintInfo.startStubY], [paintInfo.midx, paintInfo.endStubY]],
                            y: [[paintInfo.startStubX, paintInfo.midy], [paintInfo.endStubX, paintInfo.midy]]
                        },
                        linesToEnd = {
                            x: [[paintInfo.endStubX, paintInfo.startStubY]],
                            y: [[paintInfo.startStubX, paintInfo.endStubY]]
                        },
                        startToEnd = {
                            x: [[paintInfo.startStubX, paintInfo.endStubY], [paintInfo.endStubX, paintInfo.endStubY]],
                            y: [[paintInfo.endStubX, paintInfo.startStubY], [paintInfo.endStubX, paintInfo.endStubY]]
                        },
                        startToMidToEnd = {
                            x: [[paintInfo.startStubX, paintInfo.midy], [paintInfo.endStubX, paintInfo.midy], [paintInfo.endStubX, paintInfo.endStubY]],
                            y: [[paintInfo.midx, paintInfo.startStubY], [paintInfo.midx, paintInfo.endStubY], [paintInfo.endStubX, paintInfo.endStubY]]
                        },
                        otherStubs = {
                            x: [paintInfo.startStubY, paintInfo.endStubY],
                            y: [paintInfo.startStubX, paintInfo.endStubX]
                        },
                        orientations = paintInfo.orientations,
                        so = paintInfo.so,
                        to = paintInfo.to,
                        soIdx = orientations[axis][0],
                        toIdx = orientations[axis][1],
                        _so = so[soIdx] + 1,
                        _to = to[toIdx] + 1,
                        otherFlipped = (to[toIdx] == -1 && (otherStubs[axis][1] < otherStubs[axis][0])) || (to[toIdx] == 1 && (otherStubs[axis][1] > otherStubs[axis][0])),
                        stub1 = stubs[axis][_so][0],
                        stub2 = stubs[axis][_so][1],
                        segmentIndexes = sis[axis][_so][_to];
                },
                orthogonal: function (axis, startStub, otherStartStub, endStub, otherEndStub) {
                    var pi = paintInfo, extent = {
                        x: pi.so[0] == -1 ? Math.min(startStub, endStub) : Math.max(startStub, endStub),
                        y: pi.so[1] == -1 ? Math.min(startStub, endStub) : Math.max(startStub, endStub)
                    }[axis];
                    return {
                        x: [[extent, otherStartStub], [extent, otherEndStub], [endStub, otherEndStub]],
                        y: [[otherStartStub, extent], [otherEndStub, extent], [otherEndStub, endStub]]
                    }[axis]
                },
                opposite: function (axis, ss, oss, es, oes) {
                    var pi = paintInfo, otherAxis = {
                        x: "y",
                        y: "x"
                    }[axis], dim = {
                        x: "height",
                        y: "width"
                    }[axis], comparator = pi["is" + axis.toUpperCase() + "GreaterThanStubTimes2"];
                    if (params.sourceEndpoint.elementId == params.targetEndpoint.elementId) {
                        var _val = oss + ((1 - params.sourceEndpoint.anchor[otherAxis]) * params.sourceInfo[dim]) + _super.maxStub;
                        return {
                            x: [[ss, _val], [es, _val]],
                            y: [[_val, ss], [_val, es]]
                        }[axis]
                    } else {
                        if (!comparator || (pi.so[idx] == 1 && ss > es) || (pi.so[idx] == -1 && ss < es)) {
                            return {
                                x: [[ss, midy], [es, midy]],
                                y: [[midx, ss], [midx, es]]
                            }[axis]
                        } else {
                            if ((pi.so[idx] == 1 && ss < es) || (pi.so[idx] == -1 && ss > es)) {
                                return {
                                    x: [[midx, pi.sy], [midx, pi.ty]],
                                    y: [[pi.sx, midy], [pi.tx, midy]]
                                }[axis]
                            }
                        }
                    }
                }
            };
            var stubs = stubCalculators[paintInfo.anchorOrientation](paintInfo.sourceAxis), idx = paintInfo.sourceAxis == "x" ? 0 : 1, oidx = paintInfo.sourceAxis == "x" ? 1 : 0, ss = stubs[idx], oss = stubs[oidx], es = stubs[idx + 2], oes = stubs[oidx + 2];
            addSegment(segments, stubs[0], stubs[1], paintInfo);
            var p = lineCalculators[paintInfo.anchorOrientation](paintInfo.sourceAxis, ss, oss, es, oes);
            if (p) {
                for (var i = 0; i < p.length; i++) {
                    addSegment(segments, p[i][0], p[i][1], paintInfo)
                }
            }
            addSegment(segments, stubs[2], stubs[3], paintInfo);
            addSegment(segments, paintInfo.tx, paintInfo.ty, paintInfo);
            writeSegments(segments, paintInfo)
        };
        this.getPath = function () {
            var _last = null, _lastAxis = null, s = [], segs = userSuppliedSegments || segments;
            for (var i = 0; i < segs.length; i++) {
                var seg = segs[i], axis = seg[4], axisIndex = (axis == "v" ? 3 : 2);
                if (_last != null && _lastAxis === axis) {
                    _last[axisIndex] = seg[axisIndex]
                } else {
                    if (seg[0] != seg[2] || seg[1] != seg[3]) {
                        s.push({
                            start: [seg[0], seg[1]],
                            end: [seg[2], seg[3]]
                        });
                        _last = seg;
                        _lastAxis = seg[4]
                    }
                }
            }
            return s
        };
        this.setPath = function (path) {
            userSuppliedSegments = [];
            for (var i = 0; i < path.length; i++) {
                var lx = path[i].start[0], ly = path[i].start[1], x = path[i].end[0], y = path[i].end[1], o = lx == x ? "v" : "h", sgnx = sgn(x - lx), sgny = sgn(y - ly);
                userSuppliedSegments.push([lx, ly, x, y, o, sgnx, sgny])
            }
        }
    }
})();
(function () {
    var G = {
        "stroke-linejoin": "joinstyle",
        joinstyle: "joinstyle",
        endcap: "endcap",
        miterlimit: "miterlimit"
    }, L = null;
    if (document.createStyleSheet && document.namespaces) {
        var D = [".jsplumb_vml", "jsplumb\\:textbox", "jsplumb\\:oval", "jsplumb\\:rect", "jsplumb\\:stroke", "jsplumb\\:shape", "jsplumb\\:group"], H = "behavior:url(#default#VML);position:absolute;";
        L = document.createStyleSheet();
        for (var x = 0; x < D.length; x++) {
            L.addRule(D[x], H)
        }
        document.namespaces.add("jsplumb", "urn:schemas-microsoft-com:vml")
    }
    jsPlumb.vml = {};
    var v = 1000, w = {}, N = function (b, c) {
        var d = jsPlumb.getId(b), a = w[d];
        if (!a) {
            a = I("group", [0, 0, v, v], {"class": c});
            a.style.backgroundColor = "red";
            w[d] = a;
            jsPlumb.appendElement(a, b)
        }
        return a
    }, J = function (b, a) {
        for (var c in a) {
            b[c] = a[c]
        }
    }, I = function (c, g, e, f, d, b) {
        e = e || {};
        var a = document.createElement("jsplumb:" + c);
        if (b) {
            d.appendElement(a, f)
        } else {
            jsPlumb.CurrentLibrary.appendElement(a, f)
        }
        a.className = (e["class"] ? e["class"] + " " : "") + "jsplumb_vml";
        F(a, g);
        J(a, e);
        return a
    }, F = function (b, c, a) {
        b.style.left = c[0] + "px";
        b.style.top = c[1] + "px";
        b.style.width = c[2] + "px";
        b.style.height = c[3] + "px";
        b.style.position = "absolute";
        if (a) {
            b.style.zIndex = a
        }
    }, A = jsPlumb.vml.convertValue = function (a) {
        return Math.floor(a * v)
    }, M = function (d, b, a, c) {
        if ("transparent" === b) {
            c.setOpacity(a, "0.0")
        } else {
            c.setOpacity(a, "1.0")
        }
    }, y = function (d, h, a, m) {
        var e = {};
        if (h.strokeStyle) {
            e.stroked = "true";
            var l = jsPlumbUtil.convertStyle(h.strokeStyle, true);
            e.strokecolor = l;
            M(e, l, "stroke", a);
            e.strokeweight = h.lineWidth + "px"
        } else {
            e.stroked = "false"
        }
        if (h.fillStyle) {
            e.filled = "true";
            var g = jsPlumbUtil.convertStyle(h.fillStyle, true);
            e.fillcolor = g;
            M(e, g, "fill", a)
        } else {
            e.filled = "false"
        }
        if (h.dashstyle) {
            if (a.strokeNode == null) {
                a.strokeNode = I("stroke", [0, 0, 0, 0], {dashstyle: h.dashstyle}, d, m)
            } else {
                a.strokeNode.dashstyle = h.dashstyle
            }
        } else {
            if (h["stroke-dasharray"] && h.lineWidth) {
                var k = h["stroke-dasharray"].indexOf(",") == -1 ? " " : ",", c = h["stroke-dasharray"].split(k), f = "";
                for (var b = 0; b < c.length; b++) {
                    f += (Math.floor(c[b] / h.lineWidth) + k)
                }
                if (a.strokeNode == null) {
                    a.strokeNode = I("stroke", [0, 0, 0, 0], {dashstyle: f}, d, m)
                } else {
                    a.strokeNode.dashstyle = f
                }
            }
        }
        J(d, e)
    }, C = function () {
        var c = this, a = {};
        jsPlumb.jsPlumbUIComponent.apply(this, arguments);
        this.opacityNodes = {stroke: null, fill: null};
        this.initOpacityNodes = function (d) {
            c.opacityNodes.stroke = I("stroke", [0, 0, 1, 1], {opacity: "0.0"}, d, c._jsPlumb);
            c.opacityNodes.fill = I("fill", [0, 0, 1, 1], {opacity: "0.0"}, d, c._jsPlumb)
        };
        this.setOpacity = function (f, e) {
            var d = c.opacityNodes[f];
            if (d) {
                d.opacity = "" + e
            }
        };
        var b = [];
        this.getDisplayElements = function () {
            return b
        };
        this.appendDisplayElement = function (d, e) {
            if (!e) {
                c.canvas.parentNode.appendChild(d)
            }
            b.push(d)
        }
    }, K = jsPlumb.ConnectorRenderers.vml = function (d) {
        var c = this;
        c.strokeNode = null;
        c.canvas = null;
        var a = C.apply(this, arguments);
        var b = c._jsPlumb.connectorClass + (d.cssClass ? (" " + d.cssClass) : "");
        this.paint = function (g) {
            if (g !== null) {
                var o = c.getSegments(), f = {path: ""}, n = [c.x, c.y, c.w, c.h];
                for (var e = 0; e < o.length; e++) {
                    f.path += jsPlumb.Segments.vml.SegmentRenderer.getPath(o[e]);
                    f.path += " "
                }
                if (g.outlineColor) {
                    var l = g.outlineWidth || 1, k = g.lineWidth + (2 * l), m = {
                        strokeStyle: jsPlumbUtil.convertStyle(g.outlineColor),
                        lineWidth: k
                    };
                    for (var h in G) {
                        m[h] = g[h]
                    }
                    if (c.bgCanvas == null) {
                        f["class"] = b;
                        f.coordsize = (n[2] * v) + "," + (n[3] * v);
                        c.bgCanvas = I("shape", n, f, d.parent, c._jsPlumb, true);
                        F(c.bgCanvas, n);
                        c.appendDisplayElement(c.bgCanvas, true);
                        c.attachListeners(c.bgCanvas, c);
                        c.initOpacityNodes(c.bgCanvas, ["stroke"])
                    } else {
                        f.coordsize = (n[2] * v) + "," + (n[3] * v);
                        F(c.bgCanvas, n);
                        J(c.bgCanvas, f)
                    }
                    y(c.bgCanvas, m, c)
                }
                if (c.canvas == null) {
                    f["class"] = b;
                    f.coordsize = (n[2] * v) + "," + (n[3] * v);
                    c.canvas = I("shape", n, f, d.parent, c._jsPlumb, true);
                    c.appendDisplayElement(c.canvas, true);
                    c.attachListeners(c.canvas, c);
                    c.initOpacityNodes(c.canvas, ["stroke"])
                } else {
                    f.coordsize = (n[2] * v) + "," + (n[3] * v);
                    F(c.canvas, n);
                    J(c.canvas, f)
                }
                y(c.canvas, g, c, c._jsPlumb)
            }
        };
        this.reattachListeners = function () {
            if (c.canvas) {
                c.reattachListenersForElement(c.canvas, c)
            }
        }
    }, E = window.VmlEndpoint = function (f) {
        C.apply(this, arguments);
        var d = null, b = this, c = null, a = null;
        b.canvas = document.createElement("div");
        b.canvas.style.position = "absolute";
        var e = b._jsPlumb.endpointClass + (f.cssClass ? (" " + f.cssClass) : "");
        f._jsPlumb.appendElement(b.canvas, f.parent);
        this.paint = function (h, k) {
            var g = {};
            jsPlumb.sizeCanvas(b.canvas, b.x, b.y, b.w, b.h);
            if (d == null) {
                g["class"] = e;
                d = b.getVml([0, 0, b.w, b.h], g, k, b.canvas, b._jsPlumb);
                b.attachListeners(d, b);
                b.appendDisplayElement(d, true);
                b.appendDisplayElement(b.canvas, true);
                b.initOpacityNodes(d, ["fill"])
            } else {
                F(d, [0, 0, b.w, b.h]);
                J(d, g)
            }
            y(d, h, b)
        };
        this.reattachListeners = function () {
            if (d) {
                b.reattachListenersForElement(d, b)
            }
        }
    };
    jsPlumb.Segments.vml = {
        SegmentRenderer: {
            getPath: function (a) {
                return ({
                    Straight: function (c) {
                        var b = c.params;
                        return "m" + A(b.x1) + "," + A(b.y1) + " l" + A(b.x2) + "," + A(b.y2) + " e"
                    }, Bezier: function (c) {
                        var b = c.params;
                        return "m" + A(b.x1) + "," + A(b.y1) + " c" + A(b.cp1x) + "," + A(b.cp1y) + "," + A(b.cp2x) + "," + A(b.cp2y) + "," + A(b.x2) + "," + A(b.y2) + " e"
                    }, Arc: function (c) {
                        var l = c.params, h = Math.min(l.x1, l.x2), d = Math.max(l.x1, l.x2), k = Math.min(l.y1, l.y2), f = Math.max(l.y1, l.y2), b = c.anticlockwise ? 1 : 0, g = (c.anticlockwise ? "at " : "wa "), e = function () {
                            var m = [null, [function () {
                                return [h, k]
                            }, function () {
                                return [h - l.r, k - l.r]
                            }], [function () {
                                return [h - l.r, k]
                            }, function () {
                                return [h, k - l.r]
                            }], [function () {
                                return [h - l.r, k - l.r]
                            }, function () {
                                return [h, k]
                            }], [function () {
                                return [h, k - l.r]
                            }, function () {
                                return [h - l.r, k]
                            }]][c.segment][b]();
                            return A(m[0]) + "," + A(m[1]) + "," + A(m[0] + (2 * l.r)) + "," + A(m[1] + (2 * l.r))
                        };
                        return g + e() + "," + A(l.x1) + "," + A(l.y1) + "," + A(l.x2) + "," + A(l.y2) + " e"
                    }
                })[a.type](a)
            }
        }
    };
    jsPlumb.Endpoints.vml.Dot = function () {
        jsPlumb.Endpoints.Dot.apply(this, arguments);
        E.apply(this, arguments);
        this.getVml = function (e, b, c, a, d) {
            return I("oval", e, b, a, d)
        }
    };
    jsPlumb.Endpoints.vml.Rectangle = function () {
        jsPlumb.Endpoints.Rectangle.apply(this, arguments);
        E.apply(this, arguments);
        this.getVml = function (e, b, c, a, d) {
            return I("rect", e, b, a, d)
        }
    };
    jsPlumb.Endpoints.vml.Image = jsPlumb.Endpoints.Image;
    jsPlumb.Endpoints.vml.Blank = jsPlumb.Endpoints.Blank;
    jsPlumb.Overlays.vml.Label = jsPlumb.Overlays.Label;
    jsPlumb.Overlays.vml.Custom = jsPlumb.Overlays.Custom;
    var B = function (b, a) {
        b.apply(this, a);
        C.apply(this, a);
        var c = this, e = null;
        c.canvas = null;
        c.isAppendedAtTopLevel = true;
        var d = function (f) {
            return "m " + A(f.hxy.x) + "," + A(f.hxy.y) + " l " + A(f.tail[0].x) + "," + A(f.tail[0].y) + " " + A(f.cxy.x) + "," + A(f.cxy.y) + " " + A(f.tail[1].x) + "," + A(f.tail[1].y) + " x e"
        };
        this.paint = function (u, s) {
            var g = {}, n = u.d, P = u.component;
            if (u.strokeStyle) {
                g.stroked = "true";
                g.strokecolor = jsPlumbUtil.convertStyle(u.strokeStyle, true)
            }
            if (u.lineWidth) {
                g.strokeweight = u.lineWidth + "px"
            }
            if (u.fillStyle) {
                g.filled = "true";
                g.fillcolor = u.fillStyle
            }
            var h = Math.min(n.hxy.x, n.tail[0].x, n.tail[1].x, n.cxy.x), k = Math.min(n.hxy.y, n.tail[0].y, n.tail[1].y, n.cxy.y), r = Math.max(n.hxy.x, n.tail[0].x, n.tail[1].x, n.cxy.x), f = Math.max(n.hxy.y, n.tail[0].y, n.tail[1].y, n.cxy.y), l = Math.abs(r - h), p = Math.abs(f - k), q = [h, k, l, p];
            g.path = d(n);
            g.coordsize = (P.w * v) + "," + (P.h * v);
            q[0] = P.x;
            q[1] = P.y;
            q[2] = P.w;
            q[3] = P.h;
            if (c.canvas == null) {
                var m = P._jsPlumb.overlayClass || "";
                var o = a && (a.length == 1) ? (a[0].cssClass || "") : "";
                g["class"] = o + " " + m;
                c.canvas = I("shape", q, g, P.canvas.parentNode, P._jsPlumb, true);
                P.appendDisplayElement(c.canvas, true);
                c.attachListeners(c.canvas, P);
                c.attachListeners(c.canvas, c)
            } else {
                F(c.canvas, q);
                J(c.canvas, g)
            }
        };
        this.reattachListeners = function () {
            if (c.canvas) {
                c.reattachListenersForElement(c.canvas, c)
            }
        };
        this.cleanup = function () {
            if (c.canvas != null) {
                jsPlumb.CurrentLibrary.removeElement(c.canvas)
            }
        }
    };
    jsPlumb.Overlays.vml.Arrow = function () {
        B.apply(this, [jsPlumb.Overlays.Arrow, arguments])
    };
    jsPlumb.Overlays.vml.PlainArrow = function () {
        B.apply(this, [jsPlumb.Overlays.PlainArrow, arguments])
    };
    jsPlumb.Overlays.vml.Diamond = function () {
        B.apply(this, [jsPlumb.Overlays.Diamond, arguments])
    }
})();
(function () {
    var Z = {
        joinstyle: "stroke-linejoin",
        "stroke-linejoin": "stroke-linejoin",
        "stroke-dashoffset": "stroke-dashoffset",
        "stroke-linecap": "stroke-linecap"
    }, H = "stroke-dasharray", O = "dashstyle", af = "linearGradient", ai = "radialGradient", ah = "fill", aj = "stop", Q = "stroke", S = "stroke-width", ac = "style", Y = "none", L = "jsplumb_gradient_", W = "lineWidth", K = {
        svg: "http://www.w3.org/2000/svg",
        xhtml: "http://www.w3.org/1999/xhtml"
    }, ad = function (a, c) {
        for (var b in c) {
            a.setAttribute(b, "" + c[b])
        }
    }, ae = function (b, c) {
        var a = document.createElementNS(K.svg, b);
        c = c || {};
        c.version = "1.1";
        c.xmlns = K.xhtml;
        ad(a, c);
        return a
    }, X = function (a) {
        return "position:absolute;left:" + a[0] + "px;top:" + a[1] + "px"
    }, ab = function (a) {
        for (var b = 0; b < a.childNodes.length; b++) {
            if (a.childNodes[b].tagName == af || a.childNodes[b].tagName == ai) {
                a.removeChild(a.childNodes[b])
            }
        }
    }, I = function (b, g, l, n, f) {
        var k = L + f._jsPlumb.idstamp();
        ab(b);
        var d;
        if (!l.gradient.offset) {
            d = ae(af, {id: k, gradientUnits: "userSpaceOnUse"})
        } else {
            d = ae(ai, {id: k})
        }
        b.appendChild(d);
        for (var e = 0; e < l.gradient.stops.length; e++) {
            var h = f.segment == 1 || f.segment == 2 ? e : l.gradient.stops.length - 1 - e, c = jsPlumbUtil.convertStyle(l.gradient.stops[h][1], true), a = ae(aj, {
                offset: Math.floor(l.gradient.stops[e][0] * 100) + "%",
                "stop-color": c
            });
            d.appendChild(a)
        }
        var m = l.strokeStyle ? Q : ah;
        g.setAttribute(ac, m + ":url(#" + k + ")")
    }, V = function (b, f, h, k, e) {
        if (h.gradient) {
            I(b, f, h, k, e)
        } else {
            ab(b);
            f.setAttribute(ac, "")
        }
        f.setAttribute(ah, h.fillStyle ? jsPlumbUtil.convertStyle(h.fillStyle, true) : Y);
        f.setAttribute(Q, h.strokeStyle ? jsPlumbUtil.convertStyle(h.strokeStyle, true) : Y);
        if (h.lineWidth) {
            f.setAttribute(S, h.lineWidth)
        }
        if (h[O] && h[W] && !h[H]) {
            var a = h[O].indexOf(",") == -1 ? " " : ",", d = h[O].split(a), g = "";
            d.forEach(function (l) {
                g += (Math.floor(l * h.lineWidth) + a)
            });
            f.setAttribute(H, g)
        } else {
            if (h[H]) {
                f.setAttribute(H, h[H])
            }
        }
        for (var c in Z) {
            if (h[c]) {
                f.setAttribute(Z[c], h[c])
            }
        }
    }, N = function (a) {
        var c = /([0-9].)(p[xt])\s(.*)/, b = a.match(c);
        return {size: b[1] + b[2], font: b[3]}
    }, P = function (h, g, d) {
        var f = d.split(" "), a = h.className, b = a.baseVal.split(" ");
        for (var c = 0; c < f.length; c++) {
            if (g) {
                if (b.indexOf(f[c]) == -1) {
                    b.push(f[c])
                }
            } else {
                var e = b.indexOf(f[c]);
                if (e != -1) {
                    b.splice(e, 1)
                }
            }
        }
        h.className.baseVal = b.join(" ")
    }, J = function (a, b) {
        P(a, true, b)
    }, aa = function (a, b) {
        P(a, false, b)
    }, R = function (b, a, c) {
        if (b.childNodes.length > c) {
            b.insertBefore(a, b.childNodes[c])
        } else {
            b.appendChild(a)
        }
    };
    jsPlumbUtil.svg = {
        addClass: J,
        removeClass: aa,
        node: ae,
        attr: ad,
        pos: X
    };
    var M = function (g) {
        var e = this, b = g.pointerEventsSpec || "all", a = {};
        jsPlumb.jsPlumbUIComponent.apply(this, g.originalArgs);
        e.canvas = null, e.path = null, e.svg = null;
        var c = g.cssClass + " " + (g.originalArgs[0].cssClass || ""), f = {
            style: "",
            width: 0,
            height: 0,
            "pointer-events": b,
            position: "absolute"
        };
        e.svg = ae("svg", f);
        if (g.useDivWrapper) {
            e.canvas = document.createElement("div");
            e.canvas.style.position = "absolute";
            jsPlumb.sizeCanvas(e.canvas, 0, 0, 1, 1);
            e.canvas.className = c
        } else {
            ad(e.svg, {"class": c});
            e.canvas = e.svg
        }
        g._jsPlumb.appendElement(e.canvas, g.originalArgs[0]["parent"]);
        if (g.useDivWrapper) {
            e.canvas.appendChild(e.svg)
        }
        var d = [e.canvas];
        this.getDisplayElements = function () {
            return d
        };
        this.appendDisplayElement = function (h) {
            d.push(h)
        };
        this.paint = function (m, n, l) {
            if (m != null) {
                var h = [e.x, e.y], o = [e.w, e.h], k;
                if (l != null) {
                    if (l.xmin < 0) {
                        h[0] += l.xmin
                    }
                    if (l.ymin < 0) {
                        h[1] += l.ymin
                    }
                    o[0] = l.xmax + ((l.xmin < 0) ? -l.xmin : 0);
                    o[1] = l.ymax + ((l.ymin < 0) ? -l.ymin : 0)
                }
                if (g.useDivWrapper) {
                    jsPlumb.sizeCanvas(e.canvas, h[0], h[1], o[0], o[1]);
                    h[0] = 0, h[1] = 0;
                    k = X([0, 0])
                } else {
                    k = X([h[0], h[1]])
                }
                a.paint.apply(this, arguments);
                ad(e.svg, {style: k, width: o[0], height: o[1]})
            }
        };
        return {renderer: a}
    };
    var ag = jsPlumb.ConnectorRenderers.svg = function (a) {
        var c = this, b = M.apply(this, [{
            cssClass: a._jsPlumb.connectorClass,
            originalArgs: arguments,
            pointerEventsSpec: "none",
            _jsPlumb: a._jsPlumb
        }]);
        b.renderer.paint = function (q, m, f) {
            var l = c.getSegments(), p = "", o = [0, 0];
            if (f.xmin < 0) {
                o[0] = -f.xmin
            }
            if (f.ymin < 0) {
                o[1] = -f.ymin
            }
            for (var n = 0; n < l.length; n++) {
                p += jsPlumb.Segments.svg.SegmentRenderer.getPath(l[n]);
                p += " "
            }
            var e = {
                d: p,
                transform: "translate(" + o[0] + "," + o[1] + ")",
                "pointer-events": a["pointer-events"] || "visibleStroke"
            }, h = null, k = [c.x, c.y, c.w, c.h];
            if (q.outlineColor) {
                var g = q.outlineWidth || 1, d = q.lineWidth + (2 * g), h = jsPlumb.CurrentLibrary.extend({}, q);
                h.strokeStyle = jsPlumbUtil.convertStyle(q.outlineColor);
                h.lineWidth = d;
                if (c.bgPath == null) {
                    c.bgPath = ae("path", e);
                    R(c.svg, c.bgPath, 0);
                    c.attachListeners(c.bgPath, c)
                } else {
                    ad(c.bgPath, e)
                }
                V(c.svg, c.bgPath, h, k, c)
            }
            if (c.path == null) {
                c.path = ae("path", e);
                R(c.svg, c.path, q.outlineColor ? 1 : 0);
                c.attachListeners(c.path, c)
            } else {
                ad(c.path, e)
            }
            V(c.svg, c.path, q, k, c)
        };
        this.reattachListeners = function () {
            if (c.bgPath) {
                c.reattachListenersForElement(c.bgPath, c)
            }
            if (c.path) {
                c.reattachListenersForElement(c.path, c)
            }
        }
    };
    jsPlumb.Segments.svg = {
        SegmentRenderer: {
            getPath: function (a) {
                return ({
                    Straight: function () {
                        var b = a.getCoordinates();
                        return "M " + b.x1 + " " + b.y1 + " L " + b.x2 + " " + b.y2
                    }, Bezier: function () {
                        var b = a.params;
                        return "M " + b.x1 + " " + b.y1 + " C " + b.cp1x + " " + b.cp1y + " " + b.cp2x + " " + b.cp2y + " " + b.x2 + " " + b.y2
                    }, Arc: function () {
                        var b = a.params, d = a.sweep > Math.PI ? 1 : 0, c = a.anticlockwise ? 0 : 1;
                        return "M" + a.x1 + " " + a.y1 + " A " + a.radius + " " + b.r + " 0 " + d + "," + c + " " + a.x2 + " " + a.y2
                    }
                })[a.type]()
            }
        }
    };
    var U = window.SvgEndpoint = function (a) {
        var c = this, b = M.apply(this, [{
            cssClass: a._jsPlumb.endpointClass,
            originalArgs: arguments,
            pointerEventsSpec: "all",
            useDivWrapper: true,
            _jsPlumb: a._jsPlumb
        }]);
        b.renderer.paint = function (d) {
            var e = jsPlumb.extend({}, d);
            if (e.outlineColor) {
                e.strokeWidth = e.outlineWidth;
                e.strokeStyle = jsPlumbUtil.convertStyle(e.outlineColor, true)
            }
            if (c.node == null) {
                c.node = c.makeNode(e);
                c.svg.appendChild(c.node);
                c.attachListeners(c.node, c)
            } else {
                if (c.updateNode != null) {
                    c.updateNode(c.node)
                }
            }
            V(c.svg, c.node, e, [c.x, c.y, c.w, c.h], c);
            X(c.node, [c.x, c.y])
        };
        this.reattachListeners = function () {
            if (c.node) {
                c.reattachListenersForElement(c.node, c)
            }
        }
    };
    jsPlumb.Endpoints.svg.Dot = function () {
        jsPlumb.Endpoints.Dot.apply(this, arguments);
        U.apply(this, arguments);
        this.makeNode = function (a) {
            return ae("circle", {
                cx: this.w / 2,
                cy: this.h / 2,
                r: this.radius
            })
        };
        this.updateNode = function (a) {
            ad(a, {cx: this.w / 2, cy: this.h / 2, r: this.radius})
        }
    };
    jsPlumb.Endpoints.svg.Rectangle = function () {
        jsPlumb.Endpoints.Rectangle.apply(this, arguments);
        U.apply(this, arguments);
        this.makeNode = function (a) {
            return ae("rect", {width: this.w, height: this.h})
        };
        this.updateNode = function (a) {
            ad(a, {width: this.w, height: this.h})
        }
    };
    jsPlumb.Endpoints.svg.Image = jsPlumb.Endpoints.Image;
    jsPlumb.Endpoints.svg.Blank = jsPlumb.Endpoints.Blank;
    jsPlumb.Overlays.svg.Label = jsPlumb.Overlays.Label;
    jsPlumb.Overlays.svg.Custom = jsPlumb.Overlays.Custom;
    var T = function (a, c) {
        a.apply(this, c);
        jsPlumb.jsPlumbUIComponent.apply(this, c);
        this.isAppendedAtTopLevel = false;
        var e = this, b = null;
        this.paint = function (f, k) {
            if (f.component.svg && k) {
                if (b == null) {
                    b = ae("path", {"pointer-events": "all"});
                    f.component.svg.appendChild(b);
                    e.attachListeners(b, f.component);
                    e.attachListeners(b, e)
                }
                var h = c && (c.length == 1) ? (c[0].cssClass || "") : "", g = [0, 0];
                if (k.xmin < 0) {
                    g[0] = -k.xmin
                }
                if (k.ymin < 0) {
                    g[1] = -k.ymin
                }
                ad(b, {
                    d: d(f.d),
                    "class": h,
                    stroke: f.strokeStyle ? f.strokeStyle : null,
                    fill: f.fillStyle ? f.fillStyle : null,
                    transform: "translate(" + g[0] + "," + g[1] + ")"
                })
            }
        };
        var d = function (f) {
            return "M" + f.hxy.x + "," + f.hxy.y + " L" + f.tail[0].x + "," + f.tail[0].y + " L" + f.cxy.x + "," + f.cxy.y + " L" + f.tail[1].x + "," + f.tail[1].y + " L" + f.hxy.x + "," + f.hxy.y
        };
        this.reattachListeners = function () {
            if (b) {
                e.reattachListenersForElement(b, e)
            }
        };
        this.cleanup = function () {
            if (b != null) {
                jsPlumb.CurrentLibrary.removeElement(b)
            }
        }
    };
    jsPlumb.Overlays.svg.Arrow = function () {
        T.apply(this, [jsPlumb.Overlays.Arrow, arguments])
    };
    jsPlumb.Overlays.svg.PlainArrow = function () {
        T.apply(this, [jsPlumb.Overlays.PlainArrow, arguments])
    };
    jsPlumb.Overlays.svg.Diamond = function () {
        T.apply(this, [jsPlumb.Overlays.Diamond, arguments])
    };
    jsPlumb.Overlays.svg.GuideLines = function () {
        var a = null, e = this, b, c;
        jsPlumb.Overlays.GuideLines.apply(this, arguments);
        this.paint = function (f, h) {
            if (a == null) {
                a = ae("path");
                f.connector.svg.appendChild(a);
                e.attachListeners(a, f.connector);
                e.attachListeners(a, e);
                b = ae("path");
                f.connector.svg.appendChild(b);
                e.attachListeners(b, f.connector);
                e.attachListeners(b, e);
                c = ae("path");
                f.connector.svg.appendChild(c);
                e.attachListeners(c, f.connector);
                e.attachListeners(c, e)
            }
            var g = [0, 0];
            if (h.xmin < 0) {
                g[0] = -h.xmin
            }
            if (h.ymin < 0) {
                g[1] = -h.ymin
            }
            ad(a, {
                d: d(f.head, f.tail),
                stroke: "red",
                fill: null,
                transform: "translate(" + g[0] + "," + g[1] + ")"
            });
            ad(b, {
                d: d(f.tailLine[0], f.tailLine[1]),
                stroke: "blue",
                fill: null,
                transform: "translate(" + g[0] + "," + g[1] + ")"
            });
            ad(c, {
                d: d(f.headLine[0], f.headLine[1]),
                stroke: "green",
                fill: null,
                transform: "translate(" + g[0] + "," + g[1] + ")"
            })
        };
        var d = function (f, g) {
            return "M " + f.x + "," + f.y + " L" + g.x + "," + g.y
        }
    }
})();
(function (c) {
    var d = function (a) {
        return typeof(a) == "string" ? c("#" + a) : c(a)
    };
    jsPlumb.CurrentLibrary = {
        addClass: function (b, e) {
            b = d(b);
            try {
                if (b[0].className.constructor == SVGAnimatedString) {
                    jsPlumbUtil.svg.addClass(b[0], e)
                }
            } catch (a) {
            }
            try {
                b.addClass(e)
            } catch (a) {
            }
        },
        animate: function (a, b, f) {
            a.animate(b, f)
        },
        appendElement: function (a, b) {
            d(b).append(a)
        },
        ajax: function (a) {
            a = a || {};
            a.type = a.type || "get";
            c.ajax(a)
        },
        bind: function (f, b, a) {
            f = d(f);
            f.bind(b, a)
        },
        dragEvents: {
            start: "start",
            stop: "stop",
            drag: "drag",
            step: "step",
            over: "over",
            out: "out",
            drop: "drop",
            complete: "complete"
        },
        extend: function (a, b) {
            return c.extend(a, b)
        },
        getAttribute: function (b, a) {
            return b.attr(a)
        },
        getClientXY: function (a) {
            return [a.clientX, a.clientY]
        },
        getDragObject: function (a) {
            return a[1].draggable || a[1].helper
        },
        getDragScope: function (a) {
            return a.draggable("option", "scope")
        },
        getDropEvent: function (a) {
            return a[0]
        },
        getDropScope: function (a) {
            return a.droppable("option", "scope")
        },
        getDOMElement: function (a) {
            if (typeof(a) == "string") {
                return document.getElementById(a)
            } else {
                if (a.context || a.length != null) {
                    return a[0]
                } else {
                    return a
                }
            }
        },
        getElementObject: d,
        getOffset: function (a) {
            return a.offset()
        },
        getOriginalEvent: function (a) {
            return a.originalEvent
        },
        getPageXY: function (a) {
            return [a.pageX, a.pageY]
        },
        getParent: function (a) {
            return d(a).parent()
        },
        getScrollLeft: function (a) {
            return a.scrollLeft()
        },
        getScrollTop: function (a) {
            return a.scrollTop()
        },
        getSelector: function (a, b) {
            if (arguments.length == 2) {
                return d(a).find(b)
            } else {
                return c(a)
            }
        },
        getSize: function (a) {
            return [a.outerWidth(), a.outerHeight()]
        },
        getTagName: function (b) {
            var a = d(b);
            return a.length > 0 ? a[0].tagName : null
        },
        getUIPosition: function (g, b) {
            b = b || 1;
            if (g.length == 1) {
                ret = {left: g[0].pageX, top: g[0].pageY}
            } else {
                var a = g[1], h = a.offset;
                ret = h || a.absolutePosition;
                a.position.left /= b;
                a.position.top /= b
            }
            return {left: ret.left / b, top: ret.top / b}
        },
        hasClass: function (a, b) {
            return a.hasClass(b)
        },
        initDraggable: function (b, g, a, h) {
            g = g || {};
            if (!g.doNotRemoveHelper) {
                g.helper = null
            }
            if (a) {
                g.scope = g.scope || jsPlumb.Defaults.Scope
            }
            b.draggable(g)
        },
        initDroppable: function (a, b) {
            b.scope = b.scope || jsPlumb.Defaults.Scope;
            a.droppable(b)
        },
        isAlreadyDraggable: function (a) {
            return d(a).hasClass("ui-draggable")
        },
        isDragSupported: function (a, b) {
            return a.draggable
        },
        isDropSupported: function (a, b) {
            return a.droppable
        },
        removeClass: function (b, e) {
            b = d(b);
            try {
                if (b[0].className.constructor == SVGAnimatedString) {
                    jsPlumbUtil.svg.removeClass(b[0], e);
                    return
                }
            } catch (a) {
            }
            b.removeClass(e)
        },
        removeElement: function (a) {
            d(a).remove()
        },
        setAttribute: function (b, a, f) {
            b.attr(a, f)
        },
        setDragFilter: function (a, b) {
            if (jsPlumb.CurrentLibrary.isAlreadyDraggable(a)) {
                a.draggable("option", "cancel", b)
            }
        },
        setDraggable: function (a, b) {
            a.draggable("option", "disabled", !b)
        },
        setDragScope: function (a, b) {
            a.draggable("option", "scope", b)
        },
        setOffset: function (b, a) {
            d(b).offset(a)
        },
        trigger: function (b, a, h) {
            var g = jQuery._data(d(b)[0], "handle");
            g(h)
        },
        unbind: function (f, b, a) {
            f = d(f);
            f.unbind(b, a)
        }
    };
    c(document).ready(jsPlumb.init)
})(jQuery);
(function () {
    "undefined" == typeof Math.sgn && (Math.sgn = function (a) {
        return 0 == a ? 0 : 0 < a ? 1 : -1
    });
    var y = {
        subtract: function (a, b) {
            return {x: a.x - b.x, y: a.y - b.y}
        }, dotProduct: function (a, b) {
            return a.x * b.x + a.y * b.y
        }, square: function (a) {
            return Math.sqrt(a.x * a.x + a.y * a.y)
        }, scale: function (a, b) {
            return {x: a.x * b, y: a.y * b}
        }
    }, x = Math.pow(2, -65), s = function (c, f) {
        for (var l = [], h = f.length - 1, m = 2 * h - 1, C = [], k = [], d = [], a = [], b = [[1, 0.6, 0.3, 0.1], [0.4, 0.6, 0.6, 0.4], [0.1, 0.3, 0.6, 1]], g = 0; g <= h; g++) {
            C[g] = y.subtract(f[g], c)
        }
        for (g = 0; g <= h - 1; g++) {
            k[g] = y.subtract(f[g + 1], f[g]), k[g] = y.scale(k[g], 3)
        }
        for (g = 0; g <= h - 1; g++) {
            for (var e = 0; e <= h; e++) {
                d[g] || (d[g] = []), d[g][e] = y.dotProduct(k[g], C[e])
            }
        }
        for (g = 0; g <= m; g++) {
            a[g] || (a[g] = []), a[g].y = 0, a[g].x = parseFloat(g) / m
        }
        m = h - 1;
        for (C = 0; C <= h + m; C++) {
            g = Math.max(0, C - m);
            for (k = Math.min(C, h); g <= k; g++) {
                j = C - g, a[g + j].y += d[j][g] * b[j][g]
            }
        }
        h = f.length - 1;
        a = p(a, 2 * h - 1, l, 0);
        m = y.subtract(c, f[0]);
        d = y.square(m);
        for (g = b = 0; g < a; g++) {
            m = y.subtract(c, q(f, h, l[g], null, null)), m = y.square(m), m < d && (d = m, b = l[g])
        }
        m = y.subtract(c, f[h]);
        m = y.square(m);
        m < d && (d = m, b = 1);
        return {location: b, distance: d}
    }, p = function (G, I, f, c) {
        var g = [], h = [], d = [], m = [], k = 0, l, a;
        a = Math.sgn(G[0].y);
        for (var H = 1; H <= I; H++) {
            l = Math.sgn(G[H].y), l != a && k++, a = l
        }
        switch (k) {
            case 0:
                return 0;
            case 1:
                if (64 <= c) {
                    return f[0] = (G[0].x + G[I].x) / 2, 1
                }
                var e, b, k = G[0].y - G[I].y;
                a = G[I].x - G[0].x;
                H = G[0].x * G[I].y - G[I].x * G[0].y;
                l = max_distance_below = 0;
                for (e = 1; e < I; e++) {
                    b = k * G[e].x + a * G[e].y + H, b > l ? l = b : b < max_distance_below && (max_distance_below = b)
                }
                b = a;
                e = 0 * b - 1 * k;
                l = (1 * (H - l) - 0 * b) * (1 / e);
                b = a;
                a = H - max_distance_below;
                e = 0 * b - 1 * k;
                k = (1 * a - 0 * b) * (1 / e);
                a = Math.min(l, k);
                if (Math.max(l, k) - a < x) {
                    return d = G[I].x - G[0].x, m = G[I].y - G[0].y, f[0] = 0 + 1 * (d * (G[0].y - 0) - m * (G[0].x - 0)) * (1 / (0 * d - 1 * m)), 1
                }
        }
        q(G, I, 0.5, g, h);
        G = p(g, I, d, c + 1);
        I = p(h, I, m, c + 1);
        for (c = 0; c < G; c++) {
            f[c] = d[c]
        }
        for (c = 0; c < I; c++) {
            f[c + G] = m[c]
        }
        return G + I
    }, q = function (f, g, c, a, d) {
        for (var e = [[]], b = 0; b <= g; b++) {
            e[0][b] = f[b]
        }
        for (f = 1; f <= g; f++) {
            for (b = 0; b <= g - f; b++) {
                e[f] || (e[f] = []), e[f][b] || (e[f][b] = {}), e[f][b].x = (1 - c) * e[f - 1][b].x + c * e[f - 1][b + 1].x, e[f][b].y = (1 - c) * e[f - 1][b].y + c * e[f - 1][b + 1].y
            }
        }
        if (null != a) {
            for (b = 0; b <= g; b++) {
                a[b] = e[b][0]
            }
        }
        if (null != d) {
            for (b = 0; b <= g; b++) {
                d[b] = e[g - b][b]
            }
        }
        return e[g][0]
    }, u = {}, n = function (f, g) {
        var m, k = f.length - 1;
        m = u[k];
        if (!m) {
            m = [];
            var a = function (B) {
                return function () {
                    return B
                }
            }, b = function () {
                return function (B) {
                    return B
                }
            }, l = function () {
                return function (B) {
                    return 1 - B
                }
            }, e = function (B) {
                return function (F) {
                    for (var A = 1, E = 0; E < B.length; E++) {
                        A *= B[E](F)
                    }
                    return A
                }
            };
            m.push(new function () {
                return function (B) {
                    return Math.pow(B, k)
                }
            });
            for (var c = 1; c < k; c++) {
                for (var d = [new a(k)], h = 0; h < k - c; h++) {
                    d.push(new b)
                }
                for (h = 0; h < c; h++) {
                    d.push(new l)
                }
                m.push(new e(d))
            }
            m.push(new function () {
                return function (B) {
                    return Math.pow(1 - B, k)
                }
            });
            u[k] = m
        }
        for (l = b = a = 0; l < f.length; l++) {
            a += f[l].x * m[l](g), b += f[l].y * m[l](g)
        }
        return {x: a, y: b}
    }, v = function (a, b) {
        return Math.sqrt(Math.pow(a.x - b.x, 2) + Math.pow(a.y - b.y, 2))
    }, w = function (a) {
        return a[0].x == a[1].x && a[0].y == a[1].y
    }, o = function (f, g, c) {
        if (w(f)) {
            return {point: f[0], location: g}
        }
        for (var a = n(f, g), d = 0, e = 0 < c ? 1 : -1, b = null; d < Math.abs(c);) {
            g += 0.005 * e, b = n(f, g), d += v(b, a), a = b
        }
        return {point: b, location: g}
    }, r = function (d, e) {
        var b = n(d, e), a = n(d.slice(0, d.length - 1), e), c = a.y - b.y, b = a.x - b.x;
        return 0 == c ? Infinity : Math.atan(c / b)
    };
    window.jsBezier = {
        distanceFromCurve: s,
        gradientAtPoint: r,
        gradientAtPointAlongCurveFrom: function (b, c, a) {
            c = o(b, c, a);
            1 < c.location && (c.location = 1);
            0 > c.location && (c.location = 0);
            return r(b, c.location)
        },
        nearestPointOnCurve: function (b, c) {
            var a = s(b, c);
            return {
                point: q(c, c.length - 1, a.location, null, null),
                location: a.location
            }
        },
        pointOnCurve: n,
        pointAlongCurveFrom: function (b, c, a) {
            return o(b, c, a).point
        },
        perpendicularToCurveAt: function (c, d, b, a) {
            d = o(c, d, null == a ? 0 : a);
            c = r(c, d.location);
            a = Math.atan(-1 / c);
            c = b / 2 * Math.sin(a);
            b = b / 2 * Math.cos(a);
            return [{x: d.point.x + b, y: d.point.y + c}, {
                x: d.point.x - b,
                y: d.point.y - c
            }]
        },
        locationAlongCurveFrom: function (b, c, a) {
            return o(b, c, a).location
        },
        getLength: function (d) {
            if (w(d)) {
                return 0
            }
            for (var e = n(d, 0), b = 0, a = 0, c = null; 1 > a;) {
                a += 0.005, c = n(d, a), b += v(c, e), e = c
            }
            return b
        }
    }
})();
(function ($) {
    $.fn.markItUp = function (settings, extraSettings) {
        var method, params, options, ctrlKey, shiftKey, altKey;
        ctrlKey = shiftKey = altKey = false;
        if (typeof settings == "string") {
            method = settings;
            params = extraSettings
        }
        options = {
            id: "",
            nameSpace: "",
            root: "",
            previewHandler: false,
            previewInWindow: "",
            previewInElement: "",
            previewAutoRefresh: true,
            previewPosition: "after",
            previewTemplatePath: "~/templates/preview.html",
            previewParser: false,
            previewParserPath: "",
            previewParserVar: "data",
            resizeHandle: true,
            beforeInsert: "",
            afterInsert: "",
            onEnter: {},
            onShiftEnter: {},
            onCtrlEnter: {},
            onTab: {},
            markupSet: [{}]
        };
        $.extend(options, settings, extraSettings);
        if (!options.root) {
            $("script").each(function (a, tag) {
                miuScript = $(tag).get(0).src.match(/(.*)jquery\.markitup(\.pack)?\.js$/);
                if (miuScript !== null) {
                    options.root = miuScript[1]
                }
            })
        }
        var uaMatch = function (ua) {
            ua = ua.toLowerCase();
            var match = /(chrome)[ \/]([\w.]+)/.exec(ua) || /(webkit)[ \/]([\w.]+)/.exec(ua) || /(opera)(?:.*version|)[ \/]([\w.]+)/.exec(ua) || /(msie) ([\w.]+)/.exec(ua) || ua.indexOf("compatible") < 0 && /(mozilla)(?:.*? rv:([\w.]+)|)/.exec(ua) || [];
            return {browser: match[1] || "", version: match[2] || "0"}
        };
        var matched = uaMatch(navigator.userAgent);
        var browser = {};
        if (matched.browser) {
            browser[matched.browser] = true;
            browser.version = matched.version
        }
        if (browser.chrome) {
            browser.webkit = true
        } else {
            if (browser.webkit) {
                browser.safari = true
            }
        }
        return this.each(function () {
            var $$, textarea, levels, scrollPosition, caretPosition, caretOffset, clicked, hash, header, footer, previewWindow, template, iFrame, abort;
            $$ = $(this);
            textarea = this;
            levels = [];
            abort = false;
            scrollPosition = caretPosition = 0;
            caretOffset = -1;
            options.previewParserPath = localize(options.previewParserPath);
            options.previewTemplatePath = localize(options.previewTemplatePath);
            if (method) {
                switch (method) {
                    case"remove":
                        remove();
                        break;
                    case"insert":
                        markup(params);
                        break;
                    default:
                        $.error("Method " + method + " does not exist on jQuery.markItUp")
                }
                return
            }
            function localize(data, inText) {
                if (inText) {
                    return data.replace(/("|')~\//g, "$1" + options.root)
                }
                return data.replace(/^~\//, options.root)
            }

            function init() {
                id = "";
                nameSpace = "";
                if (options.id) {
                    id = 'id="' + options.id + '"'
                } else {
                    if ($$.attr("id")) {
                        id = 'id="markItUp' + ($$.attr("id").substr(0, 1).toUpperCase()) + ($$.attr("id").substr(1)) + '"'
                    }
                }
                if (options.nameSpace) {
                    nameSpace = 'class="' + options.nameSpace + '"'
                }
                $$.wrap("<div " + nameSpace + "></div>");
                $$.wrap("<div " + id + ' class="markItUp"></div>');
                $$.wrap('<div class="markItUpContainer"></div>');
                $$.addClass("markItUpEditor");
                header = $('<div class="markItUpHeader"></div>').insertBefore($$);
                var $basicSet = $(dropMenus(options.markupSet[0], "miu_basic"));
                $basicSet.append('<li class="txt_link fright li_miu_advanced"><span class="toggle_miu_advanced show_miu_advanced awesome-button" role="button">' + locaKeys.moreopts + "</span></li>");
                $basicSet.appendTo(header);
                var $advancedSet = $(dropMenus(options.markupSet[1], "miu_advanced"));
                $advancedSet.appendTo(header).hide();
                footer = $('<div class="markItUpFooter"></div>').insertAfter($$);
                if (options.resizeHandle === true && browser.safari !== true) {
                    resizeHandle = $('<div class="markItUpResizeHandle"></div>').insertAfter($$).bind("mousedown.markItUp", function (e) {
                        var h = $$.height(), y = e.clientY, mouseMove, mouseUp;
                        mouseMove = function (e) {
                            $$.css("height", Math.max(20, e.clientY + h - y) + "px");
                            return false
                        };
                        mouseUp = function (e) {
                            $("html").unbind("mousemove.markItUp", mouseMove).unbind("mouseup.markItUp", mouseUp);
                            return false
                        };
                        $("html").bind("mousemove.markItUp", mouseMove).bind("mouseup.markItUp", mouseUp)
                    });
                    footer.append(resizeHandle)
                }
                $$.bind("keydown.markItUp", keyPressed).bind("keyup", keyPressed);
                $$.bind("insertion.markItUp", function (e, settings) {
                    if (settings.target !== false) {
                        get()
                    }
                    if (textarea === $.markItUp.focused) {
                        markup(settings)
                    }
                });
                $$.bind("focus.markItUp", function () {
                    $.markItUp.focused = this
                });
                if (options.previewInElement) {
                    refreshPreview()
                }
            }

            function dropMenus(markupSet, mSetClass) {
                if (!mSetClass) {
                    mSetClass = ""
                }
                var ul = $('<ul class="' + mSetClass + '"></ul>'), i = 0;
                $.each(markupSet, function () {
                    var button = this, t = "", title, li, j;
                    title = (button.key) ? (button.name || "") + " [Ctrl+" + button.key + "]" : (button.name || "");
                    key = (button.key) ? 'accesskey="' + button.key + '"' : "";
                    if (button.separator) {
                        li = $('<li class="markItUpSeparator">' + (button.separator || "") + "</li>").appendTo(ul)
                    } else {
                        i++;
                        for (j = levels.length - 1; j >= 0; j--) {
                            t += levels[j] + "-"
                        }
                        li = $('<li class="markItUpButton markItUpButton' + t + (i) + " " + (button.className || "") + '"><a href="" ' + key + ' title="' + title + '">' + (button.name || "") + "</a></li>").bind("contextmenu.markItUp", function () {
                            return false
                        }).appendTo(ul);
                        if (!isMobile) {
                            li.unbind("click.markItUp").bind("click.markItUp", function () {
                                if (button.call) {
                                    eval(button.call)()
                                } else {
                                    var $innerUL = $(">ul", li);
                                    if ($innerUL.length > 0) {
                                        $innerUL.parents(".ui-dialog").find(".ui-dialog-titlebar-close").on("click", function () {
                                            $innerUL.hide()
                                        });
                                        $innerUL.addClass("markItUpOutpost");
                                        $("body").append($innerUL);
                                        var randomId = Math.ceil(Math.random() * 10000);
                                        li.attr("id", "markitUpDropdown" + randomId);
                                        $innerUL.attr("rel", "markitUpDropdown" + randomId);
                                        $innerUL.find(">li").bind("click.markItUp", function () {
                                            $innerUL.hide();
                                            li.attr("data-opened", 0)
                                        });
                                        $(window).on("resize", function (e) {
                                            repositionDropdowns($innerUL, li)
                                        })
                                    } else {
                                        $innerUL = $('body>ul[rel="' + li.attr("id") + '"]')
                                    }
                                    $("html").one("click.markItUp2", function () {
                                        $innerUL.hide();
                                        li.attr("data-opened", 0)
                                    });
                                    repositionDropdowns($innerUL, li);
                                    if ($innerUL.filter(":visible").length) {
                                        $innerUL.hide();
                                        li.attr("data-opened", 0)
                                    } else {
                                        $innerUL.show();
                                        li.attr("data-opened", 1)
                                    }
                                }
                                setTimeout(function () {
                                    markup(button)
                                }, 1);
                                return false
                            }).bind("focusin.markItUp", function () {
                                $$.focus()
                            })
                        } else {
                            li.bind("click.markItUp", function () {
                                $(header).find("ul ul").hide();
                                if ($(this).find("> ul").length) {
                                    $(this).find("> ul").show()
                                } else {
                                    if (button.call) {
                                        eval(button.call)()
                                    }
                                    setTimeout(function () {
                                        markup(button)
                                    }, 1)
                                }
                                return false
                            })
                        }
                        if (button.dropMenu) {
                            levels.push(i);
                            $(li).addClass("markItUpDropMenu").append(dropMenus(button.dropMenu));
                            var dropDownArr = $('<span class="dropdown_arr"></span>');
                            $(li).append(dropDownArr)
                        }
                    }
                });
                levels.pop();
                return ul
            }

            function repositionDropdowns($innerUL, li) {
                var ulHeight = $innerUL.outerHeight();
                var top;
                var dropDownTop = Math.ceil(li.offset().top);
                if (dropDownTop + li.height() + ulHeight + $("#siteFooter").outerHeight() >= $(window).innerHeight() + $(window).scrollTop()) {
                    top = dropDownTop - ulHeight - 2
                } else {
                    top = dropDownTop + 29
                }
                $innerUL.css({top: top, left: Math.floor(li.offset()["left"])})
            }

            function magicMarkups(string) {
                if (string) {
                    string = string.toString();
                    string = string.replace(/\(\!\(([\s\S]*?)\)\!\)/g, function (x, a) {
                        var b = a.split("|!|");
                        if (altKey === true) {
                            return (b[1] !== undefined) ? b[1] : b[0]
                        } else {
                            return (b[1] === undefined) ? "" : b[0]
                        }
                    });
                    string = string.replace(/\[\!\[([\s\S]*?)\]\!\]/g, function (x, a) {
                        var b = a.split(":!:");
                        if (abort === true) {
                            return false
                        }
                        value = prompt(b[0], (b[1]) ? b[1] : "");
                        if (value === null) {
                            abort = true
                        }
                        return value
                    });
                    return string
                }
                return ""
            }

            function prepare(action) {
                if ($.isFunction(action)) {
                    action = action(hash)
                }
                return magicMarkups(action)
            }

            function build(string) {
                var openWith = prepare(clicked.openWith);
                var placeHolder = prepare(clicked.placeHolder);
                var replaceWith = prepare(clicked.replaceWith);
                var closeWith = prepare(clicked.closeWith);
                var openBlockWith = prepare(clicked.openBlockWith);
                var closeBlockWith = prepare(clicked.closeBlockWith);
                var multiline = clicked.multiline;
                if (replaceWith !== "") {
                    block = openWith + replaceWith + closeWith
                } else {
                    if (selection === "" && placeHolder !== "") {
                        block = openWith + placeHolder + closeWith
                    } else {
                        string = string || selection;
                        var lines = [string], blocks = [];
                        if (multiline === true) {
                            lines = string.split(/\r?\n/)
                        }
                        for (var l = 0; l < lines.length; l++) {
                            line = lines[l];
                            var trailingSpaces;
                            if (trailingSpaces = line.match(/ *$/)) {
                                blocks.push(openWith + line.replace(/ *$/g, "") + closeWith + trailingSpaces)
                            } else {
                                blocks.push(openWith + line + closeWith)
                            }
                        }
                        block = blocks.join("\n")
                    }
                }
                block = openBlockWith + block + closeBlockWith;
                return {
                    block: block,
                    openBlockWith: openBlockWith,
                    openWith: openWith,
                    replaceWith: replaceWith,
                    placeHolder: placeHolder,
                    closeWith: closeWith,
                    closeBlockWith: closeBlockWith
                }
            }

            function markup(button) {
                var len, j, n, i;
                hash = clicked = button;
                get();
                $.extend(hash, {
                    line: "",
                    root: options.root,
                    textarea: textarea,
                    selection: (selection || ""),
                    caretPosition: caretPosition,
                    ctrlKey: ctrlKey,
                    shiftKey: shiftKey,
                    altKey: altKey
                });
                prepare(options.beforeInsert);
                prepare(clicked.beforeInsert);
                if ((ctrlKey === true && shiftKey === true) || button.multiline === true) {
                    prepare(clicked.beforeMultiInsert)
                }
                $.extend(hash, {line: 1});
                if ((ctrlKey === true && shiftKey === true)) {
                    lines = selection.split(/\r?\n/);
                    for (j = 0, n = lines.length, i = 0; i < n; i++) {
                        if ($.trim(lines[i]) !== "") {
                            $.extend(hash, {line: ++j, selection: lines[i]});
                            lines[i] = build(lines[i]).block
                        } else {
                            lines[i] = ""
                        }
                    }
                    string = {block: lines.join("\n")};
                    start = caretPosition;
                    len = string.block.length + ((browser.opera) ? n - 1 : 0)
                } else {
                    if (ctrlKey === true) {
                        string = build(selection);
                        start = caretPosition + string.openWith.length;
                        len = string.block.length - string.openWith.length - string.closeWith.length;
                        len = len - (string.block.match(/ $/) ? 1 : 0);
                        len -= fixIeBug(string.block)
                    } else {
                        if (shiftKey === true) {
                            string = build(selection);
                            start = caretPosition;
                            len = string.block.length;
                            len -= fixIeBug(string.block)
                        } else {
                            string = build(selection);
                            start = caretPosition + string.block.length;
                            len = 0;
                            start -= fixIeBug(string.block)
                        }
                    }
                }
                if ((selection === "" && string.replaceWith === "")) {
                    caretOffset += fixOperaBug(string.block);
                    start = caretPosition + string.openBlockWith.length + string.openWith.length;
                    len = string.block.length - string.openBlockWith.length - string.openWith.length - string.closeWith.length - string.closeBlockWith.length;
                    caretOffset = $$.val().substring(caretPosition, $$.val().length).length;
                    caretOffset -= fixOperaBug($$.val().substring(0, caretPosition))
                }
                $.extend(hash, {
                    caretPosition: caretPosition,
                    scrollPosition: scrollPosition
                });
                if (string.block !== selection && abort === false) {
                    insert(string.block);
                    set(start, len)
                } else {
                    caretOffset = -1
                }
                get();
                $.extend(hash, {line: "", selection: selection});
                if ((ctrlKey === true && shiftKey === true) || button.multiline === true) {
                    prepare(clicked.afterMultiInsert)
                }
                prepare(clicked.afterInsert);
                prepare(options.afterInsert);
                if (previewWindow && options.previewAutoRefresh) {
                    refreshPreview()
                }
                shiftKey = altKey = ctrlKey = abort = false
            }

            function fixOperaBug(string) {
                if (browser.opera) {
                    return string.length - string.replace(/\n*/g, "").length
                }
                return 0
            }

            function fixIeBug(string) {
                if (browser.msie) {
                    return string.length - string.replace(/\r*/g, "").length
                }
                return 0
            }

            function insert(block) {
                if (document.selection) {
                    var newSelection = document.selection.createRange();
                    newSelection.text = block
                } else {
                    textarea.value = textarea.value.substring(0, caretPosition) + block + textarea.value.substring(caretPosition + selection.length, textarea.value.length)
                }
            }

            function set(start, len) {
                if (textarea.createTextRange) {
                    if (browser.opera && browser.version >= 9.5 && len == 0) {
                        return false
                    }
                    range = textarea.createTextRange();
                    range.collapse(true);
                    range.moveStart("character", start);
                    range.moveEnd("character", len);
                    range.select()
                } else {
                    if (textarea.setSelectionRange) {
                        textarea.setSelectionRange(start, start + len)
                    }
                }
                textarea.scrollTop = scrollPosition;
                textarea.focus()
            }

            function get() {
                textarea.focus();
                scrollPosition = textarea.scrollTop;
                if (document.selection) {
                    selection = document.selection.createRange().text;
                    if (browser.msie) {
                        var range = document.selection.createRange(), rangeCopy = range.duplicate();
                        rangeCopy.moveToElementText(textarea);
                        caretPosition = -1;
                        while (rangeCopy.inRange(range)) {
                            rangeCopy.moveStart("character");
                            caretPosition++
                        }
                    } else {
                        caretPosition = textarea.selectionStart
                    }
                } else {
                    caretPosition = textarea.selectionStart;
                    selection = textarea.value.substring(caretPosition, textarea.selectionEnd)
                }
                return selection
            }

            function preview() {
                if (typeof options.previewHandler === "function") {
                    previewWindow = true
                } else {
                    if (options.previewInElement) {
                        previewWindow = $(options.previewInElement)
                    } else {
                        if (!previewWindow || previewWindow.closed) {
                            if (options.previewInWindow) {
                                previewWindow = window.open("", "preview", options.previewInWindow);
                                $(window).unload(function () {
                                    previewWindow.close()
                                })
                            } else {
                                iFrame = $('<iframe class="markItUpPreviewFrame"></iframe>');
                                if (options.previewPosition == "after") {
                                    iFrame.insertAfter(footer)
                                } else {
                                    iFrame.insertBefore(header)
                                }
                                previewWindow = iFrame[iFrame.length - 1].contentWindow || frame[iFrame.length - 1]
                            }
                        } else {
                            if (altKey === true) {
                                if (iFrame) {
                                    iFrame.remove()
                                } else {
                                    previewWindow.close()
                                }
                                previewWindow = iFrame = false
                            }
                        }
                    }
                }
                if (!options.previewAutoRefresh) {
                    refreshPreview()
                }
                if (options.previewInWindow) {
                    previewWindow.focus()
                }
            }

            function refreshPreview() {
                renderPreview()
            }

            function renderPreview() {
                var phtml;
                if (options.previewHandler && typeof options.previewHandler === "function") {
                    options.previewHandler($$.val())
                } else {
                    if (options.previewParser && typeof options.previewParser === "function") {
                        var data = options.previewParser($$.val());
                        writeInPreview(localize(data, 1))
                    } else {
                        if (options.previewParserPath !== "") {
                            $.ajax({
                                type: "POST",
                                dataType: "text",
                                global: false,
                                url: options.previewParserPath,
                                data: options.previewParserVar + "=" + encodeURIComponent($$.val()),
                                success: function (data) {
                                    writeInPreview(localize(data, 1))
                                }
                            })
                        } else {
                            if (!template) {
                                $.ajax({
                                    url: options.previewTemplatePath,
                                    dataType: "text",
                                    global: false,
                                    success: function (data) {
                                        writeInPreview(localize(data, 1).replace(/<!-- content -->/g, $$.val()))
                                    }
                                })
                            }
                        }
                    }
                }
                return false
            }

            function writeInPreview(data) {
                if (options.previewInElement) {
                    $(options.previewInElement).html(data)
                } else {
                    if (previewWindow && previewWindow.document) {
                        try {
                            sp = previewWindow.document.documentElement.scrollTop
                        } catch (e) {
                            sp = 0
                        }
                        previewWindow.document.open();
                        previewWindow.document.write(data);
                        previewWindow.document.close();
                        previewWindow.document.documentElement.scrollTop = sp
                    }
                }
            }

            function keyPressed(e) {
                shiftKey = e.shiftKey;
                altKey = e.altKey;
                ctrlKey = (!(e.altKey && e.ctrlKey)) ? (e.ctrlKey || e.metaKey) : false;
                if (e.type === "keydown") {
                    if (ctrlKey === true) {
                        li = $('a[accesskey="' + ((e.keyCode == 13) ? "\\n" : String.fromCharCode(e.keyCode)) + '"]', header).parent("li");
                        if (li.length !== 0) {
                            ctrlKey = false;
                            setTimeout(function () {
                                li.triggerHandler("mouseup")
                            }, 1);
                            return false
                        }
                    }
                    if (e.keyCode === 13 || e.keyCode === 10) {
                        if (ctrlKey === true) {
                            ctrlKey = false;
                            markup(options.onCtrlEnter);
                            return options.onCtrlEnter.keepDefault
                        } else {
                            if (shiftKey === true) {
                                shiftKey = false;
                                markup(options.onShiftEnter);
                                return options.onShiftEnter.keepDefault
                            } else {
                                markup(options.onEnter);
                                return options.onEnter.keepDefault
                            }
                        }
                    }
                    if (e.keyCode === 9) {
                        if (shiftKey == true || ctrlKey == true || altKey == true) {
                            return false
                        }
                        if (caretOffset !== -1) {
                            get();
                            caretOffset = $$.val().length - caretOffset;
                            set(caretOffset, 0);
                            caretOffset = -1;
                            return false
                        } else {
                            markup(options.onTab);
                            return options.onTab.keepDefault
                        }
                    }
                }
            }

            function remove() {
                $$.unbind(".markItUp").removeClass("markItUpEditor");
                $$.parent("div").parent("div.markItUp").parent("div").replaceWith($$);
                $$.data("markItUp", null)
            }

            init()
        })
    };
    $.fn.markItUpRemove = function () {
        return this.each(function () {
            $(this).markItUp("remove")
        })
    };
    $.markItUp = function (settings) {
        var options = {target: false};
        $.extend(options, settings);
        if (options.target) {
            return $(options.target).each(function () {
                $(this).focus();
                $(this).trigger("insertion", [options])
            })
        } else {
            $("textarea").trigger("insertion", [options])
        }
    }
})(jQuery);
/*
 * jQuery Mousewheel 3.1.13
 *
 * Copyright 2015 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */
!function (a) {
    "function" == typeof define && define.amd ? define(["./jquery"], a) : "object" == typeof exports ? module.exports = a : a(jQuery)
}(function (h) {
    function k(m) {
        var n = m || window.event, o = e.call(arguments, 1), v = 0, E = 0, p = 0, q = 0, r = 0, s = 0;
        if (m = h.event.fix(n), m.type = "mousewheel", "detail" in n && (p = -1 * n.detail), "wheelDelta" in n && (p = n.wheelDelta), "wheelDeltaY" in n && (p = n.wheelDeltaY), "wheelDeltaX" in n && (E = -1 * n.wheelDeltaX), "axis" in n && n.axis === n.HORIZONTAL_AXIS && (E = -1 * p, p = 0), v = 0 === p ? E : p, "deltaY" in n && (p = -1 * n.deltaY, v = p), "deltaX" in n && (E = n.deltaX, 0 === p && (v = -1 * E)), 0 !== p || 0 !== E) {
            if (1 === n.deltaMode) {
                var u = h.data(this, "mousewheel-line-height");
                v *= u, p *= u, E *= u
            } else {
                if (2 === n.deltaMode) {
                    var w = h.data(this, "mousewheel-page-height");
                    v *= w, p *= w, E *= w
                }
            }
            if (q = Math.max(Math.abs(p), Math.abs(E)), (!b || b > q) && (b = q, y(n, q) && (b /= 40)), y(n, q) && (v /= 40, E /= 40, p /= 40), v = Math[v >= 1 ? "floor" : "ceil"](v / b), E = Math[E >= 1 ? "floor" : "ceil"](E / b), p = Math[p >= 1 ? "floor" : "ceil"](p / b), g.settings.normalizeOffset && this.getBoundingClientRect) {
                var l = this.getBoundingClientRect();
                r = m.clientX - l.left, s = m.clientY - l.top
            }
            return m.deltaX = E, m.deltaY = p, m.deltaFactor = b, m.offsetX = r, m.offsetY = s, m.deltaMode = 0, o.unshift(m, v, E, p), a && clearTimeout(a), a = setTimeout(x, 200), (h.event.dispatch || h.event.handle).apply(this, o)
        }
    }

    function x() {
        b = null
    }

    function y(l, m) {
        return g.settings.adjustOldDeltas && "mousewheel" === l.type && m % 120 === 0
    }

    var a, b, c = ["wheel", "mousewheel", "DOMMouseScroll", "MozMousePixelScroll"], d = "onwheel" in document || document.documentMode >= 9 ? ["wheel"] : ["mousewheel", "DomMouseScroll", "MozMousePixelScroll"], e = Array.prototype.slice;
    if (h.event.fixHooks) {
        for (var f = c.length; f;) {
            h.event.fixHooks[c[--f]] = h.event.mouseHooks
        }
    }
    var g = h.event.special.mousewheel = {
        version: "3.1.12",
        setup: function () {
            if (this.addEventListener) {
                for (var l = d.length; l;) {
                    this.addEventListener(d[--l], k, !1)
                }
            } else {
                this.onmousewheel = k
            }
            h.data(this, "mousewheel-line-height", g.getLineHeight(this)), h.data(this, "mousewheel-page-height", g.getPageHeight(this))
        },
        teardown: function () {
            if (this.removeEventListener) {
                for (var l = d.length; l;) {
                    this.removeEventListener(d[--l], k, !1)
                }
            } else {
                this.onmousewheel = null
            }
            h.removeData(this, "mousewheel-line-height"), h.removeData(this, "mousewheel-page-height")
        },
        getLineHeight: function (l) {
            var m = h(l), n = m["offsetParent" in h.fn ? "offsetParent" : "parent"]();
            return n.length || (n = h("body")), parseInt(n.css("fontSize"), 10) || parseInt(m.css("fontSize"), 10) || 16
        },
        getPageHeight: function (l) {
            return h(l).height()
        },
        settings: {adjustOldDeltas: !0, normalizeOffset: !0}
    };
    h.fn.extend({
        mousewheel: function (l) {
            return l ? this.bind("mousewheel", l) : this.trigger("mousewheel")
        }, unmousewheel: function (l) {
            return this.unbind("mousewheel", l)
        }
    })
});
(function ($) {
    $.extend({
        tablesorter: new function () {
            var parsers = [], widgets = [];
            this.defaults = {
                cssHeader: "header",
                cssAsc: "headerSortUp",
                cssDesc: "headerSortDown",
                cssChildRow: "expand-child",
                sortInitialOrder: "asc",
                sortMultiSortKey: "shiftKey",
                sortForce: null,
                sortAppend: null,
                sortLocaleCompare: true,
                textExtraction: "simple",
                parsers: {},
                widgets: [],
                widgetZebra: {css: ["even", "odd"]},
                headers: {},
                widthFixed: false,
                cancelSelection: true,
                sortList: [],
                headerList: [],
                dateFormat: "us",
                decimal: "/.|,/g",
                onRenderHeader: null,
                selectorHeaders: "thead th",
                debug: false
            };
            function benchmark(s, d) {
                log(s + "," + (new Date().getTime() - d.getTime()) + "ms")
            }

            this.benchmark = benchmark;
            function log(s) {
                if (typeof console != "undefined" && typeof console.debug != "undefined") {
                    console.log(s)
                } else {
                    alert(s)
                }
            }

            function buildParserCache(table, $headers) {
                if (table.config.debug) {
                    var parsersDebug = ""
                }
                if (table.tBodies.length == 0) {
                    return
                }
                var rows = table.tBodies[0].rows;
                if (rows[0]) {
                    var list = [], cells = rows[0].cells, l = cells.length;
                    for (var i = 0; i < l; i++) {
                        var p = false;
                        if ($.metadata && ($($headers[i]).metadata() && $($headers[i]).metadata().sorter)) {
                            p = getParserById($($headers[i]).metadata().sorter)
                        } else {
                            if ((table.config.headers[i] && table.config.headers[i].sorter)) {
                                p = getParserById(table.config.headers[i].sorter)
                            }
                        }
                        if (!p) {
                            p = detectParserForColumn(table, rows, -1, i)
                        }
                        if (table.config.debug) {
                            parsersDebug += "column:" + i + " parser:" + p.id + "\n"
                        }
                        list.push(p)
                    }
                }
                if (table.config.debug) {
                    log(parsersDebug)
                }
                return list
            }

            function detectParserForColumn(table, rows, rowIndex, cellIndex) {
                var l = parsers.length, node = false, nodeValue = false, keepLooking = true;
                while (nodeValue == "" && keepLooking) {
                    rowIndex++;
                    if (rows[rowIndex]) {
                        node = getNodeFromRowAndCellIndex(rows, rowIndex, cellIndex);
                        nodeValue = trimAndGetNodeText(table.config, node);
                        if (table.config.debug) {
                            log("Checking if value was empty on row:" + rowIndex)
                        }
                    } else {
                        keepLooking = false
                    }
                }
                for (var i = 1; i < l; i++) {
                    if (parsers[i].is(nodeValue, table, node)) {
                        return parsers[i]
                    }
                }
                return parsers[0]
            }

            function getNodeFromRowAndCellIndex(rows, rowIndex, cellIndex) {
                return rows[rowIndex].cells[cellIndex]
            }

            function trimAndGetNodeText(config, node) {
                return $.trim(getElementText(config, node))
            }

            function getParserById(name) {
                var l = parsers.length;
                for (var i = 0; i < l; i++) {
                    if (parsers[i].id.toLowerCase() == name.toLowerCase()) {
                        return parsers[i]
                    }
                }
                return false
            }

            function buildCache(table) {
                if (table.config.debug) {
                    var cacheTime = new Date()
                }
                var totalRows = (table.tBodies[0] && table.tBodies[0].rows.length) || 0, totalCells = (table.tBodies[0].rows[0] && table.tBodies[0].rows[0].cells.length) || 0, parsers = table.config.parsers, cache = {
                    row: [],
                    normalized: []
                };
                for (var i = 0; i < totalRows; ++i) {
                    var c = $(table.tBodies[0].rows[i]), cols = [];
                    if (c.hasClass(table.config.cssChildRow)) {
                        cache.row[cache.row.length - 1] = cache.row[cache.row.length - 1].add(c);
                        continue
                    }
                    cache.row.push(c);
                    for (var j = 0; j < totalCells; ++j) {
                        cols.push(parsers[j].format(getElementText(table.config, c[0].cells[j]), table, c[0].cells[j]))
                    }
                    cols.push(cache.normalized.length);
                    cache.normalized.push(cols);
                    cols = null
                }
                if (table.config.debug) {
                    benchmark("Building cache for " + totalRows + " rows:", cacheTime)
                }
                return cache
            }

            function getElementText(config, node) {
                var text = "";
                if (!node) {
                    return ""
                }
                if (!config.supportsTextContent) {
                    config.supportsTextContent = node.textContent || false
                }
                if (config.textExtraction == "simple") {
                    if (config.supportsTextContent) {
                        text = node.textContent
                    } else {
                        if (node.childNodes[0] && node.childNodes[0].hasChildNodes()) {
                            text = node.childNodes[0].innerHTML
                        } else {
                            text = node.innerHTML
                        }
                    }
                } else {
                    if (typeof(config.textExtraction) == "function") {
                        text = config.textExtraction(node)
                    } else {
                        text = $(node).text()
                    }
                }
                return text
            }

            function appendToTable(table, cache) {
                if (table.config.debug) {
                    var appendTime = new Date()
                }
                var c = cache, r = c.row, n = c.normalized, totalRows = n.length, checkCell = (n[0].length - 1), tableBody = $(table.tBodies[0]), rows = [];
                for (var i = 0; i < totalRows; i++) {
                    var pos = n[i][checkCell];
                    rows.push(r[pos]);
                    if (!table.config.appender) {
                        var l = r[pos].length;
                        for (var j = 0; j < l; j++) {
                            tableBody[0].appendChild(r[pos][j])
                        }
                    }
                }
                if (table.config.appender) {
                    table.config.appender(table, rows)
                }
                rows = null;
                if (table.config.debug) {
                    benchmark("Rebuilt table:", appendTime)
                }
                applyWidget(table);
                setTimeout(function () {
                    $(table).trigger("sortEnd")
                }, 0)
            }

            function buildHeaders(table) {
                if (table.config.debug) {
                    var time = new Date()
                }
                var meta = ($.metadata) ? true : false;
                var header_index = computeTableHeaderCellIndexes(table);
                $tableHeaders = $(table.config.selectorHeaders, table).each(function (index) {
                    this.column = header_index[this.parentNode.rowIndex + "-" + this.cellIndex];
                    this.order = formatSortingOrder(table.config.sortInitialOrder);
                    this.count = this.order;
                    if (checkHeaderMetadata(this) || checkHeaderOptions(table, index)) {
                        this.sortDisabled = true
                    }
                    if (checkHeaderOptionsSortingLocked(table, index)) {
                        this.order = this.lockedOrder = checkHeaderOptionsSortingLocked(table, index)
                    }
                    if (!this.sortDisabled) {
                        var $th = $(this).addClass(table.config.cssHeader);
                        if (table.config.onRenderHeader) {
                            table.config.onRenderHeader.apply($th)
                        }
                    }
                    table.config.headerList[index] = this
                });
                if (table.config.debug) {
                    benchmark("Built headers:", time);
                    log($tableHeaders)
                }
                return $tableHeaders
            }

            function computeTableHeaderCellIndexes(t) {
                var matrix = [];
                var lookup = {};
                var thead = t.getElementsByTagName("THEAD")[0];
                var trs = thead.getElementsByTagName("TR");
                for (var i = 0; i < trs.length; i++) {
                    var cells = trs[i].cells;
                    for (var j = 0; j < cells.length; j++) {
                        var c = cells[j];
                        var rowIndex = c.parentNode.rowIndex;
                        var cellId = rowIndex + "-" + c.cellIndex;
                        var rowSpan = c.rowSpan || 1;
                        var colSpan = c.colSpan || 1;
                        var firstAvailCol;
                        if (typeof(matrix[rowIndex]) == "undefined") {
                            matrix[rowIndex] = []
                        }
                        for (var k = 0; k < matrix[rowIndex].length + 1; k++) {
                            if (typeof(matrix[rowIndex][k]) == "undefined") {
                                firstAvailCol = k;
                                break
                            }
                        }
                        lookup[cellId] = firstAvailCol;
                        for (var k = rowIndex; k < rowIndex + rowSpan; k++) {
                            if (typeof(matrix[k]) == "undefined") {
                                matrix[k] = []
                            }
                            var matrixrow = matrix[k];
                            for (var l = firstAvailCol; l < firstAvailCol + colSpan; l++) {
                                matrixrow[l] = "x"
                            }
                        }
                    }
                }
                return lookup
            }

            function checkCellColSpan(table, rows, row) {
                var arr = [], r = table.tHead.rows, c = r[row].cells;
                for (var i = 0; i < c.length; i++) {
                    var cell = c[i];
                    if (cell.colSpan > 1) {
                        arr = arr.concat(checkCellColSpan(table, headerArr, row++))
                    } else {
                        if (table.tHead.length == 1 || (cell.rowSpan > 1 || !r[row + 1])) {
                            arr.push(cell)
                        }
                    }
                }
                return arr
            }

            function checkHeaderMetadata(cell) {
                if (($.metadata) && ($(cell).metadata().sorter === false)) {
                    return true
                }
                return false
            }

            function checkHeaderOptions(table, i) {
                if ((table.config.headers[i]) && (table.config.headers[i].sorter === false)) {
                    return true
                }
                return false
            }

            function checkHeaderOptionsSortingLocked(table, i) {
                if ((table.config.headers[i]) && (table.config.headers[i].lockedOrder)) {
                    return table.config.headers[i].lockedOrder
                }
                return false
            }

            function applyWidget(table) {
                var c = table.config.widgets;
                var l = c.length;
                for (var i = 0; i < l; i++) {
                    getWidgetById(c[i]).format(table)
                }
            }

            function getWidgetById(name) {
                var l = widgets.length;
                for (var i = 0; i < l; i++) {
                    if (widgets[i].id.toLowerCase() == name.toLowerCase()) {
                        return widgets[i]
                    }
                }
            }

            function formatSortingOrder(v) {
                if (typeof(v) != "Number") {
                    return (v.toLowerCase() == "desc") ? 1 : 0
                } else {
                    return (v == 1) ? 1 : 0
                }
            }

            function isValueInArray(v, a) {
                var l = a.length;
                for (var i = 0; i < l; i++) {
                    if (a[i][0] == v) {
                        return true
                    }
                }
                return false
            }

            function setHeadersCss(table, $headers, list, css) {
                $headers.removeClass(css[0]).removeClass(css[1]);
                var h = [];
                $headers.each(function (offset) {
                    if (!this.sortDisabled) {
                        h[this.column] = $(this)
                    }
                });
                var l = list.length;
                for (var i = 0; i < l; i++) {
                    h[list[i][0]].addClass(css[list[i][1]])
                }
            }

            function fixColumnWidth(table, $headers) {
                var c = table.config;
                if (c.widthFixed) {
                    var colgroup = $("<colgroup>");
                    $("tr:first td", table.tBodies[0]).each(function () {
                        colgroup.append($("<col>").css("width", $(this).width()))
                    });
                    $(table).prepend(colgroup)
                }
            }

            function updateHeaderSortCount(table, sortList) {
                var c = table.config, l = sortList.length;
                for (var i = 0; i < l; i++) {
                    var s = sortList[i], o = c.headerList[s[0]];
                    o.count = s[1];
                    o.count++
                }
            }

            function multisort(table, sortList, cache) {
                if (table.config.debug) {
                    var sortTime = new Date()
                }
                var dynamicExp = "var sortWrapper = function(a,b) {", l = sortList.length;
                for (var i = 0; i < l; i++) {
                    var c = sortList[i][0];
                    var order = sortList[i][1];
                    var s = (table.config.parsers[c].type == "text") ? ((order == 0) ? makeSortFunction("text", "asc", c) : makeSortFunction("text", "desc", c)) : ((order == 0) ? makeSortFunction("numeric", "asc", c) : makeSortFunction("numeric", "desc", c));
                    var e = "e" + i;
                    dynamicExp += "var " + e + " = " + s;
                    dynamicExp += "if(" + e + ") { return " + e + "; } ";
                    dynamicExp += "else { "
                }
                var orgOrderCol = cache.normalized[0].length - 1;
                dynamicExp += "return a[" + orgOrderCol + "]-b[" + orgOrderCol + "];";
                for (var i = 0; i < l; i++) {
                    dynamicExp += "}; "
                }
                dynamicExp += "return 0; ";
                dynamicExp += "}; ";
                if (table.config.debug) {
                    benchmark("Evaling expression:" + dynamicExp, new Date())
                }
                eval(dynamicExp);
                cache.normalized.sort(sortWrapper);
                if (table.config.debug) {
                    benchmark("Sorting on " + sortList.toString() + " and dir " + order + " time:", sortTime)
                }
                return cache
            }

            function makeSortFunction(type, direction, index) {
                var a = "a[" + index + "]", b = "b[" + index + "]";
                if (type == "text" && direction == "asc") {
                    return "(" + a + " == " + b + " ? 0 : (" + a + " === null ? Number.POSITIVE_INFINITY : (" + b + " === null ? Number.NEGATIVE_INFINITY : (" + a + " < " + b + ") ? -1 : 1 )));"
                } else {
                    if (type == "text" && direction == "desc") {
                        return "(" + a + " == " + b + " ? 0 : (" + a + " === null ? Number.POSITIVE_INFINITY : (" + b + " === null ? Number.NEGATIVE_INFINITY : (" + b + " < " + a + ") ? -1 : 1 )));"
                    } else {
                        if (type == "numeric" && direction == "asc") {
                            return "(" + a + " === null && " + b + " === null) ? 0 :(" + a + " === null ? Number.POSITIVE_INFINITY : (" + b + " === null ? Number.NEGATIVE_INFINITY : " + a + " - " + b + "));"
                        } else {
                            if (type == "numeric" && direction == "desc") {
                                return "(" + a + " === null && " + b + " === null) ? 0 :(" + a + " === null ? Number.POSITIVE_INFINITY : (" + b + " === null ? Number.NEGATIVE_INFINITY : " + b + " - " + a + "));"
                            }
                        }
                    }
                }
            }

            function makeSortText(i) {
                return "((a[" + i + "] < b[" + i + "]) ? -1 : ((a[" + i + "] > b[" + i + "]) ? 1 : 0));"
            }

            function makeSortTextDesc(i) {
                return "((b[" + i + "] < a[" + i + "]) ? -1 : ((b[" + i + "] > a[" + i + "]) ? 1 : 0));"
            }

            function makeSortNumeric(i) {
                return "a[" + i + "]-b[" + i + "];"
            }

            function makeSortNumericDesc(i) {
                return "b[" + i + "]-a[" + i + "];"
            }

            function sortText(a, b) {
                if (table.config.sortLocaleCompare) {
                    return a.localeCompare(b)
                }
                return ((a < b) ? -1 : ((a > b) ? 1 : 0))
            }

            function sortTextDesc(a, b) {
                if (table.config.sortLocaleCompare) {
                    return b.localeCompare(a)
                }
                return ((b < a) ? -1 : ((b > a) ? 1 : 0))
            }

            function sortNumeric(a, b) {
                return a - b
            }

            function sortNumericDesc(a, b) {
                return b - a
            }

            function getCachedSortType(parsers, i) {
                return parsers[i].type
            }

            this.construct = function (settings) {
                return this.each(function () {
                    if (!this.tHead || !this.tBodies) {
                        return
                    }
                    var $this, $document, $headers, cache, config, shiftDown = 0, sortOrder;
                    this.config = {};
                    config = $.extend(this.config, $.tablesorter.defaults, settings);
                    $this = $(this);
                    $.data(this, "tablesorter", config);
                    $headers = buildHeaders(this);
                    this.config.parsers = buildParserCache(this, $headers);
                    cache = buildCache(this);
                    var sortCSS = [config.cssDesc, config.cssAsc];
                    fixColumnWidth(this);
                    $headers.click(function (e) {
                        var totalRows = ($this[0].tBodies[0] && $this[0].tBodies[0].rows.length) || 0;
                        if (!this.sortDisabled && totalRows > 0) {
                            $this.trigger("sortStart");
                            var $cell = $(this);
                            var i = this.column;
                            this.order = this.count++ % 2;
                            if (this.lockedOrder) {
                                this.order = this.lockedOrder
                            }
                            if (!e[config.sortMultiSortKey]) {
                                config.sortList = [];
                                if (config.sortForce != null) {
                                    var a = config.sortForce;
                                    for (var j = 0; j < a.length; j++) {
                                        if (a[j][0] != i) {
                                            config.sortList.push(a[j])
                                        }
                                    }
                                }
                                config.sortList.push([i, this.order])
                            } else {
                                if (isValueInArray(i, config.sortList)) {
                                    for (var j = 0; j < config.sortList.length; j++) {
                                        var s = config.sortList[j], o = config.headerList[s[0]];
                                        if (s[0] == i) {
                                            o.count = s[1];
                                            o.count++;
                                            s[1] = o.count % 2
                                        }
                                    }
                                } else {
                                    config.sortList.push([i, this.order])
                                }
                            }
                            setTimeout(function () {
                                setHeadersCss($this[0], $headers, config.sortList, sortCSS);
                                appendToTable($this[0], multisort($this[0], config.sortList, cache))
                            }, 1);
                            return false
                        }
                    }).mousedown(function () {
                        if (config.cancelSelection) {
                            this.onselectstart = function () {
                                return false
                            };
                            return false
                        }
                    });
                    $this.bind("update", function () {
                        var me = this;
                        setTimeout(function () {
                            me.config.parsers = buildParserCache(me, $headers);
                            cache = buildCache(me)
                        }, 1)
                    }).bind("updateCell", function (e, cell) {
                        var config = this.config;
                        var pos = [(cell.parentNode.rowIndex - 1), cell.cellIndex];
                        cache.normalized[pos[0]][pos[1]] = config.parsers[pos[1]].format(getElementText(config, cell), cell)
                    }).bind("sorton", function (e, list) {
                        $(this).trigger("sortStart");
                        config.sortList = list;
                        var sortList = config.sortList;
                        updateHeaderSortCount(this, sortList);
                        setHeadersCss(this, $headers, sortList, sortCSS);
                        appendToTable(this, multisort(this, sortList, cache))
                    }).bind("appendCache", function () {
                        appendToTable(this, cache)
                    }).bind("applyWidgetId", function (e, id) {
                        getWidgetById(id).format(this)
                    }).bind("applyWidgets", function () {
                        applyWidget(this)
                    });
                    if ($.metadata && ($(this).metadata() && $(this).metadata().sortlist)) {
                        config.sortList = $(this).metadata().sortlist
                    }
                    if (config.sortList.length > 0) {
                        $this.trigger("sorton", [config.sortList])
                    }
                    applyWidget(this)
                })
            };
            this.addParser = function (parser) {
                var l = parsers.length, a = true;
                for (var i = 0; i < l; i++) {
                    if (parsers[i].id.toLowerCase() == parser.id.toLowerCase()) {
                        a = false
                    }
                }
                if (a) {
                    parsers.push(parser)
                }
            };
            this.addWidget = function (widget) {
                widgets.push(widget)
            };
            this.formatFloat = function (s) {
                var i = parseFloat(s);
                return (isNaN(i)) ? 0 : i
            };
            this.formatInt = function (s) {
                var i = parseInt(s);
                return (isNaN(i)) ? 0 : i
            };
            this.isDigit = function (s, config) {
                return /^[-+]?\d*$/.test($.trim(s.replace(/[,.']/g, "")))
            };
            this.clearTableBody = function (table) {
                if ($.browser.msie) {
                    function empty() {
                        while (this.firstChild) {
                            this.removeChild(this.firstChild)
                        }
                    }

                    empty.apply(table.tBodies[0])
                } else {
                    table.tBodies[0].innerHTML = ""
                }
            }
        }
    });
    $.fn.extend({tablesorter: $.tablesorter.construct});
    var ts = $.tablesorter;
    ts.addParser({
        id: "text", is: function (s) {
            return true
        }, format: function (s) {
            return $.trim(s.toLocaleLowerCase())
        }, type: "text"
    });
    ts.addParser({
        id: "digit", is: function (s, table) {
            var c = table.config;
            return $.tablesorter.isDigit(s, c)
        }, format: function (s) {
            return $.tablesorter.formatFloat(s)
        }, type: "numeric"
    });
    ts.addParser({
        id: "currency", is: function (s) {
            return /^[£$€?.]/.test(s)
        }, format: function (s) {
            return $.tablesorter.formatFloat(s.replace(new RegExp(/[£$€]/g), ""))
        }, type: "numeric"
    });
    ts.addParser({
        id: "ipAddress", is: function (s) {
            return /^\d{2,3}[\.]\d{2,3}[\.]\d{2,3}[\.]\d{2,3}$/.test(s)
        }, format: function (s) {
            var a = s.split("."), r = "", l = a.length;
            for (var i = 0; i < l; i++) {
                var item = a[i];
                if (item.length == 2) {
                    r += "0" + item
                } else {
                    r += item
                }
            }
            return $.tablesorter.formatFloat(r)
        }, type: "numeric"
    });
    ts.addParser({
        id: "url", is: function (s) {
            return /^(https?|ftp|file):\/\/$/.test(s)
        }, format: function (s) {
            return jQuery.trim(s.replace(new RegExp(/(https?|ftp|file):\/\//), ""))
        }, type: "text"
    });
    ts.addParser({
        id: "isoDate", is: function (s) {
            return /^\d{4}[\/-]\d{1,2}[\/-]\d{1,2}$/.test(s)
        }, format: function (s) {
            return $.tablesorter.formatFloat((s != "") ? new Date(s.replace(new RegExp(/-/g), "/")).getTime() : "0")
        }, type: "numeric"
    });
    ts.addParser({
        id: "percent", is: function (s) {
            return /\%$/.test($.trim(s))
        }, format: function (s) {
            return $.tablesorter.formatFloat(s.replace(new RegExp(/%/g), ""))
        }, type: "numeric"
    });
    ts.addParser({
        id: "usLongDate", is: function (s) {
            return s.match(new RegExp(/^[A-Za-z]{3,10}\.? [0-9]{1,2}, ([0-9]{4}|'?[0-9]{2}) (([0-2]?[0-9]:[0-5][0-9])|([0-1]?[0-9]:[0-5][0-9]\s(AM|PM)))$/))
        }, format: function (s) {
            return $.tablesorter.formatFloat(new Date(s).getTime())
        }, type: "numeric"
    });
    ts.addParser({
        id: "shortDate", is: function (s) {
            return /\d{1,2}[\/\-]\d{1,2}[\/\-]\d{2,4}/.test(s)
        }, format: function (s, table) {
            var c = table.config;
            s = s.replace(/\-/g, "/");
            if (c.dateFormat == "us") {
                s = s.replace(/(\d{1,2})[\/\-](\d{1,2})[\/\-](\d{4})/, "$3/$1/$2")
            } else {
                if (c.dateFormat == "uk") {
                    s = s.replace(/(\d{1,2})[\/\-](\d{1,2})[\/\-](\d{4})/, "$3/$2/$1")
                } else {
                    if (c.dateFormat == "dd/mm/yy" || c.dateFormat == "dd-mm-yy") {
                        s = s.replace(/(\d{1,2})[\/\-](\d{1,2})[\/\-](\d{2})/, "$1/$2/$3")
                    }
                }
            }
            return $.tablesorter.formatFloat(new Date(s).getTime())
        }, type: "numeric"
    });
    ts.addParser({
        id: "time", is: function (s) {
            return /^(([0-2]?[0-9]:[0-5][0-9])|([0-1]?[0-9]:[0-5][0-9]\s(am|pm)))$/.test(s)
        }, format: function (s) {
            return $.tablesorter.formatFloat(new Date("2000/01/01 " + s).getTime())
        }, type: "numeric"
    });
    ts.addParser({
        id: "metadata", is: function (s) {
            return false
        }, format: function (s, table, cell) {
            var c = table.config, p = (!c.parserMetadataName) ? "sortValue" : c.parserMetadataName;
            return $(cell).metadata()[p]
        }, type: "numeric"
    });
    ts.addWidget({
        id: "zebra", format: function (table) {
            if (table.config.debug) {
                var time = new Date()
            }
            var $tr, row = -1, odd;
            $("tr:visible", table.tBodies[0]).each(function (i) {
                $tr = $(this);
                if (!$tr.hasClass(table.config.cssChildRow)) {
                    row++
                }
                odd = (row % 2 == 0);
                $tr.removeClass(table.config.widgetZebra.css[odd ? 0 : 1]).addClass(table.config.widgetZebra.css[odd ? 1 : 0])
            });
            if (table.config.debug) {
                $.tablesorter.benchmark("Applying Zebra widget", time)
            }
        }
    })
})(jQuery);
(function (f) {
    var d = {
        init: function (b) {
            var a = this;
            if (!a.data("jqv") || a.data("jqv") == null) {
                b = d._saveOptions(a, b);
                f(document).on("click", ".formError", function () {
                    f(this).fadeOut(150, function () {
                        f(this).parent(".formErrorOuter").remove();
                        f(this).remove()
                    })
                })
            }
            return this
        },
        attach: function (a) {
            var b = this;
            var c;
            if (a) {
                c = d._saveOptions(b, a)
            } else {
                c = b.data("jqv")
            }
            c.validateAttribute = (b.find("[data-validation-engine*=validate]").length) ? "data-validation-engine" : "class";
            if (c.binded) {
                b.on(c.validationEventTrigger, "[" + c.validateAttribute + "*=validate]:not([type=checkbox]):not([type=radio]):not(.datepicker)", d._onFieldEvent);
                b.on("click", "[" + c.validateAttribute + "*=validate][type=checkbox],[" + c.validateAttribute + "*=validate][type=radio]", d._onFieldEvent);
                b.on(c.validationEventTrigger, "[" + c.validateAttribute + "*=validate][class*=datepicker]", {delay: 300}, d._onFieldEvent)
            }
            if (c.autoPositionUpdate) {
                f(window).bind("resize", {
                    noAnimation: true,
                    formElem: b
                }, d.updatePromptsPosition)
            }
            b.on("click", "a[data-validation-engine-skip], a[class*='validate-skip'], button[data-validation-engine-skip], button[class*='validate-skip'], input[data-validation-engine-skip], input[class*='validate-skip']", d._submitButtonClick);
            b.removeData("jqv_submitButton");
            b.on("submit", d._onSubmitEvent);
            return this
        },
        detach: function () {
            var a = this;
            var b = a.data("jqv");
            a.find("[" + b.validateAttribute + "*=validate]").not("[type=checkbox]").off(b.validationEventTrigger, d._onFieldEvent);
            a.find("[" + b.validateAttribute + "*=validate][type=checkbox],[class*=validate][type=radio]").off("click", d._onFieldEvent);
            a.off("submit", d._onSubmitEvent);
            a.removeData("jqv");
            a.off("click", "a[data-validation-engine-skip], a[class*='validate-skip'], button[data-validation-engine-skip], button[class*='validate-skip'], input[data-validation-engine-skip], input[class*='validate-skip']", d._submitButtonClick);
            a.removeData("jqv_submitButton");
            if (b.autoPositionUpdate) {
                f(window).off("resize", d.updatePromptsPosition)
            }
            return this
        },
        validate: function () {
            var c = f(this);
            var a = null;
            if (c.is("form") || c.hasClass("validationEngineContainer")) {
                if (c.hasClass("validating")) {
                    return false
                } else {
                    c.addClass("validating");
                    var h = c.data("jqv");
                    var a = d._validateFields(this);
                    setTimeout(function () {
                        c.removeClass("validating")
                    }, 100);
                    if (a && h.onSuccess) {
                        h.onSuccess()
                    } else {
                        if (!a && h.onFailure) {
                            h.onFailure()
                        }
                    }
                }
            } else {
                if (c.is("form") || c.hasClass("validationEngineContainer")) {
                    c.removeClass("validating")
                } else {
                    var b = c.closest("form, .validationEngineContainer"), h = (b.data("jqv")) ? b.data("jqv") : f.validationEngine.defaults, a = d._validateField(c, h);
                    if (a && h.onFieldSuccess) {
                        h.onFieldSuccess()
                    } else {
                        if (h.onFieldFailure && h.InvalidFields.length > 0) {
                            h.onFieldFailure()
                        }
                    }
                }
            }
            if (h.onValidationComplete) {
                return !!h.onValidationComplete(b, a)
            }
            return a
        },
        updatePromptsPosition: function (a) {
            if (a && this == window) {
                var b = a.data.formElem;
                var h = a.data.noAnimation
            } else {
                var b = f(this.closest("form, .validationEngineContainer"))
            }
            var c = b.data("jqv");
            b.find("[" + c.validateAttribute + "*=validate]").not(":disabled").each(function () {
                var g = f(this);
                if (c.prettySelect && g.is(":hidden")) {
                    g = b.find("#" + c.usePrefix + g.attr("id") + c.useSuffix)
                }
                var n = d._getPrompt(g);
                var m = f(n).find(".formErrorContent").html();
                if (n) {
                    d._updatePrompt(g, f(n), m, undefined, false, c, h)
                }
            });
            return this
        },
        showPrompt: function (m, c, a, l) {
            var b = this.closest("form, .validationEngineContainer");
            var n = b.data("jqv");
            if (!n) {
                n = d._saveOptions(this, n)
            }
            if (a) {
                n.promptPosition = a
            }
            n.showArrow = l == true;
            d._showPrompt(this, m, c, false, n);
            return this
        },
        hide: function () {
            var a = f(this).closest("form, .validationEngineContainer");
            var c = a.data("jqv");
            var b = (c && c.fadeDuration) ? c.fadeDuration : 0.3;
            var h;
            if (f(this).is("form") || f(this).hasClass("validationEngineContainer")) {
                h = "parentForm" + d._getClassName(f(this).attr("id"))
            } else {
                h = d._getClassName(f(this).attr("id")) + "formError"
            }
            f("." + h).fadeTo(b, 0.3, function () {
                f(this).parent(".formErrorOuter").remove();
                f(this).remove()
            });
            return this
        },
        hideAll: function () {
            var b = this;
            var c = b.data("jqv");
            var a = c ? c.fadeDuration : 300;
            f(".formError").fadeTo(a, 300, function () {
                f(this).parent(".formErrorOuter").remove();
                f(this).remove()
            });
            return this
        },
        _onFieldEvent: function (b) {
            var a = f(this);
            var c = a.closest("form, .validationEngineContainer");
            var h = c.data("jqv");
            h.eventTrigger = "field";
            window.setTimeout(function () {
                d._validateField(a, h);
                if (h.InvalidFields.length == 0 && h.onFieldSuccess) {
                    h.onFieldSuccess()
                } else {
                    if (h.InvalidFields.length > 0 && h.onFieldFailure) {
                        h.onFieldFailure()
                    }
                }
            }, (b.data) ? b.data.delay : 0)
        },
        _onSubmitEvent: function () {
            var a = f(this);
            var h = a.data("jqv");
            if (a.data("jqv_submitButton")) {
                var c = f("#" + a.data("jqv_submitButton"));
                if (c) {
                    if (c.length > 0) {
                        if (c.hasClass("validate-skip") || c.attr("data-validation-engine-skip") == "true") {
                            return true
                        }
                    }
                }
            }
            h.eventTrigger = "submit";
            var b = d._validateFields(a);
            if (b && h.ajaxFormValidation) {
                d._validateFormWithAjax(a, h);
                return false
            }
            if (h.onValidationComplete) {
                return !!h.onValidationComplete(a, b)
            }
            return b
        },
        _checkAjaxStatus: function (a) {
            var b = true;
            f.each(a.ajaxValidCache, function (h, c) {
                if (!c) {
                    b = false;
                    return false
                }
            });
            return b
        },
        _checkAjaxFieldStatus: function (b, a) {
            return a.ajaxValidCache[b] == true
        },
        _validateFields: function (y) {
            var b = y.data("jqv");
            var x = false;
            y.trigger("jqv.form.validating");
            var a = null;
            y.find("[" + b.validateAttribute + "*=validate]").not(":disabled").each(function () {
                var g = f(this);
                var h = [];
                if (f.inArray(g.attr("name"), h) < 0) {
                    x |= d._validateField(g, b);
                    if (x && a == null) {
                        if (g.is(":hidden") && b.prettySelect) {
                            a = g = y.find("#" + b.usePrefix + d._jqSelector(g.attr("id")) + b.useSuffix)
                        } else {
                            if (g.data("jqv-prompt-at") instanceof jQuery) {
                                g = g.data("jqv-prompt-at")
                            } else {
                                if (g.data("jqv-prompt-at")) {
                                    g = f(g.data("jqv-prompt-at"))
                                }
                            }
                            a = g
                        }
                    }
                    if (b.doNotShowAllErrosOnSubmit) {
                        return false
                    }
                    h.push(g.attr("name"));
                    if (b.showOneMessage == true && x) {
                        return false
                    }
                }
            });
            y.trigger("jqv.form.result", [x]);
            if (x) {
                if (b.scroll) {
                    var c = a.offset().top;
                    var v = a.offset().left;
                    var s = b.promptPosition;
                    if (typeof(s) == "string" && s.indexOf(":") != -1) {
                        s = s.substring(0, s.indexOf(":"))
                    }
                    if (s != "bottomRight" && s != "bottomLeft") {
                        var u = d._getPrompt(a);
                        if (u) {
                            c = u.offset().top
                        }
                    }
                    if (b.scrollOffset) {
                        c -= b.scrollOffset
                    }
                    if (b.isOverflown) {
                        var B = f(b.overflownDIV);
                        if (!B.length) {
                            return false
                        }
                        var A = B.scrollTop();
                        var w = -parseInt(B.offset().top);
                        c += A + w - 5;
                        var r = f(b.overflownDIV + ":not(:animated)");
                        r.animate({scrollTop: c}, 1100, function () {
                            if (b.focusFirstField) {
                                a.focus()
                            }
                        })
                    } else {
                        f("html, body").animate({scrollTop: c}, 1100, function () {
                            if (b.focusFirstField) {
                                a.focus()
                            }
                        });
                        f("html, body").animate({scrollLeft: v}, 1100)
                    }
                } else {
                    if (b.focusFirstField) {
                        a.focus()
                    }
                }
                return false
            }
            return true
        },
        _validateFormWithAjax: function (b, l) {
            var a = b.serialize();
            var c = (l.ajaxFormValidationMethod) ? l.ajaxFormValidationMethod : "GET";
            var m = (l.ajaxFormValidationURL) ? l.ajaxFormValidationURL : b.attr("action");
            var n = (l.dataType) ? l.dataType : "json";
            f.ajax({
                type: c,
                url: m,
                cache: false,
                dataType: n,
                data: a,
                form: b,
                methods: d,
                options: l,
                beforeSend: function () {
                    return l.onBeforeAjaxFormValidation(b, l)
                },
                error: function (h, g) {
                    d._ajaxError(h, g)
                },
                success: function (w) {
                    if ((n == "json") && (w !== true)) {
                        var y = false;
                        for (var x = 0; x < w.length; x++) {
                            var v = w[x];
                            var k = v[0];
                            var g = f(f("#" + k)[0]);
                            if (g.length == 1) {
                                var u = v[2];
                                if (v[1] == true) {
                                    if (u == "" || !u) {
                                        d._closePrompt(g)
                                    } else {
                                        if (l.allrules[u]) {
                                            var h = l.allrules[u].alertTextOk;
                                            if (h) {
                                                u = h
                                            }
                                        }
                                        if (l.showPrompts) {
                                            d._showPrompt(g, u, "pass", false, l, true)
                                        }
                                    }
                                } else {
                                    y |= true;
                                    if (l.allrules[u]) {
                                        var h = l.allrules[u].alertText;
                                        if (h) {
                                            u = h
                                        }
                                    }
                                    if (l.showPrompts) {
                                        d._showPrompt(g, u, "", false, l, true)
                                    }
                                }
                            }
                        }
                        l.onAjaxFormComplete(!y, b, w, l)
                    } else {
                        l.onAjaxFormComplete(true, b, w, l)
                    }
                }
            })
        },
        _validateField: function (Y, R, F) {
            if (!Y.attr("id")) {
                Y.attr("id", "form-validation-field-" + f.validationEngine.fieldIdCounter);
                ++f.validationEngine.fieldIdCounter
            }
            if (!R.validateNonVisibleFields && (Y.is(":hidden") && !R.prettySelect || Y.parent().is(":hidden"))) {
                return false
            }
            var b = Y.attr(R.validateAttribute);
            var J = /validate\[(.*)\]/.exec(b);
            if (!J) {
                return false
            }
            var a = J[1];
            var G = a.split(/\[|,|\]/);
            var N = false;
            var T = Y.attr("name");
            var U = "";
            var L = "";
            var c = false;
            var H = false;
            R.isError = false;
            R.showArrow = true;
            if (R.maxErrorsPerField > 0) {
                H = true
            }
            var X = f(Y.closest("form, .validationEngineContainer"));
            for (var M = 0; M < G.length; M++) {
                G[M] = G[M].replace(" ", "");
                if (G[M] === "") {
                    delete G[M]
                }
            }
            for (var M = 0, P = 0; M < G.length; M++) {
                if (H && P >= R.maxErrorsPerField) {
                    if (!c) {
                        var S = f.inArray("required", G);
                        c = (S != -1 && S >= M)
                    }
                    break
                }
                var V = undefined;
                switch (G[M]) {
                    case"required":
                        c = true;
                        V = d._getErrorMessage(X, Y, G[M], G, M, R, d._required);
                        break;
                    case"custom":
                        V = d._getErrorMessage(X, Y, G[M], G, M, R, d._custom);
                        break;
                    case"groupRequired":
                        var O = "[" + R.validateAttribute + "*=" + G[M + 1] + "]";
                        var W = X.find(O).eq(0);
                        if (W[0] != Y[0]) {
                            d._validateField(W, R, F);
                            R.showArrow = true
                        }
                        V = d._getErrorMessage(X, Y, G[M], G, M, R, d._groupRequired);
                        if (V) {
                            c = true
                        }
                        R.showArrow = false;
                        break;
                    case"ajax":
                        V = d._ajax(Y, G, M, R);
                        if (V) {
                            L = "load"
                        }
                        break;
                    case"minSize":
                        V = d._getErrorMessage(X, Y, G[M], G, M, R, d._minSize);
                        break;
                    case"maxSize":
                        V = d._getErrorMessage(X, Y, G[M], G, M, R, d._maxSize);
                        break;
                    case"min":
                        V = d._getErrorMessage(X, Y, G[M], G, M, R, d._min);
                        break;
                    case"max":
                        V = d._getErrorMessage(X, Y, G[M], G, M, R, d._max);
                        break;
                    case"past":
                        V = d._getErrorMessage(X, Y, G[M], G, M, R, d._past);
                        break;
                    case"future":
                        V = d._getErrorMessage(X, Y, G[M], G, M, R, d._future);
                        break;
                    case"dateRange":
                        var O = "[" + R.validateAttribute + "*=" + G[M + 1] + "]";
                        R.firstOfGroup = X.find(O).eq(0);
                        R.secondOfGroup = X.find(O).eq(1);
                        if (R.firstOfGroup[0].value || R.secondOfGroup[0].value) {
                            V = d._getErrorMessage(X, Y, G[M], G, M, R, d._dateRange)
                        }
                        if (V) {
                            c = true
                        }
                        R.showArrow = false;
                        break;
                    case"dateTimeRange":
                        var O = "[" + R.validateAttribute + "*=" + G[M + 1] + "]";
                        R.firstOfGroup = X.find(O).eq(0);
                        R.secondOfGroup = X.find(O).eq(1);
                        if (R.firstOfGroup[0].value || R.secondOfGroup[0].value) {
                            V = d._getErrorMessage(X, Y, G[M], G, M, R, d._dateTimeRange)
                        }
                        if (V) {
                            c = true
                        }
                        R.showArrow = false;
                        break;
                    case"maxCheckbox":
                        Y = f(X.find("input[name='" + T + "']"));
                        V = d._getErrorMessage(X, Y, G[M], G, M, R, d._maxCheckbox);
                        break;
                    case"minCheckbox":
                        Y = f(X.find("input[name='" + T + "']"));
                        V = d._getErrorMessage(X, Y, G[M], G, M, R, d._minCheckbox);
                        break;
                    case"equals":
                        V = d._getErrorMessage(X, Y, G[M], G, M, R, d._equals);
                        break;
                    case"funcCall":
                        V = d._getErrorMessage(X, Y, G[M], G, M, R, d._funcCall);
                        break;
                    case"creditCard":
                        V = d._getErrorMessage(X, Y, G[M], G, M, R, d._creditCard);
                        break;
                    case"condRequired":
                        V = d._getErrorMessage(X, Y, G[M], G, M, R, d._condRequired);
                        if (V !== undefined) {
                            c = true
                        }
                        break;
                    default:
                }
                var Q = false;
                if (typeof V == "object") {
                    switch (V.status) {
                        case"_break":
                            Q = true;
                            break;
                        case"_error":
                            V = V.message;
                            break;
                        case"_error_no_prompt":
                            return true;
                            break;
                        default:
                            break
                    }
                }
                if (Q) {
                    break
                }
                if (typeof V == "string") {
                    U += V + "<br/>";
                    R.isError = true;
                    P++
                }
            }
            if (!c && !(Y.val()) && Y.val().length < 1) {
                R.isError = false
            }
            var K = Y.prop("type");
            var Z = Y.data("promptPosition") || R.promptPosition;
            if ((K == "radio" || K == "checkbox") && X.find("input[name='" + T + "']").size() > 1) {
                if (Z === "inline") {
                    Y = f(X.find("input[name='" + T + "'][type!=hidden]:last"))
                } else {
                    Y = f(X.find("input[name='" + T + "'][type!=hidden]:first"))
                }
                R.showArrow = false
            }
            if (Y.is(":hidden") && R.prettySelect) {
                Y = X.find("#" + R.usePrefix + d._jqSelector(Y.attr("id")) + R.useSuffix)
            }
            if (R.isError && R.showPrompts) {
                d._showPrompt(Y, U, L, false, R)
            } else {
                if (!N) {
                    d._closePrompt(Y)
                }
            }
            if (!N) {
                Y.trigger("jqv.field.result", [Y, R.isError, U])
            }
            var I = f.inArray(Y[0], R.InvalidFields);
            if (I == -1) {
                if (R.isError) {
                    R.InvalidFields.push(Y[0])
                }
            } else {
                if (!R.isError) {
                    R.InvalidFields.splice(I, 1)
                }
            }
            d._handleStatusCssClasses(Y, R);
            if (R.isError && R.onFieldFailure) {
                R.onFieldFailure(Y)
            }
            if (!R.isError && R.onFieldSuccess) {
                R.onFieldSuccess(Y)
            }
            return R.isError
        },
        _handleStatusCssClasses: function (a, b) {
            if (b.addSuccessCssClassToField) {
                a.removeClass(b.addSuccessCssClassToField)
            }
            if (b.addFailureCssClassToField) {
                a.removeClass(b.addFailureCssClassToField)
            }
            if (b.addSuccessCssClassToField && !b.isError) {
                a.addClass(b.addSuccessCssClassToField)
            }
            if (b.addFailureCssClassToField && b.isError) {
                a.addClass(b.addFailureCssClassToField)
            }
        },
        _getErrorMessage: function (E, c, v, a, A, F, u) {
            var x = jQuery.inArray(v, a);
            if (v === "custom" || v === "funcCall") {
                var b = a[x + 1];
                v = v + "[" + b + "]";
                delete (a[x])
            }
            var D = v;
            var C = (c.attr("data-validation-engine")) ? c.attr("data-validation-engine") : c.attr("class");
            var y = C.split(" ");
            var w;
            if (v == "future" || v == "past" || v == "maxCheckbox" || v == "minCheckbox") {
                w = u(E, c, a, A, F)
            } else {
                w = u(c, a, A, F)
            }
            if (w != undefined) {
                var B = d._getCustomErrorMessage(f(c), y, D, F);
                if (B) {
                    w = B
                }
            }
            return w
        },
        _getCustomErrorMessage: function (c, r, o, a) {
            var q = false;
            var s = /^custom\[.*\]$/.test(o) ? d._validityProp.custom : d._validityProp[o];
            if (s != undefined) {
                q = c.attr("data-errormessage-" + s);
                if (q != undefined) {
                    return q
                }
            }
            q = c.attr("data-errormessage");
            if (q != undefined) {
                return q
            }
            var u = "#" + c.attr("id");
            if (typeof a.custom_error_messages[u] != "undefined" && typeof a.custom_error_messages[u][o] != "undefined") {
                q = a.custom_error_messages[u][o]["message"]
            } else {
                if (r.length > 0) {
                    for (var p = 0; p < r.length && r.length > 0; p++) {
                        var b = "." + r[p];
                        if (typeof a.custom_error_messages[b] != "undefined" && typeof a.custom_error_messages[b][o] != "undefined") {
                            q = a.custom_error_messages[b][o]["message"];
                            break
                        }
                    }
                }
            }
            if (!q && typeof a.custom_error_messages[o] != "undefined" && typeof a.custom_error_messages[o]["message"] != "undefined") {
                q = a.custom_error_messages[o]["message"]
            }
            return q
        },
        _validityProp: {
            required: "value-missing",
            custom: "custom-error",
            groupRequired: "value-missing",
            ajax: "custom-error",
            minSize: "range-underflow",
            maxSize: "range-overflow",
            min: "range-underflow",
            max: "range-overflow",
            past: "type-mismatch",
            future: "type-mismatch",
            dateRange: "type-mismatch",
            dateTimeRange: "type-mismatch",
            maxCheckbox: "range-overflow",
            minCheckbox: "range-underflow",
            equals: "pattern-mismatch",
            funcCall: "custom-error",
            creditCard: "pattern-mismatch",
            condRequired: "value-missing"
        },
        _required: function (o, c, q, a, p) {
            switch (o.prop("type")) {
                case"text":
                case"password":
                case"textarea":
                case"file":
                case"select-one":
                case"select-multiple":
                default:
                    var b = f.trim(o.val());
                    var r = f.trim(o.attr("data-validation-placeholder"));
                    if ((!b) || (r && b == r)) {
                        return a.allrules[c[q]].alertText
                    }
                    break;
                case"radio":
                case"checkbox":
                    if (p) {
                        if (!o.attr("checked")) {
                            return a.allrules[c[q]].alertTextCheckboxMultiple
                        }
                        break
                    }
                    var s = o.closest("form, .validationEngineContainer");
                    var u = o.attr("name");
                    if (s.find("input[name='" + u + "']:checked").size() == 0) {
                        if (s.find("input[name='" + u + "']:visible").size() == 1) {
                            return a.allrules[c[q]].alertTextCheckboxe
                        } else {
                            return a.allrules[c[q]].alertTextCheckboxMultiple
                        }
                    }
                    break
            }
        },
        _groupRequired: function (c, a, m, n) {
            var b = "[" + n.validateAttribute + "*=" + a[m + 1] + "]";
            var l = false;
            c.closest("form, .validationEngineContainer").find(b).each(function () {
                if (!d._required(f(this), a, m, n)) {
                    l = true;
                    return false
                }
            });
            if (!l) {
                return n.allrules[a[m]].alertText
            }
        },
        _custom: function (c, b, s, a) {
            var u = b[s + 1];
            var p = a.allrules[u];
            var o;
            if (!p) {
                alert("jqv:custom rule not found - " + u);
                return
            }
            if (p.regex) {
                var q = p.regex;
                if (!q) {
                    alert("jqv:custom regex not found - " + u);
                    return
                }
                var r = new RegExp(q);
                if (!r.test(c.val())) {
                    return a.allrules[u].alertText
                }
            } else {
                if (p.func) {
                    o = p.func;
                    if (typeof(o) !== "function") {
                        alert("jqv:custom parameter 'function' is no function - " + u);
                        return
                    }
                    if (!o(c, b, s, a)) {
                        return a.allrules[u].alertText
                    }
                } else {
                    alert("jqv:custom type not allowed " + u);
                    return
                }
            }
        },
        _funcCall: function (b, a, q, r) {
            var c = a[q + 1];
            var o;
            if (c.indexOf(".") > -1) {
                var n = c.split(".");
                var p = window;
                while (n.length) {
                    p = p[n.shift()]
                }
                o = p
            } else {
                o = window[c] || r.customFunctions[c]
            }
            if (typeof(o) == "function") {
                return o(b, a, q, r)
            }
        },
        _equals: function (b, a, c, k) {
            var l = a[c + 1];
            if (b.val() != f("#" + l).val()) {
                return k.allrules.equals.alertText
            }
        },
        _maxSize: function (b, a, m, n) {
            var o = a[m + 1];
            var p = b.val().length;
            if (p > o) {
                var c = n.allrules.maxSize;
                if (typeof c.alertText2 == "string") {
                    return c.alertText + min + c.alertText2
                } else {
                    return c.alertText
                }
            }
        },
        _minSize: function (b, a, m, o) {
            var n = a[m + 1];
            var p = b.val().length;
            if (p < n) {
                var c = o.allrules.minSize;
                if (typeof c.alertText2 == "string") {
                    return c.alertText + n + c.alertText2
                } else {
                    return c.alertText
                }
            }
        },
        _min: function (b, a, m, o) {
            var n = parseFloat(a[m + 1]);
            var p = parseFloat(b.val());
            if (p < n) {
                var c = o.allrules.min;
                if (c.alertText2) {
                    return c.alertText + n + c.alertText2
                }
                return c.alertText + n
            }
        },
        _max: function (b, a, m, n) {
            var o = parseFloat(a[m + 1]);
            var p = parseFloat(b.val());
            if (p > o) {
                var c = n.allrules.max;
                if (c.alertText2) {
                    return c.alertText + o + c.alertText2
                }
                return c.alertText + o
            }
        },
        _past: function (v, p, c, u, a) {
            var w = c[u + 1];
            var r = f(v.find("input[name='" + w.replace(/^#+/, "") + "']"));
            var s;
            if (w.toLowerCase() == "now") {
                s = new Date()
            } else {
                if (undefined != r.val()) {
                    if (r.is(":disabled")) {
                        return
                    }
                    s = d._parseDate(r.val())
                } else {
                    s = d._parseDate(w)
                }
            }
            var b = d._parseDate(p.val());
            if (b > s) {
                var q = a.allrules.past;
                if (q.alertText2) {
                    return q.alertText + d._dateToString(s) + q.alertText2
                }
                return q.alertText + d._dateToString(s)
            }
        },
        _future: function (v, p, c, u, a) {
            var w = c[u + 1];
            var r = f(v.find("input[name='" + w.replace(/^#+/, "") + "']"));
            var s;
            if (w.toLowerCase() == "now") {
                s = new Date()
            } else {
                if (undefined != r.val()) {
                    if (r.is(":disabled")) {
                        return
                    }
                    s = d._parseDate(r.val())
                } else {
                    s = d._parseDate(w)
                }
            }
            var b = d._parseDate(p.val());
            if (b < s) {
                var q = a.allrules.future;
                if (q.alertText2) {
                    return q.alertText + d._dateToString(s) + q.alertText2
                }
                return q.alertText + d._dateToString(s)
            }
        },
        _isDate: function (a) {
            var b = new RegExp(/^\d{4}[\/\-](0?[1-9]|1[012])[\/\-](0?[1-9]|[12][0-9]|3[01])$|^(?:(?:(?:0?[13578]|1[02])(\/|-)31)|(?:(?:0?[1,3-9]|1[0-2])(\/|-)(?:29|30)))(\/|-)(?:[1-9]\d\d\d|\d[1-9]\d\d|\d\d[1-9]\d|\d\d\d[1-9])$|^(?:(?:0?[1-9]|1[0-2])(\/|-)(?:0?[1-9]|1\d|2[0-8]))(\/|-)(?:[1-9]\d\d\d|\d[1-9]\d\d|\d\d[1-9]\d|\d\d\d[1-9])$|^(0?2(\/|-)29)(\/|-)(?:(?:0[48]00|[13579][26]00|[2468][048]00)|(?:\d\d)?(?:0[48]|[2468][048]|[13579][26]))$/);
            return b.test(a)
        },
        _isDateTime: function (a) {
            var b = new RegExp(/^\d{4}[\/\-](0?[1-9]|1[012])[\/\-](0?[1-9]|[12][0-9]|3[01])\s+(1[012]|0?[1-9]){1}:(0?[1-5]|[0-6][0-9]){1}:(0?[0-6]|[0-6][0-9]){1}\s+(am|pm|AM|PM){1}$|^(?:(?:(?:0?[13578]|1[02])(\/|-)31)|(?:(?:0?[1,3-9]|1[0-2])(\/|-)(?:29|30)))(\/|-)(?:[1-9]\d\d\d|\d[1-9]\d\d|\d\d[1-9]\d|\d\d\d[1-9])$|^((1[012]|0?[1-9]){1}\/(0?[1-9]|[12][0-9]|3[01]){1}\/\d{2,4}\s+(1[012]|0?[1-9]){1}:(0?[1-5]|[0-6][0-9]){1}:(0?[0-6]|[0-6][0-9]){1}\s+(am|pm|AM|PM){1})$/);
            return b.test(a)
        },
        _dateCompare: function (a, b) {
            return (new Date(a.toString()) < new Date(b.toString()))
        },
        _dateRange: function (b, a, c, h) {
            if ((!h.firstOfGroup[0].value && h.secondOfGroup[0].value) || (h.firstOfGroup[0].value && !h.secondOfGroup[0].value)) {
                return h.allrules[a[c]].alertText + h.allrules[a[c]].alertText2
            }
            if (!d._isDate(h.firstOfGroup[0].value) || !d._isDate(h.secondOfGroup[0].value)) {
                return h.allrules[a[c]].alertText + h.allrules[a[c]].alertText2
            }
            if (!d._dateCompare(h.firstOfGroup[0].value, h.secondOfGroup[0].value)) {
                return h.allrules[a[c]].alertText + h.allrules[a[c]].alertText2
            }
        },
        _dateTimeRange: function (b, a, c, h) {
            if ((!h.firstOfGroup[0].value && h.secondOfGroup[0].value) || (h.firstOfGroup[0].value && !h.secondOfGroup[0].value)) {
                return h.allrules[a[c]].alertText + h.allrules[a[c]].alertText2
            }
            if (!d._isDateTime(h.firstOfGroup[0].value) || !d._isDateTime(h.secondOfGroup[0].value)) {
                return h.allrules[a[c]].alertText + h.allrules[a[c]].alertText2
            }
            if (!d._dateCompare(h.firstOfGroup[0].value, h.secondOfGroup[0].value)) {
                return h.allrules[a[c]].alertText + h.allrules[a[c]].alertText2
            }
        },
        _maxCheckbox: function (c, b, a, n, o) {
            var q = a[n + 1];
            var p = b.attr("name");
            var r = c.find("input[name='" + p + "']:checked").size();
            if (r > q) {
                o.showArrow = false;
                if (o.allrules.maxCheckbox.alertText2) {
                    return o.allrules.maxCheckbox.alertText + " " + q + " " + o.allrules.maxCheckbox.alertText2
                }
                return o.allrules.maxCheckbox.alertText
            }
        },
        _minCheckbox: function (c, b, a, n, o) {
            var q = a[n + 1];
            var p = b.attr("name");
            var r = c.find("input[name='" + p + "']:checked").size();
            if (r < q) {
                o.showArrow = false;
                return o.allrules.minCheckbox.alertText + " " + q + " " + o.allrules.minCheckbox.alertText2
            }
        },
        _creditCard: function (q, c, v, a) {
            var x = false, b = q.val().replace(/ +/g, "").replace(/-+/g, "");
            var y = b.length;
            if (y >= 14 && y <= 16 && parseInt(b) > 0) {
                var u = 0, v = y - 1, r = 1, s, w = new String();
                do {
                    s = parseInt(b.charAt(v));
                    w += (r++ % 2 == 0) ? s * 2 : s
                } while (--v >= 0);
                for (v = 0; v < w.length; v++) {
                    u += parseInt(w.charAt(v))
                }
                x = u % 10 == 0
            }
            if (!x) {
                return a.allrules.creditCard.alertText
            }
        },
        _ajax: function (b, I, A, H) {
            var J = I[A + 1];
            var c = H.allrules[J];
            var E = c.extraData;
            var x = c.extraDataDynamic;
            var B = {fieldId: b.attr("id"), fieldValue: b.val()};
            if (typeof E === "object") {
                f.extend(B, E)
            } else {
                if (typeof E === "string") {
                    var y = E.split("&");
                    for (var A = 0; A < y.length; A++) {
                        var a = y[A].split("=");
                        if (a[0] && a[0]) {
                            B[a[0]] = a[1]
                        }
                    }
                }
            }
            if (x) {
                var C = [];
                var w = String(x).split(",");
                for (var A = 0; A < w.length; A++) {
                    var G = w[A];
                    if (f(G).length) {
                        var F = b.closest("form, .validationEngineContainer").find(G).val();
                        var D = G.replace("#", "") + "=" + escape(F);
                        B[G.replace("#", "")] = F
                    }
                }
            }
            if (H.eventTrigger == "field") {
                delete (H.ajaxValidCache[b.attr("id")])
            }
            if (!H.isError && !d._checkAjaxFieldStatus(b.attr("id"), H)) {
                f.ajax({
                    type: H.ajaxFormValidationMethod,
                    url: c.url,
                    cache: false,
                    dataType: "json",
                    data: B,
                    field: b,
                    rule: c,
                    methods: d,
                    options: H,
                    beforeSend: function () {
                    },
                    error: function (h, g) {
                        d._ajaxError(h, g)
                    },
                    success: function (h) {
                        var l = h[0];
                        var n = f("#" + l).eq(0);
                        if (n.length == 1) {
                            var g = h[1];
                            var m = h[2];
                            if (!g) {
                                H.ajaxValidCache[l] = false;
                                H.isError = true;
                                if (m) {
                                    if (H.allrules[m]) {
                                        var k = H.allrules[m].alertText;
                                        if (k) {
                                            m = k
                                        }
                                    }
                                } else {
                                    m = c.alertText
                                }
                                if (H.showPrompts) {
                                    d._showPrompt(n, m, "", true, H)
                                }
                            } else {
                                H.ajaxValidCache[l] = true;
                                if (m) {
                                    if (H.allrules[m]) {
                                        var k = H.allrules[m].alertTextOk;
                                        if (k) {
                                            m = k
                                        }
                                    }
                                } else {
                                    m = c.alertTextOk
                                }
                                if (H.showPrompts) {
                                    if (m) {
                                        d._showPrompt(n, m, "pass", true, H)
                                    } else {
                                        d._closePrompt(n)
                                    }
                                }
                                if (H.eventTrigger == "submit") {
                                    b.closest("form").submit()
                                }
                            }
                        }
                        n.trigger("jqv.field.result", [n, H.isError, m])
                    }
                });
                return c.alertTextLoad
            }
        },
        _ajaxError: function (b, a) {
            if (b.status == 0 && a == null) {
                alert("The page is not served from a server! ajax call failed")
            } else {
                if (typeof console != "undefined") {
                    console.log("Ajax error: " + b.status + " " + a)
                }
            }
        },
        _dateToString: function (a) {
            return a.getFullYear() + "-" + (a.getMonth() + 1) + "-" + a.getDate()
        },
        _parseDate: function (a) {
            var b = a.split("-");
            if (b == a) {
                b = a.split("/")
            }
            if (b == a) {
                b = a.split(".");
                return new Date(b[2], (b[1] - 1), b[0])
            }
            return new Date(b[0], (b[1] - 1), b[2])
        },
        _showPrompt: function (a, c, b, m, n, o) {
            if (a.data("jqv-prompt-at") instanceof jQuery) {
                a = a.data("jqv-prompt-at")
            } else {
                if (a.data("jqv-prompt-at")) {
                    a = f(a.data("jqv-prompt-at"))
                }
            }
            var p = d._getPrompt(a);
            if (o) {
                p = false
            }
            if (f.trim(c)) {
                if (p) {
                    d._updatePrompt(a, p, c, b, m, n)
                } else {
                    d._buildPrompt(a, c, b, m, n)
                }
            }
        },
        _buildPrompt: function (u, B, w, r, b) {
            var A = f("<div>");
            A.addClass(d._getClassName(u.attr("id")) + "formError");
            A.addClass("parentForm" + d._getClassName(u.closest("form, .validationEngineContainer").attr("id")));
            A.addClass("formError");
            switch (w) {
                case"pass":
                    A.addClass("greenPopup");
                    break;
                case"load":
                    A.addClass("blackPopup");
                    break;
                default:
            }
            if (r) {
                A.addClass("ajaxed")
            }
            var a = f("<div>").addClass("formErrorContent").html(B).appendTo(A);
            var x = u.data("promptPosition") || b.promptPosition;
            if (b.showArrow) {
                var s = f("<div>").addClass("formErrorArrow");
                if (typeof(x) == "string") {
                    var v = x.indexOf(":");
                    if (v != -1) {
                        x = x.substring(0, v)
                    }
                }
                switch (x) {
                    case"bottomLeft":
                    case"bottomRight":
                        A.find(".formErrorContent").before(s);
                        s.addClass("formErrorArrowBottom").html('<div class="line1"><!-- --></div><div class="line2"><!-- --></div><div class="line3"><!-- --></div><div class="line4"><!-- --></div><div class="line5"><!-- --></div><div class="line6"><!-- --></div><div class="line7"><!-- --></div><div class="line8"><!-- --></div><div class="line9"><!-- --></div><div class="line10"><!-- --></div>');
                        break;
                    case"topLeft":
                    case"topRight":
                        s.html('<div class="line10"><!-- --></div><div class="line9"><!-- --></div><div class="line8"><!-- --></div><div class="line7"><!-- --></div><div class="line6"><!-- --></div><div class="line5"><!-- --></div><div class="line4"><!-- --></div><div class="line3"><!-- --></div><div class="line2"><!-- --></div><div class="line1"><!-- --></div>');
                        A.append(s);
                        break
                }
            }
            if (b.addPromptClass) {
                A.addClass(b.addPromptClass)
            }
            var c = u.attr("data-required-class");
            if (c !== undefined) {
                A.addClass(c)
            } else {
                if (b.prettySelect) {
                    if (f("#" + u.attr("id")).next().is("select")) {
                        var y = f("#" + u.attr("id").substr(b.usePrefix.length).substring(b.useSuffix.length)).attr("data-required-class");
                        if (y !== undefined) {
                            A.addClass(y)
                        }
                    }
                }
            }
            A.css({opacity: 0});
            if (x === "inline") {
                A.addClass("inline");
                if (typeof u.attr("data-prompt-target") !== "undefined" && f("#" + u.attr("data-prompt-target")).length > 0) {
                    A.appendTo(f("#" + u.attr("data-prompt-target")))
                } else {
                    u.after(A)
                }
            } else {
                u.before(A)
            }
            var v = d._calculatePosition(u, A, b);
            A.css({
                position: x === "inline" ? "relative" : "absolute",
                top: v.callerTopPosition,
                left: v.callerleftPosition,
                marginTop: v.marginTopSize,
                opacity: 0
            }).data("callerField", u);
            if (b.autoHidePrompt) {
                setTimeout(function () {
                    A.animate({opacity: 0}, function () {
                        A.closest(".formErrorOuter").remove();
                        A.remove()
                    })
                }, b.autoHideDelay)
            }
            return A.animate({opacity: 0.87})
        },
        _updatePrompt: function (c, s, u, p, b, a, r) {
            if (s) {
                if (typeof p !== "undefined") {
                    if (p == "pass") {
                        s.addClass("greenPopup")
                    } else {
                        s.removeClass("greenPopup")
                    }
                    if (p == "load") {
                        s.addClass("blackPopup")
                    } else {
                        s.removeClass("blackPopup")
                    }
                }
                if (b) {
                    s.addClass("ajaxed")
                } else {
                    s.removeClass("ajaxed")
                }
                s.find(".formErrorContent").html(u);
                var o = d._calculatePosition(c, s, a);
                var q = {
                    top: o.callerTopPosition,
                    left: o.callerleftPosition,
                    marginTop: o.marginTopSize
                };
                if (r) {
                    s.css(q)
                } else {
                    s.animate(q)
                }
            }
        },
        _closePrompt: function (a) {
            var b = d._getPrompt(a);
            if (b) {
                b.fadeTo("fast", 0, function () {
                    b.parent(".formErrorOuter").remove();
                    b.remove()
                })
            }
        },
        closePrompt: function (a) {
            return d._closePrompt(a)
        },
        _getPrompt: function (b) {
            var a = f(b).closest("form, .validationEngineContainer").attr("id");
            var c = d._getClassName(b.attr("id")) + "formError";
            var h = f("." + d._escapeExpression(c) + ".parentForm" + d._getClassName(a))[0];
            if (h) {
                return f(h)
            }
        },
        _escapeExpression: function (a) {
            return a.replace(/([#;&,\.\+\*\~':"\!\^$\[\]\(\)=>\|])/g, "\\$1")
        },
        isRTL: function (b) {
            var a = f(document);
            var h = f("body");
            var c = (b && b.hasClass("rtl")) || (b && (b.attr("dir") || "").toLowerCase() === "rtl") || a.hasClass("rtl") || (a.attr("dir") || "").toLowerCase() === "rtl" || h.hasClass("rtl") || (h.attr("dir") || "").toLowerCase() === "rtl";
            return Boolean(c)
        },
        _calculatePosition: function (c, D, H) {
            var E, b, x;
            var C = c.width();
            var G = c.position().left;
            var J = c.position().top;
            var F = c.height();
            var I = D.height();
            E = b = 0;
            x = -I;
            var y = c.data("promptPosition") || H.promptPosition;
            var A = "";
            var B = "";
            var a = 0;
            var w = 0;
            if (typeof(y) == "string") {
                if (y.indexOf(":") != -1) {
                    A = y.substring(y.indexOf(":") + 1);
                    y = y.substring(0, y.indexOf(":"));
                    if (A.indexOf(",") != -1) {
                        B = A.substring(A.indexOf(",") + 1);
                        A = A.substring(0, A.indexOf(","));
                        w = parseInt(B);
                        if (isNaN(w)) {
                            w = 0
                        }
                    }
                    a = parseInt(A);
                    if (isNaN(A)) {
                        A = 0
                    }
                }
            }
            switch (y) {
                default:
                case"topRight":
                    b += G + C - 30;
                    E += J;
                    break;
                case"topLeft":
                    E += J;
                    b += G;
                    break;
                case"centerRight":
                    E = J + 4;
                    x = 0;
                    b = G + c.outerWidth(true) + 5;
                    break;
                case"centerLeft":
                    b = G - (D.width() + 2);
                    E = J + 4;
                    x = 0;
                    break;
                case"bottomLeft":
                    E = J + c.height() + 5;
                    x = 0;
                    b = G;
                    break;
                case"bottomRight":
                    b = G + C - 30;
                    E = J + c.height() + 5;
                    x = 0;
                    break;
                case"inline":
                    b = 0;
                    E = 0;
                    x = 0
            }
            b += a;
            E += w;
            return {
                callerTopPosition: E + "px",
                callerleftPosition: b + "px",
                marginTopSize: x + "px"
            }
        },
        _saveOptions: function (b, c) {
            if (f.validationEngineLanguage) {
                var h = f.validationEngineLanguage.allRules
            } else {
                f.error("jQuery.validationEngine rules are not loaded, plz add localization files to the page")
            }
            f.validationEngine.defaults.allrules = h;
            var a = f.extend(true, {}, f.validationEngine.defaults, c);
            b.data("jqv", a);
            return a
        },
        _getClassName: function (a) {
            if (a) {
                return a.replace(/:/g, "_").replace(/\./g, "_")
            }
        },
        _jqSelector: function (a) {
            return a.replace(/([;&,\.\+\*\~':"\!\^#$%@\[\]\(\)=>\|])/g, "\\$1")
        },
        _condRequired: function (b, a, l, m) {
            var n, c;
            for (n = (l + 1); n < a.length; n++) {
                c = jQuery("#" + a[n]).first();
                if (c.length && d._required(c, ["required"], 0, m, true) == undefined) {
                    return d._required(b, ["required"], 0, m)
                }
            }
        },
        _submitButtonClick: function (a) {
            var c = f(this);
            var b = c.closest("form, .validationEngineContainer");
            b.data("jqv_submitButton", c.attr("id"))
        }
    };
    f.fn.validationEngine = function (a) {
        var b = f(this);
        if (!b[0]) {
            return b
        }
        if (typeof(a) == "string" && a.charAt(0) != "_" && d[a]) {
            if (a != "showPrompt" && a != "hide" && a != "hideAll") {
                d.init.apply(b)
            }
            return d[a].apply(b, Array.prototype.slice.call(arguments, 1))
        } else {
            if (typeof a == "object" || !a) {
                d.init.apply(b, arguments);
                return d.attach.apply(b)
            } else {
                f.error("Method " + a + " does not exist in jQuery.validationEngine")
            }
        }
    };
    f.validationEngine = {
        fieldIdCounter: 0,
        defaults: {
            validationEventTrigger: "blur",
            scroll: true,
            focusFirstField: true,
            showPrompts: true,
            validateNonVisibleFields: false,
            promptPosition: "topRight",
            bindMethod: "bind",
            inlineAjax: false,
            ajaxFormValidation: false,
            ajaxFormValidationURL: false,
            ajaxFormValidationMethod: "get",
            onAjaxFormComplete: f.noop,
            onBeforeAjaxFormValidation: f.noop,
            onValidationComplete: false,
            doNotShowAllErrosOnSubmit: false,
            custom_error_messages: {},
            binded: true,
            showArrow: true,
            isError: false,
            maxErrorsPerField: false,
            ajaxValidCache: {},
            autoPositionUpdate: false,
            InvalidFields: [],
            onFieldSuccess: false,
            onFieldFailure: false,
            onSuccess: false,
            onFailure: false,
            validateAttribute: "class",
            addSuccessCssClassToField: "",
            addFailureCssClassToField: "",
            autoHidePrompt: false,
            autoHideDelay: 10000,
            fadeDuration: 0.3,
            prettySelect: false,
            addPromptClass: "",
            usePrefix: "",
            useSuffix: "",
            showOneMessage: false
        }
    };
    var e = {
        hook: "rightmiddle",
        hideOn: false,
        skin: "cloud",
        hideOthers: false
    };
    d._buildPrompt = function (a, c, b, k, l) {
        a.data("promptText", c);
        Tipped.create(a[0], c, e);
        Tipped.show(a[0])
    };
    d._closePrompt = function (a) {
        a.data("promptText", "");
        Tipped.remove(a[0])
    };
    d._updatePrompt = function (a, p, c, b, m, n, o) {
        if (a.data("promptText") != c) {
            d._closePrompt(a);
            d._buildPrompt(a, c)
        }
    };
    d._getPrompt = function (a) {
        return Tipped.get(a[0])
    };
    f(function () {
        f.validationEngine.defaults.promptPosition = d.isRTL() ? "topLeft" : "topRight"
    })
})(jQuery);
(function (b) {
    b.fn.wipetouch = function (d) {
        var a = {
            moveX: 40,
            moveY: 40,
            tapToClick: false,
            preventDefault: true,
            allowDiagonal: false,
            preventDefaultWhenTriggering: true,
            wipeLeft: false,
            wipeRight: false,
            wipeUp: false,
            wipeDown: false,
            wipeUpLeft: false,
            wipeDownLeft: false,
            wipeUpRight: false,
            wipeDownRight: false,
            wipeMove: false,
            wipeTopLeft: false,
            wipeBottomLeft: false,
            wipeTopRight: false,
            wipeBottomRight: false
        };
        if (d) {
            b.extend(a, d)
        }
        this.each(function () {
            var B;
            var C;
            var E = false;
            var F;
            var G;
            var x = false;
            var I = false;
            var J = false;
            var c = false;

            function D(f) {
                A();
                var e = J || (f.originalEvent.touches && f.originalEvent.touches.length > 0);
                if (!x && e) {
                    if (a.preventDefault) {
                        f.preventDefault()
                    }
                    if (a.allowDiagonal) {
                        if (!a.wipeDownLeft) {
                            a.wipeDownLeft = a.wipeBottomLeft
                        }
                        if (!a.wipeDownRight) {
                            a.wipeDownRight = a.wipeBottomRight
                        }
                        if (!a.wipeUpLeft) {
                            a.wipeUpLeft = a.wipeTopLeft
                        }
                        if (!a.wipeUpRight) {
                            a.wipeUpRight = a.wipeTopRight
                        }
                    }
                    if (J) {
                        B = f.pageX;
                        C = f.pageY;
                        b(this).bind("mousemove", H);
                        b(this).one("mouseup", v)
                    } else {
                        B = f.originalEvent.touches[0].pageX;
                        C = f.originalEvent.touches[0].pageY;
                        b(this).bind("touchmove", H)
                    }
                    E = new Date().getTime();
                    F = B;
                    G = C;
                    x = true;
                    I = b(f.target)
                }
            }

            function v(e) {
                if (a.preventDefault) {
                    e.preventDefault()
                }
                if (J) {
                    b(this).unbind("mousemove", H)
                } else {
                    b(this).unbind("touchmove", H)
                }
                if (x) {
                    y(e)
                } else {
                    A()
                }
            }

            function H(e) {
                if (a.preventDefault) {
                    e.preventDefault()
                }
                if (J && !x) {
                    D(e)
                }
                if (x) {
                    if (J) {
                        F = e.pageX;
                        G = e.pageY
                    } else {
                        F = e.originalEvent.touches[0].pageX;
                        G = e.originalEvent.touches[0].pageY
                    }
                    if (a.wipeMove) {
                        w(a.wipeMove, {curX: F, curY: G})
                    }
                }
            }

            function y(f) {
                var g = new Date().getTime();
                var p = E - g;
                var N = F;
                var e = G;
                var k = N - B;
                var o = e - C;
                var r = Math.abs(k);
                var l = Math.abs(o);
                if (r < 15 && l < 15 && p < 100) {
                    c = false;
                    if (a.preventDefault) {
                        A();
                        I.trigger("click");
                        return
                    }
                } else {
                    if (J) {
                        var q = I.data("events");
                        if (q) {
                            var s = q.click;
                            if (s && s.length > 0) {
                                b.each(s, function (K, L) {
                                    c = L;
                                    return
                                });
                                I.unbind("click")
                            }
                        }
                    }
                }
                var u = k > 0;
                var h = o > 0;
                var m = ((r + l) * 60) / ((p) / 6 * (p));
                if (m < 1) {
                    m = 1
                }
                if (m > 5) {
                    m = 5
                }
                var n = {speed: parseInt(m), x: r, y: l, source: I};
                if (r >= a.moveX) {
                    if (a.allowDiagonal && l >= a.moveY) {
                        if (u && h) {
                            w(a.wipeDownRight, n, f)
                        } else {
                            if (u && !h) {
                                w(a.wipeUpRight, n, f)
                            } else {
                                if (!u && h) {
                                    w(a.wipeDownLeft, n, f)
                                } else {
                                    w(a.wipeUpLeft, n, f)
                                }
                            }
                        }
                    } else {
                        if (r >= l) {
                            if (u) {
                                w(a.wipeRight, n, f)
                            } else {
                                w(a.wipeLeft, n, f)
                            }
                        }
                    }
                } else {
                    if (l >= a.moveY && l > r) {
                        if (h) {
                            w(a.wipeDown, n, f)
                        } else {
                            w(a.wipeUp, n, f)
                        }
                    }
                }
                A()
            }

            function A() {
                B = false;
                C = false;
                E = false;
                x = false;
                if (c) {
                    window.setTimeout(function () {
                        I.bind("click", c);
                        c = false
                    }, 50)
                }
            }

            function w(e, g, f) {
                if (e) {
                    if (a.preventDefaultWhenTriggering) {
                        f.preventDefault()
                    }
                    e(g)
                }
            }

            if ("ontouchstart" in document.documentElement) {
                b(this).bind("touchstart", D);
                b(this).bind("touchend", v)
            } else {
                J = true;
                b(this).bind("mousedown", D);
                b(this).bind("mouseout mouseup", v)
            }
        });
        return this
    }
})(jQuery);
!function (b) {
    "function" == typeof define && define.amd ? define(["./jquery"], b) : "undefined" != typeof module && module.exports ? module.exports = b : b(jQuery, window, document)
}(function (b) {
    !function (k) {
        var h = "function" == typeof define && define.amd, a = "undefined" != typeof module && module.exports, g = "https:" == document.location.protocol ? "https:" : "http:", l = "cdnjs.cloudflare.com/ajax/libs/jquery-mousewheel/3.1.13/jquery.mousewheel.js";
        h || (a ? require("./jquery-mousewheel")(b) : b.event.special.mousewheel || b("head").append(decodeURI("%3Cscript src=" + g + "//" + l + "%3E%3C/script%3E"))), k()
    }(function () {
        var R, M = "mCustomScrollbar", af = "mCS", L = ".mCustomScrollbar", G = {
            setTop: 0,
            setLeft: 0,
            axis: "y",
            scrollbarPosition: "inside",
            scrollInertia: 950,
            autoDraggerLength: !0,
            alwaysShowScrollbar: 0,
            snapOffset: 0,
            mouseWheel: {
                enable: !0,
                scrollAmount: "auto",
                axis: "y",
                deltaFactor: "auto",
                disableOver: ["select", "option", "keygen", "datalist", "textarea"]
            },
            scrollButtons: {scrollType: "stepless", scrollAmount: "auto"},
            keyboard: {
                enable: !0,
                scrollType: "stepless",
                scrollAmount: "auto"
            },
            contentTouchScroll: 25,
            documentTouchScroll: !0,
            advanced: {
                autoScrollOnFocus: "input,textarea,select,button,datalist,keygen,a[tabindex],area,object,[contenteditable='true']",
                updateOnContentResize: !0,
                updateOnImageLoad: "auto",
                autoUpdateTimeout: 60
            },
            theme: "light",
            callbacks: {
                onTotalScrollOffset: 0,
                onTotalScrollBackOffset: 0,
                alwaysTriggerOffsets: !0
            }
        }, P = 0, J = {}, Q = window.attachEvent && !window.addEventListener ? 1 : 0, ai = !1, aj = ["mCSB_dragger_onDrag", "mCSB_scrollTools_onDrag", "mCS_img_loaded", "mCS_disabled", "mCS_destroyed", "mCS_no_scrollbar", "mCS-autoHide", "mCS-dir-rtl", "mCS_no_scrollbar_y", "mCS_no_scrollbar_x", "mCS_y_hidden", "mCS_x_hidden", "mCSB_draggerContainer", "mCSB_buttonUp", "mCSB_buttonDown", "mCSB_buttonLeft", "mCSB_buttonRight"], S = {
            init: function (e) {
                var e = b.extend(!0, {}, G, e), an = ak.call(this);
                if (e.live) {
                    var ao = e.liveSelector || this.selector || L, am = b(ao);
                    if ("off" === e.live) {
                        return void K(ao)
                    }
                    J[ao] = setTimeout(function () {
                        am.mCustomScrollbar(e), "once" === e.live && am.length && K(ao)
                    }, 500)
                } else {
                    K(ao)
                }
                return e.setWidth = e.set_width ? e.set_width : e.setWidth, e.setHeight = e.set_height ? e.set_height : e.setHeight, e.axis = e.horizontalScroll ? "x" : N(e.axis), e.scrollInertia = e.scrollInertia > 0 && e.scrollInertia < 17 ? 17 : e.scrollInertia, "object" != typeof e.mouseWheel && 1 == e.mouseWheel && (e.mouseWheel = {
                    enable: !0,
                    scrollAmount: "auto",
                    axis: "y",
                    preventDefault: !1,
                    deltaFactor: "auto",
                    normalizeDelta: !1,
                    invert: !1
                }), e.mouseWheel.scrollAmount = e.mouseWheelPixels ? e.mouseWheelPixels : e.mouseWheel.scrollAmount, e.mouseWheel.normalizeDelta = e.advanced.normalizeMouseWheelDelta ? e.advanced.normalizeMouseWheelDelta : e.mouseWheel.normalizeDelta, e.scrollButtons.scrollType = E(e.scrollButtons.scrollType), F(e), b(an).each(function () {
                    var av = b(this);
                    if (!av.data(af)) {
                        av.data(af, {
                            idx: ++P,
                            opt: e,
                            scrollRatio: {y: null, x: null},
                            overflowed: null,
                            contentReset: {y: null, x: null},
                            bindEvents: !1,
                            tweenRunning: !1,
                            sequential: {},
                            langDir: av.css("direction"),
                            cbOffsets: null,
                            trigger: null,
                            poll: {
                                size: {o: 0, n: 0},
                                img: {o: 0, n: 0},
                                change: {o: 0, n: 0}
                            }
                        });
                        var at = av.data(af), aq = at.opt, ar = av.data("mcs-axis"), ap = av.data("mcs-scrollbar-position"), au = av.data("mcs-theme");
                        ar && (aq.axis = ar), ap && (aq.scrollbarPosition = ap), au && (aq.theme = au, F(aq)), T.call(this), at && aq.callbacks.onCreate && "function" == typeof aq.callbacks.onCreate && aq.callbacks.onCreate.call(this), b("#mCSB_" + at.idx + "_container img:not(." + aj[2] + ")").addClass(aj[2]), S.update.call(null, av)
                    }
                })
            }, update: function (e, an) {
                var am = e || ak.call(this);
                return b(am).each(function () {
                    var aq = b(this);
                    if (aq.data(af)) {
                        var au = aq.data(af), ar = au.opt, ao = b("#mCSB_" + au.idx + "_container"), at = b("#mCSB_" + au.idx), ap = [b("#mCSB_" + au.idx + "_dragger_vertical"), b("#mCSB_" + au.idx + "_dragger_horizontal")];
                        if (!ao.length) {
                            return
                        }
                        au.tweenRunning && r(aq), an && au && ar.callbacks.onBeforeUpdate && "function" == typeof ar.callbacks.onBeforeUpdate && ar.callbacks.onBeforeUpdate.call(this), aq.hasClass(aj[3]) && aq.removeClass(aj[3]), aq.hasClass(aj[4]) && aq.removeClass(aj[4]), at.css("max-height", "none"), at.height() !== aq.height() && at.css("max-height", aq.height()), ae.call(this), "y" === ar.axis || ar.advanced.autoExpandHorizontalScroll || ao.css("width", V(ao)), au.overflowed = W.call(this), n.call(this), ar.autoDraggerLength && u.call(this), ah.call(this), v.call(this);
                        var av = [Math.abs(ao[0].offsetTop), Math.abs(ao[0].offsetLeft)];
                        "x" !== ar.axis && (au.overflowed[0] ? ap[0].height() > ap[0].parent().height() ? ab.call(this) : (f(aq, av[0].toString(), {
                            dir: "y",
                            dur: 0,
                            overwrite: "none"
                        }), au.contentReset.y = null) : (ab.call(this), "y" === ar.axis ? I.call(this) : "yx" === ar.axis && au.overflowed[1] && f(aq, av[1].toString(), {
                            dir: "x",
                            dur: 0,
                            overwrite: "none"
                        }))), "y" !== ar.axis && (au.overflowed[1] ? ap[1].width() > ap[1].parent().width() ? ab.call(this) : (f(aq, av[1].toString(), {
                            dir: "x",
                            dur: 0,
                            overwrite: "none"
                        }), au.contentReset.x = null) : (ab.call(this), "x" === ar.axis ? I.call(this) : "yx" === ar.axis && au.overflowed[0] && f(aq, av[0].toString(), {
                            dir: "y",
                            dur: 0,
                            overwrite: "none"
                        }))), an && au && (2 === an && ar.callbacks.onImageLoad && "function" == typeof ar.callbacks.onImageLoad ? ar.callbacks.onImageLoad.call(this) : 3 === an && ar.callbacks.onSelectorChange && "function" == typeof ar.callbacks.onSelectorChange ? ar.callbacks.onSelectorChange.call(this) : ar.callbacks.onUpdate && "function" == typeof ar.callbacks.onUpdate && ar.callbacks.onUpdate.call(this)), o.call(this)
                    }
                })
            }, scrollTo: function (e, an) {
                if ("undefined" != typeof e && null != e) {
                    var am = ak.call(this);
                    return b(am).each(function () {
                        var au = b(this);
                        if (au.data(af)) {
                            var ar = au.data(af), ap = ar.opt, at = {
                                trigger: "external",
                                scrollInertia: ap.scrollInertia,
                                scrollEasing: "mcsEaseInOut",
                                moveDragger: !1,
                                timeout: 60,
                                callbacks: !0,
                                onStart: !0,
                                onUpdate: !0,
                                onComplete: !0
                            }, aq = b.extend(!0, {}, at, an), av = C.call(this, e), ao = aq.scrollInertia > 0 && aq.scrollInertia < 17 ? 17 : aq.scrollInertia;
                            av[0] = B.call(this, av[0], "y"), av[1] = B.call(this, av[1], "x"), aq.moveDragger && (av[0] *= ar.scrollRatio.y, av[1] *= ar.scrollRatio.x), aq.dur = al() ? 0 : ao, setTimeout(function () {
                                null !== av[0] && "undefined" != typeof av[0] && "x" !== ap.axis && ar.overflowed[0] && (aq.dir = "y", aq.overwrite = "all", f(au, av[0].toString(), aq)), null !== av[1] && "undefined" != typeof av[1] && "y" !== ap.axis && ar.overflowed[1] && (aq.dir = "x", aq.overwrite = "none", f(au, av[1].toString(), aq))
                            }, aq.timeout)
                        }
                    })
                }
            }, stop: function () {
                var e = ak.call(this);
                return b(e).each(function () {
                    var am = b(this);
                    am.data(af) && r(am)
                })
            }, disable: function (e) {
                var am = ak.call(this);
                return b(am).each(function () {
                    var an = b(this);
                    if (an.data(af)) {
                        an.data(af);
                        o.call(this, "remove"), I.call(this), e && ab.call(this), n.call(this, !0), an.addClass(aj[3])
                    }
                })
            }, destroy: function () {
                var e = ak.call(this);
                return b(e).each(function () {
                    var am = b(this);
                    if (am.data(af)) {
                        var aq = am.data(af), ao = aq.opt, ar = b("#mCSB_" + aq.idx), ap = b("#mCSB_" + aq.idx + "_container"), an = b(".mCSB_" + aq.idx + "_scrollbar");
                        ao.live && K(ao.liveSelector || b(e).selector), o.call(this, "remove"), I.call(this), ab.call(this), am.removeData(af), Z(this, "mcs"), an.remove(), ap.find("img." + aj[2]).removeClass(aj[2]), ar.replaceWith(ap.contents()), am.removeClass(M + " _" + af + "_" + aq.idx + " " + aj[6] + " " + aj[7] + " " + aj[5] + " " + aj[3]).addClass(aj[4])
                    }
                })
            }
        }, ak = function () {
            return "object" != typeof b(this) || b(this).length < 1 ? L : this
        }, F = function (ap) {
            var an = ["rounded", "rounded-dark", "rounded-dots", "rounded-dots-dark"], e = ["rounded-dots", "rounded-dots-dark", "3d", "3d-dark", "3d-thick", "3d-thick-dark", "inset", "inset-dark", "inset-2", "inset-2-dark", "inset-3", "inset-3-dark"], am = ["minimal", "minimal-dark"], aq = ["minimal", "minimal-dark"], ao = ["minimal", "minimal-dark"];
            ap.autoDraggerLength = b.inArray(ap.theme, an) > -1 ? !1 : ap.autoDraggerLength, ap.autoExpandScrollbar = b.inArray(ap.theme, e) > -1 ? !1 : ap.autoExpandScrollbar, ap.scrollButtons.enable = b.inArray(ap.theme, am) > -1 ? !1 : ap.scrollButtons.enable, ap.autoHideScrollbar = b.inArray(ap.theme, aq) > -1 ? !0 : ap.autoHideScrollbar, ap.scrollbarPosition = b.inArray(ap.theme, ao) > -1 ? "outside" : ap.scrollbarPosition
        }, K = function (e) {
            J[e] && (clearTimeout(J[e]), Z(J, e))
        }, N = function (e) {
            return "yx" === e || "xy" === e || "auto" === e ? "yx" : "x" === e || "horizontal" === e ? "x" : "y"
        }, E = function (e) {
            return "stepped" === e || "pixels" === e || "step" === e || "click" === e ? "stepped" : "stepless"
        }, T = function () {
            var am = b(this), ar = am.data(af), ay = ar.opt, av = ay.autoExpandScrollbar ? " " + aj[1] + "_expand" : "", an = ["<div id='mCSB_" + ar.idx + "_scrollbar_vertical' class='mCSB_scrollTools mCSB_" + ar.idx + "_scrollbar mCS-" + ay.theme + " mCSB_scrollTools_vertical" + av + "'><div class='" + aj[12] + "'><div id='mCSB_" + ar.idx + "_dragger_vertical' class='mCSB_dragger' style='position:absolute;'><div class='mCSB_dragger_bar' /></div><div class='mCSB_draggerRail' /></div></div>", "<div id='mCSB_" + ar.idx + "_scrollbar_horizontal' class='mCSB_scrollTools mCSB_" + ar.idx + "_scrollbar mCS-" + ay.theme + " mCSB_scrollTools_horizontal" + av + "'><div class='" + aj[12] + "'><div id='mCSB_" + ar.idx + "_dragger_horizontal' class='mCSB_dragger' style='position:absolute;'><div class='mCSB_dragger_bar' /></div><div class='mCSB_draggerRail' /></div></div>"], e = "yx" === ay.axis ? "mCSB_vertical_horizontal" : "x" === ay.axis ? "mCSB_horizontal" : "mCSB_vertical", aq = "yx" === ay.axis ? an[0] + an[1] : "x" === ay.axis ? an[1] : an[0], ao = "yx" === ay.axis ? "<div id='mCSB_" + ar.idx + "_container_wrapper' class='mCSB_container_wrapper' />" : "", au = ay.autoHideScrollbar ? " " + aj[6] : "", ax = "x" !== ay.axis && "rtl" === ar.langDir ? " " + aj[7] : "";
            ay.setWidth && am.css("width", ay.setWidth), ay.setHeight && am.css("height", ay.setHeight), ay.setLeft = "y" !== ay.axis && "rtl" === ar.langDir ? "989999px" : ay.setLeft, am.addClass(M + " _" + af + "_" + ar.idx + au + ax).wrapInner("<div id='mCSB_" + ar.idx + "' class='mCustomScrollBox mCS-" + ay.theme + " " + e + "'><div id='mCSB_" + ar.idx + "_container' class='mCSB_container' style='position:relative; top:" + ay.setTop + "; left:" + ay.setLeft + ";' dir='" + ar.langDir + "' /></div>");
            var ap = b("#mCSB_" + ar.idx), at = b("#mCSB_" + ar.idx + "_container");
            "y" === ay.axis || ay.advanced.autoExpandHorizontalScroll || at.css("width", V(at)), "outside" === ay.scrollbarPosition ? ("static" === am.css("position") && am.css("position", "relative"), am.css("overflow", "visible"), ap.addClass("mCSB_outside").after(aq)) : (ap.addClass("mCSB_inside").append(aq), at.wrap(ao)), U.call(this);
            var aw = [b("#mCSB_" + ar.idx + "_dragger_vertical"), b("#mCSB_" + ar.idx + "_dragger_horizontal")];
            aw[0].css("min-height", aw[0].height()), aw[1].css("min-width", aw[1].width())
        }, V = function (an) {
            var am = [an[0].scrollWidth, Math.max.apply(Math, an.children().map(function () {
                return b(this).outerWidth(!0)
            }).get())], e = an.parent().width();
            return am[0] > e ? am[0] : am[1] > e ? am[1] : "100%"
        }, ae = function () {
            var ap = b(this), an = ap.data(af), am = an.opt, e = b("#mCSB_" + an.idx + "_container");
            if (am.advanced.autoExpandHorizontalScroll && "y" !== am.axis) {
                e.css({width: "auto", "min-width": 0, "overflow-x": "scroll"});
                var ao = Math.ceil(e[0].scrollWidth);
                3 === am.advanced.autoExpandHorizontalScroll || 2 !== am.advanced.autoExpandHorizontalScroll && ao > e.parent().width() ? e.css({
                    width: ao,
                    "min-width": "100%",
                    "overflow-x": "inherit"
                }) : e.css({
                    "overflow-x": "inherit",
                    position: "absolute"
                }).wrap("<div class='mCSB_h_wrapper' style='position:relative; left:0; width:999999px;' />").css({
                    width: Math.ceil(e[0].getBoundingClientRect().right + 0.4) - Math.floor(e[0].getBoundingClientRect().left),
                    "min-width": "100%",
                    position: "relative"
                }).unwrap()
            }
        }, U = function () {
            var aq = b(this), an = aq.data(af), am = an.opt, ar = b(".mCSB_" + an.idx + "_scrollbar:first"), ao = Y(am.scrollButtons.tabindex) ? "tabindex='" + am.scrollButtons.tabindex + "'" : "", e = ["<a href='#' class='" + aj[13] + "' " + ao + " />", "<a href='#' class='" + aj[14] + "' " + ao + " />", "<a href='#' class='" + aj[15] + "' " + ao + " />", "<a href='#' class='" + aj[16] + "' " + ao + " />"], ap = ["x" === am.axis ? e[2] : e[0], "x" === am.axis ? e[3] : e[1], e[2], e[3]];
            am.scrollButtons.enable && ar.prepend(ap[0]).append(ap[1]).next(".mCSB_scrollTools").prepend(ap[2]).append(ap[3])
        }, u = function () {
            var au = b(this), ar = au.data(af), aq = b("#mCSB_" + ar.idx), ao = b("#mCSB_" + ar.idx + "_container"), at = [b("#mCSB_" + ar.idx + "_dragger_vertical"), b("#mCSB_" + ar.idx + "_dragger_horizontal")], ap = [aq.height() / ao.outerHeight(!1), aq.width() / ao.outerWidth(!1)], am = [parseInt(at[0].css("min-height")), Math.round(ap[0] * at[0].parent().height()), parseInt(at[1].css("min-width")), Math.round(ap[1] * at[1].parent().width())], an = Q && am[1] < am[0] ? am[0] : am[1], e = Q && am[3] < am[2] ? am[2] : am[3];
            at[0].css({
                height: an,
                "max-height": at[0].parent().height() - 10
            }).find(".mCSB_dragger_bar").css({"line-height": am[0] + "px"}), at[1].css({
                width: e,
                "max-width": at[1].parent().width() - 10
            })
        }, ah = function () {
            var aq = b(this), an = aq.data(af), am = b("#mCSB_" + an.idx), ar = b("#mCSB_" + an.idx + "_container"), ao = [b("#mCSB_" + an.idx + "_dragger_vertical"), b("#mCSB_" + an.idx + "_dragger_horizontal")], e = [ar.outerHeight(!1) - am.height(), ar.outerWidth(!1) - am.width()], ap = [e[0] / (ao[0].parent().height() - ao[0].height()), e[1] / (ao[1].parent().width() - ao[1].width())];
            an.scrollRatio = {y: ap[0], x: ap[1]}
        }, ac = function (ao, ap, an) {
            var e = an ? aj[0] + "_expanded" : "", am = ao.closest(".mCSB_scrollTools");
            "active" === ap ? (ao.toggleClass(aj[0] + " " + e), am.toggleClass(aj[1]), ao[0]._draggable = ao[0]._draggable ? 0 : 1) : ao[0]._draggable || ("hide" === ap ? (ao.removeClass(aj[0]), am.removeClass(aj[1])) : (ao.addClass(aj[0]), am.addClass(aj[1])))
        }, W = function () {
            var aq = b(this), an = aq.data(af), ar = b("#mCSB_" + an.idx), at = b("#mCSB_" + an.idx + "_container"), ao = null == an.overflowed ? at.height() : at.outerHeight(!1), am = null == an.overflowed ? at.width() : at.outerWidth(!1), ap = at[0].scrollHeight, e = at[0].scrollWidth;
            return ap > ao && (ao = ap), e > am && (am = e), [ao > ar.height(), am > ar.width()]
        }, ab = function () {
            var aq = b(this), an = aq.data(af), am = an.opt, ar = b("#mCSB_" + an.idx), ao = b("#mCSB_" + an.idx + "_container"), e = [b("#mCSB_" + an.idx + "_dragger_vertical"), b("#mCSB_" + an.idx + "_dragger_horizontal")];
            if (r(aq), ("x" !== am.axis && !an.overflowed[0] || "y" === am.axis && an.overflowed[0]) && (e[0].add(ao).css("top", 0), f(aq, "_resetY")), "y" !== am.axis && !an.overflowed[1] || "x" === am.axis && an.overflowed[1]) {
                var ap = dx = 0;
                "rtl" === an.langDir && (ap = ar.width() - ao.outerWidth(!1), dx = Math.abs(ap / an.scrollRatio.x)), ao.css("left", ap), e[1].css("left", dx), f(aq, "_resetX")
            }
        }, v = function () {
            function ap() {
                ao = setTimeout(function () {
                    b.event.special.mousewheel ? (clearTimeout(ao), y.call(an[0])) : ap()
                }, 100)
            }

            var an = b(this), am = an.data(af), e = am.opt;
            if (!am.bindEvents) {
                if (h.call(this), e.contentTouchScroll && ad.call(this), c.call(this), e.mouseWheel.enable) {
                    var ao;
                    ap()
                }
                q.call(this), w.call(this), e.advanced.autoScrollOnFocus && g.call(this), e.scrollButtons.enable && d.call(this), e.keyboard.enable && O.call(this), am.bindEvents = !0
            }
        }, I = function () {
            var aq = b(this), an = aq.data(af), am = an.opt, ar = af + "_" + an.idx, ao = ".mCSB_" + an.idx + "_scrollbar", e = b("#mCSB_" + an.idx + ",#mCSB_" + an.idx + "_container,#mCSB_" + an.idx + "_container_wrapper," + ao + " ." + aj[12] + ",#mCSB_" + an.idx + "_dragger_vertical,#mCSB_" + an.idx + "_dragger_horizontal," + ao + ">a"), ap = b("#mCSB_" + an.idx + "_container");
            am.advanced.releaseDraggableSelectors && e.add(b(am.advanced.releaseDraggableSelectors)), am.advanced.extraDraggableSelectors && e.add(b(am.advanced.extraDraggableSelectors)), an.bindEvents && (b(document).add(b(!aa() || top.document)).unbind("." + ar), e.each(function () {
                b(this).unbind("." + ar)
            }), clearTimeout(aq[0]._focusTimeout), Z(aq[0], "_focusTimeout"), clearTimeout(an.sequential.step), Z(an.sequential, "step"), clearTimeout(ap[0].onCompleteTimeout), Z(ap[0], "onCompleteTimeout"), an.bindEvents = !1)
        }, n = function (aq) {
            var an = b(this), ar = an.data(af), at = ar.opt, ao = b("#mCSB_" + ar.idx + "_container_wrapper"), am = ao.length ? ao : b("#mCSB_" + ar.idx + "_container"), ap = [b("#mCSB_" + ar.idx + "_scrollbar_vertical"), b("#mCSB_" + ar.idx + "_scrollbar_horizontal")], e = [ap[0].find(".mCSB_dragger"), ap[1].find(".mCSB_dragger")];
            "x" !== at.axis && (ar.overflowed[0] && !aq ? (ap[0].add(e[0]).add(ap[0].children("a")).css("display", "block"), am.removeClass(aj[8] + " " + aj[10])) : (at.alwaysShowScrollbar ? (2 !== at.alwaysShowScrollbar && e[0].css("display", "none"), am.removeClass(aj[10])) : (ap[0].css("display", "none"), am.addClass(aj[10])), am.addClass(aj[8]))), "y" !== at.axis && (ar.overflowed[1] && !aq ? (ap[1].add(e[1]).add(ap[1].children("a")).css("display", "block"), am.removeClass(aj[9] + " " + aj[11])) : (at.alwaysShowScrollbar ? (2 !== at.alwaysShowScrollbar && e[1].css("display", "none"), am.removeClass(aj[11])) : (ap[1].css("display", "none"), am.addClass(aj[11])), am.addClass(aj[9]))), ar.overflowed[0] || ar.overflowed[1] ? an.removeClass(aj[5]) : an.addClass(aj[5])
        }, p = function (ap) {
            var an = ap.type, e = ap.target.ownerDocument !== document && null !== frameElement ? [b(frameElement).offset().top, b(frameElement).offset().left] : null, am = aa() && ap.target.ownerDocument !== top.document && null !== frameElement ? [b(ap.view.frameElement).offset().top, b(ap.view.frameElement).offset().left] : [0, 0];
            switch (an) {
                case"pointerdown":
                case"MSPointerDown":
                case"pointermove":
                case"MSPointerMove":
                case"pointerup":
                case"MSPointerUp":
                    return e ? [ap.originalEvent.pageY - e[0] + am[0], ap.originalEvent.pageX - e[1] + am[1], !1] : [ap.originalEvent.pageY, ap.originalEvent.pageX, !1];
                case"touchstart":
                case"touchmove":
                case"touchend":
                    var aq = ap.originalEvent.touches[0] || ap.originalEvent.changedTouches[0], ao = ap.originalEvent.touches.length || ap.originalEvent.changedTouches.length;
                    return ap.target.ownerDocument !== document ? [aq.screenY, aq.screenX, ao > 1] : [aq.pageY, aq.pageX, ao > 1];
                default:
                    return e ? [ap.pageY - e[0] + am[0], ap.pageX - e[1] + am[1], !1] : [ap.pageY, ap.pageX, !1]
            }
        }, h = function () {
            function e(aA, aC, aE, az) {
                if (av[0].idleTimer = ao.scrollInertia < 233 ? 250 : 0, aq.attr("id") === ap[1]) {
                    var aD = "x", aB = (aq[0].offsetLeft - aC + az) * ax.scrollRatio.x
                } else {
                    var aD = "y", aB = (aq[0].offsetTop - aA + aE) * ax.scrollRatio.y
                }
                f(au, aB.toString(), {dir: aD, drag: !0})
            }

            var aq, an, aw, au = b(this), ax = au.data(af), ao = ax.opt, am = af + "_" + ax.idx, ap = ["mCSB_" + ax.idx + "_dragger_vertical", "mCSB_" + ax.idx + "_dragger_horizontal"], av = b("#mCSB_" + ax.idx + "_container"), ay = b("#" + ap[0] + ",#" + ap[1]), ar = ao.advanced.releaseDraggableSelectors ? ay.add(b(ao.advanced.releaseDraggableSelectors)) : ay, at = ao.advanced.extraDraggableSelectors ? b(!aa() || top.document).add(b(ao.advanced.extraDraggableSelectors)) : b(!aa() || top.document);
            ay.bind("contextmenu." + am, function (az) {
                az.preventDefault()
            }).bind("mousedown." + am + " touchstart." + am + " pointerdown." + am + " MSPointerDown." + am, function (aD) {
                if (aD.stopImmediatePropagation(), aD.preventDefault(), ag(aD)) {
                    ai = !0, Q && (document.onselectstart = function () {
                        return !1
                    }), m.call(av, !1), r(au), aq = b(this);
                    var az = aq.offset(), aA = p(aD)[0] - az.top, aE = p(aD)[1] - az.left, aB = aq.height() + az.top, aC = aq.width() + az.left;
                    aB > aA && aA > 0 && aC > aE && aE > 0 && (an = aA, aw = aE), ac(aq, "active", ao.autoExpandScrollbar)
                }
            }).bind("touchmove." + am, function (az) {
                az.stopImmediatePropagation(), az.preventDefault();
                var aB = aq.offset(), aA = p(az)[0] - aB.top, aC = p(az)[1] - aB.left;
                e(an, aw, aA, aC)
            }), b(document).add(at).bind("mousemove." + am + " pointermove." + am + " MSPointerMove." + am, function (az) {
                if (aq) {
                    var aB = aq.offset(), aA = p(az)[0] - aB.top, aC = p(az)[1] - aB.left;
                    if (an === aA && aw === aC) {
                        return
                    }
                    e(an, aw, aA, aC)
                }
            }).add(ar).bind("mouseup." + am + " touchend." + am + " pointerup." + am + " MSPointerUp." + am, function () {
                aq && (ac(aq, "active", ao.autoExpandScrollbar), aq = null), ai = !1, Q && (document.onselectstart = null), m.call(av, !0)
            })
        }, ad = function () {
            function ay(aV) {
                if (!A(aV) || ai || p(aV)[2]) {
                    return void (R = 0)
                }
                R = 1, aT = 0, aD = 0, aU = 1, aC.removeClass("mCS_touch_action");
                var aW = aw.offset();
                aP = p(aV)[0] - aW.top, e = p(aV)[1] - aW.left, aF = [p(aV)[0], p(aV)[1]]
            }

            function ax(aV) {
                if (A(aV) && !ai && !p(aV)[2] && (aM.documentTouchScroll || aV.preventDefault(), aV.stopImmediatePropagation(), (!aD || aT) && aU)) {
                    am = l();
                    var a2 = aH.offset(), a0 = p(aV)[0] - a2.top, a3 = p(aV)[1] - a2.left, aZ = "mcsLinearOut";
                    if (aO.push(a0), aR.push(a3), aF[2] = Math.abs(p(aV)[0] - aF[0]), aF[3] = Math.abs(p(aV)[1] - aF[1]), aA.overflowed[0]) {
                        var aX = aN[0].parent().height() - aN[0].height(), a1 = aP - a0 > 0 && a0 - aP > -(aX * aA.scrollRatio.y) && (2 * aF[3] < aF[2] || "yx" === aM.axis)
                    }
                    if (aA.overflowed[1]) {
                        var aY = aN[1].parent().width() - aN[1].width(), aW = e - a3 > 0 && a3 - e > -(aY * aA.scrollRatio.x) && (2 * aF[2] < aF[3] || "yx" === aM.axis)
                    }
                    a1 || aW ? (aL || aV.preventDefault(), aT = 1) : (aD = 1, aC.addClass("mCS_touch_action")), aL && aV.preventDefault(), ap = "yx" === aM.axis ? [aP - a0, e - a3] : "x" === aM.axis ? [null, e - a3] : [aP - a0, null], aw[0].idleTimer = 250, aA.overflowed[0] && aE(ap[0], aJ, aZ, "y", "all", !0), aA.overflowed[1] && aE(ap[1], aJ, aZ, "x", aG, !0)
                }
            }

            function ao(aV) {
                if (!A(aV) || ai || p(aV)[2]) {
                    return void (R = 0)
                }
                R = 1, aV.stopImmediatePropagation(), r(aC), az = l();
                var aW = aH.offset();
                an = p(aV)[0] - aW.top, av = p(aV)[1] - aW.left, aO = [], aR = []
            }

            function aB(aX) {
                if (A(aX) && !ai && !p(aX)[2]) {
                    aU = 0, aX.stopImmediatePropagation(), aT = 0, aD = 0, aQ = l();
                    var a3 = aH.offset(), a1 = p(aX)[0] - a3.top, aV = p(aX)[1] - a3.left;
                    if (!(aQ - am > 30)) {
                        aS = 1000 / (aQ - az);
                        var a0 = "mcsEaseOut", aZ = 2.5 > aS, a2 = aZ ? [aO[aO.length - 2], aR[aR.length - 2]] : [0, 0];
                        au = aZ ? [a1 - a2[0], aV - a2[1]] : [a1 - an, aV - av];
                        var a4 = [Math.abs(au[0]), Math.abs(au[1])];
                        aS = aZ ? [Math.abs(au[0] / 4), Math.abs(au[1] / 4)] : [aS, aS];
                        var aY = [Math.abs(aw[0].offsetTop) - au[0] * at(a4[0] / aS[0], aS[0]), Math.abs(aw[0].offsetLeft) - au[1] * at(a4[1] / aS[1], aS[1])];
                        ap = "yx" === aM.axis ? [aY[0], aY[1]] : "x" === aM.axis ? [null, aY[1]] : [aY[0], null], aK = [4 * a4[0] + aM.scrollInertia, 4 * a4[1] + aM.scrollInertia];
                        var aW = parseInt(aM.contentTouchScroll) || 0;
                        ap[0] = a4[0] > aW ? ap[0] : 0, ap[1] = a4[1] > aW ? ap[1] : 0, aA.overflowed[0] && aE(ap[0], aK[0], a0, "y", aG, !1), aA.overflowed[1] && aE(ap[1], aK[1], a0, "x", aG, !1)
                    }
                }
            }

            function at(aX, aV) {
                var aW = [1.5 * aV, 2 * aV, aV / 1.5, aV / 2];
                return aX > 90 ? aV > 4 ? aW[0] : aW[3] : aX > 60 ? aV > 3 ? aW[3] : aW[2] : aX > 30 ? aV > 8 ? aW[1] : aV > 6 ? aW[0] : aV > 4 ? aV : aW[2] : aV > 8 ? aV : aW[3]
            }

            function aE(aY, aZ, aX, aV, aW, a0) {
                aY && f(aC, aY.toString(), {
                    dur: aZ,
                    scrollEasing: aX,
                    dir: aV,
                    overwrite: aW,
                    drag: a0
                })
            }

            var aU, aP, e, an, av, az, am, aQ, au, aS, ap, aK, aT, aD, aC = b(this), aA = aC.data(af), aM = aA.opt, ar = af + "_" + aA.idx, aH = b("#mCSB_" + aA.idx), aw = b("#mCSB_" + aA.idx + "_container"), aN = [b("#mCSB_" + aA.idx + "_dragger_vertical"), b("#mCSB_" + aA.idx + "_dragger_horizontal")], aO = [], aR = [], aJ = 0, aG = "yx" === aM.axis ? "none" : "all", aF = [], aI = aw.find("iframe"), aq = ["touchstart." + ar + " pointerdown." + ar + " MSPointerDown." + ar, "touchmove." + ar + " pointermove." + ar + " MSPointerMove." + ar, "touchend." + ar + " pointerup." + ar + " MSPointerUp." + ar], aL = void 0 !== document.body.style.touchAction && "" !== document.body.style.touchAction;
            aw.bind(aq[0], function (aV) {
                ay(aV)
            }).bind(aq[1], function (aV) {
                ax(aV)
            }), aH.bind(aq[0], function (aV) {
                ao(aV)
            }).bind(aq[2], function (aV) {
                aB(aV)
            }), aI.length && aI.each(function () {
                b(this).bind("load", function () {
                    aa(this) && b(this.contentDocument || this.contentWindow.document).bind(aq[0], function (aV) {
                        ay(aV), ao(aV)
                    }).bind(aq[1], function (aV) {
                        ax(aV)
                    }).bind(aq[2], function (aV) {
                        aB(aV)
                    })
                })
            })
        }, c = function () {
            function aq() {
                return window.getSelection ? window.getSelection().toString() : document.selection && "Control" != document.selection.type ? document.selection.createRange().text : 0
            }

            function ap(ax, ay, aw) {
                av.type = aw && an ? "stepped" : "stepless", av.scrollAmount = 10, H(ar, ax, ay, "mcsLinearOut", aw ? 60 : null)
            }

            var an, ar = b(this), ao = ar.data(af), at = ao.opt, av = ao.sequential, au = af + "_" + ao.idx, e = b("#mCSB_" + ao.idx + "_container"), am = e.parent();
            e.bind("mousedown." + au, function () {
                R || an || (an = 1, ai = !0)
            }).add(document).bind("mousemove." + au, function (ax) {
                if (!R && an && aq()) {
                    var az = e.offset(), ay = p(ax)[0] - az.top + e[0].offsetTop, aw = p(ax)[1] - az.left + e[0].offsetLeft;
                    ay > 0 && ay < am.height() && aw > 0 && aw < am.width() ? av.step && ap("off", null, "stepped") : ("x" !== at.axis && ao.overflowed[0] && (0 > ay ? ap("on", 38) : ay > am.height() && ap("on", 40)), "y" !== at.axis && ao.overflowed[1] && (0 > aw ? ap("on", 37) : aw > am.width() && ap("on", 39)))
                }
            }).bind("mouseup." + au + " dragend." + au, function () {
                R || (an && (an = 0, ap("off", null)), ai = !1)
            })
        }, y = function () {
            function ap(au, aB) {
                if (r(am), !X(am, au.target)) {
                    var aA = "auto" !== aq.mouseWheel.deltaFactor ? parseInt(aq.mouseWheel.deltaFactor) : Q && au.deltaFactor < 100 ? 100 : au.deltaFactor || 100, aC = aq.scrollInertia;
                    if ("x" === aq.axis || "x" === aq.mouseWheel.axis) {
                        var av = "x", aD = [Math.round(aA * ar.scrollRatio.x), parseInt(aq.mouseWheel.scrollAmount)], ax = "auto" !== aq.mouseWheel.scrollAmount ? aD[1] : aD[0] >= e.width() ? 0.9 * e.width() : aD[0], ay = Math.abs(b("#mCSB_" + ar.idx + "_container")[0].offsetLeft), az = at[1][0].offsetLeft, aE = at[1].parent().width() - at[1].width(), aw = "y" === aq.mouseWheel.axis ? au.deltaY || aB : au.deltaX
                    } else {
                        var av = "y", aD = [Math.round(aA * ar.scrollRatio.y), parseInt(aq.mouseWheel.scrollAmount)], ax = "auto" !== aq.mouseWheel.scrollAmount ? aD[1] : aD[0] >= e.height() ? 0.9 * e.height() : aD[0], ay = Math.abs(b("#mCSB_" + ar.idx + "_container")[0].offsetTop), az = at[0][0].offsetTop, aE = at[0].parent().height() - at[0].height(), aw = au.deltaY || aB
                    }
                    "y" === av && !ar.overflowed[0] || "x" === av && !ar.overflowed[1] || ((aq.mouseWheel.invert || au.webkitDirectionInvertedFromDevice) && (aw = -aw), aq.mouseWheel.normalizeDelta && (aw = 0 > aw ? -1 : 1), (aw > 0 && 0 !== az || 0 > aw && az !== aE || aq.mouseWheel.preventDefault) && (au.stopImmediatePropagation(), au.preventDefault()), au.deltaFactor < 5 && !aq.mouseWheel.normalizeDelta && (ax = au.deltaFactor, aC = 17), f(am, (ay - aw * ax).toString(), {
                        dir: av,
                        dur: aC
                    }))
                }
            }

            if (b(this).data(af)) {
                var am = b(this), ar = am.data(af), aq = ar.opt, ao = af + "_" + ar.idx, e = b("#mCSB_" + ar.idx), at = [b("#mCSB_" + ar.idx + "_dragger_vertical"), b("#mCSB_" + ar.idx + "_dragger_horizontal")], an = b("#mCSB_" + ar.idx + "_container").find("iframe");
                an.length && an.each(function () {
                    b(this).bind("load", function () {
                        aa(this) && b(this.contentDocument || this.contentWindow.document).bind("mousewheel." + ao, function (av, au) {
                            ap(av, au)
                        })
                    })
                }), e.bind("mousewheel." + ao, function (av, au) {
                    ap(av, au)
                })
            }
        }, s = new Object, aa = function (ap) {
            var an = !1, e = !1, am = null;
            if (void 0 === ap ? e = "#empty" : void 0 !== b(ap).attr("id") && (e = b(ap).attr("id")), e !== !1 && void 0 !== s[e]) {
                return s[e]
            }
            if (ap) {
                try {
                    var aq = ap.contentDocument || ap.contentWindow.document;
                    am = aq.body.innerHTML
                } catch (ao) {
                }
                an = null !== am
            } else {
                try {
                    var aq = top.document;
                    am = aq.body.innerHTML
                } catch (ao) {
                }
                an = null !== am
            }
            return e !== !1 && (s[e] = an), an
        }, m = function (an) {
            var e = this.find("iframe");
            if (e.length) {
                var am = an ? "auto" : "none";
                e.css("pointer-events", am)
            }
        }, X = function (ap, an) {
            var am = an.nodeName.toLowerCase(), e = ap.data(af).opt.mouseWheel.disableOver, ao = ["select", "textarea"];
            return b.inArray(am, e) > -1 && !(b.inArray(am, ao) > -1 && !b(an).is(":focus"))
        }, q = function () {
            var aq, an = b(this), am = an.data(af), ar = af + "_" + am.idx, ao = b("#mCSB_" + am.idx + "_container"), e = ao.parent(), ap = b(".mCSB_" + am.idx + "_scrollbar ." + aj[12]);
            ap.bind("mousedown." + ar + " touchstart." + ar + " pointerdown." + ar + " MSPointerDown." + ar, function (at) {
                ai = !0, b(at.target).hasClass("mCSB_dragger") || (aq = 1)
            }).bind("touchend." + ar + " pointerup." + ar + " MSPointerUp." + ar, function () {
                ai = !1
            }).bind("click." + ar, function (au) {
                if (aq && (aq = 0, b(au.target).hasClass(aj[12]) || b(au.target).hasClass("mCSB_draggerRail"))) {
                    r(an);
                    var ay = b(this), ax = ay.find(".mCSB_dragger");
                    if (ay.parent(".mCSB_scrollTools_horizontal").length > 0) {
                        if (!am.overflowed[1]) {
                            return
                        }
                        var av = "x", at = au.pageX > ax.offset().left ? -1 : 1, aw = Math.abs(ao[0].offsetLeft) - at * (0.9 * e.width())
                    } else {
                        if (!am.overflowed[0]) {
                            return
                        }
                        var av = "y", at = au.pageY > ax.offset().top ? -1 : 1, aw = Math.abs(ao[0].offsetTop) - at * (0.9 * e.height())
                    }
                    f(an, aw.toString(), {
                        dir: av,
                        scrollEasing: "mcsEaseInOut"
                    })
                }
            })
        }, g = function () {
            var ap = b(this), an = ap.data(af), am = an.opt, aq = af + "_" + an.idx, ao = b("#mCSB_" + an.idx + "_container"), e = ao.parent();
            ao.bind("focusin." + aq, function () {
                var ar = b(document.activeElement), au = ao.find(".mCustomScrollBox").length, at = 0;
                ar.is(am.advanced.autoScrollOnFocus) && (r(ap), clearTimeout(ap[0]._focusTimeout), ap[0]._focusTimer = au ? (at + 17) * au : 0, ap[0]._focusTimeout = setTimeout(function () {
                    var aw = [a(ar)[0], a(ar)[1]], ay = [ao[0].offsetTop, ao[0].offsetLeft], ax = [ay[0] + aw[0] >= 0 && ay[0] + aw[0] < e.height() - ar.outerHeight(!1), ay[1] + aw[1] >= 0 && ay[0] + aw[1] < e.width() - ar.outerWidth(!1)], av = "yx" !== am.axis || ax[0] || ax[1] ? "all" : "none";
                    "x" === am.axis || ax[0] || f(ap, aw[0].toString(), {
                        dir: "y",
                        scrollEasing: "mcsEaseInOut",
                        overwrite: av,
                        dur: at
                    }), "y" === am.axis || ax[1] || f(ap, aw[1].toString(), {
                        dir: "x",
                        scrollEasing: "mcsEaseInOut",
                        overwrite: av,
                        dur: at
                    })
                }, ap[0]._focusTimer))
            })
        }, w = function () {
            var ao = b(this), an = ao.data(af), am = af + "_" + an.idx, e = b("#mCSB_" + an.idx + "_container").parent();
            e.bind("scroll." + am, function () {
                0 === e.scrollTop() && 0 === e.scrollLeft() || b(".mCSB_" + an.idx + "_scrollbar").css("visibility", "hidden")
            })
        }, d = function () {
            var aq = b(this), an = aq.data(af), am = an.opt, ar = an.sequential, ao = af + "_" + an.idx, e = ".mCSB_" + an.idx + "_scrollbar", ap = b(e + ">a");
            ap.bind("contextmenu." + ao, function (at) {
                at.preventDefault()
            }).bind("mousedown." + ao + " touchstart." + ao + " pointerdown." + ao + " MSPointerDown." + ao + " mouseup." + ao + " touchend." + ao + " pointerup." + ao + " MSPointerUp." + ao + " mouseout." + ao + " pointerout." + ao + " MSPointerOut." + ao + " click." + ao, function (av) {
                function au(aw, ax) {
                    ar.scrollAmount = am.scrollButtons.scrollAmount, H(aq, aw, ax)
                }

                if (av.preventDefault(), ag(av)) {
                    var at = b(this).attr("class");
                    switch (ar.type = am.scrollButtons.scrollType, av.type) {
                        case"mousedown":
                        case"touchstart":
                        case"pointerdown":
                        case"MSPointerDown":
                            if ("stepped" === ar.type) {
                                return
                            }
                            ai = !0, an.tweenRunning = !1, au("on", at);
                            break;
                        case"mouseup":
                        case"touchend":
                        case"pointerup":
                        case"MSPointerUp":
                        case"mouseout":
                        case"pointerout":
                        case"MSPointerOut":
                            if ("stepped" === ar.type) {
                                return
                            }
                            ai = !1, ar.dir && au("off", at);
                            break;
                        case"click":
                            if ("stepped" !== ar.type || an.tweenRunning) {
                                return
                            }
                            au("on", at)
                    }
                }
            })
        }, O = function () {
            function ao(aC) {
                function aE(aF, aG) {
                    au.type = an.keyboard.scrollType, au.scrollAmount = an.keyboard.scrollAmount, "stepped" === au.type && aq.tweenRunning || H(ar, aF, aG)
                }

                switch (aC.type) {
                    case"blur":
                        aq.tweenRunning && au.dir && aE("off", null);
                        break;
                    case"keydown":
                    case"keyup":
                        var aB = aC.keyCode ? aC.keyCode : aC.which, ay = "on";
                        if ("x" !== an.axis && (38 === aB || 40 === aB) || "y" !== an.axis && (37 === aB || 39 === aB)) {
                            if ((38 === aB || 40 === aB) && !aq.overflowed[0] || (37 === aB || 39 === aB) && !aq.overflowed[1]) {
                                return
                            }
                            "keyup" === aC.type && (ay = "off"), b(document.activeElement).is(at) || (aC.preventDefault(), aC.stopImmediatePropagation(), aE(ay, aB))
                        } else {
                            if (33 === aB || 34 === aB) {
                                if ((aq.overflowed[0] || aq.overflowed[1]) && (aC.preventDefault(), aC.stopImmediatePropagation()), "keyup" === aC.type) {
                                    r(ar);
                                    var aA = 34 === aB ? -1 : 1;
                                    if ("x" === an.axis || "yx" === an.axis && aq.overflowed[1] && !aq.overflowed[0]) {
                                        var az = "x", aD = Math.abs(av[0].offsetLeft) - aA * (0.9 * aw.width())
                                    } else {
                                        var az = "y", aD = Math.abs(av[0].offsetTop) - aA * (0.9 * aw.height())
                                    }
                                    f(ar, aD.toString(), {
                                        dir: az,
                                        scrollEasing: "mcsEaseInOut"
                                    })
                                }
                            } else {
                                if ((35 === aB || 36 === aB) && !b(document.activeElement).is(at) && ((aq.overflowed[0] || aq.overflowed[1]) && (aC.preventDefault(), aC.stopImmediatePropagation()), "keyup" === aC.type)) {
                                    if ("x" === an.axis || "yx" === an.axis && aq.overflowed[1] && !aq.overflowed[0]) {
                                        var az = "x", aD = 35 === aB ? Math.abs(aw.width() - av.outerWidth(!1)) : 0
                                    } else {
                                        var az = "y", aD = 35 === aB ? Math.abs(aw.height() - av.outerHeight(!1)) : 0
                                    }
                                    f(ar, aD.toString(), {
                                        dir: az,
                                        scrollEasing: "mcsEaseInOut"
                                    })
                                }
                            }
                        }
                }
            }

            var ar = b(this), aq = ar.data(af), an = aq.opt, au = aq.sequential, ap = af + "_" + aq.idx, am = b("#mCSB_" + aq.idx), av = b("#mCSB_" + aq.idx + "_container"), aw = av.parent(), at = "input,textarea,select,datalist,keygen,[contenteditable='true']", ax = av.find("iframe"), e = ["blur." + ap + " keydown." + ap + " keyup." + ap];
            ax.length && ax.each(function () {
                b(this).bind("load", function () {
                    aa(this) && b(this.contentDocument || this.contentWindow.document).bind(e[0], function (ay) {
                        ao(ay)
                    })
                })
            }), am.attr("tabindex", "0").bind(e[0], function (ay) {
                ao(ay)
            })
        }, H = function (az, aq, an, av, au) {
            function aw(aD) {
                e.snapAmount && (ao.scrollAmount = e.snapAmount instanceof Array ? "x" === ao.dir[0] ? e.snapAmount[1] : e.snapAmount[0] : e.snapAmount);
                var aG = "stepped" !== ao.type, aA = au ? au : aD ? aG ? ar / 1.5 : ap : 1000 / 60, aF = aD ? aG ? 7.5 : 40 : 2.5, aH = [Math.abs(at[0].offsetTop), Math.abs(at[0].offsetLeft)], aC = [am.scrollRatio.y > 10 ? 10 : am.scrollRatio.y, am.scrollRatio.x > 10 ? 10 : am.scrollRatio.x], aE = "x" === ao.dir[0] ? aH[1] + ao.dir[1] * (aC[1] * aF) : aH[0] + ao.dir[1] * (aC[0] * aF), aI = "x" === ao.dir[0] ? aH[1] + ao.dir[1] * parseInt(ao.scrollAmount) : aH[0] + ao.dir[1] * parseInt(ao.scrollAmount), aB = "auto" !== ao.scrollAmount ? aI : aE, aK = av ? av : aD ? aG ? "mcsLinearOut" : "mcsEaseInOut" : "mcsLinear", aJ = !!aD;
                return aD && 17 > aA && (aB = "x" === ao.dir[0] ? aH[1] : aH[0]), f(az, aB.toString(), {
                    dir: ao.dir[0],
                    scrollEasing: aK,
                    dur: aA,
                    onComplete: aJ
                }), aD ? void (ao.dir = !1) : (clearTimeout(ao.step), void (ao.step = setTimeout(function () {
                    aw()
                }, aA)))
            }

            function ay() {
                clearTimeout(ao.step), Z(ao, "step"), r(az)
            }

            var am = az.data(af), e = am.opt, ao = am.sequential, at = b("#mCSB_" + am.idx + "_container"), ax = "stepped" === ao.type, ar = e.scrollInertia < 26 ? 26 : e.scrollInertia, ap = e.scrollInertia < 1 ? 17 : e.scrollInertia;
            switch (aq) {
                case"on":
                    if (ao.dir = [an === aj[16] || an === aj[15] || 39 === an || 37 === an ? "x" : "y", an === aj[13] || an === aj[15] || 38 === an || 37 === an ? -1 : 1], r(az), Y(an) && "stepped" === ao.type) {
                        return
                    }
                    aw(ax);
                    break;
                case"off":
                    ay(), (ax || am.tweenRunning && ao.dir) && aw(!0)
            }
        }, C = function (e) {
            var an = b(this).data(af).opt, am = [];
            return "function" == typeof e && (e = e()), e instanceof Array ? am = e.length > 1 ? [e[0], e[1]] : "x" === an.axis ? [null, e[0]] : [e[0], null] : (am[0] = e.y ? e.y : e.x || "x" === an.axis ? null : e, am[1] = e.x ? e.x : e.y || "y" === an.axis ? null : e), "function" == typeof am[0] && (am[0] = am[0]()), "function" == typeof am[1] && (am[1] = am[1]()), am
        }, B = function (am, aq) {
            if (null != am && "undefined" != typeof am) {
                var an = b(this), aw = an.data(af), au = aw.opt, ax = b("#mCSB_" + aw.idx + "_container"), e = ax.parent(), ao = typeof am;
                aq || (aq = "x" === au.axis ? "x" : "y");
                var ap = "x" === aq ? ax.outerWidth(!1) - e.width() : ax.outerHeight(!1) - e.height(), at = "x" === aq ? ax[0].offsetLeft : ax[0].offsetTop, av = "x" === aq ? "left" : "top";
                switch (ao) {
                    case"function":
                        return am();
                    case"object":
                        var ay = am.jquery ? am : b(am);
                        if (!ay.length) {
                            return
                        }
                        return "x" === aq ? a(ay)[1] : a(ay)[0];
                    case"string":
                    case"number":
                        if (Y(am)) {
                            return Math.abs(am)
                        }
                        if (-1 !== am.indexOf("%")) {
                            return Math.abs(ap * parseInt(am) / 100)
                        }
                        if (-1 !== am.indexOf("-=")) {
                            return Math.abs(at - parseInt(am.split("-=")[1]))
                        }
                        if (-1 !== am.indexOf("+=")) {
                            var ar = at + parseInt(am.split("+=")[1]);
                            return ar >= 0 ? 0 : Math.abs(ar)
                        }
                        if (-1 !== am.indexOf("px") && Y(am.split("px")[0])) {
                            return Math.abs(am.split("px")[0])
                        }
                        if ("top" === am || "left" === am) {
                            return 0
                        }
                        if ("bottom" === am) {
                            return Math.abs(e.height() - ax.outerHeight(!1))
                        }
                        if ("right" === am) {
                            return Math.abs(e.width() - ax.outerWidth(!1))
                        }
                        if ("first" === am || "last" === am) {
                            var ay = ax.find(":" + am);
                            return "x" === aq ? a(ay)[1] : a(ay)[0]
                        }
                        return b(am).length ? "x" === aq ? a(b(am))[1] : a(b(am))[0] : (ax.css(av, am), void S.update.call(null, an[0]))
                }
            }
        }, o = function (e) {
            function ar() {
                return clearTimeout(an[0].autoUpdate), 0 === ap.parents("html").length ? void (ap = null) : void (an[0].autoUpdate = setTimeout(function () {
                    return am.advanced.updateOnSelectorChange && (au.poll.change.n = ao(), au.poll.change.n !== au.poll.change.o) ? (au.poll.change.o = au.poll.change.n, void at(3)) : am.advanced.updateOnContentResize && (au.poll.size.n = ap[0].scrollHeight + ap[0].scrollWidth + an[0].offsetHeight + ap[0].offsetHeight + ap[0].offsetWidth, au.poll.size.n !== au.poll.size.o) ? (au.poll.size.o = au.poll.size.n, void at(1)) : !am.advanced.updateOnImageLoad || "auto" === am.advanced.updateOnImageLoad && "y" === am.axis || (au.poll.img.n = an.find("img").length, au.poll.img.n === au.poll.img.o) ? void ((am.advanced.updateOnSelectorChange || am.advanced.updateOnContentResize || am.advanced.updateOnImageLoad) && ar()) : (au.poll.img.o = au.poll.img.n, void an.find("img").each(function () {
                        aq(this)
                    }))
                }, am.advanced.autoUpdateTimeout))
            }

            function aq(ax) {
                function av(az, aA) {
                    return function () {
                        return aA.apply(az, arguments)
                    }
                }

                function ay() {
                    this.onload = null, b(ax).addClass(aj[2]), at(2)
                }

                if (b(ax).hasClass(aj[2])) {
                    return void at()
                }
                var aw = new Image;
                aw.onload = av(aw, ay), aw.src = ax.src
            }

            function ao() {
                am.advanced.updateOnSelectorChange === !0 && (am.advanced.updateOnSelectorChange = "*");
                var av = 0, aw = an.find(am.advanced.updateOnSelectorChange);
                return am.advanced.updateOnSelectorChange && aw.length > 0 && aw.each(function () {
                    av += this.offsetHeight + this.offsetWidth
                }), av
            }

            function at(av) {
                clearTimeout(an[0].autoUpdate), S.update.call(null, ap[0], av)
            }

            var ap = b(this), au = ap.data(af), am = au.opt, an = b("#mCSB_" + au.idx + "_container");
            return e ? (clearTimeout(an[0].autoUpdate), void Z(an[0], "autoUpdate")) : void ar()
        }, x = function (an, e, am) {
            return Math.round(an / e) * e - am
        }, r = function (e) {
            var an = e.data(af), am = b("#mCSB_" + an.idx + "_container,#mCSB_" + an.idx + "_container_wrapper,#mCSB_" + an.idx + "_dragger_vertical,#mCSB_" + an.idx + "_dragger_horizontal");
            am.each(function () {
                D.call(this)
            })
        }, f = function (aC, ax, aw) {
            function ar(aL) {
                return aB && am.callbacks[aL] && "function" == typeof am.callbacks[aL]
            }

            function aA() {
                return [am.callbacks.alwaysTriggerOffsets || aF >= aJ[0] + aH, am.callbacks.alwaysTriggerOffsets || -az >= aF]
            }

            function au() {
                var aN = [aq[0].offsetTop, aq[0].offsetLeft], aM = [aG[0].offsetTop, aG[0].offsetLeft], aL = [aq.outerHeight(!1), aq.outerWidth(!1)], aO = [ao.height(), ao.width()];
                aC[0].mcs = {
                    content: aq,
                    top: aN[0],
                    left: aN[1],
                    draggerTop: aM[0],
                    draggerLeft: aM[1],
                    topPct: Math.round(100 * Math.abs(aN[0]) / (Math.abs(aL[0]) - aO[0])),
                    leftPct: Math.round(100 * Math.abs(aN[1]) / (Math.abs(aL[1]) - aO[1])),
                    direction: aw.dir
                }
            }

            var aB = aC.data(af), am = aB.opt, an = {
                trigger: "internal",
                dir: "y",
                scrollEasing: "mcsEaseOut",
                drag: !1,
                dur: am.scrollInertia,
                overwrite: "all",
                callbacks: !0,
                onStart: !0,
                onUpdate: !0,
                onComplete: !0
            }, aw = b.extend(an, aw), aD = [aw.dur, aw.drag ? 0 : aw.dur], ao = b("#mCSB_" + aB.idx), aq = b("#mCSB_" + aB.idx + "_container"), av = aq.parent(), ay = am.callbacks.onTotalScrollOffset ? C.call(aC, am.callbacks.onTotalScrollOffset) : [0, 0], ap = am.callbacks.onTotalScrollBackOffset ? C.call(aC, am.callbacks.onTotalScrollBackOffset) : [0, 0];
            if (aB.trigger = aw.trigger, 0 === av.scrollTop() && 0 === av.scrollLeft() || (b(".mCSB_" + aB.idx + "_scrollbar").css("visibility", "visible"), av.scrollTop(0).scrollLeft(0)), "_resetY" !== ax || aB.contentReset.y || (ar("onOverflowYNone") && am.callbacks.onOverflowYNone.call(aC[0]), aB.contentReset.y = 1), "_resetX" !== ax || aB.contentReset.x || (ar("onOverflowXNone") && am.callbacks.onOverflowXNone.call(aC[0]), aB.contentReset.x = 1), "_resetY" !== ax && "_resetX" !== ax) {
                if (!aB.contentReset.y && aC[0].mcs || !aB.overflowed[0] || (ar("onOverflowY") && am.callbacks.onOverflowY.call(aC[0]), aB.contentReset.x = null), !aB.contentReset.x && aC[0].mcs || !aB.overflowed[1] || (ar("onOverflowX") && am.callbacks.onOverflowX.call(aC[0]), aB.contentReset.x = null), am.snapAmount) {
                    var aE = am.snapAmount instanceof Array ? "x" === aw.dir ? am.snapAmount[1] : am.snapAmount[0] : am.snapAmount;
                    ax = x(ax, aE, am.snapOffset)
                }
                switch (aw.dir) {
                    case"x":
                        var aG = b("#mCSB_" + aB.idx + "_dragger_horizontal"), aK = "left", aF = aq[0].offsetLeft, aJ = [ao.width() - aq.outerWidth(!1), aG.parent().width() - aG.width()], e = [ax, 0 === ax ? 0 : ax / aB.scrollRatio.x], aH = ay[1], az = ap[1], aI = aH > 0 ? aH / aB.scrollRatio.x : 0, at = az > 0 ? az / aB.scrollRatio.x : 0;
                        break;
                    case"y":
                        var aG = b("#mCSB_" + aB.idx + "_dragger_vertical"), aK = "top", aF = aq[0].offsetTop, aJ = [ao.height() - aq.outerHeight(!1), aG.parent().height() - aG.height()], e = [ax, 0 === ax ? 0 : ax / aB.scrollRatio.y], aH = ay[0], az = ap[0], aI = aH > 0 ? aH / aB.scrollRatio.y : 0, at = az > 0 ? az / aB.scrollRatio.y : 0
                }
                e[1] < 0 || 0 === e[0] && 0 === e[1] ? e = [0, 0] : e[1] >= aJ[1] ? e = [aJ[0], aJ[1]] : e[0] = -e[0], aC[0].mcs || (au(), ar("onInit") && am.callbacks.onInit.call(aC[0])), clearTimeout(aq[0].onCompleteTimeout), k(aG[0], aK, Math.round(e[1]), aD[1], aw.scrollEasing), !aB.tweenRunning && (0 === aF && e[0] >= 0 || aF === aJ[0] && e[0] <= aJ[0]) || k(aq[0], aK, Math.round(e[0]), aD[0], aw.scrollEasing, aw.overwrite, {
                    onStart: function () {
                        aw.callbacks && aw.onStart && !aB.tweenRunning && (ar("onScrollStart") && (au(), am.callbacks.onScrollStart.call(aC[0])), aB.tweenRunning = !0, ac(aG), aB.cbOffsets = aA())
                    }, onUpdate: function () {
                        aw.callbacks && aw.onUpdate && ar("whileScrolling") && (au(), am.callbacks.whileScrolling.call(aC[0]))
                    }, onComplete: function () {
                        if (aw.callbacks && aw.onComplete) {
                            "yx" === am.axis && clearTimeout(aq[0].onCompleteTimeout);
                            var aL = aq[0].idleTimer || 0;
                            aq[0].onCompleteTimeout = setTimeout(function () {
                                ar("onScroll") && (au(), am.callbacks.onScroll.call(aC[0])), ar("onTotalScroll") && e[1] >= aJ[1] - aI && aB.cbOffsets[0] && (au(), am.callbacks.onTotalScroll.call(aC[0])), ar("onTotalScrollBack") && e[1] <= at && aB.cbOffsets[1] && (au(), am.callbacks.onTotalScrollBack.call(aC[0])), aB.tweenRunning = !1, aq[0].idleTimer = 0, ac(aG, "hide")
                            }, aL)
                        }
                    }
                })
            }
        }, k = function (aq, aE, aA, am, az, av, aC) {
            function ax() {
                aI.stop || (aF || ay.call(), aF = l() - aH, aD(), aF >= aI.time && (aI.time = aF > aI.time ? aF + ar - (aF - aI.time) : aF + ar - 1, aI.time < aF + 1 && (aI.time = aF + 1)), aI.time < am ? aI.id = au(ax) : at.call())
            }

            function aD() {
                am > 0 ? (aI.currVal = aG(aI.time, e, an, am, az), aw[aE] = Math.round(aI.currVal) + "px") : aw[aE] = aA + "px", aB.call()
            }

            function ao() {
                ar = 1000 / 60, aI.time = aF + ar, au = window.requestAnimationFrame ? window.requestAnimationFrame : function (aJ) {
                    return aD(), setTimeout(aJ, 0.01)
                }, aI.id = au(ax)
            }

            function ap() {
                null != aI.id && (window.requestAnimationFrame ? window.cancelAnimationFrame(aI.id) : clearTimeout(aI.id), aI.id = null)
            }

            function aG(aM, aO, aL, aJ, aK) {
                switch (aK) {
                    case"linear":
                    case"mcsLinear":
                        return aL * aM / aJ + aO;
                    case"mcsLinearOut":
                        return aM /= aJ, aM--, aL * Math.sqrt(1 - aM * aM) + aO;
                    case"easeInOutSmooth":
                        return aM /= aJ / 2, 1 > aM ? aL / 2 * aM * aM + aO : (aM--, -aL / 2 * (aM * (aM - 2) - 1) + aO);
                    case"easeInOutStrong":
                        return aM /= aJ / 2, 1 > aM ? aL / 2 * Math.pow(2, 10 * (aM - 1)) + aO : (aM--, aL / 2 * (-Math.pow(2, -10 * aM) + 2) + aO);
                    case"easeInOut":
                    case"mcsEaseInOut":
                        return aM /= aJ / 2, 1 > aM ? aL / 2 * aM * aM * aM + aO : (aM -= 2, aL / 2 * (aM * aM * aM + 2) + aO);
                    case"easeOutSmooth":
                        return aM /= aJ, aM--, -aL * (aM * aM * aM * aM - 1) + aO;
                    case"easeOutStrong":
                        return aL * (-Math.pow(2, -10 * aM / aJ) + 1) + aO;
                    case"easeOut":
                    case"mcsEaseOut":
                    default:
                        var aP = (aM /= aJ) * aM, aN = aP * aM;
                        return aO + aL * (0.499999999999997 * aN * aP + -2.5 * aP * aP + 5.5 * aN + -6.5 * aP + 4 * aM)
                }
            }

            aq._mTween || (aq._mTween = {top: {}, left: {}});
            var ar, au, aC = aC || {}, ay = aC.onStart || function () {
            }, aB = aC.onUpdate || function () {
            }, at = aC.onComplete || function () {
            }, aH = l(), aF = 0, e = aq.offsetTop, aw = aq.style, aI = aq._mTween[aE];
            "left" === aE && (e = aq.offsetLeft);
            var an = aA - e;
            aI.stop = 0, "none" !== av && ap(), ao()
        }, l = function () {
            return window.performance && window.performance.now ? window.performance.now() : window.performance && window.performance.webkitNow ? window.performance.webkitNow() : Date.now ? Date.now() : (new Date).getTime()
        }, D = function () {
            var an = this;
            an._mTween || (an._mTween = {top: {}, left: {}});
            for (var ao = ["top", "left"], am = 0; am < ao.length; am++) {
                var e = ao[am];
                an._mTween[e].id && (window.requestAnimationFrame ? window.cancelAnimationFrame(an._mTween[e].id) : clearTimeout(an._mTween[e].id), an._mTween[e].id = null, an._mTween[e].stop = 1)
            }
        }, Z = function (an, e) {
            try {
                delete an[e]
            } catch (am) {
                an[e] = null
            }
        }, ag = function (e) {
            return !(e.which && 1 !== e.which)
        }, A = function (am) {
            var e = am.originalEvent.pointerType;
            return !(e && "touch" !== e && 2 !== e)
        }, Y = function (e) {
            return !isNaN(parseFloat(e)) && isFinite(e)
        }, a = function (am) {
            var e = am.parents(".mCSB_container");
            return [am.offset().top - e.offset().top, am.offset().left - e.offset().left]
        }, al = function () {
            function am() {
                var an = ["webkit", "moz", "ms", "o"];
                if ("hidden" in document) {
                    return "hidden"
                }
                for (var ao = 0; ao < an.length; ao++) {
                    if (an[ao] + "Hidden" in document) {
                        return an[ao] + "Hidden"
                    }
                }
                return null
            }

            var e = am();
            return e ? document[e] : !1
        };
        b.fn[M] = function (e) {
            return S[e] ? S[e].apply(this, Array.prototype.slice.call(arguments, 1)) : "object" != typeof e && e ? void b.error("Method " + e + " does not exist") : S.init.apply(this, arguments)
        }, b[M] = function (e) {
            return S[e] ? S[e].apply(this, Array.prototype.slice.call(arguments, 1)) : "object" != typeof e && e ? void b.error("Method " + e + " does not exist") : S.init.apply(this, arguments)
        }, b[M].defaults = G, window[M] = !0, b(window).bind("load", function () {
            b(L)[M](), b.extend(b.expr[":"], {
                mcsInView: b.expr[":"].mcsInView || function (ao) {
                    var an, e, am = b(ao), ap = am.parents(".mCSB_container");
                    if (ap.length) {
                        return an = ap.parent(), e = [ap[0].offsetTop, ap[0].offsetLeft], e[0] + a(am)[0] >= 0 && e[0] + a(am)[0] < an.height() - am.outerHeight(!1) && e[1] + a(am)[1] >= 0 && e[1] + a(am)[1] < an.width() - am.outerWidth(!1)
                    }
                }, mcsInSight: b.expr[":"].mcsInSight || function (av, ar, e) {
                    var aq, ao, at, ap, au = b(av), am = au.parents(".mCSB_container"), an = "exact" === e[3] ? [[1, 0], [1, 0]] : [[0.9, 0.1], [0.6, 0.4]];
                    if (am.length) {
                        return aq = [au.outerHeight(!1), au.outerWidth(!1)], at = [am[0].offsetTop + a(au)[0], am[0].offsetLeft + a(au)[1]], ao = [am.parent()[0].offsetHeight, am.parent()[0].offsetWidth], ap = [aq[0] < ao[0] ? an[0] : an[1], aq[1] < ao[1] ? an[0] : an[1]], at[0] - ao[0] * ap[0][0] < 0 && at[0] + aq[0] - ao[0] * ap[0][1] >= 0 && at[1] - ao[1] * ap[1][0] < 0 && at[1] + aq[1] - ao[1] * ap[1][1] >= 0
                    }
                }, mcsOverflow: b.expr[":"].mcsOverflow || function (e) {
                    var am = b(e).data(af);
                    if (am) {
                        return am.overflowed[0] || am.overflowed[1]
                    }
                }
            })
        })
    })
});
var ogame = ogame || {};
/*
 * Select2 4.0.0
 * https://select2.github.io
 *
 * Released under the MIT license
 * https://github.com/select2/select2/blob/master/LICENSE.md
 */
(function (b) {
    if (typeof define === "function" && define.amd) {
        define(["./jquery"], b)
    } else {
        if (typeof exports === "object") {
            b(require("./jquery"))
        } else {
            b(jQuery)
        }
    }
}(function (f) {
    var d = (function () {
        if (f && f.fn && f.fn.select2 && f.fn.select2.amd) {
            var a = f.fn.select2.amd
        }
        var a;
        (function () {
            if (!a || !a.requirejs) {
                if (!a) {
                    a = {}
                } else {
                    h = a
                }
                var c, h, b;
                (function (T) {
                    var P, X, H, G, U = {}, V = {}, L = {}, R = {}, I = Object.prototype.hasOwnProperty, N = [].slice, K = /\.js$/;

                    function J(l, k) {
                        return I.call(l, k)
                    }

                    function F(x, A) {
                        var o, s, v, r, n, w, l, k, p, q, u, m = A && A.split("/"), y = L.map, B = (y && y["*"]) || {};
                        if (x && x.charAt(0) === ".") {
                            if (A) {
                                m = m.slice(0, m.length - 1);
                                x = x.split("/");
                                n = x.length - 1;
                                if (L.nodeIdCompat && K.test(x[n])) {
                                    x[n] = x[n].replace(K, "")
                                }
                                x = m.concat(x);
                                for (p = 0; p < x.length; p += 1) {
                                    u = x[p];
                                    if (u === ".") {
                                        x.splice(p, 1);
                                        p -= 1
                                    } else {
                                        if (u === "..") {
                                            if (p === 1 && (x[2] === ".." || x[0] === "..")) {
                                                break
                                            } else {
                                                if (p > 0) {
                                                    x.splice(p - 1, 2);
                                                    p -= 2
                                                }
                                            }
                                        }
                                    }
                                }
                                x = x.join("/")
                            } else {
                                if (x.indexOf("./") === 0) {
                                    x = x.substring(2)
                                }
                            }
                        }
                        if ((m || B) && y) {
                            o = x.split("/");
                            for (p = o.length; p > 0; p -= 1) {
                                s = o.slice(0, p).join("/");
                                if (m) {
                                    for (q = m.length; q > 0; q -= 1) {
                                        v = y[m.slice(0, q).join("/")];
                                        if (v) {
                                            v = v[s];
                                            if (v) {
                                                r = v;
                                                w = p;
                                                break
                                            }
                                        }
                                    }
                                }
                                if (r) {
                                    break
                                }
                                if (!l && B && B[s]) {
                                    l = B[s];
                                    k = p
                                }
                            }
                            if (!r && l) {
                                r = l;
                                w = k
                            }
                            if (r) {
                                o.splice(0, w, r);
                                x = o.join("/")
                            }
                        }
                        return x
                    }

                    function M(l, k) {
                        return function () {
                            return X.apply(T, N.call(arguments, 0).concat([l, k]))
                        }
                    }

                    function g(k) {
                        return function (l) {
                            return F(l, k)
                        }
                    }

                    function S(k) {
                        return function (l) {
                            U[k] = l
                        }
                    }

                    function Q(k) {
                        if (J(V, k)) {
                            var l = V[k];
                            delete V[k];
                            R[k] = true;
                            P.apply(T, l)
                        }
                        if (!J(U, k) && !J(R, k)) {
                            throw new Error("No " + k)
                        }
                        return U[k]
                    }

                    function O(l) {
                        var k, m = l ? l.indexOf("!") : -1;
                        if (m > -1) {
                            k = l.substring(0, m);
                            l = l.substring(m + 1, l.length)
                        }
                        return [k, l]
                    }

                    H = function (n, o) {
                        var m, k = O(n), l = k[0];
                        n = k[1];
                        if (l) {
                            l = F(l, o);
                            m = Q(l)
                        }
                        if (l) {
                            if (m && m.normalize) {
                                n = m.normalize(n, g(o))
                            } else {
                                n = F(n, o)
                            }
                        } else {
                            n = F(n, o);
                            k = O(n);
                            l = k[0];
                            n = k[1];
                            if (l) {
                                m = Q(l)
                            }
                        }
                        return {f: l ? l + "!" + n : n, n: n, pr: l, p: m}
                    };
                    function W(k) {
                        return function () {
                            return (L && L.config && L.config[k]) || {}
                        }
                    }

                    G = {
                        require: function (k) {
                            return M(k)
                        }, exports: function (l) {
                            var k = U[l];
                            if (typeof k !== "undefined") {
                                return k
                            } else {
                                return (U[l] = {})
                            }
                        }, module: function (k) {
                            return {id: k, uri: "", exports: U[k], config: W(k)}
                        }
                    };
                    P = function (v, k, l, m) {
                        var r, n, q, w, s, p = [], u = typeof l, o;
                        m = m || v;
                        if (u === "undefined" || u === "function") {
                            k = !k.length && l.length ? ["require", "exports", "module"] : k;
                            for (s = 0; s < k.length; s += 1) {
                                w = H(k[s], m);
                                n = w.f;
                                if (n === "require") {
                                    p[s] = G.require(v)
                                } else {
                                    if (n === "exports") {
                                        p[s] = G.exports(v);
                                        o = true
                                    } else {
                                        if (n === "module") {
                                            r = p[s] = G.module(v)
                                        } else {
                                            if (J(U, n) || J(V, n) || J(R, n)) {
                                                p[s] = Q(n)
                                            } else {
                                                if (w.p) {
                                                    w.p.load(w.n, M(m, true), S(n), {});
                                                    p[s] = U[n]
                                                } else {
                                                    throw new Error(v + " missing " + n)
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            q = l ? l.apply(U[v], p) : undefined;
                            if (v) {
                                if (r && r.exports !== T && r.exports !== U[v]) {
                                    U[v] = r.exports
                                } else {
                                    if (q !== T || !o) {
                                        U[v] = q
                                    }
                                }
                            }
                        } else {
                            if (v) {
                                U[v] = l
                            }
                        }
                    };
                    c = h = X = function (l, k, o, n, m) {
                        if (typeof l === "string") {
                            if (G[l]) {
                                return G[l](k)
                            }
                            return Q(H(l, k).f)
                        } else {
                            if (!l.splice) {
                                L = l;
                                if (L.deps) {
                                    X(L.deps, L.callback)
                                }
                                if (!k) {
                                    return
                                }
                                if (k.splice) {
                                    l = k;
                                    k = o;
                                    o = null
                                } else {
                                    l = T
                                }
                            }
                        }
                        k = k || function () {
                        };
                        if (typeof o === "function") {
                            o = n;
                            n = m
                        }
                        if (n) {
                            P(T, l, k, o)
                        } else {
                            setTimeout(function () {
                                P(T, l, k, o)
                            }, 4)
                        }
                        return X
                    };
                    X.config = function (k) {
                        return X(k)
                    };
                    c._defined = U;
                    b = function (m, l, k) {
                        if (!l.splice) {
                            k = l;
                            l = []
                        }
                        if (!J(U, m) && !J(V, m)) {
                            V[m] = [m, l, k]
                        }
                    };
                    b.amd = {jQuery: true}
                }());
                a.requirejs = c;
                a.require = h;
                a.define = b
            }
        }());
        a.define("almond", function () {
        });
        a.define("jquery", [], function () {
            var b = f || $;
            if (b == null && console && console.error) {
                console.error("Select2: An instance of jQuery or a jQuery-compatible library was not found. Make sure that you are including jQuery before Select2 on your web page.")
            }
            return b
        });
        a.define("select2/utils", ["jquery"], function (b) {
            var c = {};
            c.Extend = function (q, h) {
                var g = {}.hasOwnProperty;

                function p() {
                    this.constructor = q
                }

                for (var r in h) {
                    if (g.call(h, r)) {
                        q[r] = h[r]
                    }
                }
                p.prototype = h.prototype;
                q.prototype = new p();
                q.__super__ = h.prototype;
                return q
            };
            function k(m) {
                var q = m.prototype;
                var r = [];
                for (var g in q) {
                    var h = q[g];
                    if (typeof h !== "function") {
                        continue
                    }
                    if (g === "constructor") {
                        continue
                    }
                    r.push(g)
                }
                return r
            }

            c.Decorate = function (F, g) {
                var h = k(g);
                var m = k(F);

                function C() {
                    var o = Array.prototype.unshift;
                    var p = g.prototype.constructor.length;
                    var n = F.prototype.constructor;
                    if (p > 0) {
                        o.call(arguments, F.prototype.constructor);
                        n = g.prototype.constructor
                    }
                    n.apply(this, arguments)
                }

                g.displayName = F.displayName;
                function B() {
                    this.constructor = C
                }

                C.prototype = new B();
                for (var x = 0; x < m.length; x++) {
                    var A = m[x];
                    C.prototype[A] = F.prototype[A]
                }
                var D = function (o) {
                    var n = function () {
                    };
                    if (o in C.prototype) {
                        n = C.prototype[o]
                    }
                    var p = g.prototype[o];
                    return function () {
                        var q = Array.prototype.unshift;
                        q.call(arguments, n);
                        return p.apply(this, arguments)
                    }
                };
                for (var E = 0; E < h.length; E++) {
                    var y = h[E];
                    C.prototype[y] = D(y)
                }
                return C
            };
            var l = function () {
                this.listeners = {}
            };
            l.prototype.on = function (h, g) {
                this.listeners = this.listeners || {};
                if (h in this.listeners) {
                    this.listeners[h].push(g)
                } else {
                    this.listeners[h] = [g]
                }
            };
            l.prototype.trigger = function (h) {
                var g = Array.prototype.slice;
                this.listeners = this.listeners || {};
                if (h in this.listeners) {
                    this.invoke(this.listeners[h], g.call(arguments, 1))
                }
                if ("*" in this.listeners) {
                    this.invoke(this.listeners["*"], arguments)
                }
            };
            l.prototype.invoke = function (g, p) {
                for (var h = 0, o = g.length; h < o; h++) {
                    g[h].apply(this, p)
                }
            };
            c.Observable = l;
            c.generateChars = function (p) {
                var g = "";
                for (var h = 0; h < p; h++) {
                    var o = Math.floor(Math.random() * 36);
                    g += o.toString(36)
                }
                return g
            };
            c.bind = function (g, h) {
                return function () {
                    g.apply(h, arguments)
                }
            };
            c._convertData = function (r) {
                for (var s in r) {
                    var u = s.split("-");
                    var h = r;
                    if (u.length === 1) {
                        continue
                    }
                    for (var g = 0; g < u.length; g++) {
                        var v = u[g];
                        v = v.substring(0, 1).toLowerCase() + v.substring(1);
                        if (!(v in h)) {
                            h[v] = {}
                        }
                        if (g == u.length - 1) {
                            h[v] = r[s]
                        }
                        h = h[v]
                    }
                    delete r[s]
                }
                return r
            };
            c.hasScroll = function (g, q) {
                var r = b(q);
                var h = q.style.overflowX;
                var p = q.style.overflowY;
                if (h === p && (p === "hidden" || p === "visible")) {
                    return false
                }
                if (h === "scroll" || p === "scroll") {
                    return true
                }
                return (r.innerHeight() < q.scrollHeight || r.innerWidth() < q.scrollWidth)
            };
            c.escapeMarkup = function (h) {
                var g = {
                    "\\": "&#92;",
                    "&": "&amp;",
                    "<": "&lt;",
                    ">": "&gt;",
                    '"': "&quot;",
                    "'": "&#39;",
                    "/": "&#47;"
                };
                if (typeof h !== "string") {
                    return h
                }
                return String(h).replace(/[&<>"'\/\\]/g, function (n) {
                    return g[n]
                })
            };
            c.appendMany = function (n, g) {
                if (b.fn.jquery.substr(0, 3) === "1.7") {
                    var h = b();
                    b.map(g, function (m) {
                        h = h.add(m)
                    });
                    g = h
                }
                n.append(g)
            };
            return c
        });
        a.define("select2/results", ["jquery", "./utils"], function (b, c) {
            function h(n, m, g) {
                this.$element = n;
                this.data = g;
                this.options = m;
                h.__super__.constructor.call(this)
            }

            c.Extend(h, c.Observable);
            h.prototype.render = function () {
                var g = b('<ul class="select2-results__options" role="tree"></ul>');
                if (this.options.get("multiple")) {
                    g.attr("aria-multiselectable", "true")
                }
                this.$results = g;
                return g
            };
            h.prototype.clear = function () {
                this.$results.empty()
            };
            h.prototype.displayMessage = function (g) {
                var p = this.options.get("escapeMarkup");
                this.clear();
                this.hideLoading();
                var o = b('<li role="treeitem" class="select2-results__option"></li>');
                var n = this.options.get("translations").get(g.message);
                o.append(p(n(g.args)));
                this.$results.append(o)
            };
            h.prototype.append = function (o) {
                this.hideLoading();
                var q = [];
                if (o.results == null || o.results.length === 0) {
                    if (this.$results.children().length === 0) {
                        this.trigger("results:message", {message: "noResults"})
                    }
                    return
                }
                o.results = this.sort(o.results);
                for (var r = 0; r < o.results.length; r++) {
                    var p = o.results[r];
                    var g = this.option(p);
                    q.push(g)
                }
                this.$results.append(q)
            };
            h.prototype.position = function (n, m) {
                var g = m.find(".select2-results");
                g.append(n)
            };
            h.prototype.sort = function (l) {
                var g = this.options.get("sorter");
                return g(l)
            };
            h.prototype.setClasses = function () {
                var g = this;
                this.data.current(function (r) {
                    var p = b.map(r, function (k) {
                        return k.id.toString()
                    });
                    var q = g.$results.find(".select2-results__option[aria-selected]");
                    q.each(function () {
                        var l = b(this);
                        var m = b.data(this, "data");
                        var k = "" + m.id;
                        if ((m.element != null && m.element.selected) || (m.element == null && b.inArray(k, p) > -1)) {
                            l.attr("aria-selected", "true")
                        } else {
                            l.attr("aria-selected", "false")
                        }
                    });
                    var o = q.filter("[aria-selected=true]");
                    if (o.length > 0) {
                        o.first().trigger("mouseenter")
                    } else {
                        q.first().trigger("mouseenter")
                    }
                })
            };
            h.prototype.showLoading = function (n) {
                this.hideLoading();
                var o = this.options.get("translations").get("searching");
                var g = {disabled: true, loading: true, text: o(n)};
                var p = this.option(g);
                p.className += " loading-results";
                this.$results.prepend(p)
            };
            h.prototype.hideLoading = function () {
                this.$results.find(".loading-results").remove()
            };
            h.prototype.option = function (B) {
                var A = document.createElement("li");
                A.className = "select2-results__option";
                var G = {role: "treeitem", "aria-selected": "false"};
                if (B.disabled) {
                    delete G["aria-selected"];
                    G["aria-disabled"] = "true"
                }
                if (B.id == null) {
                    delete G["aria-selected"]
                }
                if (B._resultId != null) {
                    A.id = B._resultId
                }
                if (B.title) {
                    A.title = B.title
                }
                if (B.children) {
                    G.role = "group";
                    G["aria-label"] = B.text;
                    delete G["aria-selected"]
                }
                for (var y in G) {
                    var C = G[y];
                    A.setAttribute(y, C)
                }
                if (B.children) {
                    var F = b(A);
                    var I = document.createElement("strong");
                    I.className = "select2-results__group";
                    var J = b(I);
                    this.template(B, I);
                    var H = [];
                    for (var g = 0; g < B.children.length; g++) {
                        var D = B.children[g];
                        var E = this.option(D);
                        H.push(E)
                    }
                    var x = b("<ul></ul>", {"class": "select2-results__options select2-results__options--nested"});
                    x.append(H);
                    F.append(I);
                    F.append(x)
                } else {
                    this.template(B, A)
                }
                b.data(A, "data", B);
                return A
            };
            h.prototype.bind = function (p, n) {
                var o = this;
                var g = p.id + "-results";
                this.$results.attr("id", g);
                p.on("results:all", function (k) {
                    o.clear();
                    o.append(k.data);
                    if (p.isOpen()) {
                        o.setClasses()
                    }
                });
                p.on("results:append", function (k) {
                    o.append(k.data);
                    if (p.isOpen()) {
                        o.setClasses()
                    }
                });
                p.on("query", function (k) {
                    o.showLoading(k)
                });
                p.on("select", function () {
                    if (!p.isOpen()) {
                        return
                    }
                    o.setClasses()
                });
                p.on("unselect", function () {
                    if (!p.isOpen()) {
                        return
                    }
                    o.setClasses()
                });
                p.on("open", function () {
                    o.$results.attr("aria-expanded", "true");
                    o.$results.attr("aria-hidden", "false");
                    o.setClasses();
                    o.ensureHighlightVisible()
                });
                p.on("close", function () {
                    o.$results.attr("aria-expanded", "false");
                    o.$results.attr("aria-hidden", "true");
                    o.$results.removeAttr("aria-activedescendant")
                });
                p.on("results:toggle", function () {
                    var k = o.getHighlightedResults();
                    if (k.length === 0) {
                        return
                    }
                    k.trigger("mouseup")
                });
                p.on("results:select", function () {
                    var l = o.getHighlightedResults();
                    if (l.length === 0) {
                        return
                    }
                    var k = l.data("data");
                    if (l.attr("aria-selected") == "true") {
                        o.trigger("close")
                    } else {
                        o.trigger("select", {data: k})
                    }
                });
                p.on("results:previous", function () {
                    var y = o.getHighlightedResults();
                    var A = o.$results.find("[aria-selected]");
                    var w = A.index(y);
                    if (w === 0) {
                        return
                    }
                    var B = w - 1;
                    if (y.length === 0) {
                        B = 0
                    }
                    var x = A.eq(B);
                    x.trigger("mouseenter");
                    var k = o.$results.offset().top;
                    var l = x.offset().top;
                    var m = o.$results.scrollTop() + (l - k);
                    if (B === 0) {
                        o.$results.scrollTop(0)
                    } else {
                        if (l - k < 0) {
                            o.$results.scrollTop(m)
                        }
                    }
                });
                p.on("results:next", function () {
                    var y = o.getHighlightedResults();
                    var A = o.$results.find("[aria-selected]");
                    var w = A.index(y);
                    var B = w + 1;
                    if (B >= A.length) {
                        return
                    }
                    var x = A.eq(B);
                    x.trigger("mouseenter");
                    var k = o.$results.offset().top + o.$results.outerHeight(false);
                    var l = x.offset().top + x.outerHeight(false);
                    var m = o.$results.scrollTop() + l - k;
                    if (B === 0) {
                        o.$results.scrollTop(0)
                    } else {
                        if (l > k) {
                            o.$results.scrollTop(m)
                        }
                    }
                });
                p.on("results:focus", function (k) {
                    k.element.addClass("select2-results__option--highlighted")
                });
                p.on("results:message", function (k) {
                    o.displayMessage(k)
                });
                if (b.fn.mousewheel) {
                    this.$results.on("mousewheel", function (l) {
                        var m = o.$results.scrollTop();
                        var u = (o.$results.get(0).scrollHeight - o.$results.scrollTop() + l.deltaY);
                        var k = l.deltaY > 0 && m - l.deltaY <= 0;
                        var s = l.deltaY < 0 && u <= o.$results.height();
                        if (k) {
                            o.$results.scrollTop(0);
                            l.preventDefault();
                            l.stopPropagation()
                        } else {
                            if (s) {
                                o.$results.scrollTop(o.$results.get(0).scrollHeight - o.$results.height());
                                l.preventDefault();
                                l.stopPropagation()
                            }
                        }
                    })
                }
                this.$results.on("mouseup", ".select2-results__option[aria-selected]", function (m) {
                    var k = b(this);
                    var l = k.data("data");
                    if (k.attr("aria-selected") === "true") {
                        if (o.options.get("multiple")) {
                            o.trigger("unselect", {originalEvent: m, data: l})
                        } else {
                            o.trigger("close")
                        }
                        return
                    }
                    o.trigger("select", {originalEvent: m, data: l})
                });
                this.$results.on("mouseenter", ".select2-results__option[aria-selected]", function (l) {
                    var k = b(this).data("data");
                    o.getHighlightedResults().removeClass("select2-results__option--highlighted");
                    o.trigger("results:focus", {data: k, element: b(this)})
                })
            };
            h.prototype.getHighlightedResults = function () {
                var g = this.$results.find(".select2-results__option--highlighted");
                return g
            };
            h.prototype.destroy = function () {
                this.$results.remove()
            };
            h.prototype.ensureHighlightVisible = function () {
                var r = this.getHighlightedResults();
                if (r.length === 0) {
                    return
                }
                var s = this.$results.find("[aria-selected]");
                var q = s.index(r);
                var v = this.$results.offset().top;
                var w = r.offset().top;
                var g = this.$results.scrollTop() + (w - v);
                var u = w - v;
                g -= r.outerHeight(false) * 2;
                if (q <= 2) {
                    this.$results.scrollTop(0)
                } else {
                    if (u > this.$results.outerHeight() || u < 0) {
                        this.$results.scrollTop(g)
                    }
                }
            };
            h.prototype.template = function (p, o) {
                var g = this.options.get("templateResult");
                var q = this.options.get("escapeMarkup");
                var r = g(p);
                if (r == null) {
                    o.style.display = "none"
                } else {
                    if (typeof r === "string") {
                        o.innerHTML = q(r)
                    } else {
                        b(o).append(r)
                    }
                }
            };
            return h
        });
        a.define("select2/keys", [], function () {
            var b = {
                BACKSPACE: 8,
                TAB: 9,
                ENTER: 13,
                SHIFT: 16,
                CTRL: 17,
                ALT: 18,
                ESC: 27,
                SPACE: 32,
                PAGE_UP: 33,
                PAGE_DOWN: 34,
                END: 35,
                HOME: 36,
                LEFT: 37,
                UP: 38,
                RIGHT: 39,
                DOWN: 40,
                DELETE: 46
            };
            return b
        });
        a.define("select2/selection/base", ["jquery", "../utils", "../keys"], function (b, c, l) {
            function k(h, g) {
                this.$element = h;
                this.options = g;
                k.__super__.constructor.call(this)
            }

            c.Extend(k, c.Observable);
            k.prototype.render = function () {
                var g = b('<span class="select2-selection" role="combobox" aria-autocomplete="list" aria-haspopup="true" aria-expanded="false"></span>');
                this._tabindex = 0;
                if (this.$element.data("old-tabindex") != null) {
                    this._tabindex = this.$element.data("old-tabindex")
                } else {
                    if (this.$element.attr("tabindex") != null) {
                        this._tabindex = this.$element.attr("tabindex")
                    }
                }
                g.attr("title", this.$element.attr("title"));
                g.attr("tabindex", this._tabindex);
                this.$selection = g;
                return g
            };
            k.prototype.bind = function (p, r) {
                var g = this;
                var q = p.id + "-container";
                var h = p.id + "-results";
                this.container = p;
                this.$selection.on("focus", function (m) {
                    g.trigger("focus", m)
                });
                this.$selection.on("blur", function (m) {
                    g.trigger("blur", m)
                });
                this.$selection.on("keydown", function (m) {
                    g.trigger("keypress", m);
                    if (m.which === l.SPACE) {
                        m.preventDefault()
                    }
                });
                p.on("results:focus", function (m) {
                    g.$selection.attr("aria-activedescendant", m.data._resultId)
                });
                p.on("selection:update", function (m) {
                    g.update(m.data)
                });
                p.on("open", function () {
                    g.$selection.attr("aria-expanded", "true");
                    g.$selection.attr("aria-owns", h);
                    g._attachCloseHandler(p)
                });
                p.on("close", function () {
                    g.$selection.attr("aria-expanded", "false");
                    g.$selection.removeAttr("aria-activedescendant");
                    g.$selection.removeAttr("aria-owns");
                    g.$selection.focus();
                    g._detachCloseHandler(p)
                });
                p.on("enable", function () {
                    g.$selection.attr("tabindex", g._tabindex)
                });
                p.on("disable", function () {
                    g.$selection.attr("tabindex", "-1")
                })
            };
            k.prototype._attachCloseHandler = function (h) {
                var g = this;
                b(document.body).on("mousedown.select2." + h.id, function (r) {
                    var q = b(r.target);
                    var u = q.closest(".select2");
                    var s = b(".select2.select2-container--open");
                    s.each(function () {
                        var m = b(this);
                        if (this == u[0]) {
                            return
                        }
                        var n = m.data("element");
                        n.select2("close")
                    })
                })
            };
            k.prototype._detachCloseHandler = function (g) {
                b(document.body).off("mousedown.select2." + g.id)
            };
            k.prototype.position = function (n, g) {
                var h = g.find(".selection");
                h.append(n)
            };
            k.prototype.destroy = function () {
                this._detachCloseHandler(this.container)
            };
            k.prototype.update = function (g) {
                throw new Error("The `update` method must be defined in child classes.")
            };
            return k
        });
        a.define("select2/selection/single", ["jquery", "./base", "../utils", "../keys"], function (c, m, l, n) {
            function b() {
                b.__super__.constructor.apply(this, arguments)
            }

            l.Extend(b, m);
            b.prototype.render = function () {
                var g = b.__super__.render.call(this);
                g.addClass("select2-selection--single");
                g.html('<span class="select2-selection__rendered"></span><span class="select2-selection__arrow" role="presentation"><b role="presentation"></b></span>');
                return g
            };
            b.prototype.bind = function (h, p) {
                var g = this;
                b.__super__.bind.apply(this, arguments);
                var k = h.id + "-container";
                this.$selection.find(".select2-selection__rendered").attr("id", k);
                this.$selection.attr("aria-labelledby", k);
                this.$selection.on("mousedown", function (o) {
                    if (o.which !== 1) {
                        return
                    }
                    g.trigger("toggle", {originalEvent: o})
                });
                this.$selection.on("focus", function (o) {
                });
                this.$selection.on("blur", function (o) {
                });
                h.on("selection:update", function (o) {
                    g.update(o.data)
                })
            };
            b.prototype.clear = function () {
                this.$selection.find(".select2-selection__rendered").empty()
            };
            b.prototype.display = function (k) {
                var g = this.options.get("templateSelection");
                var h = this.options.get("escapeMarkup");
                return h(g(k))
            };
            b.prototype.selectionContainer = function () {
                return c("<span></span>")
            };
            b.prototype.update = function (p) {
                if (p.length === 0) {
                    this.clear();
                    return
                }
                var h = p[0];
                var g = this.display(h);
                var k = this.$selection.find(".select2-selection__rendered");
                k.empty().append(g);
                k.prop("title", h.title || h.text)
            };
            return b
        });
        a.define("select2/selection/multiple", ["jquery", "./base", "../utils"], function (b, l, c) {
            function k(h, g) {
                k.__super__.constructor.apply(this, arguments)
            }

            c.Extend(k, l);
            k.prototype.render = function () {
                var g = k.__super__.render.call(this);
                g.addClass("select2-selection--multiple");
                g.html('<ul class="select2-selection__rendered"></ul>');
                return g
            };
            k.prototype.bind = function (n, g) {
                var h = this;
                k.__super__.bind.apply(this, arguments);
                this.$selection.on("click", function (m) {
                    h.trigger("toggle", {originalEvent: m})
                });
                this.$selection.on("click", ".select2-selection__choice__remove", function (s) {
                    var r = b(this);
                    var u = r.parent();
                    var m = u.data("data");
                    h.trigger("unselect", {originalEvent: s, data: m})
                })
            };
            k.prototype.clear = function () {
                this.$selection.find(".select2-selection__rendered").empty()
            };
            k.prototype.display = function (g) {
                var h = this.options.get("templateSelection");
                var n = this.options.get("escapeMarkup");
                return n(h(g))
            };
            k.prototype.selectionContainer = function () {
                var g = b('<li class="select2-selection__choice"><span class="select2-selection__choice__remove" role="presentation">&times;</span></li>');
                return g
            };
            k.prototype.update = function (v) {
                this.clear();
                if (v.length === 0) {
                    return
                }
                var h = [];
                for (var s = 0; s < v.length; s++) {
                    var g = v[s];
                    var w = this.display(g);
                    var r = this.selectionContainer();
                    r.append(w);
                    r.prop("title", g.title || g.text);
                    r.data("data", g);
                    h.push(r)
                }
                var u = this.$selection.find(".select2-selection__rendered");
                c.appendMany(u, h)
            };
            return k
        });
        a.define("select2/selection/placeholder", ["../utils"], function (b) {
            function c(l, n, m) {
                this.placeholder = this.normalizePlaceholder(m.get("placeholder"));
                l.call(this, n, m)
            }

            c.prototype.normalizePlaceholder = function (l, k) {
                if (typeof k === "string") {
                    k = {id: "", text: k}
                }
                return k
            };
            c.prototype.createPlaceholder = function (m, l) {
                var n = this.selectionContainer();
                n.html(this.display(l));
                n.addClass("select2-selection__placeholder").removeClass("select2-selection__choice");
                return n
            };
            c.prototype.update = function (n, o) {
                var q = (o.length == 1 && o[0].id != this.placeholder.id);
                var p = o.length > 1;
                if (p || q) {
                    return n.call(this, o)
                }
                this.clear();
                var r = this.createPlaceholder(this.placeholder);
                this.$selection.find(".select2-selection__rendered").append(r)
            };
            return c
        });
        a.define("select2/selection/allowClear", ["jquery", "../keys"], function (c, h) {
            function b() {
            }

            b.prototype.bind = function (n, p, g) {
                var o = this;
                n.call(this, p, g);
                if (this.placeholder == null) {
                    if (this.options.get("debug") && window.console && console.error) {
                        console.error("Select2: The `allowClear` option should be used in combination with the `placeholder` option.")
                    }
                }
                this.$selection.on("mousedown", ".select2-selection__clear", function (k) {
                    o._handleClear(k)
                });
                p.on("keypress", function (k) {
                    o._handleKeyboardClear(k, p)
                })
            };
            b.prototype._handleClear = function (q, r) {
                if (this.options.get("disabled")) {
                    return
                }
                var u = this.$selection.find(".select2-selection__clear");
                if (u.length === 0) {
                    return
                }
                r.stopPropagation();
                var g = u.data("data");
                for (var s = 0; s < g.length; s++) {
                    var p = {data: g[s]};
                    this.trigger("unselect", p);
                    if (p.prevented) {
                        return
                    }
                }
                this.$element.val(this.placeholder.id).trigger("change");
                this.trigger("toggle")
            };
            b.prototype._handleKeyboardClear = function (g, m, n) {
                if (n.isOpen()) {
                    return
                }
                if (m.which == h.DELETE || m.which == h.BACKSPACE) {
                    this._handleClear(m)
                }
            };
            b.prototype.update = function (g, m) {
                g.call(this, m);
                if (this.$selection.find(".select2-selection__placeholder").length > 0 || m.length === 0) {
                    return
                }
                var n = c('<span class="select2-selection__clear">&times;</span>');
                n.data("data", m);
                this.$selection.find(".select2-selection__rendered").prepend(n)
            };
            return b
        });
        a.define("select2/selection/search", ["jquery", "../utils", "../keys"], function (b, c, l) {
            function k(g, n, h) {
                g.call(this, n, h)
            }

            k.prototype.render = function (h) {
                var n = b('<li class="select2-search select2-search--inline"><input class="select2-search__field" type="search" tabindex="-1" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" role="textbox" /></li>');
                this.$searchContainer = n;
                this.$search = n.find("input");
                var g = h.call(this);
                return g
            };
            k.prototype.bind = function (g, o, p) {
                var h = this;
                g.call(this, o, p);
                o.on("open", function () {
                    h.$search.attr("tabindex", 0);
                    h.$search.focus()
                });
                o.on("close", function () {
                    h.$search.attr("tabindex", -1);
                    h.$search.val("");
                    h.$search.focus()
                });
                o.on("enable", function () {
                    h.$search.prop("disabled", false)
                });
                o.on("disable", function () {
                    h.$search.prop("disabled", true)
                });
                this.$selection.on("focusin", ".select2-search--inline", function (m) {
                    h.trigger("focus", m)
                });
                this.$selection.on("focusout", ".select2-search--inline", function (m) {
                    h.trigger("blur", m)
                });
                this.$selection.on("keydown", ".select2-search--inline", function (u) {
                    u.stopPropagation();
                    h.trigger("keypress", u);
                    h._keyUpPrevented = u.isDefaultPrevented();
                    var n = u.which;
                    if (n === l.BACKSPACE && h.$search.val() === "") {
                        var s = h.$searchContainer.prev(".select2-selection__choice");
                        if (s.length > 0) {
                            var m = s.data("data");
                            h.searchRemoveChoice(m);
                            u.preventDefault()
                        }
                    }
                });
                this.$selection.on("input", ".select2-search--inline", function (m) {
                    h.$selection.off("keyup.search")
                });
                this.$selection.on("keyup.search input", ".select2-search--inline", function (m) {
                    h.handleSearch(m)
                })
            };
            k.prototype.createPlaceholder = function (h, g) {
                this.$search.attr("placeholder", g.text)
            };
            k.prototype.update = function (g, h) {
                this.$search.attr("placeholder", "");
                g.call(this, h);
                this.$selection.find(".select2-selection__rendered").append(this.$searchContainer);
                this.resizeSearch()
            };
            k.prototype.handleSearch = function () {
                this.resizeSearch();
                if (!this._keyUpPrevented) {
                    var g = this.$search.val();
                    this.trigger("query", {term: g})
                }
                this._keyUpPrevented = false
            };
            k.prototype.searchRemoveChoice = function (g, h) {
                this.trigger("unselect", {data: h});
                this.trigger("open");
                this.$search.val(h.text + " ")
            };
            k.prototype.resizeSearch = function () {
                this.$search.css("width", "25px");
                var h = "";
                if (this.$search.attr("placeholder") !== "") {
                    h = this.$selection.find(".select2-selection__rendered").innerWidth()
                } else {
                    var g = this.$search.val().length + 1;
                    h = (g * 0.75) + "em"
                }
                this.$search.css("width", h)
            };
            return k
        });
        a.define("select2/selection/eventRelay", ["jquery"], function (c) {
            function b() {
            }

            b.prototype.bind = function (o, s, u) {
                var r = this;
                var q = ["open", "opening", "close", "closing", "select", "selecting", "unselect", "unselecting"];
                var p = ["opening", "closing", "selecting", "unselecting"];
                o.call(this, s, u);
                s.on("*", function (h, g) {
                    if (c.inArray(h, q) === -1) {
                        return
                    }
                    g = g || {};
                    var k = c.Event("select2:" + h, {params: g});
                    r.$element.trigger(k);
                    if (c.inArray(h, p) === -1) {
                        return
                    }
                    g.prevented = k.isDefaultPrevented()
                })
            };
            return b
        });
        a.define("select2/translation", ["jquery", "require"], function (b, c) {
            function h(g) {
                this.dict = g || {}
            }

            h.prototype.all = function () {
                return this.dict
            };
            h.prototype.get = function (g) {
                return this.dict[g]
            };
            h.prototype.extend = function (g) {
                this.dict = b.extend({}, g.all(), this.dict)
            };
            h._cache = {};
            h.loadPath = function (g) {
                if (!(g in h._cache)) {
                    var l = c(g);
                    h._cache[g] = l
                }
                return new h(h._cache[g])
            };
            return h
        });
        a.define("select2/diacritics", [], function () {
            var b = {
                "\u24B6": "A",
                "\uFF21": "A",
                "\u00C0": "A",
                "\u00C1": "A",
                "\u00C2": "A",
                "\u1EA6": "A",
                "\u1EA4": "A",
                "\u1EAA": "A",
                "\u1EA8": "A",
                "\u00C3": "A",
                "\u0100": "A",
                "\u0102": "A",
                "\u1EB0": "A",
                "\u1EAE": "A",
                "\u1EB4": "A",
                "\u1EB2": "A",
                "\u0226": "A",
                "\u01E0": "A",
                "\u00C4": "A",
                "\u01DE": "A",
                "\u1EA2": "A",
                "\u00C5": "A",
                "\u01FA": "A",
                "\u01CD": "A",
                "\u0200": "A",
                "\u0202": "A",
                "\u1EA0": "A",
                "\u1EAC": "A",
                "\u1EB6": "A",
                "\u1E00": "A",
                "\u0104": "A",
                "\u023A": "A",
                "\u2C6F": "A",
                "\uA732": "AA",
                "\u00C6": "AE",
                "\u01FC": "AE",
                "\u01E2": "AE",
                "\uA734": "AO",
                "\uA736": "AU",
                "\uA738": "AV",
                "\uA73A": "AV",
                "\uA73C": "AY",
                "\u24B7": "B",
                "\uFF22": "B",
                "\u1E02": "B",
                "\u1E04": "B",
                "\u1E06": "B",
                "\u0243": "B",
                "\u0182": "B",
                "\u0181": "B",
                "\u24B8": "C",
                "\uFF23": "C",
                "\u0106": "C",
                "\u0108": "C",
                "\u010A": "C",
                "\u010C": "C",
                "\u00C7": "C",
                "\u1E08": "C",
                "\u0187": "C",
                "\u023B": "C",
                "\uA73E": "C",
                "\u24B9": "D",
                "\uFF24": "D",
                "\u1E0A": "D",
                "\u010E": "D",
                "\u1E0C": "D",
                "\u1E10": "D",
                "\u1E12": "D",
                "\u1E0E": "D",
                "\u0110": "D",
                "\u018B": "D",
                "\u018A": "D",
                "\u0189": "D",
                "\uA779": "D",
                "\u01F1": "DZ",
                "\u01C4": "DZ",
                "\u01F2": "Dz",
                "\u01C5": "Dz",
                "\u24BA": "E",
                "\uFF25": "E",
                "\u00C8": "E",
                "\u00C9": "E",
                "\u00CA": "E",
                "\u1EC0": "E",
                "\u1EBE": "E",
                "\u1EC4": "E",
                "\u1EC2": "E",
                "\u1EBC": "E",
                "\u0112": "E",
                "\u1E14": "E",
                "\u1E16": "E",
                "\u0114": "E",
                "\u0116": "E",
                "\u00CB": "E",
                "\u1EBA": "E",
                "\u011A": "E",
                "\u0204": "E",
                "\u0206": "E",
                "\u1EB8": "E",
                "\u1EC6": "E",
                "\u0228": "E",
                "\u1E1C": "E",
                "\u0118": "E",
                "\u1E18": "E",
                "\u1E1A": "E",
                "\u0190": "E",
                "\u018E": "E",
                "\u24BB": "F",
                "\uFF26": "F",
                "\u1E1E": "F",
                "\u0191": "F",
                "\uA77B": "F",
                "\u24BC": "G",
                "\uFF27": "G",
                "\u01F4": "G",
                "\u011C": "G",
                "\u1E20": "G",
                "\u011E": "G",
                "\u0120": "G",
                "\u01E6": "G",
                "\u0122": "G",
                "\u01E4": "G",
                "\u0193": "G",
                "\uA7A0": "G",
                "\uA77D": "G",
                "\uA77E": "G",
                "\u24BD": "H",
                "\uFF28": "H",
                "\u0124": "H",
                "\u1E22": "H",
                "\u1E26": "H",
                "\u021E": "H",
                "\u1E24": "H",
                "\u1E28": "H",
                "\u1E2A": "H",
                "\u0126": "H",
                "\u2C67": "H",
                "\u2C75": "H",
                "\uA78D": "H",
                "\u24BE": "I",
                "\uFF29": "I",
                "\u00CC": "I",
                "\u00CD": "I",
                "\u00CE": "I",
                "\u0128": "I",
                "\u012A": "I",
                "\u012C": "I",
                "\u0130": "I",
                "\u00CF": "I",
                "\u1E2E": "I",
                "\u1EC8": "I",
                "\u01CF": "I",
                "\u0208": "I",
                "\u020A": "I",
                "\u1ECA": "I",
                "\u012E": "I",
                "\u1E2C": "I",
                "\u0197": "I",
                "\u24BF": "J",
                "\uFF2A": "J",
                "\u0134": "J",
                "\u0248": "J",
                "\u24C0": "K",
                "\uFF2B": "K",
                "\u1E30": "K",
                "\u01E8": "K",
                "\u1E32": "K",
                "\u0136": "K",
                "\u1E34": "K",
                "\u0198": "K",
                "\u2C69": "K",
                "\uA740": "K",
                "\uA742": "K",
                "\uA744": "K",
                "\uA7A2": "K",
                "\u24C1": "L",
                "\uFF2C": "L",
                "\u013F": "L",
                "\u0139": "L",
                "\u013D": "L",
                "\u1E36": "L",
                "\u1E38": "L",
                "\u013B": "L",
                "\u1E3C": "L",
                "\u1E3A": "L",
                "\u0141": "L",
                "\u023D": "L",
                "\u2C62": "L",
                "\u2C60": "L",
                "\uA748": "L",
                "\uA746": "L",
                "\uA780": "L",
                "\u01C7": "LJ",
                "\u01C8": "Lj",
                "\u24C2": "M",
                "\uFF2D": "M",
                "\u1E3E": "M",
                "\u1E40": "M",
                "\u1E42": "M",
                "\u2C6E": "M",
                "\u019C": "M",
                "\u24C3": "N",
                "\uFF2E": "N",
                "\u01F8": "N",
                "\u0143": "N",
                "\u00D1": "N",
                "\u1E44": "N",
                "\u0147": "N",
                "\u1E46": "N",
                "\u0145": "N",
                "\u1E4A": "N",
                "\u1E48": "N",
                "\u0220": "N",
                "\u019D": "N",
                "\uA790": "N",
                "\uA7A4": "N",
                "\u01CA": "NJ",
                "\u01CB": "Nj",
                "\u24C4": "O",
                "\uFF2F": "O",
                "\u00D2": "O",
                "\u00D3": "O",
                "\u00D4": "O",
                "\u1ED2": "O",
                "\u1ED0": "O",
                "\u1ED6": "O",
                "\u1ED4": "O",
                "\u00D5": "O",
                "\u1E4C": "O",
                "\u022C": "O",
                "\u1E4E": "O",
                "\u014C": "O",
                "\u1E50": "O",
                "\u1E52": "O",
                "\u014E": "O",
                "\u022E": "O",
                "\u0230": "O",
                "\u00D6": "O",
                "\u022A": "O",
                "\u1ECE": "O",
                "\u0150": "O",
                "\u01D1": "O",
                "\u020C": "O",
                "\u020E": "O",
                "\u01A0": "O",
                "\u1EDC": "O",
                "\u1EDA": "O",
                "\u1EE0": "O",
                "\u1EDE": "O",
                "\u1EE2": "O",
                "\u1ECC": "O",
                "\u1ED8": "O",
                "\u01EA": "O",
                "\u01EC": "O",
                "\u00D8": "O",
                "\u01FE": "O",
                "\u0186": "O",
                "\u019F": "O",
                "\uA74A": "O",
                "\uA74C": "O",
                "\u01A2": "OI",
                "\uA74E": "OO",
                "\u0222": "OU",
                "\u24C5": "P",
                "\uFF30": "P",
                "\u1E54": "P",
                "\u1E56": "P",
                "\u01A4": "P",
                "\u2C63": "P",
                "\uA750": "P",
                "\uA752": "P",
                "\uA754": "P",
                "\u24C6": "Q",
                "\uFF31": "Q",
                "\uA756": "Q",
                "\uA758": "Q",
                "\u024A": "Q",
                "\u24C7": "R",
                "\uFF32": "R",
                "\u0154": "R",
                "\u1E58": "R",
                "\u0158": "R",
                "\u0210": "R",
                "\u0212": "R",
                "\u1E5A": "R",
                "\u1E5C": "R",
                "\u0156": "R",
                "\u1E5E": "R",
                "\u024C": "R",
                "\u2C64": "R",
                "\uA75A": "R",
                "\uA7A6": "R",
                "\uA782": "R",
                "\u24C8": "S",
                "\uFF33": "S",
                "\u1E9E": "S",
                "\u015A": "S",
                "\u1E64": "S",
                "\u015C": "S",
                "\u1E60": "S",
                "\u0160": "S",
                "\u1E66": "S",
                "\u1E62": "S",
                "\u1E68": "S",
                "\u0218": "S",
                "\u015E": "S",
                "\u2C7E": "S",
                "\uA7A8": "S",
                "\uA784": "S",
                "\u24C9": "T",
                "\uFF34": "T",
                "\u1E6A": "T",
                "\u0164": "T",
                "\u1E6C": "T",
                "\u021A": "T",
                "\u0162": "T",
                "\u1E70": "T",
                "\u1E6E": "T",
                "\u0166": "T",
                "\u01AC": "T",
                "\u01AE": "T",
                "\u023E": "T",
                "\uA786": "T",
                "\uA728": "TZ",
                "\u24CA": "U",
                "\uFF35": "U",
                "\u00D9": "U",
                "\u00DA": "U",
                "\u00DB": "U",
                "\u0168": "U",
                "\u1E78": "U",
                "\u016A": "U",
                "\u1E7A": "U",
                "\u016C": "U",
                "\u00DC": "U",
                "\u01DB": "U",
                "\u01D7": "U",
                "\u01D5": "U",
                "\u01D9": "U",
                "\u1EE6": "U",
                "\u016E": "U",
                "\u0170": "U",
                "\u01D3": "U",
                "\u0214": "U",
                "\u0216": "U",
                "\u01AF": "U",
                "\u1EEA": "U",
                "\u1EE8": "U",
                "\u1EEE": "U",
                "\u1EEC": "U",
                "\u1EF0": "U",
                "\u1EE4": "U",
                "\u1E72": "U",
                "\u0172": "U",
                "\u1E76": "U",
                "\u1E74": "U",
                "\u0244": "U",
                "\u24CB": "V",
                "\uFF36": "V",
                "\u1E7C": "V",
                "\u1E7E": "V",
                "\u01B2": "V",
                "\uA75E": "V",
                "\u0245": "V",
                "\uA760": "VY",
                "\u24CC": "W",
                "\uFF37": "W",
                "\u1E80": "W",
                "\u1E82": "W",
                "\u0174": "W",
                "\u1E86": "W",
                "\u1E84": "W",
                "\u1E88": "W",
                "\u2C72": "W",
                "\u24CD": "X",
                "\uFF38": "X",
                "\u1E8A": "X",
                "\u1E8C": "X",
                "\u24CE": "Y",
                "\uFF39": "Y",
                "\u1EF2": "Y",
                "\u00DD": "Y",
                "\u0176": "Y",
                "\u1EF8": "Y",
                "\u0232": "Y",
                "\u1E8E": "Y",
                "\u0178": "Y",
                "\u1EF6": "Y",
                "\u1EF4": "Y",
                "\u01B3": "Y",
                "\u024E": "Y",
                "\u1EFE": "Y",
                "\u24CF": "Z",
                "\uFF3A": "Z",
                "\u0179": "Z",
                "\u1E90": "Z",
                "\u017B": "Z",
                "\u017D": "Z",
                "\u1E92": "Z",
                "\u1E94": "Z",
                "\u01B5": "Z",
                "\u0224": "Z",
                "\u2C7F": "Z",
                "\u2C6B": "Z",
                "\uA762": "Z",
                "\u24D0": "a",
                "\uFF41": "a",
                "\u1E9A": "a",
                "\u00E0": "a",
                "\u00E1": "a",
                "\u00E2": "a",
                "\u1EA7": "a",
                "\u1EA5": "a",
                "\u1EAB": "a",
                "\u1EA9": "a",
                "\u00E3": "a",
                "\u0101": "a",
                "\u0103": "a",
                "\u1EB1": "a",
                "\u1EAF": "a",
                "\u1EB5": "a",
                "\u1EB3": "a",
                "\u0227": "a",
                "\u01E1": "a",
                "\u00E4": "a",
                "\u01DF": "a",
                "\u1EA3": "a",
                "\u00E5": "a",
                "\u01FB": "a",
                "\u01CE": "a",
                "\u0201": "a",
                "\u0203": "a",
                "\u1EA1": "a",
                "\u1EAD": "a",
                "\u1EB7": "a",
                "\u1E01": "a",
                "\u0105": "a",
                "\u2C65": "a",
                "\u0250": "a",
                "\uA733": "aa",
                "\u00E6": "ae",
                "\u01FD": "ae",
                "\u01E3": "ae",
                "\uA735": "ao",
                "\uA737": "au",
                "\uA739": "av",
                "\uA73B": "av",
                "\uA73D": "ay",
                "\u24D1": "b",
                "\uFF42": "b",
                "\u1E03": "b",
                "\u1E05": "b",
                "\u1E07": "b",
                "\u0180": "b",
                "\u0183": "b",
                "\u0253": "b",
                "\u24D2": "c",
                "\uFF43": "c",
                "\u0107": "c",
                "\u0109": "c",
                "\u010B": "c",
                "\u010D": "c",
                "\u00E7": "c",
                "\u1E09": "c",
                "\u0188": "c",
                "\u023C": "c",
                "\uA73F": "c",
                "\u2184": "c",
                "\u24D3": "d",
                "\uFF44": "d",
                "\u1E0B": "d",
                "\u010F": "d",
                "\u1E0D": "d",
                "\u1E11": "d",
                "\u1E13": "d",
                "\u1E0F": "d",
                "\u0111": "d",
                "\u018C": "d",
                "\u0256": "d",
                "\u0257": "d",
                "\uA77A": "d",
                "\u01F3": "dz",
                "\u01C6": "dz",
                "\u24D4": "e",
                "\uFF45": "e",
                "\u00E8": "e",
                "\u00E9": "e",
                "\u00EA": "e",
                "\u1EC1": "e",
                "\u1EBF": "e",
                "\u1EC5": "e",
                "\u1EC3": "e",
                "\u1EBD": "e",
                "\u0113": "e",
                "\u1E15": "e",
                "\u1E17": "e",
                "\u0115": "e",
                "\u0117": "e",
                "\u00EB": "e",
                "\u1EBB": "e",
                "\u011B": "e",
                "\u0205": "e",
                "\u0207": "e",
                "\u1EB9": "e",
                "\u1EC7": "e",
                "\u0229": "e",
                "\u1E1D": "e",
                "\u0119": "e",
                "\u1E19": "e",
                "\u1E1B": "e",
                "\u0247": "e",
                "\u025B": "e",
                "\u01DD": "e",
                "\u24D5": "f",
                "\uFF46": "f",
                "\u1E1F": "f",
                "\u0192": "f",
                "\uA77C": "f",
                "\u24D6": "g",
                "\uFF47": "g",
                "\u01F5": "g",
                "\u011D": "g",
                "\u1E21": "g",
                "\u011F": "g",
                "\u0121": "g",
                "\u01E7": "g",
                "\u0123": "g",
                "\u01E5": "g",
                "\u0260": "g",
                "\uA7A1": "g",
                "\u1D79": "g",
                "\uA77F": "g",
                "\u24D7": "h",
                "\uFF48": "h",
                "\u0125": "h",
                "\u1E23": "h",
                "\u1E27": "h",
                "\u021F": "h",
                "\u1E25": "h",
                "\u1E29": "h",
                "\u1E2B": "h",
                "\u1E96": "h",
                "\u0127": "h",
                "\u2C68": "h",
                "\u2C76": "h",
                "\u0265": "h",
                "\u0195": "hv",
                "\u24D8": "i",
                "\uFF49": "i",
                "\u00EC": "i",
                "\u00ED": "i",
                "\u00EE": "i",
                "\u0129": "i",
                "\u012B": "i",
                "\u012D": "i",
                "\u00EF": "i",
                "\u1E2F": "i",
                "\u1EC9": "i",
                "\u01D0": "i",
                "\u0209": "i",
                "\u020B": "i",
                "\u1ECB": "i",
                "\u012F": "i",
                "\u1E2D": "i",
                "\u0268": "i",
                "\u0131": "i",
                "\u24D9": "j",
                "\uFF4A": "j",
                "\u0135": "j",
                "\u01F0": "j",
                "\u0249": "j",
                "\u24DA": "k",
                "\uFF4B": "k",
                "\u1E31": "k",
                "\u01E9": "k",
                "\u1E33": "k",
                "\u0137": "k",
                "\u1E35": "k",
                "\u0199": "k",
                "\u2C6A": "k",
                "\uA741": "k",
                "\uA743": "k",
                "\uA745": "k",
                "\uA7A3": "k",
                "\u24DB": "l",
                "\uFF4C": "l",
                "\u0140": "l",
                "\u013A": "l",
                "\u013E": "l",
                "\u1E37": "l",
                "\u1E39": "l",
                "\u013C": "l",
                "\u1E3D": "l",
                "\u1E3B": "l",
                "\u017F": "l",
                "\u0142": "l",
                "\u019A": "l",
                "\u026B": "l",
                "\u2C61": "l",
                "\uA749": "l",
                "\uA781": "l",
                "\uA747": "l",
                "\u01C9": "lj",
                "\u24DC": "m",
                "\uFF4D": "m",
                "\u1E3F": "m",
                "\u1E41": "m",
                "\u1E43": "m",
                "\u0271": "m",
                "\u026F": "m",
                "\u24DD": "n",
                "\uFF4E": "n",
                "\u01F9": "n",
                "\u0144": "n",
                "\u00F1": "n",
                "\u1E45": "n",
                "\u0148": "n",
                "\u1E47": "n",
                "\u0146": "n",
                "\u1E4B": "n",
                "\u1E49": "n",
                "\u019E": "n",
                "\u0272": "n",
                "\u0149": "n",
                "\uA791": "n",
                "\uA7A5": "n",
                "\u01CC": "nj",
                "\u24DE": "o",
                "\uFF4F": "o",
                "\u00F2": "o",
                "\u00F3": "o",
                "\u00F4": "o",
                "\u1ED3": "o",
                "\u1ED1": "o",
                "\u1ED7": "o",
                "\u1ED5": "o",
                "\u00F5": "o",
                "\u1E4D": "o",
                "\u022D": "o",
                "\u1E4F": "o",
                "\u014D": "o",
                "\u1E51": "o",
                "\u1E53": "o",
                "\u014F": "o",
                "\u022F": "o",
                "\u0231": "o",
                "\u00F6": "o",
                "\u022B": "o",
                "\u1ECF": "o",
                "\u0151": "o",
                "\u01D2": "o",
                "\u020D": "o",
                "\u020F": "o",
                "\u01A1": "o",
                "\u1EDD": "o",
                "\u1EDB": "o",
                "\u1EE1": "o",
                "\u1EDF": "o",
                "\u1EE3": "o",
                "\u1ECD": "o",
                "\u1ED9": "o",
                "\u01EB": "o",
                "\u01ED": "o",
                "\u00F8": "o",
                "\u01FF": "o",
                "\u0254": "o",
                "\uA74B": "o",
                "\uA74D": "o",
                "\u0275": "o",
                "\u01A3": "oi",
                "\u0223": "ou",
                "\uA74F": "oo",
                "\u24DF": "p",
                "\uFF50": "p",
                "\u1E55": "p",
                "\u1E57": "p",
                "\u01A5": "p",
                "\u1D7D": "p",
                "\uA751": "p",
                "\uA753": "p",
                "\uA755": "p",
                "\u24E0": "q",
                "\uFF51": "q",
                "\u024B": "q",
                "\uA757": "q",
                "\uA759": "q",
                "\u24E1": "r",
                "\uFF52": "r",
                "\u0155": "r",
                "\u1E59": "r",
                "\u0159": "r",
                "\u0211": "r",
                "\u0213": "r",
                "\u1E5B": "r",
                "\u1E5D": "r",
                "\u0157": "r",
                "\u1E5F": "r",
                "\u024D": "r",
                "\u027D": "r",
                "\uA75B": "r",
                "\uA7A7": "r",
                "\uA783": "r",
                "\u24E2": "s",
                "\uFF53": "s",
                "\u00DF": "s",
                "\u015B": "s",
                "\u1E65": "s",
                "\u015D": "s",
                "\u1E61": "s",
                "\u0161": "s",
                "\u1E67": "s",
                "\u1E63": "s",
                "\u1E69": "s",
                "\u0219": "s",
                "\u015F": "s",
                "\u023F": "s",
                "\uA7A9": "s",
                "\uA785": "s",
                "\u1E9B": "s",
                "\u24E3": "t",
                "\uFF54": "t",
                "\u1E6B": "t",
                "\u1E97": "t",
                "\u0165": "t",
                "\u1E6D": "t",
                "\u021B": "t",
                "\u0163": "t",
                "\u1E71": "t",
                "\u1E6F": "t",
                "\u0167": "t",
                "\u01AD": "t",
                "\u0288": "t",
                "\u2C66": "t",
                "\uA787": "t",
                "\uA729": "tz",
                "\u24E4": "u",
                "\uFF55": "u",
                "\u00F9": "u",
                "\u00FA": "u",
                "\u00FB": "u",
                "\u0169": "u",
                "\u1E79": "u",
                "\u016B": "u",
                "\u1E7B": "u",
                "\u016D": "u",
                "\u00FC": "u",
                "\u01DC": "u",
                "\u01D8": "u",
                "\u01D6": "u",
                "\u01DA": "u",
                "\u1EE7": "u",
                "\u016F": "u",
                "\u0171": "u",
                "\u01D4": "u",
                "\u0215": "u",
                "\u0217": "u",
                "\u01B0": "u",
                "\u1EEB": "u",
                "\u1EE9": "u",
                "\u1EEF": "u",
                "\u1EED": "u",
                "\u1EF1": "u",
                "\u1EE5": "u",
                "\u1E73": "u",
                "\u0173": "u",
                "\u1E77": "u",
                "\u1E75": "u",
                "\u0289": "u",
                "\u24E5": "v",
                "\uFF56": "v",
                "\u1E7D": "v",
                "\u1E7F": "v",
                "\u028B": "v",
                "\uA75F": "v",
                "\u028C": "v",
                "\uA761": "vy",
                "\u24E6": "w",
                "\uFF57": "w",
                "\u1E81": "w",
                "\u1E83": "w",
                "\u0175": "w",
                "\u1E87": "w",
                "\u1E85": "w",
                "\u1E98": "w",
                "\u1E89": "w",
                "\u2C73": "w",
                "\u24E7": "x",
                "\uFF58": "x",
                "\u1E8B": "x",
                "\u1E8D": "x",
                "\u24E8": "y",
                "\uFF59": "y",
                "\u1EF3": "y",
                "\u00FD": "y",
                "\u0177": "y",
                "\u1EF9": "y",
                "\u0233": "y",
                "\u1E8F": "y",
                "\u00FF": "y",
                "\u1EF7": "y",
                "\u1E99": "y",
                "\u1EF5": "y",
                "\u01B4": "y",
                "\u024F": "y",
                "\u1EFF": "y",
                "\u24E9": "z",
                "\uFF5A": "z",
                "\u017A": "z",
                "\u1E91": "z",
                "\u017C": "z",
                "\u017E": "z",
                "\u1E93": "z",
                "\u1E95": "z",
                "\u01B6": "z",
                "\u0225": "z",
                "\u0240": "z",
                "\u2C6C": "z",
                "\uA763": "z",
                "\u0386": "\u0391",
                "\u0388": "\u0395",
                "\u0389": "\u0397",
                "\u038A": "\u0399",
                "\u03AA": "\u0399",
                "\u038C": "\u039F",
                "\u038E": "\u03A5",
                "\u03AB": "\u03A5",
                "\u038F": "\u03A9",
                "\u03AC": "\u03B1",
                "\u03AD": "\u03B5",
                "\u03AE": "\u03B7",
                "\u03AF": "\u03B9",
                "\u03CA": "\u03B9",
                "\u0390": "\u03B9",
                "\u03CC": "\u03BF",
                "\u03CD": "\u03C5",
                "\u03CB": "\u03C5",
                "\u03B0": "\u03C5",
                "\u03C9": "\u03C9",
                "\u03C2": "\u03C3"
            };
            return b
        });
        a.define("select2/data/base", ["../utils"], function (b) {
            function c(l, k) {
                c.__super__.constructor.call(this)
            }

            b.Extend(c, b.Observable);
            c.prototype.current = function (h) {
                throw new Error("The `current` method must be defined in child classes.")
            };
            c.prototype.query = function (l, k) {
                throw new Error("The `query` method must be defined in child classes.")
            };
            c.prototype.bind = function (l, k) {
            };
            c.prototype.destroy = function () {
            };
            c.prototype.generateResultId = function (n, m) {
                var l = n.id + "-result-";
                l += b.generateChars(4);
                if (m.id != null) {
                    l += "-" + m.id.toString()
                } else {
                    l += "-" + b.generateChars(4)
                }
                return l
            };
            return c
        });
        a.define("select2/data/select", ["./base", "../utils", "jquery"], function (l, b, c) {
            function k(h, g) {
                this.$element = h;
                this.options = g;
                k.__super__.constructor.call(this)
            }

            b.Extend(k, l);
            k.prototype.current = function (g) {
                var h = [];
                var n = this;
                this.$element.find(":selected").each(function () {
                    var m = c(this);
                    var p = n.item(m);
                    h.push(p)
                });
                g(h)
            };
            k.prototype.select = function (h) {
                var n = this;
                h.selected = true;
                if (c(h.element).is("option")) {
                    h.element.selected = true;
                    this.$element.trigger("change");
                    return
                }
                if (this.$element.prop("multiple")) {
                    this.current(function (u) {
                        var r = [];
                        h = [h];
                        h.push.apply(h, u);
                        for (var s = 0; s < h.length; s++) {
                            var m = h[s].id;
                            if (c.inArray(m, r) === -1) {
                                r.push(m)
                            }
                        }
                        n.$element.val(r);
                        n.$element.trigger("change")
                    })
                } else {
                    var g = h.id;
                    this.$element.val(g);
                    this.$element.trigger("change")
                }
            };
            k.prototype.unselect = function (g) {
                var h = this;
                if (!this.$element.prop("multiple")) {
                    return
                }
                g.selected = false;
                if (c(g.element).is("option")) {
                    g.element.selected = false;
                    this.$element.trigger("change");
                    return
                }
                this.current(function (q) {
                    var s = [];
                    for (var u = 0; u < q.length; u++) {
                        var r = q[u].id;
                        if (r !== g.id && c.inArray(r, s) === -1) {
                            s.push(r)
                        }
                    }
                    h.$element.val(s);
                    h.$element.trigger("change")
                })
            };
            k.prototype.bind = function (n, g) {
                var h = this;
                this.container = n;
                n.on("select", function (m) {
                    h.select(m.data)
                });
                n.on("unselect", function (m) {
                    h.unselect(m.data)
                })
            };
            k.prototype.destroy = function () {
                this.$element.find("*").each(function () {
                    c.removeData(this, "data")
                })
            };
            k.prototype.query = function (r, q) {
                var g = [];
                var h = this;
                var p = this.$element.children();
                p.each(function () {
                    var m = c(this);
                    if (!m.is("option") && !m.is("optgroup")) {
                        return
                    }
                    var o = h.item(m);
                    var n = h.matches(r, o);
                    if (n !== null) {
                        g.push(n)
                    }
                });
                q({results: g})
            };
            k.prototype.addOptions = function (g) {
                b.appendMany(this.$element, g)
            };
            k.prototype.option = function (h) {
                var o;
                if (h.children) {
                    o = document.createElement("optgroup");
                    o.label = h.text
                } else {
                    o = document.createElement("option");
                    if (o.textContent !== undefined) {
                        o.textContent = h.text
                    } else {
                        o.innerText = h.text
                    }
                }
                if (h.id) {
                    o.value = h.id
                }
                if (h.disabled) {
                    o.disabled = true
                }
                if (h.selected) {
                    o.selected = true
                }
                if (h.title) {
                    o.title = h.title
                }
                var g = c(o);
                var p = this._normalizeItem(h);
                p.element = o;
                c.data(o, "data", p);
                return g
            };
            k.prototype.item = function (v) {
                var w = {};
                w = c.data(v[0], "data");
                if (w != null) {
                    return w
                }
                if (v.is("option")) {
                    w = {
                        id: v.val(),
                        text: v.text(),
                        disabled: v.prop("disabled"),
                        selected: v.prop("selected"),
                        title: v.prop("title")
                    }
                } else {
                    if (v.is("optgroup")) {
                        w = {
                            text: v.prop("label"),
                            children: [],
                            title: v.prop("title")
                        };
                        var r = v.children("option");
                        var h = [];
                        for (var s = 0; s < r.length; s++) {
                            var g = c(r[s]);
                            var u = this.item(g);
                            h.push(u)
                        }
                        w.children = h
                    }
                }
                w = this._normalizeItem(w);
                w.element = v[0];
                c.data(v[0], "data", w);
                return w
            };
            k.prototype._normalizeItem = function (h) {
                if (!c.isPlainObject(h)) {
                    h = {id: h, text: h}
                }
                h = c.extend({}, {text: ""}, h);
                var g = {selected: false, disabled: false};
                if (h.id != null) {
                    h.id = h.id.toString()
                }
                if (h.text != null) {
                    h.text = h.text.toString()
                }
                if (h._resultId == null && h.id && this.container != null) {
                    h._resultId = this.generateResultId(this.container, h)
                }
                return c.extend({}, g, h)
            };
            k.prototype.matches = function (g, n) {
                var h = this.options.get("matcher");
                return h(g, n)
            };
            return k
        });
        a.define("select2/data/array", ["./select", "../utils", "jquery"], function (l, c, k) {
            function b(n, h) {
                var g = h.get("data") || [];
                b.__super__.constructor.call(this, n, h);
                this.addOptions(this.convertToOptions(g))
            }

            c.Extend(b, l);
            b.prototype.select = function (h) {
                var g = this.$element.find("option").filter(function (o, p) {
                    return p.value == h.id.toString()
                });
                if (g.length === 0) {
                    g = this.option(h);
                    this.addOptions(g)
                }
                b.__super__.select.call(this, h)
            };
            b.prototype.convertToOptions = function (D) {
                var H = this;
                var A = this.$element.find("option");
                var E = A.map(function () {
                    return H.item(k(this)).id
                }).get();
                var B = [];

                function K(m) {
                    return function () {
                        return k(this).val() == m.id
                    }
                }

                for (var L = 0; L < D.length; L++) {
                    var I = this._normalizeItem(D[L]);
                    if (k.inArray(I.id, E) >= 0) {
                        var h = A.filter(K(I));
                        var g = this.item(h);
                        var G = k.extend(true, {}, g, I);
                        var C = this.option(g);
                        h.replaceWith(C);
                        continue
                    }
                    var F = this.option(I);
                    if (I.children) {
                        var J = this.convertToOptions(I.children);
                        c.appendMany(F, J)
                    }
                    B.push(F)
                }
                return B
            };
            return b
        });
        a.define("select2/data/ajax", ["./array", "../utils", "jquery"], function (b, c, k) {
            function l(h, g) {
                this.ajaxOptions = this._applyDefaults(g.get("ajax"));
                if (this.ajaxOptions.processResults != null) {
                    this.processResults = this.ajaxOptions.processResults
                }
                b.__super__.constructor.call(this, h, g)
            }

            c.Extend(l, b);
            l.prototype._applyDefaults = function (h) {
                var g = {
                    data: function (n) {
                        return {q: n.term}
                    }, transport: function (r, s, u) {
                        var q = k.ajax(r);
                        q.then(s);
                        q.fail(u);
                        return q
                    }
                };
                return k.extend({}, g, h, true)
            };
            l.prototype.processResults = function (g) {
                return g
            };
            l.prototype.query = function (s, r) {
                var u = [];
                var q = this;
                if (this._request != null) {
                    if (k.isFunction(this._request.abort)) {
                        this._request.abort()
                    }
                    this._request = null
                }
                var h = k.extend({type: "GET"}, this.ajaxOptions);
                if (typeof h.url === "function") {
                    h.url = h.url(s)
                }
                if (typeof h.data === "function") {
                    h.data = h.data(s)
                }
                function g() {
                    var m = h.transport(h, function (n) {
                        var o = q.processResults(n, s);
                        if (q.options.get("debug") && window.console && console.error) {
                            if (!o || !o.results || !k.isArray(o.results)) {
                                console.error("Select2: The AJAX results did not return an array in the `results` key of the response.")
                            }
                        }
                        r(o)
                    }, function () {
                    });
                    q._request = m
                }

                if (this.ajaxOptions.delay && s.term !== "") {
                    if (this._queryTimeout) {
                        window.clearTimeout(this._queryTimeout)
                    }
                    this._queryTimeout = window.setTimeout(g, this.ajaxOptions.delay)
                } else {
                    g()
                }
            };
            return l
        });
        a.define("select2/data/tags", ["jquery"], function (b) {
            function c(A, x, u) {
                var s = u.get("tags");
                var y = u.get("createTag");
                if (y !== undefined) {
                    this.createTag = y
                }
                A.call(this, x, u);
                if (b.isArray(s)) {
                    for (var v = 0; v < s.length; v++) {
                        var r = s[v];
                        var w = this._normalizeItem(r);
                        var B = this.option(w);
                        this.$element.append(B)
                    }
                }
            }

            c.prototype.query = function (q, p, n) {
                var r = this;
                this._removeOldTags();
                if (p.term == null || p.page != null) {
                    q.call(this, p, n);
                    return
                }
                function o(g, l) {
                    var B = g.results;
                    for (var A = 0; A < B.length; A++) {
                        var y = B[A];
                        var k = (y.children != null && !o({results: y.children}, true));
                        var h = y.text === p.term;
                        if (h || k) {
                            if (l) {
                                return false
                            }
                            g.data = B;
                            n(g);
                            return
                        }
                    }
                    if (l) {
                        return true
                    }
                    var x = r.createTag(p);
                    if (x != null) {
                        var m = r.option(x);
                        m.attr("data-select2-tag", true);
                        r.addOptions([m]);
                        r.insertTag(B, x)
                    }
                    g.results = B;
                    n(g)
                }

                q.call(this, p, o)
            };
            c.prototype.createTag = function (m, l) {
                var n = b.trim(l.term);
                if (n === "") {
                    return null
                }
                return {id: n, text: n}
            };
            c.prototype.insertTag = function (m, l, n) {
                l.unshift(n)
            };
            c.prototype._removeOldTags = function (l) {
                var m = this._lastTag;
                var n = this.$element.find("option[data-select2-tag]");
                n.each(function () {
                    if (this.selected) {
                        return
                    }
                    b(this).remove()
                })
            };
            return c
        });
        a.define("select2/data/tokenizer", ["jquery"], function (b) {
            function c(m, p, o) {
                var n = o.get("tokenizer");
                if (n !== undefined) {
                    this.tokenizer = n
                }
                m.call(this, p, o)
            }

            c.prototype.bind = function (m, n, l) {
                m.call(this, n, l);
                this.$search = n.dropdown.$search || n.selection.$search || l.find(".select2-search__field")
            };
            c.prototype.query = function (q, p, u) {
                var r = this;

                function s(g) {
                    r.select(g)
                }

                p.term = p.term || "";
                var o = this.tokenizer(p, this.options, s);
                if (o.term !== p.term) {
                    if (this.$search.length) {
                        this.$search.val(o.term);
                        this.$search.focus()
                    }
                    p.term = o.term
                }
                q.call(this, p, u)
            };
            c.prototype.tokenizer = function (x, D, G, H) {
                var C = G.get("tokenSeparators") || [];
                var E = D.term;
                var A = 0;
                var y = this.createTag || function (g) {
                    return {id: g.term, text: g.term}
                };
                while (A < E.length) {
                    var v = E[A];
                    if (b.inArray(v, C) === -1) {
                        A++;
                        continue
                    }
                    var F = E.substr(0, A);
                    var w = b.extend({}, D, {term: F});
                    var B = y(w);
                    H(B);
                    E = E.substr(A + 1) || "";
                    A = 0
                }
                return {term: E}
            };
            return c
        });
        a.define("select2/data/minimumInputLength", [], function () {
            function b(c, k, l) {
                this.minimumInputLength = l.get("minimumInputLength");
                c.call(this, k, l)
            }

            b.prototype.query = function (l, k, c) {
                k.term = k.term || "";
                if (k.term.length < this.minimumInputLength) {
                    this.trigger("results:message", {
                        message: "inputTooShort",
                        args: {
                            minimum: this.minimumInputLength,
                            input: k.term,
                            params: k
                        }
                    });
                    return
                }
                l.call(this, k, c)
            };
            return b
        });
        a.define("select2/data/maximumInputLength", [], function () {
            function b(c, k, l) {
                this.maximumInputLength = l.get("maximumInputLength");
                c.call(this, k, l)
            }

            b.prototype.query = function (l, k, c) {
                k.term = k.term || "";
                if (this.maximumInputLength > 0 && k.term.length > this.maximumInputLength) {
                    this.trigger("results:message", {
                        message: "inputTooLong",
                        args: {
                            maximum: this.maximumInputLength,
                            input: k.term,
                            params: k
                        }
                    });
                    return
                }
                l.call(this, k, c)
            };
            return b
        });
        a.define("select2/data/maximumSelectionLength", [], function () {
            function b(c, k, l) {
                this.maximumSelectionLength = l.get("maximumSelectionLength");
                c.call(this, k, l)
            }

            b.prototype.query = function (m, l, c) {
                var n = this;
                this.current(function (h) {
                    var g = h != null ? h.length : 0;
                    if (n.maximumSelectionLength > 0 && g >= n.maximumSelectionLength) {
                        n.trigger("results:message", {
                            message: "maximumSelected",
                            args: {maximum: n.maximumSelectionLength}
                        });
                        return
                    }
                    m.call(n, l, c)
                })
            };
            return b
        });
        a.define("select2/dropdown", ["jquery", "./utils"], function (b, c) {
            function h(l, g) {
                this.$element = l;
                this.options = g;
                h.__super__.constructor.call(this)
            }

            c.Extend(h, c.Observable);
            h.prototype.render = function () {
                var g = b('<span class="select2-dropdown"><span class="select2-results"></span></span>');
                g.attr("dir", this.options.get("dir"));
                this.$dropdown = g;
                return g
            };
            h.prototype.position = function (l, g) {
            };
            h.prototype.destroy = function () {
                this.$dropdown.remove()
            };
            return h
        });
        a.define("select2/dropdown/search", ["jquery", "../utils"], function (b, c) {
            function h() {
            }

            h.prototype.render = function (m) {
                var g = m.call(this);
                var n = b('<span class="select2-search select2-search--dropdown"><input class="select2-search__field" type="search" tabindex="-1" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" role="textbox" /></span>');
                this.$searchContainer = n;
                this.$search = n.find("input");
                g.prepend(n);
                return g
            };
            h.prototype.bind = function (n, p, g) {
                var o = this;
                n.call(this, p, g);
                this.$search.on("keydown", function (k) {
                    o.trigger("keypress", k);
                    o._keyUpPrevented = k.isDefaultPrevented()
                });
                this.$search.on("input", function (k) {
                    b(this).off("keyup")
                });
                this.$search.on("keyup input", function (k) {
                    o.handleSearch(k)
                });
                p.on("open", function () {
                    o.$search.attr("tabindex", 0);
                    o.$search.focus();
                    window.setTimeout(function () {
                        o.$search.focus()
                    }, 0)
                });
                p.on("close", function () {
                    o.$search.attr("tabindex", -1);
                    o.$search.val("")
                });
                p.on("results:all", function (k) {
                    if (k.query.term == null || k.query.term === "") {
                        var l = o.showSearch(k);
                        if (l) {
                            o.$searchContainer.removeClass("select2-search--hide")
                        } else {
                            o.$searchContainer.addClass("select2-search--hide")
                        }
                    }
                })
            };
            h.prototype.handleSearch = function (l) {
                if (!this._keyUpPrevented) {
                    var g = this.$search.val();
                    this.trigger("query", {term: g})
                }
                this._keyUpPrevented = false
            };
            h.prototype.showSearch = function (l, g) {
                return true
            };
            return h
        });
        a.define("select2/dropdown/hidePlaceholder", [], function () {
            function b(l, n, m, c) {
                this.placeholder = this.normalizePlaceholder(m.get("placeholder"));
                l.call(this, n, m, c)
            }

            b.prototype.append = function (c, h) {
                h.results = this.removePlaceholder(h.results);
                c.call(this, h)
            };
            b.prototype.normalizePlaceholder = function (h, c) {
                if (typeof c === "string") {
                    c = {id: "", text: c}
                }
                return c
            };
            b.prototype.removePlaceholder = function (p, m) {
                var n = m.slice(0);
                for (var c = m.length - 1; c >= 0; c--) {
                    var o = m[c];
                    if (this.placeholder.id === o.id) {
                        n.splice(c, 1)
                    }
                }
                return n
            };
            return b
        });
        a.define("select2/dropdown/infiniteScroll", ["jquery"], function (b) {
            function c(n, p, o, m) {
                this.lastParams = {};
                n.call(this, p, o, m);
                this.$loadingMore = this.createLoadingMore();
                this.loading = false
            }

            c.prototype.append = function (k, l) {
                this.$loadingMore.remove();
                this.loading = false;
                k.call(this, l);
                if (this.showLoadingMore(l)) {
                    this.$results.append(this.$loadingMore)
                }
            };
            c.prototype.bind = function (n, p, m) {
                var o = this;
                n.call(this, p, m);
                p.on("query", function (g) {
                    o.lastParams = g;
                    o.loading = true
                });
                p.on("query:append", function (g) {
                    o.lastParams = g;
                    o.loading = true
                });
                this.$results.on("scroll", function () {
                    var h = b.contains(document.documentElement, o.$loadingMore[0]);
                    if (o.loading || !h) {
                        return
                    }
                    var k = o.$results.offset().top + o.$results.outerHeight(false);
                    var g = o.$loadingMore.offset().top + o.$loadingMore.outerHeight(false);
                    if (k + 50 >= g) {
                        o.loadMore()
                    }
                })
            };
            c.prototype.loadMore = function () {
                this.loading = true;
                var h = b.extend({}, {page: 1}, this.lastParams);
                h.page++;
                this.trigger("query:append", h)
            };
            c.prototype.showLoadingMore = function (l, k) {
                return k.pagination && k.pagination.more
            };
            c.prototype.createLoadingMore = function () {
                var k = b('<li class="option load-more" role="treeitem"></li>');
                var l = this.options.get("translations").get("loadingMore");
                k.html(l(this.lastParams));
                return k
            };
            return c
        });
        a.define("select2/dropdown/attachBody", ["jquery", "../utils"], function (b, c) {
            function h(g, n, m) {
                this.$dropdownParent = m.get("dropdownParent") || document.body;
                g.call(this, n, m)
            }

            h.prototype.bind = function (g, q, r) {
                var o = this;
                var p = false;
                g.call(this, q, r);
                q.on("open", function () {
                    o._showDropdown();
                    o._attachPositioningHandler(q);
                    if (!p) {
                        p = true;
                        q.on("results:all", function () {
                            o._positionDropdown();
                            o._resizeDropdown()
                        });
                        q.on("results:append", function () {
                            o._positionDropdown();
                            o._resizeDropdown()
                        })
                    }
                });
                q.on("close", function () {
                    o._hideDropdown();
                    o._detachPositioningHandler(q)
                });
                this.$dropdownContainer.on("mousedown", function (k) {
                    k.stopPropagation()
                })
            };
            h.prototype.position = function (n, m, g) {
                m.attr("class", g.attr("class"));
                m.removeClass("select2");
                m.addClass("select2-container--open");
                m.css({position: "absolute", top: -999999});
                this.$container = g
            };
            h.prototype.render = function (n) {
                var g = b("<span></span>");
                var m = n.call(this);
                g.append(m);
                this.$dropdownContainer = g;
                return g
            };
            h.prototype._hideDropdown = function (g) {
                this.$dropdownContainer.detach()
            };
            h.prototype._attachPositioningHandler = function (r) {
                var q = this;
                var g = "scroll.select2." + r.id;
                var s = "resize.select2." + r.id;
                var u = "orientationchange.select2." + r.id;
                var p = this.$container.parents().filter(c.hasScroll);
                p.each(function () {
                    b(this).data("select2-scroll-position", {
                        x: b(this).scrollLeft(),
                        y: b(this).scrollTop()
                    })
                });
                p.on(g, function (k) {
                    var l = b(this).data("select2-scroll-position");
                    b(this).scrollTop(l.y)
                });
                b(window).on(g + " " + s + " " + u, function (k) {
                    q._positionDropdown();
                    q._resizeDropdown()
                })
            };
            h.prototype._detachPositioningHandler = function (q) {
                var o = "scroll.select2." + q.id;
                var r = "resize.select2." + q.id;
                var g = "orientationchange.select2." + q.id;
                var p = this.$container.parents().filter(c.hasScroll);
                p.off(o);
                b(window).off(o + " " + r + " " + g)
            };
            h.prototype._positionDropdown = function () {
                var C = b(window);
                var F = this.$dropdown.hasClass("select2-dropdown--above");
                var D = this.$dropdown.hasClass("select2-dropdown--below");
                var H = null;
                var A = this.$container.position();
                var B = this.$container.offset();
                B.bottom = B.top + this.$container.outerHeight(false);
                var E = {height: this.$container.outerHeight(false)};
                E.top = B.top;
                E.bottom = B.top + E.height;
                var G = {height: this.$dropdown.outerHeight(false)};
                var w = {
                    top: C.scrollTop(),
                    bottom: C.scrollTop() + C.height()
                };
                var x = w.top < (B.top - G.height);
                var g = w.bottom > (B.bottom + G.height);
                var y = {left: B.left, top: E.bottom};
                if (!F && !D) {
                    H = "below"
                }
                if (!g && x && !F) {
                    H = "above"
                } else {
                    if (!x && g && F) {
                        H = "below"
                    }
                }
                if (H == "above" || (F && H !== "below")) {
                    y.top = E.top - G.height
                }
                if (H != null) {
                    this.$dropdown.removeClass("select2-dropdown--below select2-dropdown--above").addClass("select2-dropdown--" + H);
                    this.$container.removeClass("select2-container--below select2-container--above").addClass("select2-container--" + H)
                }
                this.$dropdownContainer.css(y)
            };
            h.prototype._resizeDropdown = function () {
                this.$dropdownContainer.width();
                var g = {width: this.$container.outerWidth(false) + "px"};
                if (this.options.get("dropdownAutoWidth")) {
                    g.minWidth = g.width;
                    g.width = "auto"
                }
                this.$dropdown.css(g)
            };
            h.prototype._showDropdown = function (g) {
                this.$dropdownContainer.appendTo(this.$dropdownParent);
                this._positionDropdown();
                this._resizeDropdown()
            };
            return h
        });
        a.define("select2/dropdown/minimumResultsForSearch", [], function () {
            function b(n) {
                var o = 0;
                for (var m = 0; m < n.length; m++) {
                    var p = n[m];
                    if (p.children) {
                        o += b(p.children)
                    } else {
                        o++
                    }
                }
                return o
            }

            function c(n, p, o, m) {
                this.minimumResultsForSearch = o.get("minimumResultsForSearch");
                if (this.minimumResultsForSearch < 0) {
                    this.minimumResultsForSearch = Infinity
                }
                n.call(this, p, o, m)
            }

            c.prototype.showSearch = function (l, k) {
                if (b(k.data.results) < this.minimumResultsForSearch) {
                    return false
                }
                return l.call(this, k)
            };
            return c
        });
        a.define("select2/dropdown/selectOnClose", [], function () {
            function b() {
            }

            b.prototype.bind = function (l, n, c) {
                var m = this;
                l.call(this, n, c);
                n.on("close", function () {
                    m._handleSelectOnClose()
                })
            };
            b.prototype._handleSelectOnClose = function () {
                var c = this.getHighlightedResults();
                if (c.length < 1) {
                    return
                }
                this.trigger("select", {data: c.data("data")})
            };
            return b
        });
        a.define("select2/dropdown/closeOnSelect", [], function () {
            function b() {
            }

            b.prototype.bind = function (l, n, c) {
                var m = this;
                l.call(this, n, c);
                n.on("select", function (g) {
                    m._selectTriggered(g)
                });
                n.on("unselect", function (g) {
                    m._selectTriggered(g)
                })
            };
            b.prototype._selectTriggered = function (c, k) {
                var l = k.originalEvent;
                if (l && l.ctrlKey) {
                    return
                }
                this.trigger("close")
            };
            return b
        });
        a.define("select2/i18n/en", [], function () {
            return {
                errorLoading: function () {
                    return "The results could not be loaded."
                }, inputTooLong: function (h) {
                    var b = h.input.length - h.maximum;
                    var c = "Please delete " + b + " character";
                    if (b != 1) {
                        c += "s"
                    }
                    return c
                }, inputTooShort: function (h) {
                    var b = h.minimum - h.input.length;
                    var c = "Please enter " + b + " or more characters";
                    return c
                }, loadingMore: function () {
                    return "Loading more results…"
                }, maximumSelected: function (c) {
                    var b = "You can only select " + c.maximum + " item";
                    if (c.maximum != 1) {
                        b += "s"
                    }
                    return b
                }, noResults: function () {
                    return "No results found"
                }, searching: function () {
                    return "Searching…"
                }
            }
        });
        a.define("select2/defaults", ["jquery", "require", "./results", "./selection/single", "./selection/multiple", "./selection/placeholder", "./selection/allowClear", "./selection/search", "./selection/eventRelay", "./utils", "./translation", "./diacritics", "./data/select", "./data/array", "./data/ajax", "./data/tags", "./data/tokenizer", "./data/minimumInputLength", "./data/maximumInputLength", "./data/maximumSelectionLength", "./dropdown", "./dropdown/search", "./dropdown/hidePlaceholder", "./dropdown/infiniteScroll", "./dropdown/attachBody", "./dropdown/minimumResultsForSearch", "./dropdown/selectOnClose", "./dropdown/closeOnSelect", "./i18n/en"], function (an, aj, Q, ae, T, N, ak, U, P, ap, R, b, X, V, ao, ad, am, S, c, ag, Y, ah, aa, Z, W, O, ai, al, ac) {
            function ab() {
                this.reset()
            }

            ab.prototype.apply = function (x) {
                x = an.extend({}, this.defaults, x);
                if (x.dataAdapter == null) {
                    if (x.ajax != null) {
                        x.dataAdapter = ao
                    } else {
                        if (x.data != null) {
                            x.dataAdapter = V
                        } else {
                            x.dataAdapter = X
                        }
                    }
                    if (x.minimumInputLength > 0) {
                        x.dataAdapter = ap.Decorate(x.dataAdapter, S)
                    }
                    if (x.maximumInputLength > 0) {
                        x.dataAdapter = ap.Decorate(x.dataAdapter, c)
                    }
                    if (x.maximumSelectionLength > 0) {
                        x.dataAdapter = ap.Decorate(x.dataAdapter, ag)
                    }
                    if (x.tags) {
                        x.dataAdapter = ap.Decorate(x.dataAdapter, ad)
                    }
                    if (x.tokenSeparators != null || x.tokenizer != null) {
                        x.dataAdapter = ap.Decorate(x.dataAdapter, am)
                    }
                    if (x.query != null) {
                        var n = aj(x.amdBase + "compat/query");
                        x.dataAdapter = ap.Decorate(x.dataAdapter, n)
                    }
                    if (x.initSelection != null) {
                        var y = aj(x.amdBase + "compat/initSelection");
                        x.dataAdapter = ap.Decorate(x.dataAdapter, y)
                    }
                }
                if (x.resultsAdapter == null) {
                    x.resultsAdapter = Q;
                    if (x.ajax != null) {
                        x.resultsAdapter = ap.Decorate(x.resultsAdapter, Z)
                    }
                    if (x.placeholder != null) {
                        x.resultsAdapter = ap.Decorate(x.resultsAdapter, aa)
                    }
                    if (x.selectOnClose) {
                        x.resultsAdapter = ap.Decorate(x.resultsAdapter, ai)
                    }
                }
                if (x.dropdownAdapter == null) {
                    if (x.multiple) {
                        x.dropdownAdapter = Y
                    } else {
                        var u = ap.Decorate(Y, ah);
                        x.dropdownAdapter = u
                    }
                    if (x.minimumResultsForSearch !== 0) {
                        x.dropdownAdapter = ap.Decorate(x.dropdownAdapter, O)
                    }
                    if (x.closeOnSelect) {
                        x.dropdownAdapter = ap.Decorate(x.dropdownAdapter, al)
                    }
                    if (x.dropdownCssClass != null || x.dropdownCss != null || x.adaptDropdownCssClass != null) {
                        var v = aj(x.amdBase + "compat/dropdownCss");
                        x.dropdownAdapter = ap.Decorate(x.dropdownAdapter, v)
                    }
                    x.dropdownAdapter = ap.Decorate(x.dropdownAdapter, W)
                }
                if (x.selectionAdapter == null) {
                    if (x.multiple) {
                        x.selectionAdapter = T
                    } else {
                        x.selectionAdapter = ae
                    }
                    if (x.placeholder != null) {
                        x.selectionAdapter = ap.Decorate(x.selectionAdapter, N)
                    }
                    if (x.allowClear) {
                        x.selectionAdapter = ap.Decorate(x.selectionAdapter, ak)
                    }
                    if (x.multiple) {
                        x.selectionAdapter = ap.Decorate(x.selectionAdapter, U)
                    }
                    if (x.containerCssClass != null || x.containerCss != null || x.adaptContainerCssClass != null) {
                        var l = aj(x.amdBase + "compat/containerCss");
                        x.selectionAdapter = ap.Decorate(x.selectionAdapter, l)
                    }
                    x.selectionAdapter = ap.Decorate(x.selectionAdapter, P)
                }
                if (typeof x.language === "string") {
                    if (x.language.indexOf("-") > 0) {
                        var q = x.language.split("-");
                        var o = q[0];
                        x.language = [x.language, o]
                    } else {
                        x.language = [x.language]
                    }
                }
                if (an.isArray(x.language)) {
                    var r = new R();
                    x.language.push("en");
                    var g = x.language;
                    for (var s = 0; s < g.length; s++) {
                        var w = g[s];
                        var p = {};
                        try {
                            p = R.loadPath(w)
                        } catch (m) {
                            try {
                                w = this.defaults.amdLanguageBase + w;
                                p = R.loadPath(w)
                            } catch (h) {
                                if (x.debug && window.console && console.warn) {
                                    console.warn('Select2: The language file for "' + w + '" could not be automatically loaded. A fallback will be used instead.')
                                }
                                continue
                            }
                        }
                        r.extend(p)
                    }
                    x.translations = r
                } else {
                    var k = R.loadPath(this.defaults.amdLanguageBase + "en");
                    var A = new R(x.language);
                    A.extend(k);
                    x.translations = A
                }
                return x
            };
            ab.prototype.reset = function () {
                function g(k) {
                    function l(m) {
                        return b[m] || m
                    }

                    return k.replace(/[^\u0000-\u007E]/g, l)
                }

                function h(m, n) {
                    if (an.trim(m.term) === "") {
                        return n
                    }
                    if (n.children && n.children.length > 0) {
                        var r = an.extend(true, {}, n);
                        for (var k = n.children.length - 1; k >= 0; k--) {
                            var l = n.children[k];
                            var o = h(m, l);
                            if (o == null) {
                                r.children.splice(k, 1)
                            }
                        }
                        if (r.children.length > 0) {
                            return r
                        }
                        return h(m, r)
                    }
                    var p = g(n.text).toUpperCase();
                    var q = g(m.term).toUpperCase();
                    if (p.indexOf(q) > -1) {
                        return n
                    }
                    return null
                }

                this.defaults = {
                    amdBase: "./",
                    amdLanguageBase: "./i18n/",
                    closeOnSelect: true,
                    debug: false,
                    dropdownAutoWidth: false,
                    escapeMarkup: ap.escapeMarkup,
                    language: ac,
                    matcher: h,
                    minimumInputLength: 0,
                    maximumInputLength: 0,
                    maximumSelectionLength: 0,
                    minimumResultsForSearch: 0,
                    selectOnClose: false,
                    sorter: function (k) {
                        return k
                    },
                    templateResult: function (k) {
                        return k.text
                    },
                    templateSelection: function (k) {
                        return k.text
                    },
                    theme: "default",
                    width: "resolve"
                }
            };
            ab.prototype.set = function (l, h) {
                var m = an.camelCase(l);
                var k = {};
                k[m] = h;
                var g = ap._convertData(k);
                an.extend(this.defaults, g)
            };
            var af = new ab();
            return af
        });
        a.define("select2/options", ["require", "jquery", "./defaults", "./utils"], function (m, c, b, l) {
            function n(k, h) {
                this.options = k;
                if (h != null) {
                    this.fromElement(h)
                }
                this.options = b.apply(this.options);
                if (h && h.is("input")) {
                    var g = m(this.get("amdBase") + "compat/inputData");
                    this.options.dataAdapter = l.Decorate(this.options.dataAdapter, g)
                }
            }

            n.prototype.fromElement = function (h) {
                var r = ["select2"];
                if (this.options.multiple == null) {
                    this.options.multiple = h.prop("multiple")
                }
                if (this.options.disabled == null) {
                    this.options.disabled = h.prop("disabled")
                }
                if (this.options.language == null) {
                    if (h.prop("lang")) {
                        this.options.language = h.prop("lang").toLowerCase()
                    } else {
                        if (h.closest("[lang]").prop("lang")) {
                            this.options.language = h.closest("[lang]").prop("lang")
                        }
                    }
                }
                if (this.options.dir == null) {
                    if (h.prop("dir")) {
                        this.options.dir = h.prop("dir")
                    } else {
                        if (h.closest("[dir]").prop("dir")) {
                            this.options.dir = h.closest("[dir]").prop("dir")
                        } else {
                            this.options.dir = "ltr"
                        }
                    }
                }
                h.prop("disabled", this.options.disabled);
                h.prop("multiple", this.options.multiple);
                if (h.data("select2Tags")) {
                    if (this.options.debug && window.console && console.warn) {
                        console.warn('Select2: The `data-select2-tags` attribute has been changed to use the `data-data` and `data-tags="true"` attributes and will be removed in future versions of Select2.')
                    }
                    h.data("data", h.data("select2Tags"));
                    h.data("tags", true)
                }
                if (h.data("ajaxUrl")) {
                    if (this.options.debug && window.console && console.warn) {
                        console.warn("Select2: The `data-ajax-url` attribute has been changed to `data-ajax--url` and support for the old attribute will be removed in future versions of Select2.")
                    }
                    h.attr("ajax--url", h.data("ajaxUrl"));
                    h.data("ajax--url", h.data("ajaxUrl"))
                }
                var k = {};
                if (c.fn.jquery && c.fn.jquery.substr(0, 2) == "1." && h[0].dataset) {
                    k = c.extend(true, {}, h[0].dataset, h.data())
                } else {
                    k = h.data()
                }
                var q = c.extend(true, {}, k);
                q = l._convertData(q);
                for (var g in q) {
                    if (c.inArray(g, r) > -1) {
                        continue
                    }
                    if (c.isPlainObject(this.options[g])) {
                        c.extend(this.options[g], q[g])
                    } else {
                        this.options[g] = q[g]
                    }
                }
                return this
            };
            n.prototype.get = function (g) {
                return this.options[g]
            };
            n.prototype.set = function (h, g) {
                this.options[h] = g
            };
            return n
        });
        a.define("select2/core", ["jquery", "./options", "./utils", "./keys"], function (b, l, c, n) {
            var m = function (h, A) {
                if (h.data("select2") != null) {
                    h.data("select2").destroy()
                }
                this.$element = h;
                this.id = this._generateId(h);
                A = A || {};
                this.options = new l(A, h);
                m.__super__.constructor.call(this);
                var v = h.attr("tabindex") || 0;
                h.data("old-tabindex", v);
                h.attr("tabindex", "-1");
                var w = this.options.get("dataAdapter");
                this.dataAdapter = new w(h, this.options);
                var B = this.render();
                this._placeContainer(B);
                var k = this.options.get("selectionAdapter");
                this.selection = new k(h, this.options);
                this.$selection = this.selection.render();
                this.selection.position(this.$selection, B);
                var y = this.options.get("dropdownAdapter");
                this.dropdown = new y(h, this.options);
                this.$dropdown = this.dropdown.render();
                this.dropdown.position(this.$dropdown, B);
                var x = this.options.get("resultsAdapter");
                this.results = new x(h, this.options, this.dataAdapter);
                this.$results = this.results.render();
                this.results.position(this.$results, this.$dropdown);
                var g = this;
                this._bindAdapters();
                this._registerDomEvents();
                this._registerDataEvents();
                this._registerSelectionEvents();
                this._registerDropdownEvents();
                this._registerResultsEvents();
                this._registerEvents();
                this.dataAdapter.current(function (o) {
                    g.trigger("selection:update", {data: o})
                });
                h.addClass("select2-hidden-accessible");
                h.attr("aria-hidden", "true");
                this._syncAttributes();
                h.data("select2", this)
            };
            c.Extend(m, c.Observable);
            m.prototype._generateId = function (h) {
                var g = "";
                if (h.attr("id") != null) {
                    g = h.attr("id")
                } else {
                    if (h.attr("name") != null) {
                        g = h.attr("name") + "-" + c.generateChars(2)
                    } else {
                        g = c.generateChars(4)
                    }
                }
                g = "select2-" + g;
                return g
            };
            m.prototype._placeContainer = function (g) {
                g.insertAfter(this.$element);
                var h = this._resolveWidth(this.$element, this.options.get("width"));
                if (h != null) {
                    g.css("width", h)
                }
            };
            m.prototype._resolveWidth = function (C, B) {
                var E = /^width:(([-+]?([0-9]*\.)?[0-9]+)(px|em|ex|%|in|cm|mm|pt|pc))/i;
                if (B == "resolve") {
                    var k = this._resolveWidth(C, "style");
                    if (k != null) {
                        return k
                    }
                    return this._resolveWidth(C, "element")
                }
                if (B == "element") {
                    var F = C.outerWidth(false);
                    if (F <= 0) {
                        return "auto"
                    }
                    return F + "px"
                }
                if (B == "style") {
                    var A = C.attr("style");
                    if (typeof(A) !== "string") {
                        return null
                    }
                    var D = A.split(";");
                    for (var h = 0, y = D.length; h < y; h = h + 1) {
                        var G = D[h].replace(/\s/g, "");
                        var g = G.match(E);
                        if (g !== null && g.length >= 1) {
                            return g[1]
                        }
                    }
                    return null
                }
                return B
            };
            m.prototype._bindAdapters = function () {
                this.dataAdapter.bind(this, this.$container);
                this.selection.bind(this, this.$container);
                this.dropdown.bind(this, this.$container);
                this.results.bind(this, this.$container)
            };
            m.prototype._registerDomEvents = function () {
                var g = this;
                this.$element.on("change.select2", function () {
                    g.dataAdapter.current(function (k) {
                        g.trigger("selection:update", {data: k})
                    })
                });
                this._sync = c.bind(this._syncAttributes, this);
                if (this.$element[0].attachEvent) {
                    this.$element[0].attachEvent("onpropertychange", this._sync)
                }
                var h = window.MutationObserver || window.WebKitMutationObserver || window.MozMutationObserver;
                if (h != null) {
                    this._observer = new h(function (k) {
                        b.each(k, g._sync)
                    });
                    this._observer.observe(this.$element[0], {
                        attributes: true,
                        subtree: false
                    })
                } else {
                    if (this.$element[0].addEventListener) {
                        this.$element[0].addEventListener("DOMAttrModified", g._sync, false)
                    }
                }
            };
            m.prototype._registerDataEvents = function () {
                var g = this;
                this.dataAdapter.on("*", function (h, k) {
                    g.trigger(h, k)
                })
            };
            m.prototype._registerSelectionEvents = function () {
                var h = this;
                var g = ["toggle"];
                this.selection.on("toggle", function () {
                    h.toggleDropdown()
                });
                this.selection.on("*", function (p, k) {
                    if (b.inArray(p, g) !== -1) {
                        return
                    }
                    h.trigger(p, k)
                })
            };
            m.prototype._registerDropdownEvents = function () {
                var g = this;
                this.dropdown.on("*", function (h, k) {
                    g.trigger(h, k)
                })
            };
            m.prototype._registerResultsEvents = function () {
                var g = this;
                this.results.on("*", function (h, k) {
                    g.trigger(h, k)
                })
            };
            m.prototype._registerEvents = function () {
                var g = this;
                this.on("open", function () {
                    g.$container.addClass("select2-container--open")
                });
                this.on("close", function () {
                    g.$container.removeClass("select2-container--open")
                });
                this.on("enable", function () {
                    g.$container.removeClass("select2-container--disabled")
                });
                this.on("disable", function () {
                    g.$container.addClass("select2-container--disabled")
                });
                this.on("focus", function () {
                    g.$container.addClass("select2-container--focus")
                });
                this.on("blur", function () {
                    g.$container.removeClass("select2-container--focus")
                });
                this.on("query", function (h) {
                    if (!g.isOpen()) {
                        g.trigger("open")
                    }
                    this.dataAdapter.query(h, function (k) {
                        g.trigger("results:all", {data: k, query: h})
                    })
                });
                this.on("query:append", function (h) {
                    this.dataAdapter.query(h, function (k) {
                        g.trigger("results:append", {data: k, query: h})
                    })
                });
                this.on("keypress", function (h) {
                    var k = h.which;
                    if (g.isOpen()) {
                        if (k === n.ENTER) {
                            g.trigger("results:select");
                            h.preventDefault()
                        } else {
                            if ((k === n.SPACE && h.ctrlKey)) {
                                g.trigger("results:toggle");
                                h.preventDefault()
                            } else {
                                if (k === n.UP) {
                                    g.trigger("results:previous");
                                    h.preventDefault()
                                } else {
                                    if (k === n.DOWN) {
                                        g.trigger("results:next");
                                        h.preventDefault()
                                    } else {
                                        if (k === n.ESC || k === n.TAB) {
                                            g.close();
                                            h.preventDefault()
                                        }
                                    }
                                }
                            }
                        }
                    } else {
                        if (k === n.ENTER || k === n.SPACE || ((k === n.DOWN || k === n.UP) && h.altKey)) {
                            g.open();
                            h.preventDefault()
                        }
                    }
                })
            };
            m.prototype._syncAttributes = function () {
                this.options.set("disabled", this.$element.prop("disabled"));
                if (this.options.get("disabled")) {
                    if (this.isOpen()) {
                        this.close()
                    }
                    this.trigger("disable")
                } else {
                    this.trigger("enable")
                }
            };
            m.prototype.trigger = function (s, u) {
                var r = m.__super__.trigger;
                var k = {
                    open: "opening",
                    close: "closing",
                    select: "selecting",
                    unselect: "unselecting"
                };
                if (s in k) {
                    var g = k[s];
                    var h = {prevented: false, name: s, args: u};
                    r.call(this, g, h);
                    if (h.prevented) {
                        u.prevented = true;
                        return
                    }
                }
                r.call(this, s, u)
            };
            m.prototype.toggleDropdown = function () {
                if (this.options.get("disabled")) {
                    return
                }
                if (this.isOpen()) {
                    this.close()
                } else {
                    this.open()
                }
            };
            m.prototype.open = function () {
                if (this.isOpen()) {
                    return
                }
                this.trigger("query", {});
                this.trigger("open")
            };
            m.prototype.close = function () {
                if (!this.isOpen()) {
                    return
                }
                this.trigger("close")
            };
            m.prototype.isOpen = function () {
                return this.$container.hasClass("select2-container--open")
            };
            m.prototype.enable = function (h) {
                if (this.options.get("debug") && window.console && console.warn) {
                    console.warn('Select2: The `select2("enable")` method has been deprecated and will be removed in later Select2 versions. Use $element.prop("disabled") instead.')
                }
                if (h == null || h.length === 0) {
                    h = [true]
                }
                var g = !h[0];
                this.$element.prop("disabled", g)
            };
            m.prototype.data = function () {
                if (this.options.get("debug") && arguments.length > 0 && window.console && console.warn) {
                    console.warn('Select2: Data can no longer be set using `select2("data")`. You should consider setting the value instead using `$element.val()`.')
                }
                var g = [];
                this.dataAdapter.current(function (h) {
                    g = h
                });
                return g
            };
            m.prototype.val = function (g) {
                if (this.options.get("debug") && window.console && console.warn) {
                    console.warn('Select2: The `select2("val")` method has been deprecated and will be removed in later Select2 versions. Use $element.val() instead.')
                }
                if (g == null || g.length === 0) {
                    return this.$element.val()
                }
                var h = g[0];
                if (b.isArray(h)) {
                    h = b.map(h, function (k) {
                        return k.toString()
                    })
                }
                this.$element.val(h).trigger("change")
            };
            m.prototype.destroy = function () {
                this.$container.remove();
                if (this.$element[0].detachEvent) {
                    this.$element[0].detachEvent("onpropertychange", this._sync)
                }
                if (this._observer != null) {
                    this._observer.disconnect();
                    this._observer = null
                } else {
                    if (this.$element[0].removeEventListener) {
                        this.$element[0].removeEventListener("DOMAttrModified", this._sync, false)
                    }
                }
                this._sync = null;
                this.$element.off(".select2");
                this.$element.attr("tabindex", this.$element.data("old-tabindex"));
                this.$element.removeClass("select2-hidden-accessible");
                this.$element.attr("aria-hidden", "false");
                this.$element.removeData("select2");
                this.dataAdapter.destroy();
                this.selection.destroy();
                this.dropdown.destroy();
                this.results.destroy();
                this.dataAdapter = null;
                this.selection = null;
                this.dropdown = null;
                this.results = null
            };
            m.prototype.render = function () {
                var g = b('<span class="select2 select2-container"><span class="selection"></span><span class="dropdown-wrapper" aria-hidden="true"></span></span>');
                g.attr("dir", this.options.get("dir"));
                this.$container = g;
                this.$container.addClass("select2-container--" + this.options.get("theme"));
                g.data("element", this.$element);
                return g
            };
            return m
        });
        a.define("jquery.select2", ["jquery", "require", "./select2/core", "./select2/defaults"], function (c, l, n, b) {
            l("jquery.mousewheel");
            if (c.fn.select2 == null) {
                var m = ["open", "close", "destroy"];
                c.fn.select2 = function (k) {
                    k = k || {};
                    if (typeof k === "object") {
                        this.each(function () {
                            var o = c.extend({}, k, true);
                            var r = new n(c(this), o)
                        });
                        return this
                    } else {
                        if (typeof k === "string") {
                            var h = this.data("select2");
                            if (h == null && window.console && console.error) {
                                console.error("The select2('" + k + "') method was called on an element that is not using Select2.")
                            }
                            var p = Array.prototype.slice.call(arguments, 1);
                            var g = h[k](p);
                            if (c.inArray(k, m) > -1) {
                                return this
                            }
                            return g
                        } else {
                            throw new Error("Invalid arguments for Select2: " + k)
                        }
                    }
                }
            }
            if (c.fn.select2.defaults == null) {
                c.fn.select2.defaults = b
            }
            return n
        });
        a.define("jquery.mousewheel", ["jquery"], function (b) {
            return b
        });
        return {define: a.define, require: a.require}
    }());
    var e = d.require("jquery.select2");
    f.fn.select2.amd = d;
    return e
}));
ogame.chat = {
    socket: null,
    connected: false,
    connecting: false,
    timeout: null,
    retryInterval: 5000,
    playerId: null,
    associationId: null,
    data: {association: {}},
    playernames: {},
    playerList: null,
    isLoadingPlayerList: false,
    playerListSelector: new Array,
    initConnection: function () {
        console.log('ogame.chat init');
        var c = ogame.chat;
        if (c.connecting || c.connected || c.isMobile) {
            c.socket.disconnect()
        }
        c.connecting = true;
        try {
            c.socket = io.connect("/chat", nodeParams);
            c.socket.on("connect", function () {
                clearTimeout(this.timeout);
                c.socket.emit("authorize", session, function (a) {
                    c.connecting = false;
                    if (a) {
                        c.connected = true
                    } else {
                        c.socket.disconnect()
                    }
                })
            });
            c.socket.on("chat", function (a) {
                c.messageReceived(a)
            });
            c.socket.on("disconnect", function () {
                c.connected = false;
                c.connecting = false
            })
        } catch (d) {
            c.connecting = false
        }
    },
    initialize: function () {
        var b = ogame.chat;
        loadScript(nodeUrl, b.initConnection);
        $(".new_msg_count[data-playerid]").each(function () {
            b.saveMessageCounter($(this).data("new-messages"), $(this).data("playerid"))
        });
        this.updateTotalNewChatCounter();
        $(".js_playerlist").on("click", ".playerlist_item", function () {
            var a = $(this).hasClass("nothingThere");
            if (!a) {
                var d = $(this).data("msgid");
                if (d) {
                    b.loadChatLogWithPlayer(this, d)
                } else {
                    b.loadChatLogWithPlayer(this)
                }
            }
        });
        $(".js_playerlist").on("click", ".openAssociationChat", function () {
            var a = $(this).data("msgid");
            if (a) {
                b.loadChatLogWithAssociation(this, a)
            } else {
                b.loadChatLogWithAssociation(this)
            }
        });
        $("#chatMsgList").on("click", ".msg", function () {
            var e = $(this).data("playerid");
            var a = $(this).data("associationid");
            if (e !== undefined && e > 0) {
                b.saveMessageCounter(0, e);
                ogame.messagemarker.setPartnerId(e);
                ogame.messagemarker.updateNewMarker();
                ogame.chat.updateTotalNewChatCounter();
                var f = $(".playerlist .playerlist_item[data-playerId=" + e + "]").data("msgid");
                if (f) {
                    b.loadChatLogWithPlayer(this, f)
                } else {
                    b.loadChatLogWithPlayer(this)
                }
            } else {
                var f = $(".playerlist .playerlist_item[data-associationId=" + a + "]").data("msgid");
                b.saveMessageCounterAssociation(0, a);
                if (f) {
                    b.loadChatLogWithAssociation(this, f)
                } else {
                    b.loadChatLogWithAssociation(this)
                }
            }
        });
        $(".chat").on("click", ".sys_msg", function (f) {
            var h = $(this).data("foreign-player-id");
            var g = $(this).data("foreign-association-id");
            var a = {playerId: h, associationId: g, ajax: 1};
            console.log('chatLoadMoreMessages()');
            $.ajax({
                url: chatUrlLoadMoreMessages,
                type: "POST",
                dataType: "html",
                data: a,
                success: function (c) {
                    $(".chat").each(function (e, d) {
                        if (h !== undefined && h == $(d).data("foreign-player-id")) {
                            $(d).html(c)
                        } else {
                            if (g !== undefined && g == $(d).data("foreign-association-id")) {
                                $(d).html(c)
                            }
                        }
                    })
                },
                error: function (e, c, d) {
                }
            })
        });
        $("body").on("click", ".js_openChat", function () {
            b.loadChatLogWithPlayer(this)
        });
        if (typeof $.cookie("maximizeId") == "string" || typeof $.cookie("maximizeId") == "number") {
            $('#chatMsgList .msg[data-playerid="' + $.cookie("maximizeId") + '"]').trigger("click");
            $.cookie("maximizeId", null)
        }
    },
    getTotalNewChatCounter: function () {
        return ogame.messagecounter.sumNewChatMessages
    },
    updateTotalNewChatCounter: function () {
        var b = 0;
        if ($(".msg .new_msg_count").length > 0) {
            $(".msg .new_msg_count").each(function () {
                b += Number($(this).data("new-messages"))
            })
        } else {
            if ($("#chatBarPlayerList .new_msg_count").length > 0) {
                $("#chatBarPlayerList .new_msg_count").each(function () {
                    b += Number($(this).data("new-messages"))
                })
            }
        }
        ogame.messagecounter.initialize(ogame.messagecounter.type_chat, ogame.chat.playerId);
        if (ogame.messagecounter.sumNewChatMessages !== b) {
            ogame.messagecounter.initChatCounter(b);
            ogame.messagecounter.sumNewChatMessages = b;
            ogame.messagecounter.update()
        }
        return b
    },
    retryConnection: function () {
        var b = ogame.chat;
        setTimeout(function () {
            b.initConnection()
        }, 5000)
    },
    sendMessage: function (u, r, n, m) {
        var o = ogame.chat;
        if ($.trim(n).length == 0) {
            s("TEXT_EMPTY");
            return
        }
        if (u > 0) {
            var w = {playerId: u, text: n, mode: 1, ajax: 1}
        } else {
            var w = {associationId: r, text: n, mode: 3, ajax: 1}
        }
        if (typeof m !== "undefined" && typeof m.id !== "undefined") {
            w.msg2reply = m.id
        }
        function v() {
            console.log('v()');
            $.ajax({
                url: chatUrl,
                type: "POST",
                dataType: "json",
                data: w,
                success: function (a) {
                    p(a)
                },
                error: function (a, b, c) {
                }
            })
        }

        function q(a) {
            if (typeof a.refAuthor !== "undefined" && typeof a.refContent !== "undefined") {
                $refData = {author: a.refAuthor, text: a.refContent}
            } else {
                $refData = 0
            }
            if (a.targetId !== undefined) {
                o.addChatItem(a.targetId, 0, a.text, a.id, false, $refData, a.date)
            } else {
                o.addChatItem(u, a.targetAssociationId, a.text, a.id, false, $refData, a.date)
            }
        }

        function s(a) {
            if (chatLoca[a] !== undefined) {
                errorBoxNotify(LocalizationStrings.error, chatLoca[a], LocalizationStrings.ok)
            } else {
                errorBoxNotify(LocalizationStrings.error, a, LocalizationStrings.ok)
            }
        }

        function p(a) {
            switch (a.status) {
                case"NOT_AUTHORIZED":
                    v();
                    break;
                case"OK":
                    q(a);
                    ogame.chat.cleanupUrl();
                    break;
                default:
                    s(a.status)
            }
        }

        v()
    },
    messageReceived: function (h) {
        var g = ogame.chat;
        if (typeof h.refAuthor !== "undefined" && typeof h.refText !== "undefined") {
            $refData = {author: h.refAuhtor, text: h.refText}
        } else {
            $refData = 0
        }
        if (h.senderName !== undefined && h.senderId !== undefined) {
            g.playernames[h.senderId] = h.senderName
        }
        if ($(".chat_bar_list").length) {
            if (h.associationId !== undefined && h.associationId > 0) {
                if (g.data.association[h.associationId] === undefined) {
                    g.loadChatLogWithAssociation(h.associationId, null, function () {
                        g.addChatItem(h.senderId, h.associationId, h.text, h.id, true, $refData, h.date)
                    }, false)
                } else {
                    g.addChatItem(h.senderId, h.associationId, h.text, h.id, true, $refData, h.date)
                }
            } else {
                if (g.data[h.senderId] === undefined) {
                    g.loadChatLogWithPlayer(h.senderId, null, function () {
                        g.addChatItem(h.senderId, 0, h.text, h.id, true, $refData, h.date)
                    }, false)
                } else {
                    g.addChatItem(h.senderId, 0, h.text, h.id, true, $refData, h.date)
                }
            }
        }
        if (h.associationId !== undefined && h.associationId > 0) {
            if ($('.chat_bar_list_item.open[data-associationid="' + h.associationId + '"]').length <= 0) {
                var e = $('.new_msg_count[data-associationid="' + h.associationId + '"]').data("new-messages");
                if (isNaN(e)) {
                    e = 0
                }
                e++;
                g.saveMessageCounterAssociation(e, h.associationId);
                g.updateTotalNewChatCounter()
            } else {
                var f = {
                    associationId: h.associationId,
                    mode: 4,
                    ajax: 1,
                    updateUnread: 1
                };
                console.log('chatUrl()');
                $.ajax({
                    url: chatUrl,
                    type: "POST",
                    data: f,
                    success: function (a) {
                    },
                    error: function (c, a, b) {
                    }
                })
            }
        } else {
            if (h.senderId !== undefined && h.senderId > 0) {
                ogame.messagemarker.setPartnerId(h.senderId);
                if (!g.isOpen(h.senderId)) {
                    ogame.messagecounter.initialize(ogame.messagecounter.type_chat, h.senderId);
                    var e = parseInt(ogame.messagecounter.newChats[h.senderId]);
                    if (isNaN(e)) {
                        e = 0
                    }
                    e++;
                    g.saveMessageCounter(e, h.senderId);
                    ogame.messagemarker.updateNewMarker()
                } else {
                    g.saveMessageCounter(0, $(this).data("playerid"));
                    ogame.messagemarker.updateNewMarker()
                }
            }
        }
    },
    cleanupUrl: function () {
        var k = window.location.href;
        var h = k.indexOf("&");
        if (h > 0) {
            var g = k.indexOf("?");
            var l = k.substring(0, g);
            var f = l + "?page=chat";
            window.history.pushState({}, "", f)
        }
    },
    saveMessageCounter: function (c, d) {
        if (isNaN(d) || d === 0) {
            return false
        }
        $('.new_msg_count[data-playerid="' + d + '"]').data("new-messages", c);
        ogame.messagecounter.newChats[d] = c
    },
    saveMessageCounterAssociation: function (c, d) {
        if (isNaN(d) || d === 0) {
            return false
        }
        $('.new_msg_count[data-associationid="' + d + '"]').data("new-messages", c);
        $('.new_msg_count[data-associationid="' + d + '"]').text(c);
        ogame.messagemarker.updateNewMarker()
    },
    isOpen: function (e) {
        var f = false;
        var d = $(".chatContent").data("chatplayerid");
        if (d != "undefined" && d == e) {
            f = true
        } else {
            $(".chat_box").each(function () {
                if ($(this).attr("data-playerid") == e) {
                    if ($(this).css("display") == "block") {
                        f = true
                    }
                }
            })
        }
        return f
    },
    loadChatLogWithPlayer: function (p, n, l, h) {
        var m = ogame.chat;
        var o;
        if (typeof h == "undefined") {
            h = true
        }
        if (typeof p == "number") {
            o = p
        } else {
            o = $(p).attr("data-playerId")
        }
        var k = {playerId: o, mode: 2, ajax: 1, updateUnread: (h ? 1 : 0)};
        if (typeof n == "number") {
            k.msg2reply = n
        }
        console.log('chatUrl POST()');
        $.ajax({
            url: chatUrl, type: "POST", data: k, success: function (a) {
                a = JSON.parse(a);
                m.data[a.playerId] = {
                    playerstatus: a.playerstatus,
                    playerName: a.playerName,
                    playerId: a.playerId,
                    chatItems: a.chatItems,
                    chatItemsByDateAsc: a.chatItemsByDateAsc
                };
                if (typeof l == "function") {
                    l()
                } else {
                    if ($(p).parents("#chatBarPlayerList").length || $("body")[0].id != "chat") {
                        m.showChat(a)
                    } else {
                        m.showChatHistory(a)
                    }
                }
                var b = $(".chat_bar_list").find("[data-playerid='" + a.playerId + "']");
                m.updateCustomScrollbar(b.find(".chat_box_ctn"))
            }, error: function (c, a, b) {
            }
        })
    },
    loadChatLogWithAssociation: function (o, n, l, h) {
        var m = ogame.chat;
        var p;
        if (typeof h == "undefined") {
            h = true
        }
        if (typeof o == "number") {
            p = o
        } else {
            p = $(o).attr("data-associationid")
        }
        var k = {associationId: p, mode: 4, ajax: 1, updateUnread: (h ? 1 : 0)};
        if (typeof n == "number") {
            k.msg2reply = n
        }
        console.log('chaturl POST()');
        $.ajax({
            url: chatUrl, type: "POST", data: k, success: function (a) {
                a = JSON.parse(a);
                m.data.association[a.associationId] = {
                    playerstatus: a.playerstatus,
                    associationName: a.associationName,
                    associationId: a.associationId,
                    chatItems: a.chatItems,
                    chatItemsByDateAsc: a.chatItemsByDateAsc
                };
                if (typeof l == "function") {
                    l()
                } else {
                    if ($(o).parents("#chatBarPlayerList").length || $("body")[0].id != "chat") {
                        m.showChat(a)
                    } else {
                        m.showChatHistory(a)
                    }
                }
                var b = $(".chat_bar_list").find("[data-associationid='" + a.associationId + "']");
                m.updateCustomScrollbar(b.find(".chat_box_ctn"))
            }, error: function (c, a, b) {
            }
        })
    },
    initChat: function (c, d) {
        ogame.chat.playerId = c;
        ogame.chat.isMobile = d;
        ogame.chat.initPlayerlist();
        ogame.chat.initialize();
        ogame.chat.toggleVisibility();
        ogame.chat.setVisibilityState();
        ogame.chat.initMaximize();
        ogame.chat.getInMaxChat()
    },
    getLastChatItemData: function () {
        var l = ogame.chat;
        var h = null;
        $(".chat_box_ctn .mCustomScrollBox .mCSB_container").each(function () {
            var a = $(this).children("ul.chat").children("li:last");
            if (h === null || a.attr("data-chat-id") > h.attr("data-chat-id")) {
                h = a
            }
        });
        if (h === null) {
            $("ul.largeChat").each(function () {
                var a = $(this).children("li:last");
                if (h === null || a.attr("data-chat-id") > h.attr("data-chat-id")) {
                    h = a
                }
            })
        }
        if (h === null) {
            return null
        }
        var k = h.children(".msg_head").find(".msg_date").html();
        var f = h.find(".msg_content").html();
        var g = {date: k, text: f};
        return g
    },
    addChatItem: function (F, x, B, D, v, A, r) {
        var u = ogame.chat;
        var q;
        if (x > 0) {
            q = $(".chat_bar_list").find("[data-associationid='" + x + "']")
        } else {
            q = $(".chat_bar_list").find("[data-playerid='" + F + "']")
        }
        var y = {};
        y.date = r;
        y.newClass = "new";
        if (v) {
            if (u.data[F] !== undefined) {
                y.playerName = u.data[F].playerName
            } else {
                y.playerName = u.playernames[F]
            }
            y.altClass = ""
        } else {
            y.playerName = playerName;
            y.altClass = "odd"
        }
        y.chatID = D;
        y.chatContent = B;
        if (typeof A == "object") {
            y.refData = A
        }
        if (!q.length) {
            var E = u.createChatBarContainer(F);
            u.updateChatBar(E);
            q = $(".chat_bar_list").find("[data-playerid='" + F + "']")
        }
        var w = u.createChatItem(y);
        var s = u.getLastChatItemData();
        if (s !== null && (y.date != s.date || y.chatContent != s.text)) {
            q.find(".chat").append(w);
            u.updateCustomScrollbar(q.find(".chat_box_ctn"));
            var C = $(".js_chatHistory");
            if (C.length && (C.data("chatplayerid") == F || C.data("associationid") == x)) {
                C.find(".chat.clearfix").append(w.clone());
                u.updateCustomScrollbar($(".largeChatContainer"))
            }
        }
    },
    addToMoreBox: function (m) {
        var l = ogame.chat;
        var k = m.length;
        if (k && $(".more_chat_bar_items").length < 1) {
            $(".chat_bar_list").append(l.createMoreBox("more_chat_bar_items"))
        }
        var g = $(".more_chat_bar_items .more_items");
        var h = $(".more_chat_bar_items .chat_box");
        for (var n = 0; n <= k; n++) {
            g.append(m.pop())
        }
        l.updateCustomScrollbar(h)
    },
    createChatBarContainer: function (f) {
        var g = ogame.chat;
        if (!f) {
            return
        }
        var h = g.data[f];
        g.data.playerId = f;
        var e = $('<li class="chat_bar_list_item open" data-playerid="' + f + '"></li>');
        e.append('<span class="playerstatus ' + h.playerstatus + '"></span>');
        e.append('<span class="cb_playername">' + h.playerName + "</span>");
        e.append('<span class="icon icon_close fright"></span>');
        e.prepend(g.createChatBox(f));
        return e
    },
    createChatBarContainerForAssociations: function (f) {
        var g = ogame.chat;
        if (!f) {
            return
        }
        var h = g.data.association[f];
        g.data.associationId = f;
        var e = $('<li class="chat_bar_list_item open" data-associationId="' + f + '"></li>');
        e.append('<span class="playerstatus ' + h.playerstatus + '"></span>');
        e.append('<span class="cb_playername">' + h.associationName + "</span>");
        e.append('<span class="icon icon_close fright"></span>');
        e.prepend(g.createChatBoxForAssociations(f));
        return e
    },
    closeChatBox: function (f, d) {
        var e = $(".chat_bar_list_item");
        $.each(e, function (b, a) {
            if (f !== undefined && $(a).data("playerid") == f) {
                $(a).addClass("outOfChatbar");
                $(a).removeClass("open")
            } else {
                if (d !== undefined && $(a).data("associationid") == d) {
                    $(a).addClass("outOfChatbar");
                    $(a).removeClass("open")
                }
            }
        })
    },
    getVisibleChats: function () {
        if (typeof visibleChats == "undefined") {
            visibleChats = {chatbar: false, players: [], associations: []}
        }
        return visibleChats
    },
    getVisibleChatPlayerIds: function () {
        var k = ogame.chat;
        var l = k.getVisibleChats();
        var h = {};
        var g = 0;
        for (var f = 0; f < l.players.length; f++) {
            if ($.inArray(l.players[f]["partnerId"], h) == -1) {
                h[g] = l.players[f]["partnerId"];
                g++
            }
        }
        return h
    },
    getVisibleChatAssociationIds: function () {
        var h = ogame.chat;
        var k = h.getVisibleChats();
        var l = {};
        var g = 0;
        for (var f = 0; f < k.associations.length; f++) {
            if ($.inArray(k.associations[f]["partnerId"], l) == -1) {
                l[g] = k.associations[f];
                g++
            }
        }
        return l
    },
    setVisibilityState: function () {
        var n = ogame.chat;
        var s = n.getVisibleChatPlayerIds();
        var m = n.getVisibleChatAssociationIds();
        var o = $("#chatBar .chat_bar_list .chat_bar_list_item");
        for (var q = 0; q < o.length; q++) {
            var l = o.get(q);
            var u = $(l).data("playerid");
            var r = $(l).data("associationid");
            if (u !== undefined && !n.isInJson(u, s)) {
                n.closeChatBox(u, 0)
            } else {
                if (r !== undefined && !n.isInJson(r, m)) {
                    n.closeChatBox(0, r)
                } else {
                    l.style.display = "inline";
                    if ($(l).hasClass("open")) {
                        var p = $(l).find("div.chat_box")[0];
                        p.style.display = "inline";
                        n.updateCustomScrollbar($(l).find(".chat_box_ctn"), 1)
                    }
                }
            }
        }
    },
    isInJson: function (f, d) {
        var e = null;
        if ($.isEmptyObject(d)) {
            e = false
        }
        if (e !== false) {
            $.each(d, function (a, b) {
                if (b == f) {
                    e = true
                }
            });
            if (e !== true) {
                false
            }
        }
        return e
    },
    toggleVisibility: function () {
        $(".chat_bar_list_item .icon_close").on("click", function (f) {
            var e = $(this).parent().data("playerid");
            var d = $(this).closest(".chat_box");
            if (!d.length) {
                d = $(this).parent()[0];
                d.style.display = "none"
            }
            if (e > 0) {
                console.log('toggleVisibilityChat()');
                $.ajax({
                    type: "POST",
                    url: "/game/index.php?page=ajaxChatToggleVisibility",
                    data: {from: playerId, to: e, showState: 0},
                    success: function (a) {
                    },
                    error: function (c, a, b) {
                    }
                })
            }
        });
        $(".cb_playerlist_box .playerlist_item").on("click", function () {
            var b = $(this).data("playerid");
            if (b) {
                console.log('cb_playerlist_box()');
                $.ajax({
                    type: "POST",
                    url: "/game/index.php?page=ajaxChatToggleVisibility",
                    data: {from: playerId, to: b, showState: 1},
                    success: function (a) {
                    },
                    error: function (a, e, f) {
                    }
                })
            }
        })
    },
    initMaximize: function () {
        $(".chat_bar_list").on("click.chatBar", ".chat_box .chat_box_title .icon_maximize", function () {
            var c = $(this).parent();
            var d = $(c).parent().data("playerid");
            $.cookie("maximizeId", d);
            $(".chat_bar_list_item.open .chat_box_title .icon_close").trigger("click");
            window.location = bigChatLink + "&playerId=" + d
        })
    },
    getInMaxChat: function () {
        var b = location.href;
        if (typeof bigChatLink == "undefined") {
            bigChatLink = ""
        }
        if (bigChatLink == b) {
            if ($.cookie("maximizeId") !== null) {
                $("#chatMsgList .msg[data-playerId=" + $.cookie("maximizeId") + "]").trigger("click")
            }
        }
        $.cookie("maximizeId", null)
    },
    createChatBox: function (l) {
        var n = ogame.chat;
        if (!l) {
            return
        }
        var p = n.data[l];
        var r = $('<div class="chat_box_title"></div>');
        r.append('<span class="icon icon_close fright"></span>');
        r.append('<span class="icon icon_maximize fright"></span>');
        var m = $('<div class="chat_box_ctn"><ul class="chat clearfix"></ul></div>');
        var k = {};
        for (var q = 0; q < p.chatItemsByDateAsc.length; q++) {
            k = p.chatItems[p.chatItemsByDateAsc[q]];
            m.find(".chat").append(n.createChatItem(k))
        }
        var o = $('<div class="chat_box" data-playerid="' + l + '"></div>');
        o.append(r);
        o.append(m);
        o.append('<textarea name="text" class="chat_box_textarea"></textarea>');
        return o
    },
    createChatBoxForAssociations: function (r) {
        var n = ogame.chat;
        if (!r) {
            return
        }
        var p = n.data.association[r];
        var k = $('<div class="chat_box_title"></div>');
        k.append('<span class="icon icon_close fright"></span>');
        k.append('<span class="icon icon_maximize fright"></span>');
        var m = $('<div class="chat_box_ctn"><ul class="chat clearfix"></ul></div>');
        var l = {};
        for (var q = 0; q < p.chatItemsByDateAsc.length; q++) {
            l = p.chatItems[p.chatItemsByDateAsc[q]];
            m.find(".chat").append(n.createChatItem(l))
        }
        var o = $('<div class="chat_box" data-associationId="' + r + '"></div>');
        o.append(k);
        o.append(m);
        o.append('<textarea name="text" class="chat_box_textarea"></textarea>');
        return o
    },
    createChatItem: function (m) {
        if (!m) {
            console.warn("no chatItem given");
            return
        }
        var g = $('<div class="msg_head"></div>');
        g.append('<span class="msg_date fright">' + getFormatedDate(m.date, "[d].[m].[Y] <span>[H]:[i]:[s]</span>") + "</span>");
        g.append('<span class="msg_title blue_txt ' + m.newClass + '">' + m.playerName + "</span>");
        var h = $('<li class="chat_msg ' + m.altClass + '" data-chat-id="' + m.chatID + '"></li>');
        h.append(g);
        if (typeof m.refData !== "undefined") {
            var k = $('<div class="referenceMsg"></div>');
            var n = '<div class="refAuthor">' + m.refData.author + "</div>";
            var l = '<div class="refText new">' + m.refData.text + "</div>";
            k.append(n);
            k.append(l);
            h.append(k)
        }
        h.append('<span class="msg_content">' + m.chatContent + "</span>");
        h.append('<div class="speechbubble_arrow"></div>');
        return h
    },
    createMoreBox: function (d) {
        var c = $('<li class="chat_bar_list_item ' + d + '">' + chatLoca.MORE_USERS + '<span class="icon icon_close fright"></span></li>');
        c.prepend($('<div class="chat_box"><ul class="more_items clearfix"></ul></div>'));
        return c
    },
    filterPlayerlist: function () {
        var l = [];
        var h;
        var k = $("#playerlistFilters").find('input[type="checkbox"]');
        k.each(function () {
            l.push($(this).attr("id"))
        });
        $(".playerlist_item").show();
        h = false;
        k.each(function () {
            if ($(this).prop("checked")) {
                h = true
            }
        });
        if (!h) {
            return
        }
        var f;
        var g;
        $(".playerlist_item").filter(function () {
            f = false;
            g = $(this);
            $.each(l, function (b, a) {
                if (g.data(a) === "off" && $("#" + a).prop("checked")) {
                    f = true
                }
            });
            (f === true) ? g.hide() : g.show()
        })
    },
    initChatBar: function (d) {
        var c = ogame.chat;
        ogame.chat.playerId = d;
        $("html").off(".chatBar");
        $(window).resize(function () {
            c.updateChatBar()
        });
        $(".chat_bar_list").on("click.chatBar", "#chatBarPlayerList", function (a) {
            if ($(a.target).attr("id") !== "chatBarPlayerList" && !$(a.target).hasClass("onlineCount")) {
                return
            }
            $(".cb_playerlist_box").toggle();
            c.updateCustomScrollbar($(".scrollContainer"), true);
            console.log('initChatBar()');
            $.ajax({
                url: chatUrl,
                type: "POST",
                dataType: "json",
                data: {action: "toggleChatBar"},
                success: function (b) {
                },
                error: function (h, b, g) {
                }
            })
        }).on("click.chatBar", ".chat_bar_list_item", function (a) {
            a.stopPropagation();
            if (!isNaN($(this).data("playerid"))) {
                ogame.messagemarker.toggle(ogame.messagemarker.action_remove, ogame.messagemarker.type_chattab, $(this).data("playerid"));
                ogame.messagemarker.toggle(ogame.messagemarker.action_remove, ogame.messagemarker.type_chatbar, $(this).data("playerid"));
                c.saveMessageCounter(0, $(this).data("playerid"));
                ogame.messagemarker.setPartnerId($(this).data("playerid"));
                ogame.messagemarker.updateNewMarker();
                ogame.chat.updateTotalNewChatCounter()
            } else {
                if (!isNaN($(this).data("associationid") > 0)) {
                    c.saveMessageCounterAssociation(0, $(this).data("associationid"))
                }
            }
            console.log('chatUrl POST chatBarListRead()');
            $.ajax({
                url: chatUrl,
                type: "POST",
                dataType: "json",
                data: {
                    playerId: $(this).data("playerid"),
                    action: "chatBarListRead"
                },
                success: function (b) {
                },
                error: function (h, b, g) {
                }
            });
            if ($(this).closest(".more_items").length) {
                c.swapChatBarItem($(this))
            } else {
                c.toggleChatBox($(a.target), $(this))
            }
            c.updateVisibleState()
        }).on("click.chatBar", ".chat_bar_list_item > .icon_close", function (a) {
            a.stopPropagation();
            var b = $(this).closest(".chat_bar_list_item");
            ogame.chat.closeChatBox(b.attr("data-playerid"), b.attr("data-associationid"));
            b.remove("open");
            c.updateChatBar()
        }).on("keyup.chatBar", ".chat_box_textarea", function (a) {
            if ((a.ctrlKey || a.keyCode == 10) && a.keyCode == 13) {
                a.preventDefault();
                var b = $(this).val();
                $(this).val(b + "\n")
            } else {
                if ($.trim($(this).val().length > 0)) {
                    a.preventDefault();
                    c.submitChatBarMsg($(a.currentTarget), a.which, a.shiftKey, a.delegateTarget.scrollHeight)
                }
            }
        }).on("click.chatBar", ".chat_box_textarea", function (a) {
            ogame.messagemarker.toggle(ogame.messagemarker.action_remove, ogame.messagemarker.type_chattab, $(this).parent().parent().parent().data("playerid"));
            ogame.messagemarker.toggle(ogame.messagemarker.action_remove, ogame.messagemarker.type_chatbar, $(this).parent().parent().parent().data("playerid"));
            if ($(this).data("playerid") > 0) {
                c.saveMessageCounter(0, $(this).data("playerid"))
            } else {
                if ($(this).data("associationid") > 0) {
                    c.saveMessageCounterAssociation(0, $(this).data("associationid"))
                }
            }
        })
    },
    initPlayerlist: function () {
        var c = ogame.chat;
        var d = ogame.tools;
        $(".js_accordion").accordion({
            collapsible: true,
            heightStyle: "content"
        });
        $(".playerlist_item:odd").addClass("odd");
        d.addHover(".playerlist_item, .msg, .playerlist_top_box .playerlist");
        $(".js_playerlist").on("click.playerList", ".pl_filter_set", function () {
            c.filterPlayerlist()
        });
        c.filterPlayerlist()
    },
    showChat: function (h) {
        var e = false;
        var g = ogame.chat;
        $(".chat_bar_list_item").each(function () {
            var a = $(this);
            if ((h.playerId !== undefined && a.data("playerid") === h.playerId) || (h.associationId !== undefined && a.data("associationid") === h.associationId)) {
                e = true;
                if (a.hasClass("outOfChatbar")) {
                    a.removeClass("outOfChatbar")
                }
                if (!a.hasClass("open")) {
                    a.click();
                    a[0].style.display = "inline"
                } else {
                    a.fadeTo("400", 0.3).fadeTo("400", 1)
                }
                a.find("textarea").focus()
            }
        });
        if (!e) {
            var f;
            if (h.playerId !== undefined) {
                f = g.createChatBarContainer(h.playerId)
            } else {
                f = g.createChatBarContainerForAssociations(h.associationId)
            }
            g.updateChatBar(f)
        }
    },
    showChatHistory: function (e) {
        var d = $(".js_chatHistory");
        var f = e.data;
        if (d.length) {
            d.remove()
        }
        $("#chatList").remove();
        $(f).insertAfter("#planet");
        $("li.playerlist_item").removeClass("active");
        $("li.playerlist_item[data-playerid='" + e.playerId + "']").addClass("active");
        initBBCodeEditor(locaKeys, itemNames, false, ".new_msg_textarea", 2000, true)
    },
    submitChatBarMsg: function (p, l, h, m) {
        var o = ogame.chat;
        var n = parseInt($(".chat_box_textarea").css("max-height"));
        var k = parseInt($(".chat_box_textarea").css("padding-top")) + parseInt($(".chat_box_textarea").css("padding-bottom"));
        if (l === 13 && h) {
            if (m <= (n + k)) {
                p.css("height", m - k)
            }
            return
        }
        if (l === 13) {
            if (p.parent(".chat_box").data("playerid") !== undefined) {
                o.sendMessage(p.parent(".chat_box").data("playerid"), 0, p.val())
            } else {
                if (p.parent(".chat_box").data("associationid") !== undefined) {
                    o.sendMessage(0, p.parent(".chat_box").data("associationid"), p.val())
                }
            }
            p.val("")
        }
    },
    swapChatBarItem: function (d) {
        var f = ogame.chat;
        var e = $(".more_chat_bar_items").prev();
        e.removeClass("open").find(".icon_close").hide().end().find(".chat_box").hide();
        e.remove();
        d.addClass("open").find(".icon_close").show().end().find(".chat_box").show().end().insertBefore(".more_chat_bar_items");
        f.addToMoreBox([e]);
        f.updateChatBar();
        f.updateCustomScrollbar(d.find(".chat_box_ctn"))
    },
    toggleChatBox: function (f, l) {
        var h = ogame.chat;
        if (f.parents(".chat_box").length && !f.hasClass("icon_close")) {
            return
        }
        var k = l.children(".chat_box");
        if (k.is(":visible")) {
            k.hide();
            l.removeClass("open")
        } else {
            if (!l.hasClass("more_chat_bar_items")) {
                l.addClass("open");
                h.updateChatBar()
            }
            k.show();
            var g = k.find(".chat_box_ctn");
            if (l.hasClass("more_chat_bar_items")) {
                g = k
            }
            h.updateCustomScrollbar(g);
            k.find("textarea").focus()
        }
        ogame.messagecounter.resetCounterByType(ogame.messagecounter.type_chat)
    },
    handleTooMuchWindows: function (o, l, u, s, p, r) {
        var q = ogame.chat;
        var n = true;
        var m = [];
        $($(".chat_bar_list > .chat_bar_list_item").get().reverse()).each(function () {
            var a = $(this);
            if (n) {
                if (a.hasClass("more_chat_bar_items") || a.attr("id") === "chatBarPlayerList") {
                    return
                }
                if (a.hasClass("open")) {
                    o--
                } else {
                    l--
                }
                a.removeClass("open").find(".icon_close").hide().end().find(".chat_box").hide();
                m.push(a);
                a.remove();
                widthTotal = s * l + u * o + p;
                n = (widthTotal >= r) ? true : false
            }
        });
        q.addToMoreBox(m)
    },
    getItemFromMorelist2Chatbar: function () {
        var c = $(".more_items .chat_bar_list_item").first().remove();
        var d = ogame.chat;
        c.addClass("open").find(".icon_close").show().end().find(".chat_box").show().end().insertBefore(".more_chat_bar_items");
        if ($(".more_items .chat_bar_list_item").length <= 0) {
            $(".more_chat_bar_items").remove()
        }
        d.updateCustomScrollbar($(".more_chat_bar_items>.chat_box"));
        d.updateCustomScrollbar(c.find(".chat_box_ctn"))
    },
    updateChatBar: function (n) {
        var r = ogame.chat;
        var o = $(".chat_bar_list > .chat_bar_list_item.open").length;
        var v = $(".more_chat_bar_items").length;
        var m = $(".chat_bar_list").children().length - o - v;
        var u = 190;
        var w = 270;
        var q = 190;
        var s = $("body").innerWidth();
        if (n) {
            o++
        }
        var p = u * m + w * o + q * v;
        if (p >= s) {
            r.handleTooMuchWindows(o, m, w, u, q, s)
        } else {
            if ((p + w) <= s && $(".more_chat_bar_items").length > 0) {
                r.getItemFromMorelist2Chatbar()
            }
        }
        if (n) {
            n.insertAfter("#chatBarPlayerList");
            r.updateCustomScrollbar(n.find(".chat_box_ctn"))
        }
    },
    updateCustomScrollbar: function (c, d) {
        if (!c || c.length == 0) {
            return
        }
        if (c.hasClass("mCustomScrollbar")) {
            c.mCustomScrollbar("update")
        } else {
            c.mCustomScrollbar({theme: "ogame"})
        }
        if (d !== true) {
            c.mCustomScrollbar("scrollTo", "bottom", {scrollInertia: 0})
        }
        c.each(function () {
            if ($(this).height() + "px" == $(this).css("max-height")) {
                $(this).addClass("scrollbarPresent")
            }
        })
    },
    updateVisibleState: function () {
        var b = {chatbar: false, players: [], associations: []};
        $(".chat_bar_list>.chat_bar_list_item").each(function () {
            var a = $(this);
            if (a.attr("id") === "chatBarPlayerList" && a.children(".cb_playerlist_box").is(":visible")) {
                b.chatbar = true
            } else {
                if (a.data("playerid") && a.children(".chat_box").is(":visible")) {
                    b.players.push(a.data("playerid"))
                } else {
                    if (a.data("associationid") && a.children(".chat_box").is(":visible")) {
                        b.associations.push(a.data("associationid"))
                    }
                }
            }
        });
        $.cookie("visibleChats", JSON.stringify(b), {expires: 7})
    },
    showPlayerList: function (d) {
        // TODO: this code is part of "0 Contact(s) online." chat system.
        // TODO: re-enable this code when working on this feature. For now its disabled.
        return;
        var c = ogame.chat;
        if ($.inArray(d, c.playerListSelector) === -1) {
            c.playerListSelector.push(d)
        }
        if (c.isLoadingPlayerList === false && c.playerList === null) {
            c.isLoadingPlayerList = true;
            console.log('showPlayerList()');
            $.ajax({
                url: chatUrl,
                type: "POST",
                dataType: "json",
                data: {action: "showPlayerList"},
                success: function (a) {
                    c.playerList = a.content;
                    c.isLoadingPlayerList = false;
                    c._showPlayerList()
                },
                error: function (f, a, b) {
                    c.isLoadingPlayerList = false
                }
            })
        } else {
            c._showPlayerList()
        }
    },
    _showPlayerList: function () {
        var b = ogame.chat;
        $.each(b.playerListSelector, function (a, d) {
            $(d).html(b.playerList)
        })
    }
};
inventoryObj = {
    currentPage: null,
    currentItems: null,
    currentItem: null,
    currentCategory: null,
    initalizeSlider: function (R, N, P, U, O, al, ac, ai, S) {
        if (inventoryObj.currentItems == R && typeof(al) == "undefined" || al == false) {
            return
        }
        inventoryObj.currentItems = R;
        O = O || "slideIn";
        ac = ac || "tooltipHTML js_hideTipOnMobile";
        if (typeof(ai) == "undefined") {
            ai = true
        }
        if (typeof(S) == "undefined") {
            S = true
        }
        $("#" + N + "Box").remove(".anythingSlider");
        var ag = [];
        var af = 0;
        for (var M in R) {
            var W = R[M];
            if (typeof(W.hide) != "undefined" && W.hide) {
                continue
            }
            if (inventoryObj.currentPage == "shop" || inventoryObj.currentPage == "inventory") {
                var T = af % inventoryObj.itemsPerSlide;
                ag[af + (2 * (T % 3)) - 2 * Math.floor(T / 3)] = W
            } else {
                ag[af] = W
            }
            af++
        }
        var Q = 0, I = 0, L = $('<ul id="' + N + '" />');
        for (var ak = ag.length; I < ak; I++) {
            if (typeof(ag[I]) == "undefined") {
                K.append('<div class="item_img"><div class="empty border5px"></div></div>');
                continue
            }
            var W = ag[I];
            if (I % inventoryObj.itemsPerSlide == 0) {
                var K = $('<li class="slide_' + Q + '" />').appendTo(L);
                Q++
            }
            var aj, V, Z;
            if (inventoryObj.currentPage == "shop") {
                aj = getNumberFormatShort(W.costs, null) + " " + loca.currency[W.currency];
                V = "price"
            } else {
                aj = getNumberFormatShort(W.amount);
                V = "amount"
            }
            var Y;
            if (ai) {
                Y = W.imageLarge + "-75x.png"
            } else {
                Y = W.imageLarge + "-100x.png"
            }
            var X;
            if (W.canBeActivated || W.canBeBoughtAndActivated) {
                X = "enabled"
            } else {
                X = "disabled"
            }
            if (W.isReduced) {
                Z = '<div class="sale_badge ' + X + '"></div>'
            } else {
                Z = ""
            }
            var ad = (W.timeLeft != null) ? " js_is_active " : "";
            var ae = "";
            var aa = W.title;
            if (N.indexOf("js_activeItemSlider") != -1) {
                aa = "";
                ae = (W.timeLeft != null) ? '<span class="js_duration undermark" data-total-duration="' + W.totalTime + '">' + W.timeLeft + "</span>" : ""
            }
            var ab = "";
            if (W.timeLeft != null && N.indexOf("js_activeItemSlider") != -1) {
                ab = '<div class="pusher"></div>'
            }
            var ah = "";
            if ($.inArray(birthdayCategory, W.category) != -1) {
                ah = '<div class="event_active_hint"></div>'
            }
            K.append('<div class="item_img r_' + W.rarity + '" style="background-image: url(/img/icons/items/' + Y + ');"><div class="item_img_box">' + ah + '<div class="activation ' + X + ad + '"></div><a href="javascript:void(0);" tabindex="1" title="' + aa + '" class="detail_button ' + ac + " " + O + '" ref="' + W.ref + '">' + Z + '<span class="ecke"><span class="level ' + V + '">' + aj + "</span></span></a></div>" + ae + ab + "</div>")
        }
        $("#" + N + "Box").prepend(L);
        if (I % inventoryObj.itemsPerSlide != 0) {
            for (var J = I % inventoryObj.itemsPerSlide; J < inventoryObj.itemsPerSlide; J++) {
                $("#" + N + " li:last").append('<div class="item_img"><div class="empty border5px"></div></div>')
            }
        }
        return mySlider = $("#" + N).anythingSlider({
            startStopped: true,
            buildStartStop: false,
            expand: true,
            resizeContents: false,
            theme: "default",
            infiniteSlides: false,
            autoPlay: false,
            easing: "swing",
            resizeContents: true,
            stopAtEnd: true,
            playRtl: isRTLEnabled,
            hashTags: true,
            buildNavigation: S,
            onInitialized: function (e, k) {
                if (isMobile) {
                    var h = 1000, f = 50, d = 0, b = 0, g = "ontouchend" in document, a = (g) ? "touchstart" : "mousedown", c = (g) ? "touchmove" : "mousemove", l = (g) ? "touchend" : "mouseup";
                    k.$window.bind(a, function (m) {
                        b = (new Date()).getTime();
                        d = m.originalEvent.touches ? m.originalEvent.touches[0].pageX : m.pageX
                    }).bind(l, function (m) {
                        b = 0;
                        d = 0
                    }).bind(c, function (n) {
                        var m = n.originalEvent.touches ? n.originalEvent.touches[0].pageX : n.pageX, o = (d === 0) ? 0 : Math.abs(m - d), p = (new Date()).getTime();
                        if (b !== 0 && p - b < h && o > f) {
                            if (m < d) {
                                k.goForward()
                            }
                            if (m > d) {
                                k.goBack()
                            }
                            b = 0;
                            d = 0
                        }
                    })
                }
            }
        })
    },
    initShop: function () {
        var b = this;
        $(window).unbind(".shop");
        $(document).undelegate(".slideIn", "click.shop").delegate(".slideIn", "click.shop", function () {
            if (b.currentItem == $(this).attr("ref")) {
                b.currentItem = null;
                $.bbq.pushState({item: ""})
            } else {
                b.currentItem = $(this).attr("ref");
                $.bbq.pushState({item: $(this).attr("ref")})
            }
        });
        $("button.to_shop").bind("click.shop", function () {
            $.bbq.pushState({page: "shop"})
        });
        $("button.to_inventory").bind("click.shop", function () {
            $.bbq.pushState({page: "inventory"})
        });
        $("button.buyResourcesLink").bind("click", function () {
            reload_page($(this).data("link"))
        });
        $(".to_shop, .to_inventory").hover(function () {
            $(this).addClass("hover")
        }, function () {
            $(this).removeClass("hover")
        });
        $(".categoryFilter li a").bind("click.shop", function () {
            $.bbq.pushState({category: $(this).attr("rel")})
        });
        $(window).unbind("hashchange.shop").bind("hashchange.shop", function (a) {
            b.onHashChange($.deparam.fragment(a.fragment))
        });
        b.onHashChange($.deparam.fragment());
        inventoryObj.refreshResources()
    },
    onHashChange: function (l) {
        if (typeof(l.page) == "undefined") {
            var h = {
                page: "shop",
                category: $(".categoryFilter a:first").attr("rel")
            };
            if (typeof(l.item) != "undefined" && l.item != "") {
                var k = inventoryObj.items_shop[l.item];
                if (k.category.length > 0) {
                    h.category = k.category[k.category.length - 1]
                }
            }
            $.bbq.pushState(h);
            return
        }
        var f = this.currentPage != l.page;
        if (f) {
            if (l.page == "inventory") {
                this.openInventory();
                $(".planetlink, .moonlink").fragment({page: l.inventory})
            } else {
                this.openShop();
                $(".planetlink, .moonlink").fragment({page: l.shop})
            }
            this.updateCategoryAmount()
        }
        if (typeof(l.category) == "undefined") {
            $.bbq.pushState({category: $(".categoryFilter a:first").attr("rel")});
            return
        } else {
            if (l.category != this.currentCategory || f) {
                this.changeCategory(l.category)
            }
        }
        if (typeof(l.item) == "undefined" || l.item == "" && this.currentItem != null) {
            $("#itemDetails a.close_details").click();
            $(".planetlink, .moonlink").fragment({item: ""})
        } else {
            if (this.currentItem != l.item) {
                var g = $(".slideIn[ref='" + l.item + "']");
                if (g.length) {
                    g.click()
                } else {
                    gfSlider.slideIn(getElementByIdWithCache("detail"), l.item)
                }
                $(".planetlink, .moonlink").fragment({item: l.item})
            }
        }
    },
    initShopDetails: function () {
        var c = this;
        var d = $.deparam.querystring().page;
        $(document).undelegate("#itemDetails .close_details", "click").delegate("#itemDetails .close_details", "click", function () {
            $("a.slideIn[ref=" + $(this).attr("ref") + "]:first").click()
        }).undelegate("#itemDetails a.item.build-it", "click").delegate("#itemDetails a.item.build-it", "click", function () {
            $.ajax({
                url: $(this).attr("rel"),
                data: {ajax: 1, token: buyToken},
                type: "POST",
                dataType: "json",
                error: function () {
                    fadeBox(translation.buyError, true)
                },
                success: function (a) {
                    buyToken = a.newToken;
                    if (a.error) {
                        fadeBox(a.message, true)
                    } else {
                        fadeBox(a.message, false);
                        inventoryObj.refreshResources();
                        inventoryObj.refreshItemData(a.item)
                    }
                }
            });
            return false
        }).undelegate("#itemDetails a.item.build-it_disabled.dm", "click").delegate("#itemDetails a.item.build-it_disabled.dm", "click", function () {
            errorBoxDecision(LocalizationStrings.error, loca.buyDMDecision, LocalizationStrings.yes, LocalizationStrings.no, function () {
                if ($("a.dm_button").length > 0) {
                    $("a.dm_button").click()
                } else {
                    window.location.href = $("#darkmatter_box a").attr("href")
                }
            })
        }).undelegate("#itemDetails a.activateItem.build-it", "click").delegate("#itemDetails a.activateItem.build-it", "click", function () {
            var a = $(this);

            function b() {
                $.ajax({
                    url: a.attr("rel"),
                    data: {ajax: 1, token: activateToken, referrerPage: d},
                    type: "POST",
                    dataType: "json",
                    error: function () {
                        fadeBox(translation.buyError, true);
                        $("#itemDetails a.activateItem").removeClass("build-it").addClass("build-it_disabled")
                    },
                    success: function (f) {
                        activateToken = f.newToken;
                        if (f.error) {
                            fadeBox(f.message, true);
                            $("#itemDetails a.activateItem").removeClass("build-it").addClass("build-it_disabled")
                        } else {
                            if (f.message.reload) {
                                location.href = getRedirectLink();
                                return
                            }
                            f = f.message;
                            fadeBox(f.message, false);
                            inventoryObj.refreshResources();
                            inventoryObj.refreshItemData(f.item)
                        }
                    }
                })
            }

            if (a.hasClass("isUpgrade")) {
                errorBoxDecision(LocalizationStrings.activateItem.upgradeItemQuestionHeader, LocalizationStrings.activateItem.upgradeItemQuestion, LocalizationStrings.yes, LocalizationStrings.no, b)
            } else {
                b()
            }
            return false
        }).undelegate("#itemDetails a.buyAndActivate.build-it", "click").delegate("#itemDetails a.buyAndActivate.build-it", "click", function () {
            var a = $(this);

            function b() {
                $.ajax({
                    url: a.attr("rel"),
                    data: {ajax: 1, token: activateToken, referrerPage: d},
                    type: "POST",
                    dataType: "json",
                    error: function () {
                        fadeBox(translation.buyError, true);
                        $("#itemDetails a.activateItem").removeClass("build-it").addClass("build-it_disabled")
                    },
                    success: function (f) {
                        activateToken = f.newToken;
                        if (f.error) {
                            fadeBox(f.message, true);
                            $("#itemDetails a.activateItem").removeClass("build-it").addClass("build-it_disabled")
                        } else {
                            if (f.message.reload) {
                                location.href = getRedirectLink();
                                return
                            }
                            f = f.message;
                            fadeBox(f.message, false);
                            inventoryObj.refreshResources();
                            inventoryObj.refreshItemData(f.item)
                        }
                    }
                })
            }

            if (a.hasClass("isUpgrade")) {
                errorBoxDecision(LocalizationStrings.activateItem.upgradeItemQuestionHeader, LocalizationStrings.activateItem.upgradeItemQuestion, LocalizationStrings.yes, LocalizationStrings.no, b)
            } else {
                b()
            }
            return false
        })
    },
    refreshResources: function () {
        getAjaxResourcebox(function (b) {
            $(".to_dark_matter .level").text(b.darkmatter.resources["actualFormat"])
        })
    },
    refreshItemData: function (e) {
        var d = e.ref;
        changeTooltip($(".detail_button[ref='" + d + "']"), e.title);
        $(".detail_button[ref='" + d + "'] span.amount, #itemDetails[data-uuid='" + d + "'] span.amount").html(tsdpkt(e.amount));
        if (typeof(inventoryObj.items_inventory) != "undefined") {
            if (inventoryObj.items_inventory.length == 0) {
                inventoryObj.items_inventory = {}
            } else {
                if (e.amount <= 0) {
                    delete inventoryObj.items_inventory[d]
                } else {
                    inventoryObj.items_inventory[d] = e
                }
            }
        }
        if (typeof(inventoryObj.items_shop) != "undefined") {
            if (inventoryObj.items_shop.length == 0) {
                inventoryObj.items_shop = {}
            }
            inventoryObj.items_shop[d] = e
        }
        changeTooltip($('#itemDetails[data-uuid="' + d + '"] a.activateItem, #itemDetails[data-uuid="' + d + '"] a.buyAndActivate'), e.activationTitle);
        if (e.hasEnoughCurrency) {
            $('#itemDetails[data-uuid="' + d + '"] a.item').addClass("build-it").removeClass("build-it_disabled")
        } else {
            $('#itemDetails[data-uuid="' + d + '"] a.item').removeClass("build-it").addClass("build-it_disabled")
        }
        if (e.amount > 0) {
            $('#itemDetails[data-uuid="' + d + '"] a.activateItem').show();
            $('#itemDetails[data-uuid="' + d + '"] a.buyAndActivate').hide();
            if (e.canBeActivated) {
                $('#itemDetails[data-uuid="' + d + '"] a.activateItem').removeClass("build-it_disabled").addClass("build-it")
            } else {
                $('#itemDetails[data-uuid="' + d + '"] a.activateItem').addClass("build-it_disabled").removeClass("build-it")
            }
        } else {
            $('#itemDetails[data-uuid="' + d + '"] a.activateItem').hide();
            $('#itemDetails[data-uuid="' + d + '"] a.buyAndActivate').show();
            if (e.canBeBoughtAndActivated && e.hasEnoughCurrency) {
                $('#itemDetails[data-uuid="' + d + '"] a.buyAndActivate').removeClass("build-it_disabled").addClass("build-it")
            } else {
                $('#itemDetails[data-uuid="' + d + '"] a.buyAndActivate').addClass("build-it_disabled").removeClass("build-it")
            }
        }
        if (isMobile) {
            var f = "";
            if ($('#itemDetails[data-uuid="' + d + '"] a.activateItem:visible,#itemDetails[data-uuid="' + d + '"] a.buyAndActivate:visible').hasClass("build-it_disabled")) {
                f += e.activationTitle
            }
            if (e.buyTitle.length && e.buyTitle != e.activationTitle) {
                f += e.buyTitle
            }
            $('#itemDetails[data-uuid="' + d + '"] .info_txt').text(f)
        }
        if (e.timeLeft > 0 && e.extendable) {
            $('#itemDetails[data-uuid="' + d + '"] a.activateItem span').html(loca.extend);
            $('#itemDetails[data-uuid="' + d + '"] a.buyAndActivate span').html(loca.buyAndExtend)
        } else {
            $('#itemDetails[data-uuid="' + d + '"] a.activateItem span').html(loca.activate);
            $('#itemDetails[data-uuid="' + d + '"] a.buyAndActivate span').html(loca.buyAndActivate)
        }
        if (e.isAnUpgrade) {
            $('#itemDetails[data-uuid="' + d + '"] a.activateItem, #itemDetails[data-uuid="' + d + '"] a.buyAndActivate').addClass("isUpgrade")
        } else {
            $('#itemDetails[data-uuid="' + d + '"] a.activateItem, #itemDetails[data-uuid="' + d + '"] a.buyAndActivate').removeClass("isUpgrade")
        }
        if (this.inShop === true) {
            this.changeCategory($(".categoryFilter a.active").attr("rel"))
        }
        this.updateCategoryAmount()
    },
    boughtItemHint: function () {
        $(".to_inventory .bought_item_notice").show().fadeOut(1000)
    },
    openShop: function () {
        this.currentPage = "shop";
        $("#js_inventorySliderBox").hide();
        $("#js_shopSliderBox").show();
        $(".to_inventory").removeClass("active");
        $(".to_shop").addClass("active");
        $("#buttonz h2").text(loca.LOCA_PREMIUM_SHOP);
        if (isMobile) {
            $(".js_shopCurrentPage").html(loca.shopText)
        }
    },
    openInventory: function () {
        this.currentPage = "inventory";
        $("#js_shopSliderBox").hide();
        $("#js_inventorySliderBox").show();
        $(".to_shop").removeClass("active");
        $(".to_inventory").addClass("active");
        $("#buttonz h2").text(loca.LOCA_PREMIUM_INVENTORY);
        if (isMobile) {
            $(".js_shopCurrentPage").html(loca.inventoryText)
        }
    },
    changeCategory: function (c) {
        inventoryObj.currentCategory = c;
        $(".planetlink, .moonlink").fragment({category: c});
        $(".categoryFilter li, .categoryFilter li a").removeClass("active");
        $('.categoryFilter li a[rel="' + c + '"]').addClass("active").parent().addClass("active");
        $(".anythingSlider").remove();
        var d = function (m, a) {
            var n = [];
            var l = [];
            var b = 0;
            $.each(m, function (f) {
                if (this.category != null) {
                    var e = "$" + this.category.join("$") + "$";
                    if (e.toLowerCase().indexOf("$" + c + "$") != -1) {
                        n[inventoryObj.item_orders[c][this.ref]] = this;
                        if (inventoryObj.item_orders[c][this.ref] > b) {
                            b = inventoryObj.item_orders[c][this.ref]
                        }
                    }
                }
            });
            for (var k = 0; k <= b; ++k) {
                if (n[k]) {
                    l[k] = n[k]
                }
            }
            inventoryObj.initalizeSlider(l, a, 340, 340, null, null, null, false)
        };
        if (inventoryObj.currentPage == "shop") {
            d(inventoryObj.items_shop, "js_shopSlider")
        } else {
            if (inventoryObj.currentPage == "inventory") {
                d(inventoryObj.items_inventory, "js_inventorySlider")
            }
        }
    },
    updateCategoryAmount: function () {
        var d;
        if (inventoryObj.currentPage == "shop") {
            d = inventoryObj.items_shop
        } else {
            if (inventoryObj.currentPage == "inventory") {
                d = inventoryObj.items_inventory
            } else {
                return
            }
        }
        var c = $(".categoryFilter");
        c.find(".amount").text(0);
        $.each(d, function (l) {
            if (this.category != null) {
                for (var a in this.category) {
                    var b = this.category[a];
                    var h = c.find('a[rel="' + b + '"] .amount');
                    var k;
                    if (inventoryObj.currentPage == "shop") {
                        k = 1
                    } else {
                        if (inventoryObj.currentPage == "inventory") {
                            k = this.amount
                        }
                    }
                    h.text(tsdpkt(getValue(h.text()) + k))
                }
            }
        });
        $.each(c.find("li"), function (b) {
            var a = inventoryObj.currentPage.slice(0, 1).toUpperCase() + inventoryObj.currentPage.slice(1);
            if ($(this).hasClass("in" + a)) {
                $(this).show()
            } else {
                $(this).hide();
                if (!c.find("li:visible .active").length) {
                    c.find("li:visible:first a").click()
                }
            }
        })
    }
};
/*
 * Spinners 3.0.0
 * (c) 2010-2012 Nick Stakenburg - http://www.nickstakenburg.com
 *
 * Spinners is freely distributable under the terms of an MIT-style license.
 *
 * GitHub: http://github.com/staaky/spinners
 */
var Spinners = {version: "3.0.0"};
(function (b) {
    function c(k) {
        return k * Math.PI / 180
    }

    function d(k) {
        this.element = k
    }

    function e(k, l) {
        k && (this.element = k, a.remove(k), a.removeDetached(), this._position = 0, this._state = "stopped", this.setOptions(b.extend({
            color: "#000",
            dashes: 12,
            radius: 5,
            height: 5,
            width: 1.8,
            opacity: 1,
            padding: 3,
            rotation: 700
        }, l || {})), this.drawPosition(0), a.add(this))
    }

    var f = {
        scroll: function (l, m) {
            if (!m) {
                return l
            }
            var k = l.slice(0, m);
            return l.slice(m, l.length).concat(k)
        }, isElement: function (k) {
            return k && 1 == k.nodeType
        }, element: {
            isAttached: function () {
                return function (k) {
                    for (; k && k.parentNode;) {
                        k = k.parentNode
                    }
                    return !!k && !!k.body
                }
            }()
        }
    }, g = {
        drawRoundedRectangle: function (l, n) {
            var o = b.extend({
                top: 0,
                left: 0,
                width: 0,
                height: 0,
                radius: 0
            }, n || {}), p = o.left, q = o.top, k = o.width, m = o.height, o = o.radius;
            l.beginPath(), l.moveTo(p + o, q), l.arc(p + k - o, q + o, o, c(-90), c(0), !1), l.arc(p + k - o, q + m - o, o, c(0), c(90), !1), l.arc(p + o, q + m - o, o, c(90), c(180), !1), l.arc(p + o, q + o, o, c(-180), c(-90), !1), l.closePath(), l.fill()
        }
    }, h = function () {
        function l(n) {
            var o = [];
            0 == n.indexOf("#") && (n = n.substring(1)), n = n.toLowerCase();
            if ("" != n.replace(m, "")) {
                return null
            }
            3 == n.length ? (o[0] = n.charAt(0) + n.charAt(0), o[1] = n.charAt(1) + n.charAt(1), o[2] = n.charAt(2) + n.charAt(2)) : (o[0] = n.substring(0, 2), o[1] = n.substring(2, 4), o[2] = n.substring(4));
            for (n = 0; n < o.length; n++) {
                o[n] = parseInt(o[n], 16)
            }
            return o.red = o[0], o.green = o[1], o.blue = o[2], o
        }

        var m = RegExp("[0123456789abcdef]", "g"), k = function () {
            function n(p, q, o) {
                return p = p.toString(o || 10), Array(q - p.length).join("0") + p
            }

            return function (o, p, q) {
                return "#" + n(o, 2, 16) + n(p, 2, 16) + n(q, 2, 16)
            }
        }();
        return {
            hex2rgb: l, hex2fill: function (n, p) {
                "undefined" == typeof p && (p = 1);
                var o = p, q = l(n);
                return q[3] = o, q.opacity = o, "rgba(" + q.join() + ")"
            }, rgb2hex: k
        }
    }();
    b.extend(Spinners, {
        enabled: !1, support: {
            canvas: function () {
                var k = b("<canvas>")[0];
                return !!k.getContext && !!k.getContext("2d")
            }()
        }, init: function () {
            if (this.support.canvas || window.G_vmlCanvasManager && window.attachEvent && -1 === navigator.userAgent.indexOf("Opera")) {
                window.G_vmlCanvasManager && window.G_vmlCanvasManager.init_(document), this.enabled = !0
            }
        }, create: function (k, l) {
            return d.create(k, l), this.get(k)
        }, get: function (k) {
            return new d(k)
        }, play: function (k) {
            return this.get(k).play(), this
        }, pause: function (k) {
            return this.get(k).pause(), this
        }, toggle: function (k) {
            return this.get(k).toggle(), this
        }, stop: function (k) {
            return this.get(k).stop(), this
        }, remove: function (k) {
            return this.get(k).remove(), this
        }, removeDetached: function () {
            return a.removeDetached(), this
        }, center: function (k) {
            return this.get(k).center(), this
        }, setOptions: function (k, l) {
            return this.get(k).setOptions(l), this
        }, getDimensions: function (k) {
            return k = 2 * a.get(k)[0].getLayout().workspace.radius, {
                width: k,
                height: k
            }
        }
    });
    var a = {
        spinners: [], get: function (k) {
            if (k) {
                var l = [];
                return b.each(this.spinners, function (n, m) {
                    m && (f.isElement(k) ? m.element == k : b(m.element).is(k)) && l.push(m)
                }), l
            }
        }, add: function (k) {
            this.spinners.push(k)
        }, remove: function (k) {
            b(b.map(this.spinners, function (l) {
                if (f.isElement(k) ? l.element == k : b(l.element).is(k)) {
                    return l.element
                }
            })).each(b.proxy(function (l, m) {
                this.removeByElement(m)
            }, this))
        }, removeByElement: function (k) {
            var l = this.get(k)[0];
            l && (l.remove(), this.spinners = b.grep(this.spinners, function (m) {
                return m.element != k
            }))
        }, removeDetached: function () {
            b.each(this.spinners, b.proxy(function (k, l) {
                l && l.element && !f.element.isAttached(l.element) && this.remove(l.element)
            }, this))
        }
    };
    b.extend(d, {
        create: function (k, l) {
            if (k) {
                var m = l || {}, n = [];
                return f.isElement(k) ? n.push(new e(k, m)) : b(k).each(function (o, p) {
                    n.push(new e(p, m))
                }), n
            }
        }
    }), b.extend(d.prototype, {
        items: function () {
            return a.get(this.element)
        }, play: function () {
            return b.each(this.items(), function (k, l) {
                l.play()
            }), this
        }, stop: function () {
            return b.each(this.items(), function (k, l) {
                l.stop()
            }), this
        }, pause: function () {
            return b.each(this.items(), function (k, l) {
                l.pause()
            }), this
        }, toggle: function () {
            return b.each(this.items(), function (k, l) {
                l.toggle()
            }), this
        }, center: function () {
            return b.each(this.items(), function (k, l) {
                l.center()
            }), this
        }, setOptions: function (k) {
            return b.each(this.items(), function (l, m) {
                m.setOptions(k)
            }), this
        }, remove: function () {
            return a.remove(this.element), this
        }
    }), b.extend(e.prototype, {
        setOptions: function (k) {
            this.options = b.extend({}, this.options, k || {}), this.options.radii && (k = this.options.radii, this.options.radius = Math.min(k[0], k[1]), this.options.height = Math.max(k[0], k[1]) - this.options.radius), this.options.dashWidth && (this.options.width = this.options.dashWidth), this.options.speed && (this.options.duration = 1000 * this.options.speed);
            var k = this._state, l = this._position;
            this._layout = null, this.build(), l && l >= this.options.dashes - 1 && (this._position = this.options.dashes - 1);
            switch (k) {
                case"playing":
                    this.play();
                    break;
                case"paused":
                case"stopped":
                    this.drawPosition(this._position)
            }
            this._centered && this.center()
        }, remove: function () {
            this.canvas && (this.pause(), b(this.canvas).remove(), this.ctx = this.canvas = null)
        }, build: function () {
            this.remove();
            var k = this.getLayout().workspace.radius;
            return b(document.body).append(this.canvas = b("<canvas>").attr({
                width: 2 * k,
                height: 2 * k
            }).css({zoom: 1})), window.G_vmlCanvasManager && G_vmlCanvasManager.initElement(this.canvas[0]), this.ctx = this.canvas[0].getContext("2d"), this.ctx.globalAlpha = this.options.opacity, b(this.element).append(this.canvas), this.ctx.translate(k, k), this
        }, drawPosition: function (k) {
            var l = this.getLayout().workspace, k = f.scroll(l.opacities, -1 * k), m = l.radius, l = this.options.dashes, n = c(360 / l);
            this.ctx.clearRect(-1 * m, -1 * m, 2 * m, 2 * m);
            for (m = 0; m < l; m++) {
                this.drawDash(k[m], this.options.color), this.ctx.rotate(n)
            }
        }, drawDash: function (n, o) {
            this.ctx.fillStyle = h.hex2fill(o, n);
            var k = this.getLayout(), m = k.workspace.radius, l = k.dash.position, k = k.dash.dimensions;
            g.drawRoundedRectangle(this.ctx, {
                top: l.top - m,
                left: l.left - m,
                width: k.width,
                height: k.height,
                radius: Math.min(k.height, k.width) / 2
            })
        }, _nextPosition: function () {
            var k = this.options.rotation / this.options.dashes;
            this.nextPosition(), this._playTimer = window.setTimeout(b.proxy(this._nextPosition, this), k)
        }, nextPosition: function () {
            this._position == this.options.dashes - 1 && (this._position = -1), this._position++, this.drawPosition(this._position)
        }, play: function () {
            if ("playing" != this._state) {
                this._state = "playing";
                var k = this.options.rotation / this.options.dashes;
                return this._playTimer = window.setTimeout(b.proxy(this._nextPosition, this), k), this
            }
        }, pause: function () {
            if ("paused" != this._state) {
                return this._pause(), this._state = "paused", this
            }
        }, _pause: function () {
            this._playTimer && (window.clearTimeout(this._playTimer), this._playTimer = null)
        }, stop: function () {
            if ("stopped" != this._state) {
                return this._pause(), this._position = 0, this.drawPosition(0), this._state = "stopped", this
            }
        }, toggle: function () {
            return this["playing" == this._state ? "pause" : "play"](), this
        }, getLayout: function () {
            if (this._layout) {
                return this._layout
            }
            for (var k = this.options, l = k.dashes, m = k.width, n = k.radius, o = k.radius + k.height, p = Math.max(m, o), p = Math.ceil(Math.max(p, Math.sqrt(o * o + m / 2 * (m / 2)))), k = p += k.padding, q = 1 / l, r = [], D = 0; D < l; D++) {
                r.push((D + 1) * q)
            }
            return this._layout = l = {
                workspace: {radius: k, opacities: r},
                dash: {
                    position: {top: p - o, left: p - m / 2},
                    dimensions: {width: m, height: o - n}
                }
            }
        }, center: function () {
            var k = 2 * this.getLayout().workspace.radius;
            b(this.element.parentNode).css({position: "relative"}), b(this.element).css({
                position: "absolute",
                height: k + "px",
                width: k + "px",
                top: "50%",
                left: "50%",
                marginLeft: -0.5 * k + "px",
                marginTop: -0.5 * k + "px"
            }), this._centered = !0
        }
    }), Spinners.init(), Spinners.enabled || (d.create = function () {
        return []
    })
})(jQuery);


ogame.messagecounter = {
    countData: {chat: 0, messages: 0, buddy: 0},
    newChats: Array(),
    type_chat: 10,
    type_message: 11,
    type_buddy: 12,
    currentLinkSelector: null,
    currentType: 0,
    currentPlayer: null,
    sumNewChatMessages: 0,
    initialize: function (d, e) {
        var f = ogame.messagecounter;
        if (typeof e == "undefined" && d !== f.type_chat) {
            f.currentPlayer = 0
        }
        if (typeof e == "undefined" && d == f.type_chat) {
            return false
        }
        if (typeof e !== "undefined") {
            f.currentPlayer = e
        }
        f.currentType = d;
        switch (d) {
            case f.type_chat:
                f.currentLinkSelector = $("a.comm_menu.chat");
                break;
            case f.type_message:
                f.currentLinkSelector = $("a.comm_menu.messages");
                break;
            case f.type_buddy:
                f.currentLinkSelector = $("a.comm_menu.buddies");
                break;
            default:
                return false
        }
        f.update()
    },
    initChatCounter: function (d) {
        var c = ogame.messagecounter;
        c.currentLinkSelector = $("a.comm_menu.chat");
        c.currentType = c.type_chat;
        c.setCount(d);
        c.update()
    },
    update: function (f) {
        var d = ogame.messagecounter;
        var e;
        if (f === undefined) {
            e = chatLoca.X_NEW_CHATS
        } else {
            e = f
        }
        changeTooltip(d.currentLinkSelector, e.replace("#+#", d.getCount()))
    },
    resetCounterByType: function (l, h) {
        var k = ogame.messagecounter;
        var g = k.getIconSelectorByType(l);
        var f;
        if (h === undefined) {
            f = chatLoca.X_NEW_CHATS
        } else {
            f = h
        }
        changeTooltip(g, f.replace("#+#", 0))
    },
    getCountSelectorByType: function (e) {
        var f = ogame.messagecounter;
        var d = "";
        switch (e) {
            case f.type_chat:
                d = $("a.comm_menu.chat .new_msg_count");
                break;
            case f.type_message:
                d = $("a.comm_menu.messages .new_msg_count");
                break;
            case f.type_buddy:
                d = $("a.comm_menu.buddies .new_msg_count")
        }
        return d
    },
    getIconSelectorByType: function (d) {
        var f = ogame.messagecounter;
        var e = "";
        switch (d) {
            case f.type_chat:
                e = $("a.comm_menu.chat");
                break;
            case f.type_message:
                e = $("a.comm_menu.messages");
                break;
            case f.type_buddy:
                e = $("a.comm_menu.buddies")
        }
        return e
    },
    getCounterHtml: function (c) {
        var d = '<span class="new_msg_count">' + c + "</span>";
        return d
    },
    getCount: function () {
        var b = ogame.messagecounter;
        switch (b.currentType) {
            case b.type_chat:
                return b.countData.chat;
            case b.type_message:
                return b.countData.messages;
            case b.type_buddy:
                return b.countData.buddy
        }
    },
    setCount: function (d) {
        var c = ogame.messagecounter;
        switch (c.currentType) {
            case c.type_chat:
                c.countData.chat = d;
                break;
            case c.type_message:
                c.countData.messages = d;
                break;
            case c.type_buddy:
                c.countData.buddy = d;
                break
        }
    },
    updateCountData: function () {
        var f = ogame.messagecounter;
        if (f.isOpen()) {
            f.setCount(0)
        } else {
            if (f.shouldAddCounter()) {
                var d = 1
            } else {
                var e = f.getCountSelectorByType(f.currentType);
                var d = e.html();
                d = parseInt(d) + 1
            }
            f.setCount(d)
        }
    },
    shouldAddCounter: function () {
        var g = ogame.messagecounter;
        var e = g.getCountSelectorByType(g.currentType);
        var f = e.html();
        var h = false;
        if (typeof f == "undefined") {
            h = true
        }
        return h
    },
    setNewCounter: function (d, c) {
        d.html(c)
    },
    isOpen: function () {
        var c = ogame.messagecounter;
        var d = false;
        switch (c.currentType) {
            case c.type_chat:
                d = ogame.chat.isOpen(c.currentPlayer);
                break;
            case c.type_message:
                d = (location.href.indexOf("page=messages") > -1);
                break;
            case c.type_buddy:
                d = (location.href.indexOf("page=buddies") > -1);
                break
        }
        return d
    }
};
ogame.messagemarker = {
    type_chatbar: 10,
    type_chattab: 11,
    action_remove: 20,
    action_add: 21,
    currentCount: "",
    currentSelector: "",
    currentPlayernameObject: "",
    currentListPlayernameObject: "",
    currentPartnerId: "",
    currentListItemSelector: "",
    totalNewMessages: 0,
    playerlist: new Array(),
    newsInitialized: false,
    effect: "none",
    initialize: function () {
        $(".new_msg_count[data-playerid]").each(function () {
            var c = ogame.messagemarker;
            var d = $(this).data("playerid");
            if (d && $.inArray(d, c.playerlist) === -1) {
                c.playerlist.push(d);
                c.setPartnerId(d);
                c.updateNewMarker()
            }
        });
        ogame.messagemarker.effect = "highlight"
    },
    initMarker: function (e) {
        var d = ogame.messagemarker;
        var f = 0;
        $.each(e, function (b, a) {
            d.setPartnerId(a);
            var c = $('.new_msg_count[data-playerid="' + a + '"]').data("new-messages");
            if (c != null && c > 0) {
                d.setSelectorByType(d.type_chatbar);
                d.mark(d.currentSelector, d.currentPlayernameObject, c);
                d.mark(d.currentListItemSelector, d.currentListPlayernameObject, c);
                d.setSelectorByType(d.type_chattab);
                d.mark(d.currentSelector, d.currentPlayernameObject, c)
            }
            f = f + 1
        });
        return f
    },
    setCounter: function (c, d) {
        this.setPartnerId(c);
        $('.new_msg_count[data-playerid="' + this.currentPartnerId + '"]').data("new-messages", d);
        this.updateNewMarker()
    },
    toggle: function (h, e, g, f) {
        this.setPartnerId(g);
        this.currentCount = parseInt($('.new_msg_count[data-playerid="' + this.currentPartnerId + '"]').data("new-messages"));
        if (h === this.action_add) {
            this.updateNewMarker()
        }
        if (h === this.action_remove) {
            this.removeNewMarker()
        }
    },
    mark: function (e, d, f) {
        $('.playerlist_item[data-playerid="' + this.currentPartnerId + '"] .playername').css("font-weight", "bold");
        $('.cb_playername[data-playerid="' + this.currentPartnerId + '"]').css("font-weight", "bold")
    },
    addNewMarker: function () {
        var b = false;
        if (!$(this.currentSelector).find(".newMsgMarker").length) {
            this.mark(this.currentSelector, this.currentPlayernameObject, this.currentCount);
            b = true
        }
        if (!$(this.currentListItemSelector).find(".newMsgMarker").length) {
            this.mark(this.currentListItemSelector, this.currentListPlayernameObject, this.currentCount);
            b = true
        }
        if (!b) {
            this.updateNewMarker()
        }
    },
    removeNewMarker: function () {
        $('.playerlist_item[data-playerid="' + this.currentPartnerId + '"] .playername').css("font-weight", "normal");
        $('.cb_playername[data-playerid="' + this.currentPartnerId + '"]').css("font-weight", "normal")
    },
    updateNewMarker: function () {
        var d = parseInt($('.new_msg_count[data-playerid="' + this.currentPartnerId + '"]').data("new-messages"));
        var e = $(".new_msg_count.totalChatMessages").text();
        var f = ogame.chat.updateTotalNewChatCounter();
        if (d === 0) {
            if (isNaN(this.currentPartnerId)) {
                $(".new_msg_count.totalMessages.news").text(d).addClass("noMessage")
            } else {
                $('.new_msg_count[data-playerid="' + this.currentPartnerId + '"]').text(d).addClass("noMessage");
                if (f === 0) {
                    $(".new_msg_count.totalChatMessages").text(f).addClass("noMessage")
                } else {
                    if (e != f) {
                        $(".new_msg_count.totalChatMessages").text(f).removeClass("noMessage").effect(ogame.messagemarker.effect, {}, 500)
                    }
                }
            }
        } else {
            if (isNaN(this.currentPartnerId)) {
                if (isNaN(d)) {
                    $(".new_msg_count.totalMessages.news").text(0).addClass("noMessage")
                } else {
                    $(".new_msg_count.totalMessages.news").text(d).removeClass("noMessage").effect(ogame.messagemarker.effect, {}, 500)
                }
            } else {
                $('.msg[data-playerid="' + this.currentPartnerId + '"]').addClass("msg_new");
                $('.new_msg_count[data-playerid="' + this.currentPartnerId + '"]').text(d).removeClass("noMessage").effect(ogame.messagemarker.effect, {}, 500);
                if (e != f) {
                    $(".new_msg_count.totalChatMessages").text(f).removeClass("noMessage").effect(ogame.messagemarker.effect, {}, 500)
                }
            }
        }
    },
    setSelectorByType: function (b) {
        selector = "";
        if (b == this.type_chatbar) {
            selector = 'ul.chat_bar_list li.chat_bar_list_item[data-playerid="' + this.currentPartnerId + '"]'
        }
        if (b == this.type_chattab) {
            selector = 'ul#chatMsgList li.msg[data-playerid="' + this.currentPartnerId + '"]'
        }
        this.currentListItemSelector = '.js_playerlist ul.playerlist li.playerlist_item[data-playerid="' + this.currentPartnerId + '"]';
        this.currentSelector = selector;
        this.currentPlayernameObject = $(selector).find(".cb_playername");
        this.currentListPlayernameObject = $(this.currentListItemSelector).find(".playername")
    },
    setPartnerId: function (b) {
        this.currentPartnerId = b
    }
};
ogame.messages = {
    data: {
        initActions: {
            "tabs-nfFleets": "initTabFleets",
            "tabs-nfCommunication": "initTabCommunication",
            "subtabs-nfCommunicationMessages": "initSubTabMessages"
        }
    }, addMessage: function (l, f, g) {
        if (g !== false) {
            g = true
        }
        if (l.attr("aria-selected") !== "true") {
            console.warn("addMessage: not correct Tab, aria-selected = ", l.attr("aria-selected"), l);
            return
        }
        if (!f) {
            console.warn("addMessage: msgData is ", f);
            return
        }
        var h = $("#" + l.attr("aria-controls")).find(".tab_inner");
        var k = false;
        if (g) {
            k = true
        }
        ogame.messages.createMessageItem(f, h, k)
    }, createMessageItem: function (o, l, m) {
        var p = {};
        for (var k in o) {
            var n = o[k];
            p[k] = n.msgID
        }
        var h = JSON.stringify(p);
        $.ajax({
            url: "?page=messages",
            type: "POST",
            dataType: "html",
            data: {
                messageId: h,
                tabid: this.getCurrentMessageTab(),
                action: 121,
                ajax: 1
            },
            success: function (a) {
                if (m) {
                    l.prepend(a)
                } else {
                    var b = l.find(".favoriteCount");
                    if (b.length > 0) {
                        $(a).insertBefore(b)
                    } else {
                        l.append(a)
                    }
                }
            },
            error: function (c, a, b) {
            }
        })
    }, createBroadcastMsgItem: function (f) {
        if (!f) {
            console.warn("createMessageItem: msgData is missing!");
            return undefined
        }
        var g = $('<div class="msg_head"></div>');
        g.append('<span class="msg_title blue_txt">' + f.title + "</span>");
        g.append('<span class="msg_date fright">' + f.date + "</span><br>");
        g.append('<span class="msg_sender_label">' + loca.LOCA_WRITE_MSG_FROM + ": </span>");
        g.append('<span class="msg_sender">' + f.senderName + "</span>");
        var h = $('<div class="msg_actions clearfix"></div>');
        h.append('<a class="fright txt_link overlay" href="' + f.detailURL + '" data-overlay-title="' + loca.broadcasts + '">' + loca.details + "</a>");
        h.append('<a class="fright txt_link comments_link overlay" href="' + f.commentsURL + '" data-overlay-title="' + loca.broadcasts + '">' + f.commentsCount + ' <span class="comments"></span></a></a>');
        var e = $('<li class="msg ' + f.newClass + '" data-msg-id="' + f.msgID + '"></li>');
        e.append('<div class="msg_status"></div>');
        e.append(g);
        e.append('<span class="msg_content">' + f.msgContent + "</span>");
        e.append(h);
        return e
    }, createRecipient: function (m, g, n) {
        var h, k;
        $(".input_replacement").each(function () {
            k = new RegExp($(this).data("recipient-cat"));
            if (k.test(g)) {
                h = $(this)
            }
        });
        if (h === undefined) {
            return
        }
        var l = h.children(".recipient_txt").filter(function () {
            return ($(this).data("recipient-id") === m)
        });
        if (l.length === 0) {
            if (!h.hasClass("focus")) {
                h.addClass("focus")
            }
            h.append('<div class="recipient_txt" data-recipient-id="' + m + '" data-recipient-cat="' + g + '">' + n + '<a role="button" class="remove_recipient"></a></div>')
        }
    }, doInitAction: function (b) {
        if (typeof ogame.messages[ogame.messages.data.initActions[b]] === "function") {
            return ogame.messages[ogame.messages.data.initActions[b]]()
        } else {
            return console.warn("These is no function defined for action: ", b)
        }
    }, initCombatReportDetails: function () {
        if ($("select").length > 0) {
            $("select").ogameDropDown()
        }
    }, initDetailMessages: function (c) {
        $(".detail_list_el:nth-of-type(4n + 3), .detail_list_el:nth-of-type(4n + 4)").addClass("odd");
        var d = $(window).height() - 200;
        $(".detail_msg_ctn").css("height", d);
        $(".detail_msg_ctn").mCustomScrollbar({theme: "ogame"});
        if (c) {
            $("#scrollToComments").on("click", function () {
                $(".detail_msg_ctn").mCustomScrollbar("scrollTo", "bottom")
            });
            initBBCodeEditor(locaKeys, itemNames, false, ".comment_textarea", 2000)
        }
        $("#messages ul.pagination").on("click", "li.p_li a", function () {
            var a = $(this).data("tabid");
            var b = $(this).data("messageid");
            console.log('initDetailMessages()');
            $.post("?page=messages", {
                tabid: a,
                messageId: b,
                ajax: 1
            }, function (h) {
                var g = $(h).find("#messages .ui-dialog");
                $(".overlayDiv").html(h)
            })
        })
    }, initMessages: function () {
        $(".js_tabs .tabs_btn_img").each(function () {
            if ($(this).attr("rel")) {
                $(this).attr("href", $(this).attr("rel"))
            }
        });
        ogame.messages.initTabs($(".js_tabs"));
        var b = ogame.messages.getCurrentMessageTab();
        $("#contentWrapper #buttonz div.js_tabs.tabs_wrap.ui-tabs").on("click", "ul li.list_item", function () {
            var a = ogame.messages.getCurrentMessageTab()
        });
        $("body").on("click", ".msg_actions .icon_not_favorited", function (d) {
            var a = $(this).parents("li.msg").data("msg-id") || $(this).parents("div.detail_msg").data("msg-id");
            $.ajax({
                type: "POST",
                url: "?page=messages",
                dataType: "json",
                data: {tabid: b, messageId: a, action: 101, ajax: 1},
                success: function (f) {
                    if (f[a]["result"] == true) {
                        $(d.target).removeClass("icon_not_favorited").addClass("icon_favorited");
                        changeTooltip($(d.target), loca.DELETE_FAV);
                        var c = $(".favoriteTabFreeSlotCount");
                        c.html(parseInt(c.html()) - 1)
                    } else {
                        if (f[a]["reason"] !== "undefined") {
                            fadeBox(f[a]["reason"], 1)
                        } else {
                            fadeBox(loca.LOCA_GALAXY_ERROR_OCCURED, 1)
                        }
                    }
                },
                error: function () {
                }
            })
        }).on("click", ".msg_actions .icon_favorited", function (d) {
            var a = $(this).parents("li.msg").data("msg-id") || $(this).parents("div.detail_msg").data("msg-id");
            $.ajax({
                type: "POST",
                url: "?page=messages",
                dataType: "json",
                data: {tabid: b, messageId: a, action: 102, ajax: 1},
                success: function (f) {
                    if (f[a]["result"] == true) {
                        $(d.target).removeClass("icon_favorited").addClass("icon_not_favorited");
                        changeTooltip($(d.target), loca.ADD_FAV);
                        var c = $(".favoriteTabFreeSlotCount");
                        c.html(parseInt(c.html()) + 1)
                    } else {
                        if (f[a]["reason"] !== "undefined") {
                            fadeBox(f[a]["reason"], 1)
                        } else {
                            fadeBox(loca.LOCA_GALAXY_ERROR_OCCURED, 1)
                        }
                    }
                },
                error: function () {
                }
            })
        }).on("click", ".js_actionKill", function (d) {
            var a = $(this).parents("li.msg").data("msg-id");
            console.log(a);
            console.log('this is the message id');
            $.ajax({
                type: "POST",
                url: "", // Self
                dataType: "json",
                data: {messageId: a, action: 103, ajax: 1},
                success: function (c) {
                    if (c[a] == true) {
                        $(d.target).parents("li.msg").remove()
                    } else {
                        fadeBox(loca.LOCA_GALAXY_ERROR_OCCURED, 1)
                    }
                },
                error: function () {
                }
            })
        }).on("click", ".js_actionKillAll", function (a) {
            console.log(ogame.messages.getCurrentMessageTab());
            return;
            $.ajax({
                type: "POST",
                url: "", // Self
                dataType: "json",
                data: {
                    tabid: ogame.messages.getCurrentMessageTab(),
                    messageId: -1,
                    action: 103,
                    ajax: 1
                },
                success: function (d) {
                    if (d.result == true) {
                        location.reload()
                    } else {
                        fadeBox(loca.LOCA_GALAXY_ERROR_OCCURED, 1)
                    }
                },
                error: function () {
                }
            })
        }).on("click", ".js_actionKillDetail", function (d) {
            var a = $(".overlayDiv .detail_msg").data("msg-id");
            $.ajax({
                type: "POST",
                url: "?page=messages",
                dataType: "json",
                data: {messageId: a, action: 103, ajax: 1},
                success: function (c) {
                    if (c[a] == true) {
                        location.reload()
                    } else {
                        fadeBox(loca.LOCA_GALAXY_ERROR_OCCURED, 1)
                    }
                },
                error: function () {
                }
            })
        }).on("click", ".js_actionRevive", function (d) {
            var a = $(this).parents("li.msg").data("msg-id");
            if (a === undefined) {
                a = $(this).parents("div.detail_msg").data("msg-id")
            }
            $.ajax({
                type: "POST",
                url: "?page=messages",
                dataType: "json",
                data: {tabid: b, messageId: a, action: 104, ajax: 1},
                success: function (c) {
                    if (c[a] == true) {
                        $(d.target).parents("li.msg").remove();
                        $(d.target).parents("div.ui-dialog").remove();
                        $("li.msg[data-msg-id=" + a + "]").remove()
                    } else {
                        fadeBox(loca.LOCA_GALAXY_ERROR_OCCURED, 1)
                    }
                },
                error: function () {
                }
            })
        }).on("click", ".js_actionReviveAll", function (a) {
            $.ajax({
                type: "POST",
                url: "?page=messages",
                dataType: "json",
                data: {
                    tabid: ogame.messages.getCurrentMessageTab(),
                    messageId: -1,
                    action: 104,
                    ajax: 1
                },
                success: function (d) {
                    if (d.result == true) {
                        location.reload()
                    } else {
                        fadeBox(loca.LOCA_GALAXY_ERROR_OCCURED, 1)
                    }
                },
                error: function () {
                }
            })
        }).on("click", ".js_actionDelete", function (d) {
            var a = $(this).parents("li.msg").data("msg-id");
            $.ajax({
                type: "POST",
                url: "?page=messages",
                dataType: "json",
                data: {tabid: b, messageId: a, action: 105, ajax: 1},
                success: function (c) {
                    if (c[a] == true) {
                        $(d.target).parents("li.msg").remove()
                    } else {
                        fadeBox(loca.LOCA_GALAXY_ERROR_OCCURED, 1)
                    }
                },
                error: function () {
                }
            })
        }).on("click", ".js_actionDeleteAll", function (d) {
            var a = $(this).parents("li.msg").data("msg-id");
            $.ajax({
                type: "POST",
                url: "?page=messages",
                dataType: "json",
                data: {
                    tabid: ogame.messages.getCurrentMessageTab(),
                    messageId: -1,
                    action: 105,
                    ajax: 1
                },
                success: function (c) {
                    if (c.result == true) {
                        location.reload()
                    } else {
                        fadeBox(loca.LOCA_GALAXY_ERROR_OCCURED, 1)
                    }
                },
                error: function () {
                }
            })
        }).on("click", ".paginator", function (h) {
            var f = $(this).data("tab");
            var g = $(this).data("page");
            var a = $(this).closest('div[class^="ui-tabs-panel"]');
            $.ajax({
                type: "POST",
                url: "?page=messages",
                dataType: "html",
                data: {
                    messageId: -1,
                    tabid: f,
                    action: 107,
                    pagination: g,
                    ajax: 1
                },
                success: function (c) {
                    a.html(c)
                },
                error: function () {
                }
            })
        }).on("click", ".jumpToAllianceApplications", function (a) {
            location.href = "index.php?page=alliance&tab=applications"
        })
    }, selectCurrentMessageTab: function () {
        var b = $(".subtabs .ui-state-active:visible");
        if (!b.length) {
            b = $(".js_tabs .ui-state-active:visible")
        }
        return b
    }, getCurrentMessageTab: function () {
        var b = $(".subtabs .ui-state-active:visible").attr("data-tabid");
        if (!b) {
            b = $(".js_tabs .ui-state-active:visible").attr("data-tabid")
        }
        return b
    }, getCurrentEarliestMessage: function () {
        return $(".ui-tabs-panel .tab_inner .msg:visible").last().attr("data-msg-id")
    }, initCommentForm: function () {
        ogame.messages.initWriteNewMsgBox($("#newCommentForm"));
        $("#newCommentForm").on("click", ".js_send_comment", function (d) {
            d.preventDefault();
            var f = $(this).closest("form");
            var e = f.find("input[name=messageId]").val();
            $.ajax({
                type: "POST",
                url: f.attr("action"),
                dataType: "json",
                data: {
                    messageId: e,
                    ajax: 1,
                    action: 108,
                    text: f.find("textarea[name=text]").val()
                },
                success: function (a) {
                    fadeBox(a.message, a.error);
                    f.find("textarea[name=text]").val("");
                    f.parent().after('<li class="msg"><div class="msg_status"></div><div class="msg_head">' + a.commentheader + '</div><div class="msg_content">' + a.commentcontent + "</div></li>");
                    $("#scrollToComments").text(a.commentcount)
                },
                error: function (a) {
                }
            })
        })
    }, initShareReportOverlay: function () {
        ogame.messages.initWriteNewMsgBox($("#newSharedReportForm"));
        $("#newSharedReportForm").on("click", ".js_send_msg_share", function (e) {
            e.preventDefault();
            var l = $(this).closest("form");
            var g = l.find("input[name=messageId]").val();
            var h = l.find("li.select2-selection__choice");
            var k = [];
            h.each(function () {
                k.push($(this).attr("title"))
            });
            $.ajax({
                type: "POST",
                url: l.attr("action"),
                dataType: "json",
                data: {
                    messageId: g,
                    empfaenger: k,
                    ajax: 1,
                    action: 106,
                    text: l.find("textarea[name=text]").val()
                },
                success: function (a) {
                    fadeBox(a.message, a.error);
                    l.closest('div[class^="overlayDiv"').remove()
                },
                error: function (a) {
                }
            })
        })
    }, initSubTabMessages: function () {
        $(".js_accordion").accordion({
            collapsible: true,
            heightStyle: "content",
            active: false
        });
        ogame.messages.initWriteNewMsgBox($("#newMsgForm"));
        $("html").off(".subtabmessages");
        $("#newMsgForm").on("click.subtabmessages", ".js_send_msg", function (e) {
            e.preventDefault();
            var f = $(this).parents("form");
            var d = {};
            $(".input_replacement").children().each(function () {
                if (typeof d[$(this).data("recipient-cat")] == "undefined") {
                    d[$(this).data("recipient-cat")] = []
                }
                d[$(this).data("recipient-cat")].push($(this).data("recipient-id"))
            });
            $.ajax({
                type: "POST",
                url: f.attr("action"),
                dataType: "json",
                data: {empfaenger: d, text: f.find(".new_msg_textarea").val()},
                success: function (a) {
                    fadeBox(a.message, a.error);
                    if (!a.error) {
                        ogame.messages.sendSubtabMsg($(".new_msg_textarea").val(), d)
                    }
                },
                error: function () {
                }
            })
        })
    }, initTabCommunication: function () {
        console.info("-------------initTabCommunication");
        ogame.messages.initTabs($(".js_subtabs_communication"))
    }, initTabFleets: function () {
        console.info("-------------initTabFleets");
        ogame.messages.initTabs($(".js_subtabs_fleets"), ogame.messages.initTrash)
    }, initTabs: function (c, d) {
        c.tabs({
            beforeLoad: function () {
                $(".ajax_load_shadow").show()
            }, load: function (a, b) {
                console.info("load", b.tab.attr("id"));
                ogame.messages.doInitAction(b.tab.attr("id"));
                $(".ajax_load_shadow").hide();
                if (typeof d === "function") {
                    d(b.tab)
                }
            }, create: function (a, b) {
                ogame.messages.doInitAction(b.tab.attr("id"))
            }
        })
    }, initTrash: function (b) {
        if (!b) {
            return
        }
        $(".js_active_tab").html(b.data("subtabname"));
        if (b.attr("id") === "subtabs-nfFleetTrash") {
            $(".trash_box").addClass("trash_open");
            $(".in_trash").show();
            $(".not_in_trash").hide()
        } else {
            $(".trash_box").removeClass("trash_open");
            $(".in_trash").hide();
            $(".not_in_trash").show()
        }
    }, initWriteNewMsgBox: function (b) {
        initBBCodeEditor(locaKeys, itemNames, false, ".new_msg_textarea", 2000);
        $("html").off(".writeNewMsgBox");
        $("html").on("click.writeNewMsgBox", function (a) {
            if ($(".new_msg_label").hasClass("open") && $(a.target).parents(".recipient_select_box").length < 1) {
                $(".input_replacement").removeClass("focus");
                $(".new_msg_label").removeClass("open");
                $(".new_msg_label").siblings(".recipient_select_box").hide()
            }
        });
        b.on("click.writeNewMsgBox", ".input_replacement", function (a) {
            a.stopPropagation();
            ogame.messages.toggleRecipientSelectBox($(a.target).data("recipient-cat"))
        }).on("click.writeNewMsgBox", ".new_msg_label", function (a) {
            a.stopPropagation();
            ogame.messages.toggleRecipientSelectBox($(a.currentTarget).data("recipient-cat"))
        }).on("click.writeNewMsgBox", ".recipient_select_box .ally_rank", function () {
            ogame.messages.toggleRecipientSelection($(this))
        }).on("click.writeNewMsgBox", ".remove_recipient", function () {
            ogame.messages.removeRecipient($(this).closest(".recipient_txt").data("recipient-id"))
        })
    }, removeRecipient: function (b) {
        $(".ally_rank").filter(function () {
            if ($(this).data("recipient-id") === b) {
                $(this).removeClass("selected")
            }
        });
        $(".recipient_txt").filter(function () {
            if ($(this).data("recipient-id") === b) {
                $(this).remove()
            }
        })
    }, sendSubtabMsg: function (g, h) {
        if (!g) {
            console.warn("sendSubtabMsg: msg was empty");
            return
        }
        if (!h) {
            console.warn("sendSubtabMsg: msg had no recipients");
            return
        }
        var f = {};
        f.date = getFormatedDate(serverTime.getTime(), "[d].[m].[Y] <span>[H]:[i]:[s]</span>");
        f.newClass = "msg_new";
        f.title = h;
        f.senderName = "100011";
        f.msgID = "111";
        f.msgContent = g;
        f.commentsURL = "";
        f.detailURL = "";
        f.commentsCount = 0;
        var e = array(f);
        ogame.messages.addMessage($("#subtabs-nfCommunicationMessages"), e)
    }, toggleRecipientSelectBox: function (b) {
        $(".input_replacement").filter(function () {
            if ($(this).data("recipient-cat") === b && !$(this).hasClass("focus")) {
                $(this).addClass("focus")
            }
        });
        $(".new_msg_label").filter(function () {
            var e = $(this);
            if (e.data("recipient-cat") === b) {
                if (e.hasClass("open")) {
                    e.removeClass("open").siblings(".recipient_select_box").hide()
                } else {
                    var a = e.siblings(".recipient_select_box"), f = a.find(".scroll_box");
                    $(".new_msg_label").removeClass("open").siblings(".recipient_select_box").hide();
                    e.addClass("open");
                    a.show();
                    (f.hasClass("mCustomScrollbar")) ? f.mCustomScrollbar("update") : f.mCustomScrollbar()
                }
            }
        })
    }, toggleRecipientSelection: function (d) {
        var e = d.data("recipient-cat"), f = d.data("recipient-id");
        if (d.hasClass("always_selected")) {
            return
        }
        if (d.hasClass("complete_ally")) {
            ogame.messages.toggleSelectAllRecipients(e);
            return
        }
        if (!d.hasClass("selected")) {
            ogame.messages.createRecipient(f, e, d.html());
            d.addClass("selected")
        } else {
            ogame.messages.removeRecipient(f)
        }
    }, toggleSelectAllRecipients: function (h) {
        var g = $(".complete_ally").hasClass("selected"), e = (g) ? "255" : "1", f = (g) ? "loca.founder" : "loca.completeAlliance";
        $(".input_replacement").children().remove();
        ogame.messages.createRecipient(e, h, f);
        $(".recipient_list").filter(function () {
            if ($(this).data("recipient-cat") === h) {
                $(this).find(".ally_rank").each(function () {
                    if (!$(this).hasClass("always_selected")) {
                        (g) ? $(this).removeClass("selected") : $(this).addClass("selected")
                    }
                })
            }
        })
    }
};
function initShowMessage() {
    var b = $('.overlayDiv[data-page="showmessage"]');
    $(".answerHeadline", b).click(function () {
        $(this).toggleClass("open");
        if ($(this).hasClass("open")) {
            $(".answerForm", b).show();
            $(".textWrapper", b).addClass("textWrapperSmall");
            $(".textWrapper", b).removeClass("textWrapper")
        } else {
            $(".answerForm", b).hide();
            $(".textWrapperSmall", b).addClass("textWrapper");
            $(".textWrapperSmall", b).removeClass("textWrapperSmall")
        }
    });
    $(".note > div:first-child", b).addClass("newMessage");
    $(".info:odd", b).css("margin-left", "40px");
    $("div.note p:first").after('<span class="seperator">');
    $(".answerHeadline", b).hover(function () {
        $(this).addClass("pushable")
    }, function () {
        $(this).removeClass("pushable")
    });
    $(".melden", b).click(function () {
        manageErrorbox($(this).attr("rel"), 1)
    })
}
function initNetworkAjax() {
    var e = $(".reiter");
    if (!$.isFunction(f)) {
        var f = function () {
            e.removeClass("active");
            $(this).addClass("active");
            ajaxLoad($(this).attr("id"), 1)
        }
    }
    e.off("click");
    e.click(f);
    $("#checkAll").off("click").click(function () {
        $(".checker").prop("checked", $(this).is(":checked"))
    });
    function d(a) {
        $("#TR" + a).hide()
    }

    $(".overlay").click(function () {
        var a = $(this).attr("id");
        markAsRead(a)
    });
    $("#messageContent select").change(function () {
        if (typeof($("select option:selected").attr("id")) == "undefined") {
            $(".buttonOK").hide();
            mod = ""
        } else {
            $(".buttonOK").show();
            mod = $("select option:selected").attr("id")
        }
    });
    $(".del").click(function () {
        mod = $(this).attr("id")
    });
    $(".underlined").click(function () {
        $(".buttonOK").hide()
    });
    reduceMsgCount(aktCat)
}
function MessageSlider(d) {
    var f = this;
    f.htmlobject = d;
    var e = document.documentElement.clientHeight - 160;
    this.open = function () {
        if (!this.inAction) {
            f.startTime = new Date().getTime();
            f.inAction = true;
            f.slideInStep()
        }
    }, this.slideInStep = function () {
        time = new Date().getTime();
        height = parseInt(f.currHeight * ((time - f.startTime) / 500));
        if (height < f.currHeight) {
            f.htmlobject.style.height = height + "px";
            window.setTimeout(f.slideInStep, 10)
        } else {
            f.htmlobject.style.height = f.currHeight + "px";
            f.inAction = false
        }
    }, this.close = function () {
        if (!f.inAction) {
            f.startTime = new Date().getTime();
            f.inAction = true;
            f.htmlobject.style.height = "0px";
            f.inAction = false
        }
    }, f.inAction = false;
    if (document.getElementById("messages")) {
        f.currHeight = Math.min(document.getElementById("messages").offsetHeight, e)
    } else {
        f.currHeight = e
    }
}
ogame.messages.combatreport = {
    data: [{combatReportId: $(".detailReport").attr("data-combatreportid")}],
    loca: [{weapon: "", shield: "", cover: ""}],
    getCombatValueByCombatMember: function () {
        var h = ogame.messages.combatreport;
        var g = h.data.activeMember;
        var f = {armorPercentage: 0, weaponPercentage: 0, shieldPercentage: 0};
        var e = 0;
        $.each(h.data.combatArray, function (b, a) {
            if (h.check(true, g, {values: {is: {0: "all"}}})) {
                f.armorPercentage += a.armorPercentage;
                f.weaponPercentage += a.weaponPercentage;
                f.shieldPercentage += a.shieldPercentage;
                e++
            } else {
                if (a.ownerName == g) {
                    f.armorPercentage = a.armorPercentage;
                    f.weaponPercentage = a.weaponPercentage;
                    f.shieldPercentage = a.shieldPercentage;
                    e = 1
                }
            }
        });
        f.armorPercentage = Math.round(f.armorPercentage / e);
        f.weaponPercentage = Math.round(f.weaponPercentage / e);
        f.shieldPercentage = Math.round(f.shieldPercentage / e);
        return f
    },
    setCombatValue: function () {
        var c = ogame.messages.combatreport;
        var d = c.getCombatValueByCombatMember();
        $("." + c.data.combatside + "Weapon").text(c.loca.weapon + " " + d.weaponPercentage + "%");
        $("." + c.data.combatside + "Shield").text(c.loca.shield + " " + d.shieldPercentage + "%");
        $("." + c.data.combatside + "Cover").text(c.loca.cover + " " + d.armorPercentage + "%")
    },
    setCombatLoca: function (f, e, g) {
        var h = ogame.messages.combatreport;
        h.loca.weapon = f;
        h.loca.shield = e;
        h.loca.cover = g
    },
    isActive: function (g, e) {
        var h = ogame.messages.combatreport;
        for (var f in e) {
            if (f == "length") {
                continue
            }
            if (h.check(true, e[f][g])) {
                return "on"
            }
        }
        if (h.check(true, e[g])) {
            return "on"
        }
        return "off"
    },
    setActiveFlag4Fleet: function (f, h) {
        var e = ogame.messages.combatreport;
        var g = e.getAllShipClasses(f);
        $.each(g, function (d, a) {
            var p = e.getShipIdByClass(a);
            var r = e.isActive(p, h);
            var q = e.getShipSelectors(p);
            e.changeShipState(r, q.ship);
            if (r == "off") {
                var b = q.shipCount;
                var c = q.loss;
                var o = {ships: {}, losses: {}};
                o.ships[b] = 0;
                o.losses[c] = "";
                e.setShipCount(o)
            }
            e.toggleShipShowState(q.ship)
        })
    },
    search4Class: function (e, g) {
        for (var f in e) {
            if ($("." + e[f] + g)[0]) {
                var h = e[f] + g;
                return h
            }
        }
        return false
    },
    getShipSelectors: function (k) {
        var m = ogame.messages.combatreport;
        var r = ["military", "civil", "defense"];
        var n = m.search4Class(r, k);
        var p = "." + m.data.combatside + " ." + n;
        var o = "." + m.data.combatside + " ." + n + " .ecke";
        var q = "." + m.data.combatside + " ." + n + " .lost_ships";
        var l = {ship: p, shipCount: o, loss: q};
        return l
    },
    getShipIdByClass: function (f) {
        var e = f.length;
        var d = f.substr(e - 3);
        return d
    },
    changeShipState: function (c, d) {
        if ($(d).hasClass("off") && c != "off") {
            $(d).removeClass("off")
        }
        if ($(d).hasClass("on") && c != "on") {
            $(d).removeClass("on")
        }
        if (!$(d).hasClass(c)) {
            $(d).addClass(c)
        }
    },
    toggleShipShowState: function (b) {
        if ($(b).hasClass("off")) {
            $(b).parent().hide()
        }
        if ($(b).hasClass("on")) {
            $(b).parent().show()
        }
    },
    getShipsByMembers: function (f) {
        var d = ogame.messages.combatreport;
        var e = [];
        if (!d.check(true, d.data.combatArray.shipDetails)) {
            $.each(d.data.combatArray, function (b, a) {
                if (typeof a == "object" && typeof a.shipDetails != "undefined") {
                    if (typeof e[a.ownerName] != "undefined") {
                        $.extend(e[a.ownerName], a.shipDetails)
                    } else {
                        e[a.ownerName] = a.shipDetails
                    }
                } else {
                    if (typeof e[a.ownerName] == "undefined") {
                        e[a.ownerName] = {}
                    }
                }
            })
        } else {
            if (typeof e[d.data.combatArray.ownerName] != "undefined") {
                $.extend(e[d.data.combatArray.ownerName], d.data.combatArray.shipDetails)
            } else {
                e[d.data.combatArray.ownerName] = d.data.combatArray.shipDetails
            }
        }
        if (f == "all") {
            return e
        } else {
            return e[f]
        }
    },
    getShipsByMembersAndCoords: function (h, l, f) {
        var k = ogame.messages.combatreport;
        var g = [];
        if (!k.check(true, k.data.combatArray.shipDetails)) {
            $.each(k.data.combatArray, function (b, a) {
                if (l !== 0) {
                    if (typeof a == "object" && typeof a.shipDetails != "undefined") {
                        if (a.ownerCoordinates === l && a.ownerName == h && a.ownerPlanetType == f) {
                            if (typeof g[a.ownerName] != "undefined") {
                                $.extend(g[a.ownerName], a.shipDetails)
                            } else {
                                g[a.ownerName] = a.shipDetails
                            }
                        }
                    }
                } else {
                    if (typeof a == "object" && typeof a.shipDetails != "undefined") {
                        if (typeof g[a.ownerName] != "undefined") {
                            $.extend(g[a.ownerName], a.shipDetails)
                        } else {
                            g[a.ownerName] = a.shipDetails
                        }
                    }
                }
            })
        } else {
            if (typeof g[k.data.combatArray.ownerName] != "undefined") {
                $.extend(g[k.data.combatArray.ownerName], k.data.combatArray.shipDetails)
            } else {
                g[k.data.combatArray.ownerName] = k.data.combatArray.shipDetails
            }
        }
        if (h == "all") {
            return g
        } else {
            return g[h]
        }
    },
    getShipCountArray: function (o, u) {
        var q = ogame.messages.combatreport;
        var y = q.check(true, u, {types: {0: "isEmpty"}}) ? false : true;
        var p = {};
        var r = {};
        for (var n in o) {
            var v = q.getShipSelectors(n);
            var w = v.shipCount;
            p[w] = parseInt(o[n]);
            if (!y) {
                var s = v.loss;
                if (q.check(true, u[n])) {
                    r[s] = parseInt(u[n])
                }
            }
        }
        var x = {ships: p, losses: r};
        return x
    },
    setShipCount4All: function (u) {
        var w = ogame.messages.combatreport;
        var v = u.ships;
        var A = w.check(true, u.losses) ? u.losses : {};
        var H = {};
        for (var y in v) {
            var F = v[y];
            var s = (w.check(true, A, {types: {0: "isEmpty"}}) && w.check(true, A[y])) ? A[y] : {};
            H[y] = w.getShipCountArray(F, s)
        }
        var B = {};
        var E = {};
        for (var x in H) {
            var G = H[x]["ships"];
            var C = H[x]["losses"];
            for (var D in G) {
                if (w.check(true, B[D])) {
                    B[D] = B[D] + G[D]
                } else {
                    B[D] = G[D]
                }
            }
            for (var D in C) {
                if (w.check(true, E[D])) {
                    E[D] = E[D] + C[D]
                } else {
                    E[D] = C[D]
                }
            }
        }
        var r = {ships: B, losses: E};
        w.setShipCount(r)
    },
    setShipCountByActiveMember: function (s, w, B, u, q) {
        u = u || 0;
        q = q || 1;
        var v = ogame.messages.combatreport;
        var E = {};
        var F = {};
        for (var D in w) {
            var r = w[D]["ownerName"];
            var C = w[D]["ownerCoordinates"];
            var A = w[D]["ownerPlanetType"];
            if (r == B) {
                for (var x in s.ships[D]) {
                    if (u !== 0) {
                        if (u == C && q == A) {
                            if (!(E.hasOwnProperty(x))) {
                                E[x] = s.ships[D][x]
                            } else {
                                E[x] = E[x] + s.ships[D][x]
                            }
                        }
                    } else {
                        if (!(E.hasOwnProperty(x))) {
                            E[x] = s.ships[D][x]
                        } else {
                            E[x] = E[x] + s.ships[D][x]
                        }
                    }
                }
                if (v.check(true, s.losses)) {
                    for (var x in s.losses[D]) {
                        if (u !== 0) {
                            if (u == C && q == A) {
                                if (!(F.hasOwnProperty(x))) {
                                    F[x] = parseInt(s.losses[D][x])
                                } else {
                                    F[x] = F[x] + parseInt(s.losses[D][x])
                                }
                            }
                        } else {
                            if (!(F.hasOwnProperty(x))) {
                                F[x] = parseInt(s.losses[D][x])
                            } else {
                                F[x] = F[x] + parseInt(s.losses[D][x])
                            }
                        }
                    }
                }
            }
        }
        if (v.check(true, E, {types: {0: "isEmpty"}})) {
            var y = v.getShipCountArray(E, F);
            v.setShipCount(y)
        }
    },
    setShipCount: function (k) {
        var h = ogame.messages.combatreport.data.combatside;
        var f = k.ships;
        var l = k.losses;
        if (!$.isEmptyObject(f)) {
            for (var g in f) {
                $(g).text(f[g].toString().replace(/\B(?=(\d{3})+(?!\d))/g, "."))
            }
        } else {
            $("." + h + " .ecke").text("0")
        }
        if (!$.isEmptyObject(l)) {
            for (var g in l) {
                $(g).text("-" + l[g].toString().replace(/\B(?=(\d{3})+(?!\d))/g, "."))
            }
        } else {
            $("." + h + " .lost_ships").text("-")
        }
    },
    getAllShipClasses: function (e) {
        var f = e.map(function () {
            var a = $(this).attr("class");
            return a
        }).get().join();
        var d = [];
        $.each(f.split(","), function (b, a) {
            var c = a.split(" ");
            d.push(c[1])
        });
        return d
    },
    displayShipData: function (k, l, m, p, o, h) {
        o = typeof o !== "undefined" ? o : 0;
        var n = ogame.messages.combatreport;
        if (n.check(true, k, {values: {isNot: {0: "all"}}})) {
            n.setShipCountByActiveMember(m, p, k, o, h)
        } else {
            n.setShipCount4All(n.data.combatRounds[l][n.data.combatRounds[l].length - 1])
        }
    },
    initCombatText: function (f) {
        var d = ogame.messages.combatreport;
        var e = f.combatRounds.length - 1;
        $(".combat_round_list .round_id").find("a").removeClass("active");
        $(".combat_round_list .round_id[data-round=" + e + "]").find("a").addClass("active");
        d.loadDataBySelectedRound(f.attackerJSON, f.defenderJSON, e)
    },
    setCombatText: function (v, G, s) {
        var x = ogame.messages.combatreport;
        var A = ".statistic_attacker";
        var u = ".statistic_defender";
        var C = ".hits";
        var I = ".strength";
        var E = ".absorbed";
        var J = 0;
        var B = 0;
        var H = 0;
        var F = 0;
        var w = 0;
        var D = 0;
        if (x.check(true, v, {length: s})) {
            for (var y in v) {
                J = J + parseInt(v[y]["statistic"]["hits"]);
                B = B + parseInt(v[y]["statistic"]["absorbedDamage"]);
                H = H + parseInt(v[y]["statistic"]["fullStrength"]);
                F = F + parseInt(G[y]["statistic"]["hits"]);
                w = w + parseInt(G[y]["statistic"]["absorbedDamage"]);
                D = D + parseInt(G[y]["statistic"]["fullStrength"])
            }
        } else {
            J = parseInt(v[s]["statistic"]["hits"]);
            B = parseInt(v[s]["statistic"]["absorbedDamage"]);
            H = parseInt(v[s]["statistic"]["fullStrength"]);
            F = parseInt(G[s]["statistic"]["hits"]);
            w = parseInt(G[s]["statistic"]["absorbedDamage"]);
            D = parseInt(G[s]["statistic"]["fullStrength"])
        }
        $(A + C).text(J.toString().replace(/\B(?=(\d{3})+(?!\d))/g, "."));
        $(A + E).text(B.toString().replace(/\B(?=(\d{3})+(?!\d))/g, "."));
        $(A + I).text(H.toString().replace(/\B(?=(\d{3})+(?!\d))/g, "."));
        $(u + C).text(F.toString().replace(/\B(?=(\d{3})+(?!\d))/g, "."));
        $(u + E).text(w.toString().replace(/\B(?=(\d{3})+(?!\d))/g, "."));
        $(u + I).text(D.toString().replace(/\B(?=(\d{3})+(?!\d))/g, "."))
    },
    setCombatArray: function (f, g) {
        var e = jQuery.extend(true, {}, f);
        var h = ogame.messages.combatreport;
        h.data.combatside = g;
        h.data.memberSelection = false;
        if ($("#" + h.data.combatside + "_select_combatreport").find(":selected").length > 0) {
            h.data.memberSelection = true
        }
        if (h.data.memberSelection) {
            h.data.activeMember = "" + $("#" + h.data.combatside + "_select_combatreport").find(":selected").val()
        } else {
            h.data.activeMember = "" + $("#" + h.data.combatside + "_select_combatreport").data("memberName")
        }
        h.data.activeMember = h.data.activeMember.split("|", 1)[0];
        h.data.combatArray = e.member;
        h.data.combatRounds = [];
        h.data.combatRounds[g] = e.combatRounds
    },
    setCombatside: function (c) {
        var d = ogame.messages.combatreport;
        d.data.combatside = c
    },
    check: function (M, N, P) {
        var P = (P != null && typeof P != "undefined" && typeof P == "object") ? P : false;
        var F = false;
        var D = 0;
        var B = 0;
        var I = 0;
        var J = 0;
        var C = false;
        if (P != false) {
            var K = P.values != null && typeof P.values != "undefined" && typeof P.values == "object" ? P.values : {};
            var y = P.types != null && typeof P.types != "undefined" && typeof P.types == "object" ? P.types : {};
            var x = P.length != null && typeof P.length != "undefined" ? P.length : false;
            if (!jQuery.isEmptyObject(K)) {
                for (G in K) {
                    var O = K[G];
                    if (G == "is" && !jQuery.isEmptyObject(O)) {
                        for (var A in O) {
                            if (N != O[A]) {
                                D = D + 1
                            }
                        }
                    }
                    if (G == "isNot" && !jQuery.isEmptyObject(O)) {
                        for (var H in O) {
                            if (N == O[H]) {
                                D = D + 1
                            }
                        }
                    }
                }
            }
            if (!jQuery.isEmptyObject(y)) {
                if (y.isEmpty) {
                    if (jQuery.isEmptyObject(N)) {
                        B = B + 1
                    }
                }
                for (var G in y) {
                    if (typeof N == y[G]) {
                        B = B + 1
                    }
                }
            }
            if (typeof N == "object") {
                for (var G in N) {
                    if (typeof N[G] != "undefined") {
                        J = J + 1
                    }
                }
            } else {
                var L = N + "";
                J = L.length
            }
            if (x !== false && typeof x == "number" && typeof J == "number") {
                if (J != x) {
                    I = I + 1
                }
                C = true
            }
        }
        if (typeof N == "undefined" || N == null) {
            B = B + 1
        }
        var w = D + B;
        if (C != false) {
            w = w + I
        }
        if (w == 0) {
            F = true
        }
        var E = {
            success: F,
            allErrors: w,
            valueErrors: D,
            typeErrors: B,
            type: typeof N,
            length: J,
            lengthChecked: C,
            lengthError: I
        };
        if (M) {
            return F
        } else {
            return E
        }
    },
    loadData: function (e, f) {
        var d = ogame.messages.combatreport;
        d.setCombatArray(e, f);
        d.loadDataBySelectedCombatMember(e, f);
        d.setCombatValue()
    },
    loadDataBySelectedRound: function (E, F, B) {
        var A = ogame.messages.combatreport;
        var D = parseInt(B);
        var K = $(".attacker .participant_select option:selected").val();
        var G = $(".defender .participant_select option:selected").val();
        var J = $(".attacker .participant_select option:selected").data("coords");
        var L = $(".defender .participant_select option:selected").data("coords");
        var I = [];
        var H = [];
        if (typeof J != "undefined") {
            ids = K.split("|")[1].split(":");
            I.push(ids);
            K = K.split("|")[0]
        } else {
            if (K != "all" && typeof K != "undefined") {
                J = 0;
                $(".attacker .participant_select option").each(function () {
                    if (K == $(this).val().split("|")[0] && typeof $(this).val().split("|")[1] != "undefined") {
                        I.push($(this).val().split("|")[1].split(":"))
                    }
                })
            } else {
                I = []
            }
        }
        if (typeof L != "undefined") {
            ids = G.split("|")[1].split(":");
            H.push(ids);
            G = G.split("|")[0]
        } else {
            if (G != "all" && typeof G != "undefined") {
                L = 0;
                $(".defender .participant_select option").each(function () {
                    if (G == $(this).val().split("|")[0] && typeof $(this).val().split("|")[1] != "undefined") {
                        H.push($(this).val().split("|")[1].split(":"))
                    }
                })
            } else {
                H = []
            }
        }
        if (I.length > 0) {
            for (var x in E) {
                if (x == "combatRounds") {
                    for (var y in E[x][D]) {
                        if (y == "ships") {
                            for (var u in E[x][D][y]) {
                                var C = $.inArray(u, I[0]);
                                if (C == -1) {
                                    delete E[x][D][y][u]
                                }
                            }
                        }
                    }
                }
            }
        }
        if (H.length > 0) {
            for (var x in F) {
                if (x == "combatRounds") {
                    for (var y in F[x][D]) {
                        if (y == "ships") {
                            for (var u in F[x][D][y]) {
                                var C = $.inArray(u, H[0]);
                                if (C == -1) {
                                    delete F[x][D][y][u]
                                }
                            }
                        }
                    }
                }
            }
        }
        var w = E.combatRounds;
        var v = F.combatRounds;
        if (A.check(true, w, {length: B})) {
            D = D - 1
        }
        D = D + "";
        A.setCombatside("attacker");
        A.setShipCount4All(w[D]);
        A.setCombatside("defender");
        A.setShipCount4All(v[D]);
        if (A.data.memberSelection) {
        }
        A.setCombatText(w, v, B)
    },
    resetDropDowns: function () {
        $("#attacker_select_combatreport").val("all").ogameDropDown("refresh");
        $("#defender_select_combatreport").val("all").ogameDropDown("refresh")
    },
    loadDataBySelectedCombatMember: function (u, q, n, l) {
        var m = jQuery.extend(true, {}, u);
        n = n || 0;
        l = l || 1;
        var p = ogame.messages.combatreport;
        p.setCombatArray(m, q);
        var o = $("." + p.data.combatside + " .buildingimg");
        var r = $("." + p.data.combatside + " .defenseimg");
        o = $.merge(o, r);
        var s = p.getShipsByMembersAndCoords(p.data.activeMember, n, l);
        p.setActiveFlag4Fleet(o, s);
        p.displayShipData(p.data.activeMember, p.data.combatside, m.combatRounds[m.combatRounds.length - 1], m.member, n, l);
        p.setCombatValue()
    }
};
function closeDetails(f, d) {
    var e = $("#fleet" + f);
    e.children(".openDetails").children().children().attr("src", "/img/icons/de1e5f629d9e47d283488eee0c0ede.gif");
    e.children(".quantity").show();
    e.removeClass("detailsOpened");
    e.addClass("detailsClosed");
    currentMovementTabExtensionStates[f] = [0, d];
    updateCookieStatus(currentMovementTabExtensionStates)
}
function openDetails(f, d) {
    var e = $("#fleet" + f);
    e.children(".openDetails").children().children().attr("src", "/img/icons/577565fadab7780b0997a76d0dca9b.gif");
    e.children(".quantity").hide();
    e.removeClass("detailsClosed");
    e.addClass("detailsOpened");
    currentMovementTabExtensionStates[f] = [1, d];
    updateCookieStatus(currentMovementTabExtensionStates)
}
function updateCookieStatus(d) {
    var e = JSON.stringify(d);
    var f = JSON.stringify({expires: Math.round(new Date().getTime() / 1000) + 7 * 86400});
    $.cookie("tabBoxFleets", e, f)
}
function openCloseDetails(c, d) {
    if ($("#fleet" + c).attr("class") == "fleetDetails detailsOpened") {
        closeDetails(c, d)
    } else {
        openDetails(c, d)
    }
}
function hideTipsOnTabChange() {
    $("select").ogameDropDown("hide");
    Tipped.hideAll()
}
function changeTooltip(e, f) {
    var d = $(e);
    if (d.length == 0) {
        return
    }
    removeTooltip(d);
    d.attr("title", f);
    initTooltips(d)
}
function removeTooltip(d) {
    var c = $(d);
    c.each(function () {
        if ($(this).data("tooltipLoaded")) {
            $(this).data("tooltipLoaded", false);
            Tipped.remove($(this)[0])
        }
    })
}
function getTooltipOptions(d) {
    var f = $(d);
    var e = {
        skin: "cloud",
        maxWidth: 400,
        closeButton: false,
        hideOn: [{element: "self", event: "mouseleave"}, {
            element: "tooltip",
            event: "mouseenter"
        }]
    };
    if (window.location.href.indexOf("galaxy") !== -1) {
        e.maxWidth = 400
    }
    if (f.hasClass("tooltipPremium")) {
        e.skin = "premium"
    }
    if (f.hasClass("tooltipLeft")) {
        e.hook = {target: "leftmiddle", tooltip: "righttop"}
    } else {
        if (f.hasClass("tooltipRight")) {
            e.hook = {target: "rightmiddle", tooltip: "lefttop"}
        } else {
            if (f.hasClass("tooltipBottom")) {
                e.hook = {target: "bottommiddle", tooltip: "topmiddle"}
            }
        }
    }
    if (f.data("tooltip-width")) {
        e.maxWidth = f.data("tooltip-width")
    }
    if (isMobile || f.hasClass("tooltipClose")) {
        e.hideOthers = true;
        e.hideOn = false
    }
    e.afterUpdate = function (a, c) {
        if (isMobile && f.data("tooltip-button")) {
            var h = $(document.createElement("div")).addClass("tooltipButton");
            $(document.createElement("a")).addClass("btn_blue").attr("href", "javascript:void(0);").html(f.data("tooltip-button")).bind("click", function (g) {
                if ($(c).not("a") && $(c).find("a").length) {
                    c = $(c).find("a")[0]
                }
                var l = document.createEvent("MouseEvents");
                l.initMouseEvent("click", true, true, window, 1, 0, 0, 0, 0, false, false, false, false, 0, null);
                c.dispatchEvent(l)
            }).appendTo(h);
            $(a).append(h)
        }
        if (isMobile || f.hasClass("tooltipClose")) {
            var b = $(document.createElement("div")).addClass("close-tooltip");
            $(a).prepend(b)
        }
        Tipped.refresh(c)
    };
    return e
}
function getTooltipSelector(e) {
    var f = ".tooltipPremium, .tooltip, .tooltipRight, .tooltipLeft, .tooltipBottom, .tooltipClose, .tooltipHTML, .tooltipRel, .tooltipAJAX, .tooltipCustom, .markItUpButton a";
    if (typeof(e) == "undefined") {
        e = f
    } else {
        if (typeof(e) == "string" && !e.match(/\.tooltip/)) {
            var g = f.split(", ");
            var h = e;
            for (i in g) {
                e += ", " + h + " " + g[i]
            }
        }
    }
    return e
}
function sanitizeTooltip(b) {
    return b.replace(/<\s*script/g, "&lt;script")
}
function initTooltips(d) {
    initTooltipSkins();
    d = getTooltipSelector(d);
    function f(b) {
        var o = {};
        var a = b.split("|");
        var c = $(document.createElement("h1")).html(a[0]);
        var n = $(document.createElement("div")).addClass("splitLine");
        if (typeof a[2] !== "undefined" && typeof a[3] !== "undefined") {
            var m = $(document.createElement("h1")).html(a[2]);
            var p = $(document.createElement("div")).addClass("splitLine");
            o = $(document.createElement("div")).css("display", "none").addClass("htmlTooltip").append(c).append(n).append(a[1] + "</br>").append(m).append(p).append(a[3])
        } else {
            o = $(document.createElement("div")).css("display", "none").addClass("htmlTooltip").append(c).append(n).append(a[1])
        }
        return o[0]
    }

    removeTooltip(d);
    function e(b) {
        var a = $(b);
        if (a.data("tooltipLoaded")) {
            return
        }
        a.data("tooltipLoaded", true);
        if (isMobile && a.hasClass("js_hideTipOnMobile")) {
            a.attr("title", "");
            return
        }
        var c = getTooltipOptions(a);
        if (a.hasClass("tooltipCustom")) {
            if (c.hideOn != false) {
                c.hideOn = [{
                    element: "self",
                    event: "mouseleave"
                }, {element: "tooltip", event: "mouseleave"}]
            }
            c.afterUpdate = function (h) {
                $(h).find(".tooltipCustom").each(function (g, m) {
                    var n = getTooltipOptions(a);
                    if ($(this).hasClass("tooltipHTML")) {
                        n.inline = true;
                        n.hideOthers = false;
                        Tipped.create(this, f(sanitizeTooltip($(this).attr("title"))), n)
                    } else {
                        n.hideOthers = false;
                        Tipped.create(this, sanitizeTooltip($(this).attr("title")), n)
                    }
                })
            }
        }
        if (a.hasClass("tooltipHTML")) {
            if (typeof(a.attr("title")) == "undefined" || a.attr("title").trim().length == 0) {
                return
            }
            Tipped.create(a[0], f(sanitizeTooltip(a.attr("title"))), c);
            return
        }
        if (a.hasClass("tooltipRel")) {
            c.inline = true;
            Tipped.create(a[0], a.attr("rel"), c);
            return
        }
        if (a.hasClass("tooltipAJAX")) {
            $.get(a.attr("rel"), {}, function (h) {
                Tipped.create(a[0], h, c)
            });
            return
        }
        if (typeof(a.attr("title")) == "undefined" || a.attr("title").trim().length == 0) {
            return
        }
        Tipped.create(a[0], sanitizeTooltip(a.attr("title")), c)
    }

    $(document).undelegate(d, "touchstart.tooltipClick").delegate(d, "touchstart.tooltipClick", function (a) {
        if (Tipped.visible(this)) {
            var b = document.createEvent("MouseEvents");
            b.initMouseEvent("click", true, true, window, 1, 0, 0, 0, 0, false, false, false, false, 0, null);
            this.dispatchEvent(b);
            a.preventDefault();
            a.stopPropagation()
        }
    });
    if (typeof(d) == "string") {
        $(document).undelegate(d, "mouseenter.tooltipLoad touchstart.tooltipLoad").delegate(d, "mouseenter.tooltipLoad touchstart.tooltipLoad", function (a) {
            e(this)
        })
    } else {
        $(d).each(function () {
            e(this)
        })
    }
}
$(function () {
    initTooltips()
});
function initTooltipSkins() {
    jQuery.extend(Tipped.Skins, {
        cloud: {
            border: {
                size: 1,
                color: [{position: 0, color: "#44576b"}, {
                    position: 1,
                    color: "#2f3b47"
                }]
            },
            background: {
                color: [{position: 0, color: "#303a46"}, {
                    position: 0.49,
                    color: "#242d38"
                }, {position: 0.81, color: "#10181f"}, {
                    position: 1,
                    color: "#0d1014"
                }]
            },
            offset: {x: 0, y: -1, mouse: {x: -12, y: -12}},
            stem: {height: 6, width: 11, offset: {x: 5, y: 5}, spacing: 0}
        },
        premium: {
            border: {
                size: 1,
                color: [{position: 0, color: "#000"}, {
                    position: 1,
                    color: "#000"
                }]
            },
            background: {
                color: [{
                    position: 0,
                    color: "#a3e4f0"
                }, {position: 0.15, color: "#1cbad7"}, {
                    position: 1,
                    color: "#0f78b1"
                }]
            },
            offset: {x: 0, y: -1, mouse: {x: -12, y: -12}},
            stem: {height: 6, width: 11, offset: {x: 5, y: 5}, spacing: 0}
        }
    })
}
function initTrader() {
    var d = false;
    var e = $.deparam.fragment();
    if (typeof(e.animation) != "undefined") {
        if (e.animation == "false") {
            d = true
        }
    }
    var f = {
        $link: null, $panel: null, close: function () {
            this.$panel.hide()
        }, setPanel: function () {
            this.$panel = $("#js_togglePanel" + traderObj.traderId.replace(/#div_trader/, ""))
        }, init: function (k) {
            var c = $(k + " .selectWrapper");
            k = k.replace(/#div_trader/, "");
            if (!c) {
                return
            }
            this.$link = $("#js_toggleLink" + k);
            this.$panel = $("#js_togglePanel" + k);
            var a = this.$panel;
            a.hide();
            this.$link.unbind("click.selectLink").bind("click.selectLink", function (g) {
                k = traderObj.traderId.replace(/#div_trader/, "");
                if ($(this).hasClass("honor")) {
                    return false
                }
                if (a.find("ul.active").has("li").length) {
                    a.toggle()
                }
                return false
            });
            $(".selectWrapper .source").unbind("click.selectPlanetOrMoon").bind("click.selectPlanetOrMoon", function (g) {
                f.selectPlanetOrMoon(this)
            });
            $("#" + a.attr("id")).find("li").unbind("click.selectSource").bind("click.selectSource", function (g) {
                traderObj.selectSource(this);
                return false
            });
            f.outerClick(c, a);
            var b = null, l = 8000;
            c.unbind("mouseout.closeSelect").bind("mouseout.closeSelect", function (g) {
                g = g || window.event;
                var h = (g.relatedTarget) ? g.relatedTarget : g.toElement;
                if (h == c || f.isChildOf(h, c)) {
                    return
                }
                b = setTimeout(function () {
                    a.hide()
                }, l)
            }).unbind("mouseover.clearTimeout").bind("mouseover.clearTimeout", function () {
                if (b) {
                    clearTimeout(b)
                }
            })
        }, isChildOf: function (a, b) {
            b = b[0];
            while (a && a != b) {
                a = a.parentNode
            }
            return a == b
        }, outerClick: function (b, a) {
            $("body").bind("click.outerClick", function (c) {
                if (!c) {
                    c = window.event
                }
                if (!($(c.target).closest(".selectWrapper") == b) && a.is(":visible") != false) {
                    a.toggle()
                }
            })
        }, selectPlanetOrMoon: function (b) {
            var o;
            if ($(b).hasClass("selected")) {
                return false
            }
            var p = "", a = null;
            if ($(b).hasClass("js_honor")) {
                $(traderObj.traderId + " .selectWrapper .source").removeClass("selected");
                $(traderObj.traderId + " .js_honor").addClass("selected");
                $(traderObj.traderId + " .toggleLink").addClass("honor");
                var p = '<img height="18" src="/img/icons/f35675179214f8f6f0f8d75740d7db.png" alt="' + loca.honorPoints + '"/><span class="option_source">' + loca.honorPoints + "</span>";
                $(traderObj.traderId + " .js_valSourcePlanet").html(p);
                $(traderObj.traderId + " .normalResource").hide();
                $(traderObj.traderId + " .honorResource").show();
                return false
            }
            var q = $(traderObj.traderId + " .togglePanel");
            var c = "planet";
            if ($(b).hasClass("js_moon")) {
                var n = 0;
                c = "moon";
                for (o in traderObj.planets) {
                    if (traderObj.planets[o].isMoon) {
                        n++
                    }
                }
                if (n == 0) {
                    return false
                }
            }
            var r = traderObj.planets[traderObj.current.planet];
            q.find("ul").hide().removeClass("active");
            q.find("ul." + c).show().addClass("active");
            $(traderObj.traderId + " .toggleLink").removeClass("honor");
            $(traderObj.traderId + " .selectWrapper .source").removeClass("selected");
            $(traderObj.traderId + " .js_" + c).addClass("selected");
            if ($(b).hasClass("js_moon") ? r.isMoon : !r.isMoon) {
                a = traderObj.current.planet
            } else {
                if (r.otherPlanet != null && typeof(traderObj.planets[r.otherPlanet]) != "undefined") {
                    a = r.otherPlanet
                } else {
                    a = q.find("ul." + c + " li:first").attr("id")
                }
            }
            $(traderObj.traderId + " .normalResource").show();
            $(traderObj.traderId + " .honorResource").hide();
            q.find("ul li#" + a).click();
            return false
        }, setToggleLink: function (b) {
            var c = traderObj.traderId.replace(/#div_trader/, ""), h = $(b).find("span"), a = traderObj.planets[$(b).attr("id")].name;
            if (a != h.text()) {
                h.attr("title", a.replace(/\|/g, "&#124;"))
            }
            this.$link = $("#js_toggleLink" + c);
            this.$link.html($(b).html())
        }
    };
    traderObj = {
        traderBGPos: {
            "#div_traderResources": "0px 0px",
            "#div_traderAuctioneer": "-546px 0px",
            "#div_traderScrap": "0px -220px",
            "#div_traderImportExport": "-546px -220px"
        },
        timer: 500,
        planets: {},
        honorOutput: 0,
        price: 0,
        deficit: 0,
        priceImportExport: 0,
        sumResources: 0,
        traderId: null,
        resources: ["Metal", "Crystal", "Deuterium"],
        current: {planet: currentPlanetId, resource: "", sliderValue: ""},
        barXPos: -180,
        barYPos: 0,
        percentPaid: 0,
        switchingTrader: false,
        checkOverbidden: function () {
            if (playerBid == false || playerBid >= getValue($(".detail_value.currentSum").html())) {
                $(".overbid_text").hide()
            } else {
                $(".overbid_text").show()
            }
        },
        refresh: function () {
            var c = traderObj.traderId;
            if ("#" + $(this).closest(".div_trader").attr("id") !== c) {
                return
            }
            var b = $(this).attr("class");
            var a = new RegExp(/\b(js_slider\w*)\b/);
            b = (a.test(b)) ? RegExp.$1 : false;
            if (!b) {
                return
            }
            traderObj.current.sliderValue = $(this).slider("value");
            traderObj.current.resource = b.replace("js_slider", "").toLowerCase();
            if (traderObj.current.resource == "honor") {
                traderObj.honorOutput = traderObj.current.sliderValue
            } else {
                traderObj.planets[traderObj.current.planet].output[traderObj.current.resource] = traderObj.current.sliderValue
            }
            formatNumber($(c + " .js_amount.js_" + traderObj.current.resource), traderObj.current.sliderValue);
            if (c == "#div_traderAuctioneer") {
                traderObj.price = getValue($(c + " .js_price").html());
                traderObj.sumAuctioneer();
                traderObj.checkOverbidden()
            } else {
                if (c == "#div_traderImportExport") {
                    traderObj.sumImportExport()
                }
            }
        },
        resetValues: function (b, c) {
            b = b || traderObj.traderId;
            c = c || false;
            for (var h in traderObj.planets) {
                for (var a in traderObj.planets[h].output) {
                    traderObj.planets[h].output[a] = 0
                }
            }
            traderObj.honorOutput = 0;
            $(".js_amount").val(0);
            if (traderObj.traderId == "#div_traderAuctioneer") {
                traderObj.sumAuctioneer()
            } else {
                if (traderObj.traderId == "#div_traderImportExport") {
                    traderObj.sumImportExport()
                }
            }
            if (c) {
                b = b.replace(/#div_trader/, "");
                $("#js_togglePanel" + b).find("li#" + currentPlanetId).click()
            }
            f.close()
        },
        resetMaxAmount: function (c, r) {
            var b = traderObj.traderId;
            var s = traderObj.resources;
            for (var o in traderObj.planets) {
                for (var p = 0; p < s.length; p++) {
                    var a = s[p].toLowerCase();
                    traderObj.planets[o].input[a] = c[o][a]
                }
            }
            for (var q = 0; q < s.length; q++) {
                a = s[q].toLowerCase();
                var u = traderObj.planets[traderObj.current.planet].input[a];
                $(b + " .max_planet_" + a).html(number_format(u, 0))
            }
            honorScore = r;
            $(b + " .max_planet_honor").html(number_format(Math.max(0, r), 0));
            f.close()
        },
        selectSource: function (a) {
            traderObj.current.planet = $(a).attr("id");
            f.close();
            f.setToggleLink($(a));
            var o = traderObj.traderId;
            var r = traderObj.current.planet;
            var s = traderObj.resources;
            for (var q = 0; q < s.length; q++) {
                var b = s[q].toLowerCase();
                var u = traderObj.planets[r].input[b];
                if (o == "#div_traderImportExport") {
                    var c = (traderObj.priceImportExport / multiplier[b]) - traderObj.sumResources + traderObj.planets[r].output[b];
                    var p = Math.min(u, c)
                }
                $(o + " .max_planet_" + b).html(number_format(u, 0));
                $(o + " .js_amount.js_" + b).val(number_format(traderObj.planets[r].output[b], 0))
            }
        },
        selectTrader: function (o, a, m) {
            a = a || traderObj.timer;
            $.bbq.pushState({page: o, animation: "false"});
            $(".planetlink, .moonlink").fragment({page: o, animation: "false"});
            traderObj.traderId = "#div_" + o;
            var n = traderObj.traderId, p = $(".back_to_overview");
            var c = function () {
                if (n == "#div_traderAuctioneer" || n == "#div_traderImportExport") {
                    traderObj.resetValues(null, true)
                }
                var g = function () {
                    $("#traderOverview").find(".c-left, .c-right").addClass("c-small");
                    p.show();
                    if (n == "#div_traderAuctioneer" || n == "#div_traderImportExport") {
                        p.addClass("left");
                        p.removeClass("right")
                    } else {
                        if (n == "#div_traderResources" || n == "#div_traderScrap") {
                            p.addClass("right");
                            p.removeClass("left")
                        }
                    }
                    $("#planet #header_text h2").html(loca[o]).parent().show()
                };
                if (animation && !d) {
                    $("#traderOverview").find(".c-left, .c-right").hide();
                    $("#planet").animate({
                        backgroundPosition: traderObj.traderBGPos[n],
                        height: "250px"
                    }, a, function () {
                        $("#planet").addClass("detail");
                        $("#traderOverview").find(".c-left, .c-right").show();
                        g();
                        if (n == "#div_traderResources") {
                            showTradeNowButton()
                        }
                    })
                } else {
                    d = false;
                    $("#planet").css("background-position", traderObj.traderBGPos[n]).css("height", "250px");
                    g();
                    if (n == "#div_traderResources") {
                        showTradeNowButton()
                    }
                }
                f.setPanel();
                $("#planet").addClass("detail");
                $(".js_trader").hide();
                $(n).show();
                if (n == "#div_traderResources" && typeof(m) != "undefined") {
                    $(n + " .ui-tabs").tabs("option", "active", m)
                }
                traderObj.switchingTrader = false
            };
            if ($(traderObj.traderId).length == 0) {
                var b = o.toLowerCase().replace(/^trader/, "");
                $.ajax({
                    url: traderUrl,
                    type: "POST",
                    data: {show: b, ajax: 1},
                    beforeSend: function () {
                        $("#loadingOverlay").addClass(b).show()
                    },
                    success: function (g) {
                        $("#inhalt").append(g);
                        $("#loadingOverlay").hide().removeClass(b);
                        c()
                    },
                    error: function () {
                        fadeBox(loca.error, true);
                        $("#loadingOverlay").hide().removeClass(b)
                    }
                })
            } else {
                c()
            }
        },
        submitAuction: function () {
            var c = traderObj.traderId;
            var b = getValue($(c + " .js_auctioneerSum").html());
            if (!$(c + " .right_box .pay").hasClass("disabled") && traderObj.price > 0 && traderObj.deficit <= 0) {
                $(c + " .right_box .pay").addClass("disabled");
                var h = {planets: {}, honor: traderObj.honorOutput};
                for (var a in traderObj.planets) {
                    h.planets[a] = traderObj.planets[a].output
                }
                $.ajax({
                    url: auctionUrl,
                    type: "POST",
                    data: {bid: h, token: auctioneerToken, ajax: 1},
                    dataType: "json",
                    success: function (g) {
                        auctioneerToken = g.newToken;
                        fadeBox(g.message, g.error);
                        if (!g.error) {
                            traderObj.resetValues(c, false);
                            traderObj.resetMaxAmount(g.planetResources, g.honor);
                            traderObj.reloadResources()
                        }
                    },
                    error: function () {
                        fadeBox(loca.error, true)
                    }
                })
            }
            return false
        },
        submitImportExport: function () {
            if (!$(traderObj.traderId + " .right_box .pay").hasClass("disabled")) {
                $(traderObj.traderId + " .right_box .pay").addClass("disabled");
                var a = {planets: {}, honor: traderObj.honorOutput};
                for (planetId in traderObj.planets) {
                    a.planets[planetId] = traderObj.planets[planetId].output
                }
                $.ajax({
                    url: importUrl,
                    type: "POST",
                    data: {
                        action: "trade",
                        bid: a,
                        token: importToken,
                        ajax: 1
                    },
                    dataType: "json",
                    success: function (b) {
                        importToken = b.newToken;
                        fadeBox(b.message, b.error);
                        if (!b.error) {
                            for (planetId in traderObj.planets) {
                                traderObj.planets[planetId].output = {
                                    metal: 0,
                                    crystal: 0,
                                    deuterium: 0
                                }
                            }
                            $(traderObj.traderId + " .bargain_overlay").show();
                            $(traderObj.traderId + " .payment").hide();
                            $(traderObj.traderId + " .image_140px a").addClass("slideIn");
                            traderObj.reloadResources();
                            traderObj.updateImportItem(b.item);
                            traderObj.refresh()
                        }
                    },
                    error: function () {
                        fadeBox(loca.error, true)
                    }
                })
            }
            return false
        },
        reloadResources: function (a) {
            getAjaxResourcebox(a)
        },
        changeImportItem: function () {
            if ($(traderObj.traderId + " .import_bargain.change").hasClass("disabled")) {
                if (darkMatter < importChangeCost) {
                    errorBoxDecision(LocalizationStrings.error, loca.errorNotEnoughDM, LocalizationStrings.yes, LocalizationStrings.no, redirectPremium)
                }
            } else {
                $(traderObj.traderId + " .import_bargain.change").addClass("disabled");
                $.ajax({
                    url: importUrl,
                    type: "POST",
                    data: {action: "bargain", token: importToken, ajax: 1},
                    dataType: "json",
                    success: function (a) {
                        importToken = a.newToken;
                        fadeBox(a.message, a.error);
                        if (!a.error) {
                            traderObj.updateImportItem(a.item);
                            traderObj.reloadResources(function () {
                                if (a.item.offersLeft > 0 && darkMatter >= importChangeCost) {
                                    $(traderObj.traderId + " .import_bargain.change").removeClass("disabled")
                                } else {
                                    $(traderObj.traderId + " .import_bargain.change").addClass("disabled")
                                }
                            });
                            traderObj.refresh()
                        }
                    },
                    error: function () {
                        fadeBox(loca.error, true)
                    }
                })
            }
            return false
        },
        updateImportItem: function (a) {
            $(traderObj.traderId + " .got_item_text").html(a.itemText);
            $(traderObj.traderId + " .bargain_text").html(a.bargainText);
            $(traderObj.traderId + " .bargain_cost").html(a.bargainCostText);
            importChangeCost = a.bargainCost;
            $(traderObj.traderId + " .image_140px img").attr("src", "/img/icons/items/" + a.image + "-140x.png");
            removeTooltip($(traderObj.traderId + " .image_140px a"));
            $(traderObj.traderId + " .image_140px a").attr("ref", a.uuid).removeClass("tooltip").addClass("tooltipHTML").attr("title", a.tooltip);
            initTooltips($(traderObj.traderId + " .image_140px a"));
            $(traderObj.traderId + " .detail_button .amount").text(a.amount)
        },
        takeImportItem: function () {
            if (!$(traderObj.traderId + " .import_bargain.take").hasClass("disabled")) {
                $(traderObj.traderId + " .import_bargain.change").addClass("disabled");
                $(traderObj.traderId + " .import_bargain.take").addClass("disabled");
                $(traderObj.traderId + " .import_bargain.change").addClass("hidden");
                $(traderObj.traderId + " .import_bargain.take").addClass("hidden");
                $(traderObj.traderId + " .bargain_cost").addClass("hidden");
                $.ajax({
                    url: importUrl,
                    type: "POST",
                    data: {action: "takeItem", token: importToken, ajax: 1},
                    dataType: "json",
                    success: function (a) {
                        importToken = a.newToken;
                        fadeBox(a.message, a.error);
                        if (!a.error) {
                            var b = a.item.ref;
                            changeTooltip($(".detail_button[ref='" + b + "']"), a.item.title);
                            $(".detail_button[ref='" + b + "'] span.amount, #itemDetails[data-uuid='" + b + "'] span.amount").html(tsdpkt(a.item.amount));
                            if (a.item.canBeActivated) {
                                $('#itemDetails[data-uuid="' + b + '"] a.activateItem').removeClass("build-it_disabled").addClass("build-it")
                            } else {
                                $('#itemDetails[data-uuid="' + b + '"] a.activateItem').addClass("build-it_disabled").removeClass("build-it")
                            }
                            if (a.item.newOffer == false) {
                                $(traderObj.traderId + " .bargain_text").html(a.item.noOfferMessage)
                            } else {
                                traderObj.resetImport(a.item.newOffer)
                            }
                        }
                    },
                    error: function () {
                        fadeBox(loca.error, true)
                    }
                })
            }
            return false
        },
        resetImport: function (a) {
            importChangeCost = a.bargainCost;
            if (darkMatter >= importChangeCost) {
                $(traderObj.traderId + " .import_bargain.change").removeClass("disabled")
            } else {
                $(traderObj.traderId + " .import_bargain.change").addClass("disabled")
            }
            $(traderObj.traderId + " .import_bargain.take").removeClass("disabled");
            $(traderObj.traderId + " .import_bargain.change").removeClass("hidden");
            $(traderObj.traderId + " .import_bargain.take").removeClass("hidden");
            $(traderObj.traderId + " .bargain_cost").removeClass("hidden");
            $(traderObj.traderId + " .bargain_overlay").hide();
            $(traderObj.traderId + " .payment").show();
            $(traderObj.traderId + " .image_140px img").attr("src", "/cdn/img/trader/container_" + a.rarity + ".jpg");
            $(traderObj.traderId + " .image_140px a").removeClass("slideIn").attr("ref", "").removeClass("tooltipHTML").addClass("tooltip").removeClass("r_common_140px").removeClass("r_uncommon_140px").removeClass("r_rare_140px").removeClass("r_epic_140px").removeClass("r_buddy_140px").addClass("r_" + a.rarity + "_140px");
            changeTooltip($(traderObj.traderId + " .image_140px a"), a.tooltip);
            $(traderObj.traderId + " .js_import_price").removeClass("green_text").text(number_format(a.price, 0));
            $(traderObj.traderId + " .image_140px .amount").text("?");
            traderObj.priceImportExport = getValue($(".js_import_price").html());
            traderObj.resetValues(null, true);
            traderObj.init()
        },
        sumAuctioneer: function () {
            var k = traderObj.traderId;
            var a = traderObj.price;
            if (a == 0) {
                $("#div_traderAuctioneer .js_amount").attr("disabled", "disabled")
            } else {
                $("#div_traderAuctioneer .js_amount").removeAttr("disabled")
            }
            var c = 0;
            for (var b in traderObj.planets) {
                var l = traderObj.planets[b].output;
                c += parseInt(l.metal) * multiplier.metal + parseInt(l.crystal) * multiplier.crystal + parseInt(l.deuterium) * multiplier.deuterium
            }
            c += parseInt(traderObj.honorOutput) * multiplier.honor;
            c = Math.floor(c);
            traderObj.deficit = (Number(auctioneer.calculateDeficit()) - Number(c));
            if (traderObj.deficit > 0) {
                $(" .js_deficit").html(number_format(traderObj.deficit, 0))
            } else {
                $(" .js_deficit").html(number_format(0, 0))
            }
            if (c > 0) {
                $("#div_traderAuctioneer .js_auctioneerSum").html("+ " + number_format(c, 0))
            } else {
                $("#div_traderAuctioneer .js_auctioneerSum").html("")
            }
            $("#div_traderAuctioneer .js_alreadyBidden").html(number_format(Math.floor(playerBid + c), 0));
            if (a > 0 && traderObj.deficit <= 0) {
                $("#div_traderAuctioneer .right_box .pay").removeClass("disabled")
            } else {
                $("#div_traderAuctioneer .right_box .pay").addClass("disabled")
            }
        },
        sumImportExport: function () {
            var n = traderObj.traderId;
            var m = 0;
            var a = 0;
            var b = 0;
            traderObj.sumResources = 0;
            for (var c in traderObj.planets) {
                var o = traderObj.planets[c].output;
                m += parseInt(o.metal) * multiplier.metal;
                a += parseInt(o.crystal) * multiplier.crystal;
                b += parseInt(o.deuterium) * multiplier.deuterium
            }
            var p = traderObj.honorOutput * multiplier.honor;
            traderObj.sumResources += m + a + b + p;
            if (traderObj.sumResources >= traderObj.priceImportExport) {
                traderObj.sumResources = traderObj.priceImportExport
            }
            $(n + " .js_sum_price").html(number_format(Math.floor(traderObj.sumResources), 0));
            if (traderObj.sumResources >= traderObj.priceImportExport) {
                $(n + " .js_import_price").addClass("green_text");
                $(n + " .right_box .pay").removeClass("disabled")
            } else {
                $(n + " .js_import_price").removeClass("green_text");
                $(n + " .right_box .pay").addClass("disabled")
            }
        },
        updateValues: function (w) {
            var c = traderObj.traderId;
            if (c !== "#" + w.closest(".div_trader").attr("id")) {
                return
            }
            var r = w.attr("class");
            var a = new RegExp(/\b(js_slider\w*)\b/);
            r = (a.test(r)) ? RegExp.$1 : false;
            if (!r) {
                return
            }
            var s = traderObj.current.planet;
            var p, b, v;
            if (r.indexOf("More") != -1) {
                v = r.replace("More", "");
                p = "More"
            } else {
                if (r.indexOf("Max") != -1) {
                    v = r.replace("Max", "");
                    p = "Max"
                }
            }
            traderObj.current.resource = v.replace("js_slider", "").toLowerCase() || null;
            var u = traderObj.current.resource;
            var q = 0;
            if (u == "honor") {
                q = Math.max(0, honorScore)
            } else {
                q = traderObj.planets[s].input[u]
            }
            b = getValue($(c + " ." + v + "Input").val());
            if (p == "More") {
                if (c == "#div_traderImportExport") {
                    if (traderObj.sumResources <= traderObj.priceImportExport - 1000 * multiplier[u]) {
                        b += 1000
                    } else {
                        if (traderObj.sumResources < traderObj.priceImportExport) {
                            b += Math.ceil((traderObj.priceImportExport - traderObj.sumResources) / multiplier[u])
                        }
                    }
                } else {
                    if (c == "#div_traderAuctioneer" && traderObj.price > 0) {
                        b += 1000
                    }
                }
                if (b >= q) {
                    b = Math.max(0, q)
                }
            } else {
                if (p == "Max") {
                    if (c == "#div_traderImportExport") {
                        if (traderObj.sumResources == 0) {
                            b = Math.min(q, Math.ceil(traderObj.priceImportExport / multiplier[u]))
                        } else {
                            if (traderObj.sumResources.isBetween(0, traderObj.priceImportExport - 1)) {
                                b = Math.min(q, b + Math.ceil((traderObj.priceImportExport - traderObj.sumResources) / multiplier[u]));
                                b = Math.max(0, b)
                            }
                        }
                    } else {
                        if (c == "#div_traderAuctioneer" && traderObj.price > 0) {
                            b = Math.min(q, Math.ceil(getValue($(c + " .js_deficit").html()) / multiplier[u] + b))
                        }
                    }
                    if (u == "honor" && b < 0) {
                        b = 0
                    }
                }
            }
            $(c + " .js_amount." + v + "Input").val(number_format(b, 0));
            if (u == "honor") {
                traderObj.honorOutput = b
            } else {
                traderObj.planets[s].output[u] = b
            }
            if (c == "#div_traderImportExport") {
                traderObj.sumImportExport()
            } else {
                if (c == "#div_traderAuctioneer" && traderObj.price > 0) {
                    traderObj.sumAuctioneer();
                    traderObj.checkOverbidden()
                }
            }
        },
        updateValuesInputCanged: function (B) {
            var c = traderObj.traderId;
            if (c !== "#" + B.closest(".div_trader").attr("id")) {
                return
            }
            var v = B.attr("class");
            var a = new RegExp(/\b(js_slider\w*)\b/);
            v = (a.test(v)) ? RegExp.$1 : false;
            if (!v) {
                return
            }
            var A = v.replace("Input", "");
            var x = A.replace("js_slider", "").toLowerCase();
            var w = traderObj.current.planet;
            var u = 0;
            if (x == "honor") {
                u = Math.max(0, honorScore)
            } else {
                u = parseInt(traderObj.planets[w].input[x])
            }
            var b = 0;
            if (c == "#div_traderImportExport") {
                var s = 0;
                for (var r in traderObj.planets) {
                    var y = traderObj.planets[r].output;
                    if (x != "metal") {
                        s += Math.floor(parseInt(y.metal) * multiplier.metal)
                    }
                    if (x != "crystal") {
                        s += Math.floor(parseInt(y.crystal) * multiplier.crystal)
                    }
                    if (x != "deuterium") {
                        s += Math.floor(parseInt(y.deuterium) * multiplier.deuterium)
                    }
                }
                b = Math.min(getValue(B.val()), Math.ceil((traderObj.priceImportExport - s) / multiplier[x]))
            } else {
                if (c == "#div_traderAuctioneer") {
                    b = getValue(B.val())
                }
            }
            b = Math.min(b, u);
            traderObj.planets[w].output[x] = b;
            if (x == "honor") {
                traderObj.honorOutput = b
            } else {
                traderObj.planets[w].output[x] = b
            }
            if (c == "#div_traderImportExport") {
                traderObj.sumImportExport()
            } else {
                if (c == "#div_traderAuctioneer") {
                    traderObj.sumAuctioneer();
                    traderObj.checkOverbidden()
                }
            }
            formatNumber(c + " .js_amount." + A + "Input", b)
        },
        init: function () {
            $(".honorResource").hide();
            $("#menuTable a.trader").unbind("click.gotoTrader").bind("click.gotoTrader", function (a) {
                a.preventDefault();
                traderObj.switchTrader("traderResources")
            });
            $(window).unbind("hashchange.switchTrader").bind("hashchange.switchTrader", function (a) {
                var b = $.deparam.fragment(a.fragment);
                if (typeof(b.page) == "undefined" || b.page == "" && traderObj.traderId != null) {
                    traderObj.returnToOverview()
                } else {
                    traderObj.switchTrader(b.page)
                }
            });
            $(".small_back_to_overview").unbind("mouseenter").unbind("mouseout").bind("mouseenter", function () {
                $("#header_text").css("background-position", "0 -250px")
            }).bind("mouseout", function () {
                $("#header_text").css("background-position", "0 0")
            })
        },
        initSliderTrader: function (a) {
            $(a + " .js_valButton").unbind("click.valControl");
            $(a + " .js_amount").unbind("keyup.inputVal");
            f.init(a);
            $(a + " .js_valButton").bind("click.valControl", function (b) {
                traderObj.updateValues($(this));
                b.stopPropagation()
            });
            $(a + " .js_amount").bind("keyup.inputVal", function (b) {
                traderObj.updateValuesInputCanged($(this));
                b.stopPropagation()
            })
        },
        initImportExport: function () {
            traderObj.planets = planetResources;
            traderObj.priceImportExport = getValue($(".js_import_price").html());
            traderObj.initSliderTrader("#div_traderImportExport");
            $("#div_traderImportExport .right_box .pay").bind("click", function () {
                traderObj.submitImportExport()
            });
            $("#div_traderImportExport .import_bargain.change").bind("click", function () {
                traderObj.changeImportItem()
            });
            $("#div_traderImportExport .import_bargain.take").bind("click", function () {
                traderObj.takeImportItem()
            })
        },
        switchTrader: function (a) {
            if (traderObj.switchingTrader) {
                return
            }
            traderObj.switchingTrader = true;
            Tipped.hideAll();
            $("#planet .close_details:visible").click();
            if ("#div_" + a == traderObj.traderId) {
                return
            }
            if (traderObj.traderId != null || a == "" || a == null) {
                traderObj.returnToOverview();
                if (animation && !d) {
                    setTimeout(function () {
                        traderObj.selectTrader(a)
                    }, 500)
                } else {
                    traderObj.selectTrader(a)
                }
            } else {
                traderObj.selectTrader(a)
            }
        },
        returnToOverview: function () {
            Tipped.hideAll();
            $("#planet #header_text h2").empty().parent().hide();
            $("#traderOverview").find(".c-left, .c-right").hide();
            var a = traderObj.traderId;
            if (!a) {
                return
            }
            $(a).hide();
            $("#callTrader").hide();
            if (animation && !d) {
                $("#planet h2").hide();
                $("#planet").animate({
                    backgroundPosition: "-273px 0px",
                    height: "470px"
                }, 500, function () {
                    $("#planet h2").show();
                    $("#planet").removeClass("detail");
                    $("#traderOverview").find(".c-left, .c-right").show();
                    $(".js_trader").show()
                })
            } else {
                $("#planet").removeClass("detail").css("background-position", "-273px 0px").css("height", "470px");
                $(".js_trader").show()
            }
            $("#planet a").show();
            $("#planet .back_to_overview").hide();
            removeTooltip($("#planet .back_to_overview"));
            $("#traderOverview").find(".c-left, .c-right").removeClass("c-small");
            traderObj.traderId = null;
            traderObj.switchingTrader = false
        }
    };
    breakerObj = {
        costs: null,
        offer: null,
        ships: {},
        locked: false,
        lastTechId: null,
        initialize: function () {
            this.offer = parseInt($(".scrap_offer_amount").html());
            this.costs = breakerCosts;
            var a = this;
            $("#js_anythingSliderShips, #js_anythingSliderDefense").anythingSlider({
                startStopped: true,
                buildStartStop: false,
                expand: true,
                resizeContents: false,
                theme: "default",
                infiniteSlides: false,
                autoPlay: false,
                easing: "swing",
                resizeContents: true,
                stopAtEnd: true,
                playRtl: isRTLEnabled,
                buildNavigation: false,
                onInitialized: function (u, y) {
                    if (isMobile) {
                        var x = 1000, v = 50, s = 0, c = 0, w = "ontouchend" in document, b = (w) ? "touchstart" : "mousedown", r = (w) ? "touchmove" : "mousemove", A = (w) ? "touchend" : "mouseup";
                        y.$window.bind(b, function (g) {
                            c = (new Date()).getTime();
                            s = g.originalEvent.touches ? g.originalEvent.touches[0].pageX : g.pageX
                        }).bind(A, function (g) {
                            c = 0;
                            s = 0
                        }).bind(r, function (h) {
                            h.preventDefault();
                            var g = h.originalEvent.touches ? h.originalEvent.touches[0].pageX : h.pageX, k = (s === 0) ? 0 : Math.abs(g - s), l = (new Date()).getTime();
                            if (c !== 0 && l - c < x && k > v) {
                                if (g < s) {
                                    y.goForward()
                                }
                                if (g > s) {
                                    y.goBack()
                                }
                                c = 0;
                                s = 0
                            }
                        })
                    }
                }
            });
            $("#js_anythingSliderDefense").parent().parent().hide();
            $(".scrap_defense").bind("click.tabDefense", function () {
                $(".scrap_ships").removeClass("selected");
                $(this).addClass("selected");
                $("#js_anythingSliderShips").parent().parent().hide();
                $("#js_anythingSliderDefense").parent().parent().show()
            });
            $(".scrap_ships").bind("click.tabShips", function () {
                $(".scrap_defense").removeClass("selected");
                $(this).addClass("selected");
                $("#js_anythingSliderDefense").parent().parent().hide();
                $("#js_anythingSliderShips").parent().parent().show()
            });
            $(".buildingimg a").each(function () {
                var h = $(this).attr("ref").substr(6, 3);
                var b = $(this).find(".level");
                var c = b.contents().filter(function () {
                    return this.nodeType == 3
                });
                a.ships[h] = c.text().replace(/^\s+|\s+$/g, "");
                c.remove();
                b.append(tsdpkt(a.ships[h]))
            });
            $("#js_scrapBargain").unbind("click").bind("click", function () {
                if (!$(this).hasClass("disabled")) {
                    a.bargain(a)
                }
                return false
            });
            $("#js_scrapScrapIT").unbind("click").bind("click", function () {
                if (!$(this).hasClass("disabled")) {
                    a.trade(a)
                }
                return false
            });
            $("input.ship_amount").unbind("focus").bind("focus", function () {
                a.lastTechId = $(this).attr("name").substr(2, 3);
                $(this).val("")
            });
            $("input.ship_amount").unbind("keyup change").bind("keyup change", function (c) {
                a.lastTechId = $(this).attr("name").substr(2, 3);
                formatNumber(this, $(this).val());
                var b = $(this);
                clearTimeout(b.data("timer"));
                b.data("timer", setTimeout(function () {
                    b.removeData("timer");
                    a.updateResources(a)
                }, 300))
            });
            $(".buildingimg a").unbind("click").bind("click", function () {
                return false
            });
            $(".js_maxShips").unbind("click").bind("click", function () {
                if (!isMobile) {
                    $($(this).attr("ref")).focus()
                }
                var b = a.ships[$(this).attr("ref").substr(6, 3)];
                $($(this).attr("ref")).val(tsdpkt(b)).trigger("change");
                a.updateResources(a);
                return false
            });
            $(".sendAll").unbind("click").bind("click", function () {
                $(".anythingSlider ul:visible input").each(function () {
                    a.lastTechId = $(this).attr("name").substr(2, 3);
                    var b = a.ships[a.lastTechId];
                    $(this).val(tsdpkt(b))
                });
                a.updateResources(a, function (b) {
                    if (b.error) {
                        $(".anythingSlider ul:visible input").val("");
                        $("#div_traderScrap .resource_amount").text(0);
                        a.checkShips(a)
                    }
                })
            });
            $(".sendNone").unbind("click").bind("click", function () {
                $(".anythingSlider ul:visible input").each(function () {
                    a.lastTechId = $(this).attr("name").substr(2, 3);
                    $(this).val("")
                });
                a.updateResources(a)
            });
            $("#js_bargainCost").text(tsdpkt(this.costs));
            this.checkMoney(this);
            this.checkShips(this);
            this.updateBargain(this)
        },
        bargain: function (a) {
            $("#js_scrapBargain").addClass("disabled");
            $.ajax({
                url: breakerCallLink,
                type: "POST",
                dataType: "json",
                data: {bargain: 1, token: breakerToken},
                beforeSend: function () {
                    a.lock(a)
                },
                success: function (b) {
                    a.unlock(a);
                    breakerToken = b.newToken;
                    fadeBox(b.message, b.error);
                    if (!b.error) {
                        a.costs = b.bargainPrice;
                        a.offer = b.percentage;
                        darkMatter = b.resources.dm;
                        a.updateBargain(a);
                        a.updateResources(a);
                        traderObj.reloadResources(function () {
                            a.checkMoney(a);
                            Tipped.show($("#js_scrapBargain")[0])
                        })
                    }
                    $(".scrap_trader_quote").text(b.quote)
                },
                error: function () {
                    a.unlock(a)
                }
            })
        },
        trade: function (a) {
            a.lock(a);
            var b = a.getTradeArray();
            var c = function c() {
                var k = loca.breakerQuestion + '<br/><br/><div style="text-align: left; margin-left: 30px">';
                var l = 0;
                $.each(b, function (g) {
                    k += this + "x " + loca.shipNames[g] + ", ";
                    l++;
                    if (l % 2 == 0) {
                        k += "<br/>"
                    }
                });
                k = k.replace(/, (<br\/>)?$/, "");
                k += "</div>";
                return k
            };
            errorBoxDecision(loca.breaker, c(), LocalizationStrings.yes, LocalizationStrings.no, function () {
                $.ajax({
                    url: breakerCallLink,
                    type: "POST",
                    dataType: "json",
                    data: {
                        lastTechId: a.lastTechId,
                        finishTrade: 1,
                        trade: b,
                        token: breakerToken
                    },
                    success: function (h) {
                        a.unlock(a);
                        breakerToken = h.newToken;
                        if (h.error) {
                            fadeBox(h.message, true)
                        } else {
                            fadeBox(h.message, false);
                            a.offer = h.percentage;
                            a.costs = h.bargainPrice;
                            a.resetForm();
                            a.updateBargain(a);
                            $("#js_scrapAmountMetal").html(0);
                            $("#js_scrapAmountCrystal").html(0);
                            $("#js_scrapAmountDeuterium").html(0);
                            traderObj.reloadResources(function () {
                                a.updateShips(a)
                            })
                        }
                        $(".scrap_trader_quote").text(h.quote)
                    },
                    error: function () {
                        a.unlock(a);
                        fadeBox(loca.error, true)
                    }
                })
            }, function () {
                a.unlock(a)
            })
        },
        updateResources: function (b, a) {
            if (b.locked) {
                return
            }
            $.ajax({
                url: breakerCallLink,
                type: "POST",
                dataType: "json",
                data: {
                    lastTechId: b.lastTechId,
                    trade: b.getTradeArray(),
                    token: breakerToken
                },
                beforeSend: function () {
                    b.lock(b)
                },
                success: function (c) {
                    breakerToken = c.newToken;
                    if (c.error) {
                        fadeBox(c.message, true)
                    }
                    b.locked = false;
                    var k = false;
                    for (var l in c.techAmount) {
                        $("#ship_" + l).val(tsdpkt(c.techAmount[l]));
                        if (!k && $("#ship_" + l).val() != b.ships[l]) {
                            k = true
                        }
                    }
                    $("#js_scrapAmountMetal").html(tsdpkt(c.resources.metal));
                    $("#js_scrapAmountCrystal").html(tsdpkt(c.resources.crystal));
                    $("#js_scrapAmountDeuterium").html(tsdpkt(c.resources.deuterium));
                    if (!b.notFirstOffer) {
                        $(".scrap_trader_quote").text(loca.breakerFirstOffer);
                        b.notFirstOffer = true
                    }
                    if (k) {
                        b.updateShips(b)
                    } else {
                        b.unlock(b)
                    }
                    if (typeof(a) == "function") {
                        a(c)
                    }
                },
                error: function () {
                    b.unlock(b)
                }
            })
        },
        updateShips: function (a) {
            $.ajax({
                url: techUrl,
                type: "POST",
                dataType: "json",
                beforeSend: function () {
                    a.lock(a)
                },
                success: function (b) {
                    $("#div_traderScrap .item").each(function () {
                        var n = $(this).attr("id").substr(6, 3);
                        if (typeof(b[n]) != "undefined") {
                            var m = 0;
                            if (b[n] != null) {
                                m = getValue(b[n])
                            }
                            a.ships[n] = m;
                            var c = $(this).find(".level");
                            c.contents().filter(function () {
                                return this.nodeType == 3
                            }).remove();
                            c.append(tsdpkt(m));
                            if (b[n] != null) {
                                var l = $("#button" + n);
                                l.removeClass("on").removeClass("off");
                                if (m > 0) {
                                    l.addClass("on")
                                } else {
                                    l.addClass("off")
                                }
                            }
                        }
                    });
                    a.unlock(a)
                },
                error: function () {
                    a.unlock(a)
                }
            })
        },
        getTradeArray: function () {
            var a = {};
            $("input.ship_amount").each(function () {
                var b = $(this).attr("name").substr(2, 3);
                if (getValue($(this).val()) != 0) {
                    a[b] = getValue($(this).val())
                }
            });
            return a
        },
        resetForm: function () {
            $("input.ship_amount").each(function () {
                $(this).val("0")
            });
            removeTooltip($("#js_scrapBargain"));
            $("#js_scrapBargain").removeClass("tooltip").removeAttr("title")
        },
        checkMoney: function (a) {
            if (darkMatter < a.costs) {
                $("#js_scrapBargain").addClass("disabled")
            } else {
                if (breakerMaximumPercent <= a.offer) {
                    $("#js_scrapBargain").addClass("disabled").addClass("tooltip").attr("title", loca.infoMaxBargain);
                    initTooltips($("#js_scrapBargain"))
                } else {
                    $("#js_scrapBargain").removeClass("disabled")
                }
            }
        },
        checkShips: function (a) {
            var b = false;
            $("input.ship_amount").each(function () {
                if ($(this).val().length > 0 && getValue($(this).val()) > 0) {
                    b = true
                }
            });
            if (!b) {
                $("#js_scrapScrapIT").addClass("disabled")
            } else {
                $("#js_scrapScrapIT").removeClass("disabled")
            }
        },
        updateBargain: function (a) {
            $(".scrap_offer_amount").css("height", a.offer / 100 * $(".scrap_offer_amount").parent().css("height").replace("px", ""));
            $(".scrap_offer_amount").html(a.offer + "%");
            $(".js_bargainCost").text(tsdpkt(a.costs))
        },
        lock: function (a) {
            $("#js_scrapBargain").addClass("disabled");
            $("#js_scrapScrapIT").addClass("disabled");
            a.locked = true
        },
        unlock: function (a) {
            a.locked = false;
            a.checkShips(a);
            a.checkMoney(a)
        }
    };
    auctioneer = {
        socket: null,
        connected: false,
        timeout: null,
        retryInterval: 5000,
        historyShown: false,
        initConnection: function () {
            try {
                var a = auctioneer;
                this.socket = new io.connect("/auctioneer", nodeParams);
                console.log('auctioneer ioConnect()');
                this.socket.on("connect", function () {
                    a.connected = true;
                    clearTimeout(this.timeout)
                });
                this.socket.on("disconnect", function () {
                    a.connected = false;
                    a.retryConnection()
                });
                this.socket.on("new auction", function (n) {
                    auctionId = n.auctionId;
                    var o = $("#div_traderAuctioneer .detail_value.currentPlayer").html();
                    if (n.oldAuction.player == null) {
                        o = loca.auctionNotSold
                    } else {
                        o = '<a href="' + n.oldAuction.player.link + '">' + n.oldAuction.player.name + "</a>"
                    }
                    removeTooltip($("#div_traderAuctioneer .image_140px .detail_button"));
                    var c = $("#div_traderAuctioneer .image_140px .detail_button").attr("title");
                    var p = $(".auction_history li:first").hasClass("even") ? "odd" : "even";
                    var q = '                        <li class="' + p + '" style="display: none">                            <a href="javascript:void(0);"                               class="slideIn"                               ref="' + n.oldAuction.item.uuid + '">                                <img height="30" width="30"                                     src="/img/icons/items/' + n.oldAuction.item.imageSmall + '-small.png"                                     alt="" title="' + c + '"                                     class="item_img tooltipHTML tooltipLeft r_' + n.oldAuction.item.rarity + '"/>                            </a>                            <span class="detail sum">' + number_format(n.oldAuction.sum, 0) + '</span>                            <span class="detail player">' + o + '</span>                            <span class="detail date_time">' + n.oldAuction.time + "</span>                        </li>";
                    $(".auction_history .history_content ul").prepend(q);
                    $(".auction_history .history_content li:first").slideDown("slow");
                    var r = $("#div_traderAuctioneer .auction_history li").length;
                    if (r > 3) {
                        $(".auction_history .history_content li:last").slideUp("slow", function () {
                            $(".auction_history .history_content li:eq(21)").remove();
                            var g = $(".auction_history .history_content li:eq(3)");
                            g.addClass("more_auctions_li");
                            if (auctioneer.historyShown) {
                                g.show()
                            }
                        });
                        $("#div_traderAuctioneer .auction_history .more").show()
                    }
                    $("#div_traderAuctioneer .image_140px .detail_button").attr("ref", n.item.uuid).attr("title", "").removeClass("r_common_140px").removeClass("r_uncommon_140px").removeClass("r_rare_140px").removeClass("r_epic_140px").addClass("r_" + n.item.rarity + "_140px");
                    $("#div_traderAuctioneer .image_140px img").attr("src", "/img/icons/items/" + n.item.image + "-140x.png");
                    $("#div_traderAuctioneer .left_header h2").html(loca.auctionRunning);
                    a.setItemTooltip($("#div_traderAuctioneer .image_140px .detail_button"));
                    a.setData({
                        price: 1000,
                        sum: 0,
                        player: null,
                        bids: 0,
                        info: n.info
                    });
                    $("#div_traderAuctioneer .js_alreadyBidden").html(number_format(0, 0));
                    $(".noAuctionOverlay").hide();
                    traderObj.resetValues("#div_traderAuctioneer", false);
                    traderObj.checkOverbidden()
                });
                this.socket.on("new bid", function (c) {
                    if (c.player.id == playerId) {
                        playerBid = c.sum;
                        AuctionIdOflastPlayerBid = c.auctionId;
                        $("#div_traderAuctioneer .js_alreadyBidden").html(number_format(Math.floor(playerBid), 0))
                    }
                    a.setData({
                        price: c.price,
                        sum: c.sum,
                        player: c.player,
                        bids: c.bids
                    });
                    traderObj.checkOverbidden()
                });
                this.socket.on("auction finished", function (c) {
                    a.setData({
                        price: 0,
                        player: c.player,
                        bids: c.bids,
                        info: c.info
                    });
                    traderObj.resetValues("#div_traderAuctioneer", false);
                    $("#div_traderAuctioneer .js_alreadyBidden").html(number_format(0, 0));
                    $("#div_traderAuctioneer .js_auctioneerSum").html("");
                    $("#div_traderAuctioneer .left_header h2").html(loca.auctionFinished);
                    if (c.player != null) {
                        if (c.player.id == playerId) {
                            a.setItemTooltip($("#div_traderAuctioneer .image_140px .detail_button"))
                        }
                    }
                    $(".noAuctionOverlay").show();
                    traderObj.checkOverbidden()
                });
                this.socket.on("timeLeft", function (c) {
                    a.setData({info: c})
                })
            } catch (b) {
            }
        },
        setItemTooltip: function (a) {
            $.ajax({
                url: detailUrl,
                data: {getDetails: 1, type: $(a).attr("ref"), ajax: 1},
                dataType: "json",
                success: function (b) {
                    changeTooltip(a, b.title);
                    $("#itemDetails[data-uuid='" + $(a).attr("ref") + "'] .amount,a.detail_button[ref='" + $(a).attr("ref") + "'] .amount").html(tsdpkt(b.amount))
                },
                error: function () {
                    fadeBox(loca.error, true)
                }
            })
        },
        initialize: function () {
            traderObj.initSliderTrader("#div_traderAuctioneer");
            traderObj.planets = planetResources;
            traderObj.price = getValue($(".js_price").html());
            $("#div_traderAuctioneer .right_box .pay").bind("click", function () {
                traderObj.submitAuction()
            });
            $("#div_traderAuctioneer .auction_history .more").bind("click", function () {
                if (auctioneer.historyShown) {
                    $(this).text("[" + loca.auctionShowMore + "]")
                } else {
                    $(this).text("[" + loca.auctionShowLess + "]")
                }
                auctioneer.historyShown = !auctioneer.historyShown;
                $("#div_traderAuctioneer .auction_history .more_auctions_li").slideToggle("slow")
            });
            traderObj.sumAuctioneer();
            traderObj.checkOverbidden();
            this.initCountdown();
            loadScript(nodeUrl, this.initConnection)
        },
        retryConnection: function () {
            var a = this;
            setTimeout(function () {
                a.initConnection()
            }, 5000)
        },
        setData: function (a) {
            var b = false;
            if (typeof(a.player) != "undefined") {
                if (a.player == null) {
                    $("#div_traderAuctioneer .detail_value.currentPlayer").text("");
                    $("#div_traderAuctioneer .detail_value.currentPlayer").attr("href", "")
                } else {
                    $("#div_traderAuctioneer .detail_value.currentPlayer").text(a.player.name);
                    $("#div_traderAuctioneer .detail_value.currentPlayer").attr("href", a.player.link);
                    $("#div_traderAuctioneer .detail_value.currentPlayer").attr("data-player-id", a.player.id);
                    $("#div_traderAuctioneer .detail_value.currentPlayer").data("playerId", a.player.id)
                }
                b = true
            }
            if (typeof(a.price) !== "undefined") {
                traderObj.price = a.price;
                $("#div_traderAuctioneer .js_price").html(number_format(Math.floor(a.price), 0));
                b = true
            }
            if (typeof(a.sum) !== "undefined") {
                $("#div_traderAuctioneer .detail_value.currentSum").html(number_format(Math.floor(a.sum), 0));
                b = true
            }
            if (typeof(a.bids) !== "undefined") {
                $("#div_traderAuctioneer .detail_value.numberOfBids").html(number_format(a.bids, 0));
                b = true
            }
            if (typeof(a.info) !== "undefined" && $.trim($("#div_traderAuctioneer .auction_info").html()) != a.info) {
                $("#div_traderAuctioneer .auction_info").html(a.info);
                this.initCountdown();
                b = true
            }
            if (b) {
                this.flash();
                traderObj.sumAuctioneer()
            }
        },
        initCountdown: function () {
            if (typeof(this.nextAuctionTimer) == "object") {
                timerHandler.removeCallback(this.nextAuctionTimer.timer)
            }
            if ($(".nextAuction").length > 0) {
                this.nextAuctionTimer = new simpleCountdown($(".nextAuction").get(0), $(".nextAuction").text())
            }
        },
        flash: function () {
            if (traderObj.traderId == "#div_traderAuctioneer") {
                $("#div_traderAuctioneer .overlay").fadeIn("normal", function () {
                    $(this).fadeOut("normal")
                })
            }
        },
        calculateDeficit: function () {
            var a = 0;
            if (Math.floor(traderObj.price) == 0) {
                a = 0
            } else {
                if (auctionId != AuctionIdOflastPlayerBid) {
                    a = Math.floor(traderObj.price)
                } else {
                    a = Math.floor(traderObj.price) - Math.floor(playerBid)
                }
            }
            return Math.floor(a)
        }
    };
    $(".js_trader").hover(function () {
        var a = $(this).attr("id").replace("js_trader", "").toLowerCase();
        $(this).addClass(a + "_link_hover")
    }, function () {
        var a = $(this).attr("id").replace("js_trader", "").toLowerCase();
        $(".trader_link").each(function (c, b) {
            $(this).removeClass(a + "_link_hover")
        })
    });
    $(".right_box .pay, .value-control, .ui-slider-handle, .bargain, .scrap_it, .source").hover(function () {
        $(this).addClass("hover")
    }, function () {
        $(this).removeClass("hover")
    });
    traderObj.init();
    $(document).undelegate(".js_trader", "click").delegate(".js_trader", "click", function () {
        var a = $(this).attr("id").replace("js_", "");
        traderObj.switchTrader(a)
    }).undelegate("#planet .js_backToOverview", "click").delegate("#planet .js_backToOverview", "click", function () {
        $.bbq.pushState({page: "", animation: ""});
        $(".planetlink, .moonlink").fragment({page: "", animation: ""})
    });
    var e = $.deparam.fragment();
    if (typeof(e.page) != "undefined" && e.page != "") {
        traderObj.selectTrader(e.page, undefined, e.tab)
    }
};
function PercentageBar(elem) {
    this.elem = $(elem);
    this.elem.data('percentageBarInstance', this);
    this.elem.disableSelection();
    this.value = parseFloat(this.elem.attr('value') || 10 * 2);
    this.minValue = parseInt(this.elem.attr('minValue') || 1 / 2);
    this.steps = parseInt(this.elem.attr('steps') || 10 * 2);
    this.stepSize = parseInt(this.elem.attr('stepSize') || 10 * 2);
    this.useHalfStep = this.elem.attr('useHalfStep') === 'true' || false;
    this.barFactor = 1;
    this.valueOnEnter = null;
    this.isDragging = false;
    this.init();
    this.updateBar();
}

PercentageBar.prototype.init = function () {
    if (this.useHalfStep) {
        this.barFactor = 2;
    }

    this.initBar();
    this.initSteps();

    if (document.createTouch === undefined) {
        this.elem.on('mouseup', this.onMouseUp.bind(this));
        this.elem.on('mousemove', this.onMouseMove.bind(this));
        this.elem.on('mouseenter', this.onMouseEnter.bind(this));
        this.elem.on('mouseleave', this.onMouseLeave.bind(this));
    } else {
        this.elem.on('touchstart', this.onTouchStart.bind(this));
        this.elem.on('touchmove', this.onTouchMove.bind(this));
        this.elem.on('touchend', this.onTouchEnd.bind(this));
    }
};

PercentageBar.prototype.initSteps = function () {
    let html = '<div class="steps">';

    for (let i = 0; i < this.steps; ++i) {
        let label = (i + 1) * this.stepSize;
        html += '<div class="step' + (this.stepSize === 10 ? ' step2' : '') + '"  style="cursor: pointer" onclick="" data-step="' + (i + 1) / this.barFactor + '">' + label + '</div>';
    }

    this.elem.append(html);
};

PercentageBar.prototype.initBar = function () {
    let html = '<div class="bar"></bar>';
    this.elem.append(html);
};

PercentageBar.prototype.updateDrag = function (e) {
    let xMin = this.elem.offset().left;
    let xMax = xMin + this.elem.outerWidth();
    let xCurrent = e.pageX;
    let value = this.calcValue(xCurrent, xMin, xMax);
    this.setValue(value);
};

PercentageBar.prototype.onMouseUp = function (e) {
    if (this.valueOnEnter) {
        this.valueOnEnter = this.getValue();
        this.setValue(this.valueOnEnter);
    }

    this.updateDrag(e);
};

PercentageBar.prototype.onMouseMove = function (e) {
    this.updateDrag(e);
};

PercentageBar.prototype.onMouseEnter = function (e) {
    this.valueOnEnter = this.getValue();
};

PercentageBar.prototype.onMouseLeave = function (e) {
    if (this.valueOnEnter > 0) {
        this.setValue(this.valueOnEnter);
    }
};
/**
 * TOUCH EVENTS
 */


PercentageBar.prototype.onTouchStart = function (e) {
    this.startDrag();
};

PercentageBar.prototype.onTouchMove = function (e) {};

PercentageBar.prototype.onTouchEnd = function (e) {
    if (this.valueOnEnter) {
        this.valueOnEnter = this.getValue();
        this.setValue(this.valueOnEnter);
    }

    this.updateDragTouch(e);
    this.stopDrag();
};

PercentageBar.prototype.startDrag = function () {
    this.isDragging = true;
    this.valueOnEnter = this.getValue();
};

PercentageBar.prototype.stopDrag = function () {
    this.isDragging = false;
};

PercentageBar.prototype.updateDragTouch = function (e) {
    if (this.isDragging === true) {
        let xMin = this.elem.offset().left;
        let xMax = xMin + this.elem.outerWidth();
        let xCurrent = e.originalEvent.pageX;

        if (xCurrent === 0) {
            xCurrent = e.originalEvent.changedTouches[0].pageX;
        }

        let value = this.calcValue(xCurrent, xMin, xMax);
        this.setValue(value);
    }
};

PercentageBar.prototype.calcValue = function (xCurrent, xMin, xMax) {
    let x = clampInt(xCurrent, xMin, xMax);
    let percent = (x - xMin) / (xMax - xMin);
    let valueMin = Math.floor(percent * this.steps);
    let valueMax = Math.ceil(percent * this.steps);
    let value = Math.round((valueMax + valueMin) / 2) / this.barFactor;
    return value;
};

PercentageBar.prototype.setValue = function (valueNew) {
    let valueOld = this.value;
    this.value = clampFloat(valueNew, this.minValue, this.steps);

    if (valueOld !== valueNew) {
        this.elem.trigger($.Event('change', {
            value: this.value
        }));
    }

    this.updateBar();
};

PercentageBar.prototype.getValue = function () {
    return this.value;
};

PercentageBar.prototype.updateBar = function () {
    let xMin = this.elem.offset().left;
    let xMax = xMin + this.elem.outerWidth();
    let width = parseInt(this.value / this.steps * (xMax - xMin) * this.barFactor);
    this.elem.find('.bar').width(width);
    this.elem.find('.step').toggleClass('selected', false);
    this.elem.find('.step[data-step="' + this.value + '"]').toggleClass('selected', true);
};

function addPercentageBarPlugin() {
    (function (jQ) {
        jQ.fn.percentageBar = function (options) {
            let percentageBarInstance = new PercentageBar(this, options);
            return this;
        };
    })(jQuery);
}
$(function () {
    $(".percentSelector").each(function () {
        PercentSelector.initBar(this);
    });
});
var PercentSelector = {};
PercentSelector.fallbackMode = false; //($.browser.msie && $.browser.version < 9);
//This will init a bar (calling this directly is useful for re-doing a bar's sizes in the event it's been resized).

PercentSelector.initBar = function (bar) {
    if (!bar) return;
    var $bar = $(bar);
    var height = $bar.innerHeight();
    $bar.children(".PBcolorGrad").remove();
    $bar.children(".PBoverlay").remove();
    var opcAttr = $bar.attr("onpercentchange");

    if (opcAttr) {
        if (typeof opcAttr == "function") {
            $bar.get(0).onpercentchange = opcAttr;
        } else if (typeof opcAttr == "string") {
            if (/^function/.test(opcAttr)) {
                eval("$bar.get(0).onpercentchange = " + opcAttr);
            } else {
                eval("$bar.get(0).onpercentchange = function() {" + opcAttr + "}");
            }
        }
    }

    if (!PercentSelector.fallbackMode) {
        $bar.append($("<canvas class='PBoverlay'></canvas>").css("height", height).css("width", $bar.innerWidth()));
        $bar.append($("<div class='PBcolorGrad'></div>").css("height", height * 20).css("top", -(2 * height)));
        PercentSelector.createOverlay($bar);
    } else {
        $bar.addClass("fallback");
        $bar.append($("<div class='PBfallbackColor'></div>").css("height", height).css("width", $bar.innerWidth())); //$bar.append($("<div class='PBfallbackOverlay'></div>").css("height", height).css("width", $bar.innerWidth()).css("margin-top", -$bar.innerHeight()));
    }

    if ($bar.attr("percent") != null) {
        //ok, I know this is odd. It's because setPercent ignores the change if it's changing to the percent
        // the bar is already at. It remembers what percent it's at using the percent attribute. So trying to
        // initialize it to the percent attribute causes problems. So I just "reset" the attribute to 100% and then
        // re-initialize to the percent given.
        var percent = parseInt($bar.attr("percent"));
        $bar.attr("percent", 100);
        PercentSelector.setPercent($bar, percent, true);
    }

    if (!bar.isBound) {
        if (!($bar.attr("enabled") && $bar.attr("enabled").toLowerCase() == "false")) {
            var $bindBar = $bar;

            if (document.createTouch == undefined) {
                $bindBar.bind("mousedown", PercentSelector.handlers.mouseDown);
                $bindBar.bind("mousemove", PercentSelector.handlers.mouseMove);
                $bindBar.bind("mouseup", PercentSelector.handlers.mouseUp);
                $bindBar.bind("mouseout", PercentSelector.handlers.mouseOut);
            } else {
                $bindBar.bind("touchstart", PercentSelector.handlers.touchStart);
                $bindBar.bind("touchmove", PercentSelector.handlers.touchMove);
                $bindBar.bind("touchend", PercentSelector.handlers.touchEnd);
            }
        }

        bar.isBound = true; //to prevent multi-binding!
    }
};

PercentSelector.setPercent = function (bar, newPercent, animate) {
    var $bar = $(bar);
    var step = $bar.attr("step");
    if (!step) step = 1;else step = parseInt(step);
    newPercent = Math.round(newPercent / step) * step; //short circuit if the percent is not changing!

    if (newPercent == parseInt($bar.attr("percent"))) return;
    $bar.attr("percent", newPercent);

    if (PercentSelector.fallbackMode) {
        $bar.children(".PBfallbackColor").css("width", $bar.innerWidth() * newPercent / 100.0); //console.log("setting percent to: " + newPercent);
    } else {
        if (animate) {
            $bar.children(".PBcolorGrad").css("-webkit-transition", "-webkit-transform 0.6s ease-in");
            $bar.children(".PBcolorGrad").css("-moz-transition", "-moz-transform 0.6s ease-in");
        } else {
            $bar.children(".PBcolorGrad").css("-webkit-transition", "-webkit-transform 0.1s ease-in"); //turn off the animation in case it's on!

            $bar.children(".PBcolorGrad").css("-moz-transition", "-moz-transform 0.1s ease-in"); //turn off the animation in case it's on!
        }

        var yTrans = Math.round($bar.children(".PBcolorGrad").outerHeight() * .90 * (100 - newPercent) / 100.0);
        var xTrans = Math.round($bar.children(".PBcolorGrad").innerWidth() * ((100 - newPercent) / 100.0));

        if (animate) {
            setTimeout(function () {
                $bar.children(".PBcolorGrad").css("-webkit-transform", "translate(-" + xTrans + "px, -" + yTrans + "px)");
                $bar.children(".PBcolorGrad").css("-moz-transform", "translate(-" + xTrans + "px, -" + yTrans + "px)");
                $bar.children(".PBcolorGrad").css("-ms-transform", "translate(-" + xTrans + "px, -" + yTrans + "px)");
            }, 1);
        } else {
            $bar.children(".PBcolorGrad").css("-webkit-transform", "translate(-" + xTrans + "px, -" + yTrans + "px)");
            $bar.children(".PBcolorGrad").css("-moz-transform", "translate(-" + xTrans + "px, -" + yTrans + "px)");
            $bar.children(".PBcolorGrad").css("-ms-transform", "translate(-" + xTrans + "px, -" + yTrans + "px)");
        }
    }
};

PercentSelector.setPercentFromPageX = function (bar, page_x, animate) {
    var $bar = $(bar);
    var x = page_x - $bar.offset().left;
    var width = $bar.outerWidth();
    var percent = 100 * x / width;
    if (percent > 100) percent = 100;
    if (percent < 10) percent = 10;
    percent = Math.round(percent);
    PercentSelector.setPercent(bar, percent, animate);
};

PercentSelector.createOverlay = function (bar) {
    var $bar = $(bar);
    $overlay = $bar.children(".PBoverlay");
    var width = $overlay.innerWidth();
    var height = $overlay.innerHeight();
    var canvas = $overlay.get(0);
    canvas.width = width;
    canvas.height = height;
    var ctx = canvas.getContext("2d"); //Create the plastic overlay

    var lingrad = ctx.createLinearGradient(0, 0, 0, height);
    lingrad.addColorStop(0, 'rgba(0,0,0,0.05)');
    lingrad.addColorStop(1, 'rgba(0,0,0,0.3)');
    ctx.fillStyle = lingrad;
    ctx.fillRect(0, 0, width, height);
    ctx.clearRect(3, 3, width - 6, height - 6);
    lingrad = ctx.createLinearGradient(0, 0, 0, height);
    lingrad.addColorStop(0, 'rgba(0,0,0,0.2)');
    lingrad.addColorStop(1, 'rgba(0,0,0,0.05)');
    ctx.fillStyle = lingrad;
    ctx.fillRect(3, 3, width - 6, height - 6); //create the steps

    var step = $bar.attr("step");
    if (!step) step = 100;
    ctx.lineWidth = 1;
    var maxWidth = width / step;
    var stepWith = width / step;

    for (var curStep = 0; curStep * step < 100; curStep += 1) {
        var x = Math.floor(curStep * step * width / 100) - .5;
        ctx.beginPath();
        ctx.font = "12px serif";
        ctx.fillStyle = 'white';
        ctx.strokeStyle = 'black';
        ctx.textAlign = "center";
        ctx.textBaseline = "middle";
        ctx.fillText(((curStep + 1) * 10).toString(), x + stepWith / 2, height / 2, maxWidth); // ctx.strokeText(((curStep + 1) * 10).toString(), x + stepWith/2, height * 1, maxWidth);

        ctx.moveTo(x, height);
        ctx.lineTo(x, height * .75);
        ctx.closePath();
        ctx.stroke();
    }
};

PercentSelector.handlers = {};
/**** touch handling ****/

PercentSelector.handlers.touchDragging = false;

PercentSelector.handlers.touchStart = function (event) {
    var touches = event.originalEvent.touches;
    if (touches.length > 1) return;
    event.preventDefault();
    PercentSelector.handlers.touchDragging = false;
};

PercentSelector.handlers.touchEnd = function (event) {
    touches = event.originalEvent.touches;
    if (touches.length == 0) touches = event.originalEvent.changedTouches;
    if (touches.length > 1) return;
    var bar = touches[0].target.parentNode;
    PercentSelector.setPercentFromPageX(bar, touches[0].pageX, true);

    if (bar.onpercentchange != undefined) {
        bar.onpercentchange($(bar).attr("percent"));
    }

    event.preventDefault();
};

PercentSelector.handlers.touchMove = function (event) {
    PercentSelector.handlers.touchDragging = true;
    var touches = event.originalEvent.touches;
    if (touches.length > 1) return;
    event.preventDefault();
    PercentSelector.setPercentFromPageX(touches[0].target.parentNode, touches[0].pageX);
};
/*** mouse handling ***/


PercentSelector.handlers.mouseDragging = false;

PercentSelector.handlers.mouseDown = function (event) {
    PercentSelector.handlers.mouseDragging = true;
};

PercentSelector.handlers.mouseOut = function (event) {
    if (PercentSelector.handlers.mouseDragging) {
        var bar = PercentSelector.fallbackMode ? event.currentTarget : event.originalEvent.target.parentNode; //         if (bar.onpercentchange != undefined) {
        //             var x = eval(bar.onpercentchange);
        // console.debug(x);
        //             if (typeof x == 'function') {
        //                 x($(bar).attr("percent"));
        //             }
        //             // bar.onpercentchange($(bar).attr("percent"));
        //         }
    }

    PercentSelector.handlers.mouseDragging = false;
};

PercentSelector.handlers.mouseUp = function (event) {
    PercentSelector.handlers.mouseDragging = false;
    var bar = PercentSelector.fallbackMode ? event.currentTarget : event.originalEvent.target.parentNode;
    PercentSelector.setPercentFromPageX(bar, event.pageX, true); // if (bar.onpercentchange != undefined) {
    //     var x = eval(bar.onpercentchange);
    //
    //     if (typeof x == 'function') {
    //         x($(bar).attr("percent"));
    //     }
    //     // bar.onpercentchange($(bar).attr("percent"));
    // }
    // if(bar.onpercentchange != undefined) {
    //     bar.onpercentchange($(bar).attr("percent"));
    // }
};

PercentSelector.handlers.mouseMove = function (event) {
    if (PercentSelector.handlers.mouseDragging) {
        event.preventDefault();
        var bar = PercentSelector.fallbackMode ? event.currentTarget : event.originalEvent.target.parentNode;
        PercentSelector.setPercentFromPageX(bar, event.pageX);
    }
};
var TimerHandler = function (d, c) {
    if (typeof(d) == "undefined") {
        d = 1000
    }
    this._interval = d;
    this._callbacks = new Array();
    this._intervalId = null;
    this._lastId = 0;
    this.pageReloadAlreadyTriggered = false;
    this.checkEventsAlreadyQueued = false;
    if (c != false) {
        this.startTimer()
    }
};
TimerHandler.prototype.appendCallback = function (c) {
    var d = this._lastId++;
    this._callbacks[d] = c;
    return d
};
TimerHandler.prototype.removeCallback = function (b) {
    this._callbacks[b] = null
};
TimerHandler.prototype.startTimer = function () {
    var b = this;
    this._intervalId = window.setInterval(function () {
        b._timer()
    }, this._interval)
};
TimerHandler.prototype.stopTimer = function () {
    window.clearInterval(this._intervalId)
};
TimerHandler.prototype._timer = function () {
    for (var b in this._callbacks) {
        if (this._callbacks[b] != null) {
            this._callbacks[b]()
        }
    }
};
/**
 * Timer handler
 * 
 * @param integer interval  Default is 1000
 * @param boolean autostart Default is true
 */
var TimerHandler = function (interval, autostart) {
  if (typeof interval == 'undefined') {
    interval = 1000;
  }

  this._interval = interval;
  this._callbacks = new Array();
  this._intervalId = null;
  this._lastId = 0;
  this.pageReloadAlreadyTriggered = false;
  this.checkEventsAlreadyQueued = false;

  if (autostart != false) {
    this.startTimer();
  }
};
/**
 * Append a callback to the timer
 * 
 * Returns the index required to remove the callback again
 * 
 * @param  object method
 * @return integer
 */


TimerHandler.prototype.appendCallback = function (method) {
  var index = this._lastId++;
  this._callbacks[index] = method;
  return index;
};

TimerHandler.prototype.removeCallback = function (index) {
  this._callbacks[index] = null;
};
/**
 * Start the timer
 * 
 * @return void
 */


TimerHandler.prototype.startTimer = function () {
  var instance = this;
  this._intervalId = window.setInterval(function () {
    instance._timer();
  }, this._interval);
};
/**
 * Stop the timer
 * 
 * @return void
 */


TimerHandler.prototype.stopTimer = function () {
  window.clearInterval(this._intervalId);
};
/**
 * Timer which is called every N seconds
 * 
 * Executes every assigned callback
 * 
 * @return void
 */


TimerHandler.prototype._timer = function () {
  for (var i in this._callbacks) {
    if (this._callbacks[i] != null) {
      this._callbacks[i]();
    }
  }
};
// Copyright 2006 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
document.createElement("canvas").getContext || function () {
  function C() {}

  function B(a) {
    this.type_ = a, this.r1_ = this.y1_ = this.x1_ = this.r0_ = this.y0_ = this.x0_ = 0, this.colors_ = [];
  }

  function A(a, b, c) {
    !z(b) || (a.m_ = b, c && (a.lineScale_ = f(e(b[0][0] * b[1][1] - b[0][1] * b[1][0]))));
  }

  function z(a) {
    var b = 0;

    for (; b < 3; b++) {
      var c = 0;

      for (; c < 2; c++) if (!isFinite(a[b][c]) || isNaN(a[b][c])) return !1;
    }

    return !0;
  }

  function y(a, b, c, d) {
    a.currentPath_.push({
      type: "bezierCurveTo",
      cp1x: b.x,
      cp1y: b.y,
      cp2x: c.x,
      cp2y: c.y,
      x: d.x,
      y: d.y
    }), a.currentX_ = d.x, a.currentY_ = d.y;
  }

  function w(a) {
    this.m_ = r(), this.mStack_ = [], this.aStack_ = [], this.currentPath_ = [], this.fillStyle = this.strokeStyle = "#000", this.lineWidth = 1, this.lineJoin = "miter", this.lineCap = "butt", this.miterLimit = g * 1, this.globalAlpha = 1, this.canvas = a;
    var b = a.ownerDocument.createElement("div");
    b.style.width = a.clientWidth + "px", b.style.height = a.clientHeight + "px", b.style.overflow = "hidden", b.style.position = "absolute", a.appendChild(b), this.element_ = b, this.lineScale_ = this.arcScaleY_ = this.arcScaleX_ = 1;
  }

  function v(a) {
    switch (a) {
      case "butt":
        return "flat";

      case "round":
        return "round";

      case "square":
      default:
        return "square";
    }
  }

  function u(a) {
    var b,
        c = 1;
    a = String(a);

    if (a.substring(0, 3) == "rgb") {
      var d = a.indexOf("(", 3),
          e = a.indexOf(")", d + 1),
          f = a.substring(d + 1, e).split(",");
      b = "#";
      var g = 0;

      for (; g < 3; g++) b += o[Number(f[g])];

      f.length == 4 && a.substr(3, 1) == "a" && (c = f[3]);
    } else b = a;

    return {
      color: b,
      alpha: c
    };
  }

  function t(a, b) {
    b.fillStyle = a.fillStyle, b.lineCap = a.lineCap, b.lineJoin = a.lineJoin, b.lineWidth = a.lineWidth, b.miterLimit = a.miterLimit, b.shadowBlur = a.shadowBlur, b.shadowColor = a.shadowColor, b.shadowOffsetX = a.shadowOffsetX, b.shadowOffsetY = a.shadowOffsetY, b.strokeStyle = a.strokeStyle, b.globalAlpha = a.globalAlpha, b.arcScaleX_ = a.arcScaleX_, b.arcScaleY_ = a.arcScaleY_, b.lineScale_ = a.lineScale_;
  }

  function s(a, b) {
    var c = r(),
        d = 0;

    for (; d < 3; d++) {
      var e = 0;

      for (; e < 3; e++) {
        var f = 0,
            g = 0;

        for (; g < 3; g++) f += a[d][g] * b[g][e];

        c[d][e] = f;
      }
    }

    return c;
  }

  function r() {
    return [[1, 0, 0], [0, 1, 0], [0, 0, 1]];
  }

  function n(a) {
    var b = a.srcElement;
    b.firstChild && (b.firstChild.style.width = b.clientWidth + "px", b.firstChild.style.height = b.clientHeight + "px");
  }

  function m(a) {
    var b = a.srcElement;

    switch (a.propertyName) {
      case "width":
        b.style.width = b.attributes.width.nodeValue + "px", b.getContext().clearRect();
        break;

      case "height":
        b.style.height = b.attributes.height.nodeValue + "px", b.getContext().clearRect();
    }
  }

  function k(a, b) {
    var c = j.call(arguments, 2);
    return function () {
      return a.apply(b, c.concat(j.call(arguments)));
    };
  }

  function i() {
    return this.context_ || (this.context_ = new w(this));
  }

  var a = Math,
      b = a.round,
      c = a.sin,
      d = a.cos,
      e = a.abs,
      f = a.sqrt,
      g = 10,
      h = g / 2,
      j = Array.prototype.slice,
      l = {
    init: function (a) {
      if (/MSIE/.test(navigator.userAgent) && !window.opera) {
        var b = a || document;
        b.createElement("canvas"), b.attachEvent("onreadystatechange", k(this.init_, this, b));
      }
    },
    init_: function (a) {
      a.namespaces.g_vml_ || a.namespaces.add("g_vml_", "urn:schemas-microsoft-com:vml", "#default#VML"), a.namespaces.g_o_ || a.namespaces.add("g_o_", "urn:schemas-microsoft-com:office:office", "#default#VML");

      if (!a.styleSheets.ex_canvas_) {
        var b = a.createStyleSheet();
        b.owningElement.id = "ex_canvas_", b.cssText = "canvas{display:inline-block;overflow:hidden;text-align:left;width:300px;height:150px}g_vml_\\:*{behavior:url(#default#VML)}g_o_\\:*{behavior:url(#default#VML)}";
      }

      var c = a.getElementsByTagName("canvas"),
          d = 0;

      for (; d < c.length; d++) this.initElement(c[d]);
    },
    initElement: function (a) {
      if (!a.getContext) {
        a.getContext = i, a.innerHTML = "", a.attachEvent("onpropertychange", m), a.attachEvent("onresize", n);
        var b = a.attributes;
        b.width && b.width.specified ? a.style.width = b.width.nodeValue + "px" : a.width = a.clientWidth, b.height && b.height.specified ? a.style.height = b.height.nodeValue + "px" : a.height = a.clientHeight;
      }

      return a;
    }
  };
  l.init();
  var o = [],
      p = 0;

  for (; p < 16; p++) {
    var q = 0;

    for (; q < 16; q++) o[p * 16 + q] = p.toString(16) + q.toString(16);
  }

  var x = w.prototype;
  x.clearRect = function () {
    this.element_.innerHTML = "";
  }, x.beginPath = function () {
    this.currentPath_ = [];
  }, x.moveTo = function (a, b) {
    var c = this.getCoords_(a, b);
    this.currentPath_.push({
      type: "moveTo",
      x: c.x,
      y: c.y
    }), this.currentX_ = c.x, this.currentY_ = c.y;
  }, x.lineTo = function (a, b) {
    var c = this.getCoords_(a, b);
    this.currentPath_.push({
      type: "lineTo",
      x: c.x,
      y: c.y
    }), this.currentX_ = c.x, this.currentY_ = c.y;
  }, x.bezierCurveTo = function (a, b, c, d, e, f) {
    var g = this.getCoords_(e, f),
        h = this.getCoords_(a, b),
        i = this.getCoords_(c, d);
    y(this, h, i, g);
  }, x.quadraticCurveTo = function (a, b, c, d) {
    var e = this.getCoords_(a, b),
        f = this.getCoords_(c, d),
        g = {
      x: this.currentX_ + .6666666666666666 * (e.x - this.currentX_),
      y: this.currentY_ + .6666666666666666 * (e.y - this.currentY_)
    };
    y(this, g, {
      x: g.x + (f.x - this.currentX_) / 3,
      y: g.y + (f.y - this.currentY_) / 3
    }, f);
  }, x.arc = function (a, b, e, f, i, j) {
    e *= g;
    var k = j ? "at" : "wa",
        l = a + d(f) * e - h,
        m = b + c(f) * e - h,
        n = a + d(i) * e - h,
        o = b + c(i) * e - h;
    l == n && !j && (l += .125);
    var p = this.getCoords_(a, b),
        q = this.getCoords_(l, m),
        r = this.getCoords_(n, o);
    this.currentPath_.push({
      type: k,
      x: p.x,
      y: p.y,
      radius: e,
      xStart: q.x,
      yStart: q.y,
      xEnd: r.x,
      yEnd: r.y
    });
  }, x.rect = function (a, b, c, d) {
    this.moveTo(a, b), this.lineTo(a + c, b), this.lineTo(a + c, b + d), this.lineTo(a, b + d), this.closePath();
  }, x.strokeRect = function (a, b, c, d) {
    var e = this.currentPath_;
    this.beginPath(), this.moveTo(a, b), this.lineTo(a + c, b), this.lineTo(a + c, b + d), this.lineTo(a, b + d), this.closePath(), this.stroke(), this.currentPath_ = e;
  }, x.fillRect = function (a, b, c, d) {
    var e = this.currentPath_;
    this.beginPath(), this.moveTo(a, b), this.lineTo(a + c, b), this.lineTo(a + c, b + d), this.lineTo(a, b + d), this.closePath(), this.fill(), this.currentPath_ = e;
  }, x.createLinearGradient = function (a, b, c, d) {
    var e = new B("gradient");
    e.x0_ = a, e.y0_ = b, e.x1_ = c, e.y1_ = d;
    return e;
  }, x.createRadialGradient = function (a, b, c, d, e, f) {
    var g = new B("gradientradial");
    g.x0_ = a, g.y0_ = b, g.r0_ = c, g.x1_ = d, g.y1_ = e, g.r1_ = f;
    return g;
  }, x.drawImage = function (c) {
    var d,
        e,
        f,
        h,
        i,
        j,
        k,
        l,
        m = c.runtimeStyle.width,
        n = c.runtimeStyle.height;
    c.runtimeStyle.width = "auto", c.runtimeStyle.height = "auto";
    var o = c.width,
        p = c.height;
    c.runtimeStyle.width = m, c.runtimeStyle.height = n;
    if (arguments.length == 3) d = arguments[1], e = arguments[2], i = j = 0, k = f = o, l = h = p;else if (arguments.length == 5) d = arguments[1], e = arguments[2], f = arguments[3], h = arguments[4], i = j = 0, k = o, l = p;else if (arguments.length == 9) i = arguments[1], j = arguments[2], k = arguments[3], l = arguments[4], d = arguments[5], e = arguments[6], f = arguments[7], h = arguments[8];else throw Error("Invalid number of arguments");
    var q = this.getCoords_(d, e),
        r = [];
    r.push(" <g_vml_:group", ' coordsize="', g * 10, ",", g * 10, '"', ' coordorigin="0,0"', ' style="width:', 10, "px;height:", 10, "px;position:absolute;");

    if (this.m_[0][0] != 1 || this.m_[0][1]) {
      var s = [];
      s.push("M11=", this.m_[0][0], ",", "M12=", this.m_[1][0], ",", "M21=", this.m_[0][1], ",", "M22=", this.m_[1][1], ",", "Dx=", b(q.x / g), ",", "Dy=", b(q.y / g), "");
      var t = q,
          u = this.getCoords_(d + f, e),
          v = this.getCoords_(d, e + h),
          w = this.getCoords_(d + f, e + h);
      t.x = a.max(t.x, u.x, v.x, w.x), t.y = a.max(t.y, u.y, v.y, w.y), r.push("padding:0 ", b(t.x / g), "px ", b(t.y / g), "px 0;filter:progid:DXImageTransform.Microsoft.Matrix(", s.join(""), ", sizingmethod='clip');");
    } else r.push("top:", b(q.y / g), "px;left:", b(q.x / g), "px;");

    r.push(' ">', '<g_vml_:image src="', c.src, '"', ' style="width:', g * f, "px;", " height:", g * h, 'px;"', ' cropleft="', i / o, '"', ' croptop="', j / p, '"', ' cropright="', (o - i - k) / o, '"', ' cropbottom="', (p - j - l) / p, '"', " />", "</g_vml_:group>"), this.element_.insertAdjacentHTML("BeforeEnd", r.join(""));
  }, x.stroke = function (c) {
    var d = [],
        e = u(c ? this.fillStyle : this.strokeStyle),
        f = e.color,
        h = e.alpha * this.globalAlpha;
    d.push("<g_vml_:shape", ' filled="', !!c, '"', ' style="position:absolute;width:', 10, "px;height:", 10, 'px;"', ' coordorigin="0 0" coordsize="', g * 10, " ", g * 10, '"', ' stroked="', !c, '"', ' path="');
    var i = {
      x: null,
      y: null
    },
        j = {
      x: null,
      y: null
    },
        k = 0;

    for (; k < this.currentPath_.length; k++) {
      var l = this.currentPath_[k];

      switch (l.type) {
        case "moveTo":
          d.push(" m ", b(l.x), ",", b(l.y));
          break;

        case "lineTo":
          d.push(" l ", b(l.x), ",", b(l.y));
          break;

        case "close":
          d.push(" x "), l = null;
          break;

        case "bezierCurveTo":
          d.push(" c ", b(l.cp1x), ",", b(l.cp1y), ",", b(l.cp2x), ",", b(l.cp2y), ",", b(l.x), ",", b(l.y));
          break;

        case "at":
        case "wa":
          d.push(" ", l.type, " ", b(l.x - this.arcScaleX_ * l.radius), ",", b(l.y - this.arcScaleY_ * l.radius), " ", b(l.x + this.arcScaleX_ * l.radius), ",", b(l.y + this.arcScaleY_ * l.radius), " ", b(l.xStart), ",", b(l.yStart), " ", b(l.xEnd), ",", b(l.yEnd));
      }

      if (l) {
        if (i.x == null || l.x < i.x) i.x = l.x;
        if (j.x == null || l.x > j.x) j.x = l.x;
        if (i.y == null || l.y < i.y) i.y = l.y;
        if (j.y == null || l.y > j.y) j.y = l.y;
      }
    }

    d.push(' ">');
    if (c) {
      if (typeof this.fillStyle == "object") {
        var m = this.fillStyle,
            n = 0,
            o = {
          x: 0,
          y: 0
        },
            p = 0,
            q = 1;

        if (m.type_ == "gradient") {
          var r = m.x1_ / this.arcScaleX_,
              s = m.y1_ / this.arcScaleY_,
              t = this.getCoords_(m.x0_ / this.arcScaleX_, m.y0_ / this.arcScaleY_),
              w = this.getCoords_(r, s);
          n = Math.atan2(w.x - t.x, w.y - t.y) * 180 / Math.PI, n < 0 && (n += 360), n < 1e-6 && (n = 0);
        } else {
          var t = this.getCoords_(m.x0_, m.y0_),
              x = j.x - i.x,
              y = j.y - i.y;
          o = {
            x: (t.x - i.x) / x,
            y: (t.y - i.y) / y
          }, x /= this.arcScaleX_ * g, y /= this.arcScaleY_ * g;
          var z = a.max(x, y);
          p = 2 * m.r0_ / z, q = 2 * m.r1_ / z - p;
        }

        var A = m.colors_;
        A.sort(function (a, b) {
          return a.offset - b.offset;
        });
        var B = A.length,
            C = A[0].color,
            D = A[B - 1].color,
            E = A[0].alpha * this.globalAlpha,
            F = A[B - 1].alpha * this.globalAlpha,
            G = [],
            k = 0;

        for (; k < B; k++) {
          var H = A[k];
          G.push(H.offset * q + p + " " + H.color);
        }

        d.push('<g_vml_:fill type="', m.type_, '"', ' method="none" focus="100%"', ' color="', C, '"', ' color2="', D, '"', ' colors="', G.join(","), '"', ' opacity="', F, '"', ' g_o_:opacity2="', E, '"', ' angle="', n, '"', ' focusposition="', o.x, ",", o.y, '" />');
      } else d.push('<g_vml_:fill color="', f, '" opacity="', h, '" />');
    } else {
      var I = this.lineScale_ * this.lineWidth;
      I < 1 && (h *= I), d.push("<g_vml_:stroke", ' opacity="', h, '"', ' joinstyle="', this.lineJoin, '"', ' miterlimit="', this.miterLimit, '"', ' endcap="', v(this.lineCap), '"', ' weight="', I, 'px"', ' color="', f, '" />');
    }
    d.push("</g_vml_:shape>"), this.element_.insertAdjacentHTML("beforeEnd", d.join(""));
  }, x.fill = function () {
    this.stroke(!0);
  }, x.closePath = function () {
    this.currentPath_.push({
      type: "close"
    });
  }, x.getCoords_ = function (a, b) {
    var c = this.m_;
    return {
      x: g * (a * c[0][0] + b * c[1][0] + c[2][0]) - h,
      y: g * (a * c[0][1] + b * c[1][1] + c[2][1]) - h
    };
  }, x.save = function () {
    var a = {};
    t(this, a), this.aStack_.push(a), this.mStack_.push(this.m_), this.m_ = s(r(), this.m_);
  }, x.restore = function () {
    t(this.aStack_.pop(), this), this.m_ = this.mStack_.pop();
  }, x.translate = function (a, b) {
    A(this, s([[1, 0, 0], [0, 1, 0], [a, b, 1]], this.m_), !1);
  }, x.rotate = function (a) {
    var b = d(a),
        e = c(a);
    A(this, s([[b, e, 0], [-e, b, 0], [0, 0, 1]], this.m_), !1);
  }, x.scale = function (a, b) {
    this.arcScaleX_ *= a, this.arcScaleY_ *= b, A(this, s([[a, 0, 0], [0, b, 0], [0, 0, 1]], this.m_), !0);
  }, x.transform = function (a, b, c, d, e, f) {
    A(this, s([[a, b, 0], [c, d, 0], [e, f, 1]], this.m_), !0);
  }, x.setTransform = function (a, b, c, d, e, f) {
    A(this, [[a, b, 0], [c, d, 0], [e, f, 1]], !0);
  }, x.clip = function () {}, x.arcTo = function () {}, x.createPattern = function () {
    return new C();
  }, B.prototype.addColorStop = function (a, b) {
    b = u(b), this.colors_.push({
      offset: a,
      color: b.color,
      alpha: b.alpha
    });
  }, G_vmlCanvasManager = l, CanvasRenderingContext2D = w, CanvasGradient = B, CanvasPattern = C;
}();
/*! jQuery UI - v1.12.1 - 2016-09-14
* http://jqueryui.com
* Includes: widget.js, position.js, data.js, disable-selection.js, effect.js, effects/effect-blind.js, effects/effect-bounce.js, effects/effect-clip.js, effects/effect-drop.js, effects/effect-explode.js, effects/effect-fade.js, effects/effect-fold.js, effects/effect-highlight.js, effects/effect-puff.js, effects/effect-pulsate.js, effects/effect-scale.js, effects/effect-shake.js, effects/effect-size.js, effects/effect-slide.js, effects/effect-transfer.js, focusable.js, form-reset-mixin.js, jquery-1-7.js, keycode.js, labels.js, scroll-parent.js, tabbable.js, unique-id.js, widgets/accordion.js, widgets/autocomplete.js, widgets/button.js, widgets/checkboxradio.js, widgets/controlgroup.js, widgets/datepicker.js, widgets/dialog.js, widgets/draggable.js, widgets/droppable.js, widgets/menu.js, widgets/mouse.js, widgets/progressbar.js, widgets/resizable.js, widgets/selectable.js, widgets/selectmenu.js, widgets/slider.js, widgets/sortable.js, widgets/spinner.js, widgets/tabs.js, widgets/tooltip.js
* Copyright jQuery Foundation and other contributors; Licensed MIT */
(function (t) {
  "function" == typeof define && define.amd ? define(["jquery"], t) : t(jQuery);
})(function (t) {
  function e(t) {
    for (var e = t.css("visibility"); "inherit" === e;) t = t.parent(), e = t.css("visibility");

    return "hidden" !== e;
  }

  function i(t) {
    for (var e, i; t.length && t[0] !== document;) {
      if (e = t.css("position"), ("absolute" === e || "relative" === e || "fixed" === e) && (i = parseInt(t.css("zIndex"), 10), !isNaN(i) && 0 !== i)) return i;
      t = t.parent();
    }

    return 0;
  }

  function s() {
    this._curInst = null, this._keyEvent = !1, this._disabledInputs = [], this._datepickerShowing = !1, this._inDialog = !1, this._mainDivId = "ui-datepicker-div", this._inlineClass = "ui-datepicker-inline", this._appendClass = "ui-datepicker-append", this._triggerClass = "ui-datepicker-trigger", this._dialogClass = "ui-datepicker-dialog", this._disableClass = "ui-datepicker-disabled", this._unselectableClass = "ui-datepicker-unselectable", this._currentClass = "ui-datepicker-current-day", this._dayOverClass = "ui-datepicker-days-cell-over", this.regional = [], this.regional[""] = {
      closeText: "Done",
      prevText: "Prev",
      nextText: "Next",
      currentText: "Today",
      monthNames: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
      monthNamesShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
      dayNames: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
      dayNamesShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
      dayNamesMin: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
      weekHeader: "Wk",
      dateFormat: "mm/dd/yy",
      firstDay: 0,
      isRTL: !1,
      showMonthAfterYear: !1,
      yearSuffix: ""
    }, this._defaults = {
      showOn: "focus",
      showAnim: "fadeIn",
      showOptions: {},
      defaultDate: null,
      appendText: "",
      buttonText: "...",
      buttonImage: "",
      buttonImageOnly: !1,
      hideIfNoPrevNext: !1,
      navigationAsDateFormat: !1,
      gotoCurrent: !1,
      changeMonth: !1,
      changeYear: !1,
      yearRange: "c-10:c+10",
      showOtherMonths: !1,
      selectOtherMonths: !1,
      showWeek: !1,
      calculateWeek: this.iso8601Week,
      shortYearCutoff: "+10",
      minDate: null,
      maxDate: null,
      duration: "fast",
      beforeShowDay: null,
      beforeShow: null,
      onSelect: null,
      onChangeMonthYear: null,
      onClose: null,
      numberOfMonths: 1,
      showCurrentAtPos: 0,
      stepMonths: 1,
      stepBigMonths: 12,
      altField: "",
      altFormat: "",
      constrainInput: !0,
      showButtonPanel: !1,
      autoSize: !1,
      disabled: !1
    }, t.extend(this._defaults, this.regional[""]), this.regional.en = t.extend(!0, {}, this.regional[""]), this.regional["en-US"] = t.extend(!0, {}, this.regional.en), this.dpDiv = n(t("<div id='" + this._mainDivId + "' class='ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>"));
  }

  function n(e) {
    var i = "button, .ui-datepicker-prev, .ui-datepicker-next, .ui-datepicker-calendar td a";
    return e.on("mouseout", i, function () {
      t(this).removeClass("ui-state-hover"), -1 !== this.className.indexOf("ui-datepicker-prev") && t(this).removeClass("ui-datepicker-prev-hover"), -1 !== this.className.indexOf("ui-datepicker-next") && t(this).removeClass("ui-datepicker-next-hover");
    }).on("mouseover", i, o);
  }

  function o() {
    t.datepicker._isDisabledDatepicker(m.inline ? m.dpDiv.parent()[0] : m.input[0]) || (t(this).parents(".ui-datepicker-calendar").find("a").removeClass("ui-state-hover"), t(this).addClass("ui-state-hover"), -1 !== this.className.indexOf("ui-datepicker-prev") && t(this).addClass("ui-datepicker-prev-hover"), -1 !== this.className.indexOf("ui-datepicker-next") && t(this).addClass("ui-datepicker-next-hover"));
  }

  function a(e, i) {
    t.extend(e, i);

    for (var s in i) null == i[s] && (e[s] = i[s]);

    return e;
  }

  function r(t) {
    return function () {
      var e = this.element.val();
      t.apply(this, arguments), this._refresh(), e !== this.element.val() && this._trigger("change");
    };
  }

  t.ui = t.ui || {}, t.ui.version = "1.12.1";
  var h = 0,
      l = Array.prototype.slice;
  t.cleanData = function (e) {
    return function (i) {
      var s, n, o;

      for (o = 0; null != (n = i[o]); o++) try {
        s = t._data(n, "events"), s && s.remove && t(n).triggerHandler("remove");
      } catch (a) {}

      e(i);
    };
  }(t.cleanData), t.widget = function (e, i, s) {
    var n,
        o,
        a,
        r = {},
        h = e.split(".")[0];
    e = e.split(".")[1];
    var l = h + "-" + e;
    return s || (s = i, i = t.Widget), t.isArray(s) && (s = t.extend.apply(null, [{}].concat(s))), t.expr[":"][l.toLowerCase()] = function (e) {
      return !!t.data(e, l);
    }, t[h] = t[h] || {}, n = t[h][e], o = t[h][e] = function (t, e) {
      return this._createWidget ? (arguments.length && this._createWidget(t, e), void 0) : new o(t, e);
    }, t.extend(o, n, {
      version: s.version,
      _proto: t.extend({}, s),
      _childConstructors: []
    }), a = new i(), a.options = t.widget.extend({}, a.options), t.each(s, function (e, s) {
      return t.isFunction(s) ? (r[e] = function () {
        function t() {
          return i.prototype[e].apply(this, arguments);
        }

        function n(t) {
          return i.prototype[e].apply(this, t);
        }

        return function () {
          var e,
              i = this._super,
              o = this._superApply;
          return this._super = t, this._superApply = n, e = s.apply(this, arguments), this._super = i, this._superApply = o, e;
        };
      }(), void 0) : (r[e] = s, void 0);
    }), o.prototype = t.widget.extend(a, {
      widgetEventPrefix: n ? a.widgetEventPrefix || e : e
    }, r, {
      constructor: o,
      namespace: h,
      widgetName: e,
      widgetFullName: l
    }), n ? (t.each(n._childConstructors, function (e, i) {
      var s = i.prototype;
      t.widget(s.namespace + "." + s.widgetName, o, i._proto);
    }), delete n._childConstructors) : i._childConstructors.push(o), t.widget.bridge(e, o), o;
  }, t.widget.extend = function (e) {
    for (var i, s, n = l.call(arguments, 1), o = 0, a = n.length; a > o; o++) for (i in n[o]) s = n[o][i], n[o].hasOwnProperty(i) && void 0 !== s && (e[i] = t.isPlainObject(s) ? t.isPlainObject(e[i]) ? t.widget.extend({}, e[i], s) : t.widget.extend({}, s) : s);

    return e;
  }, t.widget.bridge = function (e, i) {
    var s = i.prototype.widgetFullName || e;

    t.fn[e] = function (n) {
      var o = "string" == typeof n,
          a = l.call(arguments, 1),
          r = this;
      return o ? this.length || "instance" !== n ? this.each(function () {
        var i,
            o = t.data(this, s);
        return "instance" === n ? (r = o, !1) : o ? t.isFunction(o[n]) && "_" !== n.charAt(0) ? (i = o[n].apply(o, a), i !== o && void 0 !== i ? (r = i && i.jquery ? r.pushStack(i.get()) : i, !1) : void 0) : t.error("no such method '" + n + "' for " + e + " widget instance") : t.error("cannot call methods on " + e + " prior to initialization; " + "attempted to call method '" + n + "'");
      }) : r = void 0 : (a.length && (n = t.widget.extend.apply(null, [n].concat(a))), this.each(function () {
        var e = t.data(this, s);
        e ? (e.option(n || {}), e._init && e._init()) : t.data(this, s, new i(n, this));
      })), r;
    };
  }, t.Widget = function () {}, t.Widget._childConstructors = [], t.Widget.prototype = {
    widgetName: "widget",
    widgetEventPrefix: "",
    defaultElement: "<div>",
    options: {
      classes: {},
      disabled: !1,
      create: null
    },
    _createWidget: function (e, i) {
      i = t(i || this.defaultElement || this)[0], this.element = t(i), this.uuid = h++, this.eventNamespace = "." + this.widgetName + this.uuid, this.bindings = t(), this.hoverable = t(), this.focusable = t(), this.classesElementLookup = {}, i !== this && (t.data(i, this.widgetFullName, this), this._on(!0, this.element, {
        remove: function (t) {
          t.target === i && this.destroy();
        }
      }), this.document = t(i.style ? i.ownerDocument : i.document || i), this.window = t(this.document[0].defaultView || this.document[0].parentWindow)), this.options = t.widget.extend({}, this.options, this._getCreateOptions(), e), this._create(), this.options.disabled && this._setOptionDisabled(this.options.disabled), this._trigger("create", null, this._getCreateEventData()), this._init();
    },
    _getCreateOptions: function () {
      return {};
    },
    _getCreateEventData: t.noop,
    _create: t.noop,
    _init: t.noop,
    destroy: function () {
      var e = this;
      this._destroy(), t.each(this.classesElementLookup, function (t, i) {
        e._removeClass(i, t);
      }), this.element.off(this.eventNamespace).removeData(this.widgetFullName), this.widget().off(this.eventNamespace).removeAttr("aria-disabled"), this.bindings.off(this.eventNamespace);
    },
    _destroy: t.noop,
    widget: function () {
      return this.element;
    },
    option: function (e, i) {
      var s,
          n,
          o,
          a = e;
      if (0 === arguments.length) return t.widget.extend({}, this.options);
      if ("string" == typeof e) if (a = {}, s = e.split("."), e = s.shift(), s.length) {
        for (n = a[e] = t.widget.extend({}, this.options[e]), o = 0; s.length - 1 > o; o++) n[s[o]] = n[s[o]] || {}, n = n[s[o]];

        if (e = s.pop(), 1 === arguments.length) return void 0 === n[e] ? null : n[e];
        n[e] = i;
      } else {
        if (1 === arguments.length) return void 0 === this.options[e] ? null : this.options[e];
        a[e] = i;
      }
      return this._setOptions(a), this;
    },
    _setOptions: function (t) {
      var e;

      for (e in t) this._setOption(e, t[e]);

      return this;
    },
    _setOption: function (t, e) {
      return "classes" === t && this._setOptionClasses(e), this.options[t] = e, "disabled" === t && this._setOptionDisabled(e), this;
    },
    _setOptionClasses: function (e) {
      var i, s, n;

      for (i in e) n = this.classesElementLookup[i], e[i] !== this.options.classes[i] && n && n.length && (s = t(n.get()), this._removeClass(n, i), s.addClass(this._classes({
        element: s,
        keys: i,
        classes: e,
        add: !0
      })));
    },
    _setOptionDisabled: function (t) {
      this._toggleClass(this.widget(), this.widgetFullName + "-disabled", null, !!t), t && (this._removeClass(this.hoverable, null, "ui-state-hover"), this._removeClass(this.focusable, null, "ui-state-focus"));
    },
    enable: function () {
      return this._setOptions({
        disabled: !1
      });
    },
    disable: function () {
      return this._setOptions({
        disabled: !0
      });
    },
    _classes: function (e) {
      function i(i, o) {
        var a, r;

        for (r = 0; i.length > r; r++) a = n.classesElementLookup[i[r]] || t(), a = e.add ? t(t.unique(a.get().concat(e.element.get()))) : t(a.not(e.element).get()), n.classesElementLookup[i[r]] = a, s.push(i[r]), o && e.classes[i[r]] && s.push(e.classes[i[r]]);
      }

      var s = [],
          n = this;
      return e = t.extend({
        element: this.element,
        classes: this.options.classes || {}
      }, e), this._on(e.element, {
        remove: "_untrackClassesElement"
      }), e.keys && i(e.keys.match(/\S+/g) || [], !0), e.extra && i(e.extra.match(/\S+/g) || []), s.join(" ");
    },
    _untrackClassesElement: function (e) {
      var i = this;
      t.each(i.classesElementLookup, function (s, n) {
        -1 !== t.inArray(e.target, n) && (i.classesElementLookup[s] = t(n.not(e.target).get()));
      });
    },
    _removeClass: function (t, e, i) {
      return this._toggleClass(t, e, i, !1);
    },
    _addClass: function (t, e, i) {
      return this._toggleClass(t, e, i, !0);
    },
    _toggleClass: function (t, e, i, s) {
      s = "boolean" == typeof s ? s : i;
      var n = "string" == typeof t || null === t,
          o = {
        extra: n ? e : i,
        keys: n ? t : e,
        element: n ? this.element : t,
        add: s
      };
      return o.element.toggleClass(this._classes(o), s), this;
    },
    _on: function (e, i, s) {
      var n,
          o = this;
      "boolean" != typeof e && (s = i, i = e, e = !1), s ? (i = n = t(i), this.bindings = this.bindings.add(i)) : (s = i, i = this.element, n = this.widget()), t.each(s, function (s, a) {
        function r() {
          return e || o.options.disabled !== !0 && !t(this).hasClass("ui-state-disabled") ? ("string" == typeof a ? o[a] : a).apply(o, arguments) : void 0;
        }

        "string" != typeof a && (r.guid = a.guid = a.guid || r.guid || t.guid++);
        var h = s.match(/^([\w:-]*)\s*(.*)$/),
            l = h[1] + o.eventNamespace,
            c = h[2];
        c ? n.on(l, c, r) : i.on(l, r);
      });
    },
    _off: function (e, i) {
      i = (i || "").split(" ").join(this.eventNamespace + " ") + this.eventNamespace, e.off(i).off(i), this.bindings = t(this.bindings.not(e).get()), this.focusable = t(this.focusable.not(e).get()), this.hoverable = t(this.hoverable.not(e).get());
    },
    _delay: function (t, e) {
      function i() {
        return ("string" == typeof t ? s[t] : t).apply(s, arguments);
      }

      var s = this;
      return setTimeout(i, e || 0);
    },
    _hoverable: function (e) {
      this.hoverable = this.hoverable.add(e), this._on(e, {
        mouseenter: function (e) {
          this._addClass(t(e.currentTarget), null, "ui-state-hover");
        },
        mouseleave: function (e) {
          this._removeClass(t(e.currentTarget), null, "ui-state-hover");
        }
      });
    },
    _focusable: function (e) {
      this.focusable = this.focusable.add(e), this._on(e, {
        focusin: function (e) {
          this._addClass(t(e.currentTarget), null, "ui-state-focus");
        },
        focusout: function (e) {
          this._removeClass(t(e.currentTarget), null, "ui-state-focus");
        }
      });
    },
    _trigger: function (e, i, s) {
      var n,
          o,
          a = this.options[e];
      if (s = s || {}, i = t.Event(i), i.type = (e === this.widgetEventPrefix ? e : this.widgetEventPrefix + e).toLowerCase(), i.target = this.element[0], o = i.originalEvent) for (n in o) n in i || (i[n] = o[n]);
      return this.element.trigger(i, s), !(t.isFunction(a) && a.apply(this.element[0], [i].concat(s)) === !1 || i.isDefaultPrevented());
    }
  }, t.each({
    show: "fadeIn",
    hide: "fadeOut"
  }, function (e, i) {
    t.Widget.prototype["_" + e] = function (s, n, o) {
      "string" == typeof n && (n = {
        effect: n
      });
      var a,
          r = n ? n === !0 || "number" == typeof n ? i : n.effect || i : e;
      n = n || {}, "number" == typeof n && (n = {
        duration: n
      }), a = !t.isEmptyObject(n), n.complete = o, n.delay && s.delay(n.delay), a && t.effects && t.effects.effect[r] ? s[e](n) : r !== e && s[r] ? s[r](n.duration, n.easing, o) : s.queue(function (i) {
        t(this)[e](), o && o.call(s[0]), i();
      });
    };
  }), t.widget, function () {
    function e(t, e, i) {
      return [parseFloat(t[0]) * (u.test(t[0]) ? e / 100 : 1), parseFloat(t[1]) * (u.test(t[1]) ? i / 100 : 1)];
    }

    function i(e, i) {
      return parseInt(t.css(e, i), 10) || 0;
    }

    function s(e) {
      var i = e[0];
      return 9 === i.nodeType ? {
        width: e.width(),
        height: e.height(),
        offset: {
          top: 0,
          left: 0
        }
      } : t.isWindow(i) ? {
        width: e.width(),
        height: e.height(),
        offset: {
          top: e.scrollTop(),
          left: e.scrollLeft()
        }
      } : i.preventDefault ? {
        width: 0,
        height: 0,
        offset: {
          top: i.pageY,
          left: i.pageX
        }
      } : {
        width: e.outerWidth(),
        height: e.outerHeight(),
        offset: e.offset()
      };
    }

    var n,
        o = Math.max,
        a = Math.abs,
        r = /left|center|right/,
        h = /top|center|bottom/,
        l = /[\+\-]\d+(\.[\d]+)?%?/,
        c = /^\w+/,
        u = /%$/,
        d = t.fn.position;
    t.position = {
      scrollbarWidth: function () {
        if (void 0 !== n) return n;
        var e,
            i,
            s = t("<div style='display:block;position:absolute;width:50px;height:50px;overflow:hidden;'><div style='height:100px;width:auto;'></div></div>"),
            o = s.children()[0];
        return t("body").append(s), e = o.offsetWidth, s.css("overflow", "scroll"), i = o.offsetWidth, e === i && (i = s[0].clientWidth), s.remove(), n = e - i;
      },
      getScrollInfo: function (e) {
        var i = e.isWindow || e.isDocument ? "" : e.element.css("overflow-x"),
            s = e.isWindow || e.isDocument ? "" : e.element.css("overflow-y"),
            n = "scroll" === i || "auto" === i && e.width < e.element[0].scrollWidth,
            o = "scroll" === s || "auto" === s && e.height < e.element[0].scrollHeight;
        return {
          width: o ? t.position.scrollbarWidth() : 0,
          height: n ? t.position.scrollbarWidth() : 0
        };
      },
      getWithinInfo: function (e) {
        var i = t(e || window),
            s = t.isWindow(i[0]),
            n = !!i[0] && 9 === i[0].nodeType,
            o = !s && !n;
        return {
          element: i,
          isWindow: s,
          isDocument: n,
          offset: o ? t(e).offset() : {
            left: 0,
            top: 0
          },
          scrollLeft: i.scrollLeft(),
          scrollTop: i.scrollTop(),
          width: i.outerWidth(),
          height: i.outerHeight()
        };
      }
    }, t.fn.position = function (n) {
      if (!n || !n.of) return d.apply(this, arguments);
      n = t.extend({}, n);

      var u,
          p,
          f,
          g,
          m,
          _,
          v = t(n.of),
          b = t.position.getWithinInfo(n.within),
          y = t.position.getScrollInfo(b),
          w = (n.collision || "flip").split(" "),
          k = {};

      return _ = s(v), v[0].preventDefault && (n.at = "left top"), p = _.width, f = _.height, g = _.offset, m = t.extend({}, g), t.each(["my", "at"], function () {
        var t,
            e,
            i = (n[this] || "").split(" ");
        1 === i.length && (i = r.test(i[0]) ? i.concat(["center"]) : h.test(i[0]) ? ["center"].concat(i) : ["center", "center"]), i[0] = r.test(i[0]) ? i[0] : "center", i[1] = h.test(i[1]) ? i[1] : "center", t = l.exec(i[0]), e = l.exec(i[1]), k[this] = [t ? t[0] : 0, e ? e[0] : 0], n[this] = [c.exec(i[0])[0], c.exec(i[1])[0]];
      }), 1 === w.length && (w[1] = w[0]), "right" === n.at[0] ? m.left += p : "center" === n.at[0] && (m.left += p / 2), "bottom" === n.at[1] ? m.top += f : "center" === n.at[1] && (m.top += f / 2), u = e(k.at, p, f), m.left += u[0], m.top += u[1], this.each(function () {
        var s,
            r,
            h = t(this),
            l = h.outerWidth(),
            c = h.outerHeight(),
            d = i(this, "marginLeft"),
            _ = i(this, "marginTop"),
            x = l + d + i(this, "marginRight") + y.width,
            C = c + _ + i(this, "marginBottom") + y.height,
            D = t.extend({}, m),
            I = e(k.my, h.outerWidth(), h.outerHeight());

        "right" === n.my[0] ? D.left -= l : "center" === n.my[0] && (D.left -= l / 2), "bottom" === n.my[1] ? D.top -= c : "center" === n.my[1] && (D.top -= c / 2), D.left += I[0], D.top += I[1], s = {
          marginLeft: d,
          marginTop: _
        }, t.each(["left", "top"], function (e, i) {
          t.ui.position[w[e]] && t.ui.position[w[e]][i](D, {
            targetWidth: p,
            targetHeight: f,
            elemWidth: l,
            elemHeight: c,
            collisionPosition: s,
            collisionWidth: x,
            collisionHeight: C,
            offset: [u[0] + I[0], u[1] + I[1]],
            my: n.my,
            at: n.at,
            within: b,
            elem: h
          });
        }), n.using && (r = function (t) {
          var e = g.left - D.left,
              i = e + p - l,
              s = g.top - D.top,
              r = s + f - c,
              u = {
            target: {
              element: v,
              left: g.left,
              top: g.top,
              width: p,
              height: f
            },
            element: {
              element: h,
              left: D.left,
              top: D.top,
              width: l,
              height: c
            },
            horizontal: 0 > i ? "left" : e > 0 ? "right" : "center",
            vertical: 0 > r ? "top" : s > 0 ? "bottom" : "middle"
          };
          l > p && p > a(e + i) && (u.horizontal = "center"), c > f && f > a(s + r) && (u.vertical = "middle"), u.important = o(a(e), a(i)) > o(a(s), a(r)) ? "horizontal" : "vertical", n.using.call(this, t, u);
        }), h.offset(t.extend(D, {
          using: r
        }));
      });
    }, t.ui.position = {
      fit: {
        left: function (t, e) {
          var i,
              s = e.within,
              n = s.isWindow ? s.scrollLeft : s.offset.left,
              a = s.width,
              r = t.left - e.collisionPosition.marginLeft,
              h = n - r,
              l = r + e.collisionWidth - a - n;
          e.collisionWidth > a ? h > 0 && 0 >= l ? (i = t.left + h + e.collisionWidth - a - n, t.left += h - i) : t.left = l > 0 && 0 >= h ? n : h > l ? n + a - e.collisionWidth : n : h > 0 ? t.left += h : l > 0 ? t.left -= l : t.left = o(t.left - r, t.left);
        },
        top: function (t, e) {
          var i,
              s = e.within,
              n = s.isWindow ? s.scrollTop : s.offset.top,
              a = e.within.height,
              r = t.top - e.collisionPosition.marginTop,
              h = n - r,
              l = r + e.collisionHeight - a - n;
          e.collisionHeight > a ? h > 0 && 0 >= l ? (i = t.top + h + e.collisionHeight - a - n, t.top += h - i) : t.top = l > 0 && 0 >= h ? n : h > l ? n + a - e.collisionHeight : n : h > 0 ? t.top += h : l > 0 ? t.top -= l : t.top = o(t.top - r, t.top);
        }
      },
      flip: {
        left: function (t, e) {
          var i,
              s,
              n = e.within,
              o = n.offset.left + n.scrollLeft,
              r = n.width,
              h = n.isWindow ? n.scrollLeft : n.offset.left,
              l = t.left - e.collisionPosition.marginLeft,
              c = l - h,
              u = l + e.collisionWidth - r - h,
              d = "left" === e.my[0] ? -e.elemWidth : "right" === e.my[0] ? e.elemWidth : 0,
              p = "left" === e.at[0] ? e.targetWidth : "right" === e.at[0] ? -e.targetWidth : 0,
              f = -2 * e.offset[0];
          0 > c ? (i = t.left + d + p + f + e.collisionWidth - r - o, (0 > i || a(c) > i) && (t.left += d + p + f)) : u > 0 && (s = t.left - e.collisionPosition.marginLeft + d + p + f - h, (s > 0 || u > a(s)) && (t.left += d + p + f));
        },
        top: function (t, e) {
          var i,
              s,
              n = e.within,
              o = n.offset.top + n.scrollTop,
              r = n.height,
              h = n.isWindow ? n.scrollTop : n.offset.top,
              l = t.top - e.collisionPosition.marginTop,
              c = l - h,
              u = l + e.collisionHeight - r - h,
              d = "top" === e.my[1],
              p = d ? -e.elemHeight : "bottom" === e.my[1] ? e.elemHeight : 0,
              f = "top" === e.at[1] ? e.targetHeight : "bottom" === e.at[1] ? -e.targetHeight : 0,
              g = -2 * e.offset[1];
          0 > c ? (s = t.top + p + f + g + e.collisionHeight - r - o, (0 > s || a(c) > s) && (t.top += p + f + g)) : u > 0 && (i = t.top - e.collisionPosition.marginTop + p + f + g - h, (i > 0 || u > a(i)) && (t.top += p + f + g));
        }
      },
      flipfit: {
        left: function () {
          t.ui.position.flip.left.apply(this, arguments), t.ui.position.fit.left.apply(this, arguments);
        },
        top: function () {
          t.ui.position.flip.top.apply(this, arguments), t.ui.position.fit.top.apply(this, arguments);
        }
      }
    };
  }(), t.ui.position, t.extend(t.expr[":"], {
    data: t.expr.createPseudo ? t.expr.createPseudo(function (e) {
      return function (i) {
        return !!t.data(i, e);
      };
    }) : function (e, i, s) {
      return !!t.data(e, s[3]);
    }
  }), t.fn.extend({
    disableSelection: function () {
      var t = "onselectstart" in document.createElement("div") ? "selectstart" : "mousedown";
      return function () {
        return this.on(t + ".ui-disableSelection", function (t) {
          t.preventDefault();
        });
      };
    }(),
    enableSelection: function () {
      return this.off(".ui-disableSelection");
    }
  });
  var c = "ui-effects-",
      u = "ui-effects-style",
      d = "ui-effects-animated",
      p = t;
  t.effects = {
    effect: {}
  }, function (t, e) {
    function i(t, e, i) {
      var s = u[e.type] || {};
      return null == t ? i || !e.def ? null : e.def : (t = s.floor ? ~~t : parseFloat(t), isNaN(t) ? e.def : s.mod ? (t + s.mod) % s.mod : 0 > t ? 0 : t > s.max ? s.max : t);
    }

    function s(i) {
      var s = l(),
          n = s._rgba = [];
      return i = i.toLowerCase(), f(h, function (t, o) {
        var a,
            r = o.re.exec(i),
            h = r && o.parse(r),
            l = o.space || "rgba";
        return h ? (a = s[l](h), s[c[l].cache] = a[c[l].cache], n = s._rgba = a._rgba, !1) : e;
      }), n.length ? ("0,0,0,0" === n.join() && t.extend(n, o.transparent), s) : o[i];
    }

    function n(t, e, i) {
      return i = (i + 1) % 1, 1 > 6 * i ? t + 6 * (e - t) * i : 1 > 2 * i ? e : 2 > 3 * i ? t + 6 * (e - t) * (2 / 3 - i) : t;
    }

    var o,
        a = "backgroundColor borderBottomColor borderLeftColor borderRightColor borderTopColor color columnRuleColor outlineColor textDecorationColor textEmphasisColor",
        r = /^([\-+])=\s*(\d+\.?\d*)/,
        h = [{
      re: /rgba?\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,
      parse: function (t) {
        return [t[1], t[2], t[3], t[4]];
      }
    }, {
      re: /rgba?\(\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,
      parse: function (t) {
        return [2.55 * t[1], 2.55 * t[2], 2.55 * t[3], t[4]];
      }
    }, {
      re: /#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})/,
      parse: function (t) {
        return [parseInt(t[1], 16), parseInt(t[2], 16), parseInt(t[3], 16)];
      }
    }, {
      re: /#([a-f0-9])([a-f0-9])([a-f0-9])/,
      parse: function (t) {
        return [parseInt(t[1] + t[1], 16), parseInt(t[2] + t[2], 16), parseInt(t[3] + t[3], 16)];
      }
    }, {
      re: /hsla?\(\s*(\d+(?:\.\d+)?)\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,
      space: "hsla",
      parse: function (t) {
        return [t[1], t[2] / 100, t[3] / 100, t[4]];
      }
    }],
        l = t.Color = function (e, i, s, n) {
      return new t.Color.fn.parse(e, i, s, n);
    },
        c = {
      rgba: {
        props: {
          red: {
            idx: 0,
            type: "byte"
          },
          green: {
            idx: 1,
            type: "byte"
          },
          blue: {
            idx: 2,
            type: "byte"
          }
        }
      },
      hsla: {
        props: {
          hue: {
            idx: 0,
            type: "degrees"
          },
          saturation: {
            idx: 1,
            type: "percent"
          },
          lightness: {
            idx: 2,
            type: "percent"
          }
        }
      }
    },
        u = {
      "byte": {
        floor: !0,
        max: 255
      },
      percent: {
        max: 1
      },
      degrees: {
        mod: 360,
        floor: !0
      }
    },
        d = l.support = {},
        p = t("<p>")[0],
        f = t.each;

    p.style.cssText = "background-color:rgba(1,1,1,.5)", d.rgba = p.style.backgroundColor.indexOf("rgba") > -1, f(c, function (t, e) {
      e.cache = "_" + t, e.props.alpha = {
        idx: 3,
        type: "percent",
        def: 1
      };
    }), l.fn = t.extend(l.prototype, {
      parse: function (n, a, r, h) {
        if (n === e) return this._rgba = [null, null, null, null], this;
        (n.jquery || n.nodeType) && (n = t(n).css(a), a = e);
        var u = this,
            d = t.type(n),
            p = this._rgba = [];
        return a !== e && (n = [n, a, r, h], d = "array"), "string" === d ? this.parse(s(n) || o._default) : "array" === d ? (f(c.rgba.props, function (t, e) {
          p[e.idx] = i(n[e.idx], e);
        }), this) : "object" === d ? (n instanceof l ? f(c, function (t, e) {
          n[e.cache] && (u[e.cache] = n[e.cache].slice());
        }) : f(c, function (e, s) {
          var o = s.cache;
          f(s.props, function (t, e) {
            if (!u[o] && s.to) {
              if ("alpha" === t || null == n[t]) return;
              u[o] = s.to(u._rgba);
            }

            u[o][e.idx] = i(n[t], e, !0);
          }), u[o] && 0 > t.inArray(null, u[o].slice(0, 3)) && (u[o][3] = 1, s.from && (u._rgba = s.from(u[o])));
        }), this) : e;
      },
      is: function (t) {
        var i = l(t),
            s = !0,
            n = this;
        return f(c, function (t, o) {
          var a,
              r = i[o.cache];
          return r && (a = n[o.cache] || o.to && o.to(n._rgba) || [], f(o.props, function (t, i) {
            return null != r[i.idx] ? s = r[i.idx] === a[i.idx] : e;
          })), s;
        }), s;
      },
      _space: function () {
        var t = [],
            e = this;
        return f(c, function (i, s) {
          e[s.cache] && t.push(i);
        }), t.pop();
      },
      transition: function (t, e) {
        var s = l(t),
            n = s._space(),
            o = c[n],
            a = 0 === this.alpha() ? l("transparent") : this,
            r = a[o.cache] || o.to(a._rgba),
            h = r.slice();

        return s = s[o.cache], f(o.props, function (t, n) {
          var o = n.idx,
              a = r[o],
              l = s[o],
              c = u[n.type] || {};
          null !== l && (null === a ? h[o] = l : (c.mod && (l - a > c.mod / 2 ? a += c.mod : a - l > c.mod / 2 && (a -= c.mod)), h[o] = i((l - a) * e + a, n)));
        }), this[n](h);
      },
      blend: function (e) {
        if (1 === this._rgba[3]) return this;

        var i = this._rgba.slice(),
            s = i.pop(),
            n = l(e)._rgba;

        return l(t.map(i, function (t, e) {
          return (1 - s) * n[e] + s * t;
        }));
      },
      toRgbaString: function () {
        var e = "rgba(",
            i = t.map(this._rgba, function (t, e) {
          return null == t ? e > 2 ? 1 : 0 : t;
        });
        return 1 === i[3] && (i.pop(), e = "rgb("), e + i.join() + ")";
      },
      toHslaString: function () {
        var e = "hsla(",
            i = t.map(this.hsla(), function (t, e) {
          return null == t && (t = e > 2 ? 1 : 0), e && 3 > e && (t = Math.round(100 * t) + "%"), t;
        });
        return 1 === i[3] && (i.pop(), e = "hsl("), e + i.join() + ")";
      },
      toHexString: function (e) {
        var i = this._rgba.slice(),
            s = i.pop();

        return e && i.push(~~(255 * s)), "#" + t.map(i, function (t) {
          return t = (t || 0).toString(16), 1 === t.length ? "0" + t : t;
        }).join("");
      },
      toString: function () {
        return 0 === this._rgba[3] ? "transparent" : this.toRgbaString();
      }
    }), l.fn.parse.prototype = l.fn, c.hsla.to = function (t) {
      if (null == t[0] || null == t[1] || null == t[2]) return [null, null, null, t[3]];
      var e,
          i,
          s = t[0] / 255,
          n = t[1] / 255,
          o = t[2] / 255,
          a = t[3],
          r = Math.max(s, n, o),
          h = Math.min(s, n, o),
          l = r - h,
          c = r + h,
          u = .5 * c;
      return e = h === r ? 0 : s === r ? 60 * (n - o) / l + 360 : n === r ? 60 * (o - s) / l + 120 : 60 * (s - n) / l + 240, i = 0 === l ? 0 : .5 >= u ? l / c : l / (2 - c), [Math.round(e) % 360, i, u, null == a ? 1 : a];
    }, c.hsla.from = function (t) {
      if (null == t[0] || null == t[1] || null == t[2]) return [null, null, null, t[3]];
      var e = t[0] / 360,
          i = t[1],
          s = t[2],
          o = t[3],
          a = .5 >= s ? s * (1 + i) : s + i - s * i,
          r = 2 * s - a;
      return [Math.round(255 * n(r, a, e + 1 / 3)), Math.round(255 * n(r, a, e)), Math.round(255 * n(r, a, e - 1 / 3)), o];
    }, f(c, function (s, n) {
      var o = n.props,
          a = n.cache,
          h = n.to,
          c = n.from;
      l.fn[s] = function (s) {
        if (h && !this[a] && (this[a] = h(this._rgba)), s === e) return this[a].slice();
        var n,
            r = t.type(s),
            u = "array" === r || "object" === r ? s : arguments,
            d = this[a].slice();
        return f(o, function (t, e) {
          var s = u["object" === r ? t : e.idx];
          null == s && (s = d[e.idx]), d[e.idx] = i(s, e);
        }), c ? (n = l(c(d)), n[a] = d, n) : l(d);
      }, f(o, function (e, i) {
        l.fn[e] || (l.fn[e] = function (n) {
          var o,
              a = t.type(n),
              h = "alpha" === e ? this._hsla ? "hsla" : "rgba" : s,
              l = this[h](),
              c = l[i.idx];
          return "undefined" === a ? c : ("function" === a && (n = n.call(this, c), a = t.type(n)), null == n && i.empty ? this : ("string" === a && (o = r.exec(n), o && (n = c + parseFloat(o[2]) * ("+" === o[1] ? 1 : -1))), l[i.idx] = n, this[h](l)));
        });
      });
    }), l.hook = function (e) {
      var i = e.split(" ");
      f(i, function (e, i) {
        t.cssHooks[i] = {
          set: function (e, n) {
            var o,
                a,
                r = "";

            if ("transparent" !== n && ("string" !== t.type(n) || (o = s(n)))) {
              if (n = l(o || n), !d.rgba && 1 !== n._rgba[3]) {
                for (a = "backgroundColor" === i ? e.parentNode : e; ("" === r || "transparent" === r) && a && a.style;) try {
                  r = t.css(a, "backgroundColor"), a = a.parentNode;
                } catch (h) {}

                n = n.blend(r && "transparent" !== r ? r : "_default");
              }

              n = n.toRgbaString();
            }

            try {
              e.style[i] = n;
            } catch (h) {}
          }
        }, t.fx.step[i] = function (e) {
          e.colorInit || (e.start = l(e.elem, i), e.end = l(e.end), e.colorInit = !0), t.cssHooks[i].set(e.elem, e.start.transition(e.end, e.pos));
        };
      });
    }, l.hook(a), t.cssHooks.borderColor = {
      expand: function (t) {
        var e = {};
        return f(["Top", "Right", "Bottom", "Left"], function (i, s) {
          e["border" + s + "Color"] = t;
        }), e;
      }
    }, o = t.Color.names = {
      aqua: "#00ffff",
      black: "#000000",
      blue: "#0000ff",
      fuchsia: "#ff00ff",
      gray: "#808080",
      green: "#008000",
      lime: "#00ff00",
      maroon: "#800000",
      navy: "#000080",
      olive: "#808000",
      purple: "#800080",
      red: "#ff0000",
      silver: "#c0c0c0",
      teal: "#008080",
      white: "#ffffff",
      yellow: "#ffff00",
      transparent: [null, null, null, 0],
      _default: "#ffffff"
    };
  }(p), function () {
    function e(e) {
      var i,
          s,
          n = e.ownerDocument.defaultView ? e.ownerDocument.defaultView.getComputedStyle(e, null) : e.currentStyle,
          o = {};
      if (n && n.length && n[0] && n[n[0]]) for (s = n.length; s--;) i = n[s], "string" == typeof n[i] && (o[t.camelCase(i)] = n[i]);else for (i in n) "string" == typeof n[i] && (o[i] = n[i]);
      return o;
    }

    function i(e, i) {
      var s,
          o,
          a = {};

      for (s in i) o = i[s], e[s] !== o && (n[s] || (t.fx.step[s] || !isNaN(parseFloat(o))) && (a[s] = o));

      return a;
    }

    var s = ["add", "remove", "toggle"],
        n = {
      border: 1,
      borderBottom: 1,
      borderColor: 1,
      borderLeft: 1,
      borderRight: 1,
      borderTop: 1,
      borderWidth: 1,
      margin: 1,
      padding: 1
    };
    t.each(["borderLeftStyle", "borderRightStyle", "borderBottomStyle", "borderTopStyle"], function (e, i) {
      t.fx.step[i] = function (t) {
        ("none" !== t.end && !t.setAttr || 1 === t.pos && !t.setAttr) && (p.style(t.elem, i, t.end), t.setAttr = !0);
      };
    }), t.fn.addBack || (t.fn.addBack = function (t) {
      return this.add(null == t ? this.prevObject : this.prevObject.filter(t));
    }), t.effects.animateClass = function (n, o, a, r) {
      var h = t.speed(o, a, r);
      return this.queue(function () {
        var o,
            a = t(this),
            r = a.attr("class") || "",
            l = h.children ? a.find("*").addBack() : a;
        l = l.map(function () {
          var i = t(this);
          return {
            el: i,
            start: e(this)
          };
        }), o = function () {
          t.each(s, function (t, e) {
            n[e] && a[e + "Class"](n[e]);
          });
        }, o(), l = l.map(function () {
          return this.end = e(this.el[0]), this.diff = i(this.start, this.end), this;
        }), a.attr("class", r), l = l.map(function () {
          var e = this,
              i = t.Deferred(),
              s = t.extend({}, h, {
            queue: !1,
            complete: function () {
              i.resolve(e);
            }
          });
          return this.el.animate(this.diff, s), i.promise();
        }), t.when.apply(t, l.get()).done(function () {
          o(), t.each(arguments, function () {
            var e = this.el;
            t.each(this.diff, function (t) {
              e.css(t, "");
            });
          }), h.complete.call(a[0]);
        });
      });
    }, t.fn.extend({
      addClass: function (e) {
        return function (i, s, n, o) {
          return s ? t.effects.animateClass.call(this, {
            add: i
          }, s, n, o) : e.apply(this, arguments);
        };
      }(t.fn.addClass),
      removeClass: function (e) {
        return function (i, s, n, o) {
          return arguments.length > 1 ? t.effects.animateClass.call(this, {
            remove: i
          }, s, n, o) : e.apply(this, arguments);
        };
      }(t.fn.removeClass),
      toggleClass: function (e) {
        return function (i, s, n, o, a) {
          return "boolean" == typeof s || void 0 === s ? n ? t.effects.animateClass.call(this, s ? {
            add: i
          } : {
            remove: i
          }, n, o, a) : e.apply(this, arguments) : t.effects.animateClass.call(this, {
            toggle: i
          }, s, n, o);
        };
      }(t.fn.toggleClass),
      switchClass: function (e, i, s, n, o) {
        return t.effects.animateClass.call(this, {
          add: i,
          remove: e
        }, s, n, o);
      }
    });
  }(), function () {
    function e(e, i, s, n) {
      return t.isPlainObject(e) && (i = e, e = e.effect), e = {
        effect: e
      }, null == i && (i = {}), t.isFunction(i) && (n = i, s = null, i = {}), ("number" == typeof i || t.fx.speeds[i]) && (n = s, s = i, i = {}), t.isFunction(s) && (n = s, s = null), i && t.extend(e, i), s = s || i.duration, e.duration = t.fx.off ? 0 : "number" == typeof s ? s : s in t.fx.speeds ? t.fx.speeds[s] : t.fx.speeds._default, e.complete = n || i.complete, e;
    }

    function i(e) {
      return !e || "number" == typeof e || t.fx.speeds[e] ? !0 : "string" != typeof e || t.effects.effect[e] ? t.isFunction(e) ? !0 : "object" != typeof e || e.effect ? !1 : !0 : !0;
    }

    function s(t, e) {
      var i = e.outerWidth(),
          s = e.outerHeight(),
          n = /^rect\((-?\d*\.?\d*px|-?\d+%|auto),?\s*(-?\d*\.?\d*px|-?\d+%|auto),?\s*(-?\d*\.?\d*px|-?\d+%|auto),?\s*(-?\d*\.?\d*px|-?\d+%|auto)\)$/,
          o = n.exec(t) || ["", 0, i, s, 0];
      return {
        top: parseFloat(o[1]) || 0,
        right: "auto" === o[2] ? i : parseFloat(o[2]),
        bottom: "auto" === o[3] ? s : parseFloat(o[3]),
        left: parseFloat(o[4]) || 0
      };
    }

    t.expr && t.expr.filters && t.expr.filters.animated && (t.expr.filters.animated = function (e) {
      return function (i) {
        return !!t(i).data(d) || e(i);
      };
    }(t.expr.filters.animated)), t.uiBackCompat !== !1 && t.extend(t.effects, {
      save: function (t, e) {
        for (var i = 0, s = e.length; s > i; i++) null !== e[i] && t.data(c + e[i], t[0].style[e[i]]);
      },
      restore: function (t, e) {
        for (var i, s = 0, n = e.length; n > s; s++) null !== e[s] && (i = t.data(c + e[s]), t.css(e[s], i));
      },
      setMode: function (t, e) {
        return "toggle" === e && (e = t.is(":hidden") ? "show" : "hide"), e;
      },
      createWrapper: function (e) {
        if (e.parent().is(".ui-effects-wrapper")) return e.parent();
        var i = {
          width: e.outerWidth(!0),
          height: e.outerHeight(!0),
          "float": e.css("float")
        },
            s = t("<div></div>").addClass("ui-effects-wrapper").css({
          fontSize: "100%",
          background: "transparent",
          border: "none",
          margin: 0,
          padding: 0
        }),
            n = {
          width: e.width(),
          height: e.height()
        },
            o = document.activeElement;

        try {
          o.id;
        } catch (a) {
          o = document.body;
        }

        return e.wrap(s), (e[0] === o || t.contains(e[0], o)) && t(o).trigger("focus"), s = e.parent(), "static" === e.css("position") ? (s.css({
          position: "relative"
        }), e.css({
          position: "relative"
        })) : (t.extend(i, {
          position: e.css("position"),
          zIndex: e.css("z-index")
        }), t.each(["top", "left", "bottom", "right"], function (t, s) {
          i[s] = e.css(s), isNaN(parseInt(i[s], 10)) && (i[s] = "auto");
        }), e.css({
          position: "relative",
          top: 0,
          left: 0,
          right: "auto",
          bottom: "auto"
        })), e.css(n), s.css(i).show();
      },
      removeWrapper: function (e) {
        var i = document.activeElement;
        return e.parent().is(".ui-effects-wrapper") && (e.parent().replaceWith(e), (e[0] === i || t.contains(e[0], i)) && t(i).trigger("focus")), e;
      }
    }), t.extend(t.effects, {
      version: "1.12.1",
      define: function (e, i, s) {
        return s || (s = i, i = "effect"), t.effects.effect[e] = s, t.effects.effect[e].mode = i, s;
      },
      scaledDimensions: function (t, e, i) {
        if (0 === e) return {
          height: 0,
          width: 0,
          outerHeight: 0,
          outerWidth: 0
        };
        var s = "horizontal" !== i ? (e || 100) / 100 : 1,
            n = "vertical" !== i ? (e || 100) / 100 : 1;
        return {
          height: t.height() * n,
          width: t.width() * s,
          outerHeight: t.outerHeight() * n,
          outerWidth: t.outerWidth() * s
        };
      },
      clipToBox: function (t) {
        return {
          width: t.clip.right - t.clip.left,
          height: t.clip.bottom - t.clip.top,
          left: t.clip.left,
          top: t.clip.top
        };
      },
      unshift: function (t, e, i) {
        var s = t.queue();
        e > 1 && s.splice.apply(s, [1, 0].concat(s.splice(e, i))), t.dequeue();
      },
      saveStyle: function (t) {
        t.data(u, t[0].style.cssText);
      },
      restoreStyle: function (t) {
        t[0].style.cssText = t.data(u) || "", t.removeData(u);
      },
      mode: function (t, e) {
        var i = t.is(":hidden");
        return "toggle" === e && (e = i ? "show" : "hide"), (i ? "hide" === e : "show" === e) && (e = "none"), e;
      },
      getBaseline: function (t, e) {
        var i, s;

        switch (t[0]) {
          case "top":
            i = 0;
            break;

          case "middle":
            i = .5;
            break;

          case "bottom":
            i = 1;
            break;

          default:
            i = t[0] / e.height;
        }

        switch (t[1]) {
          case "left":
            s = 0;
            break;

          case "center":
            s = .5;
            break;

          case "right":
            s = 1;
            break;

          default:
            s = t[1] / e.width;
        }

        return {
          x: s,
          y: i
        };
      },
      createPlaceholder: function (e) {
        var i,
            s = e.css("position"),
            n = e.position();
        return e.css({
          marginTop: e.css("marginTop"),
          marginBottom: e.css("marginBottom"),
          marginLeft: e.css("marginLeft"),
          marginRight: e.css("marginRight")
        }).outerWidth(e.outerWidth()).outerHeight(e.outerHeight()), /^(static|relative)/.test(s) && (s = "absolute", i = t("<" + e[0].nodeName + ">").insertAfter(e).css({
          display: /^(inline|ruby)/.test(e.css("display")) ? "inline-block" : "block",
          visibility: "hidden",
          marginTop: e.css("marginTop"),
          marginBottom: e.css("marginBottom"),
          marginLeft: e.css("marginLeft"),
          marginRight: e.css("marginRight"),
          "float": e.css("float")
        }).outerWidth(e.outerWidth()).outerHeight(e.outerHeight()).addClass("ui-effects-placeholder"), e.data(c + "placeholder", i)), e.css({
          position: s,
          left: n.left,
          top: n.top
        }), i;
      },
      removePlaceholder: function (t) {
        var e = c + "placeholder",
            i = t.data(e);
        i && (i.remove(), t.removeData(e));
      },
      cleanUp: function (e) {
        t.effects.restoreStyle(e), t.effects.removePlaceholder(e);
      },
      setTransition: function (e, i, s, n) {
        return n = n || {}, t.each(i, function (t, i) {
          var o = e.cssUnit(i);
          o[0] > 0 && (n[i] = o[0] * s + o[1]);
        }), n;
      }
    }), t.fn.extend({
      effect: function () {
        function i(e) {
          function i() {
            r.removeData(d), t.effects.cleanUp(r), "hide" === s.mode && r.hide(), a();
          }

          function a() {
            t.isFunction(h) && h.call(r[0]), t.isFunction(e) && e();
          }

          var r = t(this);
          s.mode = c.shift(), t.uiBackCompat === !1 || o ? "none" === s.mode ? (r[l](), a()) : n.call(r[0], s, i) : (r.is(":hidden") ? "hide" === l : "show" === l) ? (r[l](), a()) : n.call(r[0], s, a);
        }

        var s = e.apply(this, arguments),
            n = t.effects.effect[s.effect],
            o = n.mode,
            a = s.queue,
            r = a || "fx",
            h = s.complete,
            l = s.mode,
            c = [],
            u = function (e) {
          var i = t(this),
              s = t.effects.mode(i, l) || o;
          i.data(d, !0), c.push(s), o && ("show" === s || s === o && "hide" === s) && i.show(), o && "none" === s || t.effects.saveStyle(i), t.isFunction(e) && e();
        };

        return t.fx.off || !n ? l ? this[l](s.duration, h) : this.each(function () {
          h && h.call(this);
        }) : a === !1 ? this.each(u).each(i) : this.queue(r, u).queue(r, i);
      },
      show: function (t) {
        return function (s) {
          if (i(s)) return t.apply(this, arguments);
          var n = e.apply(this, arguments);
          return n.mode = "show", this.effect.call(this, n);
        };
      }(t.fn.show),
      hide: function (t) {
        return function (s) {
          if (i(s)) return t.apply(this, arguments);
          var n = e.apply(this, arguments);
          return n.mode = "hide", this.effect.call(this, n);
        };
      }(t.fn.hide),
      toggle: function (t) {
        return function (s) {
          if (i(s) || "boolean" == typeof s) return t.apply(this, arguments);
          var n = e.apply(this, arguments);
          return n.mode = "toggle", this.effect.call(this, n);
        };
      }(t.fn.toggle),
      cssUnit: function (e) {
        var i = this.css(e),
            s = [];
        return t.each(["em", "px", "%", "pt"], function (t, e) {
          i.indexOf(e) > 0 && (s = [parseFloat(i), e]);
        }), s;
      },
      cssClip: function (t) {
        return t ? this.css("clip", "rect(" + t.top + "px " + t.right + "px " + t.bottom + "px " + t.left + "px)") : s(this.css("clip"), this);
      },
      transfer: function (e, i) {
        var s = t(this),
            n = t(e.to),
            o = "fixed" === n.css("position"),
            a = t("body"),
            r = o ? a.scrollTop() : 0,
            h = o ? a.scrollLeft() : 0,
            l = n.offset(),
            c = {
          top: l.top - r,
          left: l.left - h,
          height: n.innerHeight(),
          width: n.innerWidth()
        },
            u = s.offset(),
            d = t("<div class='ui-effects-transfer'></div>").appendTo("body").addClass(e.className).css({
          top: u.top - r,
          left: u.left - h,
          height: s.innerHeight(),
          width: s.innerWidth(),
          position: o ? "fixed" : "absolute"
        }).animate(c, e.duration, e.easing, function () {
          d.remove(), t.isFunction(i) && i();
        });
      }
    }), t.fx.step.clip = function (e) {
      e.clipInit || (e.start = t(e.elem).cssClip(), "string" == typeof e.end && (e.end = s(e.end, e.elem)), e.clipInit = !0), t(e.elem).cssClip({
        top: e.pos * (e.end.top - e.start.top) + e.start.top,
        right: e.pos * (e.end.right - e.start.right) + e.start.right,
        bottom: e.pos * (e.end.bottom - e.start.bottom) + e.start.bottom,
        left: e.pos * (e.end.left - e.start.left) + e.start.left
      });
    };
  }(), function () {
    var e = {};
    t.each(["Quad", "Cubic", "Quart", "Quint", "Expo"], function (t, i) {
      e[i] = function (e) {
        return Math.pow(e, t + 2);
      };
    }), t.extend(e, {
      Sine: function (t) {
        return 1 - Math.cos(t * Math.PI / 2);
      },
      Circ: function (t) {
        return 1 - Math.sqrt(1 - t * t);
      },
      Elastic: function (t) {
        return 0 === t || 1 === t ? t : -Math.pow(2, 8 * (t - 1)) * Math.sin((80 * (t - 1) - 7.5) * Math.PI / 15);
      },
      Back: function (t) {
        return t * t * (3 * t - 2);
      },
      Bounce: function (t) {
        for (var e, i = 4; ((e = Math.pow(2, --i)) - 1) / 11 > t;);

        return 1 / Math.pow(4, 3 - i) - 7.5625 * Math.pow((3 * e - 2) / 22 - t, 2);
      }
    }), t.each(e, function (e, i) {
      t.easing["easeIn" + e] = i, t.easing["easeOut" + e] = function (t) {
        return 1 - i(1 - t);
      }, t.easing["easeInOut" + e] = function (t) {
        return .5 > t ? i(2 * t) / 2 : 1 - i(-2 * t + 2) / 2;
      };
    });
  }();
  var f = t.effects;
  t.effects.define("blind", "hide", function (e, i) {
    var s = {
      up: ["bottom", "top"],
      vertical: ["bottom", "top"],
      down: ["top", "bottom"],
      left: ["right", "left"],
      horizontal: ["right", "left"],
      right: ["left", "right"]
    },
        n = t(this),
        o = e.direction || "up",
        a = n.cssClip(),
        r = {
      clip: t.extend({}, a)
    },
        h = t.effects.createPlaceholder(n);
    r.clip[s[o][0]] = r.clip[s[o][1]], "show" === e.mode && (n.cssClip(r.clip), h && h.css(t.effects.clipToBox(r)), r.clip = a), h && h.animate(t.effects.clipToBox(r), e.duration, e.easing), n.animate(r, {
      queue: !1,
      duration: e.duration,
      easing: e.easing,
      complete: i
    });
  }), t.effects.define("bounce", function (e, i) {
    var s,
        n,
        o,
        a = t(this),
        r = e.mode,
        h = "hide" === r,
        l = "show" === r,
        c = e.direction || "up",
        u = e.distance,
        d = e.times || 5,
        p = 2 * d + (l || h ? 1 : 0),
        f = e.duration / p,
        g = e.easing,
        m = "up" === c || "down" === c ? "top" : "left",
        _ = "up" === c || "left" === c,
        v = 0,
        b = a.queue().length;

    for (t.effects.createPlaceholder(a), o = a.css(m), u || (u = a["top" === m ? "outerHeight" : "outerWidth"]() / 3), l && (n = {
      opacity: 1
    }, n[m] = o, a.css("opacity", 0).css(m, _ ? 2 * -u : 2 * u).animate(n, f, g)), h && (u /= Math.pow(2, d - 1)), n = {}, n[m] = o; d > v; v++) s = {}, s[m] = (_ ? "-=" : "+=") + u, a.animate(s, f, g).animate(n, f, g), u = h ? 2 * u : u / 2;

    h && (s = {
      opacity: 0
    }, s[m] = (_ ? "-=" : "+=") + u, a.animate(s, f, g)), a.queue(i), t.effects.unshift(a, b, p + 1);
  }), t.effects.define("clip", "hide", function (e, i) {
    var s,
        n = {},
        o = t(this),
        a = e.direction || "vertical",
        r = "both" === a,
        h = r || "horizontal" === a,
        l = r || "vertical" === a;
    s = o.cssClip(), n.clip = {
      top: l ? (s.bottom - s.top) / 2 : s.top,
      right: h ? (s.right - s.left) / 2 : s.right,
      bottom: l ? (s.bottom - s.top) / 2 : s.bottom,
      left: h ? (s.right - s.left) / 2 : s.left
    }, t.effects.createPlaceholder(o), "show" === e.mode && (o.cssClip(n.clip), n.clip = s), o.animate(n, {
      queue: !1,
      duration: e.duration,
      easing: e.easing,
      complete: i
    });
  }), t.effects.define("drop", "hide", function (e, i) {
    var s,
        n = t(this),
        o = e.mode,
        a = "show" === o,
        r = e.direction || "left",
        h = "up" === r || "down" === r ? "top" : "left",
        l = "up" === r || "left" === r ? "-=" : "+=",
        c = "+=" === l ? "-=" : "+=",
        u = {
      opacity: 0
    };
    t.effects.createPlaceholder(n), s = e.distance || n["top" === h ? "outerHeight" : "outerWidth"](!0) / 2, u[h] = l + s, a && (n.css(u), u[h] = c + s, u.opacity = 1), n.animate(u, {
      queue: !1,
      duration: e.duration,
      easing: e.easing,
      complete: i
    });
  }), t.effects.define("explode", "hide", function (e, i) {
    function s() {
      b.push(this), b.length === u * d && n();
    }

    function n() {
      p.css({
        visibility: "visible"
      }), t(b).remove(), i();
    }

    var o,
        a,
        r,
        h,
        l,
        c,
        u = e.pieces ? Math.round(Math.sqrt(e.pieces)) : 3,
        d = u,
        p = t(this),
        f = e.mode,
        g = "show" === f,
        m = p.show().css("visibility", "hidden").offset(),
        _ = Math.ceil(p.outerWidth() / d),
        v = Math.ceil(p.outerHeight() / u),
        b = [];

    for (o = 0; u > o; o++) for (h = m.top + o * v, c = o - (u - 1) / 2, a = 0; d > a; a++) r = m.left + a * _, l = a - (d - 1) / 2, p.clone().appendTo("body").wrap("<div></div>").css({
      position: "absolute",
      visibility: "visible",
      left: -a * _,
      top: -o * v
    }).parent().addClass("ui-effects-explode").css({
      position: "absolute",
      overflow: "hidden",
      width: _,
      height: v,
      left: r + (g ? l * _ : 0),
      top: h + (g ? c * v : 0),
      opacity: g ? 0 : 1
    }).animate({
      left: r + (g ? 0 : l * _),
      top: h + (g ? 0 : c * v),
      opacity: g ? 1 : 0
    }, e.duration || 500, e.easing, s);
  }), t.effects.define("fade", "toggle", function (e, i) {
    var s = "show" === e.mode;
    t(this).css("opacity", s ? 0 : 1).animate({
      opacity: s ? 1 : 0
    }, {
      queue: !1,
      duration: e.duration,
      easing: e.easing,
      complete: i
    });
  }), t.effects.define("fold", "hide", function (e, i) {
    var s = t(this),
        n = e.mode,
        o = "show" === n,
        a = "hide" === n,
        r = e.size || 15,
        h = /([0-9]+)%/.exec(r),
        l = !!e.horizFirst,
        c = l ? ["right", "bottom"] : ["bottom", "right"],
        u = e.duration / 2,
        d = t.effects.createPlaceholder(s),
        p = s.cssClip(),
        f = {
      clip: t.extend({}, p)
    },
        g = {
      clip: t.extend({}, p)
    },
        m = [p[c[0]], p[c[1]]],
        _ = s.queue().length;
    h && (r = parseInt(h[1], 10) / 100 * m[a ? 0 : 1]), f.clip[c[0]] = r, g.clip[c[0]] = r, g.clip[c[1]] = 0, o && (s.cssClip(g.clip), d && d.css(t.effects.clipToBox(g)), g.clip = p), s.queue(function (i) {
      d && d.animate(t.effects.clipToBox(f), u, e.easing).animate(t.effects.clipToBox(g), u, e.easing), i();
    }).animate(f, u, e.easing).animate(g, u, e.easing).queue(i), t.effects.unshift(s, _, 4);
  }), t.effects.define("highlight", "show", function (e, i) {
    var s = t(this),
        n = {
      backgroundColor: s.css("backgroundColor")
    };
    "hide" === e.mode && (n.opacity = 0), t.effects.saveStyle(s), s.css({
      backgroundImage: "none",
      backgroundColor: e.color || "#ffff99"
    }).animate(n, {
      queue: !1,
      duration: e.duration,
      easing: e.easing,
      complete: i
    });
  }), t.effects.define("size", function (e, i) {
    var s,
        n,
        o,
        a = t(this),
        r = ["fontSize"],
        h = ["borderTopWidth", "borderBottomWidth", "paddingTop", "paddingBottom"],
        l = ["borderLeftWidth", "borderRightWidth", "paddingLeft", "paddingRight"],
        c = e.mode,
        u = "effect" !== c,
        d = e.scale || "both",
        p = e.origin || ["middle", "center"],
        f = a.css("position"),
        g = a.position(),
        m = t.effects.scaledDimensions(a),
        _ = e.from || m,
        v = e.to || t.effects.scaledDimensions(a, 0);

    t.effects.createPlaceholder(a), "show" === c && (o = _, _ = v, v = o), n = {
      from: {
        y: _.height / m.height,
        x: _.width / m.width
      },
      to: {
        y: v.height / m.height,
        x: v.width / m.width
      }
    }, ("box" === d || "both" === d) && (n.from.y !== n.to.y && (_ = t.effects.setTransition(a, h, n.from.y, _), v = t.effects.setTransition(a, h, n.to.y, v)), n.from.x !== n.to.x && (_ = t.effects.setTransition(a, l, n.from.x, _), v = t.effects.setTransition(a, l, n.to.x, v))), ("content" === d || "both" === d) && n.from.y !== n.to.y && (_ = t.effects.setTransition(a, r, n.from.y, _), v = t.effects.setTransition(a, r, n.to.y, v)), p && (s = t.effects.getBaseline(p, m), _.top = (m.outerHeight - _.outerHeight) * s.y + g.top, _.left = (m.outerWidth - _.outerWidth) * s.x + g.left, v.top = (m.outerHeight - v.outerHeight) * s.y + g.top, v.left = (m.outerWidth - v.outerWidth) * s.x + g.left), a.css(_), ("content" === d || "both" === d) && (h = h.concat(["marginTop", "marginBottom"]).concat(r), l = l.concat(["marginLeft", "marginRight"]), a.find("*[width]").each(function () {
      var i = t(this),
          s = t.effects.scaledDimensions(i),
          o = {
        height: s.height * n.from.y,
        width: s.width * n.from.x,
        outerHeight: s.outerHeight * n.from.y,
        outerWidth: s.outerWidth * n.from.x
      },
          a = {
        height: s.height * n.to.y,
        width: s.width * n.to.x,
        outerHeight: s.height * n.to.y,
        outerWidth: s.width * n.to.x
      };
      n.from.y !== n.to.y && (o = t.effects.setTransition(i, h, n.from.y, o), a = t.effects.setTransition(i, h, n.to.y, a)), n.from.x !== n.to.x && (o = t.effects.setTransition(i, l, n.from.x, o), a = t.effects.setTransition(i, l, n.to.x, a)), u && t.effects.saveStyle(i), i.css(o), i.animate(a, e.duration, e.easing, function () {
        u && t.effects.restoreStyle(i);
      });
    })), a.animate(v, {
      queue: !1,
      duration: e.duration,
      easing: e.easing,
      complete: function () {
        var e = a.offset();
        0 === v.opacity && a.css("opacity", _.opacity), u || (a.css("position", "static" === f ? "relative" : f).offset(e), t.effects.saveStyle(a)), i();
      }
    });
  }), t.effects.define("scale", function (e, i) {
    var s = t(this),
        n = e.mode,
        o = parseInt(e.percent, 10) || (0 === parseInt(e.percent, 10) ? 0 : "effect" !== n ? 0 : 100),
        a = t.extend(!0, {
      from: t.effects.scaledDimensions(s),
      to: t.effects.scaledDimensions(s, o, e.direction || "both"),
      origin: e.origin || ["middle", "center"]
    }, e);
    e.fade && (a.from.opacity = 1, a.to.opacity = 0), t.effects.effect.size.call(this, a, i);
  }), t.effects.define("puff", "hide", function (e, i) {
    var s = t.extend(!0, {}, e, {
      fade: !0,
      percent: parseInt(e.percent, 10) || 150
    });
    t.effects.effect.scale.call(this, s, i);
  }), t.effects.define("pulsate", "show", function (e, i) {
    var s = t(this),
        n = e.mode,
        o = "show" === n,
        a = "hide" === n,
        r = o || a,
        h = 2 * (e.times || 5) + (r ? 1 : 0),
        l = e.duration / h,
        c = 0,
        u = 1,
        d = s.queue().length;

    for ((o || !s.is(":visible")) && (s.css("opacity", 0).show(), c = 1); h > u; u++) s.animate({
      opacity: c
    }, l, e.easing), c = 1 - c;

    s.animate({
      opacity: c
    }, l, e.easing), s.queue(i), t.effects.unshift(s, d, h + 1);
  }), t.effects.define("shake", function (e, i) {
    var s = 1,
        n = t(this),
        o = e.direction || "left",
        a = e.distance || 20,
        r = e.times || 3,
        h = 2 * r + 1,
        l = Math.round(e.duration / h),
        c = "up" === o || "down" === o ? "top" : "left",
        u = "up" === o || "left" === o,
        d = {},
        p = {},
        f = {},
        g = n.queue().length;

    for (t.effects.createPlaceholder(n), d[c] = (u ? "-=" : "+=") + a, p[c] = (u ? "+=" : "-=") + 2 * a, f[c] = (u ? "-=" : "+=") + 2 * a, n.animate(d, l, e.easing); r > s; s++) n.animate(p, l, e.easing).animate(f, l, e.easing);

    n.animate(p, l, e.easing).animate(d, l / 2, e.easing).queue(i), t.effects.unshift(n, g, h + 1);
  }), t.effects.define("slide", "show", function (e, i) {
    var s,
        n,
        o = t(this),
        a = {
      up: ["bottom", "top"],
      down: ["top", "bottom"],
      left: ["right", "left"],
      right: ["left", "right"]
    },
        r = e.mode,
        h = e.direction || "left",
        l = "up" === h || "down" === h ? "top" : "left",
        c = "up" === h || "left" === h,
        u = e.distance || o["top" === l ? "outerHeight" : "outerWidth"](!0),
        d = {};
    t.effects.createPlaceholder(o), s = o.cssClip(), n = o.position()[l], d[l] = (c ? -1 : 1) * u + n, d.clip = o.cssClip(), d.clip[a[h][1]] = d.clip[a[h][0]], "show" === r && (o.cssClip(d.clip), o.css(l, d[l]), d.clip = s, d[l] = n), o.animate(d, {
      queue: !1,
      duration: e.duration,
      easing: e.easing,
      complete: i
    });
  });
  var f;
  t.uiBackCompat !== !1 && (f = t.effects.define("transfer", function (e, i) {
    t(this).transfer(e, i);
  })), t.ui.focusable = function (i, s) {
    var n,
        o,
        a,
        r,
        h,
        l = i.nodeName.toLowerCase();
    return "area" === l ? (n = i.parentNode, o = n.name, i.href && o && "map" === n.nodeName.toLowerCase() ? (a = t("img[usemap='#" + o + "']"), a.length > 0 && a.is(":visible")) : !1) : (/^(input|select|textarea|button|object)$/.test(l) ? (r = !i.disabled, r && (h = t(i).closest("fieldset")[0], h && (r = !h.disabled))) : r = "a" === l ? i.href || s : s, r && t(i).is(":visible") && e(t(i)));
  }, t.extend(t.expr[":"], {
    focusable: function (e) {
      return t.ui.focusable(e, null != t.attr(e, "tabindex"));
    }
  }), t.ui.focusable, t.fn.form = function () {
    return "string" == typeof this[0].form ? this.closest("form") : t(this[0].form);
  }, t.ui.formResetMixin = {
    _formResetHandler: function () {
      var e = t(this);
      setTimeout(function () {
        var i = e.data("ui-form-reset-instances");
        t.each(i, function () {
          this.refresh();
        });
      });
    },
    _bindFormResetHandler: function () {
      if (this.form = this.element.form(), this.form.length) {
        var t = this.form.data("ui-form-reset-instances") || [];
        t.length || this.form.on("reset.ui-form-reset", this._formResetHandler), t.push(this), this.form.data("ui-form-reset-instances", t);
      }
    },
    _unbindFormResetHandler: function () {
      if (this.form.length) {
        var e = this.form.data("ui-form-reset-instances");
        e.splice(t.inArray(this, e), 1), e.length ? this.form.data("ui-form-reset-instances", e) : this.form.removeData("ui-form-reset-instances").off("reset.ui-form-reset");
      }
    }
  }, "1.7" === t.fn.jquery.substring(0, 3) && (t.each(["Width", "Height"], function (e, i) {
    function s(e, i, s, o) {
      return t.each(n, function () {
        i -= parseFloat(t.css(e, "padding" + this)) || 0, s && (i -= parseFloat(t.css(e, "border" + this + "Width")) || 0), o && (i -= parseFloat(t.css(e, "margin" + this)) || 0);
      }), i;
    }

    var n = "Width" === i ? ["Left", "Right"] : ["Top", "Bottom"],
        o = i.toLowerCase(),
        a = {
      innerWidth: t.fn.innerWidth,
      innerHeight: t.fn.innerHeight,
      outerWidth: t.fn.outerWidth,
      outerHeight: t.fn.outerHeight
    };
    t.fn["inner" + i] = function (e) {
      return void 0 === e ? a["inner" + i].call(this) : this.each(function () {
        t(this).css(o, s(this, e) + "px");
      });
    }, t.fn["outer" + i] = function (e, n) {
      return "number" != typeof e ? a["outer" + i].call(this, e) : this.each(function () {
        t(this).css(o, s(this, e, !0, n) + "px");
      });
    };
  }), t.fn.addBack = function (t) {
    return this.add(null == t ? this.prevObject : this.prevObject.filter(t));
  }), t.ui.keyCode = {
    BACKSPACE: 8,
    COMMA: 188,
    DELETE: 46,
    DOWN: 40,
    END: 35,
    ENTER: 13,
    ESCAPE: 27,
    HOME: 36,
    LEFT: 37,
    PAGE_DOWN: 34,
    PAGE_UP: 33,
    PERIOD: 190,
    RIGHT: 39,
    SPACE: 32,
    TAB: 9,
    UP: 38
  }, t.ui.escapeSelector = function () {
    var t = /([!"#$%&'()*+,.\/:;<=>?@[\]^`{|}~])/g;
    return function (e) {
      return e.replace(t, "\\$1");
    };
  }(), t.fn.labels = function () {
    var e, i, s, n, o;
    return this[0].labels && this[0].labels.length ? this.pushStack(this[0].labels) : (n = this.eq(0).parents("label"), s = this.attr("id"), s && (e = this.eq(0).parents().last(), o = e.add(e.length ? e.siblings() : this.siblings()), i = "label[for='" + t.ui.escapeSelector(s) + "']", n = n.add(o.find(i).addBack(i))), this.pushStack(n));
  }, t.fn.scrollParent = function (e) {
    var i = this.css("position"),
        s = "absolute" === i,
        n = e ? /(auto|scroll|hidden)/ : /(auto|scroll)/,
        o = this.parents().filter(function () {
      var e = t(this);
      return s && "static" === e.css("position") ? !1 : n.test(e.css("overflow") + e.css("overflow-y") + e.css("overflow-x"));
    }).eq(0);
    return "fixed" !== i && o.length ? o : t(this[0].ownerDocument || document);
  }, t.extend(t.expr[":"], {
    tabbable: function (e) {
      var i = t.attr(e, "tabindex"),
          s = null != i;
      return (!s || i >= 0) && t.ui.focusable(e, s);
    }
  }), t.fn.extend({
    uniqueId: function () {
      var t = 0;
      return function () {
        return this.each(function () {
          this.id || (this.id = "ui-id-" + ++t);
        });
      };
    }(),
    removeUniqueId: function () {
      return this.each(function () {
        /^ui-id-\d+$/.test(this.id) && t(this).removeAttr("id");
      });
    }
  }), t.widget("ui.accordion", {
    version: "1.12.1",
    options: {
      active: 0,
      animate: {},
      classes: {
        "ui-accordion-header": "ui-corner-top",
        "ui-accordion-header-collapsed": "ui-corner-all",
        "ui-accordion-content": "ui-corner-bottom"
      },
      collapsible: !1,
      event: "click",
      header: "> li > :first-child, > :not(li):even",
      heightStyle: "auto",
      icons: {
        activeHeader: "ui-icon-triangle-1-s",
        header: "ui-icon-triangle-1-e"
      },
      activate: null,
      beforeActivate: null
    },
    hideProps: {
      borderTopWidth: "hide",
      borderBottomWidth: "hide",
      paddingTop: "hide",
      paddingBottom: "hide",
      height: "hide"
    },
    showProps: {
      borderTopWidth: "show",
      borderBottomWidth: "show",
      paddingTop: "show",
      paddingBottom: "show",
      height: "show"
    },
    _create: function () {
      var e = this.options;
      this.prevShow = this.prevHide = t(), this._addClass("ui-accordion", "ui-widget ui-helper-reset"), this.element.attr("role", "tablist"), e.collapsible || e.active !== !1 && null != e.active || (e.active = 0), this._processPanels(), 0 > e.active && (e.active += this.headers.length), this._refresh();
    },
    _getCreateEventData: function () {
      return {
        header: this.active,
        panel: this.active.length ? this.active.next() : t()
      };
    },
    _createIcons: function () {
      var e,
          i,
          s = this.options.icons;
      s && (e = t("<span>"), this._addClass(e, "ui-accordion-header-icon", "ui-icon " + s.header), e.prependTo(this.headers), i = this.active.children(".ui-accordion-header-icon"), this._removeClass(i, s.header)._addClass(i, null, s.activeHeader)._addClass(this.headers, "ui-accordion-icons"));
    },
    _destroyIcons: function () {
      this._removeClass(this.headers, "ui-accordion-icons"), this.headers.children(".ui-accordion-header-icon").remove();
    },
    _destroy: function () {
      var t;
      this.element.removeAttr("role"), this.headers.removeAttr("role aria-expanded aria-selected aria-controls tabIndex").removeUniqueId(), this._destroyIcons(), t = this.headers.next().css("display", "").removeAttr("role aria-hidden aria-labelledby").removeUniqueId(), "content" !== this.options.heightStyle && t.css("height", "");
    },
    _setOption: function (t, e) {
      return "active" === t ? (this._activate(e), void 0) : ("event" === t && (this.options.event && this._off(this.headers, this.options.event), this._setupEvents(e)), this._super(t, e), "collapsible" !== t || e || this.options.active !== !1 || this._activate(0), "icons" === t && (this._destroyIcons(), e && this._createIcons()), void 0);
    },
    _setOptionDisabled: function (t) {
      this._super(t), this.element.attr("aria-disabled", t), this._toggleClass(null, "ui-state-disabled", !!t), this._toggleClass(this.headers.add(this.headers.next()), null, "ui-state-disabled", !!t);
    },
    _keydown: function (e) {
      if (!e.altKey && !e.ctrlKey) {
        var i = t.ui.keyCode,
            s = this.headers.length,
            n = this.headers.index(e.target),
            o = !1;

        switch (e.keyCode) {
          case i.RIGHT:
          case i.DOWN:
            o = this.headers[(n + 1) % s];
            break;

          case i.LEFT:
          case i.UP:
            o = this.headers[(n - 1 + s) % s];
            break;

          case i.SPACE:
          case i.ENTER:
            this._eventHandler(e);

            break;

          case i.HOME:
            o = this.headers[0];
            break;

          case i.END:
            o = this.headers[s - 1];
        }

        o && (t(e.target).attr("tabIndex", -1), t(o).attr("tabIndex", 0), t(o).trigger("focus"), e.preventDefault());
      }
    },
    _panelKeyDown: function (e) {
      e.keyCode === t.ui.keyCode.UP && e.ctrlKey && t(e.currentTarget).prev().trigger("focus");
    },
    refresh: function () {
      var e = this.options;
      this._processPanels(), e.active === !1 && e.collapsible === !0 || !this.headers.length ? (e.active = !1, this.active = t()) : e.active === !1 ? this._activate(0) : this.active.length && !t.contains(this.element[0], this.active[0]) ? this.headers.length === this.headers.find(".ui-state-disabled").length ? (e.active = !1, this.active = t()) : this._activate(Math.max(0, e.active - 1)) : e.active = this.headers.index(this.active), this._destroyIcons(), this._refresh();
    },
    _processPanels: function () {
      var t = this.headers,
          e = this.panels;
      this.headers = this.element.find(this.options.header), this._addClass(this.headers, "ui-accordion-header ui-accordion-header-collapsed", "ui-state-default"), this.panels = this.headers.next().filter(":not(.ui-accordion-content-active)").hide(), this._addClass(this.panels, "ui-accordion-content", "ui-helper-reset ui-widget-content"), e && (this._off(t.not(this.headers)), this._off(e.not(this.panels)));
    },
    _refresh: function () {
      var e,
          i = this.options,
          s = i.heightStyle,
          n = this.element.parent();
      this.active = this._findActive(i.active), this._addClass(this.active, "ui-accordion-header-active", "ui-state-active")._removeClass(this.active, "ui-accordion-header-collapsed"), this._addClass(this.active.next(), "ui-accordion-content-active"), this.active.next().show(), this.headers.attr("role", "tab").each(function () {
        var e = t(this),
            i = e.uniqueId().attr("id"),
            s = e.next(),
            n = s.uniqueId().attr("id");
        e.attr("aria-controls", n), s.attr("aria-labelledby", i);
      }).next().attr("role", "tabpanel"), this.headers.not(this.active).attr({
        "aria-selected": "false",
        "aria-expanded": "false",
        tabIndex: -1
      }).next().attr({
        "aria-hidden": "true"
      }).hide(), this.active.length ? this.active.attr({
        "aria-selected": "true",
        "aria-expanded": "true",
        tabIndex: 0
      }).next().attr({
        "aria-hidden": "false"
      }) : this.headers.eq(0).attr("tabIndex", 0), this._createIcons(), this._setupEvents(i.event), "fill" === s ? (e = n.height(), this.element.siblings(":visible").each(function () {
        var i = t(this),
            s = i.css("position");
        "absolute" !== s && "fixed" !== s && (e -= i.outerHeight(!0));
      }), this.headers.each(function () {
        e -= t(this).outerHeight(!0);
      }), this.headers.next().each(function () {
        t(this).height(Math.max(0, e - t(this).innerHeight() + t(this).height()));
      }).css("overflow", "auto")) : "auto" === s && (e = 0, this.headers.next().each(function () {
        var i = t(this).is(":visible");
        i || t(this).show(), e = Math.max(e, t(this).css("height", "").height()), i || t(this).hide();
      }).height(e));
    },
    _activate: function (e) {
      var i = this._findActive(e)[0];

      i !== this.active[0] && (i = i || this.active[0], this._eventHandler({
        target: i,
        currentTarget: i,
        preventDefault: t.noop
      }));
    },
    _findActive: function (e) {
      return "number" == typeof e ? this.headers.eq(e) : t();
    },
    _setupEvents: function (e) {
      var i = {
        keydown: "_keydown"
      };
      e && t.each(e.split(" "), function (t, e) {
        i[e] = "_eventHandler";
      }), this._off(this.headers.add(this.headers.next())), this._on(this.headers, i), this._on(this.headers.next(), {
        keydown: "_panelKeyDown"
      }), this._hoverable(this.headers), this._focusable(this.headers);
    },
    _eventHandler: function (e) {
      var i,
          s,
          n = this.options,
          o = this.active,
          a = t(e.currentTarget),
          r = a[0] === o[0],
          h = r && n.collapsible,
          l = h ? t() : a.next(),
          c = o.next(),
          u = {
        oldHeader: o,
        oldPanel: c,
        newHeader: h ? t() : a,
        newPanel: l
      };
      e.preventDefault(), r && !n.collapsible || this._trigger("beforeActivate", e, u) === !1 || (n.active = h ? !1 : this.headers.index(a), this.active = r ? t() : a, this._toggle(u), this._removeClass(o, "ui-accordion-header-active", "ui-state-active"), n.icons && (i = o.children(".ui-accordion-header-icon"), this._removeClass(i, null, n.icons.activeHeader)._addClass(i, null, n.icons.header)), r || (this._removeClass(a, "ui-accordion-header-collapsed")._addClass(a, "ui-accordion-header-active", "ui-state-active"), n.icons && (s = a.children(".ui-accordion-header-icon"), this._removeClass(s, null, n.icons.header)._addClass(s, null, n.icons.activeHeader)), this._addClass(a.next(), "ui-accordion-content-active")));
    },
    _toggle: function (e) {
      var i = e.newPanel,
          s = this.prevShow.length ? this.prevShow : e.oldPanel;
      this.prevShow.add(this.prevHide).stop(!0, !0), this.prevShow = i, this.prevHide = s, this.options.animate ? this._animate(i, s, e) : (s.hide(), i.show(), this._toggleComplete(e)), s.attr({
        "aria-hidden": "true"
      }), s.prev().attr({
        "aria-selected": "false",
        "aria-expanded": "false"
      }), i.length && s.length ? s.prev().attr({
        tabIndex: -1,
        "aria-expanded": "false"
      }) : i.length && this.headers.filter(function () {
        return 0 === parseInt(t(this).attr("tabIndex"), 10);
      }).attr("tabIndex", -1), i.attr("aria-hidden", "false").prev().attr({
        "aria-selected": "true",
        "aria-expanded": "true",
        tabIndex: 0
      });
    },
    _animate: function (t, e, i) {
      var s,
          n,
          o,
          a = this,
          r = 0,
          h = t.css("box-sizing"),
          l = t.length && (!e.length || t.index() < e.index()),
          c = this.options.animate || {},
          u = l && c.down || c,
          d = function () {
        a._toggleComplete(i);
      };

      return "number" == typeof u && (o = u), "string" == typeof u && (n = u), n = n || u.easing || c.easing, o = o || u.duration || c.duration, e.length ? t.length ? (s = t.show().outerHeight(), e.animate(this.hideProps, {
        duration: o,
        easing: n,
        step: function (t, e) {
          e.now = Math.round(t);
        }
      }), t.hide().animate(this.showProps, {
        duration: o,
        easing: n,
        complete: d,
        step: function (t, i) {
          i.now = Math.round(t), "height" !== i.prop ? "content-box" === h && (r += i.now) : "content" !== a.options.heightStyle && (i.now = Math.round(s - e.outerHeight() - r), r = 0);
        }
      }), void 0) : e.animate(this.hideProps, o, n, d) : t.animate(this.showProps, o, n, d);
    },
    _toggleComplete: function (t) {
      var e = t.oldPanel,
          i = e.prev();
      this._removeClass(e, "ui-accordion-content-active"), this._removeClass(i, "ui-accordion-header-active")._addClass(i, "ui-accordion-header-collapsed"), e.length && (e.parent()[0].className = e.parent()[0].className), this._trigger("activate", null, t);
    }
  }), t.ui.safeActiveElement = function (t) {
    var e;

    try {
      e = t.activeElement;
    } catch (i) {
      e = t.body;
    }

    return e || (e = t.body), e.nodeName || (e = t.body), e;
  }, t.widget("ui.menu", {
    version: "1.12.1",
    defaultElement: "<ul>",
    delay: 300,
    options: {
      icons: {
        submenu: "ui-icon-caret-1-e"
      },
      items: "> *",
      menus: "ul",
      position: {
        my: "left top",
        at: "right top"
      },
      role: "menu",
      blur: null,
      focus: null,
      select: null
    },
    _create: function () {
      this.activeMenu = this.element, this.mouseHandled = !1, this.element.uniqueId().attr({
        role: this.options.role,
        tabIndex: 0
      }), this._addClass("ui-menu", "ui-widget ui-widget-content"), this._on({
        "mousedown .ui-menu-item": function (t) {
          t.preventDefault();
        },
        "click .ui-menu-item": function (e) {
          var i = t(e.target),
              s = t(t.ui.safeActiveElement(this.document[0]));
          !this.mouseHandled && i.not(".ui-state-disabled").length && (this.select(e), e.isPropagationStopped() || (this.mouseHandled = !0), i.has(".ui-menu").length ? this.expand(e) : !this.element.is(":focus") && s.closest(".ui-menu").length && (this.element.trigger("focus", [!0]), this.active && 1 === this.active.parents(".ui-menu").length && clearTimeout(this.timer)));
        },
        "mouseenter .ui-menu-item": function (e) {
          if (!this.previousFilter) {
            var i = t(e.target).closest(".ui-menu-item"),
                s = t(e.currentTarget);
            i[0] === s[0] && (this._removeClass(s.siblings().children(".ui-state-active"), null, "ui-state-active"), this.focus(e, s));
          }
        },
        mouseleave: "collapseAll",
        "mouseleave .ui-menu": "collapseAll",
        focus: function (t, e) {
          var i = this.active || this.element.find(this.options.items).eq(0);
          e || this.focus(t, i);
        },
        blur: function (e) {
          this._delay(function () {
            var i = !t.contains(this.element[0], t.ui.safeActiveElement(this.document[0]));
            i && this.collapseAll(e);
          });
        },
        keydown: "_keydown"
      }), this.refresh(), this._on(this.document, {
        click: function (t) {
          this._closeOnDocumentClick(t) && this.collapseAll(t), this.mouseHandled = !1;
        }
      });
    },
    _destroy: function () {
      var e = this.element.find(".ui-menu-item").removeAttr("role aria-disabled"),
          i = e.children(".ui-menu-item-wrapper").removeUniqueId().removeAttr("tabIndex role aria-haspopup");
      this.element.removeAttr("aria-activedescendant").find(".ui-menu").addBack().removeAttr("role aria-labelledby aria-expanded aria-hidden aria-disabled tabIndex").removeUniqueId().show(), i.children().each(function () {
        var e = t(this);
        e.data("ui-menu-submenu-caret") && e.remove();
      });
    },
    _keydown: function (e) {
      var i,
          s,
          n,
          o,
          a = !0;

      switch (e.keyCode) {
        case t.ui.keyCode.PAGE_UP:
          this.previousPage(e);
          break;

        case t.ui.keyCode.PAGE_DOWN:
          this.nextPage(e);
          break;

        case t.ui.keyCode.HOME:
          this._move("first", "first", e);

          break;

        case t.ui.keyCode.END:
          this._move("last", "last", e);

          break;

        case t.ui.keyCode.UP:
          this.previous(e);
          break;

        case t.ui.keyCode.DOWN:
          this.next(e);
          break;

        case t.ui.keyCode.LEFT:
          this.collapse(e);
          break;

        case t.ui.keyCode.RIGHT:
          this.active && !this.active.is(".ui-state-disabled") && this.expand(e);
          break;

        case t.ui.keyCode.ENTER:
        case t.ui.keyCode.SPACE:
          this._activate(e);

          break;

        case t.ui.keyCode.ESCAPE:
          this.collapse(e);
          break;

        default:
          a = !1, s = this.previousFilter || "", o = !1, n = e.keyCode >= 96 && 105 >= e.keyCode ? "" + (e.keyCode - 96) : String.fromCharCode(e.keyCode), clearTimeout(this.filterTimer), n === s ? o = !0 : n = s + n, i = this._filterMenuItems(n), i = o && -1 !== i.index(this.active.next()) ? this.active.nextAll(".ui-menu-item") : i, i.length || (n = String.fromCharCode(e.keyCode), i = this._filterMenuItems(n)), i.length ? (this.focus(e, i), this.previousFilter = n, this.filterTimer = this._delay(function () {
            delete this.previousFilter;
          }, 1e3)) : delete this.previousFilter;
      }

      a && e.preventDefault();
    },
    _activate: function (t) {
      this.active && !this.active.is(".ui-state-disabled") && (this.active.children("[aria-haspopup='true']").length ? this.expand(t) : this.select(t));
    },
    refresh: function () {
      var e,
          i,
          s,
          n,
          o,
          a = this,
          r = this.options.icons.submenu,
          h = this.element.find(this.options.menus);
      this._toggleClass("ui-menu-icons", null, !!this.element.find(".ui-icon").length), s = h.filter(":not(.ui-menu)").hide().attr({
        role: this.options.role,
        "aria-hidden": "true",
        "aria-expanded": "false"
      }).each(function () {
        var e = t(this),
            i = e.prev(),
            s = t("<span>").data("ui-menu-submenu-caret", !0);
        a._addClass(s, "ui-menu-icon", "ui-icon " + r), i.attr("aria-haspopup", "true").prepend(s), e.attr("aria-labelledby", i.attr("id"));
      }), this._addClass(s, "ui-menu", "ui-widget ui-widget-content ui-front"), e = h.add(this.element), i = e.find(this.options.items), i.not(".ui-menu-item").each(function () {
        var e = t(this);
        a._isDivider(e) && a._addClass(e, "ui-menu-divider", "ui-widget-content");
      }), n = i.not(".ui-menu-item, .ui-menu-divider"), o = n.children().not(".ui-menu").uniqueId().attr({
        tabIndex: -1,
        role: this._itemRole()
      }), this._addClass(n, "ui-menu-item")._addClass(o, "ui-menu-item-wrapper"), i.filter(".ui-state-disabled").attr("aria-disabled", "true"), this.active && !t.contains(this.element[0], this.active[0]) && this.blur();
    },
    _itemRole: function () {
      return {
        menu: "menuitem",
        listbox: "option"
      }[this.options.role];
    },
    _setOption: function (t, e) {
      if ("icons" === t) {
        var i = this.element.find(".ui-menu-icon");

        this._removeClass(i, null, this.options.icons.submenu)._addClass(i, null, e.submenu);
      }

      this._super(t, e);
    },
    _setOptionDisabled: function (t) {
      this._super(t), this.element.attr("aria-disabled", t + ""), this._toggleClass(null, "ui-state-disabled", !!t);
    },
    focus: function (t, e) {
      var i, s, n;
      this.blur(t, t && "focus" === t.type), this._scrollIntoView(e), this.active = e.first(), s = this.active.children(".ui-menu-item-wrapper"), this._addClass(s, null, "ui-state-active"), this.options.role && this.element.attr("aria-activedescendant", s.attr("id")), n = this.active.parent().closest(".ui-menu-item").children(".ui-menu-item-wrapper"), this._addClass(n, null, "ui-state-active"), t && "keydown" === t.type ? this._close() : this.timer = this._delay(function () {
        this._close();
      }, this.delay), i = e.children(".ui-menu"), i.length && t && /^mouse/.test(t.type) && this._startOpening(i), this.activeMenu = e.parent(), this._trigger("focus", t, {
        item: e
      });
    },
    _scrollIntoView: function (e) {
      var i, s, n, o, a, r;
      this._hasScroll() && (i = parseFloat(t.css(this.activeMenu[0], "borderTopWidth")) || 0, s = parseFloat(t.css(this.activeMenu[0], "paddingTop")) || 0, n = e.offset().top - this.activeMenu.offset().top - i - s, o = this.activeMenu.scrollTop(), a = this.activeMenu.height(), r = e.outerHeight(), 0 > n ? this.activeMenu.scrollTop(o + n) : n + r > a && this.activeMenu.scrollTop(o + n - a + r));
    },
    blur: function (t, e) {
      e || clearTimeout(this.timer), this.active && (this._removeClass(this.active.children(".ui-menu-item-wrapper"), null, "ui-state-active"), this._trigger("blur", t, {
        item: this.active
      }), this.active = null);
    },
    _startOpening: function (t) {
      clearTimeout(this.timer), "true" === t.attr("aria-hidden") && (this.timer = this._delay(function () {
        this._close(), this._open(t);
      }, this.delay));
    },
    _open: function (e) {
      var i = t.extend({
        of: this.active
      }, this.options.position);
      clearTimeout(this.timer), this.element.find(".ui-menu").not(e.parents(".ui-menu")).hide().attr("aria-hidden", "true"), e.show().removeAttr("aria-hidden").attr("aria-expanded", "true").position(i);
    },
    collapseAll: function (e, i) {
      clearTimeout(this.timer), this.timer = this._delay(function () {
        var s = i ? this.element : t(e && e.target).closest(this.element.find(".ui-menu"));
        s.length || (s = this.element), this._close(s), this.blur(e), this._removeClass(s.find(".ui-state-active"), null, "ui-state-active"), this.activeMenu = s;
      }, this.delay);
    },
    _close: function (t) {
      t || (t = this.active ? this.active.parent() : this.element), t.find(".ui-menu").hide().attr("aria-hidden", "true").attr("aria-expanded", "false");
    },
    _closeOnDocumentClick: function (e) {
      return !t(e.target).closest(".ui-menu").length;
    },
    _isDivider: function (t) {
      return !/[^\-\u2014\u2013\s]/.test(t.text());
    },
    collapse: function (t) {
      var e = this.active && this.active.parent().closest(".ui-menu-item", this.element);
      e && e.length && (this._close(), this.focus(t, e));
    },
    expand: function (t) {
      var e = this.active && this.active.children(".ui-menu ").find(this.options.items).first();
      e && e.length && (this._open(e.parent()), this._delay(function () {
        this.focus(t, e);
      }));
    },
    next: function (t) {
      this._move("next", "first", t);
    },
    previous: function (t) {
      this._move("prev", "last", t);
    },
    isFirstItem: function () {
      return this.active && !this.active.prevAll(".ui-menu-item").length;
    },
    isLastItem: function () {
      return this.active && !this.active.nextAll(".ui-menu-item").length;
    },
    _move: function (t, e, i) {
      var s;
      this.active && (s = "first" === t || "last" === t ? this.active["first" === t ? "prevAll" : "nextAll"](".ui-menu-item").eq(-1) : this.active[t + "All"](".ui-menu-item").eq(0)), s && s.length && this.active || (s = this.activeMenu.find(this.options.items)[e]()), this.focus(i, s);
    },
    nextPage: function (e) {
      var i, s, n;
      return this.active ? (this.isLastItem() || (this._hasScroll() ? (s = this.active.offset().top, n = this.element.height(), this.active.nextAll(".ui-menu-item").each(function () {
        return i = t(this), 0 > i.offset().top - s - n;
      }), this.focus(e, i)) : this.focus(e, this.activeMenu.find(this.options.items)[this.active ? "last" : "first"]())), void 0) : (this.next(e), void 0);
    },
    previousPage: function (e) {
      var i, s, n;
      return this.active ? (this.isFirstItem() || (this._hasScroll() ? (s = this.active.offset().top, n = this.element.height(), this.active.prevAll(".ui-menu-item").each(function () {
        return i = t(this), i.offset().top - s + n > 0;
      }), this.focus(e, i)) : this.focus(e, this.activeMenu.find(this.options.items).first())), void 0) : (this.next(e), void 0);
    },
    _hasScroll: function () {
      return this.element.outerHeight() < this.element.prop("scrollHeight");
    },
    select: function (e) {
      this.active = this.active || t(e.target).closest(".ui-menu-item");
      var i = {
        item: this.active
      };
      this.active.has(".ui-menu").length || this.collapseAll(e, !0), this._trigger("select", e, i);
    },
    _filterMenuItems: function (e) {
      var i = e.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&"),
          s = RegExp("^" + i, "i");
      return this.activeMenu.find(this.options.items).filter(".ui-menu-item").filter(function () {
        return s.test(t.trim(t(this).children(".ui-menu-item-wrapper").text()));
      });
    }
  }), t.widget("ui.autocomplete", {
    version: "1.12.1",
    defaultElement: "<input>",
    options: {
      appendTo: null,
      autoFocus: !1,
      delay: 300,
      minLength: 1,
      position: {
        my: "left top",
        at: "left bottom",
        collision: "none"
      },
      source: null,
      change: null,
      close: null,
      focus: null,
      open: null,
      response: null,
      search: null,
      select: null
    },
    requestIndex: 0,
    pending: 0,
    _create: function () {
      var e,
          i,
          s,
          n = this.element[0].nodeName.toLowerCase(),
          o = "textarea" === n,
          a = "input" === n;
      this.isMultiLine = o || !a && this._isContentEditable(this.element), this.valueMethod = this.element[o || a ? "val" : "text"], this.isNewMenu = !0, this._addClass("ui-autocomplete-input"), this.element.attr("autocomplete", "off"), this._on(this.element, {
        keydown: function (n) {
          if (this.element.prop("readOnly")) return e = !0, s = !0, i = !0, void 0;
          e = !1, s = !1, i = !1;
          var o = t.ui.keyCode;

          switch (n.keyCode) {
            case o.PAGE_UP:
              e = !0, this._move("previousPage", n);
              break;

            case o.PAGE_DOWN:
              e = !0, this._move("nextPage", n);
              break;

            case o.UP:
              e = !0, this._keyEvent("previous", n);
              break;

            case o.DOWN:
              e = !0, this._keyEvent("next", n);
              break;

            case o.ENTER:
              this.menu.active && (e = !0, n.preventDefault(), this.menu.select(n));
              break;

            case o.TAB:
              this.menu.active && this.menu.select(n);
              break;

            case o.ESCAPE:
              this.menu.element.is(":visible") && (this.isMultiLine || this._value(this.term), this.close(n), n.preventDefault());
              break;

            default:
              i = !0, this._searchTimeout(n);
          }
        },
        keypress: function (s) {
          if (e) return e = !1, (!this.isMultiLine || this.menu.element.is(":visible")) && s.preventDefault(), void 0;

          if (!i) {
            var n = t.ui.keyCode;

            switch (s.keyCode) {
              case n.PAGE_UP:
                this._move("previousPage", s);

                break;

              case n.PAGE_DOWN:
                this._move("nextPage", s);

                break;

              case n.UP:
                this._keyEvent("previous", s);

                break;

              case n.DOWN:
                this._keyEvent("next", s);

            }
          }
        },
        input: function (t) {
          return s ? (s = !1, t.preventDefault(), void 0) : (this._searchTimeout(t), void 0);
        },
        focus: function () {
          this.selectedItem = null, this.previous = this._value();
        },
        blur: function (t) {
          return this.cancelBlur ? (delete this.cancelBlur, void 0) : (clearTimeout(this.searching), this.close(t), this._change(t), void 0);
        }
      }), this._initSource(), this.menu = t("<ul>").appendTo(this._appendTo()).menu({
        role: null
      }).hide().menu("instance"), this._addClass(this.menu.element, "ui-autocomplete", "ui-front"), this._on(this.menu.element, {
        mousedown: function (e) {
          e.preventDefault(), this.cancelBlur = !0, this._delay(function () {
            delete this.cancelBlur, this.element[0] !== t.ui.safeActiveElement(this.document[0]) && this.element.trigger("focus");
          });
        },
        menufocus: function (e, i) {
          var s, n;
          return this.isNewMenu && (this.isNewMenu = !1, e.originalEvent && /^mouse/.test(e.originalEvent.type)) ? (this.menu.blur(), this.document.one("mousemove", function () {
            t(e.target).trigger(e.originalEvent);
          }), void 0) : (n = i.item.data("ui-autocomplete-item"), !1 !== this._trigger("focus", e, {
            item: n
          }) && e.originalEvent && /^key/.test(e.originalEvent.type) && this._value(n.value), s = i.item.attr("aria-label") || n.value, s && t.trim(s).length && (this.liveRegion.children().hide(), t("<div>").text(s).appendTo(this.liveRegion)), void 0);
        },
        menuselect: function (e, i) {
          var s = i.item.data("ui-autocomplete-item"),
              n = this.previous;
          this.element[0] !== t.ui.safeActiveElement(this.document[0]) && (this.element.trigger("focus"), this.previous = n, this._delay(function () {
            this.previous = n, this.selectedItem = s;
          })), !1 !== this._trigger("select", e, {
            item: s
          }) && this._value(s.value), this.term = this._value(), this.close(e), this.selectedItem = s;
        }
      }), this.liveRegion = t("<div>", {
        role: "status",
        "aria-live": "assertive",
        "aria-relevant": "additions"
      }).appendTo(this.document[0].body), this._addClass(this.liveRegion, null, "ui-helper-hidden-accessible"), this._on(this.window, {
        beforeunload: function () {
          this.element.removeAttr("autocomplete");
        }
      });
    },
    _destroy: function () {
      clearTimeout(this.searching), this.element.removeAttr("autocomplete"), this.menu.element.remove(), this.liveRegion.remove();
    },
    _setOption: function (t, e) {
      this._super(t, e), "source" === t && this._initSource(), "appendTo" === t && this.menu.element.appendTo(this._appendTo()), "disabled" === t && e && this.xhr && this.xhr.abort();
    },
    _isEventTargetInWidget: function (e) {
      var i = this.menu.element[0];
      return e.target === this.element[0] || e.target === i || t.contains(i, e.target);
    },
    _closeOnClickOutside: function (t) {
      this._isEventTargetInWidget(t) || this.close();
    },
    _appendTo: function () {
      var e = this.options.appendTo;
      return e && (e = e.jquery || e.nodeType ? t(e) : this.document.find(e).eq(0)), e && e[0] || (e = this.element.closest(".ui-front, dialog")), e.length || (e = this.document[0].body), e;
    },
    _initSource: function () {
      var e,
          i,
          s = this;
      t.isArray(this.options.source) ? (e = this.options.source, this.source = function (i, s) {
        s(t.ui.autocomplete.filter(e, i.term));
      }) : "string" == typeof this.options.source ? (i = this.options.source, this.source = function (e, n) {
        s.xhr && s.xhr.abort(), s.xhr = t.ajax({
          url: i,
          data: e,
          dataType: "json",
          success: function (t) {
            n(t);
          },
          error: function () {
            n([]);
          }
        });
      }) : this.source = this.options.source;
    },
    _searchTimeout: function (t) {
      clearTimeout(this.searching), this.searching = this._delay(function () {
        var e = this.term === this._value(),
            i = this.menu.element.is(":visible"),
            s = t.altKey || t.ctrlKey || t.metaKey || t.shiftKey;

        (!e || e && !i && !s) && (this.selectedItem = null, this.search(null, t));
      }, this.options.delay);
    },
    search: function (t, e) {
      return t = null != t ? t : this._value(), this.term = this._value(), t.length < this.options.minLength ? this.close(e) : this._trigger("search", e) !== !1 ? this._search(t) : void 0;
    },
    _search: function (t) {
      this.pending++, this._addClass("ui-autocomplete-loading"), this.cancelSearch = !1, this.source({
        term: t
      }, this._response());
    },
    _response: function () {
      var e = ++this.requestIndex;
      return t.proxy(function (t) {
        e === this.requestIndex && this.__response(t), this.pending--, this.pending || this._removeClass("ui-autocomplete-loading");
      }, this);
    },
    __response: function (t) {
      t && (t = this._normalize(t)), this._trigger("response", null, {
        content: t
      }), !this.options.disabled && t && t.length && !this.cancelSearch ? (this._suggest(t), this._trigger("open")) : this._close();
    },
    close: function (t) {
      this.cancelSearch = !0, this._close(t);
    },
    _close: function (t) {
      this._off(this.document, "mousedown"), this.menu.element.is(":visible") && (this.menu.element.hide(), this.menu.blur(), this.isNewMenu = !0, this._trigger("close", t));
    },
    _change: function (t) {
      this.previous !== this._value() && this._trigger("change", t, {
        item: this.selectedItem
      });
    },
    _normalize: function (e) {
      return e.length && e[0].label && e[0].value ? e : t.map(e, function (e) {
        return "string" == typeof e ? {
          label: e,
          value: e
        } : t.extend({}, e, {
          label: e.label || e.value,
          value: e.value || e.label
        });
      });
    },
    _suggest: function (e) {
      var i = this.menu.element.empty();
      this._renderMenu(i, e), this.isNewMenu = !0, this.menu.refresh(), i.show(), this._resizeMenu(), i.position(t.extend({
        of: this.element
      }, this.options.position)), this.options.autoFocus && this.menu.next(), this._on(this.document, {
        mousedown: "_closeOnClickOutside"
      });
    },
    _resizeMenu: function () {
      var t = this.menu.element;
      t.outerWidth(Math.max(t.width("").outerWidth() + 1, this.element.outerWidth()));
    },
    _renderMenu: function (e, i) {
      var s = this;
      t.each(i, function (t, i) {
        s._renderItemData(e, i);
      });
    },
    _renderItemData: function (t, e) {
      return this._renderItem(t, e).data("ui-autocomplete-item", e);
    },
    _renderItem: function (e, i) {
      return t("<li>").append(t("<div>").text(i.label)).appendTo(e);
    },
    _move: function (t, e) {
      return this.menu.element.is(":visible") ? this.menu.isFirstItem() && /^previous/.test(t) || this.menu.isLastItem() && /^next/.test(t) ? (this.isMultiLine || this._value(this.term), this.menu.blur(), void 0) : (this.menu[t](e), void 0) : (this.search(null, e), void 0);
    },
    widget: function () {
      return this.menu.element;
    },
    _value: function () {
      return this.valueMethod.apply(this.element, arguments);
    },
    _keyEvent: function (t, e) {
      (!this.isMultiLine || this.menu.element.is(":visible")) && (this._move(t, e), e.preventDefault());
    },
    _isContentEditable: function (t) {
      if (!t.length) return !1;
      var e = t.prop("contentEditable");
      return "inherit" === e ? this._isContentEditable(t.parent()) : "true" === e;
    }
  }), t.extend(t.ui.autocomplete, {
    escapeRegex: function (t) {
      return t.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&");
    },
    filter: function (e, i) {
      var s = RegExp(t.ui.autocomplete.escapeRegex(i), "i");
      return t.grep(e, function (t) {
        return s.test(t.label || t.value || t);
      });
    }
  }), t.widget("ui.autocomplete", t.ui.autocomplete, {
    options: {
      messages: {
        noResults: "No search results.",
        results: function (t) {
          return t + (t > 1 ? " results are" : " result is") + " available, use up and down arrow keys to navigate.";
        }
      }
    },
    __response: function (e) {
      var i;
      this._superApply(arguments), this.options.disabled || this.cancelSearch || (i = e && e.length ? this.options.messages.results(e.length) : this.options.messages.noResults, this.liveRegion.children().hide(), t("<div>").text(i).appendTo(this.liveRegion));
    }
  }), t.ui.autocomplete;
  var g = /ui-corner-([a-z]){2,6}/g;
  t.widget("ui.controlgroup", {
    version: "1.12.1",
    defaultElement: "<div>",
    options: {
      direction: "horizontal",
      disabled: null,
      onlyVisible: !0,
      items: {
        button: "input[type=button], input[type=submit], input[type=reset], button, a",
        controlgroupLabel: ".ui-controlgroup-label",
        checkboxradio: "input[type='checkbox'], input[type='radio']",
        selectmenu: "select",
        spinner: ".ui-spinner-input"
      }
    },
    _create: function () {
      this._enhance();
    },
    _enhance: function () {
      this.element.attr("role", "toolbar"), this.refresh();
    },
    _destroy: function () {
      this._callChildMethod("destroy"), this.childWidgets.removeData("ui-controlgroup-data"), this.element.removeAttr("role"), this.options.items.controlgroupLabel && this.element.find(this.options.items.controlgroupLabel).find(".ui-controlgroup-label-contents").contents().unwrap();
    },
    _initWidgets: function () {
      var e = this,
          i = [];
      t.each(this.options.items, function (s, n) {
        var o,
            a = {};
        return n ? "controlgroupLabel" === s ? (o = e.element.find(n), o.each(function () {
          var e = t(this);
          e.children(".ui-controlgroup-label-contents").length || e.contents().wrapAll("<span class='ui-controlgroup-label-contents'></span>");
        }), e._addClass(o, null, "ui-widget ui-widget-content ui-state-default"), i = i.concat(o.get()), void 0) : (t.fn[s] && (a = e["_" + s + "Options"] ? e["_" + s + "Options"]("middle") : {
          classes: {}
        }, e.element.find(n).each(function () {
          var n = t(this),
              o = n[s]("instance"),
              r = t.widget.extend({}, a);

          if ("button" !== s || !n.parent(".ui-spinner").length) {
            o || (o = n[s]()[s]("instance")), o && (r.classes = e._resolveClassesValues(r.classes, o)), n[s](r);
            var h = n[s]("widget");
            t.data(h[0], "ui-controlgroup-data", o ? o : n[s]("instance")), i.push(h[0]);
          }
        })), void 0) : void 0;
      }), this.childWidgets = t(t.unique(i)), this._addClass(this.childWidgets, "ui-controlgroup-item");
    },
    _callChildMethod: function (e) {
      this.childWidgets.each(function () {
        var i = t(this),
            s = i.data("ui-controlgroup-data");
        s && s[e] && s[e]();
      });
    },
    _updateCornerClass: function (t, e) {
      var i = "ui-corner-top ui-corner-bottom ui-corner-left ui-corner-right ui-corner-all",
          s = this._buildSimpleOptions(e, "label").classes.label;

      this._removeClass(t, null, i), this._addClass(t, null, s);
    },
    _buildSimpleOptions: function (t, e) {
      var i = "vertical" === this.options.direction,
          s = {
        classes: {}
      };
      return s.classes[e] = {
        middle: "",
        first: "ui-corner-" + (i ? "top" : "left"),
        last: "ui-corner-" + (i ? "bottom" : "right"),
        only: "ui-corner-all"
      }[t], s;
    },
    _spinnerOptions: function (t) {
      var e = this._buildSimpleOptions(t, "ui-spinner");

      return e.classes["ui-spinner-up"] = "", e.classes["ui-spinner-down"] = "", e;
    },
    _buttonOptions: function (t) {
      return this._buildSimpleOptions(t, "ui-button");
    },
    _checkboxradioOptions: function (t) {
      return this._buildSimpleOptions(t, "ui-checkboxradio-label");
    },
    _selectmenuOptions: function (t) {
      var e = "vertical" === this.options.direction;
      return {
        width: e ? "auto" : !1,
        classes: {
          middle: {
            "ui-selectmenu-button-open": "",
            "ui-selectmenu-button-closed": ""
          },
          first: {
            "ui-selectmenu-button-open": "ui-corner-" + (e ? "top" : "tl"),
            "ui-selectmenu-button-closed": "ui-corner-" + (e ? "top" : "left")
          },
          last: {
            "ui-selectmenu-button-open": e ? "" : "ui-corner-tr",
            "ui-selectmenu-button-closed": "ui-corner-" + (e ? "bottom" : "right")
          },
          only: {
            "ui-selectmenu-button-open": "ui-corner-top",
            "ui-selectmenu-button-closed": "ui-corner-all"
          }
        }[t]
      };
    },
    _resolveClassesValues: function (e, i) {
      var s = {};
      return t.each(e, function (n) {
        var o = i.options.classes[n] || "";
        o = t.trim(o.replace(g, "")), s[n] = (o + " " + e[n]).replace(/\s+/g, " ");
      }), s;
    },
    _setOption: function (t, e) {
      return "direction" === t && this._removeClass("ui-controlgroup-" + this.options.direction), this._super(t, e), "disabled" === t ? (this._callChildMethod(e ? "disable" : "enable"), void 0) : (this.refresh(), void 0);
    },
    refresh: function () {
      var e,
          i = this;
      this._addClass("ui-controlgroup ui-controlgroup-" + this.options.direction), "horizontal" === this.options.direction && this._addClass(null, "ui-helper-clearfix"), this._initWidgets(), e = this.childWidgets, this.options.onlyVisible && (e = e.filter(":visible")), e.length && (t.each(["first", "last"], function (t, s) {
        var n = e[s]().data("ui-controlgroup-data");

        if (n && i["_" + n.widgetName + "Options"]) {
          var o = i["_" + n.widgetName + "Options"](1 === e.length ? "only" : s);
          o.classes = i._resolveClassesValues(o.classes, n), n.element[n.widgetName](o);
        } else i._updateCornerClass(e[s](), s);
      }), this._callChildMethod("refresh"));
    }
  }), t.widget("ui.checkboxradio", [t.ui.formResetMixin, {
    version: "1.12.1",
    options: {
      disabled: null,
      label: null,
      icon: !0,
      classes: {
        "ui-checkboxradio-label": "ui-corner-all",
        "ui-checkboxradio-icon": "ui-corner-all"
      }
    },
    _getCreateOptions: function () {
      var e,
          i,
          s = this,
          n = this._super() || {};
      return this._readType(), i = this.element.labels(), this.label = t(i[i.length - 1]), this.label.length || t.error("No label found for checkboxradio widget"), this.originalLabel = "", this.label.contents().not(this.element[0]).each(function () {
        s.originalLabel += 3 === this.nodeType ? t(this).text() : this.outerHTML;
      }), this.originalLabel && (n.label = this.originalLabel), e = this.element[0].disabled, null != e && (n.disabled = e), n;
    },
    _create: function () {
      var t = this.element[0].checked;
      this._bindFormResetHandler(), null == this.options.disabled && (this.options.disabled = this.element[0].disabled), this._setOption("disabled", this.options.disabled), this._addClass("ui-checkboxradio", "ui-helper-hidden-accessible"), this._addClass(this.label, "ui-checkboxradio-label", "ui-button ui-widget"), "radio" === this.type && this._addClass(this.label, "ui-checkboxradio-radio-label"), this.options.label && this.options.label !== this.originalLabel ? this._updateLabel() : this.originalLabel && (this.options.label = this.originalLabel), this._enhance(), t && (this._addClass(this.label, "ui-checkboxradio-checked", "ui-state-active"), this.icon && this._addClass(this.icon, null, "ui-state-hover")), this._on({
        change: "_toggleClasses",
        focus: function () {
          this._addClass(this.label, null, "ui-state-focus ui-visual-focus");
        },
        blur: function () {
          this._removeClass(this.label, null, "ui-state-focus ui-visual-focus");
        }
      });
    },
    _readType: function () {
      var e = this.element[0].nodeName.toLowerCase();
      this.type = this.element[0].type, "input" === e && /radio|checkbox/.test(this.type) || t.error("Can't create checkboxradio on element.nodeName=" + e + " and element.type=" + this.type);
    },
    _enhance: function () {
      this._updateIcon(this.element[0].checked);
    },
    widget: function () {
      return this.label;
    },
    _getRadioGroup: function () {
      var e,
          i = this.element[0].name,
          s = "input[name='" + t.ui.escapeSelector(i) + "']";
      return i ? (e = this.form.length ? t(this.form[0].elements).filter(s) : t(s).filter(function () {
        return 0 === t(this).form().length;
      }), e.not(this.element)) : t([]);
    },
    _toggleClasses: function () {
      var e = this.element[0].checked;
      this._toggleClass(this.label, "ui-checkboxradio-checked", "ui-state-active", e), this.options.icon && "checkbox" === this.type && this._toggleClass(this.icon, null, "ui-icon-check ui-state-checked", e)._toggleClass(this.icon, null, "ui-icon-blank", !e), "radio" === this.type && this._getRadioGroup().each(function () {
        var e = t(this).checkboxradio("instance");
        e && e._removeClass(e.label, "ui-checkboxradio-checked", "ui-state-active");
      });
    },
    _destroy: function () {
      this._unbindFormResetHandler(), this.icon && (this.icon.remove(), this.iconSpace.remove());
    },
    _setOption: function (t, e) {
      return "label" !== t || e ? (this._super(t, e), "disabled" === t ? (this._toggleClass(this.label, null, "ui-state-disabled", e), this.element[0].disabled = e, void 0) : (this.refresh(), void 0)) : void 0;
    },
    _updateIcon: function (e) {
      var i = "ui-icon ui-icon-background ";
      this.options.icon ? (this.icon || (this.icon = t("<span>"), this.iconSpace = t("<span> </span>"), this._addClass(this.iconSpace, "ui-checkboxradio-icon-space")), "checkbox" === this.type ? (i += e ? "ui-icon-check ui-state-checked" : "ui-icon-blank", this._removeClass(this.icon, null, e ? "ui-icon-blank" : "ui-icon-check")) : i += "ui-icon-blank", this._addClass(this.icon, "ui-checkboxradio-icon", i), e || this._removeClass(this.icon, null, "ui-icon-check ui-state-checked"), this.icon.prependTo(this.label).after(this.iconSpace)) : void 0 !== this.icon && (this.icon.remove(), this.iconSpace.remove(), delete this.icon);
    },
    _updateLabel: function () {
      var t = this.label.contents().not(this.element[0]);
      this.icon && (t = t.not(this.icon[0])), this.iconSpace && (t = t.not(this.iconSpace[0])), t.remove(), this.label.append(this.options.label);
    },
    refresh: function () {
      var t = this.element[0].checked,
          e = this.element[0].disabled;
      this._updateIcon(t), this._toggleClass(this.label, "ui-checkboxradio-checked", "ui-state-active", t), null !== this.options.label && this._updateLabel(), e !== this.options.disabled && this._setOptions({
        disabled: e
      });
    }
  }]), t.ui.checkboxradio, t.widget("ui.button", {
    version: "1.12.1",
    defaultElement: "<button>",
    options: {
      classes: {
        "ui-button": "ui-corner-all"
      },
      disabled: null,
      icon: null,
      iconPosition: "beginning",
      label: null,
      showLabel: !0
    },
    _getCreateOptions: function () {
      var t,
          e = this._super() || {};
      return this.isInput = this.element.is("input"), t = this.element[0].disabled, null != t && (e.disabled = t), this.originalLabel = this.isInput ? this.element.val() : this.element.html(), this.originalLabel && (e.label = this.originalLabel), e;
    },
    _create: function () {
      !this.option.showLabel & !this.options.icon && (this.options.showLabel = !0), null == this.options.disabled && (this.options.disabled = this.element[0].disabled || !1), this.hasTitle = !!this.element.attr("title"), this.options.label && this.options.label !== this.originalLabel && (this.isInput ? this.element.val(this.options.label) : this.element.html(this.options.label)), this._addClass("ui-button", "ui-widget"), this._setOption("disabled", this.options.disabled), this._enhance(), this.element.is("a") && this._on({
        keyup: function (e) {
          e.keyCode === t.ui.keyCode.SPACE && (e.preventDefault(), this.element[0].click ? this.element[0].click() : this.element.trigger("click"));
        }
      });
    },
    _enhance: function () {
      this.element.is("button") || this.element.attr("role", "button"), this.options.icon && (this._updateIcon("icon", this.options.icon), this._updateTooltip());
    },
    _updateTooltip: function () {
      this.title = this.element.attr("title"), this.options.showLabel || this.title || this.element.attr("title", this.options.label);
    },
    _updateIcon: function (e, i) {
      var s = "iconPosition" !== e,
          n = s ? this.options.iconPosition : i,
          o = "top" === n || "bottom" === n;
      this.icon ? s && this._removeClass(this.icon, null, this.options.icon) : (this.icon = t("<span>"), this._addClass(this.icon, "ui-button-icon", "ui-icon"), this.options.showLabel || this._addClass("ui-button-icon-only")), s && this._addClass(this.icon, null, i), this._attachIcon(n), o ? (this._addClass(this.icon, null, "ui-widget-icon-block"), this.iconSpace && this.iconSpace.remove()) : (this.iconSpace || (this.iconSpace = t("<span> </span>"), this._addClass(this.iconSpace, "ui-button-icon-space")), this._removeClass(this.icon, null, "ui-wiget-icon-block"), this._attachIconSpace(n));
    },
    _destroy: function () {
      this.element.removeAttr("role"), this.icon && this.icon.remove(), this.iconSpace && this.iconSpace.remove(), this.hasTitle || this.element.removeAttr("title");
    },
    _attachIconSpace: function (t) {
      this.icon[/^(?:end|bottom)/.test(t) ? "before" : "after"](this.iconSpace);
    },
    _attachIcon: function (t) {
      this.element[/^(?:end|bottom)/.test(t) ? "append" : "prepend"](this.icon);
    },
    _setOptions: function (t) {
      var e = void 0 === t.showLabel ? this.options.showLabel : t.showLabel,
          i = void 0 === t.icon ? this.options.icon : t.icon;
      e || i || (t.showLabel = !0), this._super(t);
    },
    _setOption: function (t, e) {
      "icon" === t && (e ? this._updateIcon(t, e) : this.icon && (this.icon.remove(), this.iconSpace && this.iconSpace.remove())), "iconPosition" === t && this._updateIcon(t, e), "showLabel" === t && (this._toggleClass("ui-button-icon-only", null, !e), this._updateTooltip()), "label" === t && (this.isInput ? this.element.val(e) : (this.element.html(e), this.icon && (this._attachIcon(this.options.iconPosition), this._attachIconSpace(this.options.iconPosition)))), this._super(t, e), "disabled" === t && (this._toggleClass(null, "ui-state-disabled", e), this.element[0].disabled = e, e && this.element.blur());
    },
    refresh: function () {
      var t = this.element.is("input, button") ? this.element[0].disabled : this.element.hasClass("ui-button-disabled");
      t !== this.options.disabled && this._setOptions({
        disabled: t
      }), this._updateTooltip();
    }
  }), t.uiBackCompat !== !1 && (t.widget("ui.button", t.ui.button, {
    options: {
      text: !0,
      icons: {
        primary: null,
        secondary: null
      }
    },
    _create: function () {
      this.options.showLabel && !this.options.text && (this.options.showLabel = this.options.text), !this.options.showLabel && this.options.text && (this.options.text = this.options.showLabel), this.options.icon || !this.options.icons.primary && !this.options.icons.secondary ? this.options.icon && (this.options.icons.primary = this.options.icon) : this.options.icons.primary ? this.options.icon = this.options.icons.primary : (this.options.icon = this.options.icons.secondary, this.options.iconPosition = "end"), this._super();
    },
    _setOption: function (t, e) {
      return "text" === t ? (this._super("showLabel", e), void 0) : ("showLabel" === t && (this.options.text = e), "icon" === t && (this.options.icons.primary = e), "icons" === t && (e.primary ? (this._super("icon", e.primary), this._super("iconPosition", "beginning")) : e.secondary && (this._super("icon", e.secondary), this._super("iconPosition", "end"))), this._superApply(arguments), void 0);
    }
  }), t.fn.button = function (e) {
    return function () {
      return !this.length || this.length && "INPUT" !== this[0].tagName || this.length && "INPUT" === this[0].tagName && "checkbox" !== this.attr("type") && "radio" !== this.attr("type") ? e.apply(this, arguments) : (t.ui.checkboxradio || t.error("Checkboxradio widget missing"), 0 === arguments.length ? this.checkboxradio({
        icon: !1
      }) : this.checkboxradio.apply(this, arguments));
    };
  }(t.fn.button), t.fn.buttonset = function () {
    return t.ui.controlgroup || t.error("Controlgroup widget missing"), "option" === arguments[0] && "items" === arguments[1] && arguments[2] ? this.controlgroup.apply(this, [arguments[0], "items.button", arguments[2]]) : "option" === arguments[0] && "items" === arguments[1] ? this.controlgroup.apply(this, [arguments[0], "items.button"]) : ("object" == typeof arguments[0] && arguments[0].items && (arguments[0].items = {
      button: arguments[0].items
    }), this.controlgroup.apply(this, arguments));
  }), t.ui.button, t.extend(t.ui, {
    datepicker: {
      version: "1.12.1"
    }
  });
  var m;
  t.extend(s.prototype, {
    markerClassName: "hasDatepicker",
    maxRows: 4,
    _widgetDatepicker: function () {
      return this.dpDiv;
    },
    setDefaults: function (t) {
      return a(this._defaults, t || {}), this;
    },
    _attachDatepicker: function (e, i) {
      var s, n, o;
      s = e.nodeName.toLowerCase(), n = "div" === s || "span" === s, e.id || (this.uuid += 1, e.id = "dp" + this.uuid), o = this._newInst(t(e), n), o.settings = t.extend({}, i || {}), "input" === s ? this._connectDatepicker(e, o) : n && this._inlineDatepicker(e, o);
    },
    _newInst: function (e, i) {
      var s = e[0].id.replace(/([^A-Za-z0-9_\-])/g, "\\\\$1");
      return {
        id: s,
        input: e,
        selectedDay: 0,
        selectedMonth: 0,
        selectedYear: 0,
        drawMonth: 0,
        drawYear: 0,
        inline: i,
        dpDiv: i ? n(t("<div class='" + this._inlineClass + " ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>")) : this.dpDiv
      };
    },
    _connectDatepicker: function (e, i) {
      var s = t(e);
      i.append = t([]), i.trigger = t([]), s.hasClass(this.markerClassName) || (this._attachments(s, i), s.addClass(this.markerClassName).on("keydown", this._doKeyDown).on("keypress", this._doKeyPress).on("keyup", this._doKeyUp), this._autoSize(i), t.data(e, "datepicker", i), i.settings.disabled && this._disableDatepicker(e));
    },
    _attachments: function (e, i) {
      var s,
          n,
          o,
          a = this._get(i, "appendText"),
          r = this._get(i, "isRTL");

      i.append && i.append.remove(), a && (i.append = t("<span class='" + this._appendClass + "'>" + a + "</span>"), e[r ? "before" : "after"](i.append)), e.off("focus", this._showDatepicker), i.trigger && i.trigger.remove(), s = this._get(i, "showOn"), ("focus" === s || "both" === s) && e.on("focus", this._showDatepicker), ("button" === s || "both" === s) && (n = this._get(i, "buttonText"), o = this._get(i, "buttonImage"), i.trigger = t(this._get(i, "buttonImageOnly") ? t("<img/>").addClass(this._triggerClass).attr({
        src: o,
        alt: n,
        title: n
      }) : t("<button type='button'></button>").addClass(this._triggerClass).html(o ? t("<img/>").attr({
        src: o,
        alt: n,
        title: n
      }) : n)), e[r ? "before" : "after"](i.trigger), i.trigger.on("click", function () {
        return t.datepicker._datepickerShowing && t.datepicker._lastInput === e[0] ? t.datepicker._hideDatepicker() : t.datepicker._datepickerShowing && t.datepicker._lastInput !== e[0] ? (t.datepicker._hideDatepicker(), t.datepicker._showDatepicker(e[0])) : t.datepicker._showDatepicker(e[0]), !1;
      }));
    },
    _autoSize: function (t) {
      if (this._get(t, "autoSize") && !t.inline) {
        var e,
            i,
            s,
            n,
            o = new Date(2009, 11, 20),
            a = this._get(t, "dateFormat");

        a.match(/[DM]/) && (e = function (t) {
          for (i = 0, s = 0, n = 0; t.length > n; n++) t[n].length > i && (i = t[n].length, s = n);

          return s;
        }, o.setMonth(e(this._get(t, a.match(/MM/) ? "monthNames" : "monthNamesShort"))), o.setDate(e(this._get(t, a.match(/DD/) ? "dayNames" : "dayNamesShort")) + 20 - o.getDay())), t.input.attr("size", this._formatDate(t, o).length);
      }
    },
    _inlineDatepicker: function (e, i) {
      var s = t(e);
      s.hasClass(this.markerClassName) || (s.addClass(this.markerClassName).append(i.dpDiv), t.data(e, "datepicker", i), this._setDate(i, this._getDefaultDate(i), !0), this._updateDatepicker(i), this._updateAlternate(i), i.settings.disabled && this._disableDatepicker(e), i.dpDiv.css("display", "block"));
    },
    _dialogDatepicker: function (e, i, s, n, o) {
      var r,
          h,
          l,
          c,
          u,
          d = this._dialogInst;
      return d || (this.uuid += 1, r = "dp" + this.uuid, this._dialogInput = t("<input type='text' id='" + r + "' style='position: absolute; top: -100px; width: 0px;'/>"), this._dialogInput.on("keydown", this._doKeyDown), t("body").append(this._dialogInput), d = this._dialogInst = this._newInst(this._dialogInput, !1), d.settings = {}, t.data(this._dialogInput[0], "datepicker", d)), a(d.settings, n || {}), i = i && i.constructor === Date ? this._formatDate(d, i) : i, this._dialogInput.val(i), this._pos = o ? o.length ? o : [o.pageX, o.pageY] : null, this._pos || (h = document.documentElement.clientWidth, l = document.documentElement.clientHeight, c = document.documentElement.scrollLeft || document.body.scrollLeft, u = document.documentElement.scrollTop || document.body.scrollTop, this._pos = [h / 2 - 100 + c, l / 2 - 150 + u]), this._dialogInput.css("left", this._pos[0] + 20 + "px").css("top", this._pos[1] + "px"), d.settings.onSelect = s, this._inDialog = !0, this.dpDiv.addClass(this._dialogClass), this._showDatepicker(this._dialogInput[0]), t.blockUI && t.blockUI(this.dpDiv), t.data(this._dialogInput[0], "datepicker", d), this;
    },
    _destroyDatepicker: function (e) {
      var i,
          s = t(e),
          n = t.data(e, "datepicker");
      s.hasClass(this.markerClassName) && (i = e.nodeName.toLowerCase(), t.removeData(e, "datepicker"), "input" === i ? (n.append.remove(), n.trigger.remove(), s.removeClass(this.markerClassName).off("focus", this._showDatepicker).off("keydown", this._doKeyDown).off("keypress", this._doKeyPress).off("keyup", this._doKeyUp)) : ("div" === i || "span" === i) && s.removeClass(this.markerClassName).empty(), m === n && (m = null));
    },
    _enableDatepicker: function (e) {
      var i,
          s,
          n = t(e),
          o = t.data(e, "datepicker");
      n.hasClass(this.markerClassName) && (i = e.nodeName.toLowerCase(), "input" === i ? (e.disabled = !1, o.trigger.filter("button").each(function () {
        this.disabled = !1;
      }).end().filter("img").css({
        opacity: "1.0",
        cursor: ""
      })) : ("div" === i || "span" === i) && (s = n.children("." + this._inlineClass), s.children().removeClass("ui-state-disabled"), s.find("select.ui-datepicker-month, select.ui-datepicker-year").prop("disabled", !1)), this._disabledInputs = t.map(this._disabledInputs, function (t) {
        return t === e ? null : t;
      }));
    },
    _disableDatepicker: function (e) {
      var i,
          s,
          n = t(e),
          o = t.data(e, "datepicker");
      n.hasClass(this.markerClassName) && (i = e.nodeName.toLowerCase(), "input" === i ? (e.disabled = !0, o.trigger.filter("button").each(function () {
        this.disabled = !0;
      }).end().filter("img").css({
        opacity: "0.5",
        cursor: "default"
      })) : ("div" === i || "span" === i) && (s = n.children("." + this._inlineClass), s.children().addClass("ui-state-disabled"), s.find("select.ui-datepicker-month, select.ui-datepicker-year").prop("disabled", !0)), this._disabledInputs = t.map(this._disabledInputs, function (t) {
        return t === e ? null : t;
      }), this._disabledInputs[this._disabledInputs.length] = e);
    },
    _isDisabledDatepicker: function (t) {
      if (!t) return !1;

      for (var e = 0; this._disabledInputs.length > e; e++) if (this._disabledInputs[e] === t) return !0;

      return !1;
    },
    _getInst: function (e) {
      try {
        return t.data(e, "datepicker");
      } catch (i) {
        throw "Missing instance data for this datepicker";
      }
    },
    _optionDatepicker: function (e, i, s) {
      var n,
          o,
          r,
          h,
          l = this._getInst(e);

      return 2 === arguments.length && "string" == typeof i ? "defaults" === i ? t.extend({}, t.datepicker._defaults) : l ? "all" === i ? t.extend({}, l.settings) : this._get(l, i) : null : (n = i || {}, "string" == typeof i && (n = {}, n[i] = s), l && (this._curInst === l && this._hideDatepicker(), o = this._getDateDatepicker(e, !0), r = this._getMinMaxDate(l, "min"), h = this._getMinMaxDate(l, "max"), a(l.settings, n), null !== r && void 0 !== n.dateFormat && void 0 === n.minDate && (l.settings.minDate = this._formatDate(l, r)), null !== h && void 0 !== n.dateFormat && void 0 === n.maxDate && (l.settings.maxDate = this._formatDate(l, h)), "disabled" in n && (n.disabled ? this._disableDatepicker(e) : this._enableDatepicker(e)), this._attachments(t(e), l), this._autoSize(l), this._setDate(l, o), this._updateAlternate(l), this._updateDatepicker(l)), void 0);
    },
    _changeDatepicker: function (t, e, i) {
      this._optionDatepicker(t, e, i);
    },
    _refreshDatepicker: function (t) {
      var e = this._getInst(t);

      e && this._updateDatepicker(e);
    },
    _setDateDatepicker: function (t, e) {
      var i = this._getInst(t);

      i && (this._setDate(i, e), this._updateDatepicker(i), this._updateAlternate(i));
    },
    _getDateDatepicker: function (t, e) {
      var i = this._getInst(t);

      return i && !i.inline && this._setDateFromField(i, e), i ? this._getDate(i) : null;
    },
    _doKeyDown: function (e) {
      var i,
          s,
          n,
          o = t.datepicker._getInst(e.target),
          a = !0,
          r = o.dpDiv.is(".ui-datepicker-rtl");

      if (o._keyEvent = !0, t.datepicker._datepickerShowing) switch (e.keyCode) {
        case 9:
          t.datepicker._hideDatepicker(), a = !1;
          break;

        case 13:
          return n = t("td." + t.datepicker._dayOverClass + ":not(." + t.datepicker._currentClass + ")", o.dpDiv), n[0] && t.datepicker._selectDay(e.target, o.selectedMonth, o.selectedYear, n[0]), i = t.datepicker._get(o, "onSelect"), i ? (s = t.datepicker._formatDate(o), i.apply(o.input ? o.input[0] : null, [s, o])) : t.datepicker._hideDatepicker(), !1;

        case 27:
          t.datepicker._hideDatepicker();

          break;

        case 33:
          t.datepicker._adjustDate(e.target, e.ctrlKey ? -t.datepicker._get(o, "stepBigMonths") : -t.datepicker._get(o, "stepMonths"), "M");

          break;

        case 34:
          t.datepicker._adjustDate(e.target, e.ctrlKey ? +t.datepicker._get(o, "stepBigMonths") : +t.datepicker._get(o, "stepMonths"), "M");

          break;

        case 35:
          (e.ctrlKey || e.metaKey) && t.datepicker._clearDate(e.target), a = e.ctrlKey || e.metaKey;
          break;

        case 36:
          (e.ctrlKey || e.metaKey) && t.datepicker._gotoToday(e.target), a = e.ctrlKey || e.metaKey;
          break;

        case 37:
          (e.ctrlKey || e.metaKey) && t.datepicker._adjustDate(e.target, r ? 1 : -1, "D"), a = e.ctrlKey || e.metaKey, e.originalEvent.altKey && t.datepicker._adjustDate(e.target, e.ctrlKey ? -t.datepicker._get(o, "stepBigMonths") : -t.datepicker._get(o, "stepMonths"), "M");
          break;

        case 38:
          (e.ctrlKey || e.metaKey) && t.datepicker._adjustDate(e.target, -7, "D"), a = e.ctrlKey || e.metaKey;
          break;

        case 39:
          (e.ctrlKey || e.metaKey) && t.datepicker._adjustDate(e.target, r ? -1 : 1, "D"), a = e.ctrlKey || e.metaKey, e.originalEvent.altKey && t.datepicker._adjustDate(e.target, e.ctrlKey ? +t.datepicker._get(o, "stepBigMonths") : +t.datepicker._get(o, "stepMonths"), "M");
          break;

        case 40:
          (e.ctrlKey || e.metaKey) && t.datepicker._adjustDate(e.target, 7, "D"), a = e.ctrlKey || e.metaKey;
          break;

        default:
          a = !1;
      } else 36 === e.keyCode && e.ctrlKey ? t.datepicker._showDatepicker(this) : a = !1;
      a && (e.preventDefault(), e.stopPropagation());
    },
    _doKeyPress: function (e) {
      var i,
          s,
          n = t.datepicker._getInst(e.target);

      return t.datepicker._get(n, "constrainInput") ? (i = t.datepicker._possibleChars(t.datepicker._get(n, "dateFormat")), s = String.fromCharCode(null == e.charCode ? e.keyCode : e.charCode), e.ctrlKey || e.metaKey || " " > s || !i || i.indexOf(s) > -1) : void 0;
    },
    _doKeyUp: function (e) {
      var i,
          s = t.datepicker._getInst(e.target);

      if (s.input.val() !== s.lastVal) try {
        i = t.datepicker.parseDate(t.datepicker._get(s, "dateFormat"), s.input ? s.input.val() : null, t.datepicker._getFormatConfig(s)), i && (t.datepicker._setDateFromField(s), t.datepicker._updateAlternate(s), t.datepicker._updateDatepicker(s));
      } catch (n) {}
      return !0;
    },
    _showDatepicker: function (e) {
      if (e = e.target || e, "input" !== e.nodeName.toLowerCase() && (e = t("input", e.parentNode)[0]), !t.datepicker._isDisabledDatepicker(e) && t.datepicker._lastInput !== e) {
        var s, n, o, r, h, l, c;
        s = t.datepicker._getInst(e), t.datepicker._curInst && t.datepicker._curInst !== s && (t.datepicker._curInst.dpDiv.stop(!0, !0), s && t.datepicker._datepickerShowing && t.datepicker._hideDatepicker(t.datepicker._curInst.input[0])), n = t.datepicker._get(s, "beforeShow"), o = n ? n.apply(e, [e, s]) : {}, o !== !1 && (a(s.settings, o), s.lastVal = null, t.datepicker._lastInput = e, t.datepicker._setDateFromField(s), t.datepicker._inDialog && (e.value = ""), t.datepicker._pos || (t.datepicker._pos = t.datepicker._findPos(e), t.datepicker._pos[1] += e.offsetHeight), r = !1, t(e).parents().each(function () {
          return r |= "fixed" === t(this).css("position"), !r;
        }), h = {
          left: t.datepicker._pos[0],
          top: t.datepicker._pos[1]
        }, t.datepicker._pos = null, s.dpDiv.empty(), s.dpDiv.css({
          position: "absolute",
          display: "block",
          top: "-1000px"
        }), t.datepicker._updateDatepicker(s), h = t.datepicker._checkOffset(s, h, r), s.dpDiv.css({
          position: t.datepicker._inDialog && t.blockUI ? "static" : r ? "fixed" : "absolute",
          display: "none",
          left: h.left + "px",
          top: h.top + "px"
        }), s.inline || (l = t.datepicker._get(s, "showAnim"), c = t.datepicker._get(s, "duration"), s.dpDiv.css("z-index", i(t(e)) + 1), t.datepicker._datepickerShowing = !0, t.effects && t.effects.effect[l] ? s.dpDiv.show(l, t.datepicker._get(s, "showOptions"), c) : s.dpDiv[l || "show"](l ? c : null), t.datepicker._shouldFocusInput(s) && s.input.trigger("focus"), t.datepicker._curInst = s));
      }
    },
    _updateDatepicker: function (e) {
      this.maxRows = 4, m = e, e.dpDiv.empty().append(this._generateHTML(e)), this._attachHandlers(e);

      var i,
          s = this._getNumberOfMonths(e),
          n = s[1],
          a = 17,
          r = e.dpDiv.find("." + this._dayOverClass + " a");

      r.length > 0 && o.apply(r.get(0)), e.dpDiv.removeClass("ui-datepicker-multi-2 ui-datepicker-multi-3 ui-datepicker-multi-4").width(""), n > 1 && e.dpDiv.addClass("ui-datepicker-multi-" + n).css("width", a * n + "em"), e.dpDiv[(1 !== s[0] || 1 !== s[1] ? "add" : "remove") + "Class"]("ui-datepicker-multi"), e.dpDiv[(this._get(e, "isRTL") ? "add" : "remove") + "Class"]("ui-datepicker-rtl"), e === t.datepicker._curInst && t.datepicker._datepickerShowing && t.datepicker._shouldFocusInput(e) && e.input.trigger("focus"), e.yearshtml && (i = e.yearshtml, setTimeout(function () {
        i === e.yearshtml && e.yearshtml && e.dpDiv.find("select.ui-datepicker-year:first").replaceWith(e.yearshtml), i = e.yearshtml = null;
      }, 0));
    },
    _shouldFocusInput: function (t) {
      return t.input && t.input.is(":visible") && !t.input.is(":disabled") && !t.input.is(":focus");
    },
    _checkOffset: function (e, i, s) {
      var n = e.dpDiv.outerWidth(),
          o = e.dpDiv.outerHeight(),
          a = e.input ? e.input.outerWidth() : 0,
          r = e.input ? e.input.outerHeight() : 0,
          h = document.documentElement.clientWidth + (s ? 0 : t(document).scrollLeft()),
          l = document.documentElement.clientHeight + (s ? 0 : t(document).scrollTop());
      return i.left -= this._get(e, "isRTL") ? n - a : 0, i.left -= s && i.left === e.input.offset().left ? t(document).scrollLeft() : 0, i.top -= s && i.top === e.input.offset().top + r ? t(document).scrollTop() : 0, i.left -= Math.min(i.left, i.left + n > h && h > n ? Math.abs(i.left + n - h) : 0), i.top -= Math.min(i.top, i.top + o > l && l > o ? Math.abs(o + r) : 0), i;
    },
    _findPos: function (e) {
      for (var i, s = this._getInst(e), n = this._get(s, "isRTL"); e && ("hidden" === e.type || 1 !== e.nodeType || t.expr.filters.hidden(e));) e = e[n ? "previousSibling" : "nextSibling"];

      return i = t(e).offset(), [i.left, i.top];
    },
    _hideDatepicker: function (e) {
      var i,
          s,
          n,
          o,
          a = this._curInst;
      !a || e && a !== t.data(e, "datepicker") || this._datepickerShowing && (i = this._get(a, "showAnim"), s = this._get(a, "duration"), n = function () {
        t.datepicker._tidyDialog(a);
      }, t.effects && (t.effects.effect[i] || t.effects[i]) ? a.dpDiv.hide(i, t.datepicker._get(a, "showOptions"), s, n) : a.dpDiv["slideDown" === i ? "slideUp" : "fadeIn" === i ? "fadeOut" : "hide"](i ? s : null, n), i || n(), this._datepickerShowing = !1, o = this._get(a, "onClose"), o && o.apply(a.input ? a.input[0] : null, [a.input ? a.input.val() : "", a]), this._lastInput = null, this._inDialog && (this._dialogInput.css({
        position: "absolute",
        left: "0",
        top: "-100px"
      }), t.blockUI && (t.unblockUI(), t("body").append(this.dpDiv))), this._inDialog = !1);
    },
    _tidyDialog: function (t) {
      t.dpDiv.removeClass(this._dialogClass).off(".ui-datepicker-calendar");
    },
    _checkExternalClick: function (e) {
      if (t.datepicker._curInst) {
        var i = t(e.target),
            s = t.datepicker._getInst(i[0]);

        (i[0].id !== t.datepicker._mainDivId && 0 === i.parents("#" + t.datepicker._mainDivId).length && !i.hasClass(t.datepicker.markerClassName) && !i.closest("." + t.datepicker._triggerClass).length && t.datepicker._datepickerShowing && (!t.datepicker._inDialog || !t.blockUI) || i.hasClass(t.datepicker.markerClassName) && t.datepicker._curInst !== s) && t.datepicker._hideDatepicker();
      }
    },
    _adjustDate: function (e, i, s) {
      var n = t(e),
          o = this._getInst(n[0]);

      this._isDisabledDatepicker(n[0]) || (this._adjustInstDate(o, i + ("M" === s ? this._get(o, "showCurrentAtPos") : 0), s), this._updateDatepicker(o));
    },
    _gotoToday: function (e) {
      var i,
          s = t(e),
          n = this._getInst(s[0]);

      this._get(n, "gotoCurrent") && n.currentDay ? (n.selectedDay = n.currentDay, n.drawMonth = n.selectedMonth = n.currentMonth, n.drawYear = n.selectedYear = n.currentYear) : (i = new Date(), n.selectedDay = i.getDate(), n.drawMonth = n.selectedMonth = i.getMonth(), n.drawYear = n.selectedYear = i.getFullYear()), this._notifyChange(n), this._adjustDate(s);
    },
    _selectMonthYear: function (e, i, s) {
      var n = t(e),
          o = this._getInst(n[0]);

      o["selected" + ("M" === s ? "Month" : "Year")] = o["draw" + ("M" === s ? "Month" : "Year")] = parseInt(i.options[i.selectedIndex].value, 10), this._notifyChange(o), this._adjustDate(n);
    },
    _selectDay: function (e, i, s, n) {
      var o,
          a = t(e);
      t(n).hasClass(this._unselectableClass) || this._isDisabledDatepicker(a[0]) || (o = this._getInst(a[0]), o.selectedDay = o.currentDay = t("a", n).html(), o.selectedMonth = o.currentMonth = i, o.selectedYear = o.currentYear = s, this._selectDate(e, this._formatDate(o, o.currentDay, o.currentMonth, o.currentYear)));
    },
    _clearDate: function (e) {
      var i = t(e);

      this._selectDate(i, "");
    },
    _selectDate: function (e, i) {
      var s,
          n = t(e),
          o = this._getInst(n[0]);

      i = null != i ? i : this._formatDate(o), o.input && o.input.val(i), this._updateAlternate(o), s = this._get(o, "onSelect"), s ? s.apply(o.input ? o.input[0] : null, [i, o]) : o.input && o.input.trigger("change"), o.inline ? this._updateDatepicker(o) : (this._hideDatepicker(), this._lastInput = o.input[0], "object" != typeof o.input[0] && o.input.trigger("focus"), this._lastInput = null);
    },
    _updateAlternate: function (e) {
      var i,
          s,
          n,
          o = this._get(e, "altField");

      o && (i = this._get(e, "altFormat") || this._get(e, "dateFormat"), s = this._getDate(e), n = this.formatDate(i, s, this._getFormatConfig(e)), t(o).val(n));
    },
    noWeekends: function (t) {
      var e = t.getDay();
      return [e > 0 && 6 > e, ""];
    },
    iso8601Week: function (t) {
      var e,
          i = new Date(t.getTime());
      return i.setDate(i.getDate() + 4 - (i.getDay() || 7)), e = i.getTime(), i.setMonth(0), i.setDate(1), Math.floor(Math.round((e - i) / 864e5) / 7) + 1;
    },
    parseDate: function (e, i, s) {
      if (null == e || null == i) throw "Invalid arguments";
      if (i = "object" == typeof i ? "" + i : i + "", "" === i) return null;

      var n,
          o,
          a,
          r,
          h = 0,
          l = (s ? s.shortYearCutoff : null) || this._defaults.shortYearCutoff,
          c = "string" != typeof l ? l : new Date().getFullYear() % 100 + parseInt(l, 10),
          u = (s ? s.dayNamesShort : null) || this._defaults.dayNamesShort,
          d = (s ? s.dayNames : null) || this._defaults.dayNames,
          p = (s ? s.monthNamesShort : null) || this._defaults.monthNamesShort,
          f = (s ? s.monthNames : null) || this._defaults.monthNames,
          g = -1,
          m = -1,
          _ = -1,
          v = -1,
          b = !1,
          y = function (t) {
        var i = e.length > n + 1 && e.charAt(n + 1) === t;
        return i && n++, i;
      },
          w = function (t) {
        var e = y(t),
            s = "@" === t ? 14 : "!" === t ? 20 : "y" === t && e ? 4 : "o" === t ? 3 : 2,
            n = "y" === t ? s : 1,
            o = RegExp("^\\d{" + n + "," + s + "}"),
            a = i.substring(h).match(o);
        if (!a) throw "Missing number at position " + h;
        return h += a[0].length, parseInt(a[0], 10);
      },
          k = function (e, s, n) {
        var o = -1,
            a = t.map(y(e) ? n : s, function (t, e) {
          return [[e, t]];
        }).sort(function (t, e) {
          return -(t[1].length - e[1].length);
        });
        if (t.each(a, function (t, e) {
          var s = e[1];
          return i.substr(h, s.length).toLowerCase() === s.toLowerCase() ? (o = e[0], h += s.length, !1) : void 0;
        }), -1 !== o) return o + 1;
        throw "Unknown name at position " + h;
      },
          x = function () {
        if (i.charAt(h) !== e.charAt(n)) throw "Unexpected literal at position " + h;
        h++;
      };

      for (n = 0; e.length > n; n++) if (b) "'" !== e.charAt(n) || y("'") ? x() : b = !1;else switch (e.charAt(n)) {
        case "d":
          _ = w("d");
          break;

        case "D":
          k("D", u, d);
          break;

        case "o":
          v = w("o");
          break;

        case "m":
          m = w("m");
          break;

        case "M":
          m = k("M", p, f);
          break;

        case "y":
          g = w("y");
          break;

        case "@":
          r = new Date(w("@")), g = r.getFullYear(), m = r.getMonth() + 1, _ = r.getDate();
          break;

        case "!":
          r = new Date((w("!") - this._ticksTo1970) / 1e4), g = r.getFullYear(), m = r.getMonth() + 1, _ = r.getDate();
          break;

        case "'":
          y("'") ? x() : b = !0;
          break;

        default:
          x();
      }

      if (i.length > h && (a = i.substr(h), !/^\s+/.test(a))) throw "Extra/unparsed characters found in date: " + a;
      if (-1 === g ? g = new Date().getFullYear() : 100 > g && (g += new Date().getFullYear() - new Date().getFullYear() % 100 + (c >= g ? 0 : -100)), v > -1) for (m = 1, _ = v;;) {
        if (o = this._getDaysInMonth(g, m - 1), o >= _) break;
        m++, _ -= o;
      }
      if (r = this._daylightSavingAdjust(new Date(g, m - 1, _)), r.getFullYear() !== g || r.getMonth() + 1 !== m || r.getDate() !== _) throw "Invalid date";
      return r;
    },
    ATOM: "yy-mm-dd",
    COOKIE: "D, dd M yy",
    ISO_8601: "yy-mm-dd",
    RFC_822: "D, d M y",
    RFC_850: "DD, dd-M-y",
    RFC_1036: "D, d M y",
    RFC_1123: "D, d M yy",
    RFC_2822: "D, d M yy",
    RSS: "D, d M y",
    TICKS: "!",
    TIMESTAMP: "@",
    W3C: "yy-mm-dd",
    _ticksTo1970: 1e7 * 60 * 60 * 24 * (718685 + Math.floor(492.5) - Math.floor(19.7) + Math.floor(4.925)),
    formatDate: function (t, e, i) {
      if (!e) return "";

      var s,
          n = (i ? i.dayNamesShort : null) || this._defaults.dayNamesShort,
          o = (i ? i.dayNames : null) || this._defaults.dayNames,
          a = (i ? i.monthNamesShort : null) || this._defaults.monthNamesShort,
          r = (i ? i.monthNames : null) || this._defaults.monthNames,
          h = function (e) {
        var i = t.length > s + 1 && t.charAt(s + 1) === e;
        return i && s++, i;
      },
          l = function (t, e, i) {
        var s = "" + e;
        if (h(t)) for (; i > s.length;) s = "0" + s;
        return s;
      },
          c = function (t, e, i, s) {
        return h(t) ? s[e] : i[e];
      },
          u = "",
          d = !1;

      if (e) for (s = 0; t.length > s; s++) if (d) "'" !== t.charAt(s) || h("'") ? u += t.charAt(s) : d = !1;else switch (t.charAt(s)) {
        case "d":
          u += l("d", e.getDate(), 2);
          break;

        case "D":
          u += c("D", e.getDay(), n, o);
          break;

        case "o":
          u += l("o", Math.round((new Date(e.getFullYear(), e.getMonth(), e.getDate()).getTime() - new Date(e.getFullYear(), 0, 0).getTime()) / 864e5), 3);
          break;

        case "m":
          u += l("m", e.getMonth() + 1, 2);
          break;

        case "M":
          u += c("M", e.getMonth(), a, r);
          break;

        case "y":
          u += h("y") ? e.getFullYear() : (10 > e.getFullYear() % 100 ? "0" : "") + e.getFullYear() % 100;
          break;

        case "@":
          u += e.getTime();
          break;

        case "!":
          u += 1e4 * e.getTime() + this._ticksTo1970;
          break;

        case "'":
          h("'") ? u += "'" : d = !0;
          break;

        default:
          u += t.charAt(s);
      }
      return u;
    },
    _possibleChars: function (t) {
      var e,
          i = "",
          s = !1,
          n = function (i) {
        var s = t.length > e + 1 && t.charAt(e + 1) === i;
        return s && e++, s;
      };

      for (e = 0; t.length > e; e++) if (s) "'" !== t.charAt(e) || n("'") ? i += t.charAt(e) : s = !1;else switch (t.charAt(e)) {
        case "d":
        case "m":
        case "y":
        case "@":
          i += "0123456789";
          break;

        case "D":
        case "M":
          return null;

        case "'":
          n("'") ? i += "'" : s = !0;
          break;

        default:
          i += t.charAt(e);
      }

      return i;
    },
    _get: function (t, e) {
      return void 0 !== t.settings[e] ? t.settings[e] : this._defaults[e];
    },
    _setDateFromField: function (t, e) {
      if (t.input.val() !== t.lastVal) {
        var i = this._get(t, "dateFormat"),
            s = t.lastVal = t.input ? t.input.val() : null,
            n = this._getDefaultDate(t),
            o = n,
            a = this._getFormatConfig(t);

        try {
          o = this.parseDate(i, s, a) || n;
        } catch (r) {
          s = e ? "" : s;
        }

        t.selectedDay = o.getDate(), t.drawMonth = t.selectedMonth = o.getMonth(), t.drawYear = t.selectedYear = o.getFullYear(), t.currentDay = s ? o.getDate() : 0, t.currentMonth = s ? o.getMonth() : 0, t.currentYear = s ? o.getFullYear() : 0, this._adjustInstDate(t);
      }
    },
    _getDefaultDate: function (t) {
      return this._restrictMinMax(t, this._determineDate(t, this._get(t, "defaultDate"), new Date()));
    },
    _determineDate: function (e, i, s) {
      var n = function (t) {
        var e = new Date();
        return e.setDate(e.getDate() + t), e;
      },
          o = function (i) {
        try {
          return t.datepicker.parseDate(t.datepicker._get(e, "dateFormat"), i, t.datepicker._getFormatConfig(e));
        } catch (s) {}

        for (var n = (i.toLowerCase().match(/^c/) ? t.datepicker._getDate(e) : null) || new Date(), o = n.getFullYear(), a = n.getMonth(), r = n.getDate(), h = /([+\-]?[0-9]+)\s*(d|D|w|W|m|M|y|Y)?/g, l = h.exec(i); l;) {
          switch (l[2] || "d") {
            case "d":
            case "D":
              r += parseInt(l[1], 10);
              break;

            case "w":
            case "W":
              r += 7 * parseInt(l[1], 10);
              break;

            case "m":
            case "M":
              a += parseInt(l[1], 10), r = Math.min(r, t.datepicker._getDaysInMonth(o, a));
              break;

            case "y":
            case "Y":
              o += parseInt(l[1], 10), r = Math.min(r, t.datepicker._getDaysInMonth(o, a));
          }

          l = h.exec(i);
        }

        return new Date(o, a, r);
      },
          a = null == i || "" === i ? s : "string" == typeof i ? o(i) : "number" == typeof i ? isNaN(i) ? s : n(i) : new Date(i.getTime());

      return a = a && "Invalid Date" == "" + a ? s : a, a && (a.setHours(0), a.setMinutes(0), a.setSeconds(0), a.setMilliseconds(0)), this._daylightSavingAdjust(a);
    },
    _daylightSavingAdjust: function (t) {
      return t ? (t.setHours(t.getHours() > 12 ? t.getHours() + 2 : 0), t) : null;
    },
    _setDate: function (t, e, i) {
      var s = !e,
          n = t.selectedMonth,
          o = t.selectedYear,
          a = this._restrictMinMax(t, this._determineDate(t, e, new Date()));

      t.selectedDay = t.currentDay = a.getDate(), t.drawMonth = t.selectedMonth = t.currentMonth = a.getMonth(), t.drawYear = t.selectedYear = t.currentYear = a.getFullYear(), n === t.selectedMonth && o === t.selectedYear || i || this._notifyChange(t), this._adjustInstDate(t), t.input && t.input.val(s ? "" : this._formatDate(t));
    },
    _getDate: function (t) {
      var e = !t.currentYear || t.input && "" === t.input.val() ? null : this._daylightSavingAdjust(new Date(t.currentYear, t.currentMonth, t.currentDay));
      return e;
    },
    _attachHandlers: function (e) {
      var i = this._get(e, "stepMonths"),
          s = "#" + e.id.replace(/\\\\/g, "\\");

      e.dpDiv.find("[data-handler]").map(function () {
        var e = {
          prev: function () {
            t.datepicker._adjustDate(s, -i, "M");
          },
          next: function () {
            t.datepicker._adjustDate(s, +i, "M");
          },
          hide: function () {
            t.datepicker._hideDatepicker();
          },
          today: function () {
            t.datepicker._gotoToday(s);
          },
          selectDay: function () {
            return t.datepicker._selectDay(s, +this.getAttribute("data-month"), +this.getAttribute("data-year"), this), !1;
          },
          selectMonth: function () {
            return t.datepicker._selectMonthYear(s, this, "M"), !1;
          },
          selectYear: function () {
            return t.datepicker._selectMonthYear(s, this, "Y"), !1;
          }
        };
        t(this).on(this.getAttribute("data-event"), e[this.getAttribute("data-handler")]);
      });
    },
    _generateHTML: function (t) {
      var e,
          i,
          s,
          n,
          o,
          a,
          r,
          h,
          l,
          c,
          u,
          d,
          p,
          f,
          g,
          m,
          _,
          v,
          b,
          y,
          w,
          k,
          x,
          C,
          D,
          I,
          T,
          P,
          M,
          S,
          H,
          z,
          O,
          A,
          N,
          W,
          E,
          F,
          L,
          R = new Date(),
          B = this._daylightSavingAdjust(new Date(R.getFullYear(), R.getMonth(), R.getDate())),
          Y = this._get(t, "isRTL"),
          j = this._get(t, "showButtonPanel"),
          q = this._get(t, "hideIfNoPrevNext"),
          K = this._get(t, "navigationAsDateFormat"),
          U = this._getNumberOfMonths(t),
          V = this._get(t, "showCurrentAtPos"),
          $ = this._get(t, "stepMonths"),
          X = 1 !== U[0] || 1 !== U[1],
          G = this._daylightSavingAdjust(t.currentDay ? new Date(t.currentYear, t.currentMonth, t.currentDay) : new Date(9999, 9, 9)),
          Q = this._getMinMaxDate(t, "min"),
          J = this._getMinMaxDate(t, "max"),
          Z = t.drawMonth - V,
          te = t.drawYear;

      if (0 > Z && (Z += 12, te--), J) for (e = this._daylightSavingAdjust(new Date(J.getFullYear(), J.getMonth() - U[0] * U[1] + 1, J.getDate())), e = Q && Q > e ? Q : e; this._daylightSavingAdjust(new Date(te, Z, 1)) > e;) Z--, 0 > Z && (Z = 11, te--);

      for (t.drawMonth = Z, t.drawYear = te, i = this._get(t, "prevText"), i = K ? this.formatDate(i, this._daylightSavingAdjust(new Date(te, Z - $, 1)), this._getFormatConfig(t)) : i, s = this._canAdjustMonth(t, -1, te, Z) ? "<a class='ui-datepicker-prev ui-corner-all' data-handler='prev' data-event='click' title='" + i + "'><span class='ui-icon ui-icon-circle-triangle-" + (Y ? "e" : "w") + "'>" + i + "</span></a>" : q ? "" : "<a class='ui-datepicker-prev ui-corner-all ui-state-disabled' title='" + i + "'><span class='ui-icon ui-icon-circle-triangle-" + (Y ? "e" : "w") + "'>" + i + "</span></a>", n = this._get(t, "nextText"), n = K ? this.formatDate(n, this._daylightSavingAdjust(new Date(te, Z + $, 1)), this._getFormatConfig(t)) : n, o = this._canAdjustMonth(t, 1, te, Z) ? "<a class='ui-datepicker-next ui-corner-all' data-handler='next' data-event='click' title='" + n + "'><span class='ui-icon ui-icon-circle-triangle-" + (Y ? "w" : "e") + "'>" + n + "</span></a>" : q ? "" : "<a class='ui-datepicker-next ui-corner-all ui-state-disabled' title='" + n + "'><span class='ui-icon ui-icon-circle-triangle-" + (Y ? "w" : "e") + "'>" + n + "</span></a>", a = this._get(t, "currentText"), r = this._get(t, "gotoCurrent") && t.currentDay ? G : B, a = K ? this.formatDate(a, r, this._getFormatConfig(t)) : a, h = t.inline ? "" : "<button type='button' class='ui-datepicker-close ui-state-default ui-priority-primary ui-corner-all' data-handler='hide' data-event='click'>" + this._get(t, "closeText") + "</button>", l = j ? "<div class='ui-datepicker-buttonpane ui-widget-content'>" + (Y ? h : "") + (this._isInRange(t, r) ? "<button type='button' class='ui-datepicker-current ui-state-default ui-priority-secondary ui-corner-all' data-handler='today' data-event='click'>" + a + "</button>" : "") + (Y ? "" : h) + "</div>" : "", c = parseInt(this._get(t, "firstDay"), 10), c = isNaN(c) ? 0 : c, u = this._get(t, "showWeek"), d = this._get(t, "dayNames"), p = this._get(t, "dayNamesMin"), f = this._get(t, "monthNames"), g = this._get(t, "monthNamesShort"), m = this._get(t, "beforeShowDay"), _ = this._get(t, "showOtherMonths"), v = this._get(t, "selectOtherMonths"), b = this._getDefaultDate(t), y = "", k = 0; U[0] > k; k++) {
        for (x = "", this.maxRows = 4, C = 0; U[1] > C; C++) {
          if (D = this._daylightSavingAdjust(new Date(te, Z, t.selectedDay)), I = " ui-corner-all", T = "", X) {
            if (T += "<div class='ui-datepicker-group", U[1] > 1) switch (C) {
              case 0:
                T += " ui-datepicker-group-first", I = " ui-corner-" + (Y ? "right" : "left");
                break;

              case U[1] - 1:
                T += " ui-datepicker-group-last", I = " ui-corner-" + (Y ? "left" : "right");
                break;

              default:
                T += " ui-datepicker-group-middle", I = "";
            }
            T += "'>";
          }

          for (T += "<div class='ui-datepicker-header ui-widget-header ui-helper-clearfix" + I + "'>" + (/all|left/.test(I) && 0 === k ? Y ? o : s : "") + (/all|right/.test(I) && 0 === k ? Y ? s : o : "") + this._generateMonthYearHeader(t, Z, te, Q, J, k > 0 || C > 0, f, g) + "</div><table class='ui-datepicker-calendar'><thead>" + "<tr>", P = u ? "<th class='ui-datepicker-week-col'>" + this._get(t, "weekHeader") + "</th>" : "", w = 0; 7 > w; w++) M = (w + c) % 7, P += "<th scope='col'" + ((w + c + 6) % 7 >= 5 ? " class='ui-datepicker-week-end'" : "") + ">" + "<span title='" + d[M] + "'>" + p[M] + "</span></th>";

          for (T += P + "</tr></thead><tbody>", S = this._getDaysInMonth(te, Z), te === t.selectedYear && Z === t.selectedMonth && (t.selectedDay = Math.min(t.selectedDay, S)), H = (this._getFirstDayOfMonth(te, Z) - c + 7) % 7, z = Math.ceil((H + S) / 7), O = X ? this.maxRows > z ? this.maxRows : z : z, this.maxRows = O, A = this._daylightSavingAdjust(new Date(te, Z, 1 - H)), N = 0; O > N; N++) {
            for (T += "<tr>", W = u ? "<td class='ui-datepicker-week-col'>" + this._get(t, "calculateWeek")(A) + "</td>" : "", w = 0; 7 > w; w++) E = m ? m.apply(t.input ? t.input[0] : null, [A]) : [!0, ""], F = A.getMonth() !== Z, L = F && !v || !E[0] || Q && Q > A || J && A > J, W += "<td class='" + ((w + c + 6) % 7 >= 5 ? " ui-datepicker-week-end" : "") + (F ? " ui-datepicker-other-month" : "") + (A.getTime() === D.getTime() && Z === t.selectedMonth && t._keyEvent || b.getTime() === A.getTime() && b.getTime() === D.getTime() ? " " + this._dayOverClass : "") + (L ? " " + this._unselectableClass + " ui-state-disabled" : "") + (F && !_ ? "" : " " + E[1] + (A.getTime() === G.getTime() ? " " + this._currentClass : "") + (A.getTime() === B.getTime() ? " ui-datepicker-today" : "")) + "'" + (F && !_ || !E[2] ? "" : " title='" + E[2].replace(/'/g, "&#39;") + "'") + (L ? "" : " data-handler='selectDay' data-event='click' data-month='" + A.getMonth() + "' data-year='" + A.getFullYear() + "'") + ">" + (F && !_ ? "&#xa0;" : L ? "<span class='ui-state-default'>" + A.getDate() + "</span>" : "<a class='ui-state-default" + (A.getTime() === B.getTime() ? " ui-state-highlight" : "") + (A.getTime() === G.getTime() ? " ui-state-active" : "") + (F ? " ui-priority-secondary" : "") + "' href='#'>" + A.getDate() + "</a>") + "</td>", A.setDate(A.getDate() + 1), A = this._daylightSavingAdjust(A);

            T += W + "</tr>";
          }

          Z++, Z > 11 && (Z = 0, te++), T += "</tbody></table>" + (X ? "</div>" + (U[0] > 0 && C === U[1] - 1 ? "<div class='ui-datepicker-row-break'></div>" : "") : ""), x += T;
        }

        y += x;
      }

      return y += l, t._keyEvent = !1, y;
    },
    _generateMonthYearHeader: function (t, e, i, s, n, o, a, r) {
      var h,
          l,
          c,
          u,
          d,
          p,
          f,
          g,
          m = this._get(t, "changeMonth"),
          _ = this._get(t, "changeYear"),
          v = this._get(t, "showMonthAfterYear"),
          b = "<div class='ui-datepicker-title'>",
          y = "";

      if (o || !m) y += "<span class='ui-datepicker-month'>" + a[e] + "</span>";else {
        for (h = s && s.getFullYear() === i, l = n && n.getFullYear() === i, y += "<select class='ui-datepicker-month' data-handler='selectMonth' data-event='change'>", c = 0; 12 > c; c++) (!h || c >= s.getMonth()) && (!l || n.getMonth() >= c) && (y += "<option value='" + c + "'" + (c === e ? " selected='selected'" : "") + ">" + r[c] + "</option>");

        y += "</select>";
      }
      if (v || (b += y + (!o && m && _ ? "" : "&#xa0;")), !t.yearshtml) if (t.yearshtml = "", o || !_) b += "<span class='ui-datepicker-year'>" + i + "</span>";else {
        for (u = this._get(t, "yearRange").split(":"), d = new Date().getFullYear(), p = function (t) {
          var e = t.match(/c[+\-].*/) ? i + parseInt(t.substring(1), 10) : t.match(/[+\-].*/) ? d + parseInt(t, 10) : parseInt(t, 10);
          return isNaN(e) ? d : e;
        }, f = p(u[0]), g = Math.max(f, p(u[1] || "")), f = s ? Math.max(f, s.getFullYear()) : f, g = n ? Math.min(g, n.getFullYear()) : g, t.yearshtml += "<select class='ui-datepicker-year' data-handler='selectYear' data-event='change'>"; g >= f; f++) t.yearshtml += "<option value='" + f + "'" + (f === i ? " selected='selected'" : "") + ">" + f + "</option>";

        t.yearshtml += "</select>", b += t.yearshtml, t.yearshtml = null;
      }
      return b += this._get(t, "yearSuffix"), v && (b += (!o && m && _ ? "" : "&#xa0;") + y), b += "</div>";
    },
    _adjustInstDate: function (t, e, i) {
      var s = t.selectedYear + ("Y" === i ? e : 0),
          n = t.selectedMonth + ("M" === i ? e : 0),
          o = Math.min(t.selectedDay, this._getDaysInMonth(s, n)) + ("D" === i ? e : 0),
          a = this._restrictMinMax(t, this._daylightSavingAdjust(new Date(s, n, o)));

      t.selectedDay = a.getDate(), t.drawMonth = t.selectedMonth = a.getMonth(), t.drawYear = t.selectedYear = a.getFullYear(), ("M" === i || "Y" === i) && this._notifyChange(t);
    },
    _restrictMinMax: function (t, e) {
      var i = this._getMinMaxDate(t, "min"),
          s = this._getMinMaxDate(t, "max"),
          n = i && i > e ? i : e;

      return s && n > s ? s : n;
    },
    _notifyChange: function (t) {
      var e = this._get(t, "onChangeMonthYear");

      e && e.apply(t.input ? t.input[0] : null, [t.selectedYear, t.selectedMonth + 1, t]);
    },
    _getNumberOfMonths: function (t) {
      var e = this._get(t, "numberOfMonths");

      return null == e ? [1, 1] : "number" == typeof e ? [1, e] : e;
    },
    _getMinMaxDate: function (t, e) {
      return this._determineDate(t, this._get(t, e + "Date"), null);
    },
    _getDaysInMonth: function (t, e) {
      return 32 - this._daylightSavingAdjust(new Date(t, e, 32)).getDate();
    },
    _getFirstDayOfMonth: function (t, e) {
      return new Date(t, e, 1).getDay();
    },
    _canAdjustMonth: function (t, e, i, s) {
      var n = this._getNumberOfMonths(t),
          o = this._daylightSavingAdjust(new Date(i, s + (0 > e ? e : n[0] * n[1]), 1));

      return 0 > e && o.setDate(this._getDaysInMonth(o.getFullYear(), o.getMonth())), this._isInRange(t, o);
    },
    _isInRange: function (t, e) {
      var i,
          s,
          n = this._getMinMaxDate(t, "min"),
          o = this._getMinMaxDate(t, "max"),
          a = null,
          r = null,
          h = this._get(t, "yearRange");

      return h && (i = h.split(":"), s = new Date().getFullYear(), a = parseInt(i[0], 10), r = parseInt(i[1], 10), i[0].match(/[+\-].*/) && (a += s), i[1].match(/[+\-].*/) && (r += s)), (!n || e.getTime() >= n.getTime()) && (!o || e.getTime() <= o.getTime()) && (!a || e.getFullYear() >= a) && (!r || r >= e.getFullYear());
    },
    _getFormatConfig: function (t) {
      var e = this._get(t, "shortYearCutoff");

      return e = "string" != typeof e ? e : new Date().getFullYear() % 100 + parseInt(e, 10), {
        shortYearCutoff: e,
        dayNamesShort: this._get(t, "dayNamesShort"),
        dayNames: this._get(t, "dayNames"),
        monthNamesShort: this._get(t, "monthNamesShort"),
        monthNames: this._get(t, "monthNames")
      };
    },
    _formatDate: function (t, e, i, s) {
      e || (t.currentDay = t.selectedDay, t.currentMonth = t.selectedMonth, t.currentYear = t.selectedYear);
      var n = e ? "object" == typeof e ? e : this._daylightSavingAdjust(new Date(s, i, e)) : this._daylightSavingAdjust(new Date(t.currentYear, t.currentMonth, t.currentDay));
      return this.formatDate(this._get(t, "dateFormat"), n, this._getFormatConfig(t));
    }
  }), t.fn.datepicker = function (e) {
    if (!this.length) return this;
    t.datepicker.initialized || (t(document).on("mousedown", t.datepicker._checkExternalClick), t.datepicker.initialized = !0), 0 === t("#" + t.datepicker._mainDivId).length && t("body").append(t.datepicker.dpDiv);
    var i = Array.prototype.slice.call(arguments, 1);
    return "string" != typeof e || "isDisabled" !== e && "getDate" !== e && "widget" !== e ? "option" === e && 2 === arguments.length && "string" == typeof arguments[1] ? t.datepicker["_" + e + "Datepicker"].apply(t.datepicker, [this[0]].concat(i)) : this.each(function () {
      "string" == typeof e ? t.datepicker["_" + e + "Datepicker"].apply(t.datepicker, [this].concat(i)) : t.datepicker._attachDatepicker(this, e);
    }) : t.datepicker["_" + e + "Datepicker"].apply(t.datepicker, [this[0]].concat(i));
  }, t.datepicker = new s(), t.datepicker.initialized = !1, t.datepicker.uuid = new Date().getTime(), t.datepicker.version = "1.12.1", t.datepicker, t.ui.ie = !!/msie [\w.]+/.exec(navigator.userAgent.toLowerCase());

  var _ = !1;

  t(document).on("mouseup", function () {
    _ = !1;
  }), t.widget("ui.mouse", {
    version: "1.12.1",
    options: {
      cancel: "input, textarea, button, select, option",
      distance: 1,
      delay: 0
    },
    _mouseInit: function () {
      var e = this;
      this.element.on("mousedown." + this.widgetName, function (t) {
        return e._mouseDown(t);
      }).on("click." + this.widgetName, function (i) {
        return !0 === t.data(i.target, e.widgetName + ".preventClickEvent") ? (t.removeData(i.target, e.widgetName + ".preventClickEvent"), i.stopImmediatePropagation(), !1) : void 0;
      }), this.started = !1;
    },
    _mouseDestroy: function () {
      this.element.off("." + this.widgetName), this._mouseMoveDelegate && this.document.off("mousemove." + this.widgetName, this._mouseMoveDelegate).off("mouseup." + this.widgetName, this._mouseUpDelegate);
    },
    _mouseDown: function (e) {
      if (!_) {
        this._mouseMoved = !1, this._mouseStarted && this._mouseUp(e), this._mouseDownEvent = e;
        var i = this,
            s = 1 === e.which,
            n = "string" == typeof this.options.cancel && e.target.nodeName ? t(e.target).closest(this.options.cancel).length : !1;
        return s && !n && this._mouseCapture(e) ? (this.mouseDelayMet = !this.options.delay, this.mouseDelayMet || (this._mouseDelayTimer = setTimeout(function () {
          i.mouseDelayMet = !0;
        }, this.options.delay)), this._mouseDistanceMet(e) && this._mouseDelayMet(e) && (this._mouseStarted = this._mouseStart(e) !== !1, !this._mouseStarted) ? (e.preventDefault(), !0) : (!0 === t.data(e.target, this.widgetName + ".preventClickEvent") && t.removeData(e.target, this.widgetName + ".preventClickEvent"), this._mouseMoveDelegate = function (t) {
          return i._mouseMove(t);
        }, this._mouseUpDelegate = function (t) {
          return i._mouseUp(t);
        }, this.document.on("mousemove." + this.widgetName, this._mouseMoveDelegate).on("mouseup." + this.widgetName, this._mouseUpDelegate), e.preventDefault(), _ = !0, !0)) : !0;
      }
    },
    _mouseMove: function (e) {
      if (this._mouseMoved) {
        if (t.ui.ie && (!document.documentMode || 9 > document.documentMode) && !e.button) return this._mouseUp(e);
        if (!e.which) if (e.originalEvent.altKey || e.originalEvent.ctrlKey || e.originalEvent.metaKey || e.originalEvent.shiftKey) this.ignoreMissingWhich = !0;else if (!this.ignoreMissingWhich) return this._mouseUp(e);
      }

      return (e.which || e.button) && (this._mouseMoved = !0), this._mouseStarted ? (this._mouseDrag(e), e.preventDefault()) : (this._mouseDistanceMet(e) && this._mouseDelayMet(e) && (this._mouseStarted = this._mouseStart(this._mouseDownEvent, e) !== !1, this._mouseStarted ? this._mouseDrag(e) : this._mouseUp(e)), !this._mouseStarted);
    },
    _mouseUp: function (e) {
      this.document.off("mousemove." + this.widgetName, this._mouseMoveDelegate).off("mouseup." + this.widgetName, this._mouseUpDelegate), this._mouseStarted && (this._mouseStarted = !1, e.target === this._mouseDownEvent.target && t.data(e.target, this.widgetName + ".preventClickEvent", !0), this._mouseStop(e)), this._mouseDelayTimer && (clearTimeout(this._mouseDelayTimer), delete this._mouseDelayTimer), this.ignoreMissingWhich = !1, _ = !1, e.preventDefault();
    },
    _mouseDistanceMet: function (t) {
      return Math.max(Math.abs(this._mouseDownEvent.pageX - t.pageX), Math.abs(this._mouseDownEvent.pageY - t.pageY)) >= this.options.distance;
    },
    _mouseDelayMet: function () {
      return this.mouseDelayMet;
    },
    _mouseStart: function () {},
    _mouseDrag: function () {},
    _mouseStop: function () {},
    _mouseCapture: function () {
      return !0;
    }
  }), t.ui.plugin = {
    add: function (e, i, s) {
      var n,
          o = t.ui[e].prototype;

      for (n in s) o.plugins[n] = o.plugins[n] || [], o.plugins[n].push([i, s[n]]);
    },
    call: function (t, e, i, s) {
      var n,
          o = t.plugins[e];
      if (o && (s || t.element[0].parentNode && 11 !== t.element[0].parentNode.nodeType)) for (n = 0; o.length > n; n++) t.options[o[n][0]] && o[n][1].apply(t.element, i);
    }
  }, t.ui.safeBlur = function (e) {
    e && "body" !== e.nodeName.toLowerCase() && t(e).trigger("blur");
  }, t.widget("ui.draggable", t.ui.mouse, {
    version: "1.12.1",
    widgetEventPrefix: "drag",
    options: {
      addClasses: !0,
      appendTo: "parent",
      axis: !1,
      connectToSortable: !1,
      containment: !1,
      cursor: "auto",
      cursorAt: !1,
      grid: !1,
      handle: !1,
      helper: "original",
      iframeFix: !1,
      opacity: !1,
      refreshPositions: !1,
      revert: !1,
      revertDuration: 500,
      scope: "default",
      scroll: !0,
      scrollSensitivity: 20,
      scrollSpeed: 20,
      snap: !1,
      snapMode: "both",
      snapTolerance: 20,
      stack: !1,
      zIndex: !1,
      drag: null,
      start: null,
      stop: null
    },
    _create: function () {
      "original" === this.options.helper && this._setPositionRelative(), this.options.addClasses && this._addClass("ui-draggable"), this._setHandleClassName(), this._mouseInit();
    },
    _setOption: function (t, e) {
      this._super(t, e), "handle" === t && (this._removeHandleClassName(), this._setHandleClassName());
    },
    _destroy: function () {
      return (this.helper || this.element).is(".ui-draggable-dragging") ? (this.destroyOnClear = !0, void 0) : (this._removeHandleClassName(), this._mouseDestroy(), void 0);
    },
    _mouseCapture: function (e) {
      var i = this.options;
      return this.helper || i.disabled || t(e.target).closest(".ui-resizable-handle").length > 0 ? !1 : (this.handle = this._getHandle(e), this.handle ? (this._blurActiveElement(e), this._blockFrames(i.iframeFix === !0 ? "iframe" : i.iframeFix), !0) : !1);
    },
    _blockFrames: function (e) {
      this.iframeBlocks = this.document.find(e).map(function () {
        var e = t(this);
        return t("<div>").css("position", "absolute").appendTo(e.parent()).outerWidth(e.outerWidth()).outerHeight(e.outerHeight()).offset(e.offset())[0];
      });
    },
    _unblockFrames: function () {
      this.iframeBlocks && (this.iframeBlocks.remove(), delete this.iframeBlocks);
    },
    _blurActiveElement: function (e) {
      var i = t.ui.safeActiveElement(this.document[0]),
          s = t(e.target);
      s.closest(i).length || t.ui.safeBlur(i);
    },
    _mouseStart: function (e) {
      var i = this.options;
      return this.helper = this._createHelper(e), this._addClass(this.helper, "ui-draggable-dragging"), this._cacheHelperProportions(), t.ui.ddmanager && (t.ui.ddmanager.current = this), this._cacheMargins(), this.cssPosition = this.helper.css("position"), this.scrollParent = this.helper.scrollParent(!0), this.offsetParent = this.helper.offsetParent(), this.hasFixedAncestor = this.helper.parents().filter(function () {
        return "fixed" === t(this).css("position");
      }).length > 0, this.positionAbs = this.element.offset(), this._refreshOffsets(e), this.originalPosition = this.position = this._generatePosition(e, !1), this.originalPageX = e.pageX, this.originalPageY = e.pageY, i.cursorAt && this._adjustOffsetFromHelper(i.cursorAt), this._setContainment(), this._trigger("start", e) === !1 ? (this._clear(), !1) : (this._cacheHelperProportions(), t.ui.ddmanager && !i.dropBehaviour && t.ui.ddmanager.prepareOffsets(this, e), this._mouseDrag(e, !0), t.ui.ddmanager && t.ui.ddmanager.dragStart(this, e), !0);
    },
    _refreshOffsets: function (t) {
      this.offset = {
        top: this.positionAbs.top - this.margins.top,
        left: this.positionAbs.left - this.margins.left,
        scroll: !1,
        parent: this._getParentOffset(),
        relative: this._getRelativeOffset()
      }, this.offset.click = {
        left: t.pageX - this.offset.left,
        top: t.pageY - this.offset.top
      };
    },
    _mouseDrag: function (e, i) {
      if (this.hasFixedAncestor && (this.offset.parent = this._getParentOffset()), this.position = this._generatePosition(e, !0), this.positionAbs = this._convertPositionTo("absolute"), !i) {
        var s = this._uiHash();

        if (this._trigger("drag", e, s) === !1) return this._mouseUp(new t.Event("mouseup", e)), !1;
        this.position = s.position;
      }

      return this.helper[0].style.left = this.position.left + "px", this.helper[0].style.top = this.position.top + "px", t.ui.ddmanager && t.ui.ddmanager.drag(this, e), !1;
    },
    _mouseStop: function (e) {
      var i = this,
          s = !1;
      return t.ui.ddmanager && !this.options.dropBehaviour && (s = t.ui.ddmanager.drop(this, e)), this.dropped && (s = this.dropped, this.dropped = !1), "invalid" === this.options.revert && !s || "valid" === this.options.revert && s || this.options.revert === !0 || t.isFunction(this.options.revert) && this.options.revert.call(this.element, s) ? t(this.helper).animate(this.originalPosition, parseInt(this.options.revertDuration, 10), function () {
        i._trigger("stop", e) !== !1 && i._clear();
      }) : this._trigger("stop", e) !== !1 && this._clear(), !1;
    },
    _mouseUp: function (e) {
      return this._unblockFrames(), t.ui.ddmanager && t.ui.ddmanager.dragStop(this, e), this.handleElement.is(e.target) && this.element.trigger("focus"), t.ui.mouse.prototype._mouseUp.call(this, e);
    },
    cancel: function () {
      return this.helper.is(".ui-draggable-dragging") ? this._mouseUp(new t.Event("mouseup", {
        target: this.element[0]
      })) : this._clear(), this;
    },
    _getHandle: function (e) {
      return this.options.handle ? !!t(e.target).closest(this.element.find(this.options.handle)).length : !0;
    },
    _setHandleClassName: function () {
      this.handleElement = this.options.handle ? this.element.find(this.options.handle) : this.element, this._addClass(this.handleElement, "ui-draggable-handle");
    },
    _removeHandleClassName: function () {
      this._removeClass(this.handleElement, "ui-draggable-handle");
    },
    _createHelper: function (e) {
      var i = this.options,
          s = t.isFunction(i.helper),
          n = s ? t(i.helper.apply(this.element[0], [e])) : "clone" === i.helper ? this.element.clone().removeAttr("id") : this.element;
      return n.parents("body").length || n.appendTo("parent" === i.appendTo ? this.element[0].parentNode : i.appendTo), s && n[0] === this.element[0] && this._setPositionRelative(), n[0] === this.element[0] || /(fixed|absolute)/.test(n.css("position")) || n.css("position", "absolute"), n;
    },
    _setPositionRelative: function () {
      /^(?:r|a|f)/.test(this.element.css("position")) || (this.element[0].style.position = "relative");
    },
    _adjustOffsetFromHelper: function (e) {
      "string" == typeof e && (e = e.split(" ")), t.isArray(e) && (e = {
        left: +e[0],
        top: +e[1] || 0
      }), "left" in e && (this.offset.click.left = e.left + this.margins.left), "right" in e && (this.offset.click.left = this.helperProportions.width - e.right + this.margins.left), "top" in e && (this.offset.click.top = e.top + this.margins.top), "bottom" in e && (this.offset.click.top = this.helperProportions.height - e.bottom + this.margins.top);
    },
    _isRootNode: function (t) {
      return /(html|body)/i.test(t.tagName) || t === this.document[0];
    },
    _getParentOffset: function () {
      var e = this.offsetParent.offset(),
          i = this.document[0];
      return "absolute" === this.cssPosition && this.scrollParent[0] !== i && t.contains(this.scrollParent[0], this.offsetParent[0]) && (e.left += this.scrollParent.scrollLeft(), e.top += this.scrollParent.scrollTop()), this._isRootNode(this.offsetParent[0]) && (e = {
        top: 0,
        left: 0
      }), {
        top: e.top + (parseInt(this.offsetParent.css("borderTopWidth"), 10) || 0),
        left: e.left + (parseInt(this.offsetParent.css("borderLeftWidth"), 10) || 0)
      };
    },
    _getRelativeOffset: function () {
      if ("relative" !== this.cssPosition) return {
        top: 0,
        left: 0
      };

      var t = this.element.position(),
          e = this._isRootNode(this.scrollParent[0]);

      return {
        top: t.top - (parseInt(this.helper.css("top"), 10) || 0) + (e ? 0 : this.scrollParent.scrollTop()),
        left: t.left - (parseInt(this.helper.css("left"), 10) || 0) + (e ? 0 : this.scrollParent.scrollLeft())
      };
    },
    _cacheMargins: function () {
      this.margins = {
        left: parseInt(this.element.css("marginLeft"), 10) || 0,
        top: parseInt(this.element.css("marginTop"), 10) || 0,
        right: parseInt(this.element.css("marginRight"), 10) || 0,
        bottom: parseInt(this.element.css("marginBottom"), 10) || 0
      };
    },
    _cacheHelperProportions: function () {
      this.helperProportions = {
        width: this.helper.outerWidth(),
        height: this.helper.outerHeight()
      };
    },
    _setContainment: function () {
      var e,
          i,
          s,
          n = this.options,
          o = this.document[0];
      return this.relativeContainer = null, n.containment ? "window" === n.containment ? (this.containment = [t(window).scrollLeft() - this.offset.relative.left - this.offset.parent.left, t(window).scrollTop() - this.offset.relative.top - this.offset.parent.top, t(window).scrollLeft() + t(window).width() - this.helperProportions.width - this.margins.left, t(window).scrollTop() + (t(window).height() || o.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top], void 0) : "document" === n.containment ? (this.containment = [0, 0, t(o).width() - this.helperProportions.width - this.margins.left, (t(o).height() || o.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top], void 0) : n.containment.constructor === Array ? (this.containment = n.containment, void 0) : ("parent" === n.containment && (n.containment = this.helper[0].parentNode), i = t(n.containment), s = i[0], s && (e = /(scroll|auto)/.test(i.css("overflow")), this.containment = [(parseInt(i.css("borderLeftWidth"), 10) || 0) + (parseInt(i.css("paddingLeft"), 10) || 0), (parseInt(i.css("borderTopWidth"), 10) || 0) + (parseInt(i.css("paddingTop"), 10) || 0), (e ? Math.max(s.scrollWidth, s.offsetWidth) : s.offsetWidth) - (parseInt(i.css("borderRightWidth"), 10) || 0) - (parseInt(i.css("paddingRight"), 10) || 0) - this.helperProportions.width - this.margins.left - this.margins.right, (e ? Math.max(s.scrollHeight, s.offsetHeight) : s.offsetHeight) - (parseInt(i.css("borderBottomWidth"), 10) || 0) - (parseInt(i.css("paddingBottom"), 10) || 0) - this.helperProportions.height - this.margins.top - this.margins.bottom], this.relativeContainer = i), void 0) : (this.containment = null, void 0);
    },
    _convertPositionTo: function (t, e) {
      e || (e = this.position);

      var i = "absolute" === t ? 1 : -1,
          s = this._isRootNode(this.scrollParent[0]);

      return {
        top: e.top + this.offset.relative.top * i + this.offset.parent.top * i - ("fixed" === this.cssPosition ? -this.offset.scroll.top : s ? 0 : this.offset.scroll.top) * i,
        left: e.left + this.offset.relative.left * i + this.offset.parent.left * i - ("fixed" === this.cssPosition ? -this.offset.scroll.left : s ? 0 : this.offset.scroll.left) * i
      };
    },
    _generatePosition: function (t, e) {
      var i,
          s,
          n,
          o,
          a = this.options,
          r = this._isRootNode(this.scrollParent[0]),
          h = t.pageX,
          l = t.pageY;

      return r && this.offset.scroll || (this.offset.scroll = {
        top: this.scrollParent.scrollTop(),
        left: this.scrollParent.scrollLeft()
      }), e && (this.containment && (this.relativeContainer ? (s = this.relativeContainer.offset(), i = [this.containment[0] + s.left, this.containment[1] + s.top, this.containment[2] + s.left, this.containment[3] + s.top]) : i = this.containment, t.pageX - this.offset.click.left < i[0] && (h = i[0] + this.offset.click.left), t.pageY - this.offset.click.top < i[1] && (l = i[1] + this.offset.click.top), t.pageX - this.offset.click.left > i[2] && (h = i[2] + this.offset.click.left), t.pageY - this.offset.click.top > i[3] && (l = i[3] + this.offset.click.top)), a.grid && (n = a.grid[1] ? this.originalPageY + Math.round((l - this.originalPageY) / a.grid[1]) * a.grid[1] : this.originalPageY, l = i ? n - this.offset.click.top >= i[1] || n - this.offset.click.top > i[3] ? n : n - this.offset.click.top >= i[1] ? n - a.grid[1] : n + a.grid[1] : n, o = a.grid[0] ? this.originalPageX + Math.round((h - this.originalPageX) / a.grid[0]) * a.grid[0] : this.originalPageX, h = i ? o - this.offset.click.left >= i[0] || o - this.offset.click.left > i[2] ? o : o - this.offset.click.left >= i[0] ? o - a.grid[0] : o + a.grid[0] : o), "y" === a.axis && (h = this.originalPageX), "x" === a.axis && (l = this.originalPageY)), {
        top: l - this.offset.click.top - this.offset.relative.top - this.offset.parent.top + ("fixed" === this.cssPosition ? -this.offset.scroll.top : r ? 0 : this.offset.scroll.top),
        left: h - this.offset.click.left - this.offset.relative.left - this.offset.parent.left + ("fixed" === this.cssPosition ? -this.offset.scroll.left : r ? 0 : this.offset.scroll.left)
      };
    },
    _clear: function () {
      this._removeClass(this.helper, "ui-draggable-dragging"), this.helper[0] === this.element[0] || this.cancelHelperRemoval || this.helper.remove(), this.helper = null, this.cancelHelperRemoval = !1, this.destroyOnClear && this.destroy();
    },
    _trigger: function (e, i, s) {
      return s = s || this._uiHash(), t.ui.plugin.call(this, e, [i, s, this], !0), /^(drag|start|stop)/.test(e) && (this.positionAbs = this._convertPositionTo("absolute"), s.offset = this.positionAbs), t.Widget.prototype._trigger.call(this, e, i, s);
    },
    plugins: {},
    _uiHash: function () {
      return {
        helper: this.helper,
        position: this.position,
        originalPosition: this.originalPosition,
        offset: this.positionAbs
      };
    }
  }), t.ui.plugin.add("draggable", "connectToSortable", {
    start: function (e, i, s) {
      var n = t.extend({}, i, {
        item: s.element
      });
      s.sortables = [], t(s.options.connectToSortable).each(function () {
        var i = t(this).sortable("instance");
        i && !i.options.disabled && (s.sortables.push(i), i.refreshPositions(), i._trigger("activate", e, n));
      });
    },
    stop: function (e, i, s) {
      var n = t.extend({}, i, {
        item: s.element
      });
      s.cancelHelperRemoval = !1, t.each(s.sortables, function () {
        var t = this;
        t.isOver ? (t.isOver = 0, s.cancelHelperRemoval = !0, t.cancelHelperRemoval = !1, t._storedCSS = {
          position: t.placeholder.css("position"),
          top: t.placeholder.css("top"),
          left: t.placeholder.css("left")
        }, t._mouseStop(e), t.options.helper = t.options._helper) : (t.cancelHelperRemoval = !0, t._trigger("deactivate", e, n));
      });
    },
    drag: function (e, i, s) {
      t.each(s.sortables, function () {
        var n = !1,
            o = this;
        o.positionAbs = s.positionAbs, o.helperProportions = s.helperProportions, o.offset.click = s.offset.click, o._intersectsWith(o.containerCache) && (n = !0, t.each(s.sortables, function () {
          return this.positionAbs = s.positionAbs, this.helperProportions = s.helperProportions, this.offset.click = s.offset.click, this !== o && this._intersectsWith(this.containerCache) && t.contains(o.element[0], this.element[0]) && (n = !1), n;
        })), n ? (o.isOver || (o.isOver = 1, s._parent = i.helper.parent(), o.currentItem = i.helper.appendTo(o.element).data("ui-sortable-item", !0), o.options._helper = o.options.helper, o.options.helper = function () {
          return i.helper[0];
        }, e.target = o.currentItem[0], o._mouseCapture(e, !0), o._mouseStart(e, !0, !0), o.offset.click.top = s.offset.click.top, o.offset.click.left = s.offset.click.left, o.offset.parent.left -= s.offset.parent.left - o.offset.parent.left, o.offset.parent.top -= s.offset.parent.top - o.offset.parent.top, s._trigger("toSortable", e), s.dropped = o.element, t.each(s.sortables, function () {
          this.refreshPositions();
        }), s.currentItem = s.element, o.fromOutside = s), o.currentItem && (o._mouseDrag(e), i.position = o.position)) : o.isOver && (o.isOver = 0, o.cancelHelperRemoval = !0, o.options._revert = o.options.revert, o.options.revert = !1, o._trigger("out", e, o._uiHash(o)), o._mouseStop(e, !0), o.options.revert = o.options._revert, o.options.helper = o.options._helper, o.placeholder && o.placeholder.remove(), i.helper.appendTo(s._parent), s._refreshOffsets(e), i.position = s._generatePosition(e, !0), s._trigger("fromSortable", e), s.dropped = !1, t.each(s.sortables, function () {
          this.refreshPositions();
        }));
      });
    }
  }), t.ui.plugin.add("draggable", "cursor", {
    start: function (e, i, s) {
      var n = t("body"),
          o = s.options;
      n.css("cursor") && (o._cursor = n.css("cursor")), n.css("cursor", o.cursor);
    },
    stop: function (e, i, s) {
      var n = s.options;
      n._cursor && t("body").css("cursor", n._cursor);
    }
  }), t.ui.plugin.add("draggable", "opacity", {
    start: function (e, i, s) {
      var n = t(i.helper),
          o = s.options;
      n.css("opacity") && (o._opacity = n.css("opacity")), n.css("opacity", o.opacity);
    },
    stop: function (e, i, s) {
      var n = s.options;
      n._opacity && t(i.helper).css("opacity", n._opacity);
    }
  }), t.ui.plugin.add("draggable", "scroll", {
    start: function (t, e, i) {
      i.scrollParentNotHidden || (i.scrollParentNotHidden = i.helper.scrollParent(!1)), i.scrollParentNotHidden[0] !== i.document[0] && "HTML" !== i.scrollParentNotHidden[0].tagName && (i.overflowOffset = i.scrollParentNotHidden.offset());
    },
    drag: function (e, i, s) {
      var n = s.options,
          o = !1,
          a = s.scrollParentNotHidden[0],
          r = s.document[0];
      a !== r && "HTML" !== a.tagName ? (n.axis && "x" === n.axis || (s.overflowOffset.top + a.offsetHeight - e.pageY < n.scrollSensitivity ? a.scrollTop = o = a.scrollTop + n.scrollSpeed : e.pageY - s.overflowOffset.top < n.scrollSensitivity && (a.scrollTop = o = a.scrollTop - n.scrollSpeed)), n.axis && "y" === n.axis || (s.overflowOffset.left + a.offsetWidth - e.pageX < n.scrollSensitivity ? a.scrollLeft = o = a.scrollLeft + n.scrollSpeed : e.pageX - s.overflowOffset.left < n.scrollSensitivity && (a.scrollLeft = o = a.scrollLeft - n.scrollSpeed))) : (n.axis && "x" === n.axis || (e.pageY - t(r).scrollTop() < n.scrollSensitivity ? o = t(r).scrollTop(t(r).scrollTop() - n.scrollSpeed) : t(window).height() - (e.pageY - t(r).scrollTop()) < n.scrollSensitivity && (o = t(r).scrollTop(t(r).scrollTop() + n.scrollSpeed))), n.axis && "y" === n.axis || (e.pageX - t(r).scrollLeft() < n.scrollSensitivity ? o = t(r).scrollLeft(t(r).scrollLeft() - n.scrollSpeed) : t(window).width() - (e.pageX - t(r).scrollLeft()) < n.scrollSensitivity && (o = t(r).scrollLeft(t(r).scrollLeft() + n.scrollSpeed)))), o !== !1 && t.ui.ddmanager && !n.dropBehaviour && t.ui.ddmanager.prepareOffsets(s, e);
    }
  }), t.ui.plugin.add("draggable", "snap", {
    start: function (e, i, s) {
      var n = s.options;
      s.snapElements = [], t(n.snap.constructor !== String ? n.snap.items || ":data(ui-draggable)" : n.snap).each(function () {
        var e = t(this),
            i = e.offset();
        this !== s.element[0] && s.snapElements.push({
          item: this,
          width: e.outerWidth(),
          height: e.outerHeight(),
          top: i.top,
          left: i.left
        });
      });
    },
    drag: function (e, i, s) {
      var n,
          o,
          a,
          r,
          h,
          l,
          c,
          u,
          d,
          p,
          f = s.options,
          g = f.snapTolerance,
          m = i.offset.left,
          _ = m + s.helperProportions.width,
          v = i.offset.top,
          b = v + s.helperProportions.height;

      for (d = s.snapElements.length - 1; d >= 0; d--) h = s.snapElements[d].left - s.margins.left, l = h + s.snapElements[d].width, c = s.snapElements[d].top - s.margins.top, u = c + s.snapElements[d].height, h - g > _ || m > l + g || c - g > b || v > u + g || !t.contains(s.snapElements[d].item.ownerDocument, s.snapElements[d].item) ? (s.snapElements[d].snapping && s.options.snap.release && s.options.snap.release.call(s.element, e, t.extend(s._uiHash(), {
        snapItem: s.snapElements[d].item
      })), s.snapElements[d].snapping = !1) : ("inner" !== f.snapMode && (n = g >= Math.abs(c - b), o = g >= Math.abs(u - v), a = g >= Math.abs(h - _), r = g >= Math.abs(l - m), n && (i.position.top = s._convertPositionTo("relative", {
        top: c - s.helperProportions.height,
        left: 0
      }).top), o && (i.position.top = s._convertPositionTo("relative", {
        top: u,
        left: 0
      }).top), a && (i.position.left = s._convertPositionTo("relative", {
        top: 0,
        left: h - s.helperProportions.width
      }).left), r && (i.position.left = s._convertPositionTo("relative", {
        top: 0,
        left: l
      }).left)), p = n || o || a || r, "outer" !== f.snapMode && (n = g >= Math.abs(c - v), o = g >= Math.abs(u - b), a = g >= Math.abs(h - m), r = g >= Math.abs(l - _), n && (i.position.top = s._convertPositionTo("relative", {
        top: c,
        left: 0
      }).top), o && (i.position.top = s._convertPositionTo("relative", {
        top: u - s.helperProportions.height,
        left: 0
      }).top), a && (i.position.left = s._convertPositionTo("relative", {
        top: 0,
        left: h
      }).left), r && (i.position.left = s._convertPositionTo("relative", {
        top: 0,
        left: l - s.helperProportions.width
      }).left)), !s.snapElements[d].snapping && (n || o || a || r || p) && s.options.snap.snap && s.options.snap.snap.call(s.element, e, t.extend(s._uiHash(), {
        snapItem: s.snapElements[d].item
      })), s.snapElements[d].snapping = n || o || a || r || p);
    }
  }), t.ui.plugin.add("draggable", "stack", {
    start: function (e, i, s) {
      var n,
          o = s.options,
          a = t.makeArray(t(o.stack)).sort(function (e, i) {
        return (parseInt(t(e).css("zIndex"), 10) || 0) - (parseInt(t(i).css("zIndex"), 10) || 0);
      });
      a.length && (n = parseInt(t(a[0]).css("zIndex"), 10) || 0, t(a).each(function (e) {
        t(this).css("zIndex", n + e);
      }), this.css("zIndex", n + a.length));
    }
  }), t.ui.plugin.add("draggable", "zIndex", {
    start: function (e, i, s) {
      var n = t(i.helper),
          o = s.options;
      n.css("zIndex") && (o._zIndex = n.css("zIndex")), n.css("zIndex", o.zIndex);
    },
    stop: function (e, i, s) {
      var n = s.options;
      n._zIndex && t(i.helper).css("zIndex", n._zIndex);
    }
  }), t.ui.draggable, t.widget("ui.resizable", t.ui.mouse, {
    version: "1.12.1",
    widgetEventPrefix: "resize",
    options: {
      alsoResize: !1,
      animate: !1,
      animateDuration: "slow",
      animateEasing: "swing",
      aspectRatio: !1,
      autoHide: !1,
      classes: {
        "ui-resizable-se": "ui-icon ui-icon-gripsmall-diagonal-se"
      },
      containment: !1,
      ghost: !1,
      grid: !1,
      handles: "e,s,se",
      helper: !1,
      maxHeight: null,
      maxWidth: null,
      minHeight: 10,
      minWidth: 10,
      zIndex: 90,
      resize: null,
      start: null,
      stop: null
    },
    _num: function (t) {
      return parseFloat(t) || 0;
    },
    _isNumber: function (t) {
      return !isNaN(parseFloat(t));
    },
    _hasScroll: function (e, i) {
      if ("hidden" === t(e).css("overflow")) return !1;
      var s = i && "left" === i ? "scrollLeft" : "scrollTop",
          n = !1;
      return e[s] > 0 ? !0 : (e[s] = 1, n = e[s] > 0, e[s] = 0, n);
    },
    _create: function () {
      var e,
          i = this.options,
          s = this;
      this._addClass("ui-resizable"), t.extend(this, {
        _aspectRatio: !!i.aspectRatio,
        aspectRatio: i.aspectRatio,
        originalElement: this.element,
        _proportionallyResizeElements: [],
        _helper: i.helper || i.ghost || i.animate ? i.helper || "ui-resizable-helper" : null
      }), this.element[0].nodeName.match(/^(canvas|textarea|input|select|button|img)$/i) && (this.element.wrap(t("<div class='ui-wrapper' style='overflow: hidden;'></div>").css({
        position: this.element.css("position"),
        width: this.element.outerWidth(),
        height: this.element.outerHeight(),
        top: this.element.css("top"),
        left: this.element.css("left")
      })), this.element = this.element.parent().data("ui-resizable", this.element.resizable("instance")), this.elementIsWrapper = !0, e = {
        marginTop: this.originalElement.css("marginTop"),
        marginRight: this.originalElement.css("marginRight"),
        marginBottom: this.originalElement.css("marginBottom"),
        marginLeft: this.originalElement.css("marginLeft")
      }, this.element.css(e), this.originalElement.css("margin", 0), this.originalResizeStyle = this.originalElement.css("resize"), this.originalElement.css("resize", "none"), this._proportionallyResizeElements.push(this.originalElement.css({
        position: "static",
        zoom: 1,
        display: "block"
      })), this.originalElement.css(e), this._proportionallyResize()), this._setupHandles(), i.autoHide && t(this.element).on("mouseenter", function () {
        i.disabled || (s._removeClass("ui-resizable-autohide"), s._handles.show());
      }).on("mouseleave", function () {
        i.disabled || s.resizing || (s._addClass("ui-resizable-autohide"), s._handles.hide());
      }), this._mouseInit();
    },
    _destroy: function () {
      this._mouseDestroy();

      var e,
          i = function (e) {
        t(e).removeData("resizable").removeData("ui-resizable").off(".resizable").find(".ui-resizable-handle").remove();
      };

      return this.elementIsWrapper && (i(this.element), e = this.element, this.originalElement.css({
        position: e.css("position"),
        width: e.outerWidth(),
        height: e.outerHeight(),
        top: e.css("top"),
        left: e.css("left")
      }).insertAfter(e), e.remove()), this.originalElement.css("resize", this.originalResizeStyle), i(this.originalElement), this;
    },
    _setOption: function (t, e) {
      switch (this._super(t, e), t) {
        case "handles":
          this._removeHandles(), this._setupHandles();
          break;

        default:
      }
    },
    _setupHandles: function () {
      var e,
          i,
          s,
          n,
          o,
          a = this.options,
          r = this;
      if (this.handles = a.handles || (t(".ui-resizable-handle", this.element).length ? {
        n: ".ui-resizable-n",
        e: ".ui-resizable-e",
        s: ".ui-resizable-s",
        w: ".ui-resizable-w",
        se: ".ui-resizable-se",
        sw: ".ui-resizable-sw",
        ne: ".ui-resizable-ne",
        nw: ".ui-resizable-nw"
      } : "e,s,se"), this._handles = t(), this.handles.constructor === String) for ("all" === this.handles && (this.handles = "n,e,s,w,se,sw,ne,nw"), s = this.handles.split(","), this.handles = {}, i = 0; s.length > i; i++) e = t.trim(s[i]), n = "ui-resizable-" + e, o = t("<div>"), this._addClass(o, "ui-resizable-handle " + n), o.css({
        zIndex: a.zIndex
      }), this.handles[e] = ".ui-resizable-" + e, this.element.append(o);
      this._renderAxis = function (e) {
        var i, s, n, o;
        e = e || this.element;

        for (i in this.handles) this.handles[i].constructor === String ? this.handles[i] = this.element.children(this.handles[i]).first().show() : (this.handles[i].jquery || this.handles[i].nodeType) && (this.handles[i] = t(this.handles[i]), this._on(this.handles[i], {
          mousedown: r._mouseDown
        })), this.elementIsWrapper && this.originalElement[0].nodeName.match(/^(textarea|input|select|button)$/i) && (s = t(this.handles[i], this.element), o = /sw|ne|nw|se|n|s/.test(i) ? s.outerHeight() : s.outerWidth(), n = ["padding", /ne|nw|n/.test(i) ? "Top" : /se|sw|s/.test(i) ? "Bottom" : /^e$/.test(i) ? "Right" : "Left"].join(""), e.css(n, o), this._proportionallyResize()), this._handles = this._handles.add(this.handles[i]);
      }, this._renderAxis(this.element), this._handles = this._handles.add(this.element.find(".ui-resizable-handle")), this._handles.disableSelection(), this._handles.on("mouseover", function () {
        r.resizing || (this.className && (o = this.className.match(/ui-resizable-(se|sw|ne|nw|n|e|s|w)/i)), r.axis = o && o[1] ? o[1] : "se");
      }), a.autoHide && (this._handles.hide(), this._addClass("ui-resizable-autohide"));
    },
    _removeHandles: function () {
      this._handles.remove();
    },
    _mouseCapture: function (e) {
      var i,
          s,
          n = !1;

      for (i in this.handles) s = t(this.handles[i])[0], (s === e.target || t.contains(s, e.target)) && (n = !0);

      return !this.options.disabled && n;
    },
    _mouseStart: function (e) {
      var i,
          s,
          n,
          o = this.options,
          a = this.element;
      return this.resizing = !0, this._renderProxy(), i = this._num(this.helper.css("left")), s = this._num(this.helper.css("top")), o.containment && (i += t(o.containment).scrollLeft() || 0, s += t(o.containment).scrollTop() || 0), this.offset = this.helper.offset(), this.position = {
        left: i,
        top: s
      }, this.size = this._helper ? {
        width: this.helper.width(),
        height: this.helper.height()
      } : {
        width: a.width(),
        height: a.height()
      }, this.originalSize = this._helper ? {
        width: a.outerWidth(),
        height: a.outerHeight()
      } : {
        width: a.width(),
        height: a.height()
      }, this.sizeDiff = {
        width: a.outerWidth() - a.width(),
        height: a.outerHeight() - a.height()
      }, this.originalPosition = {
        left: i,
        top: s
      }, this.originalMousePosition = {
        left: e.pageX,
        top: e.pageY
      }, this.aspectRatio = "number" == typeof o.aspectRatio ? o.aspectRatio : this.originalSize.width / this.originalSize.height || 1, n = t(".ui-resizable-" + this.axis).css("cursor"), t("body").css("cursor", "auto" === n ? this.axis + "-resize" : n), this._addClass("ui-resizable-resizing"), this._propagate("start", e), !0;
    },
    _mouseDrag: function (e) {
      var i,
          s,
          n = this.originalMousePosition,
          o = this.axis,
          a = e.pageX - n.left || 0,
          r = e.pageY - n.top || 0,
          h = this._change[o];
      return this._updatePrevProperties(), h ? (i = h.apply(this, [e, a, r]), this._updateVirtualBoundaries(e.shiftKey), (this._aspectRatio || e.shiftKey) && (i = this._updateRatio(i, e)), i = this._respectSize(i, e), this._updateCache(i), this._propagate("resize", e), s = this._applyChanges(), !this._helper && this._proportionallyResizeElements.length && this._proportionallyResize(), t.isEmptyObject(s) || (this._updatePrevProperties(), this._trigger("resize", e, this.ui()), this._applyChanges()), !1) : !1;
    },
    _mouseStop: function (e) {
      this.resizing = !1;
      var i,
          s,
          n,
          o,
          a,
          r,
          h,
          l = this.options,
          c = this;
      return this._helper && (i = this._proportionallyResizeElements, s = i.length && /textarea/i.test(i[0].nodeName), n = s && this._hasScroll(i[0], "left") ? 0 : c.sizeDiff.height, o = s ? 0 : c.sizeDiff.width, a = {
        width: c.helper.width() - o,
        height: c.helper.height() - n
      }, r = parseFloat(c.element.css("left")) + (c.position.left - c.originalPosition.left) || null, h = parseFloat(c.element.css("top")) + (c.position.top - c.originalPosition.top) || null, l.animate || this.element.css(t.extend(a, {
        top: h,
        left: r
      })), c.helper.height(c.size.height), c.helper.width(c.size.width), this._helper && !l.animate && this._proportionallyResize()), t("body").css("cursor", "auto"), this._removeClass("ui-resizable-resizing"), this._propagate("stop", e), this._helper && this.helper.remove(), !1;
    },
    _updatePrevProperties: function () {
      this.prevPosition = {
        top: this.position.top,
        left: this.position.left
      }, this.prevSize = {
        width: this.size.width,
        height: this.size.height
      };
    },
    _applyChanges: function () {
      var t = {};
      return this.position.top !== this.prevPosition.top && (t.top = this.position.top + "px"), this.position.left !== this.prevPosition.left && (t.left = this.position.left + "px"), this.size.width !== this.prevSize.width && (t.width = this.size.width + "px"), this.size.height !== this.prevSize.height && (t.height = this.size.height + "px"), this.helper.css(t), t;
    },
    _updateVirtualBoundaries: function (t) {
      var e,
          i,
          s,
          n,
          o,
          a = this.options;
      o = {
        minWidth: this._isNumber(a.minWidth) ? a.minWidth : 0,
        maxWidth: this._isNumber(a.maxWidth) ? a.maxWidth : 1 / 0,
        minHeight: this._isNumber(a.minHeight) ? a.minHeight : 0,
        maxHeight: this._isNumber(a.maxHeight) ? a.maxHeight : 1 / 0
      }, (this._aspectRatio || t) && (e = o.minHeight * this.aspectRatio, s = o.minWidth / this.aspectRatio, i = o.maxHeight * this.aspectRatio, n = o.maxWidth / this.aspectRatio, e > o.minWidth && (o.minWidth = e), s > o.minHeight && (o.minHeight = s), o.maxWidth > i && (o.maxWidth = i), o.maxHeight > n && (o.maxHeight = n)), this._vBoundaries = o;
    },
    _updateCache: function (t) {
      this.offset = this.helper.offset(), this._isNumber(t.left) && (this.position.left = t.left), this._isNumber(t.top) && (this.position.top = t.top), this._isNumber(t.height) && (this.size.height = t.height), this._isNumber(t.width) && (this.size.width = t.width);
    },
    _updateRatio: function (t) {
      var e = this.position,
          i = this.size,
          s = this.axis;
      return this._isNumber(t.height) ? t.width = t.height * this.aspectRatio : this._isNumber(t.width) && (t.height = t.width / this.aspectRatio), "sw" === s && (t.left = e.left + (i.width - t.width), t.top = null), "nw" === s && (t.top = e.top + (i.height - t.height), t.left = e.left + (i.width - t.width)), t;
    },
    _respectSize: function (t) {
      var e = this._vBoundaries,
          i = this.axis,
          s = this._isNumber(t.width) && e.maxWidth && e.maxWidth < t.width,
          n = this._isNumber(t.height) && e.maxHeight && e.maxHeight < t.height,
          o = this._isNumber(t.width) && e.minWidth && e.minWidth > t.width,
          a = this._isNumber(t.height) && e.minHeight && e.minHeight > t.height,
          r = this.originalPosition.left + this.originalSize.width,
          h = this.originalPosition.top + this.originalSize.height,
          l = /sw|nw|w/.test(i),
          c = /nw|ne|n/.test(i);
      return o && (t.width = e.minWidth), a && (t.height = e.minHeight), s && (t.width = e.maxWidth), n && (t.height = e.maxHeight), o && l && (t.left = r - e.minWidth), s && l && (t.left = r - e.maxWidth), a && c && (t.top = h - e.minHeight), n && c && (t.top = h - e.maxHeight), t.width || t.height || t.left || !t.top ? t.width || t.height || t.top || !t.left || (t.left = null) : t.top = null, t;
    },
    _getPaddingPlusBorderDimensions: function (t) {
      for (var e = 0, i = [], s = [t.css("borderTopWidth"), t.css("borderRightWidth"), t.css("borderBottomWidth"), t.css("borderLeftWidth")], n = [t.css("paddingTop"), t.css("paddingRight"), t.css("paddingBottom"), t.css("paddingLeft")]; 4 > e; e++) i[e] = parseFloat(s[e]) || 0, i[e] += parseFloat(n[e]) || 0;

      return {
        height: i[0] + i[2],
        width: i[1] + i[3]
      };
    },
    _proportionallyResize: function () {
      if (this._proportionallyResizeElements.length) for (var t, e = 0, i = this.helper || this.element; this._proportionallyResizeElements.length > e; e++) t = this._proportionallyResizeElements[e], this.outerDimensions || (this.outerDimensions = this._getPaddingPlusBorderDimensions(t)), t.css({
        height: i.height() - this.outerDimensions.height || 0,
        width: i.width() - this.outerDimensions.width || 0
      });
    },
    _renderProxy: function () {
      var e = this.element,
          i = this.options;
      this.elementOffset = e.offset(), this._helper ? (this.helper = this.helper || t("<div style='overflow:hidden;'></div>"), this._addClass(this.helper, this._helper), this.helper.css({
        width: this.element.outerWidth(),
        height: this.element.outerHeight(),
        position: "absolute",
        left: this.elementOffset.left + "px",
        top: this.elementOffset.top + "px",
        zIndex: ++i.zIndex
      }), this.helper.appendTo("body").disableSelection()) : this.helper = this.element;
    },
    _change: {
      e: function (t, e) {
        return {
          width: this.originalSize.width + e
        };
      },
      w: function (t, e) {
        var i = this.originalSize,
            s = this.originalPosition;
        return {
          left: s.left + e,
          width: i.width - e
        };
      },
      n: function (t, e, i) {
        var s = this.originalSize,
            n = this.originalPosition;
        return {
          top: n.top + i,
          height: s.height - i
        };
      },
      s: function (t, e, i) {
        return {
          height: this.originalSize.height + i
        };
      },
      se: function (e, i, s) {
        return t.extend(this._change.s.apply(this, arguments), this._change.e.apply(this, [e, i, s]));
      },
      sw: function (e, i, s) {
        return t.extend(this._change.s.apply(this, arguments), this._change.w.apply(this, [e, i, s]));
      },
      ne: function (e, i, s) {
        return t.extend(this._change.n.apply(this, arguments), this._change.e.apply(this, [e, i, s]));
      },
      nw: function (e, i, s) {
        return t.extend(this._change.n.apply(this, arguments), this._change.w.apply(this, [e, i, s]));
      }
    },
    _propagate: function (e, i) {
      t.ui.plugin.call(this, e, [i, this.ui()]), "resize" !== e && this._trigger(e, i, this.ui());
    },
    plugins: {},
    ui: function () {
      return {
        originalElement: this.originalElement,
        element: this.element,
        helper: this.helper,
        position: this.position,
        size: this.size,
        originalSize: this.originalSize,
        originalPosition: this.originalPosition
      };
    }
  }), t.ui.plugin.add("resizable", "animate", {
    stop: function (e) {
      var i = t(this).resizable("instance"),
          s = i.options,
          n = i._proportionallyResizeElements,
          o = n.length && /textarea/i.test(n[0].nodeName),
          a = o && i._hasScroll(n[0], "left") ? 0 : i.sizeDiff.height,
          r = o ? 0 : i.sizeDiff.width,
          h = {
        width: i.size.width - r,
        height: i.size.height - a
      },
          l = parseFloat(i.element.css("left")) + (i.position.left - i.originalPosition.left) || null,
          c = parseFloat(i.element.css("top")) + (i.position.top - i.originalPosition.top) || null;
      i.element.animate(t.extend(h, c && l ? {
        top: c,
        left: l
      } : {}), {
        duration: s.animateDuration,
        easing: s.animateEasing,
        step: function () {
          var s = {
            width: parseFloat(i.element.css("width")),
            height: parseFloat(i.element.css("height")),
            top: parseFloat(i.element.css("top")),
            left: parseFloat(i.element.css("left"))
          };
          n && n.length && t(n[0]).css({
            width: s.width,
            height: s.height
          }), i._updateCache(s), i._propagate("resize", e);
        }
      });
    }
  }), t.ui.plugin.add("resizable", "containment", {
    start: function () {
      var e,
          i,
          s,
          n,
          o,
          a,
          r,
          h = t(this).resizable("instance"),
          l = h.options,
          c = h.element,
          u = l.containment,
          d = u instanceof t ? u.get(0) : /parent/.test(u) ? c.parent().get(0) : u;
      d && (h.containerElement = t(d), /document/.test(u) || u === document ? (h.containerOffset = {
        left: 0,
        top: 0
      }, h.containerPosition = {
        left: 0,
        top: 0
      }, h.parentData = {
        element: t(document),
        left: 0,
        top: 0,
        width: t(document).width(),
        height: t(document).height() || document.body.parentNode.scrollHeight
      }) : (e = t(d), i = [], t(["Top", "Right", "Left", "Bottom"]).each(function (t, s) {
        i[t] = h._num(e.css("padding" + s));
      }), h.containerOffset = e.offset(), h.containerPosition = e.position(), h.containerSize = {
        height: e.innerHeight() - i[3],
        width: e.innerWidth() - i[1]
      }, s = h.containerOffset, n = h.containerSize.height, o = h.containerSize.width, a = h._hasScroll(d, "left") ? d.scrollWidth : o, r = h._hasScroll(d) ? d.scrollHeight : n, h.parentData = {
        element: d,
        left: s.left,
        top: s.top,
        width: a,
        height: r
      }));
    },
    resize: function (e) {
      var i,
          s,
          n,
          o,
          a = t(this).resizable("instance"),
          r = a.options,
          h = a.containerOffset,
          l = a.position,
          c = a._aspectRatio || e.shiftKey,
          u = {
        top: 0,
        left: 0
      },
          d = a.containerElement,
          p = !0;
      d[0] !== document && /static/.test(d.css("position")) && (u = h), l.left < (a._helper ? h.left : 0) && (a.size.width = a.size.width + (a._helper ? a.position.left - h.left : a.position.left - u.left), c && (a.size.height = a.size.width / a.aspectRatio, p = !1), a.position.left = r.helper ? h.left : 0), l.top < (a._helper ? h.top : 0) && (a.size.height = a.size.height + (a._helper ? a.position.top - h.top : a.position.top), c && (a.size.width = a.size.height * a.aspectRatio, p = !1), a.position.top = a._helper ? h.top : 0), n = a.containerElement.get(0) === a.element.parent().get(0), o = /relative|absolute/.test(a.containerElement.css("position")), n && o ? (a.offset.left = a.parentData.left + a.position.left, a.offset.top = a.parentData.top + a.position.top) : (a.offset.left = a.element.offset().left, a.offset.top = a.element.offset().top), i = Math.abs(a.sizeDiff.width + (a._helper ? a.offset.left - u.left : a.offset.left - h.left)), s = Math.abs(a.sizeDiff.height + (a._helper ? a.offset.top - u.top : a.offset.top - h.top)), i + a.size.width >= a.parentData.width && (a.size.width = a.parentData.width - i, c && (a.size.height = a.size.width / a.aspectRatio, p = !1)), s + a.size.height >= a.parentData.height && (a.size.height = a.parentData.height - s, c && (a.size.width = a.size.height * a.aspectRatio, p = !1)), p || (a.position.left = a.prevPosition.left, a.position.top = a.prevPosition.top, a.size.width = a.prevSize.width, a.size.height = a.prevSize.height);
    },
    stop: function () {
      var e = t(this).resizable("instance"),
          i = e.options,
          s = e.containerOffset,
          n = e.containerPosition,
          o = e.containerElement,
          a = t(e.helper),
          r = a.offset(),
          h = a.outerWidth() - e.sizeDiff.width,
          l = a.outerHeight() - e.sizeDiff.height;
      e._helper && !i.animate && /relative/.test(o.css("position")) && t(this).css({
        left: r.left - n.left - s.left,
        width: h,
        height: l
      }), e._helper && !i.animate && /static/.test(o.css("position")) && t(this).css({
        left: r.left - n.left - s.left,
        width: h,
        height: l
      });
    }
  }), t.ui.plugin.add("resizable", "alsoResize", {
    start: function () {
      var e = t(this).resizable("instance"),
          i = e.options;
      t(i.alsoResize).each(function () {
        var e = t(this);
        e.data("ui-resizable-alsoresize", {
          width: parseFloat(e.width()),
          height: parseFloat(e.height()),
          left: parseFloat(e.css("left")),
          top: parseFloat(e.css("top"))
        });
      });
    },
    resize: function (e, i) {
      var s = t(this).resizable("instance"),
          n = s.options,
          o = s.originalSize,
          a = s.originalPosition,
          r = {
        height: s.size.height - o.height || 0,
        width: s.size.width - o.width || 0,
        top: s.position.top - a.top || 0,
        left: s.position.left - a.left || 0
      };
      t(n.alsoResize).each(function () {
        var e = t(this),
            s = t(this).data("ui-resizable-alsoresize"),
            n = {},
            o = e.parents(i.originalElement[0]).length ? ["width", "height"] : ["width", "height", "top", "left"];
        t.each(o, function (t, e) {
          var i = (s[e] || 0) + (r[e] || 0);
          i && i >= 0 && (n[e] = i || null);
        }), e.css(n);
      });
    },
    stop: function () {
      t(this).removeData("ui-resizable-alsoresize");
    }
  }), t.ui.plugin.add("resizable", "ghost", {
    start: function () {
      var e = t(this).resizable("instance"),
          i = e.size;
      e.ghost = e.originalElement.clone(), e.ghost.css({
        opacity: .25,
        display: "block",
        position: "relative",
        height: i.height,
        width: i.width,
        margin: 0,
        left: 0,
        top: 0
      }), e._addClass(e.ghost, "ui-resizable-ghost"), t.uiBackCompat !== !1 && "string" == typeof e.options.ghost && e.ghost.addClass(this.options.ghost), e.ghost.appendTo(e.helper);
    },
    resize: function () {
      var e = t(this).resizable("instance");
      e.ghost && e.ghost.css({
        position: "relative",
        height: e.size.height,
        width: e.size.width
      });
    },
    stop: function () {
      var e = t(this).resizable("instance");
      e.ghost && e.helper && e.helper.get(0).removeChild(e.ghost.get(0));
    }
  }), t.ui.plugin.add("resizable", "grid", {
    resize: function () {
      var e,
          i = t(this).resizable("instance"),
          s = i.options,
          n = i.size,
          o = i.originalSize,
          a = i.originalPosition,
          r = i.axis,
          h = "number" == typeof s.grid ? [s.grid, s.grid] : s.grid,
          l = h[0] || 1,
          c = h[1] || 1,
          u = Math.round((n.width - o.width) / l) * l,
          d = Math.round((n.height - o.height) / c) * c,
          p = o.width + u,
          f = o.height + d,
          g = s.maxWidth && p > s.maxWidth,
          m = s.maxHeight && f > s.maxHeight,
          _ = s.minWidth && s.minWidth > p,
          v = s.minHeight && s.minHeight > f;

      s.grid = h, _ && (p += l), v && (f += c), g && (p -= l), m && (f -= c), /^(se|s|e)$/.test(r) ? (i.size.width = p, i.size.height = f) : /^(ne)$/.test(r) ? (i.size.width = p, i.size.height = f, i.position.top = a.top - d) : /^(sw)$/.test(r) ? (i.size.width = p, i.size.height = f, i.position.left = a.left - u) : ((0 >= f - c || 0 >= p - l) && (e = i._getPaddingPlusBorderDimensions(this)), f - c > 0 ? (i.size.height = f, i.position.top = a.top - d) : (f = c - e.height, i.size.height = f, i.position.top = a.top + o.height - f), p - l > 0 ? (i.size.width = p, i.position.left = a.left - u) : (p = l - e.width, i.size.width = p, i.position.left = a.left + o.width - p));
    }
  }), t.ui.resizable, t.widget("ui.dialog", {
    version: "1.12.1",
    options: {
      appendTo: "body",
      autoOpen: !0,
      buttons: [],
      classes: {
        "ui-dialog": "ui-corner-all",
        "ui-dialog-titlebar": "ui-corner-all"
      },
      closeOnEscape: !0,
      closeText: "Close",
      draggable: !0,
      hide: null,
      height: "auto",
      maxHeight: null,
      maxWidth: null,
      minHeight: 150,
      minWidth: 150,
      modal: !1,
      position: {
        my: "center",
        at: "center",
        of: window,
        collision: "fit",
        using: function (e) {
          var i = t(this).css(e).offset().top;
          0 > i && t(this).css("top", e.top - i);
        }
      },
      resizable: !0,
      show: null,
      title: null,
      width: 300,
      beforeClose: null,
      close: null,
      drag: null,
      dragStart: null,
      dragStop: null,
      focus: null,
      open: null,
      resize: null,
      resizeStart: null,
      resizeStop: null
    },
    sizeRelatedOptions: {
      buttons: !0,
      height: !0,
      maxHeight: !0,
      maxWidth: !0,
      minHeight: !0,
      minWidth: !0,
      width: !0
    },
    resizableRelatedOptions: {
      maxHeight: !0,
      maxWidth: !0,
      minHeight: !0,
      minWidth: !0
    },
    _create: function () {
      this.originalCss = {
        display: this.element[0].style.display,
        width: this.element[0].style.width,
        minHeight: this.element[0].style.minHeight,
        maxHeight: this.element[0].style.maxHeight,
        height: this.element[0].style.height
      }, this.originalPosition = {
        parent: this.element.parent(),
        index: this.element.parent().children().index(this.element)
      }, this.originalTitle = this.element.attr("title"), null == this.options.title && null != this.originalTitle && (this.options.title = this.originalTitle), this.options.disabled && (this.options.disabled = !1), this._createWrapper(), this.element.show().removeAttr("title").appendTo(this.uiDialog), this._addClass("ui-dialog-content", "ui-widget-content"), this._createTitlebar(), this._createButtonPane(), this.options.draggable && t.fn.draggable && this._makeDraggable(), this.options.resizable && t.fn.resizable && this._makeResizable(), this._isOpen = !1, this._trackFocus();
    },
    _init: function () {
      this.options.autoOpen && this.open();
    },
    _appendTo: function () {
      var e = this.options.appendTo;
      return e && (e.jquery || e.nodeType) ? t(e) : this.document.find(e || "body").eq(0);
    },
    _destroy: function () {
      var t,
          e = this.originalPosition;
      this._untrackInstance(), this._destroyOverlay(), this.element.removeUniqueId().css(this.originalCss).detach(), this.uiDialog.remove(), this.originalTitle && this.element.attr("title", this.originalTitle), t = e.parent.children().eq(e.index), t.length && t[0] !== this.element[0] ? t.before(this.element) : e.parent.append(this.element);
    },
    widget: function () {
      return this.uiDialog;
    },
    disable: t.noop,
    enable: t.noop,
    close: function (e) {
      var i = this;
      this._isOpen && this._trigger("beforeClose", e) !== !1 && (this._isOpen = !1, this._focusedElement = null, this._destroyOverlay(), this._untrackInstance(), this.opener.filter(":focusable").trigger("focus").length || t.ui.safeBlur(t.ui.safeActiveElement(this.document[0])), this._hide(this.uiDialog, this.options.hide, function () {
        i._trigger("close", e);
      }));
    },
    isOpen: function () {
      return this._isOpen;
    },
    moveToTop: function () {
      this._moveToTop();
    },
    _moveToTop: function (e, i) {
      var s = !1,
          n = this.uiDialog.siblings(".ui-front:visible").map(function () {
        return +t(this).css("z-index");
      }).get(),
          o = Math.max.apply(null, n);
      return o >= +this.uiDialog.css("z-index") && (this.uiDialog.css("z-index", o + 1), s = !0), s && !i && this._trigger("focus", e), s;
    },
    open: function () {
      var e = this;
      return this._isOpen ? (this._moveToTop() && this._focusTabbable(), void 0) : (this._isOpen = !0, this.opener = t(t.ui.safeActiveElement(this.document[0])), this._size(), this._position(), this._createOverlay(), this._moveToTop(null, !0), this.overlay && this.overlay.css("z-index", this.uiDialog.css("z-index") - 1), this._show(this.uiDialog, this.options.show, function () {
        e._focusTabbable(), e._trigger("focus");
      }), this._makeFocusTarget(), this._trigger("open"), void 0);
    },
    _focusTabbable: function () {
      var t = this._focusedElement;
      t || (t = this.element.find("[autofocus]")), t.length || (t = this.element.find(":tabbable")), t.length || (t = this.uiDialogButtonPane.find(":tabbable")), t.length || (t = this.uiDialogTitlebarClose.filter(":tabbable")), t.length || (t = this.uiDialog), t.eq(0).trigger("focus");
    },
    _keepFocus: function (e) {
      function i() {
        var e = t.ui.safeActiveElement(this.document[0]),
            i = this.uiDialog[0] === e || t.contains(this.uiDialog[0], e);
        i || this._focusTabbable();
      }

      e.preventDefault(), i.call(this), this._delay(i);
    },
    _createWrapper: function () {
      this.uiDialog = t("<div>").hide().attr({
        tabIndex: -1,
        role: "dialog"
      }).appendTo(this._appendTo()), this._addClass(this.uiDialog, "ui-dialog", "ui-widget ui-widget-content ui-front"), this._on(this.uiDialog, {
        keydown: function (e) {
          if (this.options.closeOnEscape && !e.isDefaultPrevented() && e.keyCode && e.keyCode === t.ui.keyCode.ESCAPE) return e.preventDefault(), this.close(e), void 0;

          if (e.keyCode === t.ui.keyCode.TAB && !e.isDefaultPrevented()) {
            var i = this.uiDialog.find(":tabbable"),
                s = i.filter(":first"),
                n = i.filter(":last");
            e.target !== n[0] && e.target !== this.uiDialog[0] || e.shiftKey ? e.target !== s[0] && e.target !== this.uiDialog[0] || !e.shiftKey || (this._delay(function () {
              n.trigger("focus");
            }), e.preventDefault()) : (this._delay(function () {
              s.trigger("focus");
            }), e.preventDefault());
          }
        },
        mousedown: function (t) {
          this._moveToTop(t) && this._focusTabbable();
        }
      }), this.element.find("[aria-describedby]").length || this.uiDialog.attr({
        "aria-describedby": this.element.uniqueId().attr("id")
      });
    },
    _createTitlebar: function () {
      var e;
      this.uiDialogTitlebar = t("<div>"), this._addClass(this.uiDialogTitlebar, "ui-dialog-titlebar", "ui-widget-header ui-helper-clearfix"), this._on(this.uiDialogTitlebar, {
        mousedown: function (e) {
          t(e.target).closest(".ui-dialog-titlebar-close") || this.uiDialog.trigger("focus");
        }
      }), this.uiDialogTitlebarClose = t("<button type='button'></button>").button({
        label: t("<a>").text(this.options.closeText).html(),
        icon: "ui-icon-closethick",
        showLabel: !1
      }).appendTo(this.uiDialogTitlebar), this._addClass(this.uiDialogTitlebarClose, "ui-dialog-titlebar-close"), this._on(this.uiDialogTitlebarClose, {
        click: function (t) {
          t.preventDefault(), this.close(t);
        }
      }), e = t("<span>").uniqueId().prependTo(this.uiDialogTitlebar), this._addClass(e, "ui-dialog-title"), this._title(e), this.uiDialogTitlebar.prependTo(this.uiDialog), this.uiDialog.attr({
        "aria-labelledby": e.attr("id")
      });
    },
    _title: function (t) {
      this.options.title ? t.text(this.options.title) : t.html("&#160;");
    },
    _createButtonPane: function () {
      this.uiDialogButtonPane = t("<div>"), this._addClass(this.uiDialogButtonPane, "ui-dialog-buttonpane", "ui-widget-content ui-helper-clearfix"), this.uiButtonSet = t("<div>").appendTo(this.uiDialogButtonPane), this._addClass(this.uiButtonSet, "ui-dialog-buttonset"), this._createButtons();
    },
    _createButtons: function () {
      var e = this,
          i = this.options.buttons;
      return this.uiDialogButtonPane.remove(), this.uiButtonSet.empty(), t.isEmptyObject(i) || t.isArray(i) && !i.length ? (this._removeClass(this.uiDialog, "ui-dialog-buttons"), void 0) : (t.each(i, function (i, s) {
        var n, o;
        s = t.isFunction(s) ? {
          click: s,
          text: i
        } : s, s = t.extend({
          type: "button"
        }, s), n = s.click, o = {
          icon: s.icon,
          iconPosition: s.iconPosition,
          showLabel: s.showLabel,
          icons: s.icons,
          text: s.text
        }, delete s.click, delete s.icon, delete s.iconPosition, delete s.showLabel, delete s.icons, "boolean" == typeof s.text && delete s.text, t("<button></button>", s).button(o).appendTo(e.uiButtonSet).on("click", function () {
          n.apply(e.element[0], arguments);
        });
      }), this._addClass(this.uiDialog, "ui-dialog-buttons"), this.uiDialogButtonPane.appendTo(this.uiDialog), void 0);
    },
    _makeDraggable: function () {
      function e(t) {
        return {
          position: t.position,
          offset: t.offset
        };
      }

      var i = this,
          s = this.options;
      this.uiDialog.draggable({
        cancel: ".ui-dialog-content, .ui-dialog-titlebar-close",
        handle: ".ui-dialog-titlebar",
        containment: "document",
        start: function (s, n) {
          i._addClass(t(this), "ui-dialog-dragging"), i._blockFrames(), i._trigger("dragStart", s, e(n));
        },
        drag: function (t, s) {
          i._trigger("drag", t, e(s));
        },
        stop: function (n, o) {
          var a = o.offset.left - i.document.scrollLeft(),
              r = o.offset.top - i.document.scrollTop();
          s.position = {
            my: "left top",
            at: "left" + (a >= 0 ? "+" : "") + a + " " + "top" + (r >= 0 ? "+" : "") + r,
            of: i.window
          }, i._removeClass(t(this), "ui-dialog-dragging"), i._unblockFrames(), i._trigger("dragStop", n, e(o));
        }
      });
    },
    _makeResizable: function () {
      function e(t) {
        return {
          originalPosition: t.originalPosition,
          originalSize: t.originalSize,
          position: t.position,
          size: t.size
        };
      }

      var i = this,
          s = this.options,
          n = s.resizable,
          o = this.uiDialog.css("position"),
          a = "string" == typeof n ? n : "n,e,s,w,se,sw,ne,nw";
      this.uiDialog.resizable({
        cancel: ".ui-dialog-content",
        containment: "document",
        alsoResize: this.element,
        maxWidth: s.maxWidth,
        maxHeight: s.maxHeight,
        minWidth: s.minWidth,
        minHeight: this._minHeight(),
        handles: a,
        start: function (s, n) {
          i._addClass(t(this), "ui-dialog-resizing"), i._blockFrames(), i._trigger("resizeStart", s, e(n));
        },
        resize: function (t, s) {
          i._trigger("resize", t, e(s));
        },
        stop: function (n, o) {
          var a = i.uiDialog.offset(),
              r = a.left - i.document.scrollLeft(),
              h = a.top - i.document.scrollTop();
          s.height = i.uiDialog.height(), s.width = i.uiDialog.width(), s.position = {
            my: "left top",
            at: "left" + (r >= 0 ? "+" : "") + r + " " + "top" + (h >= 0 ? "+" : "") + h,
            of: i.window
          }, i._removeClass(t(this), "ui-dialog-resizing"), i._unblockFrames(), i._trigger("resizeStop", n, e(o));
        }
      }).css("position", o);
    },
    _trackFocus: function () {
      this._on(this.widget(), {
        focusin: function (e) {
          this._makeFocusTarget(), this._focusedElement = t(e.target);
        }
      });
    },
    _makeFocusTarget: function () {
      this._untrackInstance(), this._trackingInstances().unshift(this);
    },
    _untrackInstance: function () {
      var e = this._trackingInstances(),
          i = t.inArray(this, e);

      -1 !== i && e.splice(i, 1);
    },
    _trackingInstances: function () {
      var t = this.document.data("ui-dialog-instances");
      return t || (t = [], this.document.data("ui-dialog-instances", t)), t;
    },
    _minHeight: function () {
      var t = this.options;
      return "auto" === t.height ? t.minHeight : Math.min(t.minHeight, t.height);
    },
    _position: function () {
      var t = this.uiDialog.is(":visible");
      t || this.uiDialog.show(), this.uiDialog.position(this.options.position), t || this.uiDialog.hide();
    },
    _setOptions: function (e) {
      var i = this,
          s = !1,
          n = {};
      t.each(e, function (t, e) {
        i._setOption(t, e), t in i.sizeRelatedOptions && (s = !0), t in i.resizableRelatedOptions && (n[t] = e);
      }), s && (this._size(), this._position()), this.uiDialog.is(":data(ui-resizable)") && this.uiDialog.resizable("option", n);
    },
    _setOption: function (e, i) {
      var s,
          n,
          o = this.uiDialog;
      "disabled" !== e && (this._super(e, i), "appendTo" === e && this.uiDialog.appendTo(this._appendTo()), "buttons" === e && this._createButtons(), "closeText" === e && this.uiDialogTitlebarClose.button({
        label: t("<a>").text("" + this.options.closeText).html()
      }), "draggable" === e && (s = o.is(":data(ui-draggable)"), s && !i && o.draggable("destroy"), !s && i && this._makeDraggable()), "position" === e && this._position(), "resizable" === e && (n = o.is(":data(ui-resizable)"), n && !i && o.resizable("destroy"), n && "string" == typeof i && o.resizable("option", "handles", i), n || i === !1 || this._makeResizable()), "title" === e && this._title(this.uiDialogTitlebar.find(".ui-dialog-title")));
    },
    _size: function () {
      var t,
          e,
          i,
          s = this.options;
      this.element.show().css({
        width: "auto",
        minHeight: 0,
        maxHeight: "none",
        height: 0
      }), s.minWidth > s.width && (s.width = s.minWidth), t = this.uiDialog.css({
        height: "auto",
        width: s.width
      }).outerHeight(), e = Math.max(0, s.minHeight - t), i = "number" == typeof s.maxHeight ? Math.max(0, s.maxHeight - t) : "none", "auto" === s.height ? this.element.css({
        minHeight: e,
        maxHeight: i,
        height: "auto"
      }) : this.element.height(Math.max(0, s.height - t)), this.uiDialog.is(":data(ui-resizable)") && this.uiDialog.resizable("option", "minHeight", this._minHeight());
    },
    _blockFrames: function () {
      this.iframeBlocks = this.document.find("iframe").map(function () {
        var e = t(this);
        return t("<div>").css({
          position: "absolute",
          width: e.outerWidth(),
          height: e.outerHeight()
        }).appendTo(e.parent()).offset(e.offset())[0];
      });
    },
    _unblockFrames: function () {
      this.iframeBlocks && (this.iframeBlocks.remove(), delete this.iframeBlocks);
    },
    _allowInteraction: function (e) {
      return t(e.target).closest(".ui-dialog").length ? !0 : !!t(e.target).closest(".ui-datepicker").length;
    },
    _createOverlay: function () {
      if (this.options.modal) {
        var e = !0;
        this._delay(function () {
          e = !1;
        }), this.document.data("ui-dialog-overlays") || this._on(this.document, {
          focusin: function (t) {
            e || this._allowInteraction(t) || (t.preventDefault(), this._trackingInstances()[0]._focusTabbable());
          }
        }), this.overlay = t("<div>").appendTo(this._appendTo()), this._addClass(this.overlay, null, "ui-widget-overlay ui-front"), this._on(this.overlay, {
          mousedown: "_keepFocus"
        }), this.document.data("ui-dialog-overlays", (this.document.data("ui-dialog-overlays") || 0) + 1);
      }
    },
    _destroyOverlay: function () {
      if (this.options.modal && this.overlay) {
        var t = this.document.data("ui-dialog-overlays") - 1;
        t ? this.document.data("ui-dialog-overlays", t) : (this._off(this.document, "focusin"), this.document.removeData("ui-dialog-overlays")), this.overlay.remove(), this.overlay = null;
      }
    }
  }), t.uiBackCompat !== !1 && t.widget("ui.dialog", t.ui.dialog, {
    options: {
      dialogClass: ""
    },
    _createWrapper: function () {
      this._super(), this.uiDialog.addClass(this.options.dialogClass);
    },
    _setOption: function (t, e) {
      "dialogClass" === t && this.uiDialog.removeClass(this.options.dialogClass).addClass(e), this._superApply(arguments);
    }
  }), t.ui.dialog, t.widget("ui.droppable", {
    version: "1.12.1",
    widgetEventPrefix: "drop",
    options: {
      accept: "*",
      addClasses: !0,
      greedy: !1,
      scope: "default",
      tolerance: "intersect",
      activate: null,
      deactivate: null,
      drop: null,
      out: null,
      over: null
    },
    _create: function () {
      var e,
          i = this.options,
          s = i.accept;
      this.isover = !1, this.isout = !0, this.accept = t.isFunction(s) ? s : function (t) {
        return t.is(s);
      }, this.proportions = function () {
        return arguments.length ? (e = arguments[0], void 0) : e ? e : e = {
          width: this.element[0].offsetWidth,
          height: this.element[0].offsetHeight
        };
      }, this._addToManager(i.scope), i.addClasses && this._addClass("ui-droppable");
    },
    _addToManager: function (e) {
      t.ui.ddmanager.droppables[e] = t.ui.ddmanager.droppables[e] || [], t.ui.ddmanager.droppables[e].push(this);
    },
    _splice: function (t) {
      for (var e = 0; t.length > e; e++) t[e] === this && t.splice(e, 1);
    },
    _destroy: function () {
      var e = t.ui.ddmanager.droppables[this.options.scope];

      this._splice(e);
    },
    _setOption: function (e, i) {
      if ("accept" === e) this.accept = t.isFunction(i) ? i : function (t) {
        return t.is(i);
      };else if ("scope" === e) {
        var s = t.ui.ddmanager.droppables[this.options.scope];
        this._splice(s), this._addToManager(i);
      }

      this._super(e, i);
    },
    _activate: function (e) {
      var i = t.ui.ddmanager.current;
      this._addActiveClass(), i && this._trigger("activate", e, this.ui(i));
    },
    _deactivate: function (e) {
      var i = t.ui.ddmanager.current;
      this._removeActiveClass(), i && this._trigger("deactivate", e, this.ui(i));
    },
    _over: function (e) {
      var i = t.ui.ddmanager.current;
      i && (i.currentItem || i.element)[0] !== this.element[0] && this.accept.call(this.element[0], i.currentItem || i.element) && (this._addHoverClass(), this._trigger("over", e, this.ui(i)));
    },
    _out: function (e) {
      var i = t.ui.ddmanager.current;
      i && (i.currentItem || i.element)[0] !== this.element[0] && this.accept.call(this.element[0], i.currentItem || i.element) && (this._removeHoverClass(), this._trigger("out", e, this.ui(i)));
    },
    _drop: function (e, i) {
      var s = i || t.ui.ddmanager.current,
          n = !1;
      return s && (s.currentItem || s.element)[0] !== this.element[0] ? (this.element.find(":data(ui-droppable)").not(".ui-draggable-dragging").each(function () {
        var i = t(this).droppable("instance");
        return i.options.greedy && !i.options.disabled && i.options.scope === s.options.scope && i.accept.call(i.element[0], s.currentItem || s.element) && v(s, t.extend(i, {
          offset: i.element.offset()
        }), i.options.tolerance, e) ? (n = !0, !1) : void 0;
      }), n ? !1 : this.accept.call(this.element[0], s.currentItem || s.element) ? (this._removeActiveClass(), this._removeHoverClass(), this._trigger("drop", e, this.ui(s)), this.element) : !1) : !1;
    },
    ui: function (t) {
      return {
        draggable: t.currentItem || t.element,
        helper: t.helper,
        position: t.position,
        offset: t.positionAbs
      };
    },
    _addHoverClass: function () {
      this._addClass("ui-droppable-hover");
    },
    _removeHoverClass: function () {
      this._removeClass("ui-droppable-hover");
    },
    _addActiveClass: function () {
      this._addClass("ui-droppable-active");
    },
    _removeActiveClass: function () {
      this._removeClass("ui-droppable-active");
    }
  });

  var v = t.ui.intersect = function () {
    function t(t, e, i) {
      return t >= e && e + i > t;
    }

    return function (e, i, s, n) {
      if (!i.offset) return !1;
      var o = (e.positionAbs || e.position.absolute).left + e.margins.left,
          a = (e.positionAbs || e.position.absolute).top + e.margins.top,
          r = o + e.helperProportions.width,
          h = a + e.helperProportions.height,
          l = i.offset.left,
          c = i.offset.top,
          u = l + i.proportions().width,
          d = c + i.proportions().height;

      switch (s) {
        case "fit":
          return o >= l && u >= r && a >= c && d >= h;

        case "intersect":
          return o + e.helperProportions.width / 2 > l && u > r - e.helperProportions.width / 2 && a + e.helperProportions.height / 2 > c && d > h - e.helperProportions.height / 2;

        case "pointer":
          return t(n.pageY, c, i.proportions().height) && t(n.pageX, l, i.proportions().width);

        case "touch":
          return (a >= c && d >= a || h >= c && d >= h || c > a && h > d) && (o >= l && u >= o || r >= l && u >= r || l > o && r > u);

        default:
          return !1;
      }
    };
  }();

  t.ui.ddmanager = {
    current: null,
    droppables: {
      "default": []
    },
    prepareOffsets: function (e, i) {
      var s,
          n,
          o = t.ui.ddmanager.droppables[e.options.scope] || [],
          a = i ? i.type : null,
          r = (e.currentItem || e.element).find(":data(ui-droppable)").addBack();

      t: for (s = 0; o.length > s; s++) if (!(o[s].options.disabled || e && !o[s].accept.call(o[s].element[0], e.currentItem || e.element))) {
        for (n = 0; r.length > n; n++) if (r[n] === o[s].element[0]) {
          o[s].proportions().height = 0;
          continue t;
        }

        o[s].visible = "none" !== o[s].element.css("display"), o[s].visible && ("mousedown" === a && o[s]._activate.call(o[s], i), o[s].offset = o[s].element.offset(), o[s].proportions({
          width: o[s].element[0].offsetWidth,
          height: o[s].element[0].offsetHeight
        }));
      }
    },
    drop: function (e, i) {
      var s = !1;
      return t.each((t.ui.ddmanager.droppables[e.options.scope] || []).slice(), function () {
        this.options && (!this.options.disabled && this.visible && v(e, this, this.options.tolerance, i) && (s = this._drop.call(this, i) || s), !this.options.disabled && this.visible && this.accept.call(this.element[0], e.currentItem || e.element) && (this.isout = !0, this.isover = !1, this._deactivate.call(this, i)));
      }), s;
    },
    dragStart: function (e, i) {
      e.element.parentsUntil("body").on("scroll.droppable", function () {
        e.options.refreshPositions || t.ui.ddmanager.prepareOffsets(e, i);
      });
    },
    drag: function (e, i) {
      e.options.refreshPositions && t.ui.ddmanager.prepareOffsets(e, i), t.each(t.ui.ddmanager.droppables[e.options.scope] || [], function () {
        if (!this.options.disabled && !this.greedyChild && this.visible) {
          var s,
              n,
              o,
              a = v(e, this, this.options.tolerance, i),
              r = !a && this.isover ? "isout" : a && !this.isover ? "isover" : null;
          r && (this.options.greedy && (n = this.options.scope, o = this.element.parents(":data(ui-droppable)").filter(function () {
            return t(this).droppable("instance").options.scope === n;
          }), o.length && (s = t(o[0]).droppable("instance"), s.greedyChild = "isover" === r)), s && "isover" === r && (s.isover = !1, s.isout = !0, s._out.call(s, i)), this[r] = !0, this["isout" === r ? "isover" : "isout"] = !1, this["isover" === r ? "_over" : "_out"].call(this, i), s && "isout" === r && (s.isout = !1, s.isover = !0, s._over.call(s, i)));
        }
      });
    },
    dragStop: function (e, i) {
      e.element.parentsUntil("body").off("scroll.droppable"), e.options.refreshPositions || t.ui.ddmanager.prepareOffsets(e, i);
    }
  }, t.uiBackCompat !== !1 && t.widget("ui.droppable", t.ui.droppable, {
    options: {
      hoverClass: !1,
      activeClass: !1
    },
    _addActiveClass: function () {
      this._super(), this.options.activeClass && this.element.addClass(this.options.activeClass);
    },
    _removeActiveClass: function () {
      this._super(), this.options.activeClass && this.element.removeClass(this.options.activeClass);
    },
    _addHoverClass: function () {
      this._super(), this.options.hoverClass && this.element.addClass(this.options.hoverClass);
    },
    _removeHoverClass: function () {
      this._super(), this.options.hoverClass && this.element.removeClass(this.options.hoverClass);
    }
  }), t.ui.droppable, t.widget("ui.progressbar", {
    version: "1.12.1",
    options: {
      classes: {
        "ui-progressbar": "ui-corner-all",
        "ui-progressbar-value": "ui-corner-left",
        "ui-progressbar-complete": "ui-corner-right"
      },
      max: 100,
      value: 0,
      change: null,
      complete: null
    },
    min: 0,
    _create: function () {
      this.oldValue = this.options.value = this._constrainedValue(), this.element.attr({
        role: "progressbar",
        "aria-valuemin": this.min
      }), this._addClass("ui-progressbar", "ui-widget ui-widget-content"), this.valueDiv = t("<div>").appendTo(this.element), this._addClass(this.valueDiv, "ui-progressbar-value", "ui-widget-header"), this._refreshValue();
    },
    _destroy: function () {
      this.element.removeAttr("role aria-valuemin aria-valuemax aria-valuenow"), this.valueDiv.remove();
    },
    value: function (t) {
      return void 0 === t ? this.options.value : (this.options.value = this._constrainedValue(t), this._refreshValue(), void 0);
    },
    _constrainedValue: function (t) {
      return void 0 === t && (t = this.options.value), this.indeterminate = t === !1, "number" != typeof t && (t = 0), this.indeterminate ? !1 : Math.min(this.options.max, Math.max(this.min, t));
    },
    _setOptions: function (t) {
      var e = t.value;
      delete t.value, this._super(t), this.options.value = this._constrainedValue(e), this._refreshValue();
    },
    _setOption: function (t, e) {
      "max" === t && (e = Math.max(this.min, e)), this._super(t, e);
    },
    _setOptionDisabled: function (t) {
      this._super(t), this.element.attr("aria-disabled", t), this._toggleClass(null, "ui-state-disabled", !!t);
    },
    _percentage: function () {
      return this.indeterminate ? 100 : 100 * (this.options.value - this.min) / (this.options.max - this.min);
    },
    _refreshValue: function () {
      var e = this.options.value,
          i = this._percentage();

      this.valueDiv.toggle(this.indeterminate || e > this.min).width(i.toFixed(0) + "%"), this._toggleClass(this.valueDiv, "ui-progressbar-complete", null, e === this.options.max)._toggleClass("ui-progressbar-indeterminate", null, this.indeterminate), this.indeterminate ? (this.element.removeAttr("aria-valuenow"), this.overlayDiv || (this.overlayDiv = t("<div>").appendTo(this.valueDiv), this._addClass(this.overlayDiv, "ui-progressbar-overlay"))) : (this.element.attr({
        "aria-valuemax": this.options.max,
        "aria-valuenow": e
      }), this.overlayDiv && (this.overlayDiv.remove(), this.overlayDiv = null)), this.oldValue !== e && (this.oldValue = e, this._trigger("change")), e === this.options.max && this._trigger("complete");
    }
  }), t.widget("ui.selectable", t.ui.mouse, {
    version: "1.12.1",
    options: {
      appendTo: "body",
      autoRefresh: !0,
      distance: 0,
      filter: "*",
      tolerance: "touch",
      selected: null,
      selecting: null,
      start: null,
      stop: null,
      unselected: null,
      unselecting: null
    },
    _create: function () {
      var e = this;
      this._addClass("ui-selectable"), this.dragged = !1, this.refresh = function () {
        e.elementPos = t(e.element[0]).offset(), e.selectees = t(e.options.filter, e.element[0]), e._addClass(e.selectees, "ui-selectee"), e.selectees.each(function () {
          var i = t(this),
              s = i.offset(),
              n = {
            left: s.left - e.elementPos.left,
            top: s.top - e.elementPos.top
          };
          t.data(this, "selectable-item", {
            element: this,
            $element: i,
            left: n.left,
            top: n.top,
            right: n.left + i.outerWidth(),
            bottom: n.top + i.outerHeight(),
            startselected: !1,
            selected: i.hasClass("ui-selected"),
            selecting: i.hasClass("ui-selecting"),
            unselecting: i.hasClass("ui-unselecting")
          });
        });
      }, this.refresh(), this._mouseInit(), this.helper = t("<div>"), this._addClass(this.helper, "ui-selectable-helper");
    },
    _destroy: function () {
      this.selectees.removeData("selectable-item"), this._mouseDestroy();
    },
    _mouseStart: function (e) {
      var i = this,
          s = this.options;
      this.opos = [e.pageX, e.pageY], this.elementPos = t(this.element[0]).offset(), this.options.disabled || (this.selectees = t(s.filter, this.element[0]), this._trigger("start", e), t(s.appendTo).append(this.helper), this.helper.css({
        left: e.pageX,
        top: e.pageY,
        width: 0,
        height: 0
      }), s.autoRefresh && this.refresh(), this.selectees.filter(".ui-selected").each(function () {
        var s = t.data(this, "selectable-item");
        s.startselected = !0, e.metaKey || e.ctrlKey || (i._removeClass(s.$element, "ui-selected"), s.selected = !1, i._addClass(s.$element, "ui-unselecting"), s.unselecting = !0, i._trigger("unselecting", e, {
          unselecting: s.element
        }));
      }), t(e.target).parents().addBack().each(function () {
        var s,
            n = t.data(this, "selectable-item");
        return n ? (s = !e.metaKey && !e.ctrlKey || !n.$element.hasClass("ui-selected"), i._removeClass(n.$element, s ? "ui-unselecting" : "ui-selected")._addClass(n.$element, s ? "ui-selecting" : "ui-unselecting"), n.unselecting = !s, n.selecting = s, n.selected = s, s ? i._trigger("selecting", e, {
          selecting: n.element
        }) : i._trigger("unselecting", e, {
          unselecting: n.element
        }), !1) : void 0;
      }));
    },
    _mouseDrag: function (e) {
      if (this.dragged = !0, !this.options.disabled) {
        var i,
            s = this,
            n = this.options,
            o = this.opos[0],
            a = this.opos[1],
            r = e.pageX,
            h = e.pageY;
        return o > r && (i = r, r = o, o = i), a > h && (i = h, h = a, a = i), this.helper.css({
          left: o,
          top: a,
          width: r - o,
          height: h - a
        }), this.selectees.each(function () {
          var i = t.data(this, "selectable-item"),
              l = !1,
              c = {};
          i && i.element !== s.element[0] && (c.left = i.left + s.elementPos.left, c.right = i.right + s.elementPos.left, c.top = i.top + s.elementPos.top, c.bottom = i.bottom + s.elementPos.top, "touch" === n.tolerance ? l = !(c.left > r || o > c.right || c.top > h || a > c.bottom) : "fit" === n.tolerance && (l = c.left > o && r > c.right && c.top > a && h > c.bottom), l ? (i.selected && (s._removeClass(i.$element, "ui-selected"), i.selected = !1), i.unselecting && (s._removeClass(i.$element, "ui-unselecting"), i.unselecting = !1), i.selecting || (s._addClass(i.$element, "ui-selecting"), i.selecting = !0, s._trigger("selecting", e, {
            selecting: i.element
          }))) : (i.selecting && ((e.metaKey || e.ctrlKey) && i.startselected ? (s._removeClass(i.$element, "ui-selecting"), i.selecting = !1, s._addClass(i.$element, "ui-selected"), i.selected = !0) : (s._removeClass(i.$element, "ui-selecting"), i.selecting = !1, i.startselected && (s._addClass(i.$element, "ui-unselecting"), i.unselecting = !0), s._trigger("unselecting", e, {
            unselecting: i.element
          }))), i.selected && (e.metaKey || e.ctrlKey || i.startselected || (s._removeClass(i.$element, "ui-selected"), i.selected = !1, s._addClass(i.$element, "ui-unselecting"), i.unselecting = !0, s._trigger("unselecting", e, {
            unselecting: i.element
          })))));
        }), !1;
      }
    },
    _mouseStop: function (e) {
      var i = this;
      return this.dragged = !1, t(".ui-unselecting", this.element[0]).each(function () {
        var s = t.data(this, "selectable-item");
        i._removeClass(s.$element, "ui-unselecting"), s.unselecting = !1, s.startselected = !1, i._trigger("unselected", e, {
          unselected: s.element
        });
      }), t(".ui-selecting", this.element[0]).each(function () {
        var s = t.data(this, "selectable-item");
        i._removeClass(s.$element, "ui-selecting")._addClass(s.$element, "ui-selected"), s.selecting = !1, s.selected = !0, s.startselected = !0, i._trigger("selected", e, {
          selected: s.element
        });
      }), this._trigger("stop", e), this.helper.remove(), !1;
    }
  }), t.widget("ui.selectmenu", [t.ui.formResetMixin, {
    version: "1.12.1",
    defaultElement: "<select>",
    options: {
      appendTo: null,
      classes: {
        "ui-selectmenu-button-open": "ui-corner-top",
        "ui-selectmenu-button-closed": "ui-corner-all"
      },
      disabled: null,
      icons: {
        button: "ui-icon-triangle-1-s"
      },
      position: {
        my: "left top",
        at: "left bottom",
        collision: "none"
      },
      width: !1,
      change: null,
      close: null,
      focus: null,
      open: null,
      select: null
    },
    _create: function () {
      var e = this.element.uniqueId().attr("id");
      this.ids = {
        element: e,
        button: e + "-button",
        menu: e + "-menu"
      }, this._drawButton(), this._drawMenu(), this._bindFormResetHandler(), this._rendered = !1, this.menuItems = t();
    },
    _drawButton: function () {
      var e,
          i = this,
          s = this._parseOption(this.element.find("option:selected"), this.element[0].selectedIndex);

      this.labels = this.element.labels().attr("for", this.ids.button), this._on(this.labels, {
        click: function (t) {
          this.button.focus(), t.preventDefault();
        }
      }), this.element.hide(), this.button = t("<span>", {
        tabindex: this.options.disabled ? -1 : 0,
        id: this.ids.button,
        role: "combobox",
        "aria-expanded": "false",
        "aria-autocomplete": "list",
        "aria-owns": this.ids.menu,
        "aria-haspopup": "true",
        title: this.element.attr("title")
      }).insertAfter(this.element), this._addClass(this.button, "ui-selectmenu-button ui-selectmenu-button-closed", "ui-button ui-widget"), e = t("<span>").appendTo(this.button), this._addClass(e, "ui-selectmenu-icon", "ui-icon " + this.options.icons.button), this.buttonItem = this._renderButtonItem(s).appendTo(this.button), this.options.width !== !1 && this._resizeButton(), this._on(this.button, this._buttonEvents), this.button.one("focusin", function () {
        i._rendered || i._refreshMenu();
      });
    },
    _drawMenu: function () {
      var e = this;
      this.menu = t("<ul>", {
        "aria-hidden": "true",
        "aria-labelledby": this.ids.button,
        id: this.ids.menu
      }), this.menuWrap = t("<div>").append(this.menu), this._addClass(this.menuWrap, "ui-selectmenu-menu", "ui-front"), this.menuWrap.appendTo(this._appendTo()), this.menuInstance = this.menu.menu({
        classes: {
          "ui-menu": "ui-corner-bottom"
        },
        role: "listbox",
        select: function (t, i) {
          t.preventDefault(), e._setSelection(), e._select(i.item.data("ui-selectmenu-item"), t);
        },
        focus: function (t, i) {
          var s = i.item.data("ui-selectmenu-item");
          null != e.focusIndex && s.index !== e.focusIndex && (e._trigger("focus", t, {
            item: s
          }), e.isOpen || e._select(s, t)), e.focusIndex = s.index, e.button.attr("aria-activedescendant", e.menuItems.eq(s.index).attr("id"));
        }
      }).menu("instance"), this.menuInstance._off(this.menu, "mouseleave"), this.menuInstance._closeOnDocumentClick = function () {
        return !1;
      }, this.menuInstance._isDivider = function () {
        return !1;
      };
    },
    refresh: function () {
      this._refreshMenu(), this.buttonItem.replaceWith(this.buttonItem = this._renderButtonItem(this._getSelectedItem().data("ui-selectmenu-item") || {})), null === this.options.width && this._resizeButton();
    },
    _refreshMenu: function () {
      var t,
          e = this.element.find("option");
      this.menu.empty(), this._parseOptions(e), this._renderMenu(this.menu, this.items), this.menuInstance.refresh(), this.menuItems = this.menu.find("li").not(".ui-selectmenu-optgroup").find(".ui-menu-item-wrapper"), this._rendered = !0, e.length && (t = this._getSelectedItem(), this.menuInstance.focus(null, t), this._setAria(t.data("ui-selectmenu-item")), this._setOption("disabled", this.element.prop("disabled")));
    },
    open: function (t) {
      this.options.disabled || (this._rendered ? (this._removeClass(this.menu.find(".ui-state-active"), null, "ui-state-active"), this.menuInstance.focus(null, this._getSelectedItem())) : this._refreshMenu(), this.menuItems.length && (this.isOpen = !0, this._toggleAttr(), this._resizeMenu(), this._position(), this._on(this.document, this._documentClick), this._trigger("open", t)));
    },
    _position: function () {
      this.menuWrap.position(t.extend({
        of: this.button
      }, this.options.position));
    },
    close: function (t) {
      this.isOpen && (this.isOpen = !1, this._toggleAttr(), this.range = null, this._off(this.document), this._trigger("close", t));
    },
    widget: function () {
      return this.button;
    },
    menuWidget: function () {
      return this.menu;
    },
    _renderButtonItem: function (e) {
      var i = t("<span>");
      return this._setText(i, e.label), this._addClass(i, "ui-selectmenu-text"), i;
    },
    _renderMenu: function (e, i) {
      var s = this,
          n = "";
      t.each(i, function (i, o) {
        var a;
        o.optgroup !== n && (a = t("<li>", {
          text: o.optgroup
        }), s._addClass(a, "ui-selectmenu-optgroup", "ui-menu-divider" + (o.element.parent("optgroup").prop("disabled") ? " ui-state-disabled" : "")), a.appendTo(e), n = o.optgroup), s._renderItemData(e, o);
      });
    },
    _renderItemData: function (t, e) {
      return this._renderItem(t, e).data("ui-selectmenu-item", e);
    },
    _renderItem: function (e, i) {
      var s = t("<li>"),
          n = t("<div>", {
        title: i.element.attr("title")
      });
      return i.disabled && this._addClass(s, null, "ui-state-disabled"), this._setText(n, i.label), s.append(n).appendTo(e);
    },
    _setText: function (t, e) {
      e ? t.text(e) : t.html("&#160;");
    },
    _move: function (t, e) {
      var i,
          s,
          n = ".ui-menu-item";
      this.isOpen ? i = this.menuItems.eq(this.focusIndex).parent("li") : (i = this.menuItems.eq(this.element[0].selectedIndex).parent("li"), n += ":not(.ui-state-disabled)"), s = "first" === t || "last" === t ? i["first" === t ? "prevAll" : "nextAll"](n).eq(-1) : i[t + "All"](n).eq(0), s.length && this.menuInstance.focus(e, s);
    },
    _getSelectedItem: function () {
      return this.menuItems.eq(this.element[0].selectedIndex).parent("li");
    },
    _toggle: function (t) {
      this[this.isOpen ? "close" : "open"](t);
    },
    _setSelection: function () {
      var t;
      this.range && (window.getSelection ? (t = window.getSelection(), t.removeAllRanges(), t.addRange(this.range)) : this.range.select(), this.button.focus());
    },
    _documentClick: {
      mousedown: function (e) {
        this.isOpen && (t(e.target).closest(".ui-selectmenu-menu, #" + t.ui.escapeSelector(this.ids.button)).length || this.close(e));
      }
    },
    _buttonEvents: {
      mousedown: function () {
        var t;
        window.getSelection ? (t = window.getSelection(), t.rangeCount && (this.range = t.getRangeAt(0))) : this.range = document.selection.createRange();
      },
      click: function (t) {
        this._setSelection(), this._toggle(t);
      },
      keydown: function (e) {
        var i = !0;

        switch (e.keyCode) {
          case t.ui.keyCode.TAB:
          case t.ui.keyCode.ESCAPE:
            this.close(e), i = !1;
            break;

          case t.ui.keyCode.ENTER:
            this.isOpen && this._selectFocusedItem(e);
            break;

          case t.ui.keyCode.UP:
            e.altKey ? this._toggle(e) : this._move("prev", e);
            break;

          case t.ui.keyCode.DOWN:
            e.altKey ? this._toggle(e) : this._move("next", e);
            break;

          case t.ui.keyCode.SPACE:
            this.isOpen ? this._selectFocusedItem(e) : this._toggle(e);
            break;

          case t.ui.keyCode.LEFT:
            this._move("prev", e);

            break;

          case t.ui.keyCode.RIGHT:
            this._move("next", e);

            break;

          case t.ui.keyCode.HOME:
          case t.ui.keyCode.PAGE_UP:
            this._move("first", e);

            break;

          case t.ui.keyCode.END:
          case t.ui.keyCode.PAGE_DOWN:
            this._move("last", e);

            break;

          default:
            this.menu.trigger(e), i = !1;
        }

        i && e.preventDefault();
      }
    },
    _selectFocusedItem: function (t) {
      var e = this.menuItems.eq(this.focusIndex).parent("li");
      e.hasClass("ui-state-disabled") || this._select(e.data("ui-selectmenu-item"), t);
    },
    _select: function (t, e) {
      var i = this.element[0].selectedIndex;
      this.element[0].selectedIndex = t.index, this.buttonItem.replaceWith(this.buttonItem = this._renderButtonItem(t)), this._setAria(t), this._trigger("select", e, {
        item: t
      }), t.index !== i && this._trigger("change", e, {
        item: t
      }), this.close(e);
    },
    _setAria: function (t) {
      var e = this.menuItems.eq(t.index).attr("id");
      this.button.attr({
        "aria-labelledby": e,
        "aria-activedescendant": e
      }), this.menu.attr("aria-activedescendant", e);
    },
    _setOption: function (t, e) {
      if ("icons" === t) {
        var i = this.button.find("span.ui-icon");

        this._removeClass(i, null, this.options.icons.button)._addClass(i, null, e.button);
      }

      this._super(t, e), "appendTo" === t && this.menuWrap.appendTo(this._appendTo()), "width" === t && this._resizeButton();
    },
    _setOptionDisabled: function (t) {
      this._super(t), this.menuInstance.option("disabled", t), this.button.attr("aria-disabled", t), this._toggleClass(this.button, null, "ui-state-disabled", t), this.element.prop("disabled", t), t ? (this.button.attr("tabindex", -1), this.close()) : this.button.attr("tabindex", 0);
    },
    _appendTo: function () {
      var e = this.options.appendTo;
      return e && (e = e.jquery || e.nodeType ? t(e) : this.document.find(e).eq(0)), e && e[0] || (e = this.element.closest(".ui-front, dialog")), e.length || (e = this.document[0].body), e;
    },
    _toggleAttr: function () {
      this.button.attr("aria-expanded", this.isOpen), this._removeClass(this.button, "ui-selectmenu-button-" + (this.isOpen ? "closed" : "open"))._addClass(this.button, "ui-selectmenu-button-" + (this.isOpen ? "open" : "closed"))._toggleClass(this.menuWrap, "ui-selectmenu-open", null, this.isOpen), this.menu.attr("aria-hidden", !this.isOpen);
    },
    _resizeButton: function () {
      var t = this.options.width;
      return t === !1 ? (this.button.css("width", ""), void 0) : (null === t && (t = this.element.show().outerWidth(), this.element.hide()), this.button.outerWidth(t), void 0);
    },
    _resizeMenu: function () {
      this.menu.outerWidth(Math.max(this.button.outerWidth(), this.menu.width("").outerWidth() + 1));
    },
    _getCreateOptions: function () {
      var t = this._super();

      return t.disabled = this.element.prop("disabled"), t;
    },
    _parseOptions: function (e) {
      var i = this,
          s = [];
      e.each(function (e, n) {
        s.push(i._parseOption(t(n), e));
      }), this.items = s;
    },
    _parseOption: function (t, e) {
      var i = t.parent("optgroup");
      return {
        element: t,
        index: e,
        value: t.val(),
        label: t.text(),
        optgroup: i.attr("label") || "",
        disabled: i.prop("disabled") || t.prop("disabled")
      };
    },
    _destroy: function () {
      this._unbindFormResetHandler(), this.menuWrap.remove(), this.button.remove(), this.element.show(), this.element.removeUniqueId(), this.labels.attr("for", this.ids.element);
    }
  }]), t.widget("ui.slider", t.ui.mouse, {
    version: "1.12.1",
    widgetEventPrefix: "slide",
    options: {
      animate: !1,
      classes: {
        "ui-slider": "ui-corner-all",
        "ui-slider-handle": "ui-corner-all",
        "ui-slider-range": "ui-corner-all ui-widget-header"
      },
      distance: 0,
      max: 100,
      min: 0,
      orientation: "horizontal",
      range: !1,
      step: 1,
      value: 0,
      values: null,
      change: null,
      slide: null,
      start: null,
      stop: null
    },
    numPages: 5,
    _create: function () {
      this._keySliding = !1, this._mouseSliding = !1, this._animateOff = !0, this._handleIndex = null, this._detectOrientation(), this._mouseInit(), this._calculateNewMax(), this._addClass("ui-slider ui-slider-" + this.orientation, "ui-widget ui-widget-content"), this._refresh(), this._animateOff = !1;
    },
    _refresh: function () {
      this._createRange(), this._createHandles(), this._setupEvents(), this._refreshValue();
    },
    _createHandles: function () {
      var e,
          i,
          s = this.options,
          n = this.element.find(".ui-slider-handle"),
          o = "<span tabindex='0'></span>",
          a = [];

      for (i = s.values && s.values.length || 1, n.length > i && (n.slice(i).remove(), n = n.slice(0, i)), e = n.length; i > e; e++) a.push(o);

      this.handles = n.add(t(a.join("")).appendTo(this.element)), this._addClass(this.handles, "ui-slider-handle", "ui-state-default"), this.handle = this.handles.eq(0), this.handles.each(function (e) {
        t(this).data("ui-slider-handle-index", e).attr("tabIndex", 0);
      });
    },
    _createRange: function () {
      var e = this.options;
      e.range ? (e.range === !0 && (e.values ? e.values.length && 2 !== e.values.length ? e.values = [e.values[0], e.values[0]] : t.isArray(e.values) && (e.values = e.values.slice(0)) : e.values = [this._valueMin(), this._valueMin()]), this.range && this.range.length ? (this._removeClass(this.range, "ui-slider-range-min ui-slider-range-max"), this.range.css({
        left: "",
        bottom: ""
      })) : (this.range = t("<div>").appendTo(this.element), this._addClass(this.range, "ui-slider-range")), ("min" === e.range || "max" === e.range) && this._addClass(this.range, "ui-slider-range-" + e.range)) : (this.range && this.range.remove(), this.range = null);
    },
    _setupEvents: function () {
      this._off(this.handles), this._on(this.handles, this._handleEvents), this._hoverable(this.handles), this._focusable(this.handles);
    },
    _destroy: function () {
      this.handles.remove(), this.range && this.range.remove(), this._mouseDestroy();
    },
    _mouseCapture: function (e) {
      var i,
          s,
          n,
          o,
          a,
          r,
          h,
          l,
          c = this,
          u = this.options;
      return u.disabled ? !1 : (this.elementSize = {
        width: this.element.outerWidth(),
        height: this.element.outerHeight()
      }, this.elementOffset = this.element.offset(), i = {
        x: e.pageX,
        y: e.pageY
      }, s = this._normValueFromMouse(i), n = this._valueMax() - this._valueMin() + 1, this.handles.each(function (e) {
        var i = Math.abs(s - c.values(e));
        (n > i || n === i && (e === c._lastChangedValue || c.values(e) === u.min)) && (n = i, o = t(this), a = e);
      }), r = this._start(e, a), r === !1 ? !1 : (this._mouseSliding = !0, this._handleIndex = a, this._addClass(o, null, "ui-state-active"), o.trigger("focus"), h = o.offset(), l = !t(e.target).parents().addBack().is(".ui-slider-handle"), this._clickOffset = l ? {
        left: 0,
        top: 0
      } : {
        left: e.pageX - h.left - o.width() / 2,
        top: e.pageY - h.top - o.height() / 2 - (parseInt(o.css("borderTopWidth"), 10) || 0) - (parseInt(o.css("borderBottomWidth"), 10) || 0) + (parseInt(o.css("marginTop"), 10) || 0)
      }, this.handles.hasClass("ui-state-hover") || this._slide(e, a, s), this._animateOff = !0, !0));
    },
    _mouseStart: function () {
      return !0;
    },
    _mouseDrag: function (t) {
      var e = {
        x: t.pageX,
        y: t.pageY
      },
          i = this._normValueFromMouse(e);

      return this._slide(t, this._handleIndex, i), !1;
    },
    _mouseStop: function (t) {
      return this._removeClass(this.handles, null, "ui-state-active"), this._mouseSliding = !1, this._stop(t, this._handleIndex), this._change(t, this._handleIndex), this._handleIndex = null, this._clickOffset = null, this._animateOff = !1, !1;
    },
    _detectOrientation: function () {
      this.orientation = "vertical" === this.options.orientation ? "vertical" : "horizontal";
    },
    _normValueFromMouse: function (t) {
      var e, i, s, n, o;
      return "horizontal" === this.orientation ? (e = this.elementSize.width, i = t.x - this.elementOffset.left - (this._clickOffset ? this._clickOffset.left : 0)) : (e = this.elementSize.height, i = t.y - this.elementOffset.top - (this._clickOffset ? this._clickOffset.top : 0)), s = i / e, s > 1 && (s = 1), 0 > s && (s = 0), "vertical" === this.orientation && (s = 1 - s), n = this._valueMax() - this._valueMin(), o = this._valueMin() + s * n, this._trimAlignValue(o);
    },
    _uiHash: function (t, e, i) {
      var s = {
        handle: this.handles[t],
        handleIndex: t,
        value: void 0 !== e ? e : this.value()
      };
      return this._hasMultipleValues() && (s.value = void 0 !== e ? e : this.values(t), s.values = i || this.values()), s;
    },
    _hasMultipleValues: function () {
      return this.options.values && this.options.values.length;
    },
    _start: function (t, e) {
      return this._trigger("start", t, this._uiHash(e));
    },
    _slide: function (t, e, i) {
      var s,
          n,
          o = this.value(),
          a = this.values();
      this._hasMultipleValues() && (n = this.values(e ? 0 : 1), o = this.values(e), 2 === this.options.values.length && this.options.range === !0 && (i = 0 === e ? Math.min(n, i) : Math.max(n, i)), a[e] = i), i !== o && (s = this._trigger("slide", t, this._uiHash(e, i, a)), s !== !1 && (this._hasMultipleValues() ? this.values(e, i) : this.value(i)));
    },
    _stop: function (t, e) {
      this._trigger("stop", t, this._uiHash(e));
    },
    _change: function (t, e) {
      this._keySliding || this._mouseSliding || (this._lastChangedValue = e, this._trigger("change", t, this._uiHash(e)));
    },
    value: function (t) {
      return arguments.length ? (this.options.value = this._trimAlignValue(t), this._refreshValue(), this._change(null, 0), void 0) : this._value();
    },
    values: function (e, i) {
      var s, n, o;
      if (arguments.length > 1) return this.options.values[e] = this._trimAlignValue(i), this._refreshValue(), this._change(null, e), void 0;
      if (!arguments.length) return this._values();
      if (!t.isArray(arguments[0])) return this._hasMultipleValues() ? this._values(e) : this.value();

      for (s = this.options.values, n = arguments[0], o = 0; s.length > o; o += 1) s[o] = this._trimAlignValue(n[o]), this._change(null, o);

      this._refreshValue();
    },
    _setOption: function (e, i) {
      var s,
          n = 0;

      switch ("range" === e && this.options.range === !0 && ("min" === i ? (this.options.value = this._values(0), this.options.values = null) : "max" === i && (this.options.value = this._values(this.options.values.length - 1), this.options.values = null)), t.isArray(this.options.values) && (n = this.options.values.length), this._super(e, i), e) {
        case "orientation":
          this._detectOrientation(), this._removeClass("ui-slider-horizontal ui-slider-vertical")._addClass("ui-slider-" + this.orientation), this._refreshValue(), this.options.range && this._refreshRange(i), this.handles.css("horizontal" === i ? "bottom" : "left", "");
          break;

        case "value":
          this._animateOff = !0, this._refreshValue(), this._change(null, 0), this._animateOff = !1;
          break;

        case "values":
          for (this._animateOff = !0, this._refreshValue(), s = n - 1; s >= 0; s--) this._change(null, s);

          this._animateOff = !1;
          break;

        case "step":
        case "min":
        case "max":
          this._animateOff = !0, this._calculateNewMax(), this._refreshValue(), this._animateOff = !1;
          break;

        case "range":
          this._animateOff = !0, this._refresh(), this._animateOff = !1;
      }
    },
    _setOptionDisabled: function (t) {
      this._super(t), this._toggleClass(null, "ui-state-disabled", !!t);
    },
    _value: function () {
      var t = this.options.value;
      return t = this._trimAlignValue(t);
    },
    _values: function (t) {
      var e, i, s;
      if (arguments.length) return e = this.options.values[t], e = this._trimAlignValue(e);

      if (this._hasMultipleValues()) {
        for (i = this.options.values.slice(), s = 0; i.length > s; s += 1) i[s] = this._trimAlignValue(i[s]);

        return i;
      }

      return [];
    },
    _trimAlignValue: function (t) {
      if (this._valueMin() >= t) return this._valueMin();
      if (t >= this._valueMax()) return this._valueMax();
      var e = this.options.step > 0 ? this.options.step : 1,
          i = (t - this._valueMin()) % e,
          s = t - i;
      return 2 * Math.abs(i) >= e && (s += i > 0 ? e : -e), parseFloat(s.toFixed(5));
    },
    _calculateNewMax: function () {
      var t = this.options.max,
          e = this._valueMin(),
          i = this.options.step,
          s = Math.round((t - e) / i) * i;

      t = s + e, t > this.options.max && (t -= i), this.max = parseFloat(t.toFixed(this._precision()));
    },
    _precision: function () {
      var t = this._precisionOf(this.options.step);

      return null !== this.options.min && (t = Math.max(t, this._precisionOf(this.options.min))), t;
    },
    _precisionOf: function (t) {
      var e = "" + t,
          i = e.indexOf(".");
      return -1 === i ? 0 : e.length - i - 1;
    },
    _valueMin: function () {
      return this.options.min;
    },
    _valueMax: function () {
      return this.max;
    },
    _refreshRange: function (t) {
      "vertical" === t && this.range.css({
        width: "",
        left: ""
      }), "horizontal" === t && this.range.css({
        height: "",
        bottom: ""
      });
    },
    _refreshValue: function () {
      var e,
          i,
          s,
          n,
          o,
          a = this.options.range,
          r = this.options,
          h = this,
          l = this._animateOff ? !1 : r.animate,
          c = {};
      this._hasMultipleValues() ? this.handles.each(function (s) {
        i = 100 * ((h.values(s) - h._valueMin()) / (h._valueMax() - h._valueMin())), c["horizontal" === h.orientation ? "left" : "bottom"] = i + "%", t(this).stop(1, 1)[l ? "animate" : "css"](c, r.animate), h.options.range === !0 && ("horizontal" === h.orientation ? (0 === s && h.range.stop(1, 1)[l ? "animate" : "css"]({
          left: i + "%"
        }, r.animate), 1 === s && h.range[l ? "animate" : "css"]({
          width: i - e + "%"
        }, {
          queue: !1,
          duration: r.animate
        })) : (0 === s && h.range.stop(1, 1)[l ? "animate" : "css"]({
          bottom: i + "%"
        }, r.animate), 1 === s && h.range[l ? "animate" : "css"]({
          height: i - e + "%"
        }, {
          queue: !1,
          duration: r.animate
        }))), e = i;
      }) : (s = this.value(), n = this._valueMin(), o = this._valueMax(), i = o !== n ? 100 * ((s - n) / (o - n)) : 0, c["horizontal" === this.orientation ? "left" : "bottom"] = i + "%", this.handle.stop(1, 1)[l ? "animate" : "css"](c, r.animate), "min" === a && "horizontal" === this.orientation && this.range.stop(1, 1)[l ? "animate" : "css"]({
        width: i + "%"
      }, r.animate), "max" === a && "horizontal" === this.orientation && this.range.stop(1, 1)[l ? "animate" : "css"]({
        width: 100 - i + "%"
      }, r.animate), "min" === a && "vertical" === this.orientation && this.range.stop(1, 1)[l ? "animate" : "css"]({
        height: i + "%"
      }, r.animate), "max" === a && "vertical" === this.orientation && this.range.stop(1, 1)[l ? "animate" : "css"]({
        height: 100 - i + "%"
      }, r.animate));
    },
    _handleEvents: {
      keydown: function (e) {
        var i,
            s,
            n,
            o,
            a = t(e.target).data("ui-slider-handle-index");

        switch (e.keyCode) {
          case t.ui.keyCode.HOME:
          case t.ui.keyCode.END:
          case t.ui.keyCode.PAGE_UP:
          case t.ui.keyCode.PAGE_DOWN:
          case t.ui.keyCode.UP:
          case t.ui.keyCode.RIGHT:
          case t.ui.keyCode.DOWN:
          case t.ui.keyCode.LEFT:
            if (e.preventDefault(), !this._keySliding && (this._keySliding = !0, this._addClass(t(e.target), null, "ui-state-active"), i = this._start(e, a), i === !1)) return;
        }

        switch (o = this.options.step, s = n = this._hasMultipleValues() ? this.values(a) : this.value(), e.keyCode) {
          case t.ui.keyCode.HOME:
            n = this._valueMin();
            break;

          case t.ui.keyCode.END:
            n = this._valueMax();
            break;

          case t.ui.keyCode.PAGE_UP:
            n = this._trimAlignValue(s + (this._valueMax() - this._valueMin()) / this.numPages);
            break;

          case t.ui.keyCode.PAGE_DOWN:
            n = this._trimAlignValue(s - (this._valueMax() - this._valueMin()) / this.numPages);
            break;

          case t.ui.keyCode.UP:
          case t.ui.keyCode.RIGHT:
            if (s === this._valueMax()) return;
            n = this._trimAlignValue(s + o);
            break;

          case t.ui.keyCode.DOWN:
          case t.ui.keyCode.LEFT:
            if (s === this._valueMin()) return;
            n = this._trimAlignValue(s - o);
        }

        this._slide(e, a, n);
      },
      keyup: function (e) {
        var i = t(e.target).data("ui-slider-handle-index");
        this._keySliding && (this._keySliding = !1, this._stop(e, i), this._change(e, i), this._removeClass(t(e.target), null, "ui-state-active"));
      }
    }
  }), t.widget("ui.sortable", t.ui.mouse, {
    version: "1.12.1",
    widgetEventPrefix: "sort",
    ready: !1,
    options: {
      appendTo: "parent",
      axis: !1,
      connectWith: !1,
      containment: !1,
      cursor: "auto",
      cursorAt: !1,
      dropOnEmpty: !0,
      forcePlaceholderSize: !1,
      forceHelperSize: !1,
      grid: !1,
      handle: !1,
      helper: "original",
      items: "> *",
      opacity: !1,
      placeholder: !1,
      revert: !1,
      scroll: !0,
      scrollSensitivity: 20,
      scrollSpeed: 20,
      scope: "default",
      tolerance: "intersect",
      zIndex: 1e3,
      activate: null,
      beforeStop: null,
      change: null,
      deactivate: null,
      out: null,
      over: null,
      receive: null,
      remove: null,
      sort: null,
      start: null,
      stop: null,
      update: null
    },
    _isOverAxis: function (t, e, i) {
      return t >= e && e + i > t;
    },
    _isFloating: function (t) {
      return /left|right/.test(t.css("float")) || /inline|table-cell/.test(t.css("display"));
    },
    _create: function () {
      this.containerCache = {}, this._addClass("ui-sortable"), this.refresh(), this.offset = this.element.offset(), this._mouseInit(), this._setHandleClassName(), this.ready = !0;
    },
    _setOption: function (t, e) {
      this._super(t, e), "handle" === t && this._setHandleClassName();
    },
    _setHandleClassName: function () {
      var e = this;
      this._removeClass(this.element.find(".ui-sortable-handle"), "ui-sortable-handle"), t.each(this.items, function () {
        e._addClass(this.instance.options.handle ? this.item.find(this.instance.options.handle) : this.item, "ui-sortable-handle");
      });
    },
    _destroy: function () {
      this._mouseDestroy();

      for (var t = this.items.length - 1; t >= 0; t--) this.items[t].item.removeData(this.widgetName + "-item");

      return this;
    },
    _mouseCapture: function (e, i) {
      var s = null,
          n = !1,
          o = this;
      return this.reverting ? !1 : this.options.disabled || "static" === this.options.type ? !1 : (this._refreshItems(e), t(e.target).parents().each(function () {
        return t.data(this, o.widgetName + "-item") === o ? (s = t(this), !1) : void 0;
      }), t.data(e.target, o.widgetName + "-item") === o && (s = t(e.target)), s ? !this.options.handle || i || (t(this.options.handle, s).find("*").addBack().each(function () {
        this === e.target && (n = !0);
      }), n) ? (this.currentItem = s, this._removeCurrentsFromItems(), !0) : !1 : !1);
    },
    _mouseStart: function (e, i, s) {
      var n,
          o,
          a = this.options;
      if (this.currentContainer = this, this.refreshPositions(), this.helper = this._createHelper(e), this._cacheHelperProportions(), this._cacheMargins(), this.scrollParent = this.helper.scrollParent(), this.offset = this.currentItem.offset(), this.offset = {
        top: this.offset.top - this.margins.top,
        left: this.offset.left - this.margins.left
      }, t.extend(this.offset, {
        click: {
          left: e.pageX - this.offset.left,
          top: e.pageY - this.offset.top
        },
        parent: this._getParentOffset(),
        relative: this._getRelativeOffset()
      }), this.helper.css("position", "absolute"), this.cssPosition = this.helper.css("position"), this.originalPosition = this._generatePosition(e), this.originalPageX = e.pageX, this.originalPageY = e.pageY, a.cursorAt && this._adjustOffsetFromHelper(a.cursorAt), this.domPosition = {
        prev: this.currentItem.prev()[0],
        parent: this.currentItem.parent()[0]
      }, this.helper[0] !== this.currentItem[0] && this.currentItem.hide(), this._createPlaceholder(), a.containment && this._setContainment(), a.cursor && "auto" !== a.cursor && (o = this.document.find("body"), this.storedCursor = o.css("cursor"), o.css("cursor", a.cursor), this.storedStylesheet = t("<style>*{ cursor: " + a.cursor + " !important; }</style>").appendTo(o)), a.opacity && (this.helper.css("opacity") && (this._storedOpacity = this.helper.css("opacity")), this.helper.css("opacity", a.opacity)), a.zIndex && (this.helper.css("zIndex") && (this._storedZIndex = this.helper.css("zIndex")), this.helper.css("zIndex", a.zIndex)), this.scrollParent[0] !== this.document[0] && "HTML" !== this.scrollParent[0].tagName && (this.overflowOffset = this.scrollParent.offset()), this._trigger("start", e, this._uiHash()), this._preserveHelperProportions || this._cacheHelperProportions(), !s) for (n = this.containers.length - 1; n >= 0; n--) this.containers[n]._trigger("activate", e, this._uiHash(this));
      return t.ui.ddmanager && (t.ui.ddmanager.current = this), t.ui.ddmanager && !a.dropBehaviour && t.ui.ddmanager.prepareOffsets(this, e), this.dragging = !0, this._addClass(this.helper, "ui-sortable-helper"), this._mouseDrag(e), !0;
    },
    _mouseDrag: function (e) {
      var i,
          s,
          n,
          o,
          a = this.options,
          r = !1;

      for (this.position = this._generatePosition(e), this.positionAbs = this._convertPositionTo("absolute"), this.lastPositionAbs || (this.lastPositionAbs = this.positionAbs), this.options.scroll && (this.scrollParent[0] !== this.document[0] && "HTML" !== this.scrollParent[0].tagName ? (this.overflowOffset.top + this.scrollParent[0].offsetHeight - e.pageY < a.scrollSensitivity ? this.scrollParent[0].scrollTop = r = this.scrollParent[0].scrollTop + a.scrollSpeed : e.pageY - this.overflowOffset.top < a.scrollSensitivity && (this.scrollParent[0].scrollTop = r = this.scrollParent[0].scrollTop - a.scrollSpeed), this.overflowOffset.left + this.scrollParent[0].offsetWidth - e.pageX < a.scrollSensitivity ? this.scrollParent[0].scrollLeft = r = this.scrollParent[0].scrollLeft + a.scrollSpeed : e.pageX - this.overflowOffset.left < a.scrollSensitivity && (this.scrollParent[0].scrollLeft = r = this.scrollParent[0].scrollLeft - a.scrollSpeed)) : (e.pageY - this.document.scrollTop() < a.scrollSensitivity ? r = this.document.scrollTop(this.document.scrollTop() - a.scrollSpeed) : this.window.height() - (e.pageY - this.document.scrollTop()) < a.scrollSensitivity && (r = this.document.scrollTop(this.document.scrollTop() + a.scrollSpeed)), e.pageX - this.document.scrollLeft() < a.scrollSensitivity ? r = this.document.scrollLeft(this.document.scrollLeft() - a.scrollSpeed) : this.window.width() - (e.pageX - this.document.scrollLeft()) < a.scrollSensitivity && (r = this.document.scrollLeft(this.document.scrollLeft() + a.scrollSpeed))), r !== !1 && t.ui.ddmanager && !a.dropBehaviour && t.ui.ddmanager.prepareOffsets(this, e)), this.positionAbs = this._convertPositionTo("absolute"), this.options.axis && "y" === this.options.axis || (this.helper[0].style.left = this.position.left + "px"), this.options.axis && "x" === this.options.axis || (this.helper[0].style.top = this.position.top + "px"), i = this.items.length - 1; i >= 0; i--) if (s = this.items[i], n = s.item[0], o = this._intersectsWithPointer(s), o && s.instance === this.currentContainer && n !== this.currentItem[0] && this.placeholder[1 === o ? "next" : "prev"]()[0] !== n && !t.contains(this.placeholder[0], n) && ("semi-dynamic" === this.options.type ? !t.contains(this.element[0], n) : !0)) {
        if (this.direction = 1 === o ? "down" : "up", "pointer" !== this.options.tolerance && !this._intersectsWithSides(s)) break;
        this._rearrange(e, s), this._trigger("change", e, this._uiHash());
        break;
      }

      return this._contactContainers(e), t.ui.ddmanager && t.ui.ddmanager.drag(this, e), this._trigger("sort", e, this._uiHash()), this.lastPositionAbs = this.positionAbs, !1;
    },
    _mouseStop: function (e, i) {
      if (e) {
        if (t.ui.ddmanager && !this.options.dropBehaviour && t.ui.ddmanager.drop(this, e), this.options.revert) {
          var s = this,
              n = this.placeholder.offset(),
              o = this.options.axis,
              a = {};
          o && "x" !== o || (a.left = n.left - this.offset.parent.left - this.margins.left + (this.offsetParent[0] === this.document[0].body ? 0 : this.offsetParent[0].scrollLeft)), o && "y" !== o || (a.top = n.top - this.offset.parent.top - this.margins.top + (this.offsetParent[0] === this.document[0].body ? 0 : this.offsetParent[0].scrollTop)), this.reverting = !0, t(this.helper).animate(a, parseInt(this.options.revert, 10) || 500, function () {
            s._clear(e);
          });
        } else this._clear(e, i);

        return !1;
      }
    },
    cancel: function () {
      if (this.dragging) {
        this._mouseUp(new t.Event("mouseup", {
          target: null
        })), "original" === this.options.helper ? (this.currentItem.css(this._storedCSS), this._removeClass(this.currentItem, "ui-sortable-helper")) : this.currentItem.show();

        for (var e = this.containers.length - 1; e >= 0; e--) this.containers[e]._trigger("deactivate", null, this._uiHash(this)), this.containers[e].containerCache.over && (this.containers[e]._trigger("out", null, this._uiHash(this)), this.containers[e].containerCache.over = 0);
      }

      return this.placeholder && (this.placeholder[0].parentNode && this.placeholder[0].parentNode.removeChild(this.placeholder[0]), "original" !== this.options.helper && this.helper && this.helper[0].parentNode && this.helper.remove(), t.extend(this, {
        helper: null,
        dragging: !1,
        reverting: !1,
        _noFinalSort: null
      }), this.domPosition.prev ? t(this.domPosition.prev).after(this.currentItem) : t(this.domPosition.parent).prepend(this.currentItem)), this;
    },
    serialize: function (e) {
      var i = this._getItemsAsjQuery(e && e.connected),
          s = [];

      return e = e || {}, t(i).each(function () {
        var i = (t(e.item || this).attr(e.attribute || "id") || "").match(e.expression || /(.+)[\-=_](.+)/);
        i && s.push((e.key || i[1] + "[]") + "=" + (e.key && e.expression ? i[1] : i[2]));
      }), !s.length && e.key && s.push(e.key + "="), s.join("&");
    },
    toArray: function (e) {
      var i = this._getItemsAsjQuery(e && e.connected),
          s = [];

      return e = e || {}, i.each(function () {
        s.push(t(e.item || this).attr(e.attribute || "id") || "");
      }), s;
    },
    _intersectsWith: function (t) {
      var e = this.positionAbs.left,
          i = e + this.helperProportions.width,
          s = this.positionAbs.top,
          n = s + this.helperProportions.height,
          o = t.left,
          a = o + t.width,
          r = t.top,
          h = r + t.height,
          l = this.offset.click.top,
          c = this.offset.click.left,
          u = "x" === this.options.axis || s + l > r && h > s + l,
          d = "y" === this.options.axis || e + c > o && a > e + c,
          p = u && d;
      return "pointer" === this.options.tolerance || this.options.forcePointerForContainers || "pointer" !== this.options.tolerance && this.helperProportions[this.floating ? "width" : "height"] > t[this.floating ? "width" : "height"] ? p : e + this.helperProportions.width / 2 > o && a > i - this.helperProportions.width / 2 && s + this.helperProportions.height / 2 > r && h > n - this.helperProportions.height / 2;
    },
    _intersectsWithPointer: function (t) {
      var e,
          i,
          s = "x" === this.options.axis || this._isOverAxis(this.positionAbs.top + this.offset.click.top, t.top, t.height),
          n = "y" === this.options.axis || this._isOverAxis(this.positionAbs.left + this.offset.click.left, t.left, t.width),
          o = s && n;

      return o ? (e = this._getDragVerticalDirection(), i = this._getDragHorizontalDirection(), this.floating ? "right" === i || "down" === e ? 2 : 1 : e && ("down" === e ? 2 : 1)) : !1;
    },
    _intersectsWithSides: function (t) {
      var e = this._isOverAxis(this.positionAbs.top + this.offset.click.top, t.top + t.height / 2, t.height),
          i = this._isOverAxis(this.positionAbs.left + this.offset.click.left, t.left + t.width / 2, t.width),
          s = this._getDragVerticalDirection(),
          n = this._getDragHorizontalDirection();

      return this.floating && n ? "right" === n && i || "left" === n && !i : s && ("down" === s && e || "up" === s && !e);
    },
    _getDragVerticalDirection: function () {
      var t = this.positionAbs.top - this.lastPositionAbs.top;
      return 0 !== t && (t > 0 ? "down" : "up");
    },
    _getDragHorizontalDirection: function () {
      var t = this.positionAbs.left - this.lastPositionAbs.left;
      return 0 !== t && (t > 0 ? "right" : "left");
    },
    refresh: function (t) {
      return this._refreshItems(t), this._setHandleClassName(), this.refreshPositions(), this;
    },
    _connectWith: function () {
      var t = this.options;
      return t.connectWith.constructor === String ? [t.connectWith] : t.connectWith;
    },
    _getItemsAsjQuery: function (e) {
      function i() {
        r.push(this);
      }

      var s,
          n,
          o,
          a,
          r = [],
          h = [],
          l = this._connectWith();

      if (l && e) for (s = l.length - 1; s >= 0; s--) for (o = t(l[s], this.document[0]), n = o.length - 1; n >= 0; n--) a = t.data(o[n], this.widgetFullName), a && a !== this && !a.options.disabled && h.push([t.isFunction(a.options.items) ? a.options.items.call(a.element) : t(a.options.items, a.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"), a]);

      for (h.push([t.isFunction(this.options.items) ? this.options.items.call(this.element, null, {
        options: this.options,
        item: this.currentItem
      }) : t(this.options.items, this.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"), this]), s = h.length - 1; s >= 0; s--) h[s][0].each(i);

      return t(r);
    },
    _removeCurrentsFromItems: function () {
      var e = this.currentItem.find(":data(" + this.widgetName + "-item)");
      this.items = t.grep(this.items, function (t) {
        for (var i = 0; e.length > i; i++) if (e[i] === t.item[0]) return !1;

        return !0;
      });
    },
    _refreshItems: function (e) {
      this.items = [], this.containers = [this];

      var i,
          s,
          n,
          o,
          a,
          r,
          h,
          l,
          c = this.items,
          u = [[t.isFunction(this.options.items) ? this.options.items.call(this.element[0], e, {
        item: this.currentItem
      }) : t(this.options.items, this.element), this]],
          d = this._connectWith();

      if (d && this.ready) for (i = d.length - 1; i >= 0; i--) for (n = t(d[i], this.document[0]), s = n.length - 1; s >= 0; s--) o = t.data(n[s], this.widgetFullName), o && o !== this && !o.options.disabled && (u.push([t.isFunction(o.options.items) ? o.options.items.call(o.element[0], e, {
        item: this.currentItem
      }) : t(o.options.items, o.element), o]), this.containers.push(o));

      for (i = u.length - 1; i >= 0; i--) for (a = u[i][1], r = u[i][0], s = 0, l = r.length; l > s; s++) h = t(r[s]), h.data(this.widgetName + "-item", a), c.push({
        item: h,
        instance: a,
        width: 0,
        height: 0,
        left: 0,
        top: 0
      });
    },
    refreshPositions: function (e) {
      this.floating = this.items.length ? "x" === this.options.axis || this._isFloating(this.items[0].item) : !1, this.offsetParent && this.helper && (this.offset.parent = this._getParentOffset());
      var i, s, n, o;

      for (i = this.items.length - 1; i >= 0; i--) s = this.items[i], s.instance !== this.currentContainer && this.currentContainer && s.item[0] !== this.currentItem[0] || (n = this.options.toleranceElement ? t(this.options.toleranceElement, s.item) : s.item, e || (s.width = n.outerWidth(), s.height = n.outerHeight()), o = n.offset(), s.left = o.left, s.top = o.top);

      if (this.options.custom && this.options.custom.refreshContainers) this.options.custom.refreshContainers.call(this);else for (i = this.containers.length - 1; i >= 0; i--) o = this.containers[i].element.offset(), this.containers[i].containerCache.left = o.left, this.containers[i].containerCache.top = o.top, this.containers[i].containerCache.width = this.containers[i].element.outerWidth(), this.containers[i].containerCache.height = this.containers[i].element.outerHeight();
      return this;
    },
    _createPlaceholder: function (e) {
      e = e || this;
      var i,
          s = e.options;
      s.placeholder && s.placeholder.constructor !== String || (i = s.placeholder, s.placeholder = {
        element: function () {
          var s = e.currentItem[0].nodeName.toLowerCase(),
              n = t("<" + s + ">", e.document[0]);
          return e._addClass(n, "ui-sortable-placeholder", i || e.currentItem[0].className)._removeClass(n, "ui-sortable-helper"), "tbody" === s ? e._createTrPlaceholder(e.currentItem.find("tr").eq(0), t("<tr>", e.document[0]).appendTo(n)) : "tr" === s ? e._createTrPlaceholder(e.currentItem, n) : "img" === s && n.attr("src", e.currentItem.attr("src")), i || n.css("visibility", "hidden"), n;
        },
        update: function (t, n) {
          (!i || s.forcePlaceholderSize) && (n.height() || n.height(e.currentItem.innerHeight() - parseInt(e.currentItem.css("paddingTop") || 0, 10) - parseInt(e.currentItem.css("paddingBottom") || 0, 10)), n.width() || n.width(e.currentItem.innerWidth() - parseInt(e.currentItem.css("paddingLeft") || 0, 10) - parseInt(e.currentItem.css("paddingRight") || 0, 10)));
        }
      }), e.placeholder = t(s.placeholder.element.call(e.element, e.currentItem)), e.currentItem.after(e.placeholder), s.placeholder.update(e, e.placeholder);
    },
    _createTrPlaceholder: function (e, i) {
      var s = this;
      e.children().each(function () {
        t("<td>&#160;</td>", s.document[0]).attr("colspan", t(this).attr("colspan") || 1).appendTo(i);
      });
    },
    _contactContainers: function (e) {
      var i,
          s,
          n,
          o,
          a,
          r,
          h,
          l,
          c,
          u,
          d = null,
          p = null;

      for (i = this.containers.length - 1; i >= 0; i--) if (!t.contains(this.currentItem[0], this.containers[i].element[0])) if (this._intersectsWith(this.containers[i].containerCache)) {
        if (d && t.contains(this.containers[i].element[0], d.element[0])) continue;
        d = this.containers[i], p = i;
      } else this.containers[i].containerCache.over && (this.containers[i]._trigger("out", e, this._uiHash(this)), this.containers[i].containerCache.over = 0);

      if (d) if (1 === this.containers.length) this.containers[p].containerCache.over || (this.containers[p]._trigger("over", e, this._uiHash(this)), this.containers[p].containerCache.over = 1);else {
        for (n = 1e4, o = null, c = d.floating || this._isFloating(this.currentItem), a = c ? "left" : "top", r = c ? "width" : "height", u = c ? "pageX" : "pageY", s = this.items.length - 1; s >= 0; s--) t.contains(this.containers[p].element[0], this.items[s].item[0]) && this.items[s].item[0] !== this.currentItem[0] && (h = this.items[s].item.offset()[a], l = !1, e[u] - h > this.items[s][r] / 2 && (l = !0), n > Math.abs(e[u] - h) && (n = Math.abs(e[u] - h), o = this.items[s], this.direction = l ? "up" : "down"));

        if (!o && !this.options.dropOnEmpty) return;
        if (this.currentContainer === this.containers[p]) return this.currentContainer.containerCache.over || (this.containers[p]._trigger("over", e, this._uiHash()), this.currentContainer.containerCache.over = 1), void 0;
        o ? this._rearrange(e, o, null, !0) : this._rearrange(e, null, this.containers[p].element, !0), this._trigger("change", e, this._uiHash()), this.containers[p]._trigger("change", e, this._uiHash(this)), this.currentContainer = this.containers[p], this.options.placeholder.update(this.currentContainer, this.placeholder), this.containers[p]._trigger("over", e, this._uiHash(this)), this.containers[p].containerCache.over = 1;
      }
    },
    _createHelper: function (e) {
      var i = this.options,
          s = t.isFunction(i.helper) ? t(i.helper.apply(this.element[0], [e, this.currentItem])) : "clone" === i.helper ? this.currentItem.clone() : this.currentItem;
      return s.parents("body").length || t("parent" !== i.appendTo ? i.appendTo : this.currentItem[0].parentNode)[0].appendChild(s[0]), s[0] === this.currentItem[0] && (this._storedCSS = {
        width: this.currentItem[0].style.width,
        height: this.currentItem[0].style.height,
        position: this.currentItem.css("position"),
        top: this.currentItem.css("top"),
        left: this.currentItem.css("left")
      }), (!s[0].style.width || i.forceHelperSize) && s.width(this.currentItem.width()), (!s[0].style.height || i.forceHelperSize) && s.height(this.currentItem.height()), s;
    },
    _adjustOffsetFromHelper: function (e) {
      "string" == typeof e && (e = e.split(" ")), t.isArray(e) && (e = {
        left: +e[0],
        top: +e[1] || 0
      }), "left" in e && (this.offset.click.left = e.left + this.margins.left), "right" in e && (this.offset.click.left = this.helperProportions.width - e.right + this.margins.left), "top" in e && (this.offset.click.top = e.top + this.margins.top), "bottom" in e && (this.offset.click.top = this.helperProportions.height - e.bottom + this.margins.top);
    },
    _getParentOffset: function () {
      this.offsetParent = this.helper.offsetParent();
      var e = this.offsetParent.offset();
      return "absolute" === this.cssPosition && this.scrollParent[0] !== this.document[0] && t.contains(this.scrollParent[0], this.offsetParent[0]) && (e.left += this.scrollParent.scrollLeft(), e.top += this.scrollParent.scrollTop()), (this.offsetParent[0] === this.document[0].body || this.offsetParent[0].tagName && "html" === this.offsetParent[0].tagName.toLowerCase() && t.ui.ie) && (e = {
        top: 0,
        left: 0
      }), {
        top: e.top + (parseInt(this.offsetParent.css("borderTopWidth"), 10) || 0),
        left: e.left + (parseInt(this.offsetParent.css("borderLeftWidth"), 10) || 0)
      };
    },
    _getRelativeOffset: function () {
      if ("relative" === this.cssPosition) {
        var t = this.currentItem.position();
        return {
          top: t.top - (parseInt(this.helper.css("top"), 10) || 0) + this.scrollParent.scrollTop(),
          left: t.left - (parseInt(this.helper.css("left"), 10) || 0) + this.scrollParent.scrollLeft()
        };
      }

      return {
        top: 0,
        left: 0
      };
    },
    _cacheMargins: function () {
      this.margins = {
        left: parseInt(this.currentItem.css("marginLeft"), 10) || 0,
        top: parseInt(this.currentItem.css("marginTop"), 10) || 0
      };
    },
    _cacheHelperProportions: function () {
      this.helperProportions = {
        width: this.helper.outerWidth(),
        height: this.helper.outerHeight()
      };
    },
    _setContainment: function () {
      var e,
          i,
          s,
          n = this.options;
      "parent" === n.containment && (n.containment = this.helper[0].parentNode), ("document" === n.containment || "window" === n.containment) && (this.containment = [0 - this.offset.relative.left - this.offset.parent.left, 0 - this.offset.relative.top - this.offset.parent.top, "document" === n.containment ? this.document.width() : this.window.width() - this.helperProportions.width - this.margins.left, ("document" === n.containment ? this.document.height() || document.body.parentNode.scrollHeight : this.window.height() || this.document[0].body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top]), /^(document|window|parent)$/.test(n.containment) || (e = t(n.containment)[0], i = t(n.containment).offset(), s = "hidden" !== t(e).css("overflow"), this.containment = [i.left + (parseInt(t(e).css("borderLeftWidth"), 10) || 0) + (parseInt(t(e).css("paddingLeft"), 10) || 0) - this.margins.left, i.top + (parseInt(t(e).css("borderTopWidth"), 10) || 0) + (parseInt(t(e).css("paddingTop"), 10) || 0) - this.margins.top, i.left + (s ? Math.max(e.scrollWidth, e.offsetWidth) : e.offsetWidth) - (parseInt(t(e).css("borderLeftWidth"), 10) || 0) - (parseInt(t(e).css("paddingRight"), 10) || 0) - this.helperProportions.width - this.margins.left, i.top + (s ? Math.max(e.scrollHeight, e.offsetHeight) : e.offsetHeight) - (parseInt(t(e).css("borderTopWidth"), 10) || 0) - (parseInt(t(e).css("paddingBottom"), 10) || 0) - this.helperProportions.height - this.margins.top]);
    },
    _convertPositionTo: function (e, i) {
      i || (i = this.position);
      var s = "absolute" === e ? 1 : -1,
          n = "absolute" !== this.cssPosition || this.scrollParent[0] !== this.document[0] && t.contains(this.scrollParent[0], this.offsetParent[0]) ? this.scrollParent : this.offsetParent,
          o = /(html|body)/i.test(n[0].tagName);
      return {
        top: i.top + this.offset.relative.top * s + this.offset.parent.top * s - ("fixed" === this.cssPosition ? -this.scrollParent.scrollTop() : o ? 0 : n.scrollTop()) * s,
        left: i.left + this.offset.relative.left * s + this.offset.parent.left * s - ("fixed" === this.cssPosition ? -this.scrollParent.scrollLeft() : o ? 0 : n.scrollLeft()) * s
      };
    },
    _generatePosition: function (e) {
      var i,
          s,
          n = this.options,
          o = e.pageX,
          a = e.pageY,
          r = "absolute" !== this.cssPosition || this.scrollParent[0] !== this.document[0] && t.contains(this.scrollParent[0], this.offsetParent[0]) ? this.scrollParent : this.offsetParent,
          h = /(html|body)/i.test(r[0].tagName);
      return "relative" !== this.cssPosition || this.scrollParent[0] !== this.document[0] && this.scrollParent[0] !== this.offsetParent[0] || (this.offset.relative = this._getRelativeOffset()), this.originalPosition && (this.containment && (e.pageX - this.offset.click.left < this.containment[0] && (o = this.containment[0] + this.offset.click.left), e.pageY - this.offset.click.top < this.containment[1] && (a = this.containment[1] + this.offset.click.top), e.pageX - this.offset.click.left > this.containment[2] && (o = this.containment[2] + this.offset.click.left), e.pageY - this.offset.click.top > this.containment[3] && (a = this.containment[3] + this.offset.click.top)), n.grid && (i = this.originalPageY + Math.round((a - this.originalPageY) / n.grid[1]) * n.grid[1], a = this.containment ? i - this.offset.click.top >= this.containment[1] && i - this.offset.click.top <= this.containment[3] ? i : i - this.offset.click.top >= this.containment[1] ? i - n.grid[1] : i + n.grid[1] : i, s = this.originalPageX + Math.round((o - this.originalPageX) / n.grid[0]) * n.grid[0], o = this.containment ? s - this.offset.click.left >= this.containment[0] && s - this.offset.click.left <= this.containment[2] ? s : s - this.offset.click.left >= this.containment[0] ? s - n.grid[0] : s + n.grid[0] : s)), {
        top: a - this.offset.click.top - this.offset.relative.top - this.offset.parent.top + ("fixed" === this.cssPosition ? -this.scrollParent.scrollTop() : h ? 0 : r.scrollTop()),
        left: o - this.offset.click.left - this.offset.relative.left - this.offset.parent.left + ("fixed" === this.cssPosition ? -this.scrollParent.scrollLeft() : h ? 0 : r.scrollLeft())
      };
    },
    _rearrange: function (t, e, i, s) {
      i ? i[0].appendChild(this.placeholder[0]) : e.item[0].parentNode.insertBefore(this.placeholder[0], "down" === this.direction ? e.item[0] : e.item[0].nextSibling), this.counter = this.counter ? ++this.counter : 1;
      var n = this.counter;

      this._delay(function () {
        n === this.counter && this.refreshPositions(!s);
      });
    },
    _clear: function (t, e) {
      function i(t, e, i) {
        return function (s) {
          i._trigger(t, s, e._uiHash(e));
        };
      }

      this.reverting = !1;
      var s,
          n = [];

      if (!this._noFinalSort && this.currentItem.parent().length && this.placeholder.before(this.currentItem), this._noFinalSort = null, this.helper[0] === this.currentItem[0]) {
        for (s in this._storedCSS) ("auto" === this._storedCSS[s] || "static" === this._storedCSS[s]) && (this._storedCSS[s] = "");

        this.currentItem.css(this._storedCSS), this._removeClass(this.currentItem, "ui-sortable-helper");
      } else this.currentItem.show();

      for (this.fromOutside && !e && n.push(function (t) {
        this._trigger("receive", t, this._uiHash(this.fromOutside));
      }), !this.fromOutside && this.domPosition.prev === this.currentItem.prev().not(".ui-sortable-helper")[0] && this.domPosition.parent === this.currentItem.parent()[0] || e || n.push(function (t) {
        this._trigger("update", t, this._uiHash());
      }), this !== this.currentContainer && (e || (n.push(function (t) {
        this._trigger("remove", t, this._uiHash());
      }), n.push(function (t) {
        return function (e) {
          t._trigger("receive", e, this._uiHash(this));
        };
      }.call(this, this.currentContainer)), n.push(function (t) {
        return function (e) {
          t._trigger("update", e, this._uiHash(this));
        };
      }.call(this, this.currentContainer)))), s = this.containers.length - 1; s >= 0; s--) e || n.push(i("deactivate", this, this.containers[s])), this.containers[s].containerCache.over && (n.push(i("out", this, this.containers[s])), this.containers[s].containerCache.over = 0);

      if (this.storedCursor && (this.document.find("body").css("cursor", this.storedCursor), this.storedStylesheet.remove()), this._storedOpacity && this.helper.css("opacity", this._storedOpacity), this._storedZIndex && this.helper.css("zIndex", "auto" === this._storedZIndex ? "" : this._storedZIndex), this.dragging = !1, e || this._trigger("beforeStop", t, this._uiHash()), this.placeholder[0].parentNode.removeChild(this.placeholder[0]), this.cancelHelperRemoval || (this.helper[0] !== this.currentItem[0] && this.helper.remove(), this.helper = null), !e) {
        for (s = 0; n.length > s; s++) n[s].call(this, t);

        this._trigger("stop", t, this._uiHash());
      }

      return this.fromOutside = !1, !this.cancelHelperRemoval;
    },
    _trigger: function () {
      t.Widget.prototype._trigger.apply(this, arguments) === !1 && this.cancel();
    },
    _uiHash: function (e) {
      var i = e || this;
      return {
        helper: i.helper,
        placeholder: i.placeholder || t([]),
        position: i.position,
        originalPosition: i.originalPosition,
        offset: i.positionAbs,
        item: i.currentItem,
        sender: e ? e.element : null
      };
    }
  }), t.widget("ui.spinner", {
    version: "1.12.1",
    defaultElement: "<input>",
    widgetEventPrefix: "spin",
    options: {
      classes: {
        "ui-spinner": "ui-corner-all",
        "ui-spinner-down": "ui-corner-br",
        "ui-spinner-up": "ui-corner-tr"
      },
      culture: null,
      icons: {
        down: "ui-icon-triangle-1-s",
        up: "ui-icon-triangle-1-n"
      },
      incremental: !0,
      max: null,
      min: null,
      numberFormat: null,
      page: 10,
      step: 1,
      change: null,
      spin: null,
      start: null,
      stop: null
    },
    _create: function () {
      this._setOption("max", this.options.max), this._setOption("min", this.options.min), this._setOption("step", this.options.step), "" !== this.value() && this._value(this.element.val(), !0), this._draw(), this._on(this._events), this._refresh(), this._on(this.window, {
        beforeunload: function () {
          this.element.removeAttr("autocomplete");
        }
      });
    },
    _getCreateOptions: function () {
      var e = this._super(),
          i = this.element;

      return t.each(["min", "max", "step"], function (t, s) {
        var n = i.attr(s);
        null != n && n.length && (e[s] = n);
      }), e;
    },
    _events: {
      keydown: function (t) {
        this._start(t) && this._keydown(t) && t.preventDefault();
      },
      keyup: "_stop",
      focus: function () {
        this.previous = this.element.val();
      },
      blur: function (t) {
        return this.cancelBlur ? (delete this.cancelBlur, void 0) : (this._stop(), this._refresh(), this.previous !== this.element.val() && this._trigger("change", t), void 0);
      },
      mousewheel: function (t, e) {
        if (e) {
          if (!this.spinning && !this._start(t)) return !1;
          this._spin((e > 0 ? 1 : -1) * this.options.step, t), clearTimeout(this.mousewheelTimer), this.mousewheelTimer = this._delay(function () {
            this.spinning && this._stop(t);
          }, 100), t.preventDefault();
        }
      },
      "mousedown .ui-spinner-button": function (e) {
        function i() {
          var e = this.element[0] === t.ui.safeActiveElement(this.document[0]);
          e || (this.element.trigger("focus"), this.previous = s, this._delay(function () {
            this.previous = s;
          }));
        }

        var s;
        s = this.element[0] === t.ui.safeActiveElement(this.document[0]) ? this.previous : this.element.val(), e.preventDefault(), i.call(this), this.cancelBlur = !0, this._delay(function () {
          delete this.cancelBlur, i.call(this);
        }), this._start(e) !== !1 && this._repeat(null, t(e.currentTarget).hasClass("ui-spinner-up") ? 1 : -1, e);
      },
      "mouseup .ui-spinner-button": "_stop",
      "mouseenter .ui-spinner-button": function (e) {
        return t(e.currentTarget).hasClass("ui-state-active") ? this._start(e) === !1 ? !1 : (this._repeat(null, t(e.currentTarget).hasClass("ui-spinner-up") ? 1 : -1, e), void 0) : void 0;
      },
      "mouseleave .ui-spinner-button": "_stop"
    },
    _enhance: function () {
      this.uiSpinner = this.element.attr("autocomplete", "off").wrap("<span>").parent().append("<a></a><a></a>");
    },
    _draw: function () {
      this._enhance(), this._addClass(this.uiSpinner, "ui-spinner", "ui-widget ui-widget-content"), this._addClass("ui-spinner-input"), this.element.attr("role", "spinbutton"), this.buttons = this.uiSpinner.children("a").attr("tabIndex", -1).attr("aria-hidden", !0).button({
        classes: {
          "ui-button": ""
        }
      }), this._removeClass(this.buttons, "ui-corner-all"), this._addClass(this.buttons.first(), "ui-spinner-button ui-spinner-up"), this._addClass(this.buttons.last(), "ui-spinner-button ui-spinner-down"), this.buttons.first().button({
        icon: this.options.icons.up,
        showLabel: !1
      }), this.buttons.last().button({
        icon: this.options.icons.down,
        showLabel: !1
      }), this.buttons.height() > Math.ceil(.5 * this.uiSpinner.height()) && this.uiSpinner.height() > 0 && this.uiSpinner.height(this.uiSpinner.height());
    },
    _keydown: function (e) {
      var i = this.options,
          s = t.ui.keyCode;

      switch (e.keyCode) {
        case s.UP:
          return this._repeat(null, 1, e), !0;

        case s.DOWN:
          return this._repeat(null, -1, e), !0;

        case s.PAGE_UP:
          return this._repeat(null, i.page, e), !0;

        case s.PAGE_DOWN:
          return this._repeat(null, -i.page, e), !0;
      }

      return !1;
    },
    _start: function (t) {
      return this.spinning || this._trigger("start", t) !== !1 ? (this.counter || (this.counter = 1), this.spinning = !0, !0) : !1;
    },
    _repeat: function (t, e, i) {
      t = t || 500, clearTimeout(this.timer), this.timer = this._delay(function () {
        this._repeat(40, e, i);
      }, t), this._spin(e * this.options.step, i);
    },
    _spin: function (t, e) {
      var i = this.value() || 0;
      this.counter || (this.counter = 1), i = this._adjustValue(i + t * this._increment(this.counter)), this.spinning && this._trigger("spin", e, {
        value: i
      }) === !1 || (this._value(i), this.counter++);
    },
    _increment: function (e) {
      var i = this.options.incremental;
      return i ? t.isFunction(i) ? i(e) : Math.floor(e * e * e / 5e4 - e * e / 500 + 17 * e / 200 + 1) : 1;
    },
    _precision: function () {
      var t = this._precisionOf(this.options.step);

      return null !== this.options.min && (t = Math.max(t, this._precisionOf(this.options.min))), t;
    },
    _precisionOf: function (t) {
      var e = "" + t,
          i = e.indexOf(".");
      return -1 === i ? 0 : e.length - i - 1;
    },
    _adjustValue: function (t) {
      var e,
          i,
          s = this.options;
      return e = null !== s.min ? s.min : 0, i = t - e, i = Math.round(i / s.step) * s.step, t = e + i, t = parseFloat(t.toFixed(this._precision())), null !== s.max && t > s.max ? s.max : null !== s.min && s.min > t ? s.min : t;
    },
    _stop: function (t) {
      this.spinning && (clearTimeout(this.timer), clearTimeout(this.mousewheelTimer), this.counter = 0, this.spinning = !1, this._trigger("stop", t));
    },
    _setOption: function (t, e) {
      var i, s, n;
      return "culture" === t || "numberFormat" === t ? (i = this._parse(this.element.val()), this.options[t] = e, this.element.val(this._format(i)), void 0) : (("max" === t || "min" === t || "step" === t) && "string" == typeof e && (e = this._parse(e)), "icons" === t && (s = this.buttons.first().find(".ui-icon"), this._removeClass(s, null, this.options.icons.up), this._addClass(s, null, e.up), n = this.buttons.last().find(".ui-icon"), this._removeClass(n, null, this.options.icons.down), this._addClass(n, null, e.down)), this._super(t, e), void 0);
    },
    _setOptionDisabled: function (t) {
      this._super(t), this._toggleClass(this.uiSpinner, null, "ui-state-disabled", !!t), this.element.prop("disabled", !!t), this.buttons.button(t ? "disable" : "enable");
    },
    _setOptions: r(function (t) {
      this._super(t);
    }),
    _parse: function (t) {
      return "string" == typeof t && "" !== t && (t = window.Globalize && this.options.numberFormat ? Globalize.parseFloat(t, 10, this.options.culture) : +t), "" === t || isNaN(t) ? null : t;
    },
    _format: function (t) {
      return "" === t ? "" : window.Globalize && this.options.numberFormat ? Globalize.format(t, this.options.numberFormat, this.options.culture) : t;
    },
    _refresh: function () {
      this.element.attr({
        "aria-valuemin": this.options.min,
        "aria-valuemax": this.options.max,
        "aria-valuenow": this._parse(this.element.val())
      });
    },
    isValid: function () {
      var t = this.value();
      return null === t ? !1 : t === this._adjustValue(t);
    },
    _value: function (t, e) {
      var i;
      "" !== t && (i = this._parse(t), null !== i && (e || (i = this._adjustValue(i)), t = this._format(i))), this.element.val(t), this._refresh();
    },
    _destroy: function () {
      this.element.prop("disabled", !1).removeAttr("autocomplete role aria-valuemin aria-valuemax aria-valuenow"), this.uiSpinner.replaceWith(this.element);
    },
    stepUp: r(function (t) {
      this._stepUp(t);
    }),
    _stepUp: function (t) {
      this._start() && (this._spin((t || 1) * this.options.step), this._stop());
    },
    stepDown: r(function (t) {
      this._stepDown(t);
    }),
    _stepDown: function (t) {
      this._start() && (this._spin((t || 1) * -this.options.step), this._stop());
    },
    pageUp: r(function (t) {
      this._stepUp((t || 1) * this.options.page);
    }),
    pageDown: r(function (t) {
      this._stepDown((t || 1) * this.options.page);
    }),
    value: function (t) {
      return arguments.length ? (r(this._value).call(this, t), void 0) : this._parse(this.element.val());
    },
    widget: function () {
      return this.uiSpinner;
    }
  }), t.uiBackCompat !== !1 && t.widget("ui.spinner", t.ui.spinner, {
    _enhance: function () {
      this.uiSpinner = this.element.attr("autocomplete", "off").wrap(this._uiSpinnerHtml()).parent().append(this._buttonHtml());
    },
    _uiSpinnerHtml: function () {
      return "<span>";
    },
    _buttonHtml: function () {
      return "<a></a><a></a>";
    }
  }), t.ui.spinner, t.widget("ui.tabs", {
    version: "1.12.1",
    delay: 300,
    options: {
      active: null,
      classes: {
        "ui-tabs": "ui-corner-all",
        "ui-tabs-nav": "ui-corner-all",
        "ui-tabs-panel": "ui-corner-bottom",
        "ui-tabs-tab": "ui-corner-top"
      },
      collapsible: !1,
      event: "click",
      heightStyle: "content",
      hide: null,
      show: null,
      activate: null,
      beforeActivate: null,
      beforeLoad: null,
      load: null
    },
    _isLocal: function () {
      var t = /#.*$/;
      return function (e) {
        var i, s;
        i = e.href.replace(t, ""), s = location.href.replace(t, "");

        try {
          i = decodeURIComponent(i);
        } catch (n) {}

        try {
          s = decodeURIComponent(s);
        } catch (n) {}

        return e.hash.length > 1 && i === s;
      };
    }(),
    _create: function () {
      var e = this,
          i = this.options;
      this.running = !1, this._addClass("ui-tabs", "ui-widget ui-widget-content"), this._toggleClass("ui-tabs-collapsible", null, i.collapsible), this._processTabs(), i.active = this._initialActive(), t.isArray(i.disabled) && (i.disabled = t.unique(i.disabled.concat(t.map(this.tabs.filter(".ui-state-disabled"), function (t) {
        return e.tabs.index(t);
      }))).sort()), this.active = this.options.active !== !1 && this.anchors.length ? this._findActive(i.active) : t(), this._refresh(), this.active.length && this.load(i.active);
    },
    _initialActive: function () {
      var e = this.options.active,
          i = this.options.collapsible,
          s = location.hash.substring(1);
      return null === e && (s && this.tabs.each(function (i, n) {
        return t(n).attr("aria-controls") === s ? (e = i, !1) : void 0;
      }), null === e && (e = this.tabs.index(this.tabs.filter(".ui-tabs-active"))), (null === e || -1 === e) && (e = this.tabs.length ? 0 : !1)), e !== !1 && (e = this.tabs.index(this.tabs.eq(e)), -1 === e && (e = i ? !1 : 0)), !i && e === !1 && this.anchors.length && (e = 0), e;
    },
    _getCreateEventData: function () {
      return {
        tab: this.active,
        panel: this.active.length ? this._getPanelForTab(this.active) : t()
      };
    },
    _tabKeydown: function (e) {
      var i = t(t.ui.safeActiveElement(this.document[0])).closest("li"),
          s = this.tabs.index(i),
          n = !0;

      if (!this._handlePageNav(e)) {
        switch (e.keyCode) {
          case t.ui.keyCode.RIGHT:
          case t.ui.keyCode.DOWN:
            s++;
            break;

          case t.ui.keyCode.UP:
          case t.ui.keyCode.LEFT:
            n = !1, s--;
            break;

          case t.ui.keyCode.END:
            s = this.anchors.length - 1;
            break;

          case t.ui.keyCode.HOME:
            s = 0;
            break;

          case t.ui.keyCode.SPACE:
            return e.preventDefault(), clearTimeout(this.activating), this._activate(s), void 0;

          case t.ui.keyCode.ENTER:
            return e.preventDefault(), clearTimeout(this.activating), this._activate(s === this.options.active ? !1 : s), void 0;

          default:
            return;
        }

        e.preventDefault(), clearTimeout(this.activating), s = this._focusNextTab(s, n), e.ctrlKey || e.metaKey || (i.attr("aria-selected", "false"), this.tabs.eq(s).attr("aria-selected", "true"), this.activating = this._delay(function () {
          this.option("active", s);
        }, this.delay));
      }
    },
    _panelKeydown: function (e) {
      this._handlePageNav(e) || e.ctrlKey && e.keyCode === t.ui.keyCode.UP && (e.preventDefault(), this.active.trigger("focus"));
    },
    _handlePageNav: function (e) {
      return e.altKey && e.keyCode === t.ui.keyCode.PAGE_UP ? (this._activate(this._focusNextTab(this.options.active - 1, !1)), !0) : e.altKey && e.keyCode === t.ui.keyCode.PAGE_DOWN ? (this._activate(this._focusNextTab(this.options.active + 1, !0)), !0) : void 0;
    },
    _findNextTab: function (e, i) {
      function s() {
        return e > n && (e = 0), 0 > e && (e = n), e;
      }

      for (var n = this.tabs.length - 1; -1 !== t.inArray(s(), this.options.disabled);) e = i ? e + 1 : e - 1;

      return e;
    },
    _focusNextTab: function (t, e) {
      return t = this._findNextTab(t, e), this.tabs.eq(t).trigger("focus"), t;
    },
    _setOption: function (t, e) {
      return "active" === t ? (this._activate(e), void 0) : (this._super(t, e), "collapsible" === t && (this._toggleClass("ui-tabs-collapsible", null, e), e || this.options.active !== !1 || this._activate(0)), "event" === t && this._setupEvents(e), "heightStyle" === t && this._setupHeightStyle(e), void 0);
    },
    _sanitizeSelector: function (t) {
      return t ? t.replace(/[!"$%&'()*+,.\/:;<=>?@\[\]\^`{|}~]/g, "\\$&") : "";
    },
    refresh: function () {
      var e = this.options,
          i = this.tablist.children(":has(a[href])");
      e.disabled = t.map(i.filter(".ui-state-disabled"), function (t) {
        return i.index(t);
      }), this._processTabs(), e.active !== !1 && this.anchors.length ? this.active.length && !t.contains(this.tablist[0], this.active[0]) ? this.tabs.length === e.disabled.length ? (e.active = !1, this.active = t()) : this._activate(this._findNextTab(Math.max(0, e.active - 1), !1)) : e.active = this.tabs.index(this.active) : (e.active = !1, this.active = t()), this._refresh();
    },
    _refresh: function () {
      this._setOptionDisabled(this.options.disabled), this._setupEvents(this.options.event), this._setupHeightStyle(this.options.heightStyle), this.tabs.not(this.active).attr({
        "aria-selected": "false",
        "aria-expanded": "false",
        tabIndex: -1
      }), this.panels.not(this._getPanelForTab(this.active)).hide().attr({
        "aria-hidden": "true"
      }), this.active.length ? (this.active.attr({
        "aria-selected": "true",
        "aria-expanded": "true",
        tabIndex: 0
      }), this._addClass(this.active, "ui-tabs-active", "ui-state-active"), this._getPanelForTab(this.active).show().attr({
        "aria-hidden": "false"
      })) : this.tabs.eq(0).attr("tabIndex", 0);
    },
    _processTabs: function () {
      var e = this,
          i = this.tabs,
          s = this.anchors,
          n = this.panels;
      this.tablist = this._getList().attr("role", "tablist"), this._addClass(this.tablist, "ui-tabs-nav", "ui-helper-reset ui-helper-clearfix ui-widget-header"), this.tablist.on("mousedown" + this.eventNamespace, "> li", function (e) {
        t(this).is(".ui-state-disabled") && e.preventDefault();
      }).on("focus" + this.eventNamespace, ".ui-tabs-anchor", function () {
        t(this).closest("li").is(".ui-state-disabled") && this.blur();
      }), this.tabs = this.tablist.find("> li:has(a[href])").attr({
        role: "tab",
        tabIndex: -1
      }), this._addClass(this.tabs, "ui-tabs-tab", "ui-state-default"), this.anchors = this.tabs.map(function () {
        return t("a", this)[0];
      }).attr({
        role: "presentation",
        tabIndex: -1
      }), this._addClass(this.anchors, "ui-tabs-anchor"), this.panels = t(), this.anchors.each(function (i, s) {
        var n,
            o,
            a,
            r = t(s).uniqueId().attr("id"),
            h = t(s).closest("li"),
            l = h.attr("aria-controls");
        e._isLocal(s) ? (n = s.hash, a = n.substring(1), o = e.element.find(e._sanitizeSelector(n))) : (a = h.attr("aria-controls") || t({}).uniqueId()[0].id, n = "#" + a, o = e.element.find(n), o.length || (o = e._createPanel(a), o.insertAfter(e.panels[i - 1] || e.tablist)), o.attr("aria-live", "polite")), o.length && (e.panels = e.panels.add(o)), l && h.data("ui-tabs-aria-controls", l), h.attr({
          "aria-controls": a,
          "aria-labelledby": r
        }), o.attr("aria-labelledby", r);
      }), this.panels.attr("role", "tabpanel"), this._addClass(this.panels, "ui-tabs-panel", "ui-widget-content"), i && (this._off(i.not(this.tabs)), this._off(s.not(this.anchors)), this._off(n.not(this.panels)));
    },
    _getList: function () {
      return this.tablist || this.element.find("ol, ul").eq(0);
    },
    _createPanel: function (e) {
      return t("<div>").attr("id", e).data("ui-tabs-destroy", !0);
    },
    _setOptionDisabled: function (e) {
      var i, s, n;

      for (t.isArray(e) && (e.length ? e.length === this.anchors.length && (e = !0) : e = !1), n = 0; s = this.tabs[n]; n++) i = t(s), e === !0 || -1 !== t.inArray(n, e) ? (i.attr("aria-disabled", "true"), this._addClass(i, null, "ui-state-disabled")) : (i.removeAttr("aria-disabled"), this._removeClass(i, null, "ui-state-disabled"));

      this.options.disabled = e, this._toggleClass(this.widget(), this.widgetFullName + "-disabled", null, e === !0);
    },
    _setupEvents: function (e) {
      var i = {};
      e && t.each(e.split(" "), function (t, e) {
        i[e] = "_eventHandler";
      }), this._off(this.anchors.add(this.tabs).add(this.panels)), this._on(!0, this.anchors, {
        click: function (t) {
          t.preventDefault();
        }
      }), this._on(this.anchors, i), this._on(this.tabs, {
        keydown: "_tabKeydown"
      }), this._on(this.panels, {
        keydown: "_panelKeydown"
      }), this._focusable(this.tabs), this._hoverable(this.tabs);
    },
    _setupHeightStyle: function (e) {
      var i,
          s = this.element.parent();
      "fill" === e ? (i = s.height(), i -= this.element.outerHeight() - this.element.height(), this.element.siblings(":visible").each(function () {
        var e = t(this),
            s = e.css("position");
        "absolute" !== s && "fixed" !== s && (i -= e.outerHeight(!0));
      }), this.element.children().not(this.panels).each(function () {
        i -= t(this).outerHeight(!0);
      }), this.panels.each(function () {
        t(this).height(Math.max(0, i - t(this).innerHeight() + t(this).height()));
      }).css("overflow", "auto")) : "auto" === e && (i = 0, this.panels.each(function () {
        i = Math.max(i, t(this).height("").height());
      }).height(i));
    },
    _eventHandler: function (e) {
      var i = this.options,
          s = this.active,
          n = t(e.currentTarget),
          o = n.closest("li"),
          a = o[0] === s[0],
          r = a && i.collapsible,
          h = r ? t() : this._getPanelForTab(o),
          l = s.length ? this._getPanelForTab(s) : t(),
          c = {
        oldTab: s,
        oldPanel: l,
        newTab: r ? t() : o,
        newPanel: h
      };
      e.preventDefault(), o.hasClass("ui-state-disabled") || o.hasClass("ui-tabs-loading") || this.running || a && !i.collapsible || this._trigger("beforeActivate", e, c) === !1 || (i.active = r ? !1 : this.tabs.index(o), this.active = a ? t() : o, this.xhr && this.xhr.abort(), l.length || h.length || t.error("jQuery UI Tabs: Mismatching fragment identifier."), h.length && this.load(this.tabs.index(o), e), this._toggle(e, c));
    },
    _toggle: function (e, i) {
      function s() {
        o.running = !1, o._trigger("activate", e, i);
      }

      function n() {
        o._addClass(i.newTab.closest("li"), "ui-tabs-active", "ui-state-active"), a.length && o.options.show ? o._show(a, o.options.show, s) : (a.show(), s());
      }

      var o = this,
          a = i.newPanel,
          r = i.oldPanel;
      this.running = !0, r.length && this.options.hide ? this._hide(r, this.options.hide, function () {
        o._removeClass(i.oldTab.closest("li"), "ui-tabs-active", "ui-state-active"), n();
      }) : (this._removeClass(i.oldTab.closest("li"), "ui-tabs-active", "ui-state-active"), r.hide(), n()), r.attr("aria-hidden", "true"), i.oldTab.attr({
        "aria-selected": "false",
        "aria-expanded": "false"
      }), a.length && r.length ? i.oldTab.attr("tabIndex", -1) : a.length && this.tabs.filter(function () {
        return 0 === t(this).attr("tabIndex");
      }).attr("tabIndex", -1), a.attr("aria-hidden", "false"), i.newTab.attr({
        "aria-selected": "true",
        "aria-expanded": "true",
        tabIndex: 0
      });
    },
    _activate: function (e) {
      var i,
          s = this._findActive(e);

      s[0] !== this.active[0] && (s.length || (s = this.active), i = s.find(".ui-tabs-anchor")[0], this._eventHandler({
        target: i,
        currentTarget: i,
        preventDefault: t.noop
      }));
    },
    _findActive: function (e) {
      return e === !1 ? t() : this.tabs.eq(e);
    },
    _getIndex: function (e) {
      return "string" == typeof e && (e = this.anchors.index(this.anchors.filter("[href$='" + t.ui.escapeSelector(e) + "']"))), e;
    },
    _destroy: function () {
      this.xhr && this.xhr.abort(), this.tablist.removeAttr("role").off(this.eventNamespace), this.anchors.removeAttr("role tabIndex").removeUniqueId(), this.tabs.add(this.panels).each(function () {
        t.data(this, "ui-tabs-destroy") ? t(this).remove() : t(this).removeAttr("role tabIndex aria-live aria-busy aria-selected aria-labelledby aria-hidden aria-expanded");
      }), this.tabs.each(function () {
        var e = t(this),
            i = e.data("ui-tabs-aria-controls");
        i ? e.attr("aria-controls", i).removeData("ui-tabs-aria-controls") : e.removeAttr("aria-controls");
      }), this.panels.show(), "content" !== this.options.heightStyle && this.panels.css("height", "");
    },
    enable: function (e) {
      var i = this.options.disabled;
      i !== !1 && (void 0 === e ? i = !1 : (e = this._getIndex(e), i = t.isArray(i) ? t.map(i, function (t) {
        return t !== e ? t : null;
      }) : t.map(this.tabs, function (t, i) {
        return i !== e ? i : null;
      })), this._setOptionDisabled(i));
    },
    disable: function (e) {
      var i = this.options.disabled;

      if (i !== !0) {
        if (void 0 === e) i = !0;else {
          if (e = this._getIndex(e), -1 !== t.inArray(e, i)) return;
          i = t.isArray(i) ? t.merge([e], i).sort() : [e];
        }

        this._setOptionDisabled(i);
      }
    },
    load: function (e, i) {
      e = this._getIndex(e);

      var s = this,
          n = this.tabs.eq(e),
          o = n.find(".ui-tabs-anchor"),
          a = this._getPanelForTab(n),
          r = {
        tab: n,
        panel: a
      },
          h = function (t, e) {
        "abort" === e && s.panels.stop(!1, !0), s._removeClass(n, "ui-tabs-loading"), a.removeAttr("aria-busy"), t === s.xhr && delete s.xhr;
      };

      this._isLocal(o[0]) || (this.xhr = t.ajax(this._ajaxSettings(o, i, r)), this.xhr && "canceled" !== this.xhr.statusText && (this._addClass(n, "ui-tabs-loading"), a.attr("aria-busy", "true"), this.xhr.done(function (t, e, n) {
        setTimeout(function () {
          a.html(t), s._trigger("load", i, r), h(n, e);
        }, 1);
      }).fail(function (t, e) {
        setTimeout(function () {
          h(t, e);
        }, 1);
      })));
    },
    _ajaxSettings: function (e, i, s) {
      var n = this;
      return {
        url: e.attr("href").replace(/#.*$/, ""),
        beforeSend: function (e, o) {
          return n._trigger("beforeLoad", i, t.extend({
            jqXHR: e,
            ajaxSettings: o
          }, s));
        }
      };
    },
    _getPanelForTab: function (e) {
      var i = t(e).attr("aria-controls");
      return this.element.find(this._sanitizeSelector("#" + i));
    }
  }), t.uiBackCompat !== !1 && t.widget("ui.tabs", t.ui.tabs, {
    _processTabs: function () {
      this._superApply(arguments), this._addClass(this.tabs, "ui-tab");
    }
  }), t.ui.tabs, t.widget("ui.tooltip", {
    version: "1.12.1",
    options: {
      classes: {
        "ui-tooltip": "ui-corner-all ui-widget-shadow"
      },
      content: function () {
        var e = t(this).attr("title") || "";
        return t("<a>").text(e).html();
      },
      hide: !0,
      items: "[title]:not([disabled])",
      position: {
        my: "left top+15",
        at: "left bottom",
        collision: "flipfit flip"
      },
      show: !0,
      track: !1,
      close: null,
      open: null
    },
    _addDescribedBy: function (e, i) {
      var s = (e.attr("aria-describedby") || "").split(/\s+/);
      s.push(i), e.data("ui-tooltip-id", i).attr("aria-describedby", t.trim(s.join(" ")));
    },
    _removeDescribedBy: function (e) {
      var i = e.data("ui-tooltip-id"),
          s = (e.attr("aria-describedby") || "").split(/\s+/),
          n = t.inArray(i, s);
      -1 !== n && s.splice(n, 1), e.removeData("ui-tooltip-id"), s = t.trim(s.join(" ")), s ? e.attr("aria-describedby", s) : e.removeAttr("aria-describedby");
    },
    _create: function () {
      this._on({
        mouseover: "open",
        focusin: "open"
      }), this.tooltips = {}, this.parents = {}, this.liveRegion = t("<div>").attr({
        role: "log",
        "aria-live": "assertive",
        "aria-relevant": "additions"
      }).appendTo(this.document[0].body), this._addClass(this.liveRegion, null, "ui-helper-hidden-accessible"), this.disabledTitles = t([]);
    },
    _setOption: function (e, i) {
      var s = this;
      this._super(e, i), "content" === e && t.each(this.tooltips, function (t, e) {
        s._updateContent(e.element);
      });
    },
    _setOptionDisabled: function (t) {
      this[t ? "_disable" : "_enable"]();
    },
    _disable: function () {
      var e = this;
      t.each(this.tooltips, function (i, s) {
        var n = t.Event("blur");
        n.target = n.currentTarget = s.element[0], e.close(n, !0);
      }), this.disabledTitles = this.disabledTitles.add(this.element.find(this.options.items).addBack().filter(function () {
        var e = t(this);
        return e.is("[title]") ? e.data("ui-tooltip-title", e.attr("title")).removeAttr("title") : void 0;
      }));
    },
    _enable: function () {
      this.disabledTitles.each(function () {
        var e = t(this);
        e.data("ui-tooltip-title") && e.attr("title", e.data("ui-tooltip-title"));
      }), this.disabledTitles = t([]);
    },
    open: function (e) {
      var i = this,
          s = t(e ? e.target : this.element).closest(this.options.items);
      s.length && !s.data("ui-tooltip-id") && (s.attr("title") && s.data("ui-tooltip-title", s.attr("title")), s.data("ui-tooltip-open", !0), e && "mouseover" === e.type && s.parents().each(function () {
        var e,
            s = t(this);
        s.data("ui-tooltip-open") && (e = t.Event("blur"), e.target = e.currentTarget = this, i.close(e, !0)), s.attr("title") && (s.uniqueId(), i.parents[this.id] = {
          element: this,
          title: s.attr("title")
        }, s.attr("title", ""));
      }), this._registerCloseHandlers(e, s), this._updateContent(s, e));
    },
    _updateContent: function (t, e) {
      var i,
          s = this.options.content,
          n = this,
          o = e ? e.type : null;
      return "string" == typeof s || s.nodeType || s.jquery ? this._open(e, t, s) : (i = s.call(t[0], function (i) {
        n._delay(function () {
          t.data("ui-tooltip-open") && (e && (e.type = o), this._open(e, t, i));
        });
      }), i && this._open(e, t, i), void 0);
    },
    _open: function (e, i, s) {
      function n(t) {
        l.of = t, a.is(":hidden") || a.position(l);
      }

      var o,
          a,
          r,
          h,
          l = t.extend({}, this.options.position);

      if (s) {
        if (o = this._find(i)) return o.tooltip.find(".ui-tooltip-content").html(s), void 0;
        i.is("[title]") && (e && "mouseover" === e.type ? i.attr("title", "") : i.removeAttr("title")), o = this._tooltip(i), a = o.tooltip, this._addDescribedBy(i, a.attr("id")), a.find(".ui-tooltip-content").html(s), this.liveRegion.children().hide(), h = t("<div>").html(a.find(".ui-tooltip-content").html()), h.removeAttr("name").find("[name]").removeAttr("name"), h.removeAttr("id").find("[id]").removeAttr("id"), h.appendTo(this.liveRegion), this.options.track && e && /^mouse/.test(e.type) ? (this._on(this.document, {
          mousemove: n
        }), n(e)) : a.position(t.extend({
          of: i
        }, this.options.position)), a.hide(), this._show(a, this.options.show), this.options.track && this.options.show && this.options.show.delay && (r = this.delayedShow = setInterval(function () {
          a.is(":visible") && (n(l.of), clearInterval(r));
        }, t.fx.interval)), this._trigger("open", e, {
          tooltip: a
        });
      }
    },
    _registerCloseHandlers: function (e, i) {
      var s = {
        keyup: function (e) {
          if (e.keyCode === t.ui.keyCode.ESCAPE) {
            var s = t.Event(e);
            s.currentTarget = i[0], this.close(s, !0);
          }
        }
      };
      i[0] !== this.element[0] && (s.remove = function () {
        this._removeTooltip(this._find(i).tooltip);
      }), e && "mouseover" !== e.type || (s.mouseleave = "close"), e && "focusin" !== e.type || (s.focusout = "close"), this._on(!0, i, s);
    },
    close: function (e) {
      var i,
          s = this,
          n = t(e ? e.currentTarget : this.element),
          o = this._find(n);

      return o ? (i = o.tooltip, o.closing || (clearInterval(this.delayedShow), n.data("ui-tooltip-title") && !n.attr("title") && n.attr("title", n.data("ui-tooltip-title")), this._removeDescribedBy(n), o.hiding = !0, i.stop(!0), this._hide(i, this.options.hide, function () {
        s._removeTooltip(t(this));
      }), n.removeData("ui-tooltip-open"), this._off(n, "mouseleave focusout keyup"), n[0] !== this.element[0] && this._off(n, "remove"), this._off(this.document, "mousemove"), e && "mouseleave" === e.type && t.each(this.parents, function (e, i) {
        t(i.element).attr("title", i.title), delete s.parents[e];
      }), o.closing = !0, this._trigger("close", e, {
        tooltip: i
      }), o.hiding || (o.closing = !1)), void 0) : (n.removeData("ui-tooltip-open"), void 0);
    },
    _tooltip: function (e) {
      var i = t("<div>").attr("role", "tooltip"),
          s = t("<div>").appendTo(i),
          n = i.uniqueId().attr("id");
      return this._addClass(s, "ui-tooltip-content"), this._addClass(i, "ui-tooltip", "ui-widget ui-widget-content"), i.appendTo(this._appendTo(e)), this.tooltips[n] = {
        element: e,
        tooltip: i
      };
    },
    _find: function (t) {
      var e = t.data("ui-tooltip-id");
      return e ? this.tooltips[e] : null;
    },
    _removeTooltip: function (t) {
      t.remove(), delete this.tooltips[t.attr("id")];
    },
    _appendTo: function (t) {
      var e = t.closest(".ui-front, dialog");
      return e.length || (e = this.document[0].body), e;
    },
    _destroy: function () {
      var e = this;
      t.each(this.tooltips, function (i, s) {
        var n = t.Event("blur"),
            o = s.element;
        n.target = n.currentTarget = o[0], e.close(n, !0), t("#" + i).remove(), o.data("ui-tooltip-title") && (o.attr("title") || o.attr("title", o.data("ui-tooltip-title")), o.removeData("ui-tooltip-title"));
      }), this.liveRegion.remove();
    }
  }), t.uiBackCompat !== !1 && t.widget("ui.tooltip", t.ui.tooltip, {
    options: {
      tooltipClass: null
    },
    _tooltip: function () {
      var t = this._superApply(arguments);

      return this.options.tooltipClass && t.tooltip.addClass(this.options.tooltipClass), t;
    }
  }), t.ui.tooltip;
});
/*!
muh
	AnythingSlider v1.9.7
	Original by Chris Coyier: http://css-tricks.com
	Get the latest version: https://github.com/CSS-Tricks/AnythingSlider

	To use the navigationFormatter function, you must have a function that
	accepts two paramaters, and returns a string of HTML text.

	index = integer index (1 based);
	panel = jQuery wrapped LI item this tab references
	@return = Must return a string of HTML/Text

	navigationFormatter: function(index, panel){
		return "Panel #" + index; // This would have each tab with the text 'Panel #X' where X = index
	}
*/

/*jshint browser:true, jquery:true, unused:false */
;

(function ($, win, doc) {
  "use strict";

  $.anythingSlider = function (el, options) {
    var base = this,
        o,
        t; // Wraps the ul in the necessary divs and then gives Access to jQuery element

    base.el = el;
    base.$el = $(el).addClass('anythingBase').wrap('<div class="anythingSlider"><div class="anythingWindow" /></div>'); // Add a reverse reference to the DOM object

    base.$el.data("AnythingSlider", base);

    base.init = function () {
      // Added "o" to be used in the code instead of "base.options" which doesn't get modifed by the compiler - reduces size by ~1k
      base.options = o = $.extend({}, $.anythingSlider.defaults, options);
      base.initialized = false;

      if ($.isFunction(o.onBeforeInitialize)) {
        base.$el.bind('before_initialize', o.onBeforeInitialize);
      }

      base.$el.trigger('before_initialize', base); // Add "as-oldie" class to body for css purposes

      $('<!--[if lte IE 8]><script>jQuery("body").addClass("as-oldie");</script><![endif]-->').appendTo('body').remove(); // Cache existing DOM elements for later
      // base.$el = original ul
      // for wrap - get parent() then closest in case the ul has "anythingSlider" class

      base.$wrapper = base.$el.parent().closest('div.anythingSlider').addClass('anythingSlider-' + o.theme);
      base.$outer = base.$wrapper.parent();
      base.$window = base.$el.closest('div.anythingWindow');
      base.$win = $(win);
      base.$controls = $('<div class="anythingControls"></div>');
      base.$nav = $('<ul class="thumbNav"><li><a><span></span></a></li></ul>');
      base.$startStop = $('<a href="#" class="start-stop"></a>');

      if (o.buildStartStop || o.buildNavigation) {
        base.$controls.appendTo(o.appendControlsTo && $(o.appendControlsTo).length ? $(o.appendControlsTo) : base.$wrapper);
      }

      if (o.buildNavigation) {
        base.$nav.appendTo(o.appendNavigationTo && $(o.appendNavigationTo).length ? $(o.appendNavigationTo) : base.$controls);
      }

      if (o.buildStartStop) {
        base.$startStop.appendTo(o.appendStartStopTo && $(o.appendStartStopTo).length ? $(o.appendStartStopTo) : base.$controls);
      } // Figure out how many sliders are on the page for indexing


      base.runTimes = $('.anythingBase').length; // hash tag regex - fixes issue #432

      base.regex = o.hashTags ? new RegExp('panel' + base.runTimes + '-(\\d+)', 'i') : null;

      if (base.runTimes === 1) {
        base.makeActive();
      } // make the first slider on the page active
      // Set up a few defaults & get details


      base.flag = false; // event flag to prevent multiple calls (used in control click/focusin)

      if (o.autoPlayLocked) {
        o.autoPlay = true;
      } // if autoplay is locked, start playing


      base.playing = o.autoPlay; // slideshow state; removed "startStopped" option

      base.slideshow = false; // slideshow flag needed to correctly trigger slideshow events

      base.hovered = false; // actively hovering over the slider

      base.panelSize = []; // will contain dimensions and left position of each panel

      base.currentPage = base.targetPage = o.startPanel = parseInt(o.startPanel, 10) || 1; // make sure this isn't a string

      o.changeBy = parseInt(o.changeBy, 10) || 1; // set slider type, but keep backward compatibility with the vertical option

      t = (o.mode || 'h').toLowerCase().match(/(h|v|f)/);
      t = o.vertical ? 'v' : (t || ['h'])[0];
      o.mode = t === 'v' ? 'vertical' : t === 'f' ? 'fade' : 'horizontal';

      if (t === 'f') {
        o.showMultiple = 1; // all slides are stacked in fade mode

        o.infiniteSlides = false; // no cloned slides
      }

      base.adj = o.infiniteSlides ? 0 : 1; // adjust page limits for infinite or limited modes

      base.adjustMultiple = 0;

      if (o.playRtl) {
        base.$wrapper.addClass('rtl');
      } // Build start/stop button


      if (o.buildStartStop) {
        base.buildAutoPlay();
      } // Build forwards/backwards buttons


      if (o.buildArrows) {
        base.buildNextBackButtons();
      }

      base.$lastPage = base.$targetPage = base.$currentPage; // Initialize o.aspectRatio

      if (o.expand) {
        if (o.aspectRatio === true) {
          // if aspectRatio = true calculate it
          o.aspectRatio = base.$el.width() / base.$el.height();
        } else if (typeof o.aspectRatio === 'string' && o.aspectRatio.indexOf(':') !== -1) {
          // Calculate and set a float from a string e.g. '680:317'
          var f = o.aspectRatio.split(':');
          o.aspectRatio = f[0] / f[1];
        } // Adjust the aspectRatio according to showMultiple i.e. the more panels shown the wider the slider gets


        if (o.aspectRatio > 0 && o.showMultiple > 1) {
          o.aspectRatio = o.aspectRatio * o.showMultiple;
        }
      }

      base.updateSlider(); // Expand slider to fit parent

      if (o.expand) {
        base.$window.css({
          width: '100%',
          height: '100%'
        }); // needed for Opera

        base.checkResize();
      } // Make sure easing function exists.


      if (!$.isFunction($.easing[o.easing])) {
        o.easing = "swing";
      } // If pauseOnHover then add hover effects


      if (o.pauseOnHover) {
        base.$wrapper.hover(function () {
          if (base.playing) {
            base.$el.trigger('slideshow_paused', base);
            base.clearTimer(true);
          }
        }, function () {
          if (base.playing) {
            base.$el.trigger('slideshow_unpaused', base);
            base.startStop(base.playing, true);
          }
        });
      } // Hide/Show navigation & play/stop controls


      base.slideControls(false);
      base.$wrapper.bind('mouseenter mouseleave', function (e) {
        // add hovered class to outer wrapper
        $(this)[e.type === 'mouseenter' ? 'addClass' : 'removeClass']('anythingSlider-hovered');
        base.hovered = e.type === 'mouseenter' ? true : false;
        base.slideControls(base.hovered);
      }); // Add keyboard navigation

      $(doc).keyup(function (e) {
        // Stop arrow keys from working when focused on form items
        if (o.enableKeyboard && base.$wrapper.hasClass('activeSlider') && !e.target.tagName.match('TEXTAREA|INPUT|SELECT')) {
          if (o.mode !== 'vertical' && (e.which === 38 || e.which === 40)) {
            return;
          }

          switch (e.which) {
            case 39:
            case 40:
              // right & down arrow
              base.goForward();
              break;

            case 37:
            case 38:
              // left & up arrow
              base.goBack();
              break;
          }
        }
      }); // If a hash can not be used to trigger the plugin, then go to start panel - see issue #432

      base.currentPage = (o.hashTags ? base.gotoHash() : '') || o.startPanel || 1;
      base.gotoPage(base.currentPage, false, null, -1); // Binds events

      var triggers = "slideshow_resized slideshow_paused slideshow_unpaused slide_init slide_begin slideshow_stop slideshow_start initialized swf_completed".split(" ");
      $.each("onSliderResize onShowPause onShowUnpause onSlideInit onSlideBegin onShowStop onShowStart onInitialized onSWFComplete".split(" "), function (i, f) {
        if ($.isFunction(o[f])) {
          base.$el.bind(triggers[i], o[f]);
        }
      });

      if ($.isFunction(o.onSlideComplete)) {
        // Added setTimeout (zero time) to ensure animation is complete... see this bug report: http://bugs.jquery.com/ticket/7157
        base.$el.bind('slide_complete', function () {
          setTimeout(function () {
            o.onSlideComplete(base);
          }, 0);
          return false;
        });
      }

      base.initialized = true;
      base.$el.trigger('initialized', base); // trigger the slideshow

      base.startStop(o.autoPlay);
    }; // called during initialization & to update the slider if a panel is added or deleted


    base.updateSlider = function () {
      // needed for updating the slider
      base.$el.children('.cloned').remove();
      base.navTextVisible = base.$nav.find('span:first').css('visibility') !== 'hidden';
      base.$nav.empty(); // set currentPage to 1 in case it was zero - occurs when adding slides after removing them all

      base.currentPage = base.currentPage || 1;
      base.$items = base.$el.children();
      base.pages = base.$items.length;
      base.dir = o.mode === 'vertical' ? 'top' : 'left';
      o.showMultiple = parseInt(o.showMultiple, 10) || 1; // only integers allowed

      o.navigationSize = o.navigationSize === false ? 0 : parseInt(o.navigationSize, 10) || 0; // Fix tabbing through the page, but don't change the view if the link is in view (showMultiple = true)

      base.$items.find('a').unbind('focus.AnythingSlider').bind('focus.AnythingSlider', function (e) {
        var panel = $(this).closest('.panel'),
            indx = base.$items.index(panel) + base.adj; // index can be -1 in nested sliders - issue #208

        base.$items.find('.focusedLink').removeClass('focusedLink');
        $(this).addClass('focusedLink');
        base.$window.scrollLeft(0).scrollTop(0);

        if (indx !== -1 && (indx >= base.currentPage + o.showMultiple || indx < base.currentPage)) {
          base.gotoPage(indx);
          e.preventDefault();
        }
      });

      if (o.showMultiple > 1) {
        if (o.showMultiple > base.pages) {
          o.showMultiple = base.pages;
        }

        base.adjustMultiple = o.infiniteSlides && base.pages > 1 ? 0 : o.showMultiple - 1;
      } // Hide navigation & player if there is only one page


      base.$controls.add(base.$nav).add(base.$startStop).add(base.$forward).add(base.$back)[base.pages <= 1 ? 'hide' : 'show']();

      if (base.pages > 1) {
        // Build/update navigation tabs
        base.buildNavigation();
      } // Top and tail the list with 'visible' number of items, top has the last section, and tail has the first
      // This supports the "infinite" scrolling, also ensures any cloned elements don't duplicate an ID
      // Moved removeAttr before addClass otherwise IE7 ignores the addClass: http://bugs.jquery.com/ticket/9871


      if (o.mode !== 'fade' && o.infiniteSlides && base.pages > 1) {
        base.$el.prepend(base.$items.filter(':last').clone().addClass('cloned')); // Add support for multiple sliders shown at the same time

        if (o.showMultiple > 1) {
          base.$el.append(base.$items.filter(':lt(' + o.showMultiple + ')').clone().addClass('cloned multiple'));
        } else {
          base.$el.append(base.$items.filter(':first').clone().addClass('cloned'));
        }

        base.$el.find('.cloned').each(function () {
          // disable all focusable elements in cloned panels to prevent shifting the panels by tabbing
          $(this).find('a,input,textarea,select,button,area,form').attr({
            disabled: 'disabled',
            name: ''
          });
          $(this).find('[id]')[$.fn.addBack ? 'addBack' : 'andSelf']().removeAttr('id');
        });
      } // We just added two items, time to re-cache the list, then get the dimensions of each panel


      base.$items = base.$el.addClass(o.mode).children().addClass('panel');
      base.setDimensions(); // Set the dimensions of each panel

      if (o.resizeContents) {
        base.$items.css('width', base.width);
        base.$wrapper.css('width', base.getDim(base.currentPage)[0]).add(base.$items).css('height', base.height);
      } else {
        base.$win.load(function () {
          // set dimensions after all images load
          base.setDimensions(); // make sure the outer wrapper is set properly

          t = base.getDim(base.currentPage);
          base.$wrapper.css({
            width: t[0],
            height: t[1]
          });
          base.setCurrentPage(base.currentPage, false);
        });
      }

      if (base.currentPage > base.pages) {
        base.currentPage = base.pages;
      }

      base.setCurrentPage(base.currentPage, false);
      base.$nav.find('a').eq(base.currentPage - 1).addClass('cur'); // update current selection

      if (o.mode === 'fade') {
        t = base.$items.eq(base.currentPage - 1);

        if (o.resumeOnVisible) {
          // prevent display: none;
          t.css({
            opacity: 1,
            visibility: 'visible'
          }).siblings().css({
            opacity: 0,
            visibility: 'hidden'
          });
        } else {
          // allow display: none; - resets video
          base.$items.css('opacity', 1);
          t.fadeIn(0).siblings().fadeOut(0);
        }
      }
    }; // Creates the numbered navigation links


    base.buildNavigation = function () {
      if (o.buildNavigation && base.pages > 1) {
        var a, c, i, t, $li;
        base.$items.filter(':not(.cloned)').each(function (j) {
          $li = $('<li/>');
          i = j + 1;
          c = (i === 1 ? ' first' : '') + (i === base.pages ? ' last' : '');
          a = '<a class="panel' + i + (base.navTextVisible ? '"' : ' ' + o.tooltipClass + '" title="@"') + ' href="#"><span>@</span></a>'; // If a formatter function is present, use it

          if ($.isFunction(o.navigationFormatter)) {
            t = o.navigationFormatter(i, $(this));

            if (typeof t === "string") {
              $li.html(a.replace(/@/g, t));
            } else {
              $li = $('<li/>', t);
            }
          } else {
            $li.html(a.replace(/@/g, i));
          }

          $li.appendTo(base.$nav).addClass(c).data('index', i);
        });
        base.$nav.children('li').bind(o.clickControls, function (e) {
          if (!base.flag && o.enableNavigation) {
            // prevent running functions twice (once for click, second time for focusin)
            base.flag = true;
            setTimeout(function () {
              base.flag = false;
            }, 100);
            base.gotoPage($(this).data('index'));
          }

          e.preventDefault();
        }); // Add navigation tab scrolling - use !! in case someone sets the size to zero

        if (!!o.navigationSize && o.navigationSize < base.pages) {
          if (!base.$controls.find('.anythingNavWindow').length) {
            base.$nav.before('<ul><li class="prev"><a href="#"><span>' + o.backText + '</span></a></li></ul>').after('<ul><li class="next"><a href="#"><span>' + o.forwardText + '</span></a></li></ul>').wrap('<div class="anythingNavWindow"></div>');
          } // include half of the left position to include extra width from themes like tabs-light and tabs-dark (still not perfect)


          base.navWidths = base.$nav.find('li').map(function () {
            return $(this).outerWidth(true) + Math.ceil(parseInt($(this).find('span').css('left'), 10) / 2 || 0);
          }).get(); // start navLeft at one so calling base.navWindow() will position the current page on the left

          base.navLeft = 1; // add 25 pixels (old IE needs more than 5) to make sure the tabs don't wrap to the next line

          base.$nav.width(base.navWidth(1, base.pages + 1) + 25);
          base.$controls.find('.anythingNavWindow').width(base.navWidth(1, o.navigationSize + 1)).end().find('.prev,.next').bind(o.clickControls, function (e) {
            if (!base.flag) {
              base.flag = true;
              setTimeout(function () {
                base.flag = false;
              }, 200);
              base.navWindow(base.navLeft + o.navigationSize * ($(this).is('.prev') ? -1 : 1));
            }

            e.preventDefault();
          });
        }
      }
    };

    base.navWidth = function (x, y) {
      var i,
          s = Math.min(x, y),
          e = Math.max(x, y),
          w = 0;

      for (i = s; i < e; i++) {
        w += base.navWidths[i - 1] || 0;
      }

      return w;
    };

    base.navWindow = function (n) {
      if (!!o.navigationSize && o.navigationSize < base.pages && base.navWidths) {
        var p = base.pages - o.navigationSize + 1;
        n = n <= 1 ? 1 : n > 1 && n < p ? n : p;

        if (n !== base.navLeft) {
          base.$controls.find('.anythingNavWindow').animate({
            scrollLeft: base.navWidth(1, n),
            width: base.navWidth(n, n + o.navigationSize)
          }, {
            queue: false,
            duration: o.animationTime
          });
          base.navLeft = n;
        }
      }
    }; // Creates the Forward/Backward buttons


    base.buildNextBackButtons = function () {
      base.$forward = $('<span class="arrow forward"><a href="#"><span>' + o.forwardText + '</span></a></span>');
      base.$back = $('<span class="arrow back"><a href="#"><span>' + o.backText + '</span></a></span>'); // Bind to the forward and back buttons

      base.$back.bind(o.clickBackArrow, function (e) {
        // prevent running functions twice (once for click, second time for swipe)
        if (o.enableArrows && !base.flag) {
          base.flag = true;
          setTimeout(function () {
            base.flag = false;
          }, 100);
          base.goBack();
        }

        e.preventDefault();
      });
      base.$forward.bind(o.clickForwardArrow, function (e) {
        // prevent running functions twice (once for click, second time for swipe)
        if (o.enableArrows && !base.flag) {
          base.flag = true;
          setTimeout(function () {
            base.flag = false;
          }, 100);
          base.goForward();
        }

        e.preventDefault();
      }); // using tab to get to arrow links will show they have focus (outline is disabled in css)

      base.$back.add(base.$forward).find('a').bind('focusin focusout', function () {
        $(this).toggleClass('hover');
      }); // Append elements to page

      base.$back.appendTo(o.appendBackTo && $(o.appendBackTo).length ? $(o.appendBackTo) : base.$wrapper);
      base.$forward.appendTo(o.appendForwardTo && $(o.appendForwardTo).length ? $(o.appendForwardTo) : base.$wrapper);
      base.arrowWidth = base.$forward.width(); // assuming the left & right arrows are the same width - used for toggle

      base.arrowRight = parseInt(base.$forward.css('right'), 10);
      base.arrowLeft = parseInt(base.$back.css('left'), 10);
    }; // Creates the Start/Stop button


    base.buildAutoPlay = function () {
      base.$startStop.html('<span>' + (base.playing ? o.stopText : o.startText) + '</span>').bind(o.clickSlideshow, function (e) {
        if (o.enableStartStop) {
          base.startStop(!base.playing);
          base.makeActive();

          if (base.playing && !o.autoPlayDelayed) {
            base.goForward(true, o.playRtl);
          }
        }

        e.preventDefault();
      }) // show button has focus while tabbing
      .bind('focusin focusout', function () {
        $(this).toggleClass('hover');
      });
    }; // Adjust slider dimensions on parent element resize


    base.checkResize = function (stopTimer) {
      // checking document visibility
      var vis = !!(doc.hidden || doc.webkitHidden || doc.mozHidden || doc.msHidden);
      clearTimeout(base.resizeTimer);
      base.resizeTimer = setTimeout(function () {
        var w = base.$outer.width(),
            h = base.$outer[0].tagName === "BODY" ? base.$win.height() : base.$outer.height(); // base.width = width of one panel, so multiply by # of panels; outerPad is padding added for arrows.
        // ignore changes if window hidden

        if (!vis && (base.lastDim[0] !== w || base.lastDim[1] !== h)) {
          base.setDimensions(); // adjust panel sizes
          //callback for slider resize

          base.$el.trigger('slideshow_resized', base); // make sure page is lined up (use -1 animation time, so we can differeniate it from when animationTime = 0)

          base.gotoPage(base.currentPage, base.playing, null, -1);
        }

        if (typeof stopTimer === 'undefined') {
          base.checkResize();
        } // increase time if page is hidden; but don't stop it completely

      }, vis ? 2000 : 500);
    }; // Set panel dimensions to either resize content or adjust panel to content


    base.setDimensions = function () {
      // reset element width & height
      base.$wrapper.find('.anythingWindow, .anythingBase, .panel')[$.fn.addBack ? 'addBack' : 'andSelf']().css({
        width: '',
        height: ''
      });
      base.width = base.$el.width();
      base.height = base.$el.height();
      base.outerPad = [base.$wrapper.innerWidth() - base.$wrapper.width(), base.$wrapper.innerHeight() - base.$wrapper.height()];
      var w,
          h,
          c,
          t,
          edge = 0,
          fullsize = {
        width: '100%',
        height: '100%'
      },
          // determine panel width
      pw = o.showMultiple > 1 && o.mode === 'horizontal' ? base.width || base.$window.width() / o.showMultiple : base.$window.width(),
          ph = o.showMultiple > 1 && o.mode === 'vertical' ? base.height / o.showMultiple || base.$window.height() / o.showMultiple : base.$window.height();

      if (o.expand) {
        base.lastDim = [base.$outer.width(), base.$outer.height()];
        w = base.lastDim[0] - base.outerPad[0];
        h = base.lastDim[1] - base.outerPad[1]; // Rescale according to the aspectRatio if not null
        // We have already insured that (in init) o.aspectRatio contains a float.
        // make sure aspectRatio isn't infinity (divided by zero; so must be less than width, 3 might be a better number)

        if (o.aspectRatio && o.aspectRatio < base.width) {
          var arW = h * o.aspectRatio; // Really: only one of these should be adjusted therefor the else ... if

          if (arW < w) {
            w = arW;
          } else {
            var arH = w / o.aspectRatio;

            if (arH < h) {
              h = arH;
            }
          }
        }

        base.$wrapper.add(base.$window).css({
          width: w,
          height: h
        });
        base.height = h = o.showMultiple > 1 && o.mode === 'vertical' ? ph : h;
        base.width = pw = o.showMultiple > 1 && o.mode === 'horizontal' ? w / o.showMultiple : w;
        base.$items.css({
          width: pw,
          height: ph
        });
      }

      base.$items.each(function (i) {
        t = $(this);
        c = t.children();

        if (o.resizeContents) {
          // resize panel
          w = base.width;
          h = base.height;
          t.css({
            width: w,
            height: h
          });

          if (c.length) {
            if (c[0].tagName === "EMBED") {
              c.attr(fullsize);
            } // needed for IE7; also c.length > 1 in IE7


            if (c[0].tagName === "OBJECT") {
              c.find('embed').attr(fullsize);
            } // resize panel contents, if solitary (wrapped content or solitary image)


            if (c.length === 1) {
              c.css(fullsize);
            }
          }
        } else {
          // get panel width & height and save it
          if (o.mode === 'vertical') {
            w = t.css('display', 'inline-block').width();
            t.css('display', '');
          } else {
            w = t.width() || base.width; // if image hasn't finished loading, width will be zero, so set it to base width instead
          }

          if (c.length === 1 && w >= pw) {
            w = c.width() >= pw ? pw : c.width(); // get width of solitary child

            c.css('max-width', w); // set max width for all children
          }

          t.css({
            width: w,
            height: ''
          }); // set width of panel

          h = c.length === 1 ? c.outerHeight(true) : t.height(); // get height after setting width

          if (h <= base.outerPad[1]) {
            h = base.height;
          } // if height less than the outside padding, then set it to the preset height


          t.css('height', h);
        }

        base.panelSize[i] = [w, h, edge];
        edge += o.mode === 'vertical' ? h : w;
      }); // Set total width of slider

      base.$el.css(o.mode === 'vertical' ? 'height' : 'width', o.mode === 'fade' ? base.width : edge);
    }; // get dimension of multiple panels, as needed


    base.getDim = function (page) {
      var t,
          i,
          w = base.width,
          h = base.height;

      if (base.pages < 1 || isNaN(page)) {
        return [w, h];
      } // prevent errors when base.panelSize is empty


      page = o.infiniteSlides && base.pages > 1 ? page : page - 1;
      i = base.panelSize[page];

      if (i) {
        w = i[0] || w;
        h = i[1] || h;
      }

      if (o.showMultiple > 1) {
        for (i = 1; i < o.showMultiple; i++) {
          // if panel doesn't exist; calculate the next one to be the
          // same size as the last - fixes #659
          t = base.panelSize[page + i] ? page + i : page;

          if (o.mode === 'vertical') {
            w = Math.max(w, base.panelSize[t][0]);
            h += base.panelSize[t][1];
          } else {
            w += base.panelSize[t][0];
            h = Math.max(h, base.panelSize[t][1]);
          }
        }
      }

      return [w, h];
    };

    base.goForward = function (autoplay, rtl) {
      // targetPage changes before animation so if rapidly changing pages, it will have the correct current page
      base.gotoPage(base[o.allowRapidChange ? 'targetPage' : 'currentPage'] + o.changeBy * (rtl ? -1 : 1), autoplay);
    };

    base.goBack = function (autoplay) {
      base.gotoPage(base[o.allowRapidChange ? 'targetPage' : 'currentPage'] - o.changeBy, autoplay);
    };

    base.gotoPage = function (page, autoplay, callback, time) {
      if (autoplay !== true) {
        autoplay = false;
        base.startStop(false);
        base.makeActive();
      } // check if page is an id or class name


      if (/^[#|.]/.test(page) && $(page).length) {
        page = $(page).closest('.panel').index() + base.adj;
      } // rewind effect occurs here when changeBy > 1


      if (o.changeBy !== 1) {
        var adj = base.pages - base.adjustMultiple;

        if (page < 1) {
          page = o.stopAtEnd ? 1 : o.infiniteSlides ? base.pages + page : o.showMultiple > 1 - page ? 1 : adj;
        }

        if (page > base.pages) {
          page = o.stopAtEnd ? base.pages : o.showMultiple > 1 - page ? 1 : page -= adj;
        } else if (page >= adj) {
          // show multiple adjustments
          page = adj;
        }
      }

      if (base.pages <= 1) {
        return;
      } // prevents animation


      base.$lastPage = base.$currentPage;

      if (typeof page !== "number") {
        page = parseInt(page, 10) || o.startPanel;
        base.setCurrentPage(page);
      } // pause YouTube videos before scrolling or prevent change if playing


      if (autoplay && o.isVideoPlaying(base)) {
        return;
      }

      if (o.stopAtEnd && !o.infiniteSlides && page > base.pages - o.showMultiple) {
        page = base.pages - o.showMultiple + 1;
      } // fixes #515


      base.exactPage = page;

      if (page > base.pages + 1 - base.adj) {
        page = !o.infiniteSlides && !o.stopAtEnd ? 1 : base.pages;
      }

      if (page < base.adj) {
        page = !o.infiniteSlides && !o.stopAtEnd ? base.pages : 1;
      }

      if (!o.infiniteSlides) {
        base.exactPage = page;
      } // exact page used by the fx extension


      base.currentPage = page > base.pages ? base.pages : page < 1 ? 1 : base.currentPage;
      base.$currentPage = base.$items.eq(base.currentPage - base.adj);
      base.targetPage = page === 0 ? base.pages : page > base.pages ? 1 : page;
      base.$targetPage = base.$items.eq(base.targetPage - base.adj);
      time = typeof time !== 'undefined' ? time : o.animationTime; // don't trigger events when time < 0 - to prevent FX from firing multiple times on page resize

      if (time >= 0) {
        base.$el.trigger('slide_init', base);
      } // toggle arrows/controls only if there is time to see it - fix issue #317


      if (time > 0 && o.toggleControls === true) {
        base.slideControls(true);
      } // Set visual


      if (o.buildNavigation) {
        base.setNavigation(base.targetPage);
      } // When autoplay isn't passed, we stop the timer


      if (autoplay !== true) {
        autoplay = false;
      } // Stop the slider when we reach the last page, if the option stopAtEnd is set to true


      if (!autoplay || o.stopAtEnd && page === base.pages) {
        base.startStop(false);
      }

      if (time >= 0) {
        base.$el.trigger('slide_begin', base);
      } // delay starting slide animation


      setTimeout(function (d) {
        var p,
            empty = true;

        if (o.allowRapidChange) {
          base.$wrapper.add(base.$el).add(base.$items).stop(true, true);
        } // resize slider if content size varies


        if (!o.resizeContents) {
          // animating the wrapper resize before the window prevents flickering in Firefox
          // don't animate the dimension if it hasn't changed - fix for issue #264
          p = base.getDim(page);
          d = {}; // prevent animating a dimension to zero

          if (base.$wrapper.width() !== p[0]) {
            d.width = p[0] || base.width;
            empty = false;
          }

          if (base.$wrapper.height() !== p[1]) {
            d.height = p[1] || base.height;
            empty = false;
          }

          if (!empty) {
            base.$wrapper.filter(':not(:animated)').animate(d, {
              queue: false,
              duration: time < 0 ? 0 : time,
              easing: o.easing
            });
          }
        }

        if (o.mode === 'fade') {
          if (base.$lastPage[0] !== base.$targetPage[0]) {
            base.fadeIt(base.$lastPage, 0, time);
            base.fadeIt(base.$targetPage, 1, time, function () {
              base.endAnimation(page, callback, time);
            });
          } else {
            base.endAnimation(page, callback, time);
          }
        } else {
          d = {};
          d[base.dir] = -base.panelSize[o.infiniteSlides && base.pages > 1 ? page : page - 1][2]; // resize width of base element (ul) if vertical & width of content varies

          if (o.mode === 'vertical' && !o.resizeContents) {
            d.width = p[0];
          } // Animate Slider


          base.$el.filter(':not(:animated)').animate(d, {
            queue: false,
            duration: time < 0 ? 0 : time,
            easing: o.easing,
            complete: function () {
              base.endAnimation(page, callback, time);
            }
          });
        }
      }, parseInt(o.delayBeforeAnimate, 10) || 0);
    };

    base.endAnimation = function (page, callback, time) {
      if (page === 0) {
        base.$el.css(base.dir, o.mode === 'fade' ? 0 : -base.panelSize[base.pages][2]);
        page = base.pages;
      } else if (page > base.pages) {
        // reset back to start position
        base.$el.css(base.dir, o.mode === 'fade' ? 0 : -base.panelSize[1][2]);
        page = 1;
      }

      base.exactPage = page;
      base.setCurrentPage(page, false);

      if (o.mode === 'fade') {
        // make sure non current panels are hidden (rapid slide changes)
        base.fadeIt(base.$items.not(':eq(' + (page - base.adj) + ')'), 0, 0);
      }

      if (!base.hovered) {
        base.slideControls(false);
      }

      if (o.hashTags) {
        base.setHash(page);
      }

      if (time >= 0) {
        base.$el.trigger('slide_complete', base);
      } // callback from external slide control: $('#slider').anythingSlider(4, function(slider){ })


      if (typeof callback === 'function') {
        callback(base);
      } // Continue slideshow after a delay


      if (o.autoPlayLocked && !base.playing) {
        setTimeout(function () {
          base.startStop(true); // subtract out slide delay as the slideshow waits that additional time.
        }, o.resumeDelay - (o.autoPlayDelayed ? o.delay : 0));
      }
    };

    base.fadeIt = function (el, toOpacity, time, callback) {
      var f = el.filter(':not(:animated)'),
          t = time < 0 ? 0 : time;

      if (o.resumeOnVisible) {
        if (toOpacity === 1) {
          f.css('visibility', 'visible');
        }

        f.fadeTo(t, toOpacity, function () {
          if (toOpacity === 0) {
            f.css('visibility', 'hidden');
          }

          if ($.isFunction(callback)) {
            callback();
          }
        });
      } else {
        f[toOpacity === 0 ? 'fadeOut' : 'fadeIn'](t, callback);
      }
    };

    base.setCurrentPage = function (page, move) {
      page = parseInt(page, 10);

      if (base.pages < 1 || page === 0 || isNaN(page)) {
        return;
      }

      if (page > base.pages + 1 - base.adj) {
        page = base.pages - base.adj;
      }

      if (page < base.adj) {
        page = 1;
      } // hide/show arrows based on infinite scroll mode


      if (o.buildArrows && !o.infiniteSlides && o.stopAtEnd) {
        base.$forward[page === base.pages - base.adjustMultiple ? 'addClass' : 'removeClass']('disabled');
        base.$back[page === 1 ? 'addClass' : 'removeClass']('disabled');

        if (page === base.pages && base.playing) {
          base.startStop();
        }
      } // Only change left if move does not equal false


      if (!move) {
        var d = base.getDim(page);
        base.$wrapper.css({
          width: d[0],
          height: d[1]
        }).add(base.$window).scrollLeft(0).scrollTop(0); // reset in case tabbing changed this scrollLeft - probably overly redundant

        base.$el.css(base.dir, o.mode === 'fade' ? 0 : -base.panelSize[o.infiniteSlides && base.pages > 1 ? page : page - 1][2]);
      } // Update local variable


      base.currentPage = page;
      base.$currentPage = base.$items.removeClass('activePage').eq(page - base.adj).addClass('activePage');

      if (o.buildNavigation) {
        base.setNavigation(page);
      }
    };

    base.setNavigation = function (page) {
      base.$nav.find('.cur').removeClass('cur').end().find('a').eq(page - 1).addClass('cur');
    };

    base.makeActive = function () {
      // Set current slider as active so keyboard navigation works properly
      if (!base.$wrapper.hasClass('activeSlider')) {
        $('.activeSlider').removeClass('activeSlider');
        base.$wrapper.addClass('activeSlider');
      }
    }; // This method tries to find a hash that matches an ID and panel-X
    // If either found, it tries to find a matching item
    // If that is found as well, then it returns the page number


    base.gotoHash = function () {
      var h = win.location.hash,
          i = h.indexOf('&'),
          n = h.match(base.regex); // test for "/#/" or "/#!/" used by the jquery address plugin - $('#/') breaks jQuery

      if (n === null && !/^#&/.test(h) && !/#!?\//.test(h) && !/\=/.test(h)) {
        // #quote2&panel1-3&panel3-3
        h = h.substring(0, i >= 0 ? i : h.length); // ensure the element is in the same slider

        n = $(h).length && $(h).closest('.anythingBase')[0] === base.el ? base.$items.index($(h).closest('.panel')) + base.adj : null;
      } else if (n !== null) {
        // #&panel1-3&panel3-3
        n = o.hashTags ? parseInt(n[1], 10) : null;
      }

      return n;
    };

    base.setHash = function (n) {
      var s = 'panel' + base.runTimes + '-',
          h = win.location.hash;

      if (typeof h !== 'undefined') {
        win.location.hash = h.indexOf(s) > 0 ? h.replace(base.regex, s + n) : h + "&" + s + n;
      }
    }; // Slide controls (nav and play/stop button up or down)


    base.slideControls = function (toggle) {
      var dir = toggle ? 'slideDown' : 'slideUp',
          t1 = toggle ? 0 : o.animationTime,
          t2 = toggle ? o.animationTime : 0,
          op = toggle ? 1 : 0,
          sign = toggle ? 0 : 1; // 0 = visible, 1 = hidden

      if (o.toggleControls) {
        base.$controls.stop(true, true).delay(t1)[dir](o.animationTime / 2).delay(t2);
      }

      if (o.buildArrows && o.toggleArrows) {
        if (!base.hovered && base.playing) {
          sign = 1;
          op = 0;
        } // don't animate arrows during slideshow


        base.$forward.stop(true, true).delay(t1).animate({
          right: base.arrowRight + sign * base.arrowWidth,
          opacity: op
        }, o.animationTime / 2);
        base.$back.stop(true, true).delay(t1).animate({
          left: base.arrowLeft + sign * base.arrowWidth,
          opacity: op
        }, o.animationTime / 2);
      }
    };

    base.clearTimer = function (paused) {
      // Clear the timer only if it is set
      if (base.timer) {
        win.clearInterval(base.timer);

        if (!paused && base.slideshow) {
          base.$el.trigger('slideshow_stop', base);
          base.slideshow = false;
        }
      }
    }; // Pass startStop(false) to stop and startStop(true) to play


    base.startStop = function (playing, paused) {
      if (playing !== true) {
        playing = false;
      } // Default if not supplied is false


      base.playing = playing;

      if (playing && !paused) {
        base.$el.trigger('slideshow_start', base);
        base.slideshow = true;
      } // Toggle playing and text


      if (o.buildStartStop) {
        base.$startStop.toggleClass('playing', playing).find('span').html(playing ? o.stopText : o.startText); // add button text to title attribute if it is hidden by text-indent

        if (base.$startStop.find('span').css('visibility') === "hidden") {
          base.$startStop.addClass(o.tooltipClass).attr('title', playing ? o.stopText : o.startText);
        }
      } // Pause slideshow while video is playing


      if (playing) {
        base.clearTimer(true); // Just in case this was triggered twice in a row

        base.timer = win.setInterval(function () {
          if (!!(doc.hidden || doc.webkitHidden || doc.mozHidden || doc.msHidden)) {
            // stop slideshow if the page isn't visible (issue #463)
            if (!o.autoPlayLocked) {
              base.startStop();
            }
          } else if (!o.isVideoPlaying(base)) {
            // prevent autoplay if video is playing
            base.goForward(true, o.playRtl);
          } else if (!o.resumeOnVideoEnd) {
            // stop slideshow if resume if false
            base.startStop();
          }
        }, o.delay);
      } else {
        base.clearTimer();
      }
    }; // Trigger the initialization


    base.init();
  };

  $.anythingSlider.defaults = {
    // Appearance
    theme: "default",
    // Theme name, add the css stylesheet manually
    mode: "horiz",
    // Set mode to "horizontal", "vertical" or "fade" (only first letter needed); replaces vertical option
    expand: false,
    // If true, the entire slider will expand to fit the parent element
    resizeContents: true,
    // If true, solitary images/objects in the panel will expand to fit the viewport
    // commented out as this will reduce the size of the minified version
    //aspectRatio       : null,      // Valid values: null, true, a float e.g. 1.5 (or as 3/2) or a ratio in a string e.g. '3:2'
    // If true calculate it from original width/height for slider element, if it is a number/ratio use that value
    showMultiple: false,
    // Set this value to a number and it will show that many slides at once
    easing: "swing",
    // Anything other than "linear" or "swing" requires the easing plugin or jQuery UI
    buildArrows: true,
    // If true, builds the forwards and backwards buttons
    buildNavigation: true,
    // If true, builds a list of anchor links to link to each panel
    buildStartStop: true,
    // ** If true, builds the start/stop button

    /*
    		// commented out as this will reduce the size of the minified version
    		appendForwardTo     : null,      // Append forward arrow to a HTML element (jQuery Object, selector or HTMLNode), if not null
    		appendBackTo        : null,      // Append back arrow to a HTML element (jQuery Object, selector or HTMLNode), if not null
    		appendControlsTo    : null,      // Append controls (navigation + start-stop) to a HTML element (jQuery Object, selector or HTMLNode), if not null
    		appendNavigationTo  : null,      // Append navigation buttons to a HTML element (jQuery Object, selector or HTMLNode), if not null
    		appendStartStopTo   : null,      // Append start-stop button to a HTML element (jQuery Object, selector or HTMLNode), if not null
    */
    toggleArrows: false,
    // If true, side navigation arrows will slide out on hovering & hide @ other times
    toggleControls: false,
    // if true, slide in controls (navigation + play/stop button) on hover and slide change, hide @ other times
    startText: "Start",
    // Start button text
    stopText: "Stop",
    // Stop button text
    forwardText: "&raquo;",
    // Link text used to move the slider forward (hidden by CSS, replaced with arrow image)
    backText: "&laquo;",
    // Link text used to move the slider back (hidden by CSS, replace with arrow image)
    tooltipClass: "tooltip",
    // Class added to navigation & start/stop button (text copied to title if it is hidden by a negative text indent)
    // Function
    enableArrows: true,
    // if false, arrows will be visible, but not clickable.
    enableNavigation: true,
    // if false, navigation links will still be visible, but not clickable.
    enableStartStop: true,
    // if false, the play/stop button will still be visible, but not clickable. Previously "enablePlay"
    enableKeyboard: true,
    // if false, keyboard arrow keys will not work for this slider.
    // Navigation
    startPanel: 1,
    // This sets the initial panel
    changeBy: 1,
    // Amount to go forward or back when changing panels.
    hashTags: true,
    // Should links change the hashtag in the URL?
    infiniteSlides: true,
    // if false, the slider will not wrap & not clone any panels
    navigationFormatter: null,
    // Details at the top of the file on this use (advanced use)
    navigationSize: false,
    // Set this to the maximum number of visible navigation tabs; false to disable
    // Slideshow options
    autoPlay: false,
    // If true, the slideshow will start running; replaces "startStopped" option
    autoPlayLocked: false,
    // If true, user changing slides will not stop the slideshow
    autoPlayDelayed: false,
    // If true, starting a slideshow will delay advancing slides; if false, the slider will immediately advance to the next slide when slideshow starts
    pauseOnHover: true,
    // If true & the slideshow is active, the slideshow will pause on hover
    stopAtEnd: false,
    // If true & the slideshow is active, the slideshow will stop on the last page. This also stops the rewind effect when infiniteSlides is false.
    playRtl: false,
    // If true, the slideshow will move right-to-left
    // Times
    delay: 3000,
    // How long between slideshow transitions in AutoPlay mode (in milliseconds)
    resumeDelay: 15000,
    // Resume slideshow after user interaction, only if autoplayLocked is true (in milliseconds).
    animationTime: 600,
    // How long the slideshow transition takes (in milliseconds)
    delayBeforeAnimate: 0,
    // How long to pause slide animation before going to the desired slide (used if you want your "out" FX to show).

    /*
    		// Callbacks - commented out to reduce size of the minified version - they still work
    		onSliderResize      : function(e, slider) {}, // Callback when slider resizes
    		onBeforeInitialize  : function(e, slider) {}, // Callback before the plugin initializes
    		onInitialized       : function(e, slider) {}, // Callback when the plugin finished initializing
    		onShowStart         : function(e, slider) {}, // Callback on slideshow start
    		onShowStop          : function(e, slider) {}, // Callback after slideshow stops
    		onShowPause         : function(e, slider) {}, // Callback when slideshow pauses
    		onShowUnpause       : function(e, slider) {}, // Callback when slideshow unpauses - may not trigger properly if user clicks on any controls
    		onSlideInit         : function(e, slider) {}, // Callback when slide initiates, before control animation
    		onSlideBegin        : function(e, slider) {}, // Callback before slide animates
    		onSlideComplete     : function(slider) {},    // Callback when slide completes - no event variable!
    */
    // Interactivity
    clickForwardArrow: "click",
    // Event used to activate forward arrow functionality (e.g. add jQuery mobile's "swiperight")
    clickBackArrow: "click",
    // Event used to activate back arrow functionality (e.g. add jQuery mobile's "swipeleft")
    clickControls: "click focusin",
    // Events used to activate navigation control functionality
    clickSlideshow: "click",
    // Event used to activate slideshow play/stop button
    allowRapidChange: false,
    // If true, allow rapid changing of the active pane, instead of ignoring activity during animation
    // Video
    resumeOnVideoEnd: true,
    // If true & the slideshow is active & a supported video is playing, it will pause the autoplay until the video is complete
    resumeOnVisible: true,
    // If true the video will resume playing, if previously paused; if false, the video remains paused.
    isVideoPlaying: function (base) {
      return false;
    } // return true if video is playing or false if not - used by video extension
    // deprecated - use the video extension wmode option now
    // addWmodeToObject : "opaque"   // If your slider has a video supported by the extension, the script will automatically add a wmode parameter with this setting

  };

  $.fn.anythingSlider = function (options, callback) {
    return this.each(function () {
      var page,
          anySlide = $(this).data('AnythingSlider'); // initialize the slider but prevent multiple initializations

      if ((typeof options).match('object|undefined')) {
        if (!anySlide) {
          new $.anythingSlider(this, options);
        } else {
          anySlide.updateSlider();
        } // If options is a number, process as an external link to page #: $(element).anythingSlider(#)

      } else if (/\d/.test(options) && !isNaN(options) && anySlide) {
        page = typeof options === "number" ? options : parseInt($.trim(options), 10); // accepts "  2  "
        // ignore out of bound pages

        if (page >= 1 && page <= anySlide.pages) {
          anySlide.gotoPage(page, false, callback); // page #, autoplay, one time callback
        } // Accept id or class name

      } else if (/^[#|.]/.test(options) && $(options).length) {
        anySlide.gotoPage(options, false, callback);
      }
    });
  };
})(jQuery, window, document);
/*!
 * jQuery BBQ: Back Button & Query Library - v1.4pre - 1/15/2013
 * http://benalman.com/projects/jquery-bbq-plugin/
 * 
 * Copyright (c) 2010-2013 "Cowboy" Ben Alman
 * Dual licensed under the MIT and GPL licenses.
 * http://benalman.com/about/license/
 */
// Script: jQuery BBQ: Back Button & Query Library
//
// *Version: 1.4pre, Last updated: 1/15/2013*
// 
// Project Home - http://benalman.com/projects/jquery-bbq-plugin/
// GitHub       - http://github.com/cowboy/jquery-bbq/
// Source       - http://github.com/cowboy/jquery-bbq/raw/master/jquery.ba-bbq.js
// (Minified)   - http://github.com/cowboy/jquery-bbq/raw/master/jquery.ba-bbq.min.js (2.2kb gzipped)
// 
// About: License
// 
// Copyright (c) 2010-2013 "Cowboy" Ben Alman,
// Dual licensed under the MIT and GPL licenses.
// http://benalman.com/about/license/
// 
// About: Examples
// 
// These working examples, complete with fully commented code, illustrate a few
// ways in which this plugin can be used.
// 
// Basic AJAX     - http://benalman.com/code/projects/jquery-bbq/examples/fragment-basic/
// Advanced AJAX  - http://benalman.com/code/projects/jquery-bbq/examples/fragment-advanced/
// jQuery UI Tabs - http://benalman.com/code/projects/jquery-bbq/examples/fragment-jquery-ui-tabs/
// Deparam        - http://benalman.com/code/projects/jquery-bbq/examples/deparam/
// 
// About: Support and Testing
// 
// Information about what version or versions of jQuery this plugin has been
// tested with, what browsers it has been tested in, and where the unit tests
// reside (so you can test it yourself).
// 
// jQuery Versions - 1.2.6, 1.3.2, 1.4.1, 1.4.2
// Browsers Tested - Internet Explorer 6-8, Firefox 2-4, Chrome 5-6, Safari 3.2-5,
//                   Opera 9.6-10.60, iPhone 3.1, Android 1.6-2.2, BlackBerry 4.6-5.
// Unit Tests      - http://benalman.com/code/projects/jquery-bbq/unit/
// 
// About: Release History
// 
// 1.4pre - (1/15/2013) Removed $.browser reference to work with jQuery 1.9
// 1.3pre - (8/26/2010) Integrated <jQuery hashchange event> v1.3, which adds
//         document.title and document.domain support in IE6/7, BlackBerry
//         support, better Iframe hiding for accessibility reasons, and the new
//         <jQuery.fn.hashchange> "shortcut" method. Added the
//         <jQuery.param.sorted> method which reduces the possibility of
//         extraneous hashchange event triggering. Added the
//         <jQuery.param.fragment.ajaxCrawlable> method which can be used to
//         enable Google "AJAX Crawlable mode."
// 1.2.1 - (2/17/2010) Actually fixed the stale window.location Safari bug from
//         <jQuery hashchange event> in BBQ, which was the main reason for the
//         previous release!
// 1.2   - (2/16/2010) Integrated <jQuery hashchange event> v1.2, which fixes a
//         Safari bug, the event can now be bound before DOM ready, and IE6/7
//         page should no longer scroll when the event is first bound. Also
//         added the <jQuery.param.fragment.noEscape> method, and reworked the
//         <hashchange event (BBQ)> internal "add" method to be compatible with
//         changes made to the jQuery 1.4.2 special events API.
// 1.1.1 - (1/22/2010) Integrated <jQuery hashchange event> v1.1, which fixes an
//         obscure IE8 EmulateIE7 meta tag compatibility mode bug.
// 1.1   - (1/9/2010) Broke out the jQuery BBQ event.special <hashchange event>
//         functionality into a separate plugin for users who want just the
//         basic event & back button support, without all the extra awesomeness
//         that BBQ provides. This plugin will be included as part of jQuery BBQ,
//         but also be available separately. See <jQuery hashchange event>
//         plugin for more information. Also added the <jQuery.bbq.removeState>
//         method and added additional <jQuery.deparam> examples.
// 1.0.3 - (12/2/2009) Fixed an issue in IE 6 where location.search and
//         location.hash would report incorrectly if the hash contained the ?
//         character. Also <jQuery.param.querystring> and <jQuery.param.fragment>
//         will no longer parse params out of a URL that doesn't contain ? or #,
//         respectively.
// 1.0.2 - (10/10/2009) Fixed an issue in IE 6/7 where the hidden IFRAME caused
//         a "This page contains both secure and nonsecure items." warning when
//         used on an https:// page.
// 1.0.1 - (10/7/2009) Fixed an issue in IE 8. Since both "IE7" and "IE8
//         Compatibility View" modes erroneously report that the browser
//         supports the native window.onhashchange event, a slightly more
//         robust test needed to be added.
// 1.0   - (10/2/2009) Initial release
(function ($, window) {
  '$:nomunge'; // Used by YUI compressor.
  // Some convenient shortcuts.

  var undefined,
      aps = Array.prototype.slice,
      decode = decodeURIComponent,
      // Method / object references.
  jq_param = $.param,
      jq_param_sorted,
      jq_param_fragment,
      jq_deparam,
      jq_deparam_fragment,
      jq_bbq = $.bbq = $.bbq || {},
      jq_bbq_pushState,
      jq_bbq_getState,
      jq_elemUrlAttr,
      special = $.event.special,
      // Reused strings.
  str_hashchange = 'hashchange',
      str_querystring = 'querystring',
      str_fragment = 'fragment',
      str_elemUrlAttr = 'elemUrlAttr',
      str_href = 'href',
      str_src = 'src',
      // Reused RegExp.
  re_params_querystring = /^.*\?|#.*$/g,
      re_params_fragment,
      re_fragment,
      re_no_escape,
      ajax_crawlable,
      fragment_prefix,
      // Used by jQuery.elemUrlAttr.
  elemUrlAttr_cache = {}; // A few commonly used bits, broken out to help reduce minified file size.

  function is_string(arg) {
    return typeof arg === 'string';
  }

  ; // Why write the same function twice? Let's curry! Mmmm, curry..

  function curry(func) {
    var args = aps.call(arguments, 1);
    return function () {
      return func.apply(this, args.concat(aps.call(arguments)));
    };
  }

  ; // Get location.hash (or what you'd expect location.hash to be) sans any
  // leading #. Thanks for making this necessary, Firefox!

  function get_fragment(url) {
    return url.replace(re_fragment, '$2');
  }

  ; // Get location.search (or what you'd expect location.search to be) sans any
  // leading #. Thanks for making this necessary, IE6!

  function get_querystring(url) {
    return url.replace(/(?:^[^?#]*\?([^#]*).*$)?.*/, '$1');
  }

  ; // Section: Param (to string)
  //
  // Method: jQuery.param.querystring
  //
  // Retrieve the query string from a URL or if no arguments are passed, the
  // current window.location.href.
  //
  // Usage:
  //
  // > jQuery.param.querystring( [ url ] );
  //
  // Arguments:
  //
  //  url - (String) A URL containing query string params to be parsed. If url
  //    is not passed, the current window.location.href is used.
  //
  // Returns:
  //
  //  (String) The parsed query string, with any leading "?" removed.
  //
  // Method: jQuery.param.querystring (build url)
  //
  // Merge a URL, with or without pre-existing query string params, plus any
  // object, params string or URL containing query string params into a new URL.
  //
  // Usage:
  //
  // > jQuery.param.querystring( url, params [, merge_mode ] );
  //
  // Arguments:
  //
  //  url - (String) A valid URL for params to be merged into. This URL may
  //    contain a query string and/or fragment (hash).
  //  params - (String) A params string or URL containing query string params to
  //    be merged into url.
  //  params - (Object) A params object to be merged into url.
  //  merge_mode - (Number) Merge behavior defaults to 0 if merge_mode is not
  //    specified, and is as-follows:
  //
  //    * 0: params in the params argument will override any query string
  //         params in url.
  //    * 1: any query string params in url will override params in the params
  //         argument.
  //    * 2: params argument will completely replace any query string in url.
  //
  // Returns:
  //
  //  (String) A URL with a urlencoded query string in the format '?a=b&c=d&e=f'.
  // Method: jQuery.param.fragment
  //
  // Retrieve the fragment (hash) from a URL or if no arguments are passed, the
  // current window.location.href.
  //
  // Usage:
  //
  // > jQuery.param.fragment( [ url ] );
  //
  // Arguments:
  //
  //  url - (String) A URL containing fragment (hash) params to be parsed. If
  //    url is not passed, the current window.location.href is used.
  //
  // Returns:
  //
  //  (String) The parsed fragment (hash) string, with any leading "#" removed.
  // Method: jQuery.param.fragment (build url)
  //
  // Merge a URL, with or without pre-existing fragment (hash) params, plus any
  // object, params string or URL containing fragment (hash) params into a new
  // URL.
  //
  // Usage:
  //
  // > jQuery.param.fragment( url, params [, merge_mode ] );
  //
  // Arguments:
  //
  //  url - (String) A valid URL for params to be merged into. This URL may
  //    contain a query string and/or fragment (hash).
  //  params - (String) A params string or URL containing fragment (hash) params
  //    to be merged into url.
  //  params - (Object) A params object to be merged into url.
  //  merge_mode - (Number) Merge behavior defaults to 0 if merge_mode is not
  //    specified, and is as-follows:
  //
  //    * 0: params in the params argument will override any fragment (hash)
  //         params in url.
  //    * 1: any fragment (hash) params in url will override params in the
  //         params argument.
  //    * 2: params argument will completely replace any query string in url.
  //
  // Returns:
  //
  //  (String) A URL with a urlencoded fragment (hash) in the format '#a=b&c=d&e=f'.

  function jq_param_sub(is_fragment, get_func, url, params, merge_mode) {
    var result, qs, matches, url_params, hash;

    if (params !== undefined) {
      // Build URL by merging params into url string.
      // matches[1] = url part that precedes params, not including trailing ?/#
      // matches[2] = params, not including leading ?/#
      // matches[3] = if in 'querystring' mode, hash including leading #, otherwise ''
      matches = url.match(is_fragment ? re_fragment : /^([^#?]*)\??([^#]*)(#?.*)/); // Get the hash if in 'querystring' mode, and it exists.

      hash = matches[3] || '';

      if (merge_mode === 2 && is_string(params)) {
        // If merge_mode is 2 and params is a string, merge the fragment / query
        // string into the URL wholesale, without converting it into an object.
        qs = params.replace(is_fragment ? re_params_fragment : re_params_querystring, '');
      } else {
        // Convert relevant params in url to object.
        url_params = jq_deparam(matches[2]);
        params = is_string(params) // Convert passed params string into object.
        ? jq_deparam[is_fragment ? str_fragment : str_querystring](params) // Passed params object.
        : params;
        qs = merge_mode === 2 ? params // passed params replace url params
        : merge_mode === 1 ? $.extend({}, params, url_params) // url params override passed params
        : $.extend({}, url_params, params); // passed params override url params
        // Convert params object into a sorted params string.

        qs = jq_param_sorted(qs); // Unescape characters specified via $.param.noEscape. Since only hash-
        // history users have requested this feature, it's only enabled for
        // fragment-related params strings.

        if (is_fragment) {
          qs = qs.replace(re_no_escape, decode);
        }
      } // Build URL from the base url, querystring and hash. In 'querystring'
      // mode, ? is only added if a query string exists. In 'fragment' mode, #
      // is always added.


      result = matches[1] + (is_fragment ? fragment_prefix : qs || !matches[1] ? '?' : '') + qs + hash;
    } else {
      // If URL was passed in, parse params from URL string, otherwise parse
      // params from window.location.href.
      result = get_func(url !== undefined ? url : location.href);
    }

    return result;
  }

  ;
  jq_param[str_querystring] = curry(jq_param_sub, 0, get_querystring);
  jq_param[str_fragment] = jq_param_fragment = curry(jq_param_sub, 1, get_fragment); // Method: jQuery.param.sorted
  //
  // Returns a params string equivalent to that returned by the internal
  // jQuery.param method, but sorted, which makes it suitable for use as a
  // cache key.
  //
  // For example, in most browsers jQuery.param({z:1,a:2}) returns "z=1&a=2"
  // and jQuery.param({a:2,z:1}) returns "a=2&z=1". Even though both the
  // objects being serialized and the resulting params strings are equivalent,
  // if these params strings were set into the location.hash fragment
  // sequentially, the hashchange event would be triggered unnecessarily, since
  // the strings are different (even though the data described by them is the
  // same). By sorting the params string, unecessary hashchange event triggering
  // can be avoided.
  //
  // Usage:
  //
  // > jQuery.param.sorted( obj [, traditional ] );
  //
  // Arguments:
  //
  //  obj - (Object) An object to be serialized.
  //  traditional - (Boolean) Params deep/shallow serialization mode. See the
  //    documentation at http://api.jquery.com/jQuery.param/ for more detail.
  //
  // Returns:
  //
  //  (String) A sorted params string.

  jq_param.sorted = jq_param_sorted = function (a, traditional) {
    var arr = [],
        obj = {};
    $.each(jq_param(a, traditional).split('&'), function (i, v) {
      var key = v.replace(/(?:%5B|=).*$/, ''),
          key_obj = obj[key];

      if (!key_obj) {
        key_obj = obj[key] = [];
        arr.push(key);
      }

      key_obj.push(v);
    });
    return $.map(arr.sort(), function (v) {
      return obj[v];
    }).join('&');
  }; // Method: jQuery.param.fragment.noEscape
  //
  // Specify characters that will be left unescaped when fragments are created
  // or merged using <jQuery.param.fragment>, or when the fragment is modified
  // using <jQuery.bbq.pushState>. This option only applies to serialized data
  // object fragments, and not set-as-string fragments. Does not affect the
  // query string. Defaults to ",/" (comma, forward slash).
  //
  // Note that this is considered a purely aesthetic option, and will help to
  // create URLs that "look pretty" in the address bar or bookmarks, without
  // affecting functionality in any way. That being said, be careful to not
  // unescape characters that are used as delimiters or serve a special
  // purpose, such as the "#?&=+" (octothorpe, question mark, ampersand,
  // equals, plus) characters.
  //
  // Usage:
  //
  // > jQuery.param.fragment.noEscape( [ chars ] );
  //
  // Arguments:
  //
  //  chars - (String) The characters to not escape in the fragment. If
  //    unspecified, defaults to empty string (escape all characters).
  //
  // Returns:
  //
  //  Nothing.


  jq_param_fragment.noEscape = function (chars) {
    chars = chars || '';
    var arr = $.map(chars.split(''), encodeURIComponent);
    re_no_escape = new RegExp(arr.join('|'), 'g');
  }; // A sensible default. These are the characters people seem to complain about
  // "uglifying up the URL" the most.


  jq_param_fragment.noEscape(',/'); // Method: jQuery.param.fragment.ajaxCrawlable
  //
  // TODO: DESCRIBE
  //
  // Usage:
  //
  // > jQuery.param.fragment.ajaxCrawlable( [ state ] );
  //
  // Arguments:
  //
  //  state - (Boolean) TODO: DESCRIBE
  //
  // Returns:
  //
  //  (Boolean) The current ajaxCrawlable state.

  jq_param_fragment.ajaxCrawlable = function (state) {
    if (state !== undefined) {
      if (state) {
        re_params_fragment = /^.*(?:#!|#)/;
        re_fragment = /^([^#]*)(?:#!|#)?(.*)$/;
        fragment_prefix = '#!';
      } else {
        re_params_fragment = /^.*#/;
        re_fragment = /^([^#]*)#?(.*)$/;
        fragment_prefix = '#';
      }

      ajax_crawlable = !!state;
    }

    return ajax_crawlable;
  };

  jq_param_fragment.ajaxCrawlable(0); // Section: Deparam (from string)
  //
  // Method: jQuery.deparam
  //
  // Deserialize a params string into an object, optionally coercing numbers,
  // booleans, null and undefined values; this method is the counterpart to the
  // internal jQuery.param method.
  //
  // Usage:
  //
  // > jQuery.deparam( params [, coerce ] );
  //
  // Arguments:
  //
  //  params - (String) A params string to be parsed.
  //  coerce - (Boolean) If true, coerces any numbers or true, false, null, and
  //    undefined to their actual value. Defaults to false if omitted.
  //
  // Returns:
  //
  //  (Object) An object representing the deserialized params string.

  $.deparam = jq_deparam = function (params, coerce) {
    var obj = {},
        coerce_types = {
      'true': !0,
      'false': !1,
      'null': null
    }; // Iterate over all name=value pairs.

    $.each(params.replace(/\+/g, ' ').split('&'), function (j, v) {
      var param = v.split('='),
          key = decode(param[0]),
          val,
          cur = obj,
          i = 0,
          // If key is more complex than 'foo', like 'a[]' or 'a[b][c]', split it
      // into its component parts.
      keys = key.split(']['),
          keys_last = keys.length - 1; // If the first keys part contains [ and the last ends with ], then []
      // are correctly balanced.

      if (/\[/.test(keys[0]) && /\]$/.test(keys[keys_last])) {
        // Remove the trailing ] from the last keys part.
        keys[keys_last] = keys[keys_last].replace(/\]$/, ''); // Split first keys part into two parts on the [ and add them back onto
        // the beginning of the keys array.

        keys = keys.shift().split('[').concat(keys);
        keys_last = keys.length - 1;
      } else {
        // Basic 'foo' style key.
        keys_last = 0;
      } // Are we dealing with a name=value pair, or just a name?


      if (param.length === 2) {
        val = decode(param[1]); // Coerce values.

        if (coerce) {
          val = val && !isNaN(val) ? +val // number
          : val === 'undefined' ? undefined // undefined
          : coerce_types[val] !== undefined ? coerce_types[val] // true, false, null
          : val; // string
        }

        if (keys_last) {
          // Complex key, build deep object structure based on a few rules:
          // * The 'cur' pointer starts at the object top-level.
          // * [] = array push (n is set to array length), [n] = array if n is
          //   numeric, otherwise object.
          // * If at the last keys part, set the value.
          // * For each keys part, if the current level is undefined create an
          //   object or array based on the type of the next keys part.
          // * Move the 'cur' pointer to the next level.
          // * Rinse & repeat.
          for (; i <= keys_last; i++) {
            key = keys[i] === '' ? cur.length : keys[i];
            cur = cur[key] = i < keys_last ? cur[key] || (keys[i + 1] && isNaN(keys[i + 1]) ? {} : []) : val;
          }
        } else {
          // Simple key, even simpler rules, since only scalars and shallow
          // arrays are allowed.
          if ($.isArray(obj[key])) {
            // val is already an array, so push on the next value.
            obj[key].push(val);
          } else if (obj[key] !== undefined) {
            // val isn't an array, but since a second value has been specified,
            // convert val into an array.
            obj[key] = [obj[key], val];
          } else {
            // val is a scalar.
            obj[key] = val;
          }
        }
      } else if (key) {
        // No value was defined, so set something meaningful.
        obj[key] = coerce ? undefined : '';
      }
    });
    return obj;
  }; // Method: jQuery.deparam.querystring
  //
  // Parse the query string from a URL or the current window.location.href,
  // deserializing it into an object, optionally coercing numbers, booleans,
  // null and undefined values.
  //
  // Usage:
  //
  // > jQuery.deparam.querystring( [ url ] [, coerce ] );
  //
  // Arguments:
  //
  //  url - (String) An optional params string or URL containing query string
  //    params to be parsed. If url is omitted, the current
  //    window.location.href is used.
  //  coerce - (Boolean) If true, coerces any numbers or true, false, null, and
  //    undefined to their actual value. Defaults to false if omitted.
  //
  // Returns:
  //
  //  (Object) An object representing the deserialized params string.
  // Method: jQuery.deparam.fragment
  //
  // Parse the fragment (hash) from a URL or the current window.location.href,
  // deserializing it into an object, optionally coercing numbers, booleans,
  // null and undefined values.
  //
  // Usage:
  //
  // > jQuery.deparam.fragment( [ url ] [, coerce ] );
  //
  // Arguments:
  //
  //  url - (String) An optional params string or URL containing fragment (hash)
  //    params to be parsed. If url is omitted, the current window.location.href
  //    is used.
  //  coerce - (Boolean) If true, coerces any numbers or true, false, null, and
  //    undefined to their actual value. Defaults to false if omitted.
  //
  // Returns:
  //
  //  (Object) An object representing the deserialized params string.


  function jq_deparam_sub(is_fragment, url_or_params, coerce) {
    if (url_or_params === undefined || typeof url_or_params === 'boolean') {
      // url_or_params not specified.
      coerce = url_or_params;
      url_or_params = jq_param[is_fragment ? str_fragment : str_querystring]();
    } else {
      url_or_params = is_string(url_or_params) ? url_or_params.replace(is_fragment ? re_params_fragment : re_params_querystring, '') : url_or_params;
    }

    return jq_deparam(url_or_params, coerce);
  }

  ;
  jq_deparam[str_querystring] = curry(jq_deparam_sub, 0);
  jq_deparam[str_fragment] = jq_deparam_fragment = curry(jq_deparam_sub, 1); // Section: Element manipulation
  //
  // Method: jQuery.elemUrlAttr
  //
  // Get the internal "Default URL attribute per tag" list, or augment the list
  // with additional tag-attribute pairs, in case the defaults are insufficient.
  //
  // In the <jQuery.fn.querystring> and <jQuery.fn.fragment> methods, this list
  // is used to determine which attribute contains the URL to be modified, if
  // an "attr" param is not specified.
  //
  // Default Tag-Attribute List:
  //
  //  a      - href
  //  base   - href
  //  iframe - src
  //  img    - src
  //  input  - src
  //  form   - action
  //  link   - href
  //  script - src
  //
  // Usage:
  //
  // > jQuery.elemUrlAttr( [ tag_attr ] );
  //
  // Arguments:
  //
  //  tag_attr - (Object) An object containing a list of tag names and their
  //    associated default attribute names in the format { tag: 'attr', ... } to
  //    be merged into the internal tag-attribute list.
  //
  // Returns:
  //
  //  (Object) An object containing all stored tag-attribute values.
  // Only define function and set defaults if function doesn't already exist, as
  // the urlInternal plugin will provide this method as well.

  $[str_elemUrlAttr] || ($[str_elemUrlAttr] = function (obj) {
    return $.extend(elemUrlAttr_cache, obj);
  })({
    a: str_href,
    base: str_href,
    iframe: str_src,
    img: str_src,
    input: str_src,
    form: 'action',
    link: str_href,
    script: str_src
  });
  jq_elemUrlAttr = $[str_elemUrlAttr]; // Method: jQuery.fn.querystring
  //
  // Update URL attribute in one or more elements, merging the current URL (with
  // or without pre-existing query string params) plus any params object or
  // string into a new URL, which is then set into that attribute. Like
  // <jQuery.param.querystring (build url)>, but for all elements in a jQuery
  // collection.
  //
  // Usage:
  //
  // > jQuery('selector').querystring( [ attr, ] params [, merge_mode ] );
  //
  // Arguments:
  //
  //  attr - (String) Optional name of an attribute that will contain a URL to
  //    merge params or url into. See <jQuery.elemUrlAttr> for a list of default
  //    attributes.
  //  params - (Object) A params object to be merged into the URL attribute.
  //  params - (String) A URL containing query string params, or params string
  //    to be merged into the URL attribute.
  //  merge_mode - (Number) Merge behavior defaults to 0 if merge_mode is not
  //    specified, and is as-follows:
  //
  //    * 0: params in the params argument will override any params in attr URL.
  //    * 1: any params in attr URL will override params in the params argument.
  //    * 2: params argument will completely replace any query string in attr
  //         URL.
  //
  // Returns:
  //
  //  (jQuery) The initial jQuery collection of elements, but with modified URL
  //  attribute values.
  // Method: jQuery.fn.fragment
  //
  // Update URL attribute in one or more elements, merging the current URL (with
  // or without pre-existing fragment/hash params) plus any params object or
  // string into a new URL, which is then set into that attribute. Like
  // <jQuery.param.fragment (build url)>, but for all elements in a jQuery
  // collection.
  //
  // Usage:
  //
  // > jQuery('selector').fragment( [ attr, ] params [, merge_mode ] );
  //
  // Arguments:
  //
  //  attr - (String) Optional name of an attribute that will contain a URL to
  //    merge params into. See <jQuery.elemUrlAttr> for a list of default
  //    attributes.
  //  params - (Object) A params object to be merged into the URL attribute.
  //  params - (String) A URL containing fragment (hash) params, or params
  //    string to be merged into the URL attribute.
  //  merge_mode - (Number) Merge behavior defaults to 0 if merge_mode is not
  //    specified, and is as-follows:
  //
  //    * 0: params in the params argument will override any params in attr URL.
  //    * 1: any params in attr URL will override params in the params argument.
  //    * 2: params argument will completely replace any fragment (hash) in attr
  //         URL.
  //
  // Returns:
  //
  //  (jQuery) The initial jQuery collection of elements, but with modified URL
  //  attribute values.

  function jq_fn_sub(mode, force_attr, params, merge_mode) {
    if (!is_string(params) && typeof params !== 'object') {
      // force_attr not specified.
      merge_mode = params;
      params = force_attr;
      force_attr = undefined;
    }

    return this.each(function () {
      var that = $(this),
          // Get attribute specified, or default specified via $.elemUrlAttr.
      attr = force_attr || jq_elemUrlAttr()[(this.nodeName || '').toLowerCase()] || '',
          // Get URL value.
      url = attr && that.attr(attr) || ''; // Update attribute with new URL.

      that.attr(attr, jq_param[mode](url, params, merge_mode));
    });
  }

  ;
  $.fn[str_querystring] = curry(jq_fn_sub, str_querystring);
  $.fn[str_fragment] = curry(jq_fn_sub, str_fragment); // Section: History, hashchange event
  //
  // Method: jQuery.bbq.pushState
  //
  // Adds a 'state' into the browser history at the current position, setting
  // location.hash and triggering any bound <hashchange event> callbacks
  // (provided the new state is different than the previous state).
  //
  // If no arguments are passed, an empty state is created, which is just a
  // shortcut for jQuery.bbq.pushState( {}, 2 ).
  //
  // Usage:
  //
  // > jQuery.bbq.pushState( [ params [, merge_mode ] ] );
  //
  // Arguments:
  //
  //  params - (String) A serialized params string or a hash string beginning
  //    with # to merge into location.hash.
  //  params - (Object) A params object to merge into location.hash.
  //  merge_mode - (Number) Merge behavior defaults to 0 if merge_mode is not
  //    specified (unless a hash string beginning with # is specified, in which
  //    case merge behavior defaults to 2), and is as-follows:
  //
  //    * 0: params in the params argument will override any params in the
  //         current state.
  //    * 1: any params in the current state will override params in the params
  //         argument.
  //    * 2: params argument will completely replace current state.
  //
  // Returns:
  //
  //  Nothing.
  //
  // Additional Notes:
  //
  //  * Setting an empty state may cause the browser to scroll.
  //  * Unlike the fragment and querystring methods, if a hash string beginning
  //    with # is specified as the params agrument, merge_mode defaults to 2.

  jq_bbq.pushState = jq_bbq_pushState = function (params, merge_mode) {
    if (is_string(params) && /^#/.test(params) && merge_mode === undefined) {
      // Params string begins with # and merge_mode not specified, so completely
      // overwrite window.location.hash.
      merge_mode = 2;
    }

    var has_args = params !== undefined,
        // Merge params into window.location using $.param.fragment.
    url = jq_param_fragment(location.href, has_args ? params : {}, has_args ? merge_mode : 2); // Set new window.location.href. Note that Safari 3 & Chrome barf on
    // location.hash = '#' so the entire URL is set.

    location.href = url;
  }; // Method: jQuery.bbq.getState
  //
  // Retrieves the current 'state' from the browser history, parsing
  // location.hash for a specific key or returning an object containing the
  // entire state, optionally coercing numbers, booleans, null and undefined
  // values.
  //
  // Usage:
  //
  // > jQuery.bbq.getState( [ key ] [, coerce ] );
  //
  // Arguments:
  //
  //  key - (String) An optional state key for which to return a value.
  //  coerce - (Boolean) If true, coerces any numbers or true, false, null, and
  //    undefined to their actual value. Defaults to false.
  //
  // Returns:
  //
  //  (Anything) If key is passed, returns the value corresponding with that key
  //    in the location.hash 'state', or undefined. If not, an object
  //    representing the entire 'state' is returned.


  jq_bbq.getState = jq_bbq_getState = function (key, coerce) {
    return key === undefined || typeof key === 'boolean' ? jq_deparam_fragment(key) // 'key' really means 'coerce' here
    : jq_deparam_fragment(coerce)[key];
  }; // Method: jQuery.bbq.removeState
  //
  // Remove one or more keys from the current browser history 'state', creating
  // a new state, setting location.hash and triggering any bound
  // <hashchange event> callbacks (provided the new state is different than
  // the previous state).
  //
  // If no arguments are passed, an empty state is created, which is just a
  // shortcut for jQuery.bbq.pushState( {}, 2 ).
  //
  // Usage:
  //
  // > jQuery.bbq.removeState( [ key [, key ... ] ] );
  //
  // Arguments:
  //
  //  key - (String) One or more key values to remove from the current state,
  //    passed as individual arguments.
  //  key - (Array) A single array argument that contains a list of key values
  //    to remove from the current state.
  //
  // Returns:
  //
  //  Nothing.
  //
  // Additional Notes:
  //
  //  * Setting an empty state may cause the browser to scroll.


  jq_bbq.removeState = function (arr) {
    var state = {}; // If one or more arguments is passed..

    if (arr !== undefined) {
      // Get the current state.
      state = jq_bbq_getState(); // For each passed key, delete the corresponding property from the current
      // state.

      $.each($.isArray(arr) ? arr : arguments, function (i, v) {
        delete state[v];
      });
    } // Set the state, completely overriding any existing state.


    jq_bbq_pushState(state, 2);
  }; // Event: hashchange event (BBQ)
  //
  // Usage in jQuery 1.4 and newer:
  //
  // In jQuery 1.4 and newer, the event object passed into any hashchange event
  // callback is augmented with a copy of the location.hash fragment at the time
  // the event was triggered as its event.fragment property. In addition, the
  // event.getState method operates on this property (instead of location.hash)
  // which allows this fragment-as-a-state to be referenced later, even after
  // window.location may have changed.
  //
  // Note that event.fragment and event.getState are not defined according to
  // W3C (or any other) specification, but will still be available whether or
  // not the hashchange event exists natively in the browser, because of the
  // utility they provide.
  //
  // The event.fragment property contains the output of <jQuery.param.fragment>
  // and the event.getState method is equivalent to the <jQuery.bbq.getState>
  // method.
  //
  // > $(window).bind( 'hashchange', function( event ) {
  // >   var hash_str = event.fragment,
  // >     param_obj = event.getState(),
  // >     param_val = event.getState( 'param_name' ),
  // >     param_val_coerced = event.getState( 'param_name', true );
  // >   ...
  // > });
  //
  // Usage in jQuery 1.3.2:
  //
  // In jQuery 1.3.2, the event object cannot to be augmented as in jQuery 1.4+,
  // so the fragment state isn't bound to the event object and must instead be
  // parsed using the <jQuery.param.fragment> and <jQuery.bbq.getState> methods.
  //
  // > $(window).bind( 'hashchange', function( event ) {
  // >   var hash_str = $.param.fragment(),
  // >     param_obj = $.bbq.getState(),
  // >     param_val = $.bbq.getState( 'param_name' ),
  // >     param_val_coerced = $.bbq.getState( 'param_name', true );
  // >   ...
  // > });
  //
  // Additional Notes:
  //
  // * Due to changes in the special events API, jQuery BBQ v1.2 or newer is
  //   required to enable the augmented event object in jQuery 1.4.2 and newer.
  // * See <jQuery hashchange event> for more detailed information.


  special[str_hashchange] = $.extend(special[str_hashchange], {
    // Augmenting the event object with the .fragment property and .getState
    // method requires jQuery 1.4 or newer. Note: with 1.3.2, everything will
    // work, but the event won't be augmented)
    add: function (handleObj) {
      var old_handler;

      function new_handler(e) {
        // e.fragment is set to the value of location.hash (with any leading #
        // removed) at the time the event is triggered.
        var hash = e[str_fragment] = jq_param_fragment(); // e.getState() works just like $.bbq.getState(), but uses the
        // e.fragment property stored on the event object.

        e.getState = function (key, coerce) {
          return key === undefined || typeof key === 'boolean' ? jq_deparam(hash, key) // 'key' really means 'coerce' here
          : jq_deparam(hash, coerce)[key];
        };

        old_handler.apply(this, arguments);
      }

      ; // This may seem a little complicated, but it normalizes the special event
      // .add method between jQuery 1.4/1.4.1 and 1.4.2+

      if ($.isFunction(handleObj)) {
        // 1.4, 1.4.1
        old_handler = handleObj;
        return new_handler;
      } else {
        // 1.4.2+
        old_handler = handleObj.handler;
        handleObj.handler = new_handler;
      }
    }
  });
})(jQuery, this);
/*!
 * jQuery hashchange event - v1.3 - 7/21/2010
 * http://benalman.com/projects/jquery-hashchange-plugin/
 * 
 * Copyright (c) 2010 "Cowboy" Ben Alman
 * Dual licensed under the MIT and GPL licenses.
 * http://benalman.com/about/license/
 */
// Script: jQuery hashchange event
//
// *Version: 1.3, Last updated: 7/21/2010*
// 
// Project Home - http://benalman.com/projects/jquery-hashchange-plugin/
// GitHub       - http://github.com/cowboy/jquery-hashchange/
// Source       - http://github.com/cowboy/jquery-hashchange/raw/master/jquery.ba-hashchange.js
// (Minified)   - http://github.com/cowboy/jquery-hashchange/raw/master/jquery.ba-hashchange.min.js (0.8kb gzipped)
// 
// About: License
// 
// Copyright (c) 2010 "Cowboy" Ben Alman,
// Dual licensed under the MIT and GPL licenses.
// http://benalman.com/about/license/
// 
// About: Examples
// 
// These working examples, complete with fully commented code, illustrate a few
// ways in which this plugin can be used.
// 
// hashchange event - http://benalman.com/code/projects/jquery-hashchange/examples/hashchange/
// document.domain - http://benalman.com/code/projects/jquery-hashchange/examples/document_domain/
// 
// About: Support and Testing
// 
// Information about what version or versions of jQuery this plugin has been
// tested with, what browsers it has been tested in, and where the unit tests
// reside (so you can test it yourself).
// 
// jQuery Versions - 1.2.6, 1.3.2, 1.4.1, 1.4.2
// Browsers Tested - Internet Explorer 6-8, Firefox 2-4, Chrome 5-6, Safari 3.2-5,
//                   Opera 9.6-10.60, iPhone 3.1, Android 1.6-2.2, BlackBerry 4.6-5.
// Unit Tests      - http://benalman.com/code/projects/jquery-hashchange/unit/
// 
// About: Known issues
// 
// While this jQuery hashchange event implementation is quite stable and
// robust, there are a few unfortunate browser bugs surrounding expected
// hashchange event-based behaviors, independent of any JavaScript
// window.onhashchange abstraction. See the following examples for more
// information:
// 
// Chrome: Back Button - http://benalman.com/code/projects/jquery-hashchange/examples/bug-chrome-back-button/
// Firefox: Remote XMLHttpRequest - http://benalman.com/code/projects/jquery-hashchange/examples/bug-firefox-remote-xhr/
// WebKit: Back Button in an Iframe - http://benalman.com/code/projects/jquery-hashchange/examples/bug-webkit-hash-iframe/
// Safari: Back Button from a different domain - http://benalman.com/code/projects/jquery-hashchange/examples/bug-safari-back-from-diff-domain/
// 
// Also note that should a browser natively support the window.onhashchange 
// event, but not report that it does, the fallback polling loop will be used.
// 
// About: Release History
// 
// 1.3   - (7/21/2010) Reorganized IE6/7 Iframe code to make it more
//         "removable" for mobile-only development. Added IE6/7 document.title
//         support. Attempted to make Iframe as hidden as possible by using
//         techniques from http://www.paciellogroup.com/blog/?p=604. Added 
//         support for the "shortcut" format $(window).hashchange( fn ) and
//         $(window).hashchange() like jQuery provides for built-in events.
//         Renamed jQuery.hashchangeDelay to <jQuery.fn.hashchange.delay> and
//         lowered its default value to 50. Added <jQuery.fn.hashchange.domain>
//         and <jQuery.fn.hashchange.src> properties plus document-domain.html
//         file to address access denied issues when setting document.domain in
//         IE6/7.
// 1.2   - (2/11/2010) Fixed a bug where coming back to a page using this plugin
//         from a page on another domain would cause an error in Safari 4. Also,
//         IE6/7 Iframe is now inserted after the body (this actually works),
//         which prevents the page from scrolling when the event is first bound.
//         Event can also now be bound before DOM ready, but it won't be usable
//         before then in IE6/7.
// 1.1   - (1/21/2010) Incorporated document.documentMode test to fix IE8 bug
//         where browser version is incorrectly reported as 8.0, despite
//         inclusion of the X-UA-Compatible IE=EmulateIE7 meta tag.
// 1.0   - (1/9/2010) Initial Release. Broke out the jQuery BBQ event.special
//         window.onhashchange functionality into a separate plugin for users
//         who want just the basic event & back button support, without all the
//         extra awesomeness that BBQ provides. This plugin will be included as
//         part of jQuery BBQ, but also be available separately.


(function ($, window, undefined) {
  '$:nomunge'; // Used by YUI compressor.
  // Reused string.

  var str_hashchange = 'hashchange',
      // Method / object references.
  doc = document,
      fake_onhashchange,
      special = $.event.special,
      // Does the browser support window.onhashchange? Note that IE8 running in
  // IE7 compatibility mode reports true for 'onhashchange' in window, even
  // though the event isn't supported, so also test document.documentMode.
  doc_mode = doc.documentMode,
      supports_onhashchange = 'on' + str_hashchange in window && (doc_mode === undefined || doc_mode > 7); // Get location.hash (or what you'd expect location.hash to be) sans any
  // leading #. Thanks for making this necessary, Firefox!

  function get_fragment(url) {
    url = url || location.href;
    return '#' + url.replace(/^[^#]*#?(.*)$/, '$1');
  }

  ; // Method: jQuery.fn.hashchange
  //
  // Bind a handler to the window.onhashchange event or trigger all bound
  // window.onhashchange event handlers. This behavior is consistent with
  // jQuery's built-in event handlers.
  //
  // Usage:
  //
  // > jQuery(window).hashchange( [ handler ] );
  //
  // Arguments:
  //
  //  handler - (Function) Optional handler to be bound to the hashchange
  //    event. This is a "shortcut" for the more verbose form:
  //    jQuery(window).bind( 'hashchange', handler ). If handler is omitted,
  //    all bound window.onhashchange event handlers will be triggered. This
  //    is a shortcut for the more verbose
  //    jQuery(window).trigger( 'hashchange' ). These forms are described in
  //    the <hashchange event> section.
  //
  // Returns:
  //
  //  (jQuery) The initial jQuery collection of elements.
  // Allow the "shortcut" format $(elem).hashchange( fn ) for binding and
  // $(elem).hashchange() for triggering, like jQuery does for built-in events.

  $.fn[str_hashchange] = function (fn) {
    return fn ? this.bind(str_hashchange, fn) : this.trigger(str_hashchange);
  }; // Property: jQuery.fn.hashchange.delay
  //
  // The numeric interval (in milliseconds) at which the <hashchange event>
  // polling loop executes. Defaults to 50.
  // Property: jQuery.fn.hashchange.domain
  //
  // If you're setting document.domain in your JavaScript, and you want hash
  // history to work in IE6/7, not only must this property be set, but you must
  // also set document.domain BEFORE jQuery is loaded into the page. This
  // property is only applicable if you are supporting IE6/7 (or IE8 operating
  // in "IE7 compatibility" mode).
  //
  // In addition, the <jQuery.fn.hashchange.src> property must be set to the
  // path of the included "document-domain.html" file, which can be renamed or
  // modified if necessary (note that the document.domain specified must be the
  // same in both your main JavaScript as well as in this file).
  //
  // Usage:
  //
  // jQuery.fn.hashchange.domain = document.domain;
  // Property: jQuery.fn.hashchange.src
  //
  // If, for some reason, you need to specify an Iframe src file (for example,
  // when setting document.domain as in <jQuery.fn.hashchange.domain>), you can
  // do so using this property. Note that when using this property, history
  // won't be recorded in IE6/7 until the Iframe src file loads. This property
  // is only applicable if you are supporting IE6/7 (or IE8 operating in "IE7
  // compatibility" mode).
  //
  // Usage:
  //
  // jQuery.fn.hashchange.src = 'path/to/file.html';


  $.fn[str_hashchange].delay = 50;
  /*
   $.fn[ str_hashchange ].domain = null;
   $.fn[ str_hashchange ].src = null;
   */
  // Event: hashchange event
  //
  // Fired when location.hash changes. In browsers that support it, the native
  // HTML5 window.onhashchange event is used, otherwise a polling loop is
  // initialized, running every <jQuery.fn.hashchange.delay> milliseconds to
  // see if the hash has changed. In IE6/7 (and IE8 operating in "IE7
  // compatibility" mode), a hidden Iframe is created to allow the back button
  // and hash-based history to work.
  //
  // Usage as described in <jQuery.fn.hashchange>:
  //
  // > // Bind an event handler.
  // > jQuery(window).hashchange( function(e) {
  // >   var hash = location.hash;
  // >   ...
  // > });
  // >
  // > // Manually trigger the event handler.
  // > jQuery(window).hashchange();
  //
  // A more verbose usage that allows for event namespacing:
  //
  // > // Bind an event handler.
  // > jQuery(window).bind( 'hashchange', function(e) {
  // >   var hash = location.hash;
  // >   ...
  // > });
  // >
  // > // Manually trigger the event handler.
  // > jQuery(window).trigger( 'hashchange' );
  //
  // Additional Notes:
  //
  // * The polling loop and Iframe are not created until at least one handler
  //   is actually bound to the 'hashchange' event.
  // * If you need the bound handler(s) to execute immediately, in cases where
  //   a location.hash exists on page load, via bookmark or page refresh for
  //   example, use jQuery(window).hashchange() or the more verbose
  //   jQuery(window).trigger( 'hashchange' ).
  // * The event can be bound before DOM ready, but since it won't be usable
  //   before then in IE6/7 (due to the necessary Iframe), recommended usage is
  //   to bind it inside a DOM ready handler.
  // Override existing $.event.special.hashchange methods (allowing this plugin
  // to be defined after jQuery BBQ in BBQ's source code).

  special[str_hashchange] = $.extend(special[str_hashchange], {
    // Called only when the first 'hashchange' event is bound to window.
    setup: function () {
      // If window.onhashchange is supported natively, there's nothing to do..
      if (supports_onhashchange) {
        return false;
      } // Otherwise, we need to create our own. And we don't want to call this
      // until the user binds to the event, just in case they never do, since it
      // will create a polling loop and possibly even a hidden Iframe.


      $(fake_onhashchange.start);
    },
    // Called only when the last 'hashchange' event is unbound from window.
    teardown: function () {
      // If window.onhashchange is supported natively, there's nothing to do..
      if (supports_onhashchange) {
        return false;
      } // Otherwise, we need to stop ours (if possible).


      $(fake_onhashchange.stop);
    }
  }); // fake_onhashchange does all the work of triggering the window.onhashchange
  // event for browsers that don't natively support it, including creating a
  // polling loop to watch for hash changes and in IE 6/7 creating a hidden
  // Iframe to enable back and forward.

  fake_onhashchange = function () {
    var self = {},
        timeout_id,
        // Remember the initial hash so it doesn't get triggered immediately.
    last_hash = get_fragment(),
        fn_retval = function (val) {
      return val;
    },
        history_set = fn_retval,
        history_get = fn_retval; // Start the polling loop.


    self.start = function () {
      timeout_id || poll();
    }; // Stop the polling loop.


    self.stop = function () {
      timeout_id && clearTimeout(timeout_id);
      timeout_id = undefined;
    }; // This polling loop checks every $.fn.hashchange.delay milliseconds to see
    // if location.hash has changed, and triggers the 'hashchange' event on
    // window when necessary.


    function poll() {
      var hash = get_fragment(),
          history_hash = history_get(last_hash);

      if (hash !== last_hash) {
        history_set(last_hash = hash, history_hash);
        $(window).trigger(str_hashchange);
      } else if (history_hash !== last_hash) {
        location.href = location.href.replace(/#.*/, '') + history_hash;
      }

      timeout_id = setTimeout(poll, $.fn[str_hashchange].delay);
    }

    ; // vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
    // vvvvvvvvvvvvvvvvvvv REMOVE IF NOT SUPPORTING IE6/7/8 vvvvvvvvvvvvvvvvvvv
    // vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

    navigator.userAgent.match(/MSIE/i) !== null && !supports_onhashchange && function () {
      // Not only do IE6/7 need the "magical" Iframe treatment, but so does IE8
      // when running in "IE7 compatibility" mode.
      var iframe, iframe_src; // When the event is bound and polling starts in IE 6/7, create a hidden
      // Iframe for history handling.

      self.start = function () {
        if (!iframe) {
          iframe_src = $.fn[str_hashchange].src;
          iframe_src = iframe_src && iframe_src + get_fragment(); // Create hidden Iframe. Attempt to make Iframe as hidden as possible
          // by using techniques from http://www.paciellogroup.com/blog/?p=604.

          iframe = $('<iframe tabindex="-1" title="empty"/>').hide() // When Iframe has completely loaded, initialize the history and
          // start polling.
          .one('load', function () {
            iframe_src || history_set(get_fragment());
            poll();
          }) // Load Iframe src if specified, otherwise nothing.
          .attr('src', iframe_src || 'javascript:0') // Append Iframe after the end of the body to prevent unnecessary
          // initial page scrolling (yes, this works).
          .insertAfter('body')[0].contentWindow; // Whenever `document.title` changes, update the Iframe's title to
          // prettify the back/next history menu entries. Since IE sometimes
          // errors with "Unspecified error" the very first time this is set
          // (yes, very useful) wrap this with a try/catch block.

          doc.onpropertychange = function () {
            try {
              if (event.propertyName === 'title') {
                iframe.document.title = doc.title;
              }
            } catch (e) {}
          };
        }
      }; // Override the "stop" method since an IE6/7 Iframe was created. Even
      // if there are no longer any bound event handlers, the polling loop
      // is still necessary for back/next to work at all!


      self.stop = fn_retval; // Get history by looking at the hidden Iframe's location.hash.

      history_get = function () {
        return get_fragment(iframe.location.href);
      }; // Set a new history item by opening and then closing the Iframe
      // document, *then* setting its location.hash. If document.domain has
      // been set, update that as well.


      history_set = function (hash, history_hash) {
        var iframe_doc = iframe.document,
            domain = $.fn[str_hashchange].domain;

        if (hash !== history_hash) {
          // Update Iframe with any initial `document.title` that might be set.
          iframe_doc.title = doc.title; // Opening the Iframe's document after it has been closed is what
          // actually adds a history entry.

          iframe_doc.open(); // Set document.domain for the Iframe document as well, if necessary.

          domain && iframe_doc.write('<script>document.domain="' + domain + '"</script>');
          iframe_doc.close(); // Update the Iframe's hash, for great justice.

          iframe.location.hash = hash;
        }
      };
    }(); // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // ^^^^^^^^^^^^^^^^^^^ REMOVE IF NOT SUPPORTING IE6/7/8 ^^^^^^^^^^^^^^^^^^^
    // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    return self;
  }();
})(jQuery, this);
/* http://keith-wood.name/backgroundPos.html
 Background position animation for jQuery v1.1.1.
 Written by Keith Wood (kbwood{at}iinet.com.au) November 2010.
 Available under the MIT (https://github.com/jquery/jquery/blob/master/MIT-LICENSE.txt) license.
 Please attribute the author if you use it. */
(function ($) {
  var g = !!$.Tween;

  if (g) {
    $.Tween.propHooks['backgroundPosition'] = {
      get: function (a) {
        return parseBackgroundPosition($(a.elem).css(a.prop));
      },
      set: setBackgroundPosition
    };
  } else {
    $.fx.step['backgroundPosition'] = setBackgroundPosition;
  }

  ;

  function parseBackgroundPosition(c) {
    var d = (c || '').split(/ /);
    var e = {
      center: '50%',
      left: '0%',
      right: '100%',
      top: '0%',
      bottom: '100%'
    };

    var f = function (a) {
      var b = (e[d[a]] || d[a] || '50%').match(/^([+-]=)?([+-]?\d+(\.\d*)?)(.*)$/);
      d[a] = [b[1], parseFloat(b[2]), b[4] || 'px'];
    };

    if (d.length == 1 && $.inArray(d[0], ['top', 'bottom']) > -1) {
      d[1] = d[0];
      d[0] = '50%';
    }

    f(0);
    f(1);
    return d;
  }

  function setBackgroundPosition(a) {
    if (!a.set) {
      initBackgroundPosition(a);
    }

    $(a.elem).css('background-position', a.pos * (a.end[0][1] - a.start[0][1]) + a.start[0][1] + a.end[0][2] + ' ' + (a.pos * (a.end[1][1] - a.start[1][1]) + a.start[1][1] + a.end[1][2]));
  }

  function initBackgroundPosition(a) {
    a.start = parseBackgroundPosition($(a.elem).css('backgroundPosition'));
    a.end = parseBackgroundPosition(a.end);

    for (var i = 0; i < a.end.length; i++) {
      if (a.end[i][0]) {
        a.end[i][1] = a.start[i][1] + (a.end[i][0] == '-=' ? -1 : +1) * a.end[i][1];
      }
    }

    a.set = true;
  }
})(jQuery);
/*jslint devel: true, bitwise: true, regexp: true, browser: true, confusion: true, unparam: true, eqeq: true, white: true, nomen: true, plusplus: true, maxerr: 50, indent: 4 */

/*globals jQuery,Color */

/*
 * ColorPicker
 *
 * Copyright (c) 2011-2013 Martijn W. van der Lee
 * Licensed under the MIT.
 *
 * Full-featured colorpicker for jQueryUI with full theming support.
 * Most images from jPicker by Christopher T. Tillman.
 * Sourcecode created from scratch by Martijn W. van der Lee.
 *
 * https://raw.github.com/vanderlee/colorpicker
 */
(function ($) {
  "use strict";

  $.colorpicker = new function () {
    this.regional = [];
    this.regional[''] = {
      ok: 'OK',
      cancel: 'Cancel',
      none: 'None',
      button: 'Color',
      title: 'Pick a color',
      transparent: 'Transparent',
      hsvH: 'H',
      hsvS: 'S',
      hsvV: 'V',
      rgbR: 'R',
      rgbG: 'G',
      rgbB: 'B',
      labL: 'L',
      labA: 'a',
      labB: 'b',
      hslH: 'H',
      hslS: 'S',
      hslL: 'L',
      cmykC: 'C',
      cmykM: 'M',
      cmykY: 'Y',
      cmykK: 'K',
      alphaA: 'A'
    };
    this.swatches = [];
    this.swatches['html'] = {
      'black': {
        r: 0,
        g: 0,
        b: 0
      },
      'dimgray': {
        r: 0.4117647058823529,
        g: 0.4117647058823529,
        b: 0.4117647058823529
      },
      'gray': {
        r: 0.5019607843137255,
        g: 0.5019607843137255,
        b: 0.5019607843137255
      },
      'darkgray': {
        r: 0.6627450980392157,
        g: 0.6627450980392157,
        b: 0.6627450980392157
      },
      'silver': {
        r: 0.7529411764705882,
        g: 0.7529411764705882,
        b: 0.7529411764705882
      },
      'lightgrey': {
        r: 0.8274509803921568,
        g: 0.8274509803921568,
        b: 0.8274509803921568
      },
      'gainsboro': {
        r: 0.8627450980392157,
        g: 0.8627450980392157,
        b: 0.8627450980392157
      },
      'whitesmoke': {
        r: 0.9607843137254902,
        g: 0.9607843137254902,
        b: 0.9607843137254902
      },
      'white': {
        r: 1,
        g: 1,
        b: 1
      },
      'rosybrown': {
        r: 0.7372549019607844,
        g: 0.5607843137254902,
        b: 0.5607843137254902
      },
      'indianred': {
        r: 0.803921568627451,
        g: 0.3607843137254902,
        b: 0.3607843137254902
      },
      'brown': {
        r: 0.6470588235294118,
        g: 0.16470588235294117,
        b: 0.16470588235294117
      },
      'firebrick': {
        r: 0.6980392156862745,
        g: 0.13333333333333333,
        b: 0.13333333333333333
      },
      'lightcoral': {
        r: 0.9411764705882353,
        g: 0.5019607843137255,
        b: 0.5019607843137255
      },
      'maroon': {
        r: 0.5019607843137255,
        g: 0,
        b: 0
      },
      'darkred': {
        r: 0.5450980392156862,
        g: 0,
        b: 0
      },
      'red': {
        r: 1,
        g: 0,
        b: 0
      },
      'snow': {
        r: 1,
        g: 0.9803921568627451,
        b: 0.9803921568627451
      },
      'salmon': {
        r: 0.9803921568627451,
        g: 0.5019607843137255,
        b: 0.4470588235294118
      },
      'mistyrose': {
        r: 1,
        g: 0.8941176470588236,
        b: 0.8823529411764706
      },
      'tomato': {
        r: 1,
        g: 0.38823529411764707,
        b: 0.2784313725490196
      },
      'darksalmon': {
        r: 0.9137254901960784,
        g: 0.5882352941176471,
        b: 0.47843137254901963
      },
      'orangered': {
        r: 1,
        g: 0.27058823529411763,
        b: 0
      },
      'coral': {
        r: 1,
        g: 0.4980392156862745,
        b: 0.3137254901960784
      },
      'lightsalmon': {
        r: 1,
        g: 0.6274509803921569,
        b: 0.47843137254901963
      },
      'sienna': {
        r: 0.6274509803921569,
        g: 0.3215686274509804,
        b: 0.17647058823529413
      },
      'seashell': {
        r: 1,
        g: 0.9607843137254902,
        b: 0.9333333333333333
      },
      'chocolate': {
        r: 0.8235294117647058,
        g: 0.4117647058823529,
        b: 0.11764705882352941
      },
      'saddlebrown': {
        r: 0.5450980392156862,
        g: 0.27058823529411763,
        b: 0.07450980392156863
      },
      'sandybrown': {
        r: 0.9568627450980393,
        g: 0.6431372549019608,
        b: 0.3764705882352941
      },
      'peachpuff': {
        r: 1,
        g: 0.8549019607843137,
        b: 0.7254901960784313
      },
      'peru': {
        r: 0.803921568627451,
        g: 0.5215686274509804,
        b: 0.24705882352941178
      },
      'linen': {
        r: 0.9803921568627451,
        g: 0.9411764705882353,
        b: 0.9019607843137255
      },
      'darkorange': {
        r: 1,
        g: 0.5490196078431373,
        b: 0
      },
      'bisque': {
        r: 1,
        g: 0.8941176470588236,
        b: 0.7686274509803922
      },
      'burlywood': {
        r: 0.8705882352941177,
        g: 0.7215686274509804,
        b: 0.5294117647058824
      },
      'tan': {
        r: 0.8235294117647058,
        g: 0.7058823529411765,
        b: 0.5490196078431373
      },
      'antiquewhite': {
        r: 0.9803921568627451,
        g: 0.9215686274509803,
        b: 0.8431372549019608
      },
      'navajowhite': {
        r: 1,
        g: 0.8705882352941177,
        b: 0.6784313725490196
      },
      'blanchedalmond': {
        r: 1,
        g: 0.9215686274509803,
        b: 0.803921568627451
      },
      'papayawhip': {
        r: 1,
        g: 0.9372549019607843,
        b: 0.8352941176470589
      },
      'orange': {
        r: 1,
        g: 0.6470588235294118,
        b: 0
      },
      'moccasin': {
        r: 1,
        g: 0.8941176470588236,
        b: 0.7098039215686275
      },
      'wheat': {
        r: 0.9607843137254902,
        g: 0.8705882352941177,
        b: 0.7019607843137254
      },
      'oldlace': {
        r: 0.9921568627450981,
        g: 0.9607843137254902,
        b: 0.9019607843137255
      },
      'floralwhite': {
        r: 1,
        g: 0.9803921568627451,
        b: 0.9411764705882353
      },
      'goldenrod': {
        r: 0.8549019607843137,
        g: 0.6470588235294118,
        b: 0.12549019607843137
      },
      'darkgoldenrod': {
        r: 0.7215686274509804,
        g: 0.5254901960784314,
        b: 0.043137254901960784
      },
      'cornsilk': {
        r: 1,
        g: 0.9725490196078431,
        b: 0.8627450980392157
      },
      'gold': {
        r: 1,
        g: 0.8431372549019608,
        b: 0
      },
      'palegoldenrod': {
        r: 0.9333333333333333,
        g: 0.9098039215686274,
        b: 0.6666666666666666
      },
      'khaki': {
        r: 0.9411764705882353,
        g: 0.9019607843137255,
        b: 0.5490196078431373
      },
      'lemonchiffon': {
        r: 1,
        g: 0.9803921568627451,
        b: 0.803921568627451
      },
      'darkkhaki': {
        r: 0.7411764705882353,
        g: 0.7176470588235294,
        b: 0.4196078431372549
      },
      'beige': {
        r: 0.9607843137254902,
        g: 0.9607843137254902,
        b: 0.8627450980392157
      },
      'lightgoldenrodyellow': {
        r: 0.9803921568627451,
        g: 0.9803921568627451,
        b: 0.8235294117647058
      },
      'olive': {
        r: 0.5019607843137255,
        g: 0.5019607843137255,
        b: 0
      },
      'yellow': {
        r: 1,
        g: 1,
        b: 0
      },
      'lightyellow': {
        r: 1,
        g: 1,
        b: 0.8784313725490196
      },
      'ivory': {
        r: 1,
        g: 1,
        b: 0.9411764705882353
      },
      'olivedrab': {
        r: 0.4196078431372549,
        g: 0.5568627450980392,
        b: 0.13725490196078433
      },
      'yellowgreen': {
        r: 0.6039215686274509,
        g: 0.803921568627451,
        b: 0.19607843137254902
      },
      'darkolivegreen': {
        r: 0.3333333333333333,
        g: 0.4196078431372549,
        b: 0.1843137254901961
      },
      'greenyellow': {
        r: 0.6784313725490196,
        g: 1,
        b: 0.1843137254901961
      },
      'lawngreen': {
        r: 0.48627450980392156,
        g: 0.9882352941176471,
        b: 0
      },
      'chartreuse': {
        r: 0.4980392156862745,
        g: 1,
        b: 0
      },
      'darkseagreen': {
        r: 0.5607843137254902,
        g: 0.7372549019607844,
        b: 0.5607843137254902
      },
      'forestgreen': {
        r: 0.13333333333333333,
        g: 0.5450980392156862,
        b: 0.13333333333333333
      },
      'limegreen': {
        r: 0.19607843137254902,
        g: 0.803921568627451,
        b: 0.19607843137254902
      },
      'lightgreen': {
        r: 0.5647058823529412,
        g: 0.9333333333333333,
        b: 0.5647058823529412
      },
      'palegreen': {
        r: 0.596078431372549,
        g: 0.984313725490196,
        b: 0.596078431372549
      },
      'darkgreen': {
        r: 0,
        g: 0.39215686274509803,
        b: 0
      },
      'green': {
        r: 0,
        g: 0.5019607843137255,
        b: 0
      },
      'lime': {
        r: 0,
        g: 1,
        b: 0
      },
      'honeydew': {
        r: 0.9411764705882353,
        g: 1,
        b: 0.9411764705882353
      },
      'mediumseagreen': {
        r: 0.23529411764705882,
        g: 0.7019607843137254,
        b: 0.44313725490196076
      },
      'seagreen': {
        r: 0.1803921568627451,
        g: 0.5450980392156862,
        b: 0.3411764705882353
      },
      'springgreen': {
        r: 0,
        g: 1,
        b: 0.4980392156862745
      },
      'mintcream': {
        r: 0.9607843137254902,
        g: 1,
        b: 0.9803921568627451
      },
      'mediumspringgreen': {
        r: 0,
        g: 0.9803921568627451,
        b: 0.6039215686274509
      },
      'mediumaquamarine': {
        r: 0.4,
        g: 0.803921568627451,
        b: 0.6666666666666666
      },
      'aquamarine': {
        r: 0.4980392156862745,
        g: 1,
        b: 0.8313725490196079
      },
      'turquoise': {
        r: 0.25098039215686274,
        g: 0.8784313725490196,
        b: 0.8156862745098039
      },
      'lightseagreen': {
        r: 0.12549019607843137,
        g: 0.6980392156862745,
        b: 0.6666666666666666
      },
      'mediumturquoise': {
        r: 0.2823529411764706,
        g: 0.8196078431372549,
        b: 0.8
      },
      'darkslategray': {
        r: 0.1843137254901961,
        g: 0.30980392156862746,
        b: 0.30980392156862746
      },
      'paleturquoise': {
        r: 0.6862745098039216,
        g: 0.9333333333333333,
        b: 0.9333333333333333
      },
      'teal': {
        r: 0,
        g: 0.5019607843137255,
        b: 0.5019607843137255
      },
      'darkcyan': {
        r: 0,
        g: 0.5450980392156862,
        b: 0.5450980392156862
      },
      'darkturquoise': {
        r: 0,
        g: 0.807843137254902,
        b: 0.8196078431372549
      },
      'aqua': {
        r: 0,
        g: 1,
        b: 1
      },
      'cyan': {
        r: 0,
        g: 1,
        b: 1
      },
      'lightcyan': {
        r: 0.8784313725490196,
        g: 1,
        b: 1
      },
      'azure': {
        r: 0.9411764705882353,
        g: 1,
        b: 1
      },
      'cadetblue': {
        r: 0.37254901960784315,
        g: 0.6196078431372549,
        b: 0.6274509803921569
      },
      'powderblue': {
        r: 0.6901960784313725,
        g: 0.8784313725490196,
        b: 0.9019607843137255
      },
      'lightblue': {
        r: 0.6784313725490196,
        g: 0.8470588235294118,
        b: 0.9019607843137255
      },
      'deepskyblue': {
        r: 0,
        g: 0.7490196078431373,
        b: 1
      },
      'skyblue': {
        r: 0.5294117647058824,
        g: 0.807843137254902,
        b: 0.9215686274509803
      },
      'lightskyblue': {
        r: 0.5294117647058824,
        g: 0.807843137254902,
        b: 0.9803921568627451
      },
      'steelblue': {
        r: 0.27450980392156865,
        g: 0.5098039215686274,
        b: 0.7058823529411765
      },
      'aliceblue': {
        r: 0.9411764705882353,
        g: 0.9725490196078431,
        b: 1
      },
      'dodgerblue': {
        r: 0.11764705882352941,
        g: 0.5647058823529412,
        b: 1
      },
      'slategray': {
        r: 0.4392156862745098,
        g: 0.5019607843137255,
        b: 0.5647058823529412
      },
      'lightslategray': {
        r: 0.4666666666666667,
        g: 0.5333333333333333,
        b: 0.6
      },
      'lightsteelblue': {
        r: 0.6901960784313725,
        g: 0.7686274509803922,
        b: 0.8705882352941177
      },
      'cornflowerblue': {
        r: 0.39215686274509803,
        g: 0.5843137254901961,
        b: 0.9294117647058824
      },
      'royalblue': {
        r: 0.2549019607843137,
        g: 0.4117647058823529,
        b: 0.8823529411764706
      },
      'midnightblue': {
        r: 0.09803921568627451,
        g: 0.09803921568627451,
        b: 0.4392156862745098
      },
      'lavender': {
        r: 0.9019607843137255,
        g: 0.9019607843137255,
        b: 0.9803921568627451
      },
      'navy': {
        r: 0,
        g: 0,
        b: 0.5019607843137255
      },
      'darkblue': {
        r: 0,
        g: 0,
        b: 0.5450980392156862
      },
      'mediumblue': {
        r: 0,
        g: 0,
        b: 0.803921568627451
      },
      'blue': {
        r: 0,
        g: 0,
        b: 1
      },
      'ghostwhite': {
        r: 0.9725490196078431,
        g: 0.9725490196078431,
        b: 1
      },
      'darkslateblue': {
        r: 0.2823529411764706,
        g: 0.23921568627450981,
        b: 0.5450980392156862
      },
      'slateblue': {
        r: 0.41568627450980394,
        g: 0.35294117647058826,
        b: 0.803921568627451
      },
      'mediumslateblue': {
        r: 0.4823529411764706,
        g: 0.40784313725490196,
        b: 0.9333333333333333
      },
      'mediumpurple': {
        r: 0.5764705882352941,
        g: 0.4392156862745098,
        b: 0.8588235294117647
      },
      'blueviolet': {
        r: 0.5411764705882353,
        g: 0.16862745098039217,
        b: 0.8862745098039215
      },
      'indigo': {
        r: 0.29411764705882354,
        g: 0,
        b: 0.5098039215686274
      },
      'darkorchid': {
        r: 0.6,
        g: 0.19607843137254902,
        b: 0.8
      },
      'darkviolet': {
        r: 0.5803921568627451,
        g: 0,
        b: 0.8274509803921568
      },
      'mediumorchid': {
        r: 0.7294117647058823,
        g: 0.3333333333333333,
        b: 0.8274509803921568
      },
      'thistle': {
        r: 0.8470588235294118,
        g: 0.7490196078431373,
        b: 0.8470588235294118
      },
      'plum': {
        r: 0.8666666666666667,
        g: 0.6274509803921569,
        b: 0.8666666666666667
      },
      'violet': {
        r: 0.9333333333333333,
        g: 0.5098039215686274,
        b: 0.9333333333333333
      },
      'purple': {
        r: 0.5019607843137255,
        g: 0,
        b: 0.5019607843137255
      },
      'darkmagenta': {
        r: 0.5450980392156862,
        g: 0,
        b: 0.5450980392156862
      },
      'magenta': {
        r: 1,
        g: 0,
        b: 1
      },
      'fuchsia': {
        r: 1,
        g: 0,
        b: 1
      },
      'orchid': {
        r: 0.8549019607843137,
        g: 0.4392156862745098,
        b: 0.8392156862745098
      },
      'mediumvioletred': {
        r: 0.7803921568627451,
        g: 0.08235294117647059,
        b: 0.5215686274509804
      },
      'deeppink': {
        r: 1,
        g: 0.0784313725490196,
        b: 0.5764705882352941
      },
      'hotpink': {
        r: 1,
        g: 0.4117647058823529,
        b: 0.7058823529411765
      },
      'palevioletred': {
        r: 0.8588235294117647,
        g: 0.4392156862745098,
        b: 0.5764705882352941
      },
      'lavenderblush': {
        r: 1,
        g: 0.9411764705882353,
        b: 0.9607843137254902
      },
      'crimson': {
        r: 0.8627450980392157,
        g: 0.0784313725490196,
        b: 0.23529411764705882
      },
      'pink': {
        r: 1,
        g: 0.7529411764705882,
        b: 0.796078431372549
      },
      'lightpink': {
        r: 1,
        g: 0.7137254901960784,
        b: 0.7568627450980392
      }
    };
  }();

  var _colorpicker_index = 0,
      _container_popup = '<div class="ui-colorpicker ui-colorpicker-dialog ui-dialog ui-widget ui-widget-content ui-corner-all" style="display: none;"></div>',
      _container_inline = '<div class="ui-colorpicker ui-colorpicker-inline ui-dialog ui-widget ui-widget-content ui-corner-all"></div>',
      _parts_lists = {
    'full': ['header', 'map', 'bar', 'hex', 'hsv', 'rgb', 'alpha', 'lab', 'cmyk', 'preview', 'swatches', 'footer'],
    'popup': ['map', 'bar', 'hex', 'hsv', 'rgb', 'alpha', 'preview', 'footer'],
    'draggable': ['header', 'map', 'bar', 'hex', 'hsv', 'rgb', 'alpha', 'preview', 'footer'],
    'inline': ['map', 'bar', 'hex', 'hsv', 'rgb', 'alpha', 'preview']
  },
      _intToHex = function (dec) {
    var result = Math.round(dec).toString(16);

    if (result.length === 1) {
      result = '0' + result;
    }

    return result.toLowerCase();
  },
      _parseHex = function (color) {
    var c, m; // {#}rrggbb

    m = /^#?([a-fA-F0-9]{1,6})$/.exec(color);

    if (m) {
      c = parseInt(m[1], 16);
      return new Color((c >> 16 & 0xFF) / 255, (c >> 8 & 0xFF) / 255, (c & 0xFF) / 255);
    }

    return new Color();
  },
      _layoutTable = function (layout, callback) {
    var bitmap, x, y, width, height, columns, rows, index, cell, html, w, h, colspan, walked;
    layout.sort(function (a, b) {
      if (a.pos[1] == b.pos[1]) {
        return a.pos[0] - b.pos[0];
      }

      return a.pos[1] - b.pos[1];
    }); // Determine dimensions of the table

    width = 0;
    height = 0;
    $.each(layout, function (index, part) {
      width = Math.max(width, part.pos[0] + part.pos[2]);
      height = Math.max(height, part.pos[1] + part.pos[3]);
    }); // Initialize bitmap

    bitmap = [];

    for (x = 0; x < width; ++x) {
      bitmap.push([]);
    } // Mark rows and columns which have layout assigned


    rows = [];
    columns = [];
    $.each(layout, function (index, part) {
      // mark columns
      for (x = 0; x < part.pos[2]; x += 1) {
        columns[part.pos[0] + x] = true;
      }

      for (y = 0; y < part.pos[3]; y += 1) {
        rows[part.pos[1] + y] = true;
      }
    }); // Generate the table

    html = '';
    cell = layout[index = 0];

    for (y = 0; y < height; ++y) {
      html += '<tr>';

      for (x = 0; x < width; x) {
        if (typeof cell !== 'undefined' && x == cell.pos[0] && y == cell.pos[1]) {
          // Create a "real" cell
          html += callback(cell, x, y);

          for (h = 0; h < cell.pos[3]; h += 1) {
            for (w = 0; w < cell.pos[2]; w += 1) {
              bitmap[x + w][y + h] = true;
            }
          }

          x += cell.pos[2];
          cell = layout[++index];
        } else {
          // Fill in the gaps
          colspan = 0;
          walked = false;

          while (x < width && bitmap[x][y] === undefined && (cell === undefined || y < cell.pos[1] || y == cell.pos[1] && x < cell.pos[0])) {
            if (columns[x] === true) {
              colspan += 1;
            }

            walked = true;
            x += 1;
          }

          if (colspan > 0) {
            html += '<td colspan="' + colspan + '"></td>';
          } else if (!walked) {
            x += 1;
          }
        }
      }

      html += '</tr>';
    }

    return '<table cellspacing="0" cellpadding="0" border="0"><tbody>' + html + '</tbody></table>';
  },
      _parts = {
    header: function (inst) {
      var that = this,
          e = null,
          _html = function () {
        var title = inst.options.title || inst._getRegional('title'),
            html = '<span class="ui-dialog-title">' + title + '</span>';

        if (!inst.inline && inst.options.showCloseButton) {
          html += '<a href="#" class="ui-dialog-titlebar-close ui-corner-all" role="button">' + '<span class="ui-icon ui-icon-closethick">close</span></a>';
        }

        return '<div class="ui-dialog-titlebar ui-widget-header ui-corner-all ui-helper-clearfix">' + html + '</div>';
      };

      this.init = function () {
        e = $(_html()).prependTo(inst.dialog);
        var close = $('.ui-dialog-titlebar-close', e);

        inst._hoverable(close);

        inst._focusable(close);

        close.click(function (event) {
          event.preventDefault();
          inst.close();
        });

        if (!inst.inline && inst.options.draggable) {
          inst.dialog.draggable({
            handle: e
          });
        }
      };
    },
    map: function (inst) {
      var that = this,
          e = null,
          mousemove_timeout = null,
          _mousedown,
          _mouseup,
          _mousemove,
          _html;

      _mousedown = function (event) {
        if (!inst.opened) {
          return;
        }

        var div = $('.ui-colorpicker-map-layer-pointer', e),
            offset = div.offset(),
            width = div.width(),
            height = div.height(),
            x = event.pageX - offset.left,
            y = event.pageY - offset.top;

        if (x >= 0 && x < width && y >= 0 && y < height) {
          event.stopImmediatePropagation();
          event.preventDefault();
          e.unbind('mousedown', _mousedown);
          $(document).bind('mouseup', _mouseup);
          $(document).bind('mousemove', _mousemove);

          _mousemove(event);
        }
      };

      _mouseup = function (event) {
        event.stopImmediatePropagation();
        event.preventDefault();
        $(document).unbind('mouseup', _mouseup);
        $(document).unbind('mousemove', _mousemove);
        e.bind('mousedown', _mousedown);
      };

      _mousemove = function (event) {
        event.stopImmediatePropagation();
        event.preventDefault();

        if (event.pageX === that.x && event.pageY === that.y) {
          return;
        }

        that.x = event.pageX;
        that.y = event.pageY;
        var div = $('.ui-colorpicker-map-layer-pointer', e),
            offset = div.offset(),
            width = div.width(),
            height = div.height(),
            x = event.pageX - offset.left,
            y = event.pageY - offset.top;
        x = Math.max(0, Math.min(x / width, 1));
        y = Math.max(0, Math.min(y / height, 1)); // interpret values

        switch (inst.mode) {
          case 'h':
            inst.color.setHSV(null, x, 1 - y);
            break;

          case 's':
          case 'a':
            inst.color.setHSV(x, null, 1 - y);
            break;

          case 'v':
            inst.color.setHSV(x, 1 - y, null);
            break;

          case 'r':
            inst.color.setRGB(null, 1 - y, x);
            break;

          case 'g':
            inst.color.setRGB(1 - y, null, x);
            break;

          case 'b':
            inst.color.setRGB(x, 1 - y, null);
            break;
        }

        inst._change();
      };

      _html = function () {
        var html = '<div class="ui-colorpicker-map ui-colorpicker-border">' + '<span class="ui-colorpicker-map-layer-1">&nbsp;</span>' + '<span class="ui-colorpicker-map-layer-2">&nbsp;</span>' + (inst.options.alpha ? '<span class="ui-colorpicker-map-layer-alpha">&nbsp;</span>' : '') + '<span class="ui-colorpicker-map-layer-pointer"><span class="ui-colorpicker-map-pointer"></span></span></div>';
        return html;
      };

      this.update = function () {
        switch (inst.mode) {
          case 'h':
            $('.ui-colorpicker-map-layer-1', e).css({
              'background-position': '0 0',
              'opacity': ''
            }).show();
            $('.ui-colorpicker-map-layer-2', e).hide();
            break;

          case 's':
          case 'a':
            $('.ui-colorpicker-map-layer-1', e).css({
              'background-position': '0 -260px',
              'opacity': ''
            }).show();
            $('.ui-colorpicker-map-layer-2', e).css({
              'background-position': '0 -520px',
              'opacity': ''
            }).show();
            break;

          case 'v':
            $(e).css('background-color', 'black');
            $('.ui-colorpicker-map-layer-1', e).css({
              'background-position': '0 -780px',
              'opacity': ''
            }).show();
            $('.ui-colorpicker-map-layer-2', e).hide();
            break;

          case 'r':
            $('.ui-colorpicker-map-layer-1', e).css({
              'background-position': '0 -1040px',
              'opacity': ''
            }).show();
            $('.ui-colorpicker-map-layer-2', e).css({
              'background-position': '0 -1300px',
              'opacity': ''
            }).show();
            break;

          case 'g':
            $('.ui-colorpicker-map-layer-1', e).css({
              'background-position': '0 -1560px',
              'opacity': ''
            }).show();
            $('.ui-colorpicker-map-layer-2', e).css({
              'background-position': '0 -1820px',
              'opacity': ''
            }).show();
            break;

          case 'b':
            $('.ui-colorpicker-map-layer-1', e).css({
              'background-position': '0 -2080px',
              'opacity': ''
            }).show();
            $('.ui-colorpicker-map-layer-2', e).css({
              'background-position': '0 -2340px',
              'opacity': ''
            }).show();
            break;
        }

        that.repaint();
      };

      this.repaint = function () {
        var div = $('.ui-colorpicker-map-layer-pointer', e),
            x = 0,
            y = 0;

        switch (inst.mode) {
          case 'h':
            x = inst.color.getHSV().s * div.width();
            y = (1 - inst.color.getHSV().v) * div.width();
            $(e).css('background-color', inst.color.copy().normalize().toCSS());
            break;

          case 's':
          case 'a':
            x = inst.color.getHSV().h * div.width();
            y = (1 - inst.color.getHSV().v) * div.width();
            $('.ui-colorpicker-map-layer-2', e).css('opacity', 1 - inst.color.getHSV().s);
            break;

          case 'v':
            x = inst.color.getHSV().h * div.width();
            y = (1 - inst.color.getHSV().s) * div.width();
            $('.ui-colorpicker-map-layer-1', e).css('opacity', inst.color.getHSV().v);
            break;

          case 'r':
            x = inst.color.getRGB().b * div.width();
            y = (1 - inst.color.getRGB().g) * div.width();
            $('.ui-colorpicker-map-layer-2', e).css('opacity', inst.color.getRGB().r);
            break;

          case 'g':
            x = inst.color.getRGB().b * div.width();
            y = (1 - inst.color.getRGB().r) * div.width();
            $('.ui-colorpicker-map-layer-2', e).css('opacity', inst.color.getRGB().g);
            break;

          case 'b':
            x = inst.color.getRGB().r * div.width();
            y = (1 - inst.color.getRGB().g) * div.width();
            $('.ui-colorpicker-map-layer-2', e).css('opacity', inst.color.getRGB().b);
            break;
        }

        if (inst.options.alpha) {
          $('.ui-colorpicker-map-layer-alpha', e).css('opacity', 1 - inst.color.getAlpha());
        }

        $('.ui-colorpicker-map-pointer', e).css({
          'left': x - 7,
          'top': y - 7
        });
      };

      this.init = function () {
        e = $(_html()).appendTo($('.ui-colorpicker-map-container', inst.dialog));
        e.bind('mousedown', _mousedown);
      };
    },
    bar: function (inst) {
      var that = this,
          e = null,
          _mousedown,
          _mouseup,
          _mousemove,
          _html;

      _mousedown = function (event) {
        if (!inst.opened) {
          return;
        }

        var div = $('.ui-colorpicker-bar-layer-pointer', e),
            offset = div.offset(),
            width = div.width(),
            height = div.height(),
            x = event.pageX - offset.left,
            y = event.pageY - offset.top;

        if (x >= 0 && x < width && y >= 0 && y < height) {
          event.stopImmediatePropagation();
          event.preventDefault();
          e.unbind('mousedown', _mousedown);
          $(document).bind('mouseup', _mouseup);
          $(document).bind('mousemove', _mousemove);

          _mousemove(event);
        }
      };

      _mouseup = function (event) {
        event.stopImmediatePropagation();
        event.preventDefault();
        $(document).unbind('mouseup', _mouseup);
        $(document).unbind('mousemove', _mousemove);
        e.bind('mousedown', _mousedown);
      };

      _mousemove = function (event) {
        event.stopImmediatePropagation();
        event.preventDefault();

        if (event.pageY === that.y) {
          return;
        }

        that.y = event.pageY;
        var div = $('.ui-colorpicker-bar-layer-pointer', e),
            offset = div.offset(),
            height = div.height(),
            y = event.pageY - offset.top;
        y = Math.max(0, Math.min(y / height, 1)); // interpret values

        switch (inst.mode) {
          case 'h':
            inst.color.setHSV(1 - y, null, null);
            break;

          case 's':
            inst.color.setHSV(null, 1 - y, null);
            break;

          case 'v':
            inst.color.setHSV(null, null, 1 - y);
            break;

          case 'r':
            inst.color.setRGB(1 - y, null, null);
            break;

          case 'g':
            inst.color.setRGB(null, 1 - y, null);
            break;

          case 'b':
            inst.color.setRGB(null, null, 1 - y);
            break;

          case 'a':
            inst.color.setAlpha(1 - y);
            break;
        }

        inst._change();
      };

      _html = function () {
        var html = '<div class="ui-colorpicker-bar ui-colorpicker-border">' + '<span class="ui-colorpicker-bar-layer-1">&nbsp;</span>' + '<span class="ui-colorpicker-bar-layer-2">&nbsp;</span>' + '<span class="ui-colorpicker-bar-layer-3">&nbsp;</span>' + '<span class="ui-colorpicker-bar-layer-4">&nbsp;</span>';

        if (inst.options.alpha) {
          html += '<span class="ui-colorpicker-bar-layer-alpha">&nbsp;</span>' + '<span class="ui-colorpicker-bar-layer-alphabar">&nbsp;</span>';
        }

        html += '<span class="ui-colorpicker-bar-layer-pointer"><span class="ui-colorpicker-bar-pointer"></span></span></div>';
        return html;
      };

      this.update = function () {
        switch (inst.mode) {
          case 'h':
          case 's':
          case 'v':
          case 'r':
          case 'g':
          case 'b':
            $('.ui-colorpicker-bar-layer-alpha', e).show();
            $('.ui-colorpicker-bar-layer-alphabar', e).hide();
            break;

          case 'a':
            $('.ui-colorpicker-bar-layer-alpha', e).hide();
            $('.ui-colorpicker-bar-layer-alphabar', e).show();
            break;
        }

        switch (inst.mode) {
          case 'h':
            $('.ui-colorpicker-bar-layer-1', e).css({
              'background-position': '0 0',
              'opacity': ''
            }).show();
            $('.ui-colorpicker-bar-layer-2', e).hide();
            $('.ui-colorpicker-bar-layer-3', e).hide();
            $('.ui-colorpicker-bar-layer-4', e).hide();
            break;

          case 's':
            $('.ui-colorpicker-bar-layer-1', e).css({
              'background-position': '0 -260px',
              'opacity': ''
            }).show();
            $('.ui-colorpicker-bar-layer-2', e).css({
              'background-position': '0 -520px',
              'opacity': ''
            }).show();
            $('.ui-colorpicker-bar-layer-3', e).hide();
            $('.ui-colorpicker-bar-layer-4', e).hide();
            break;

          case 'v':
            $('.ui-colorpicker-bar-layer-1', e).css({
              'background-position': '0 -520px',
              'opacity': ''
            }).show();
            $('.ui-colorpicker-bar-layer-2', e).hide();
            $('.ui-colorpicker-bar-layer-3', e).hide();
            $('.ui-colorpicker-bar-layer-4', e).hide();
            break;

          case 'r':
            $('.ui-colorpicker-bar-layer-1', e).css({
              'background-position': '0 -1560px',
              'opacity': ''
            }).show();
            $('.ui-colorpicker-bar-layer-2', e).css({
              'background-position': '0 -1300px',
              'opacity': ''
            }).show();
            $('.ui-colorpicker-bar-layer-3', e).css({
              'background-position': '0 -780px',
              'opacity': ''
            }).show();
            $('.ui-colorpicker-bar-layer-4', e).css({
              'background-position': '0 -1040px',
              'opacity': ''
            }).show();
            break;

          case 'g':
            $('.ui-colorpicker-bar-layer-1', e).css({
              'background-position': '0 -2600px',
              'opacity': ''
            }).show();
            $('.ui-colorpicker-bar-layer-2', e).css({
              'background-position': '0 -2340px',
              'opacity': ''
            }).show();
            $('.ui-colorpicker-bar-layer-3', e).css({
              'background-position': '0 -1820px',
              'opacity': ''
            }).show();
            $('.ui-colorpicker-bar-layer-4', e).css({
              'background-position': '0 -2080px',
              'opacity': ''
            }).show();
            break;

          case 'b':
            $('.ui-colorpicker-bar-layer-1', e).css({
              'background-position': '0 -3640px',
              'opacity': ''
            }).show();
            $('.ui-colorpicker-bar-layer-2', e).css({
              'background-position': '0 -3380px',
              'opacity': ''
            }).show();
            $('.ui-colorpicker-bar-layer-3', e).css({
              'background-position': '0 -2860px',
              'opacity': ''
            }).show();
            $('.ui-colorpicker-bar-layer-4', e).css({
              'background-position': '0 -3120px',
              'opacity': ''
            }).show();
            break;

          case 'a':
            $('.ui-colorpicker-bar-layer-1', e).hide();
            $('.ui-colorpicker-bar-layer-2', e).hide();
            $('.ui-colorpicker-bar-layer-3', e).hide();
            $('.ui-colorpicker-bar-layer-4', e).hide();
            break;
        }

        that.repaint();
      };

      this.repaint = function () {
        var div = $('.ui-colorpicker-bar-layer-pointer', e),
            y = 0;

        switch (inst.mode) {
          case 'h':
            y = (1 - inst.color.getHSV().h) * div.height();
            break;

          case 's':
            y = (1 - inst.color.getHSV().s) * div.height();
            $('.ui-colorpicker-bar-layer-2', e).css('opacity', 1 - inst.color.getHSV().v);
            $(e).css('background-color', inst.color.copy().normalize().toCSS());
            break;

          case 'v':
            y = (1 - inst.color.getHSV().v) * div.height();
            $(e).css('background-color', inst.color.copy().normalize().toCSS());
            break;

          case 'r':
            y = (1 - inst.color.getRGB().r) * div.height();
            $('.ui-colorpicker-bar-layer-2', e).css('opacity', Math.max(0, inst.color.getRGB().b - inst.color.getRGB().g));
            $('.ui-colorpicker-bar-layer-3', e).css('opacity', Math.max(0, inst.color.getRGB().g - inst.color.getRGB().b));
            $('.ui-colorpicker-bar-layer-4', e).css('opacity', Math.min(inst.color.getRGB().b, inst.color.getRGB().g));
            break;

          case 'g':
            y = (1 - inst.color.getRGB().g) * div.height();
            $('.ui-colorpicker-bar-layer-2', e).css('opacity', Math.max(0, inst.color.getRGB().b - inst.color.getRGB().r));
            $('.ui-colorpicker-bar-layer-3', e).css('opacity', Math.max(0, inst.color.getRGB().r - inst.color.getRGB().b));
            $('.ui-colorpicker-bar-layer-4', e).css('opacity', Math.min(inst.color.getRGB().r, inst.color.getRGB().b));
            break;

          case 'b':
            y = (1 - inst.color.getRGB().b) * div.height();
            $('.ui-colorpicker-bar-layer-2', e).css('opacity', Math.max(0, inst.color.getRGB().r - inst.color.getRGB().g));
            $('.ui-colorpicker-bar-layer-3', e).css('opacity', Math.max(0, inst.color.getRGB().g - inst.color.getRGB().r));
            $('.ui-colorpicker-bar-layer-4', e).css('opacity', Math.min(inst.color.getRGB().r, inst.color.getRGB().g));
            break;

          case 'a':
            y = (1 - inst.color.getAlpha()) * div.height();
            $(e).css('background-color', inst.color.copy().normalize().toCSS());
            break;
        }

        if (inst.mode !== 'a') {
          $('.ui-colorpicker-bar-layer-alpha', e).css('opacity', 1 - inst.color.getAlpha());
        }

        $('.ui-colorpicker-bar-pointer', e).css('top', y - 3);
      };

      this.init = function () {
        e = $(_html()).appendTo($('.ui-colorpicker-bar-container', inst.dialog));
        e.bind('mousedown', _mousedown);
      };
    },
    preview: function (inst) {
      var that = this,
          e = null,
          _html;

      _html = function () {
        return '<div class="ui-colorpicker-preview ui-colorpicker-border">' + '<div class="ui-colorpicker-preview-initial"><div class="ui-colorpicker-preview-initial-alpha"></div></div>' + '<div class="ui-colorpicker-preview-current"><div class="ui-colorpicker-preview-current-alpha"></div></div>' + '</div>';
      };

      this.init = function () {
        e = $(_html()).appendTo($('.ui-colorpicker-preview-container', inst.dialog));
        $('.ui-colorpicker-preview-initial', e).click(function () {
          inst.color = inst.currentColor.copy();

          inst._change();
        });
      };

      this.update = function () {
        if (inst.options.alpha) {
          $('.ui-colorpicker-preview-initial-alpha, .ui-colorpicker-preview-current-alpha', e).show();
        } else {
          $('.ui-colorpicker-preview-initial-alpha, .ui-colorpicker-preview-current-alpha', e).hide();
        }

        this.repaint();
      };

      this.repaint = function () {
        $('.ui-colorpicker-preview-initial', e).css('background-color', inst.currentColor.toCSS()).attr('title', inst.currentColor.toHex());
        $('.ui-colorpicker-preview-initial-alpha', e).css('opacity', 1 - inst.currentColor.getAlpha());
        $('.ui-colorpicker-preview-current', e).css('background-color', inst.color.toCSS()).attr('title', inst.color.toHex());
        $('.ui-colorpicker-preview-current-alpha', e).css('opacity', 1 - inst.color.getAlpha());
      };
    },
    hsv: function (inst) {
      var that = this,
          e = null,
          _html;

      _html = function () {
        var html = '';

        if (inst.options.hsv) {
          html += '<div class="ui-colorpicker-hsv-h"><input class="ui-colorpicker-mode" type="radio" value="h"/><label>' + inst._getRegional('hsvH') + '</label><input class="ui-colorpicker-number" type="number" min="0" max="360" size="10"/><span class="ui-colorpicker-unit">&deg;</span></div>' + '<div class="ui-colorpicker-hsv-s"><input class="ui-colorpicker-mode" type="radio" value="s"/><label>' + inst._getRegional('hsvS') + '</label><input class="ui-colorpicker-number" type="number" min="0" max="100" size="10"/><span class="ui-colorpicker-unit">%</span></div>' + '<div class="ui-colorpicker-hsv-v"><input class="ui-colorpicker-mode" type="radio" value="v"/><label>' + inst._getRegional('hsvV') + '</label><input class="ui-colorpicker-number" type="number" min="0" max="100" size="10"/><span class="ui-colorpicker-unit">%</span></div>';
        }

        return '<div class="ui-colorpicker-hsv">' + html + '</div>';
      };

      this.init = function () {
        e = $(_html()).appendTo($('.ui-colorpicker-hsv-container', inst.dialog));
        $('.ui-colorpicker-mode', e).click(function () {
          inst.mode = $(this).val();

          inst._updateAllParts();
        });
        $('.ui-colorpicker-number', e).bind('change keyup', function () {
          inst.color.setHSV($('.ui-colorpicker-hsv-h .ui-colorpicker-number', e).val() / 360, $('.ui-colorpicker-hsv-s .ui-colorpicker-number', e).val() / 100, $('.ui-colorpicker-hsv-v .ui-colorpicker-number', e).val() / 100);

          inst._change();
        });
      };

      this.repaint = function () {
        var hsv = inst.color.getHSV();
        hsv.h *= 360;
        hsv.s *= 100;
        hsv.v *= 100;
        $.each(hsv, function (index, value) {
          var input = $('.ui-colorpicker-hsv-' + index + ' .ui-colorpicker-number', e);
          value = Math.round(value);

          if (input.val() !== value) {
            input.val(value);
          }
        });
      };

      this.update = function () {
        $('.ui-colorpicker-mode', e).each(function () {
          $(this).attr('checked', $(this).val() === inst.mode);
        });
        this.repaint();
      };
    },
    rgb: function (inst) {
      var that = this,
          e = null,
          _html;

      _html = function () {
        var html = '';

        if (inst.options.rgb) {
          html += '<div class="ui-colorpicker-rgb-r"><input class="ui-colorpicker-mode" type="radio" value="r"/><label>' + inst._getRegional('rgbR') + '</label><input class="ui-colorpicker-number" type="number" min="0" max="255"/></div>' + '<div class="ui-colorpicker-rgb-g"><input class="ui-colorpicker-mode" type="radio" value="g"/><label>' + inst._getRegional('rgbG') + '</label><input class="ui-colorpicker-number" type="number" min="0" max="255"/></div>' + '<div class="ui-colorpicker-rgb-b"><input class="ui-colorpicker-mode" type="radio" value="b"/><label>' + inst._getRegional('rgbB') + '</label><input class="ui-colorpicker-number" type="number" min="0" max="255"/></div>';
        }

        return '<div class="ui-colorpicker-rgb">' + html + '</div>';
      };

      this.init = function () {
        e = $(_html()).appendTo($('.ui-colorpicker-rgb-container', inst.dialog));
        $('.ui-colorpicker-mode', e).click(function () {
          inst.mode = $(this).val();

          inst._updateAllParts();
        });
        $('.ui-colorpicker-number', e).bind('change keyup', function () {
          inst.color.setRGB($('.ui-colorpicker-rgb-r .ui-colorpicker-number', e).val() / 255, $('.ui-colorpicker-rgb-g .ui-colorpicker-number', e).val() / 255, $('.ui-colorpicker-rgb-b .ui-colorpicker-number', e).val() / 255);

          inst._change();
        });
      };

      this.repaint = function () {
        $.each(inst.color.getRGB(), function (index, value) {
          var input = $('.ui-colorpicker-rgb-' + index + ' .ui-colorpicker-number', e);
          value = Math.round(value * 255);

          if (input.val() !== value) {
            input.val(value);
          }
        });
      };

      this.update = function () {
        $('.ui-colorpicker-mode', e).each(function () {
          $(this).attr('checked', $(this).val() === inst.mode);
        });
        this.repaint();
      };
    },
    lab: function (inst) {
      var that = this,
          part = null,
          html = function () {
        var html = '';

        if (inst.options.hsv) {
          html += '<div class="ui-colorpicker-lab-l"><label>' + inst._getRegional('labL') + '</label><input class="ui-colorpicker-number" type="number" min="0" max="100"/></div>' + '<div class="ui-colorpicker-lab-a"><label>' + inst._getRegional('labA') + '</label><input class="ui-colorpicker-number" type="number" min="-128" max="127"/></div>' + '<div class="ui-colorpicker-lab-b"><label>' + inst._getRegional('labB') + '</label><input class="ui-colorpicker-number" type="number" min="-128" max="127"/></div>';
        }

        return '<div class="ui-colorpicker-lab">' + html + '</div>';
      };

      this.init = function () {
        var data = 0;
        part = $(html()).appendTo($('.ui-colorpicker-lab-container', inst.dialog));
        $('.ui-colorpicker-number', part).on('change keyup', function (event) {
          inst.color.setLAB(parseInt($('.ui-colorpicker-lab-l .ui-colorpicker-number', part).val(), 10) / 100, (parseInt($('.ui-colorpicker-lab-a .ui-colorpicker-number', part).val(), 10) + 128) / 255, (parseInt($('.ui-colorpicker-lab-b .ui-colorpicker-number', part).val(), 10) + 128) / 255);

          inst._change();
        });
      };

      this.repaint = function () {
        var lab = inst.color.getLAB();
        lab.l *= 100;
        lab.a = lab.a * 255 - 128;
        lab.b = lab.b * 255 - 128;
        $.each(lab, function (index, value) {
          var input = $('.ui-colorpicker-lab-' + index + ' .ui-colorpicker-number', part);
          value = Math.round(value);

          if (input.val() !== value) {
            input.val(value);
          }
        });
      };

      this.update = function () {
        this.repaint();
      };
    },
    cmyk: function (inst) {
      var that = this,
          part = null,
          html = function () {
        var html = '';

        if (inst.options.hsv) {
          html += '<div class="ui-colorpicker-cmyk-c"><label>' + inst._getRegional('cmykC') + '</label><input class="ui-colorpicker-number" type="number" min="0" max="100"/><span class="ui-colorpicker-unit">%</span></div>' + '<div class="ui-colorpicker-cmyk-m"><label>' + inst._getRegional('cmykM') + '</label><input class="ui-colorpicker-number" type="number" min="0" max="100"/><span class="ui-colorpicker-unit">%</span></div>' + '<div class="ui-colorpicker-cmyk-y"><label>' + inst._getRegional('cmykY') + '</label><input class="ui-colorpicker-number" type="number" min="0" max="100"/><span class="ui-colorpicker-unit">%</span></div>' + '<div class="ui-colorpicker-cmyk-k"><label>' + inst._getRegional('cmykK') + '</label><input class="ui-colorpicker-number" type="number" min="0" max="100"/><span class="ui-colorpicker-unit">%</span></div>';
        }

        return '<div class="ui-colorpicker-cmyk">' + html + '</div>';
      };

      this.init = function () {
        part = $(html()).appendTo($('.ui-colorpicker-cmyk-container', inst.dialog));
        $('.ui-colorpicker-number', part).on('change keyup', function (event) {
          inst.color.setCMYK(parseInt($('.ui-colorpicker-cmyk-c .ui-colorpicker-number', part).val(), 10) / 100, parseInt($('.ui-colorpicker-cmyk-m .ui-colorpicker-number', part).val(), 10) / 100, parseInt($('.ui-colorpicker-cmyk-y .ui-colorpicker-number', part).val(), 10) / 100, parseInt($('.ui-colorpicker-cmyk-k .ui-colorpicker-number', part).val(), 10) / 100);

          inst._change();
        });
      };

      this.repaint = function () {
        $.each(inst.color.getCMYK(), function (index, value) {
          var input = $('.ui-colorpicker-cmyk-' + index + ' .ui-colorpicker-number', part);
          value = Math.round(value * 100);

          if (input.val() !== value) {
            input.val(value);
          }
        });
      };

      this.update = function () {
        this.repaint();
      };
    },
    alpha: function (inst) {
      var that = this,
          e = null,
          _html;

      _html = function () {
        var html = '';

        if (inst.options.alpha) {
          html += '<div class="ui-colorpicker-a"><input class="ui-colorpicker-mode" name="mode" type="radio" value="a"/><label>' + inst._getRegional('alphaA') + '</label><input class="ui-colorpicker-number" type="number" min="0" max="100"/><span class="ui-colorpicker-unit">%</span></div>';
        }

        return '<div class="ui-colorpicker-alpha">' + html + '</div>';
      };

      this.init = function () {
        e = $(_html()).appendTo($('.ui-colorpicker-alpha-container', inst.dialog));
        $('.ui-colorpicker-mode', e).click(function () {
          inst.mode = $(this).val();

          inst._updateAllParts();
        });
        $('.ui-colorpicker-number', e).bind('change keyup', function () {
          inst.color.setAlpha($('.ui-colorpicker-a .ui-colorpicker-number', e).val() / 100);

          inst._change();
        });
      };

      this.update = function () {
        $('.ui-colorpicker-mode', e).each(function () {
          $(this).attr('checked', $(this).val() === inst.mode);
        });
        this.repaint();
      };

      this.repaint = function () {
        var input = $('.ui-colorpicker-a .ui-colorpicker-number', e),
            value = Math.round(inst.color.getAlpha() * 100);

        if (!input.is(':focus') && input.val() !== value) {
          input.val(value);
        }
      };
    },
    hex: function (inst) {
      var that = this,
          e = null,
          _html;

      _html = function () {
        var html = '';

        if (inst.options.alpha) {
          html += '<input class="ui-colorpicker-hex-alpha" type="text" maxlength="2" size="2"/>';
        }

        html += '<input class="ui-colorpicker-hex-input" type="text" maxlength="6" size="6"/>';
        return '<div class="ui-colorpicker-hex"><label>#</label>' + html + '</div>';
      };

      this.init = function () {
        e = $(_html()).appendTo($('.ui-colorpicker-hex-container', inst.dialog)); // repeat here makes the invalid input disappear faster

        $('.ui-colorpicker-hex-input', e).bind('change keydown keyup', function (a, b, c) {
          if (/[^a-fA-F0-9]/.test($(this).val())) {
            $(this).val($(this).val().replace(/[^a-fA-F0-9]/, ''));
          }
        });
        $('.ui-colorpicker-hex-input', e).bind('change keyup', function () {
          // repeat here makes sure that the invalid input doesn't get parsed
          inst.color = _parseHex($(this).val()).setAlpha(inst.color.getAlpha());

          inst._change();
        });
        $('.ui-colorpicker-hex-alpha', e).bind('change keydown keyup', function () {
          if (/[^a-fA-F0-9]/.test($(this).val())) {
            $(this).val($(this).val().replace(/[^a-fA-F0-9]/, ''));
          }
        });
        $('.ui-colorpicker-hex-alpha', e).bind('change keyup', function () {
          inst.color.setAlpha(parseInt($('.ui-colorpicker-hex-alpha', e).val(), 16) / 255);

          inst._change();
        });
      };

      this.update = function () {
        this.repaint();
      };

      this.repaint = function () {
        if (!$('.ui-colorpicker-hex-input', e).is(':focus')) {
          $('.ui-colorpicker-hex-input', e).val(inst.color.toHex(true));
        }

        if (!$('.ui-colorpicker-hex-alpha', e).is(':focus')) {
          $('.ui-colorpicker-hex-alpha', e).val(_intToHex(inst.color.getAlpha() * 255));
        }
      };
    },
    swatches: function (inst) {
      var that = this,
          part = null,
          html = function () {
        var html = '';
        $.each(inst._getSwatches(), function (name, color) {
          var c = new Color(color.r, color.g, color.b),
              css = c.toCSS();
          html += '<div class="ui-colorpicker-swatch" style="background-color:' + css + '" title="' + name + '"></div>';
        });
        return '<div class="ui-colorpicker-swatches ui-colorpicker-border" style="width:' + inst.options.swatchesWidth + 'px">' + html + '</div>';
      };

      this.init = function () {
        part = $(html()).appendTo($('.ui-colorpicker-swatches-container', inst.dialog));
        $('.ui-colorpicker-swatch', part).click(function () {
          inst.color = inst._parseColor($(this).css('background-color'));

          inst._change();
        });
      };
    },
    footer: function (inst) {
      var that = this,
          part = null,
          id_transparent = 'ui-colorpicker-special-transparent-' + _colorpicker_index,
          id_none = 'ui-colorpicker-special-none-' + _colorpicker_index,
          html = function () {
        var html = '';

        if (inst.options.alpha || !inst.inline && inst.options.showNoneButton) {
          html += '<div class="ui-colorpicker-buttonset">';

          if (inst.options.alpha) {
            html += '<input type="radio" name="ui-colorpicker-special" id="' + id_transparent + '" class="ui-colorpicker-special-transparent"/><label for="' + id_transparent + '">' + inst._getRegional('transparent') + '</label>';
          }

          if (!inst.inline && inst.options.showNoneButton) {
            html += '<input type="radio" name="ui-colorpicker-special" id="' + id_none + '" class="ui-colorpicker-special-none"><label for="' + id_none + '">' + inst._getRegional('none') + '</label>';
          }

          html += '</div>';
        }

        if (!inst.inline) {
          html += '<div class="ui-dialog-buttonset">';

          if (inst.options.showCancelButton) {
            html += '<button class="ui-colorpicker-cancel">' + inst._getRegional('cancel') + '</button>';
          }

          html += '<button class="ui-colorpicker-ok">' + inst._getRegional('ok') + '</button>';
          html += '</div>';
        }

        return '<div class="ui-dialog-buttonpane ui-widget-content">' + html + '</div>';
      };

      this.init = function () {
        part = $(html()).appendTo(inst.dialog);
        $('.ui-colorpicker-ok', part).button().click(function () {
          inst.close();
        });
        $('.ui-colorpicker-cancel', part).button().click(function () {
          inst.color = inst.currentColor.copy();

          inst._change(inst.color.set);

          inst.close();
        }); //inst._getRegional('transparent')

        $('.ui-colorpicker-buttonset', part).buttonset();
        $('.ui-colorpicker-special-color', part).click(function () {
          inst._change();
        });
        $('#' + id_none, part).click(function () {
          inst._change(false);
        });
        $('#' + id_transparent, part).click(function () {
          inst.color.setAlpha(0);

          inst._change();
        });
      };

      this.repaint = function () {
        if (!inst.color.set) {
          $('.ui-colorpicker-special-none', part).attr('checked', true).button("refresh");
        } else if (inst.color.getAlpha() == 0) {
          $('.ui-colorpicker-special-transparent', part).attr('checked', true).button("refresh");
        } else {
          $('input', part).attr('checked', false).button("refresh");
        }

        $('.ui-colorpicker-cancel', part).button(inst.changed ? 'enable' : 'disable');
      };

      this.update = function () {};
    }
  },
      Color = function () {
    var spaces = {
      rgb: {
        r: 0,
        g: 0,
        b: 0
      },
      hsv: {
        h: 0,
        s: 0,
        v: 0
      },
      hsl: {
        h: 0,
        s: 0,
        l: 0
      },
      lab: {
        l: 0,
        a: 0,
        b: 0
      },
      cmyk: {
        c: 0,
        m: 0,
        y: 0,
        k: 1
      }
    },
        a = 1,
        args = arguments,
        _clip = function (v) {
      if (isNaN(v) || v === null) {
        return 0;
      }

      if (typeof v == 'string') {
        v = parseInt(v, 10);
      }

      return Math.max(0, Math.min(v, 1));
    },
        _hexify = function (number) {
      var digits = '0123456789abcdef',
          lsd = number % 16,
          msd = (number - lsd) / 16,
          hexified = digits.charAt(msd) + digits.charAt(lsd);
      return hexified;
    },
        _rgb_to_xyz = function (rgb) {
      var r = rgb.r > 0.04045 ? Math.pow((rgb.r + 0.055) / 1.055, 2.4) : rgb.r / 12.92,
          g = rgb.g > 0.04045 ? Math.pow((rgb.g + 0.055) / 1.055, 2.4) : rgb.g / 12.92,
          b = rgb.b > 0.04045 ? Math.pow((rgb.b + 0.055) / 1.055, 2.4) : rgb.b / 12.92;
      return {
        x: r * 0.4124 + g * 0.3576 + b * 0.1805,
        y: r * 0.2126 + g * 0.7152 + b * 0.0722,
        z: r * 0.0193 + g * 0.1192 + b * 0.9505
      };
    },
        _xyz_to_rgb = function (xyz) {
      var rgb = {
        r: xyz.x * 3.2406 + xyz.y * -1.5372 + xyz.z * -0.4986,
        g: xyz.x * -0.9689 + xyz.y * 1.8758 + xyz.z * 0.0415,
        b: xyz.x * 0.0557 + xyz.y * -0.2040 + xyz.z * 1.0570
      };
      rgb.r = rgb.r > 0.0031308 ? 1.055 * Math.pow(rgb.r, 1 / 2.4) - 0.055 : 12.92 * rgb.r;
      rgb.g = rgb.g > 0.0031308 ? 1.055 * Math.pow(rgb.g, 1 / 2.4) - 0.055 : 12.92 * rgb.g;
      rgb.b = rgb.b > 0.0031308 ? 1.055 * Math.pow(rgb.b, 1 / 2.4) - 0.055 : 12.92 * rgb.b;
      return rgb;
    },
        _rgb_to_hsv = function (rgb) {
      var minVal = Math.min(rgb.r, rgb.g, rgb.b),
          maxVal = Math.max(rgb.r, rgb.g, rgb.b),
          delta = maxVal - minVal,
          del_R,
          del_G,
          del_B,
          hsv = {
        h: 0,
        s: 0,
        v: maxVal
      };

      if (delta === 0) {
        hsv.h = 0;
        hsv.s = 0;
      } else {
        hsv.s = delta / maxVal;
        del_R = ((maxVal - rgb.r) / 6 + delta / 2) / delta;
        del_G = ((maxVal - rgb.g) / 6 + delta / 2) / delta;
        del_B = ((maxVal - rgb.b) / 6 + delta / 2) / delta;

        if (rgb.r === maxVal) {
          hsv.h = del_B - del_G;
        } else if (rgb.g === maxVal) {
          hsv.h = 1 / 3 + del_R - del_B;
        } else if (rgb.b === maxVal) {
          hsv.h = 2 / 3 + del_G - del_R;
        }

        if (hsv.h < 0) {
          hsv.h += 1;
        } else if (hsv.h > 1) {
          hsv.h -= 1;
        }
      }

      return hsv;
    },
        _hsv_to_rgb = function (hsv) {
      var rgb = {
        r: 0,
        g: 0,
        b: 0
      },
          var_h,
          var_i,
          var_1,
          var_2,
          var_3;

      if (hsv.s === 0) {
        rgb.r = rgb.g = rgb.b = hsv.v;
      } else {
        var_h = hsv.h === 1 ? 0 : hsv.h * 6;
        var_i = Math.floor(var_h);
        var_1 = hsv.v * (1 - hsv.s);
        var_2 = hsv.v * (1 - hsv.s * (var_h - var_i));
        var_3 = hsv.v * (1 - hsv.s * (1 - (var_h - var_i)));

        if (var_i === 0) {
          rgb.r = hsv.v;
          rgb.g = var_3;
          rgb.b = var_1;
        } else if (var_i === 1) {
          rgb.r = var_2;
          rgb.g = hsv.v;
          rgb.b = var_1;
        } else if (var_i === 2) {
          rgb.r = var_1;
          rgb.g = hsv.v;
          rgb.b = var_3;
        } else if (var_i === 3) {
          rgb.r = var_1;
          rgb.g = var_2;
          rgb.b = hsv.v;
        } else if (var_i === 4) {
          rgb.r = var_3;
          rgb.g = var_1;
          rgb.b = hsv.v;
        } else {
          rgb.r = hsv.v;
          rgb.g = var_1;
          rgb.b = var_2;
        }
      }

      return rgb;
    },
        _rgb_to_hsl = function (rgb) {
      var minVal = Math.min(rgb.r, rgb.g, rgb.b),
          maxVal = Math.max(rgb.r, rgb.g, rgb.b),
          delta = maxVal - minVal,
          del_R,
          del_G,
          del_B,
          hsl = {
        h: 0,
        s: 0,
        l: (maxVal + minVal) / 2
      };

      if (delta === 0) {
        hsl.h = 0;
        hsl.s = 0;
      } else {
        hsl.s = hsl.l < 0.5 ? delta / (maxVal + minVal) : delta / (2 - maxVal - minVal);
        del_R = ((maxVal - rgb.r) / 6 + delta / 2) / delta;
        del_G = ((maxVal - rgb.g) / 6 + delta / 2) / delta;
        del_B = ((maxVal - rgb.b) / 6 + delta / 2) / delta;

        if (rgb.r === maxVal) {
          hsl.h = del_B - del_G;
        } else if (rgb.g === maxVal) {
          hsl.h = 1 / 3 + del_R - del_B;
        } else if (rgb.b === maxVal) {
          hsl.h = 2 / 3 + del_G - del_R;
        }

        if (hsl.h < 0) {
          hsl.h += 1;
        } else if (hsl.h > 1) {
          hsl.h -= 1;
        }
      }

      return hsl;
    },
        _hsl_to_rgb = function (hsl) {
      var var_1,
          var_2,
          hue_to_rgb = function (v1, v2, vH) {
        if (vH < 0) {
          vH += 1;
        }

        if (vH > 1) {
          vH -= 1;
        }

        if (6 * vH < 1) {
          return v1 + (v2 - v1) * 6 * vH;
        }

        if (2 * vH < 1) {
          return v2;
        }

        if (3 * vH < 2) {
          return v1 + (v2 - v1) * (2 / 3 - vH) * 6;
        }

        return v1;
      };

      if (hsl.s === 0) {
        return {
          r: hsl.l,
          g: hsl.l,
          b: hsl.l
        };
      }

      var_2 = hsl.l < 0.5 ? hsl.l * (1 + hsl.s) : hsl.l + hsl.s - hsl.s * hsl.l;
      var_1 = 2 * hsl.l - var_2;
      return {
        r: hue_to_rgb(var_1, var_2, hsl.h + 1 / 3),
        g: hue_to_rgb(var_1, var_2, hsl.h),
        b: hue_to_rgb(var_1, var_2, hsl.h - 1 / 3)
      };
    },
        _xyz_to_lab = function (xyz) {
      // CIE-L*ab D65 1931
      var x = xyz.x / 0.95047,
          y = xyz.y,
          z = xyz.z / 1.08883;
      x = x > 0.008856 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;
      y = y > 0.008856 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;
      z = z > 0.008856 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;
      return {
        l: (116 * y - 16) / 100,
        // [0,100]
        a: (500 * (x - y) + 128) / 255,
        // [-128,127]
        b: (200 * (y - z) + 128) / 255 // [-128,127]

      };
    },
        _lab_to_xyz = function (lab) {
      var lab2 = {
        l: lab.l * 100,
        a: lab.a * 255 - 128,
        b: lab.b * 255 - 128
      },
          xyz = {
        x: 0,
        y: (lab2.l + 16) / 116,
        z: 0
      };
      xyz.x = lab2.a / 500 + xyz.y;
      xyz.z = xyz.y - lab2.b / 200;
      xyz.x = Math.pow(xyz.x, 3) > 0.008856 ? Math.pow(xyz.x, 3) : (xyz.x - 16 / 116) / 7.787;
      xyz.y = Math.pow(xyz.y, 3) > 0.008856 ? Math.pow(xyz.y, 3) : (xyz.y - 16 / 116) / 7.787;
      xyz.z = Math.pow(xyz.z, 3) > 0.008856 ? Math.pow(xyz.z, 3) : (xyz.z - 16 / 116) / 7.787;
      xyz.x *= 0.95047;
      xyz.y *= 1;
      xyz.z *= 1.08883;
      return xyz;
    },
        _rgb_to_cmy = function (rgb) {
      return {
        c: 1 - rgb.r,
        m: 1 - rgb.g,
        y: 1 - rgb.b
      };
    },
        _cmy_to_rgb = function (cmy) {
      return {
        r: 1 - cmy.c,
        g: 1 - cmy.m,
        b: 1 - cmy.y
      };
    },
        _cmy_to_cmyk = function (cmy) {
      var K = 1;

      if (cmy.c < K) {
        K = cmy.c;
      }

      if (cmy.m < K) {
        K = cmy.m;
      }

      if (cmy.y < K) {
        K = cmy.y;
      }

      if (K == 1) {
        return {
          c: 0,
          m: 0,
          y: 0,
          k: 1
        };
      }

      return {
        c: (cmy.c - K) / (1 - K),
        m: (cmy.m - K) / (1 - K),
        y: (cmy.y - K) / (1 - K),
        k: K
      };
    },
        _cmyk_to_cmy = function (cmyk) {
      return {
        c: cmyk.c * (1 - cmyk.k) + cmyk.k,
        m: cmyk.m * (1 - cmyk.k) + cmyk.k,
        y: cmyk.y * (1 - cmyk.k) + cmyk.k
      };
    };

    this.set = true;

    this.setAlpha = function (_a) {
      if (_a !== null) {
        a = _clip(_a);
      }

      return this;
    };

    this.getAlpha = function () {
      return a;
    };

    this.setRGB = function (r, g, b) {
      spaces = {
        rgb: this.getRGB()
      };

      if (r !== null) {
        spaces.rgb.r = _clip(r);
      }

      if (g !== null) {
        spaces.rgb.g = _clip(g);
      }

      if (b !== null) {
        spaces.rgb.b = _clip(b);
      }

      return this;
    };

    this.setHSV = function (h, s, v) {
      spaces = {
        hsv: this.getHSV()
      };

      if (h !== null) {
        spaces.hsv.h = _clip(h);
      }

      if (s !== null) {
        spaces.hsv.s = _clip(s);
      }

      if (v !== null) {
        spaces.hsv.v = _clip(v);
      }

      return this;
    };

    this.setHSL = function (h, s, l) {
      spaces = {
        hsl: this.getHSL()
      };

      if (h !== null) {
        spaces.hsl.h = _clip(h);
      }

      if (s !== null) {
        spaces.hsl.s = _clip(s);
      }

      if (l !== null) {
        spaces.hsl.l = _clip(l);
      }

      return this;
    };

    this.setLAB = function (l, a, b) {
      spaces = {
        lab: this.getLAB()
      };

      if (l !== null) {
        spaces.lab.l = _clip(l);
      }

      if (a !== null) {
        spaces.lab.a = _clip(a);
      }

      if (b !== null) {
        spaces.lab.b = _clip(b);
      }

      return this;
    };

    this.setCMYK = function (c, m, y, k) {
      spaces = {
        cmyk: this.getCMYK()
      };

      if (c !== null) {
        spaces.cmyk.c = _clip(c);
      }

      if (m !== null) {
        spaces.cmyk.m = _clip(m);
      }

      if (y !== null) {
        spaces.cmyk.y = _clip(y);
      }

      if (k !== null) {
        spaces.cmyk.k = _clip(k);
      }

      return this;
    };

    this.getRGB = function () {
      if (!spaces.rgb) {
        spaces.rgb = spaces.lab ? _xyz_to_rgb(_lab_to_xyz(spaces.lab)) : spaces.hsv ? _hsv_to_rgb(spaces.hsv) : spaces.hsl ? _hsl_to_rgb(spaces.hsl) : spaces.cmyk ? _cmy_to_rgb(_cmyk_to_cmy(spaces.cmyk)) : {
          r: 0,
          g: 0,
          b: 0
        };
        spaces.rgb.r = _clip(spaces.rgb.r);
        spaces.rgb.g = _clip(spaces.rgb.g);
        spaces.rgb.b = _clip(spaces.rgb.b);
      }

      return $.extend({}, spaces.rgb);
    };

    this.getHSV = function () {
      if (!spaces.hsv) {
        spaces.hsv = spaces.lab ? _rgb_to_hsv(this.getRGB()) : spaces.rgb ? _rgb_to_hsv(spaces.rgb) : spaces.hsl ? _rgb_to_hsv(this.getRGB()) : spaces.cmyk ? _rgb_to_hsv(this.getRGB()) : {
          h: 0,
          s: 0,
          v: 0
        };
        spaces.hsv.h = _clip(spaces.hsv.h);
        spaces.hsv.s = _clip(spaces.hsv.s);
        spaces.hsv.v = _clip(spaces.hsv.v);
      }

      return $.extend({}, spaces.hsv);
    };

    this.getHSL = function () {
      if (!spaces.hsl) {
        spaces.hsl = spaces.rgb ? _rgb_to_hsl(spaces.rgb) : spaces.hsv ? _rgb_to_hsl(this.getRGB()) : spaces.cmyk ? _rgb_to_hsl(this.getRGB()) : spaces.hsv ? _rgb_to_hsl(this.getRGB()) : {
          h: 0,
          s: 0,
          l: 0
        };
        spaces.hsl.h = _clip(spaces.hsl.h);
        spaces.hsl.s = _clip(spaces.hsl.s);
        spaces.hsl.l = _clip(spaces.hsl.l);
      }

      return $.extend({}, spaces.hsl);
    };

    this.getCMYK = function () {
      if (!spaces.cmyk) {
        spaces.cmyk = spaces.rgb ? _cmy_to_cmyk(_rgb_to_cmy(spaces.rgb)) : spaces.hsv ? _cmy_to_cmyk(_rgb_to_cmy(this.getRGB())) : spaces.hsl ? _cmy_to_cmyk(_rgb_to_cmy(this.getRGB())) : spaces.lab ? _cmy_to_cmyk(_rgb_to_cmy(this.getRGB())) : {
          c: 0,
          m: 0,
          y: 0,
          k: 1
        };
        spaces.cmyk.c = _clip(spaces.cmyk.c);
        spaces.cmyk.m = _clip(spaces.cmyk.m);
        spaces.cmyk.y = _clip(spaces.cmyk.y);
        spaces.cmyk.k = _clip(spaces.cmyk.k);
      }

      return $.extend({}, spaces.cmyk);
    };

    this.getLAB = function () {
      if (!spaces.lab) {
        spaces.lab = spaces.rgb ? _xyz_to_lab(_rgb_to_xyz(spaces.rgb)) : spaces.hsv ? _xyz_to_lab(_rgb_to_xyz(this.getRGB())) : spaces.hsl ? _xyz_to_lab(_rgb_to_xyz(this.getRGB())) : spaces.cmyk ? _xyz_to_lab(_rgb_to_xyz(this.getRGB())) : {
          l: 0,
          a: 0,
          b: 0
        };
        spaces.lab.l = _clip(spaces.lab.l);
        spaces.lab.a = _clip(spaces.lab.a);
        spaces.lab.b = _clip(spaces.lab.b);
      }

      return $.extend({}, spaces.lab);
    };

    this.getChannels = function () {
      return {
        r: this.getRGB().r,
        g: this.getRGB().g,
        b: this.getRGB().b,
        a: this.getAlpha(),
        h: this.getHSV().h,
        s: this.getHSV().s,
        v: this.getHSV().v,
        c: this.getCMYK().c,
        m: this.getCMYK().m,
        y: this.getCMYK().y,
        k: this.getCMYK().k,
        L: this.getLAB().l,
        A: this.getLAB().a,
        B: this.getLAB().b
      };
    };

    this.getSpaces = function () {
      return $.extend(true, {}, spaces);
    };

    this.setSpaces = function (new_spaces) {
      spaces = new_spaces;
      return this;
    };

    this.distance = function (color) {
      var space = 'lab',
          getter = 'get' + space.toUpperCase(),
          a = this[getter](),
          b = color[getter](),
          distance = 0,
          channel;

      for (channel in a) {
        distance += Math.pow(a[channel] - b[channel], 2);
      }

      return distance;
    };

    this.equals = function (color) {
      var a = this.getRGB(),
          b = color.getRGB();
      return this.getAlpha() == color.getAlpha() && a.r == b.r && a.g == b.g && a.b == b.b;
    };

    this.limit = function (steps) {
      steps -= 1;
      var rgb = this.getRGB();
      this.setRGB(Math.round(rgb.r * steps) / steps, Math.round(rgb.g * steps) / steps, Math.round(rgb.b * steps) / steps);
    };

    this.toHex = function () {
      var rgb = this.getRGB();
      return _hexify(rgb.r * 255) + _hexify(rgb.g * 255) + _hexify(rgb.b * 255);
    };

    this.toCSS = function () {
      return '#' + this.toHex();
    };

    this.normalize = function () {
      this.setHSV(null, 1, 1);
      return this;
    };

    this.copy = function () {
      var spaces = this.getSpaces(),
          a = this.getAlpha();
      return new Color(spaces, a);
    }; // Construct


    if (args.length == 2) {
      this.setSpaces(args[0]);
      this.setAlpha(args[1] === 0 ? 0 : args[1] || 1);
    }

    if (args.length > 2) {
      this.setRGB(args[0], args[1], args[2]);
      this.setAlpha(args[3] === 0 ? 0 : args[3] || 1);
    }
  };

  $.widget("vanderlee.colorpicker", {
    options: {
      alpha: false,
      // Show alpha controls and mode
      altAlpha: true,
      // change opacity of altField as well?
      altField: '',
      // selector for DOM elements which change background color on change.
      altOnChange: true,
      // true to update on each change, false to update only on close.
      altProperties: 'background-color',
      // comma separated list of any of 'background-color', 'color', 'border-color', 'outline-color'
      autoOpen: false,
      // Open dialog automatically upon creation
      buttonColorize: false,
      buttonImage: 'images/ui-colorpicker.png',
      buttonImageOnly: false,
      buttonText: null,
      // Text on the button and/or title of button image.
      closeOnEscape: true,
      // Close the dialog when the escape key is pressed.
      closeOnOutside: true,
      // Close the dialog when clicking outside the dialog (not for inline)
      color: '#00FF00',
      // Initial color (for inline only)
      colorFormat: 'HEX',
      // Format string for output color format
      draggable: true,
      // Make popup dialog draggable if header is visible.
      duration: 'fast',
      hsv: true,
      // Show HSV controls and modes
      inline: true,
      // Show any divs as inline by default
      layout: {
        map: [0, 0, 1, 5],
        // Left, Top, Width, Height (in table cells).
        bar: [1, 0, 1, 5],
        preview: [2, 0, 1, 1],
        hsv: [2, 1, 1, 1],
        rgb: [2, 2, 1, 1],
        alpha: [2, 3, 1, 1],
        hex: [2, 4, 1, 1],
        lab: [3, 1, 1, 1],
        cmyk: [3, 2, 1, 2],
        swatches: [4, 0, 1, 5]
      },
      limit: '',
      // Limit color "resolution": '', 'websafe', 'nibble', 'binary', 'name'
      modal: false,
      // Modal dialog?
      mode: 'h',
      // Initial editing mode, h, s, v, r, g, b or a
      parts: '',
      // leave empty for automatic selection
      regional: '',
      rgb: true,
      // Show RGB controls and modes
      showAnim: 'fadeIn',
      showCancelButton: true,
      showNoneButton: false,
      showCloseButton: true,
      showOn: 'focus',
      // 'focus', 'button', 'both'
      showOptions: {},
      swatches: null,
      // null for default or kv-object or names swatches set
      swatchesWidth: 84,
      // width (in number of pixels) of swatches box.
      title: null,
      close: null,
      init: null,
      select: null,
      open: null
    },
    _create: function () {
      var that = this,
          text;
      ++_colorpicker_index;
      that.widgetEventPrefix = 'color';
      that.opened = false;
      that.generated = false;
      that.inline = false;
      that.changed = false;
      that.dialog = null;
      that.button = null;
      that.image = null;
      that.overlay = null;
      that.mode = that.options.mode;

      if (this.element[0].nodeName.toLowerCase() === 'input' || !that.options.inline) {
        that._setColor(that.element.val());

        this._callback('init');

        $('body').append(_container_popup);
        that.dialog = $('.ui-colorpicker:last'); // Click outside/inside

        $(document).delegate('html', 'touchstart click', function (event) {
          if (!that.opened || event.target === that.element[0] || that.overlay) {
            return;
          } // Check if clicked on any part of dialog


          if (that.dialog.is(event.target) || that.dialog.has(event.target).length > 0) {
            that.element.blur(); // inside window!

            return;
          } // Check if clicked on button


          var p,
              parents = $(event.target).parents();

          for (p = 0; p <= parents.length; ++p) {
            if (that.button !== null && parents[p] === that.button[0]) {
              return;
            }
          } // no closeOnOutside


          if (!that.options.closeOnOutside) {
            return;
          }

          that.close();
        });
        $(document).keydown(function (event) {
          if (event.keyCode == 27 && that.opened && that.options.closeOnEscape) {
            that.close();
          }
        });

        if (that.options.showOn === 'focus' || that.options.showOn === 'both') {
          that.element.on('focus click', function () {
            that.open();
          });
        }

        if (that.options.showOn === 'button' || that.options.showOn === 'both') {
          if (that.options.buttonImage !== '') {
            text = that.options.buttonText || that._getRegional('button');
            that.image = $('<img/>').attr({
              'src': that.options.buttonImage,
              'alt': text,
              'title': text
            });

            that._setImageBackground();
          }

          if (that.options.buttonImageOnly && that.image) {
            that.button = that.image;
          } else {
            that.button = $('<button type="button"></button>').html(that.image || that.options.buttonText).button();
            that.image = that.image ? $('img', that.button).first() : null;
          }

          that.button.insertAfter(that.element).click(function () {
            that[that.opened ? 'close' : 'open']();
          });
        }

        if (that.options.autoOpen) {
          that.open();
        }

        that.element.keydown(function (event) {
          if (event.keyCode === 9) {
            that.close();
          }
        }).keyup(function (event) {
          var color = that._parseColor(that.element.val());

          if (!that.color.equals(color)) {
            that.color = color;

            that._change();
          }
        });
      } else {
        that.inline = true;
        $(this.element).html(_container_inline);
        that.dialog = $('.ui-colorpicker', this.element);

        that._generate();

        that.opened = true;
      }

      return this;
    },
    _setOption: function (key, value) {
      var that = this;

      switch (key) {
        case "disabled":
          if (value) {
            that.dialog.addClass('ui-colorpicker-disabled');
          } else {
            that.dialog.removeClass('ui-colorpicker-disabled');
          }

          break;
      }

      $.Widget.prototype._setOption.apply(that, arguments);
    },

    /* setBackground */
    _setImageBackground: function () {
      if (this.image && this.options.buttonColorize) {
        this.image.css('background-color', this.color.set ? this._formatColor('RGBA', this.color) : '');
      }
    },

    /**
     * If an alternate field is specified, set it according to the current color.
     */
    _setAltField: function () {
      if (this.options.altOnChange && this.options.altField && this.options.altProperties) {
        var index,
            property,
            properties = this.options.altProperties.split(',');

        for (index = 0; index <= properties.length; ++index) {
          property = $.trim(properties[index]);

          switch (property) {
            case 'color':
            case 'background-color':
            case 'outline-color':
            case 'border-color':
              $(this.options.altField).css(property, this.color.set ? this.color.toCSS() : '');
              break;
          }
        }

        if (this.options.altAlpha) {
          $(this.options.altField).css('opacity', this.color.set ? this.color.getAlpha() : '');
        }
      }
    },
    _setColor: function (text) {
      this.color = this._parseColor(text);
      this.currentColor = this.color.copy();

      this._setImageBackground();

      this._setAltField();
    },
    setColor: function (text) {
      this._setColor(text);

      this._change(this.color.set);
    },
    _generate: function () {
      var that = this,
          index,
          part,
          parts_list,
          layout_parts; // Set color based on element?

      that._setColor(that.inline ? that.options.color : that.element.val()); // Determine the parts to include in this colorpicker


      if (typeof that.options.parts === 'string') {
        if (_parts_lists[that.options.parts]) {
          parts_list = _parts_lists[that.options.parts];
        } else {
          // automatic
          parts_list = _parts_lists[that.inline ? 'inline' : 'popup'];
        }
      } else {
        parts_list = that.options.parts;
      } // Add any parts to the internal parts list


      that.parts = {};
      $.each(parts_list, function (index, part) {
        if (_parts[part]) {
          that.parts[part] = new _parts[part](that);
        }
      });

      if (!that.generated) {
        layout_parts = [];
        $.each(that.options.layout, function (part, pos) {
          if (that.parts[part]) {
            layout_parts.push({
              'part': part,
              'pos': pos
            });
          }
        });
        $(_layoutTable(layout_parts, function (cell, x, y) {
          var classes = ['ui-colorpicker-' + cell.part + '-container'];

          if (x > 0) {
            classes.push('ui-colorpicker-padding-left');
          }

          if (y > 0) {
            classes.push('ui-colorpicker-padding-top');
          }

          return '<td  class="' + classes.join(' ') + '"' + (cell.pos[2] > 1 ? ' colspan="' + cell.pos[2] + '"' : '') + (cell.pos[3] > 1 ? ' rowspan="' + cell.pos[3] + '"' : '') + ' valign="top"></td>';
        })).appendTo(that.dialog).addClass('ui-dialog-content ui-widget-content');

        that._initAllParts();

        that._updateAllParts();

        that.generated = true;
      }
    },
    _effectGeneric: function (element, show, slide, fade, callback) {
      var that = this;

      if ($.effects && $.effects[that.options.showAnim]) {
        element[show](that.options.showAnim, that.options.showOptions, that.options.duration, callback);
      } else {
        element[that.options.showAnim === 'slideDown' ? slide : that.options.showAnim === 'fadeIn' ? fade : show](that.options.showAnim ? that.options.duration : null, callback);

        if (!that.options.showAnim || !that.options.duration) {
          callback();
        }
      }
    },
    _effectShow: function (element, callback) {
      this._effectGeneric(element, 'show', 'slideDown', 'fadeIn', callback);
    },
    _effectHide: function (element, callback) {
      this._effectGeneric(element, 'hide', 'slideUp', 'fadeOut', callback);
    },
    open: function () {
      var that = this,
          offset,
          bottom,
          right,
          height,
          width,
          x,
          y,
          zIndex;

      if (!that.opened) {
        that._generate();

        offset = that.element.offset();
        bottom = $(window).height() + $(window).scrollTop();
        right = $(window).width() + $(window).scrollLeft();
        height = that.dialog.outerHeight();
        width = that.dialog.outerWidth();
        x = offset.left;
        y = offset.top + that.element.outerHeight();

        if (x + width > right) {
          x = Math.max(0, right - width);
        }

        if (y + height > bottom) {
          if (offset.top - height >= $(window).scrollTop()) {
            y = offset.top - height;
          } else {
            y = Math.max(0, bottom - height);
          }
        }

        that.dialog.css({
          'left': x,
          'top': y
        }); // Automatically find highest z-index.

        zIndex = 0;
        $(that.element[0]).parents().each(function () {
          var z = $(this).css('z-index');

          if ((typeof z === 'number' || typeof z === 'string') && z !== '' && !isNaN(z)) {
            zIndex = parseInt(z);
            return false;
          }
        }); //@todo zIndexOffset option, to raise above other elements?

        that.dialog.css('z-index', zIndex += 2);
        that.overlay = that.options.modal ? new $.ui.dialog.overlay(that) : null;

        that._effectShow(this.dialog);

        that.opened = true;

        that._callback('open', true); // Without waiting for domready the width of the map is 0 and we
        // wind up with the cursor stuck in the upper left corner


        $(function () {
          that._repaintAllParts();
        });
      }
    },
    close: function () {
      var that = this;
      that.currentColor = that.color.copy();
      that.changed = false; // tear down the interface

      that._effectHide(that.dialog, function () {
        that.dialog.empty();
        that.generated = false;
        that.opened = false;

        that._callback('close', true);
      });

      if (that.overlay) {
        that.overlay.destroy();
      }
    },
    destroy: function () {
      this.element.unbind();

      if (this.image !== null) {
        this.image.remove();
      }

      if (this.button !== null) {
        this.button.remove();
      }

      if (this.dialog !== null) {
        this.dialog.remove();
      }

      if (this.overlay) {
        this.overlay.destroy();
      }
    },
    _callback: function (callback, spaces) {
      var that = this,
          data,
          lab;

      if (that.color.set) {
        data = {
          formatted: that._formatColor(that.options.colorFormat, that.color)
        };
        lab = that.color.getLAB();
        lab.a = lab.a * 2 - 1;
        lab.b = lab.b * 2 - 1;

        if (spaces === true) {
          data.a = that.color.getAlpha();
          data.rgb = that.color.getRGB();
          data.hsv = that.color.getHSV();
          data.cmyk = that.color.getCMYK();
          data.hsl = that.color.getHSL();
          data.lab = lab;
        }

        return that._trigger(callback, null, data);
      } else {
        return that._trigger(callback, null, {
          formatted: ''
        });
      }
    },
    _initAllParts: function () {
      $.each(this.parts, function (index, part) {
        if (part.init) {
          part.init();
        }
      });
    },
    _updateAllParts: function () {
      $.each(this.parts, function (index, part) {
        if (part.update) {
          part.update();
        }
      });
    },
    _repaintAllParts: function () {
      $.each(this.parts, function (index, part) {
        if (part.repaint) {
          part.repaint();
        }
      });
    },
    _change: function (set
    /* = true */
    ) {
      this.color.set = set !== false;
      this.changed = true; // Limit color palette

      switch (this.options.limit) {
        case 'websafe':
          this.color.limit(6);
          break;

        case 'nibble':
          this.color.limit(16);
          break;

        case 'binary':
          this.color.limit(2);
          break;

        case 'name':
          var swatch = this._getSwatch(this._closestName(this.color));

          this.color.setRGB(swatch.r, swatch.g, swatch.b);
          break;
      } // update input element content


      if (!this.inline) {
        if (!this.color.set) {
          this.element.val('');
        } else if (!this.color.equals(this._parseColor(this.element.val()))) {
          this.element.val(this._formatColor(this.options.colorFormat, this.color));
        }

        this._setImageBackground();

        this._setAltField();
      }

      if (this.opened) {
        this._repaintAllParts();
      } // callback


      this._callback('select');
    },
    // This will be deprecated by jQueryUI 1.9 widget
    _hoverable: function (e) {
      e.hover(function () {
        e.addClass("ui-state-hover");
      }, function () {
        e.removeClass("ui-state-hover");
      });
    },
    // This will be deprecated by jQueryUI 1.9 widget
    _focusable: function (e) {
      e.focus(function () {
        e.addClass("ui-state-focus");
      }).blur(function () {
        e.removeClass("ui-state-focus");
      });
    },
    _getRegional: function (name) {
      return $.colorpicker.regional[this.options.regional][name] !== undefined ? $.colorpicker.regional[this.options.regional][name] : $.colorpicker.regional[''][name];
    },
    _getSwatches: function () {
      if (typeof this.options.swatches === 'string') {
        return $.colorpicker.swatches[this.options.swatches];
      }

      if ($.isPlainObject(this.options.swatches)) {
        return $.colorpicker.swatches;
      }

      return $.colorpicker.swatches.html;
    },
    _getSwatch: function (name) {
      var swatches = this._getSwatches(),
          swatch = false;

      if (swatches[name] !== undefined) {
        return swatches[name];
      }

      $.each(swatches, function (swatchName, current) {
        if (swatchName.toLowerCase() == name.toLowerCase()) {
          swatch = current;
          return false;
        }

        return true;
      });
      return swatch;
    },
    _parseColor: function (color) {
      var c, m; // no color

      if (color == '') {
        return new Color();
      } // named swatch


      c = this._getSwatch($.trim(color));

      if (c) {
        return new Color(c.r, c.g, c.b);
      } // rgba(r,g,b,a)


      m = /^rgba?\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*(?:,\s*(\d+(?:\.\d+)?)\s*)?\)$/.exec(color);

      if (m) {
        return new Color(m[1] / 255, m[2] / 255, m[3] / 255, parseFloat(m[4]));
      } // hsla(r,g,b,a)


      m = /^hsla?\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*(?:,\s*(\d+(?:\.\d+)?)\s*)?\)$/.exec(color);

      if (m) {
        return new Color().setHSL(m[1] / 255, m[2] / 255, m[3] / 255).setAlpha(parseFloat(m[4]));
      } // rgba(r%,g%,b%,a%)


      m = /^rgba?\(\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d+(?:\.\d+)?)\s*)?\)$/.exec(color);

      if (m) {
        return new Color(m[1] / 100, m[2] / 100, m[3] / 100, m[4] / 100);
      } // hsla(r%,g%,b%,a%)


      m = /^hsla?\(\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d+(?:\.\d+)?)\s*)?\)$/.exec(color);

      if (m) {
        return new Color().setHSL(m[1] / 100, m[2] / 100, m[3] / 100).setAlpha(m[4] / 100);
      } // #rrggbb


      m = /^#([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})$/.exec(color);

      if (m) {
        return new Color(parseInt(m[1], 16) / 255, parseInt(m[2], 16) / 255, parseInt(m[3], 16) / 255);
      } // #rgb


      m = /^#([a-fA-F0-9])([a-fA-F0-9])([a-fA-F0-9])$/.exec(color);

      if (m) {
        return new Color(parseInt(m[1] + m[1], 16) / 255, parseInt(m[2] + m[2], 16) / 255, parseInt(m[3] + m[3], 16) / 255);
      }

      return _parseHex(color);
    },
    _exactName: function (color) {
      var name = false;
      $.each(this._getSwatches(), function (n, swatch) {
        if (color.equals(new Color(swatch.r, swatch.g, swatch.b))) {
          name = n;
          return false;
        }

        return true;
      });
      return name;
    },
    _closestName: function (color) {
      var rgb = color.getRGB(),
          distance = null,
          name = false,
          d;
      $.each(this._getSwatches(), function (n, swatch) {
        d = color.distance(new Color(swatch.r, swatch.g, swatch.b));

        if (d < distance || distance === null) {
          name = n;

          if (d == 0) {
            return false; // can't get much closer than 0
          }

          distance = d;
        }

        return true;
      });
      return name;
    },
    _formatColor: function (formats, color) {
      var that = this,
          text = null,
          types = {
        'x': function (v) {
          return _intToHex(v * 255);
        },
        'd': function (v) {
          return Math.round(v * 255);
        },
        'f': function (v) {
          return v;
        },
        'p': function (v) {
          return v * 100;
        }
      },
          channels = color.getChannels();

      if (!$.isArray(formats)) {
        formats = [formats];
      }

      $.each(formats, function (index, format) {
        if (that._formats[format]) {
          text = that._formats[format](color, that);
          return text === false;
        } else {
          text = format.replace(/\\?[argbhsvcmykLAB][xdfp]/g, function (m) {
            if (m.match(/^\\/)) {
              return m.slice(1);
            }

            return types[m.charAt(1)](channels[m.charAt(0)]);
          });
          return false;
        }
      });
      return text;
    },
    _formats: {
      '#HEX': function (color, that) {
        return that._formatColor('#rxgxbx', color);
      },
      '#HEX3': function (color, that) {
        var hex3 = that._formats.HEX3(color);

        return hex3 === false ? false : '#' + hex3;
      },
      'HEX': function (color, that) {
        return that._formatColor('rxgxbx', color);
      },
      'HEX3': function (color, that) {
        var rgb = color.getRGB(),
            r = Math.round(rgb.r * 255),
            g = Math.round(rgb.g * 255),
            b = Math.round(rgb.b * 255);

        if (r >>> 4 == (r &= 0xf) && g >>> 4 == (g &= 0xf) && b >>> 4 == (b &= 0xf)) {
          return r.toString(16) + g.toString(16) + b.toString(16);
        }

        return false;
      },
      'RGB': function (color, that) {
        return color.getAlpha() >= 1 ? that._formatColor('rgb(rd,gd,bd)', color) : false;
      },
      'RGBA': function (color, that) {
        return that._formatColor('rgba(rd,gd,bd,af)', color);
      },
      'RGB%': function (color, that) {
        return color.getAlpha() >= 1 ? that._formatColor('rgb(rp%,gp%,bp%)', color) : false;
      },
      'RGBA%': function (color, that) {
        return that._formatColor('rgba(rp%,gp%,bp%,af)', color);
      },
      'HSL': function (color, that) {
        return color.getAlpha() >= 1 ? that._formatColor('hsl(hd,sd,vd)', color) : false;
      },
      'HSLA': function (color, that) {
        return that._formatColor('hsla(hd,sd,vd,af)', color);
      },
      'HSL%': function (color, that) {
        return color.getAlpha() >= 1 ? that._formatColor('hsl(hp%,sp%,vp%)', color) : false;
      },
      'HSLA%': function (color, that) {
        return that._formatColor('hsla(hp%,sp%,vp%,af)', color);
      },
      'NAME': function (color, that) {
        return that._closestName(color);
      },
      'EXACT': function (color, that) {
        //@todo experimental. Implement a good fallback list
        return that._exactName(color);
      }
    }
  });
})(jQuery);
/*!
 * jQuery Cookie Plugin v1.3.1
 * https://github.com/carhartl/jquery-cookie
 *
 * Copyright 2013 Klaus Hartl
 * Released under the MIT license
 */
(function (factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as anonymous module.
    define(['jquery'], factory);
  } else {
    // Browser globals.
    factory(jQuery);
  }
})(function ($) {
  var pluses = /\+/g;

  function raw(s) {
    return s;
  }

  function decoded(s) {
    return decodeURIComponent(s.replace(pluses, ' '));
  }

  function converted(s) {
    if (s.indexOf('"') === 0) {
      // This is a quoted cookie as according to RFC2068, unescape
      s = s.slice(1, -1).replace(/\\"/g, '"').replace(/\\\\/g, '\\');
    }

    try {
      return config.json ? JSON.parse(s) : s;
    } catch (er) {}
  }

  var config = $.cookie = function (key, value, options) {
    // write
    if (value !== undefined) {
      options = $.extend({}, config.defaults, options);

      if (typeof options.expires === 'number') {
        var days = options.expires,
            t = options.expires = new Date();
        t.setDate(t.getDate() + days);
      }

      value = config.json ? JSON.stringify(value) : String(value);
      return document.cookie = [config.raw ? key : encodeURIComponent(key), '=', config.raw ? value : encodeURIComponent(value), options.expires ? '; expires=' + options.expires.toUTCString() : '', // use expires attribute, max-age is not supported by IE
      options.path ? '; path=' + options.path : '', options.domain ? '; domain=' + options.domain : '', options.secure ? '; secure' : ''].join('');
    } // read


    var decode = config.raw ? raw : decoded;
    var cookies = document.cookie.split('; ');
    var result = key ? undefined : {};

    for (var i = 0, l = cookies.length; i < l; i++) {
      var parts = cookies[i].split('=');
      var name = decode(parts.shift());
      var cookie = decode(parts.join('='));

      if (key && key === name) {
        result = converted(cookie);
        break;
      }

      if (!key) {
        result[name] = converted(cookie);
      }
    }

    return result;
  };

  config.defaults = {};

  $.removeCookie = function (key, options) {
    if ($.cookie(key) !== undefined) {
      // Must not alter options, thus extending a fresh object...
      $.cookie(key, '', $.extend({}, options, {
        expires: -1
      }));
      return true;
    }

    return false;
  };
});
/**
 * jquery.dump.js
 * @author Torkild Dyvik Olsen
 * @version 1.0
 * 
 * A simple debug function to gather information about an object.
 * Returns a nested tree with information.
 * 
 */
(function ($) {
  $.fn.dump = function () {
    return $.dump(this);
  };

  $.dump = function (object) {
    var recursion = function (obj, level) {
      if (!level) level = 0;
      var dump = '',
          p = '';

      for (i = 0; i < level; i++) p += "\t";

      t = type(obj);

      switch (t) {
        case "string":
          return '"' + obj + '"';
          break;

        case "number":
          return obj.toString();
          break;

        case "boolean":
          return obj ? 'true' : 'false';

        case "date":
          return "Date: " + obj.toLocaleString();

        case "array":
          dump += 'Array ( \n';
          $.each(obj, function (k, v) {
            dump += p + '\t' + k + ' => ' + recursion(v, level + 1) + '\n';
          });
          dump += p + ')';
          break;

        case "object":
          dump += 'Object { \n';
          $.each(obj, function (k, v) {
            dump += p + '\t' + k + ': ' + recursion(v, level + 1) + '\n';
          });
          dump += p + '}';
          break;

        case "jquery":
          dump += 'jQuery Object { \n';
          $.each(obj, function (k, v) {
            dump += p + '\t' + k + ' = ' + recursion(v, level + 1) + '\n';
          });
          dump += p + '}';
          break;

        case "regexp":
          return "RegExp: " + obj.toString();

        case "error":
          return obj.toString();

        case "document":
        case "domelement":
          dump += 'DOMElement [ \n' + p + '\tnodeName: ' + obj.nodeName + '\n' + p + '\tnodeValue: ' + obj.nodeValue + '\n' + p + '\tinnerHTML: [ \n';
          $.each(obj.childNodes, function (k, v) {
            if (k < 1) var r = 0;

            if (type(v) == "string") {
              if (v.textContent.match(/[^\s]/)) {
                dump += p + '\t\t' + (k - (r || 0)) + ' = String: ' + trim(v.textContent) + '\n';
              } else {
                r--;
              }
            } else {
              dump += p + '\t\t' + (k - (r || 0)) + ' = ' + recursion(v, level + 2) + '\n';
            }
          });
          dump += p + '\t]\n' + p + ']';
          break;

        case "function":
          var match = obj.toString().match(/^(.*)\(([^\)]*)\)/im);
          match[1] = trim(match[1].replace(new RegExp("[\\s]+", "g"), " "));
          match[2] = trim(match[2].replace(new RegExp("[\\s]+", "g"), " "));
          return match[1] + "(" + match[2] + ")";

        case "window":
        default:
          dump += 'N/A: ' + t;
          break;
      }

      return dump;
    };

    var type = function (obj) {
      var type = typeof obj;

      if (type != "object") {
        return type;
      }

      switch (obj) {
        case null:
          return 'null';

        case window:
          return 'window';

        case document:
          return 'document';

        case window.event:
          return 'event';

        default:
          break;
      }

      if (obj.jquery) {
        return 'jquery';
      }

      switch (obj.constructor) {
        case Array:
          return 'array';

        case Boolean:
          return 'boolean';

        case Date:
          return 'date';

        case Object:
          return 'object';

        case RegExp:
          return 'regexp';

        case ReferenceError:
        case Error:
          return 'error';

        case null:
        default:
          break;
      }

      switch (obj.nodeType) {
        case 1:
          return 'domelement';

        case 3:
          return 'string';

        case null:
        default:
          break;
      }

      return 'Unknown';
    };

    return recursion(object);
  };

  function trim(str) {
    return ltrim(rtrim(str));
  }

  function ltrim(str) {
    return str.replace(new RegExp("^[\\s]+", "g"), "");
  }

  function rtrim(str) {
    return str.replace(new RegExp("[\\s]+$", "g"), "");
  }
})(jQuery);
/*
 * jQuery plugin: fieldSelection - v0.1.1 - last change: 2006-12-16
 * (c) 2006 Alex Brem <alex@0xab.cd> - http://blog.0xab.cd
 */
(function () {
  var fieldSelection = {
    getSelection: function () {
      var e = this.jquery ? this[0] : this;
      return (
      /* mozilla / dom 3.0 */
      'selectionStart' in e && function () {
        var l = e.selectionEnd - e.selectionStart;
        return {
          start: e.selectionStart,
          end: e.selectionEnd,
          length: l,
          text: e.value.substr(e.selectionStart, l)
        };
      } || document.selection && function () {
        e.focus();
        var r = document.selection.createRange();

        if (r === null) {
          return {
            start: 0,
            end: e.value.length,
            length: 0
          };
        }

        var re = e.createTextRange();
        var rc = re.duplicate();
        re.moveToBookmark(r.getBookmark());
        rc.setEndPoint('EndToStart', re);
        return {
          start: rc.text.length,
          end: rc.text.length + r.text.length,
          length: r.text.length,
          text: r.text
        };
      } ||
      /* browser not supported */
      function () {
        return null;
      })();
    },
    setSelection: function () {
      var e = this.jquery ? this[0] : this;
      var args = arguments[0] || {};
      return (
      /* mozilla / dom 3.0 */
      'selectionStart' in e && function () {
        var start = typeof args == 'object' ? args.start : args;

        if (start != undefined) {
          e.selectionStart = start;
        }

        if (args.end != undefined) {
          e.selectionEnd = args.end;
        }

        e.focus();
        return this;
      } || document.selection && function () {
        e.focus();
        var r = document.selection.createRange();

        if (r === null) {
          return this;
        }

        var start = typeof args == 'object' ? args.start : args;

        if (start != undefined) {
          r.moveStart('character', -e.value.length);
          r.moveStart('character', start);
          r.collapse();
        }

        if (args.end != undefined) {
          r.moveEnd('character', args.end - start);
        }

        r.select();
        return this;
      } ||
      /* browser not supported */
      function () {
        e.focus();
        return jQuery(e);
      })();
    },
    replaceSelection: function () {
      var e = this.jquery ? this[0] : this;
      var text = arguments[0] || '';
      return (
      /* mozilla / dom 3.0 */
      'selectionStart' in e && function () {
        e.value = e.value.substr(0, e.selectionStart) + text + e.value.substr(e.selectionEnd, e.value.length);
        return this;
      } || document.selection && function () {
        e.focus();
        document.selection.createRange().text = text;
        return this;
      } ||
      /* browser not supported */
      function () {
        e.value += text;
        return jQuery(e);
      })();
    }
  };
  jQuery.each(fieldSelection, function (i) {
    jQuery.fn[i] = this;
  });
})();
/**
* hoverIntent is similar to jQuery's built-in "hover" function except that
* instead of firing the onMouseOver event immediately, hoverIntent checks
* to see if the user's mouse has slowed down (beneath the sensitivity
* threshold) before firing the onMouseOver event.
* 
* hoverIntent r6 // 2011.02.26 // jQuery 1.5.1+
* <http://cherne.net/brian/resources/jquery.hoverIntent.html>
* 
* hoverIntent is currently available for use in all personal or commercial 
* projects under both MIT and GPL licenses. This means that you can choose 
* the license that best suits your project, and use it accordingly.
* 
* // basic usage (just like .hover) receives onMouseOver and onMouseOut functions
* $("ul li").hoverIntent( showNav , hideNav );
* 
* // advanced usage receives configuration object only
* $("ul li").hoverIntent({
*	sensitivity: 7, // number = sensitivity threshold (must be 1 or higher)
*	interval: 100,   // number = milliseconds of polling interval
*	over: showNav,  // function = onMouseOver callback (required)
*	timeout: 0,   // number = milliseconds delay before onMouseOut function call
*	out: hideNav    // function = onMouseOut callback (required)
* });
* 
* @param  f  onMouseOver function || An object with configuration options
* @param  g  onMouseOut function  || Nothing (use configuration options object)
* @author    Brian Cherne brian(at)cherne(dot)net
*/
(function ($) {
  $.fn.hoverIntent = function (f, g) {
    // default configuration options
    var cfg = {
      sensitivity: 7,
      interval: 100,
      timeout: 0
    }; // override configuration options with user supplied object

    cfg = $.extend(cfg, g ? {
      over: f,
      out: g
    } : f); // instantiate variables
    // cX, cY = current X and Y position of mouse, updated by mousemove event
    // pX, pY = previous X and Y position of mouse, set by mouseover and polling interval

    var cX, cY, pX, pY; // A private function for getting mouse position

    var track = function (ev) {
      cX = ev.pageX;
      cY = ev.pageY;
    }; // A private function for comparing current and previous mouse position


    var compare = function (ev, ob) {
      ob.hoverIntent_t = clearTimeout(ob.hoverIntent_t); // compare mouse positions to see if they've crossed the threshold

      if (Math.abs(pX - cX) + Math.abs(pY - cY) < cfg.sensitivity) {
        $(ob).unbind("mousemove", track); // set hoverIntent state to true (so mouseOut can be called)

        ob.hoverIntent_s = 1;
        return cfg.over.apply(ob, [ev]);
      } else {
        // set previous coordinates for next time
        pX = cX;
        pY = cY; // use self-calling timeout, guarantees intervals are spaced out properly (avoids JavaScript timer bugs)

        ob.hoverIntent_t = setTimeout(function () {
          compare(ev, ob);
        }, cfg.interval);
      }
    }; // A private function for delaying the mouseOut function


    var delay = function (ev, ob) {
      ob.hoverIntent_t = clearTimeout(ob.hoverIntent_t);
      ob.hoverIntent_s = 0;
      return cfg.out.apply(ob, [ev]);
    }; // A private function for handling mouse 'hovering'


    var handleHover = function (e) {
      // copy objects to be passed into t (required for event object to be passed in IE)
      var ev = jQuery.extend({}, e);
      var ob = this; // cancel hoverIntent timer if it exists

      if (ob.hoverIntent_t) {
        ob.hoverIntent_t = clearTimeout(ob.hoverIntent_t);
      } // if e.type == "mouseenter"


      if (e.type == "mouseenter") {
        // set "previous" X and Y position based on initial entry point
        pX = ev.pageX;
        pY = ev.pageY; // update "current" X and Y position based on mousemove

        $(ob).bind("mousemove", track); // start polling interval (self-calling timeout) to compare mouse coordinates over time

        if (ob.hoverIntent_s != 1) {
          ob.hoverIntent_t = setTimeout(function () {
            compare(ev, ob);
          }, cfg.interval);
        } // else e.type == "mouseleave"

      } else {
        // unbind expensive mousemove event
        $(ob).unbind("mousemove", track); // if hoverIntent state is true, then call the mouseOut function after the specified delay

        if (ob.hoverIntent_s == 1) {
          ob.hoverIntent_t = setTimeout(function () {
            delay(ev, ob);
          }, cfg.timeout);
        }
      }
    }; // bind the function to the two event listeners


    return this.bind('mouseenter', handleHover).bind('mouseleave', handleHover);
  };
})(jQuery);
/*
 * jQuery JSONP Core Plugin 2.4.0 (2012-08-21)
 *
 * https://github.com/jaubourg/jquery-jsonp
 *
 * Copyright (c) 2012 Julian Aubourg
 *
 * This document is licensed as free software under the terms of the
 * MIT License: http://www.opensource.org/licenses/mit-license.php
 */
(function ($) {
  // ###################### UTILITIES ##
  // Noop
  function noop() {} // Generic callback


  function genericCallback(data) {
    lastValue = [data];
  } // Call if defined


  function callIfDefined(method, object, parameters) {
    return method && method.apply(object.context || object, parameters);
  } // Give joining character given url


  function qMarkOrAmp(url) {
    return /\?/.test(url) ? "&" : "?";
  }

  var // String constants (for better minification)
  STR_ASYNC = "async",
      STR_CHARSET = "charset",
      STR_EMPTY = "",
      STR_ERROR = "error",
      STR_INSERT_BEFORE = "insertBefore",
      STR_JQUERY_JSONP = "_jqjsp",
      STR_ON = "on",
      STR_ON_CLICK = STR_ON + "click",
      STR_ON_ERROR = STR_ON + STR_ERROR,
      STR_ON_LOAD = STR_ON + "load",
      STR_ON_READY_STATE_CHANGE = STR_ON + "readystatechange",
      STR_READY_STATE = "readyState",
      STR_REMOVE_CHILD = "removeChild",
      STR_SCRIPT_TAG = "<script>",
      STR_SUCCESS = "success",
      STR_TIMEOUT = "timeout",
      // Window
  win = window,
      // Deferred
  Deferred = $.Deferred,
      // Head element
  head = $("head")[0] || document.documentElement,
      // Page cache
  pageCache = {},
      // Counter
  count = 0,
      // Last returned value
  lastValue,
      // ###################### DEFAULT OPTIONS ##
  xOptionsDefaults = {
    //beforeSend: undefined,
    //cache: false,
    callback: STR_JQUERY_JSONP,
    //callbackParameter: undefined,
    //charset: undefined,
    //complete: undefined,
    //context: undefined,
    //data: "",
    //dataFilter: undefined,
    //error: undefined,
    //pageCache: false,
    //success: undefined,
    //timeout: 0,
    //traditional: false,
    url: location.href
  },
      // opera demands sniffing :/
  opera = win.opera,
      // IE < 10
  oldIE = !!$("<div>").html("<!--[if IE]><i><![endif]-->").find("i").length; // ###################### MAIN FUNCTION ##

  function jsonp(xOptions) {
    // Build data with default
    xOptions = $.extend({}, xOptionsDefaults, xOptions); // References to xOptions members (for better minification)

    var successCallback = xOptions.success,
        errorCallback = xOptions.error,
        completeCallback = xOptions.complete,
        dataFilter = xOptions.dataFilter,
        callbackParameter = xOptions.callbackParameter,
        successCallbackName = xOptions.callback,
        cacheFlag = xOptions.cache,
        pageCacheFlag = xOptions.pageCache,
        charset = xOptions.charset,
        url = xOptions.url,
        data = xOptions.data,
        timeout = xOptions.timeout,
        pageCached,
        // Abort/done flag
    done = 0,
        // Life-cycle functions
    cleanUp = noop,
        // Support vars
    supportOnload,
        supportOnreadystatechange,
        // Request execution vars
    firstChild,
        script,
        scriptAfter,
        timeoutTimer; // If we have Deferreds:
    // - substitute callbacks
    // - promote xOptions to a promise

    Deferred && Deferred(function (defer) {
      defer.done(successCallback).fail(errorCallback);
      successCallback = defer.resolve;
      errorCallback = defer.reject;
    }).promise(xOptions); // Create the abort method

    xOptions.abort = function () {
      !done++ && cleanUp();
    }; // Call beforeSend if provided (early abort if false returned)


    if (callIfDefined(xOptions.beforeSend, xOptions, [xOptions]) === !1 || done) {
      return xOptions;
    } // Control entries


    url = url || STR_EMPTY;
    data = data ? typeof data == "string" ? data : $.param(data, xOptions.traditional) : STR_EMPTY; // Build final url

    url += data ? qMarkOrAmp(url) + data : STR_EMPTY; // Add callback parameter if provided as option

    callbackParameter && (url += qMarkOrAmp(url) + encodeURIComponent(callbackParameter) + "=?"); // Add anticache parameter if needed

    !cacheFlag && !pageCacheFlag && (url += qMarkOrAmp(url) + "_" + new Date().getTime() + "="); // Replace last ? by callback parameter

    url = url.replace(/=\?(&|$)/, "=" + successCallbackName + "$1"); // Success notifier

    function notifySuccess(json) {
      if (!done++) {
        cleanUp(); // Pagecache if needed

        pageCacheFlag && (pageCache[url] = {
          s: [json]
        }); // Apply the data filter if provided

        dataFilter && (json = dataFilter.apply(xOptions, [json])); // Call success then complete

        callIfDefined(successCallback, xOptions, [json, STR_SUCCESS, xOptions]);
        callIfDefined(completeCallback, xOptions, [xOptions, STR_SUCCESS]);
      }
    } // Error notifier


    function notifyError(type) {
      if (!done++) {
        // Clean up
        cleanUp(); // If pure error (not timeout), cache if needed

        pageCacheFlag && type != STR_TIMEOUT && (pageCache[url] = type); // Call error then complete

        callIfDefined(errorCallback, xOptions, [xOptions, type]);
        callIfDefined(completeCallback, xOptions, [xOptions, type]);
      }
    } // Check page cache


    if (pageCacheFlag && (pageCached = pageCache[url])) {
      pageCached.s ? notifySuccess(pageCached.s[0]) : notifyError(pageCached);
    } else {
      // Install the generic callback
      // (BEWARE: global namespace pollution ahoy)
      win[successCallbackName] = genericCallback; // Create the script tag

      script = $(STR_SCRIPT_TAG)[0];
      script.id = STR_JQUERY_JSONP + count++; // Set charset if provided

      if (charset) {
        script[STR_CHARSET] = charset;
      }

      opera && opera.version() < 11.60 ? (scriptAfter = $(STR_SCRIPT_TAG)[0]).text = "document.getElementById('" + script.id + "')." + STR_ON_ERROR + "()" : script[STR_ASYNC] = STR_ASYNC; // Internet Explorer: event/htmlFor trick

      if (oldIE) {
        script.htmlFor = script.id;
        script.event = STR_ON_CLICK;
      } // Attached event handlers


      script[STR_ON_LOAD] = script[STR_ON_ERROR] = script[STR_ON_READY_STATE_CHANGE] = function (result) {
        // Test readyState if it exists
        if (!script[STR_READY_STATE] || !/i/.test(script[STR_READY_STATE])) {
          try {
            script[STR_ON_CLICK] && script[STR_ON_CLICK]();
          } catch (_) {}

          result = lastValue;
          lastValue = 0;
          result ? notifySuccess(result[0]) : notifyError(STR_ERROR);
        }
      }; // Set source


      script.src = url; // Re-declare cleanUp function

      cleanUp = function (i) {
        timeoutTimer && clearTimeout(timeoutTimer);
        script[STR_ON_READY_STATE_CHANGE] = script[STR_ON_LOAD] = script[STR_ON_ERROR] = null;
        head[STR_REMOVE_CHILD](script);
        scriptAfter && head[STR_REMOVE_CHILD](scriptAfter);
      }; // Append main script


      head[STR_INSERT_BEFORE](script, firstChild = head.firstChild); // Append trailing script if needed

      scriptAfter && head[STR_INSERT_BEFORE](scriptAfter, firstChild); // If a timeout is needed, install it

      timeoutTimer = timeout > 0 && setTimeout(function () {
        notifyError(STR_TIMEOUT);
      }, timeout);
    }

    return xOptions;
  } // ###################### SETUP FUNCTION ##


  jsonp.setup = function (xOptions) {
    $.extend(xOptionsDefaults, xOptions);
  }; // ###################### INSTALL in jQuery ##


  $.jsonp = jsonp;
})(jQuery);
// ----------------------------------------------------------------------------
// markItUp! Universal MarkUp Engine, JQuery plugin
// v 1.1.x
// Dual licensed under the MIT and GPL licenses.
// ----------------------------------------------------------------------------
// Copyright (C) 2007-2012 Jay Salvat
// http://markitup.jaysalvat.com/
// ----------------------------------------------------------------------------
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
// ----------------------------------------------------------------------------
(function ($) {
  $.fn.markItUp = function (settings, extraSettings) {
    var method, params, options, ctrlKey, shiftKey, altKey;
    ctrlKey = shiftKey = altKey = false;

    if (typeof settings == 'string') {
      method = settings;
      params = extraSettings;
    }

    options = {
      id: '',
      nameSpace: '',
      root: '',
      previewHandler: false,
      previewInWindow: '',
      // 'width=800, height=600, resizable=yes, scrollbars=yes'
      previewInElement: '',
      previewAutoRefresh: true,
      previewPosition: 'after',
      previewTemplatePath: '~/templates/preview.html',
      previewParser: false,
      previewParserPath: '',
      previewParserVar: 'data',
      resizeHandle: true,
      beforeInsert: '',
      afterInsert: '',
      onEnter: {},
      onShiftEnter: {},
      onCtrlEnter: {},
      onTab: {},
      markupSet: [{
        /* set */
      }] // changed to Obj Array to allow for distinction between basic and advanced set

    };
    $.extend(options, settings, extraSettings); // compute markItUp! path

    if (!options.root) {
      $('script').each(function (a, tag) {
        miuScript = $(tag).get(0).src.match(/(.*)jquery\.markitup(\.pack)?\.js$/);

        if (miuScript !== null) {
          options.root = miuScript[1];
        }
      });
    } // Quick patch to keep compatibility with jQuery 1.9


    var uaMatch = function (ua) {
      ua = ua.toLowerCase();
      var match = /(chrome)[ \/]([\w.]+)/.exec(ua) || /(webkit)[ \/]([\w.]+)/.exec(ua) || /(opera)(?:.*version|)[ \/]([\w.]+)/.exec(ua) || /(msie) ([\w.]+)/.exec(ua) || ua.indexOf("compatible") < 0 && /(mozilla)(?:.*? rv:([\w.]+)|)/.exec(ua) || [];
      return {
        browser: match[1] || "",
        version: match[2] || "0"
      };
    };

    var matched = uaMatch(navigator.userAgent);
    var browser = {};

    if (matched.browser) {
      browser[matched.browser] = true;
      browser.version = matched.version;
    }

    if (browser.chrome) {
      browser.webkit = true;
    } else if (browser.webkit) {
      browser.safari = true;
    }

    return this.each(function () {
      var $$, textarea, levels, scrollPosition, caretPosition, caretOffset, clicked, hash, header, footer, previewWindow, template, iFrame, abort;
      $$ = $(this);
      textarea = this;
      levels = [];
      abort = false;
      scrollPosition = caretPosition = 0;
      caretOffset = -1;
      options.previewParserPath = localize(options.previewParserPath);
      options.previewTemplatePath = localize(options.previewTemplatePath);

      if (method) {
        switch (method) {
          case 'remove':
            remove();
            break;

          case 'insert':
            markup(params);
            break;

          default:
            $.error('Method ' + method + ' does not exist on jQuery.markItUp');
        }

        return;
      } // apply the computed path to ~/


      function localize(data, inText) {
        if (inText) {
          return data.replace(/("|')~\//g, "$1" + options.root);
        }

        return data.replace(/^~\//, options.root);
      } // init and build editor


      function init() {
        id = '';
        nameSpace = '';

        if (options.id) {
          id = 'id="' + options.id + '"';
        } else if ($$.attr("id")) {
          id = 'id="markItUp' + $$.attr("id").substr(0, 1).toUpperCase() + $$.attr("id").substr(1) + '"';
        }

        if (options.nameSpace) {
          nameSpace = 'class="' + options.nameSpace + '"';
        }

        $$.wrap('<div ' + nameSpace + '></div>');
        $$.wrap('<div ' + id + ' class="markItUp"></div>');
        $$.wrap('<div class="markItUpContainer"></div>');
        $$.addClass("markItUpEditor"); // add the header before the textarea

        header = $('<div class="markItUpHeader"></div>').insertBefore($$); // $(dropMenus(options.markupSet)).appendTo(header);
        // basic

        var $basicSet = $(dropMenus(options.markupSet[0], 'miu_basic'));
        $basicSet.append('<li class="txt_link fright li_miu_advanced"><span class="toggle_miu_advanced show_miu_advanced awesome-button" role="button">' + locaKeys.moreopts + '</span></li>');
        $basicSet.appendTo(header); // advanced

        var $advancedSet = $(dropMenus(options.markupSet[1], 'miu_advanced'));
        $advancedSet.appendTo(header).hide();
        footer = $('<div class="markItUpFooter"></div>').insertAfter($$); // add the resize handle after textarea

        if (options.resizeHandle === true && browser.safari !== true) {
          resizeHandle = $('<div class="markItUpResizeHandle"></div>').insertAfter($$).bind("mousedown.markItUp", function (e) {
            var h = $$.height(),
                y = e.clientY,
                mouseMove,
                mouseUp;

            mouseMove = function (e) {
              $$.css("height", Math.max(20, e.clientY + h - y) + "px");
              return false;
            };

            mouseUp = function (e) {
              $("html").unbind("mousemove.markItUp", mouseMove).unbind("mouseup.markItUp", mouseUp);
              return false;
            };

            $("html").bind("mousemove.markItUp", mouseMove).bind("mouseup.markItUp", mouseUp);
          });
          footer.append(resizeHandle);
        } // listen key events


        $$.bind('keydown.markItUp', keyPressed).bind('keyup', keyPressed); // bind an event to catch external calls

        $$.bind("insertion.markItUp", function (e, settings) {
          if (settings.target !== false) {
            get();
          }

          if (textarea === $.markItUp.focused) {
            markup(settings);
          }
        }); // remember the last focus

        $$.bind('focus.markItUp', function () {
          $.markItUp.focused = this;
        });

        if (options.previewInElement) {
          refreshPreview();
        }
      } // recursively build header with dropMenus from markupset


      function dropMenus(markupSet, mSetClass) {
        if (!mSetClass) mSetClass = '';
        var ul = $('<ul class="' + mSetClass + '"></ul>'),
            i = 0; //$('li:hover > ul', ul).css('display', 'block');

        $.each(markupSet, function () {
          var button = this,
              t = '',
              title,
              li,
              j;
          title = button.key ? (button.name || '') + ' [Ctrl+' + button.key + ']' : button.name || '';
          key = button.key ? 'accesskey="' + button.key + '"' : '';

          if (button.separator) {
            li = $('<li class="markItUpSeparator">' + (button.separator || '') + '</li>').appendTo(ul);
          } else {
            i++;

            for (j = levels.length - 1; j >= 0; j--) {
              t += levels[j] + "-";
            }

            li = $('<li class="markItUpButton markItUpButton' + t + i + ' ' + (button.className || '') + '"><a href="" ' + key + ' title="' + title + '">' + (button.name || '') + '</a></li>').bind("contextmenu.markItUp", function () {
              // prevent contextmenu on mac and allow ctrl+click
              return false;
            }).appendTo(ul);

            if (!isMobile) {
              li.unbind('click.markItUp').bind('click.markItUp', function () {
                if (button.call) {
                  eval(button.call)();
                } else {
                  // beim 1. Aufruf verschieben... an body haengen
                  var $innerUL = $('>ul', li);

                  if ($innerUL.length > 0) {
                    // ausblenden wenn parent ausgeblendet wird
                    $innerUL.parents('.ui-dialog').find('.ui-dialog-titlebar-close').on('click', function () {
                      $innerUL.hide();
                    });
                    $innerUL.addClass('markItUpOutpost');
                    $('body').append($innerUL);
                    var randomId = Math.ceil(Math.random() * 10000);
                    li.attr('id', 'markitUpDropdown' + randomId);
                    $innerUL.attr('rel', 'markitUpDropdown' + randomId); // eine Auswahl darin soll das UL auch wieder schliessen

                    $innerUL.find('>li').bind('click.markItUp', function () {
                      $innerUL.hide();
                      li.attr('data-opened', 0);
                    });
                    $(window).on('resize', function (e) {
                      // nicht huebsch, aber benoetigt fuer allyrundmails + zoom<1
                      repositionDropdowns($innerUL, li);
                    });
                  } else {
                    // nicht erster aufruf - unterelement von body holen
                    $innerUL = $('body>ul[rel="' + li.attr('id') + '"]');
                  }

                  $('html').one('click.markItUp2', function () {
                    $innerUL.hide();
                    li.attr('data-opened', 0);
                  }); // bei jedem klick neu positionieren

                  repositionDropdowns($innerUL, li); // Sichtbarkeit toggeln

                  if ($innerUL.filter(':visible').length) {
                    $innerUL.hide();
                    li.attr('data-opened', 0);
                  } else {
                    $innerUL.show();
                    li.attr('data-opened', 1);
                  }
                }

                setTimeout(function () {
                  markup(button);
                }, 1);
                return false;
              }).bind("focusin.markItUp", function () {
                $$.focus();
              });
            } else {
              li.bind('click.markItUp', function () {
                $(header).find('ul ul').hide();

                if ($(this).find('> ul').length) {
                  $(this).find('> ul').show();
                } else {
                  if (button.call) {
                    eval(button.call)();
                  }

                  setTimeout(function () {
                    markup(button);
                  }, 1);
                }

                return false;
              });
            }

            if (button.dropMenu) {
              levels.push(i);
              $(li).addClass('markItUpDropMenu').append(dropMenus(button.dropMenu));
              var dropDownArr = $('<span class="dropdown_arr"></span>');
              $(li).append(dropDownArr);
            }
          }
        });
        levels.pop();
        return ul;
      }

      function repositionDropdowns($innerUL, li) {
        // bei jedem klick neu positionieren
        var ulHeight = $innerUL.outerHeight();
        var top;
        var dropDownTop = Math.ceil(li.offset().top);

        if (dropDownTop + li.height() + ulHeight + $('#siteFooter').outerHeight() >= $(window).innerHeight() + $(window).scrollTop()) {
          top = dropDownTop - ulHeight - 2;
        } else {
          top = dropDownTop + 29;
        }

        $innerUL.css({
          'top': top,
          'left': Math.floor(li.offset()['left'])
        });
      } // markItUp! markups


      function magicMarkups(string) {
        if (string) {
          string = string.toString();
          string = string.replace(/\(\!\(([\s\S]*?)\)\!\)/g, function (x, a) {
            var b = a.split('|!|');

            if (altKey === true) {
              return b[1] !== undefined ? b[1] : b[0];
            } else {
              return b[1] === undefined ? "" : b[0];
            }
          }); // [![prompt]!], [![prompt:!:value]!]

          string = string.replace(/\[\!\[([\s\S]*?)\]\!\]/g, function (x, a) {
            var b = a.split(':!:');

            if (abort === true) {
              return false;
            }

            value = prompt(b[0], b[1] ? b[1] : '');

            if (value === null) {
              abort = true;
            }

            return value;
          });
          return string;
        }

        return "";
      } // prepare action


      function prepare(action) {
        if ($.isFunction(action)) {
          action = action(hash);
        }

        return magicMarkups(action);
      } // build block to insert


      function build(string) {
        var openWith = prepare(clicked.openWith);
        var placeHolder = prepare(clicked.placeHolder);
        var replaceWith = prepare(clicked.replaceWith);
        var closeWith = prepare(clicked.closeWith);
        var openBlockWith = prepare(clicked.openBlockWith);
        var closeBlockWith = prepare(clicked.closeBlockWith);
        var multiline = clicked.multiline;

        if (replaceWith !== "") {
          block = openWith + replaceWith + closeWith;
        } else if (selection === '' && placeHolder !== '') {
          block = openWith + placeHolder + closeWith;
        } else {
          string = string || selection;
          var lines = [string],
              blocks = [];

          if (multiline === true) {
            lines = string.split(/\r?\n/);
          }

          for (var l = 0; l < lines.length; l++) {
            line = lines[l];
            var trailingSpaces;

            if (trailingSpaces = line.match(/ *$/)) {
              blocks.push(openWith + line.replace(/ *$/g, '') + closeWith + trailingSpaces);
            } else {
              blocks.push(openWith + line + closeWith);
            }
          }

          block = blocks.join("\n");
        }

        block = openBlockWith + block + closeBlockWith;
        return {
          block: block,
          openBlockWith: openBlockWith,
          openWith: openWith,
          replaceWith: replaceWith,
          placeHolder: placeHolder,
          closeWith: closeWith,
          closeBlockWith: closeBlockWith
        };
      } // define markup to insert


      function markup(button) {
        var len, j, n, i;
        hash = clicked = button;
        get();
        $.extend(hash, {
          line: "",
          root: options.root,
          textarea: textarea,
          selection: selection || '',
          caretPosition: caretPosition,
          ctrlKey: ctrlKey,
          shiftKey: shiftKey,
          altKey: altKey
        }); // callbacks before insertion

        prepare(options.beforeInsert);
        prepare(clicked.beforeInsert);

        if (ctrlKey === true && shiftKey === true || button.multiline === true) {
          prepare(clicked.beforeMultiInsert);
        }

        $.extend(hash, {
          line: 1
        });

        if (ctrlKey === true && shiftKey === true) {
          lines = selection.split(/\r?\n/);

          for (j = 0, n = lines.length, i = 0; i < n; i++) {
            if ($.trim(lines[i]) !== '') {
              $.extend(hash, {
                line: ++j,
                selection: lines[i]
              });
              lines[i] = build(lines[i]).block;
            } else {
              lines[i] = "";
            }
          }

          string = {
            block: lines.join('\n')
          };
          start = caretPosition;
          len = string.block.length + (browser.opera ? n - 1 : 0);
        } else if (ctrlKey === true) {
          string = build(selection);
          start = caretPosition + string.openWith.length;
          len = string.block.length - string.openWith.length - string.closeWith.length;
          len = len - (string.block.match(/ $/) ? 1 : 0);
          len -= fixIeBug(string.block);
        } else if (shiftKey === true) {
          string = build(selection);
          start = caretPosition;
          len = string.block.length;
          len -= fixIeBug(string.block);
        } else {
          string = build(selection);
          start = caretPosition + string.block.length;
          len = 0;
          start -= fixIeBug(string.block);
        }

        if (selection === '' && string.replaceWith === '') {
          caretOffset += fixOperaBug(string.block);
          start = caretPosition + string.openBlockWith.length + string.openWith.length;
          len = string.block.length - string.openBlockWith.length - string.openWith.length - string.closeWith.length - string.closeBlockWith.length;
          caretOffset = $$.val().substring(caretPosition, $$.val().length).length;
          caretOffset -= fixOperaBug($$.val().substring(0, caretPosition));
        }

        $.extend(hash, {
          caretPosition: caretPosition,
          scrollPosition: scrollPosition
        });

        if (string.block !== selection && abort === false) {
          insert(string.block);
          set(start, len);
        } else {
          caretOffset = -1;
        }

        get();
        $.extend(hash, {
          line: '',
          selection: selection
        }); // callbacks after insertion

        if (ctrlKey === true && shiftKey === true || button.multiline === true) {
          prepare(clicked.afterMultiInsert);
        }

        prepare(clicked.afterInsert);
        prepare(options.afterInsert); // refresh preview if opened

        if (previewWindow && options.previewAutoRefresh) {
          refreshPreview();
        } // reinit keyevent


        shiftKey = altKey = ctrlKey = abort = false;
      } // Substract linefeed in Opera


      function fixOperaBug(string) {
        if (browser.opera) {
          return string.length - string.replace(/\n*/g, '').length;
        }

        return 0;
      } // Substract linefeed in IE


      function fixIeBug(string) {
        if (browser.msie) {
          return string.length - string.replace(/\r*/g, '').length;
        }

        return 0;
      } // add markup


      function insert(block) {
        if (document.selection) {
          var newSelection = document.selection.createRange();
          newSelection.text = block;
        } else {
          textarea.value = textarea.value.substring(0, caretPosition) + block + textarea.value.substring(caretPosition + selection.length, textarea.value.length);
        }
      } // set a selection


      function set(start, len) {
        if (textarea.createTextRange) {
          // quick fix to make it work on Opera 9.5
          if (browser.opera && browser.version >= 9.5 && len == 0) {
            return false;
          }

          range = textarea.createTextRange();
          range.collapse(true);
          range.moveStart('character', start);
          range.moveEnd('character', len);
          range.select();
        } else if (textarea.setSelectionRange) {
          textarea.setSelectionRange(start, start + len);
        }

        textarea.scrollTop = scrollPosition;
        textarea.focus();
      } // get the selection


      function get() {
        textarea.focus();
        scrollPosition = textarea.scrollTop;

        if (document.selection) {
          selection = document.selection.createRange().text;

          if (browser.msie) {
            // ie
            var range = document.selection.createRange(),
                rangeCopy = range.duplicate();
            rangeCopy.moveToElementText(textarea);
            caretPosition = -1;

            while (rangeCopy.inRange(range)) {
              rangeCopy.moveStart('character');
              caretPosition++;
            }
          } else {
            // opera
            caretPosition = textarea.selectionStart;
          }
        } else {
          // gecko & webkit
          caretPosition = textarea.selectionStart;
          selection = textarea.value.substring(caretPosition, textarea.selectionEnd);
        }

        return selection;
      } // open preview window


      function preview() {
        if (typeof options.previewHandler === 'function') {
          previewWindow = true;
        } else if (options.previewInElement) {
          previewWindow = $(options.previewInElement);
        } else if (!previewWindow || previewWindow.closed) {
          if (options.previewInWindow) {
            previewWindow = window.open('', 'preview', options.previewInWindow);
            $(window).unload(function () {
              previewWindow.close();
            });
          } else {
            iFrame = $('<iframe class="markItUpPreviewFrame"></iframe>');

            if (options.previewPosition == 'after') {
              iFrame.insertAfter(footer);
            } else {
              iFrame.insertBefore(header);
            }

            previewWindow = iFrame[iFrame.length - 1].contentWindow || frame[iFrame.length - 1];
          }
        } else if (altKey === true) {
          if (iFrame) {
            iFrame.remove();
          } else {
            previewWindow.close();
          }

          previewWindow = iFrame = false;
        }

        if (!options.previewAutoRefresh) {
          refreshPreview();
        }

        if (options.previewInWindow) {
          previewWindow.focus();
        }
      } // refresh Preview window


      function refreshPreview() {
        renderPreview();
      }

      function renderPreview() {
        var phtml;

        if (options.previewHandler && typeof options.previewHandler === 'function') {
          options.previewHandler($$.val());
        } else if (options.previewParser && typeof options.previewParser === 'function') {
          var data = options.previewParser($$.val());
          writeInPreview(localize(data, 1));
        } else if (options.previewParserPath !== '') {
          $.ajax({
            type: 'POST',
            dataType: 'text',
            global: false,
            url: options.previewParserPath,
            data: options.previewParserVar + '=' + encodeURIComponent($$.val()),
            success: function (data) {
              writeInPreview(localize(data, 1));
            }
          });
        } else {
          if (!template) {
            $.ajax({
              url: options.previewTemplatePath,
              dataType: 'text',
              global: false,
              success: function (data) {
                writeInPreview(localize(data, 1).replace(/<!-- content -->/g, $$.val()));
              }
            });
          }
        }

        return false;
      }

      function writeInPreview(data) {
        if (options.previewInElement) {
          $(options.previewInElement).html(data);
        } else if (previewWindow && previewWindow.document) {
          try {
            sp = previewWindow.document.documentElement.scrollTop;
          } catch (e) {
            sp = 0;
          }

          previewWindow.document.open();
          previewWindow.document.write(data);
          previewWindow.document.close();
          previewWindow.document.documentElement.scrollTop = sp;
        }
      } // set keys pressed


      function keyPressed(e) {
        shiftKey = e.shiftKey;
        altKey = e.altKey;
        ctrlKey = !(e.altKey && e.ctrlKey) ? e.ctrlKey || e.metaKey : false;

        if (e.type === 'keydown') {
          if (ctrlKey === true) {
            li = $('a[accesskey="' + (e.keyCode == 13 ? '\\n' : String.fromCharCode(e.keyCode)) + '"]', header).parent('li');

            if (li.length !== 0) {
              ctrlKey = false;
              setTimeout(function () {
                li.triggerHandler('mouseup');
              }, 1);
              return false;
            }
          }

          if (e.keyCode === 13 || e.keyCode === 10) {
            // Enter key
            if (ctrlKey === true) {
              // Enter + Ctrl
              ctrlKey = false;
              markup(options.onCtrlEnter);
              return options.onCtrlEnter.keepDefault;
            } else if (shiftKey === true) {
              // Enter + Shift
              shiftKey = false;
              markup(options.onShiftEnter);
              return options.onShiftEnter.keepDefault;
            } else {
              // only Enter
              markup(options.onEnter);
              return options.onEnter.keepDefault;
            }
          }

          if (e.keyCode === 9) {
            // Tab key
            if (shiftKey == true || ctrlKey == true || altKey == true) {
              return false;
            }

            if (caretOffset !== -1) {
              get();
              caretOffset = $$.val().length - caretOffset;
              set(caretOffset, 0);
              caretOffset = -1;
              return false;
            } else {
              markup(options.onTab);
              return options.onTab.keepDefault;
            }
          }
        }
      }

      function remove() {
        $$.unbind(".markItUp").removeClass('markItUpEditor');
        $$.parent('div').parent('div.markItUp').parent('div').replaceWith($$);
        $$.data('markItUp', null);
      }

      init();
    });
  };

  $.fn.markItUpRemove = function () {
    return this.each(function () {
      $(this).markItUp('remove');
    });
  };

  $.markItUp = function (settings) {
    var options = {
      target: false
    };
    $.extend(options, settings);

    if (options.target) {
      return $(options.target).each(function () {
        $(this).focus();
        $(this).trigger('insertion', [options]);
      });
    } else {
      $('textarea').trigger('insertion', [options]);
    }
  };
})(jQuery);
/*!
 * jQuery Mousewheel 3.1.13
 *
 * Copyright 2015 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */
!function (a) {
  "function" == typeof define && define.amd ? define(["jquery"], a) : "object" == typeof exports ? module.exports = a : a(jQuery);
}(function (a) {
  function b(b) {
    var g = b || window.event,
        h = i.call(arguments, 1),
        j = 0,
        l = 0,
        m = 0,
        n = 0,
        o = 0,
        p = 0;

    if (b = a.event.fix(g), b.type = "mousewheel", "detail" in g && (m = -1 * g.detail), "wheelDelta" in g && (m = g.wheelDelta), "wheelDeltaY" in g && (m = g.wheelDeltaY), "wheelDeltaX" in g && (l = -1 * g.wheelDeltaX), "axis" in g && g.axis === g.HORIZONTAL_AXIS && (l = -1 * m, m = 0), j = 0 === m ? l : m, "deltaY" in g && (m = -1 * g.deltaY, j = m), "deltaX" in g && (l = g.deltaX, 0 === m && (j = -1 * l)), 0 !== m || 0 !== l) {
      if (1 === g.deltaMode) {
        var q = a.data(this, "mousewheel-line-height");
        j *= q, m *= q, l *= q;
      } else if (2 === g.deltaMode) {
        var r = a.data(this, "mousewheel-page-height");
        j *= r, m *= r, l *= r;
      }

      if (n = Math.max(Math.abs(m), Math.abs(l)), (!f || f > n) && (f = n, d(g, n) && (f /= 40)), d(g, n) && (j /= 40, l /= 40, m /= 40), j = Math[j >= 1 ? "floor" : "ceil"](j / f), l = Math[l >= 1 ? "floor" : "ceil"](l / f), m = Math[m >= 1 ? "floor" : "ceil"](m / f), k.settings.normalizeOffset && this.getBoundingClientRect) {
        var s = this.getBoundingClientRect();
        o = b.clientX - s.left, p = b.clientY - s.top;
      }

      return b.deltaX = l, b.deltaY = m, b.deltaFactor = f, b.offsetX = o, b.offsetY = p, b.deltaMode = 0, h.unshift(b, j, l, m), e && clearTimeout(e), e = setTimeout(c, 200), (a.event.dispatch || a.event.handle).apply(this, h);
    }
  }

  function c() {
    f = null;
  }

  function d(a, b) {
    return k.settings.adjustOldDeltas && "mousewheel" === a.type && b % 120 === 0;
  }

  var e,
      f,
      g = ["wheel", "mousewheel", "DOMMouseScroll", "MozMousePixelScroll"],
      h = "onwheel" in document || document.documentMode >= 9 ? ["wheel"] : ["mousewheel", "DomMouseScroll", "MozMousePixelScroll"],
      i = Array.prototype.slice;
  if (a.event.fixHooks) for (var j = g.length; j;) a.event.fixHooks[g[--j]] = a.event.mouseHooks;
  var k = a.event.special.mousewheel = {
    version: "3.1.12",
    setup: function () {
      if (this.addEventListener) for (var c = h.length; c;) this.addEventListener(h[--c], b, !1);else this.onmousewheel = b;
      a.data(this, "mousewheel-line-height", k.getLineHeight(this)), a.data(this, "mousewheel-page-height", k.getPageHeight(this));
    },
    teardown: function () {
      if (this.removeEventListener) for (var c = h.length; c;) this.removeEventListener(h[--c], b, !1);else this.onmousewheel = null;
      a.removeData(this, "mousewheel-line-height"), a.removeData(this, "mousewheel-page-height");
    },
    getLineHeight: function (b) {
      var c = a(b),
          d = c["offsetParent" in a.fn ? "offsetParent" : "parent"]();
      return d.length || (d = a("body")), parseInt(d.css("fontSize"), 10) || parseInt(c.css("fontSize"), 10) || 16;
    },
    getPageHeight: function (b) {
      return a(b).height();
    },
    settings: {
      adjustOldDeltas: !0,
      normalizeOffset: !0
    }
  };
  a.fn.extend({
    mousewheel: function (a) {
      return a ? this.bind("mousewheel", a) : this.trigger("mousewheel");
    },
    unmousewheel: function (a) {
      return this.unbind("mousewheel", a);
    }
  });
});
(function ($) {
  $.extend({
    tablesorter: new function () {
      var parsers = [],
          widgets = [];
      this.defaults = {
        cssHeader: "header",
        cssAsc: "headerSortUp",
        cssDesc: "headerSortDown",
        cssChildRow: "expand-child",
        sortInitialOrder: "asc",
        sortMultiSortKey: "shiftKey",
        sortForce: null,
        sortAppend: null,
        sortLocaleCompare: true,
        textExtraction: "simple",
        parsers: {},
        widgets: [],
        widgetZebra: {
          css: ["even", "odd"]
        },
        headers: {},
        widthFixed: false,
        cancelSelection: true,
        sortList: [],
        headerList: [],
        dateFormat: "us",
        decimal: '/\.|\,/g',
        onRenderHeader: null,
        selectorHeaders: 'thead th',
        debug: false
      };

      function benchmark(s, d) {
        log(s + "," + (new Date().getTime() - d.getTime()) + "ms");
      }

      this.benchmark = benchmark;

      function log(s) {
        if (typeof console != "undefined" && typeof console.debug != "undefined") {
          console.log(s);
        } else {
          alert(s);
        }
      }

      function buildParserCache(table, $headers) {
        if (table.config.debug) {
          var parsersDebug = "";
        }

        if (table.tBodies.length == 0) return;
        var rows = table.tBodies[0].rows;

        if (rows[0]) {
          var list = [],
              cells = rows[0].cells,
              l = cells.length;

          for (var i = 0; i < l; i++) {
            var p = false;

            if ($.metadata && $($headers[i]).metadata() && $($headers[i]).metadata().sorter) {
              p = getParserById($($headers[i]).metadata().sorter);
            } else if (table.config.headers[i] && table.config.headers[i].sorter) {
              p = getParserById(table.config.headers[i].sorter);
            }

            if (!p) {
              p = detectParserForColumn(table, rows, -1, i);
            }

            if (table.config.debug) {
              parsersDebug += "column:" + i + " parser:" + p.id + "\n";
            }

            list.push(p);
          }
        }

        if (table.config.debug) {
          log(parsersDebug);
        }

        return list;
      }

      ;

      function detectParserForColumn(table, rows, rowIndex, cellIndex) {
        var l = parsers.length,
            node = false,
            nodeValue = false,
            keepLooking = true;

        while (nodeValue == '' && keepLooking) {
          rowIndex++;

          if (rows[rowIndex]) {
            node = getNodeFromRowAndCellIndex(rows, rowIndex, cellIndex);
            nodeValue = trimAndGetNodeText(table.config, node);

            if (table.config.debug) {
              log('Checking if value was empty on row:' + rowIndex);
            }
          } else {
            keepLooking = false;
          }
        }

        for (var i = 1; i < l; i++) {
          if (parsers[i].is(nodeValue, table, node)) {
            return parsers[i];
          }
        }

        return parsers[0];
      }

      function getNodeFromRowAndCellIndex(rows, rowIndex, cellIndex) {
        return rows[rowIndex].cells[cellIndex];
      }

      function trimAndGetNodeText(config, node) {
        return $.trim(getElementText(config, node));
      }

      function getParserById(name) {
        var l = parsers.length;

        for (var i = 0; i < l; i++) {
          if (parsers[i].id.toLowerCase() == name.toLowerCase()) {
            return parsers[i];
          }
        }

        return false;
      }

      function buildCache(table) {
        if (table.config.debug) {
          var cacheTime = new Date();
        }

        var totalRows = table.tBodies[0] && table.tBodies[0].rows.length || 0,
            totalCells = table.tBodies[0].rows[0] && table.tBodies[0].rows[0].cells.length || 0,
            parsers = table.config.parsers,
            cache = {
          row: [],
          normalized: []
        };

        for (var i = 0; i < totalRows; ++i) {
          var c = $(table.tBodies[0].rows[i]),
              cols = [];

          if (c.hasClass(table.config.cssChildRow)) {
            cache.row[cache.row.length - 1] = cache.row[cache.row.length - 1].add(c);
            continue;
          }

          cache.row.push(c);

          for (var j = 0; j < totalCells; ++j) {
            cols.push(parsers[j].format(getElementText(table.config, c[0].cells[j]), table, c[0].cells[j]));
          }

          cols.push(cache.normalized.length);
          cache.normalized.push(cols);
          cols = null;
        }

        ;

        if (table.config.debug) {
          benchmark("Building cache for " + totalRows + " rows:", cacheTime);
        }

        return cache;
      }

      ;

      function getElementText(config, node) {
        var text = "";
        if (!node) return "";
        if (!config.supportsTextContent) config.supportsTextContent = node.textContent || false;

        if (config.textExtraction == "simple") {
          if (config.supportsTextContent) {
            text = node.textContent;
          } else {
            if (node.childNodes[0] && node.childNodes[0].hasChildNodes()) {
              text = node.childNodes[0].innerHTML;
            } else {
              text = node.innerHTML;
            }
          }
        } else {
          if (typeof config.textExtraction == "function") {
            text = config.textExtraction(node);
          } else {
            text = $(node).text();
          }
        }

        return text;
      }

      function appendToTable(table, cache) {
        if (table.config.debug) {
          var appendTime = new Date();
        }

        var c = cache,
            r = c.row,
            n = c.normalized,
            totalRows = n.length,
            checkCell = n[0].length - 1,
            tableBody = $(table.tBodies[0]),
            rows = [];

        for (var i = 0; i < totalRows; i++) {
          var pos = n[i][checkCell];
          rows.push(r[pos]);

          if (!table.config.appender) {
            var l = r[pos].length;

            for (var j = 0; j < l; j++) {
              tableBody[0].appendChild(r[pos][j]);
            }
          }
        }

        if (table.config.appender) {
          table.config.appender(table, rows);
        }

        rows = null;

        if (table.config.debug) {
          benchmark("Rebuilt table:", appendTime);
        }

        applyWidget(table);
        setTimeout(function () {
          $(table).trigger("sortEnd");
        }, 0);
      }

      ;

      function buildHeaders(table) {
        if (table.config.debug) {
          var time = new Date();
        }

        var meta = $.metadata ? true : false;
        var header_index = computeTableHeaderCellIndexes(table);
        $tableHeaders = $(table.config.selectorHeaders, table).each(function (index) {
          this.column = header_index[this.parentNode.rowIndex + "-" + this.cellIndex];
          this.order = formatSortingOrder(table.config.sortInitialOrder);
          this.count = this.order;
          if (checkHeaderMetadata(this) || checkHeaderOptions(table, index)) this.sortDisabled = true;
          if (checkHeaderOptionsSortingLocked(table, index)) this.order = this.lockedOrder = checkHeaderOptionsSortingLocked(table, index);

          if (!this.sortDisabled) {
            var $th = $(this).addClass(table.config.cssHeader);
            if (table.config.onRenderHeader) table.config.onRenderHeader.apply($th);
          }

          table.config.headerList[index] = this;
        });

        if (table.config.debug) {
          benchmark("Built headers:", time);
          log($tableHeaders);
        }

        return $tableHeaders;
      }

      ;

      function computeTableHeaderCellIndexes(t) {
        var matrix = [];
        var lookup = {};
        var thead = t.getElementsByTagName('THEAD')[0];
        var trs = thead.getElementsByTagName('TR');

        for (var i = 0; i < trs.length; i++) {
          var cells = trs[i].cells;

          for (var j = 0; j < cells.length; j++) {
            var c = cells[j];
            var rowIndex = c.parentNode.rowIndex;
            var cellId = rowIndex + "-" + c.cellIndex;
            var rowSpan = c.rowSpan || 1;
            var colSpan = c.colSpan || 1;
            var firstAvailCol;

            if (typeof matrix[rowIndex] == "undefined") {
              matrix[rowIndex] = [];
            }

            for (var k = 0; k < matrix[rowIndex].length + 1; k++) {
              if (typeof matrix[rowIndex][k] == "undefined") {
                firstAvailCol = k;
                break;
              }
            }

            lookup[cellId] = firstAvailCol;

            for (var k = rowIndex; k < rowIndex + rowSpan; k++) {
              if (typeof matrix[k] == "undefined") {
                matrix[k] = [];
              }

              var matrixrow = matrix[k];

              for (var l = firstAvailCol; l < firstAvailCol + colSpan; l++) {
                matrixrow[l] = "x";
              }
            }
          }
        }

        return lookup;
      }

      function checkCellColSpan(table, rows, row) {
        var arr = [],
            r = table.tHead.rows,
            c = r[row].cells;

        for (var i = 0; i < c.length; i++) {
          var cell = c[i];

          if (cell.colSpan > 1) {
            arr = arr.concat(checkCellColSpan(table, headerArr, row++));
          } else {
            if (table.tHead.length == 1 || cell.rowSpan > 1 || !r[row + 1]) {
              arr.push(cell);
            }
          }
        }

        return arr;
      }

      ;

      function checkHeaderMetadata(cell) {
        if ($.metadata && $(cell).metadata().sorter === false) {
          return true;
        }

        ;
        return false;
      }

      function checkHeaderOptions(table, i) {
        if (table.config.headers[i] && table.config.headers[i].sorter === false) {
          return true;
        }

        ;
        return false;
      }

      function checkHeaderOptionsSortingLocked(table, i) {
        if (table.config.headers[i] && table.config.headers[i].lockedOrder) return table.config.headers[i].lockedOrder;
        return false;
      }

      function applyWidget(table) {
        var c = table.config.widgets;
        var l = c.length;

        for (var i = 0; i < l; i++) {
          getWidgetById(c[i]).format(table);
        }
      }

      function getWidgetById(name) {
        var l = widgets.length;

        for (var i = 0; i < l; i++) {
          if (widgets[i].id.toLowerCase() == name.toLowerCase()) {
            return widgets[i];
          }
        }
      }

      ;

      function formatSortingOrder(v) {
        if (typeof v != "Number") {
          return v.toLowerCase() == "desc" ? 1 : 0;
        } else {
          return v == 1 ? 1 : 0;
        }
      }

      function isValueInArray(v, a) {
        var l = a.length;

        for (var i = 0; i < l; i++) {
          if (a[i][0] == v) {
            return true;
          }
        }

        return false;
      }

      function setHeadersCss(table, $headers, list, css) {
        $headers.removeClass(css[0]).removeClass(css[1]);
        var h = [];
        $headers.each(function (offset) {
          if (!this.sortDisabled) {
            h[this.column] = $(this);
          }
        });
        var l = list.length;

        for (var i = 0; i < l; i++) {
          h[list[i][0]].addClass(css[list[i][1]]);
        }
      }

      function fixColumnWidth(table, $headers) {
        var c = table.config;

        if (c.widthFixed) {
          var colgroup = $('<colgroup>');
          $("tr:first td", table.tBodies[0]).each(function () {
            colgroup.append($('<col>').css('width', $(this).width()));
          });
          $(table).prepend(colgroup);
        }

        ;
      }

      function updateHeaderSortCount(table, sortList) {
        var c = table.config,
            l = sortList.length;

        for (var i = 0; i < l; i++) {
          var s = sortList[i],
              o = c.headerList[s[0]];
          o.count = s[1];
          o.count++;
        }
      }

      function multisort(table, sortList, cache) {
        if (table.config.debug) {
          var sortTime = new Date();
        }

        var dynamicExp = "var sortWrapper = function(a,b) {",
            l = sortList.length;

        for (var i = 0; i < l; i++) {
          var c = sortList[i][0];
          var order = sortList[i][1];
          var s = table.config.parsers[c].type == "text" ? order == 0 ? makeSortFunction("text", "asc", c) : makeSortFunction("text", "desc", c) : order == 0 ? makeSortFunction("numeric", "asc", c) : makeSortFunction("numeric", "desc", c);
          var e = "e" + i;
          dynamicExp += "var " + e + " = " + s;
          dynamicExp += "if(" + e + ") { return " + e + "; } ";
          dynamicExp += "else { ";
        }

        var orgOrderCol = cache.normalized[0].length - 1;
        dynamicExp += "return a[" + orgOrderCol + "]-b[" + orgOrderCol + "];";

        for (var i = 0; i < l; i++) {
          dynamicExp += "}; ";
        }

        dynamicExp += "return 0; ";
        dynamicExp += "}; ";

        if (table.config.debug) {
          benchmark("Evaling expression:" + dynamicExp, new Date());
        }

        eval(dynamicExp);
        cache.normalized.sort(sortWrapper);

        if (table.config.debug) {
          benchmark("Sorting on " + sortList.toString() + " and dir " + order + " time:", sortTime);
        }

        return cache;
      }

      ;

      function makeSortFunction(type, direction, index) {
        var a = "a[" + index + "]",
            b = "b[" + index + "]";

        if (type == 'text' && direction == 'asc') {
          return "(" + a + " == " + b + " ? 0 : (" + a + " === null ? Number.POSITIVE_INFINITY : (" + b + " === null ? Number.NEGATIVE_INFINITY : (" + a + " < " + b + ") ? -1 : 1 )));";
        } else if (type == 'text' && direction == 'desc') {
          return "(" + a + " == " + b + " ? 0 : (" + a + " === null ? Number.POSITIVE_INFINITY : (" + b + " === null ? Number.NEGATIVE_INFINITY : (" + b + " < " + a + ") ? -1 : 1 )));";
        } else if (type == 'numeric' && direction == 'asc') {
          return "(" + a + " === null && " + b + " === null) ? 0 :(" + a + " === null ? Number.POSITIVE_INFINITY : (" + b + " === null ? Number.NEGATIVE_INFINITY : " + a + " - " + b + "));";
        } else if (type == 'numeric' && direction == 'desc') {
          return "(" + a + " === null && " + b + " === null) ? 0 :(" + a + " === null ? Number.POSITIVE_INFINITY : (" + b + " === null ? Number.NEGATIVE_INFINITY : " + b + " - " + a + "));";
        }
      }

      ;

      function makeSortText(i) {
        return "((a[" + i + "] < b[" + i + "]) ? -1 : ((a[" + i + "] > b[" + i + "]) ? 1 : 0));";
      }

      ;

      function makeSortTextDesc(i) {
        return "((b[" + i + "] < a[" + i + "]) ? -1 : ((b[" + i + "] > a[" + i + "]) ? 1 : 0));";
      }

      ;

      function makeSortNumeric(i) {
        return "a[" + i + "]-b[" + i + "];";
      }

      ;

      function makeSortNumericDesc(i) {
        return "b[" + i + "]-a[" + i + "];";
      }

      ;

      function sortText(a, b) {
        if (table.config.sortLocaleCompare) return a.localeCompare(b);
        return a < b ? -1 : a > b ? 1 : 0;
      }

      ;

      function sortTextDesc(a, b) {
        if (table.config.sortLocaleCompare) return b.localeCompare(a);
        return b < a ? -1 : b > a ? 1 : 0;
      }

      ;

      function sortNumeric(a, b) {
        return a - b;
      }

      ;

      function sortNumericDesc(a, b) {
        return b - a;
      }

      ;

      function getCachedSortType(parsers, i) {
        return parsers[i].type;
      }

      ;

      this.construct = function (settings) {
        return this.each(function () {
          if (!this.tHead || !this.tBodies) return;
          var $this,
              $document,
              $headers,
              cache,
              config,
              shiftDown = 0,
              sortOrder;
          this.config = {};
          config = $.extend(this.config, $.tablesorter.defaults, settings);
          $this = $(this);
          $.data(this, "tablesorter", config);
          $headers = buildHeaders(this);
          this.config.parsers = buildParserCache(this, $headers);
          cache = buildCache(this);
          var sortCSS = [config.cssDesc, config.cssAsc];
          fixColumnWidth(this);
          $headers.click(function (e) {
            var totalRows = $this[0].tBodies[0] && $this[0].tBodies[0].rows.length || 0;

            if (!this.sortDisabled && totalRows > 0) {
              $this.trigger("sortStart");
              var $cell = $(this);
              var i = this.column;
              this.order = this.count++ % 2;
              if (this.lockedOrder) this.order = this.lockedOrder;

              if (!e[config.sortMultiSortKey]) {
                config.sortList = [];

                if (config.sortForce != null) {
                  var a = config.sortForce;

                  for (var j = 0; j < a.length; j++) {
                    if (a[j][0] != i) {
                      config.sortList.push(a[j]);
                    }
                  }
                }

                config.sortList.push([i, this.order]);
              } else {
                if (isValueInArray(i, config.sortList)) {
                  for (var j = 0; j < config.sortList.length; j++) {
                    var s = config.sortList[j],
                        o = config.headerList[s[0]];

                    if (s[0] == i) {
                      o.count = s[1];
                      o.count++;
                      s[1] = o.count % 2;
                    }
                  }
                } else {
                  config.sortList.push([i, this.order]);
                }
              }

              ;
              setTimeout(function () {
                setHeadersCss($this[0], $headers, config.sortList, sortCSS);
                appendToTable($this[0], multisort($this[0], config.sortList, cache));
              }, 1);
              return false;
            }
          }).mousedown(function () {
            if (config.cancelSelection) {
              this.onselectstart = function () {
                return false;
              };

              return false;
            }
          });
          $this.bind("update", function () {
            var me = this;
            setTimeout(function () {
              me.config.parsers = buildParserCache(me, $headers);
              cache = buildCache(me);
            }, 1);
          }).bind("updateCell", function (e, cell) {
            var config = this.config;
            var pos = [cell.parentNode.rowIndex - 1, cell.cellIndex];
            cache.normalized[pos[0]][pos[1]] = config.parsers[pos[1]].format(getElementText(config, cell), cell);
          }).bind("sorton", function (e, list) {
            $(this).trigger("sortStart");
            config.sortList = list;
            var sortList = config.sortList;
            updateHeaderSortCount(this, sortList);
            setHeadersCss(this, $headers, sortList, sortCSS);
            appendToTable(this, multisort(this, sortList, cache));
          }).bind("appendCache", function () {
            appendToTable(this, cache);
          }).bind("applyWidgetId", function (e, id) {
            getWidgetById(id).format(this);
          }).bind("applyWidgets", function () {
            applyWidget(this);
          });

          if ($.metadata && $(this).metadata() && $(this).metadata().sortlist) {
            config.sortList = $(this).metadata().sortlist;
          }

          if (config.sortList.length > 0) {
            $this.trigger("sorton", [config.sortList]);
          }

          applyWidget(this);
        });
      };

      this.addParser = function (parser) {
        var l = parsers.length,
            a = true;

        for (var i = 0; i < l; i++) {
          if (parsers[i].id.toLowerCase() == parser.id.toLowerCase()) {
            a = false;
          }
        }

        if (a) {
          parsers.push(parser);
        }

        ;
      };

      this.addWidget = function (widget) {
        widgets.push(widget);
      };

      this.formatFloat = function (s) {
        var i = parseFloat(s);
        return isNaN(i) ? 0 : i;
      };

      this.formatInt = function (s) {
        var i = parseInt(s);
        return isNaN(i) ? 0 : i;
      };

      this.isDigit = function (s, config) {
        return /^[-+]?\d*$/.test($.trim(s.replace(/[,.']/g, '')));
      };

      this.clearTableBody = function (table) {
        if ($.browser.msie) {
          function empty() {
            while (this.firstChild) this.removeChild(this.firstChild);
          }

          empty.apply(table.tBodies[0]);
        } else {
          table.tBodies[0].innerHTML = "";
        }
      };
    }()
  });
  $.fn.extend({
    tablesorter: $.tablesorter.construct
  });
  var ts = $.tablesorter;
  ts.addParser({
    id: "text",
    is: function (s) {
      return true;
    },
    format: function (s) {
      return $.trim(s.toLocaleLowerCase());
    },
    type: "text"
  });
  ts.addParser({
    id: "digit",
    is: function (s, table) {
      var c = table.config;
      return $.tablesorter.isDigit(s, c);
    },
    format: function (s) {
      return $.tablesorter.formatFloat(s);
    },
    type: "numeric"
  });
  ts.addParser({
    id: "currency",
    is: function (s) {
      return /^[£$€?.]/.test(s);
    },
    format: function (s) {
      return $.tablesorter.formatFloat(s.replace(new RegExp(/[£$€]/g), ""));
    },
    type: "numeric"
  });
  ts.addParser({
    id: "ipAddress",
    is: function (s) {
      return /^\d{2,3}[\.]\d{2,3}[\.]\d{2,3}[\.]\d{2,3}$/.test(s);
    },
    format: function (s) {
      var a = s.split("."),
          r = "",
          l = a.length;

      for (var i = 0; i < l; i++) {
        var item = a[i];

        if (item.length == 2) {
          r += "0" + item;
        } else {
          r += item;
        }
      }

      return $.tablesorter.formatFloat(r);
    },
    type: "numeric"
  });
  ts.addParser({
    id: "url",
    is: function (s) {
      return /^(https?|ftp|file):\/\/$/.test(s);
    },
    format: function (s) {
      return jQuery.trim(s.replace(new RegExp(/(https?|ftp|file):\/\//), ''));
    },
    type: "text"
  });
  ts.addParser({
    id: "isoDate",
    is: function (s) {
      return /^\d{4}[\/-]\d{1,2}[\/-]\d{1,2}$/.test(s);
    },
    format: function (s) {
      return $.tablesorter.formatFloat(s != "" ? new Date(s.replace(new RegExp(/-/g), "/")).getTime() : "0");
    },
    type: "numeric"
  });
  ts.addParser({
    id: "percent",
    is: function (s) {
      return /\%$/.test($.trim(s));
    },
    format: function (s) {
      return $.tablesorter.formatFloat(s.replace(new RegExp(/%/g), ""));
    },
    type: "numeric"
  });
  ts.addParser({
    id: "usLongDate",
    is: function (s) {
      return s.match(new RegExp(/^[A-Za-z]{3,10}\.? [0-9]{1,2}, ([0-9]{4}|'?[0-9]{2}) (([0-2]?[0-9]:[0-5][0-9])|([0-1]?[0-9]:[0-5][0-9]\s(AM|PM)))$/));
    },
    format: function (s) {
      return $.tablesorter.formatFloat(new Date(s).getTime());
    },
    type: "numeric"
  });
  ts.addParser({
    id: "shortDate",
    is: function (s) {
      return /\d{1,2}[\/\-]\d{1,2}[\/\-]\d{2,4}/.test(s);
    },
    format: function (s, table) {
      var c = table.config;
      s = s.replace(/\-/g, "/");

      if (c.dateFormat == "us") {
        s = s.replace(/(\d{1,2})[\/\-](\d{1,2})[\/\-](\d{4})/, "$3/$1/$2");
      } else if (c.dateFormat == "uk") {
        s = s.replace(/(\d{1,2})[\/\-](\d{1,2})[\/\-](\d{4})/, "$3/$2/$1");
      } else if (c.dateFormat == "dd/mm/yy" || c.dateFormat == "dd-mm-yy") {
        s = s.replace(/(\d{1,2})[\/\-](\d{1,2})[\/\-](\d{2})/, "$1/$2/$3");
      }

      return $.tablesorter.formatFloat(new Date(s).getTime());
    },
    type: "numeric"
  });
  ts.addParser({
    id: "time",
    is: function (s) {
      return /^(([0-2]?[0-9]:[0-5][0-9])|([0-1]?[0-9]:[0-5][0-9]\s(am|pm)))$/.test(s);
    },
    format: function (s) {
      return $.tablesorter.formatFloat(new Date("2000/01/01 " + s).getTime());
    },
    type: "numeric"
  });
  ts.addParser({
    id: "metadata",
    is: function (s) {
      return false;
    },
    format: function (s, table, cell) {
      var c = table.config,
          p = !c.parserMetadataName ? 'sortValue' : c.parserMetadataName;
      return $(cell).metadata()[p];
    },
    type: "numeric"
  });
  ts.addWidget({
    id: "zebra",
    format: function (table) {
      if (table.config.debug) {
        var time = new Date();
      }

      var $tr,
          row = -1,
          odd;
      $("tr:visible", table.tBodies[0]).each(function (i) {
        $tr = $(this);
        if (!$tr.hasClass(table.config.cssChildRow)) row++;
        odd = row % 2 == 0;
        $tr.removeClass(table.config.widgetZebra.css[odd ? 0 : 1]).addClass(table.config.widgetZebra.css[odd ? 1 : 0]);
      });

      if (table.config.debug) {
        $.tablesorter.benchmark("Applying Zebra widget", time);
      }
    }
  });
})(jQuery);
/*
 * Inline Form Validation Engine 2.6.2, jQuery plugin
 *
 * Copyright(c) 2010, Cedric Dugas
 * http://www.position-absolute.com
 *
 * 2.0 Rewrite by Olivier Refalo
 * http://www.crionics.com
 *
 * Form validation engine allowing custom regex rules to be added.
 * Licensed under the MIT License
 */
(function ($) {
  "use strict";

  var methods = {
    /**
     * Kind of the constructor, called before any action
     * @param {Map} user options
     */
    init: function (options) {
      var form = this;

      if (!form.data('jqv') || form.data('jqv') == null) {
        options = methods._saveOptions(form, options); // bind all formError elements to close on click

        $(document).on("click", ".formError", function () {
          $(this).fadeOut(150, function () {
            // remove prompt once invisible
            $(this).parent('.formErrorOuter').remove();
            $(this).remove();
          });
        });
      }

      return this;
    },

    /**
     * Attachs jQuery.validationEngine to form.submit and field.blur events
     * Takes an optional params: a list of options
     * ie. jQuery("#formID1").validationEngine('attach', {promptPosition : "centerRight"});
     */
    attach: function (userOptions) {
      var form = this;
      var options;
      if (userOptions) options = methods._saveOptions(form, userOptions);else options = form.data('jqv');
      options.validateAttribute = form.find("[data-validation-engine*=validate]").length ? "data-validation-engine" : "class";

      if (options.binded) {
        // delegate fields
        form.on(options.validationEventTrigger, "[" + options.validateAttribute + "*=validate]:not([type=checkbox]):not([type=radio]):not(.datepicker)", methods._onFieldEvent);
        form.on("click", "[" + options.validateAttribute + "*=validate][type=checkbox],[" + options.validateAttribute + "*=validate][type=radio]", methods._onFieldEvent);
        form.on(options.validationEventTrigger, "[" + options.validateAttribute + "*=validate][class*=datepicker]", {
          "delay": 300
        }, methods._onFieldEvent);
      }

      if (options.autoPositionUpdate) {
        $(window).bind("resize", {
          "noAnimation": true,
          "formElem": form
        }, methods.updatePromptsPosition);
      }

      form.on("click", "a[data-validation-engine-skip], a[class*='validate-skip'], button[data-validation-engine-skip], button[class*='validate-skip'], input[data-validation-engine-skip], input[class*='validate-skip']", methods._submitButtonClick);
      form.removeData('jqv_submitButton'); // bind form.submit

      form.on("submit", methods._onSubmitEvent);
      return this;
    },

    /**
     * Unregisters any bindings that may point to jQuery.validaitonEngine
     */
    detach: function () {
      var form = this;
      var options = form.data('jqv'); // unbind fields

      form.find("[" + options.validateAttribute + "*=validate]").not("[type=checkbox]").off(options.validationEventTrigger, methods._onFieldEvent);
      form.find("[" + options.validateAttribute + "*=validate][type=checkbox],[class*=validate][type=radio]").off("click", methods._onFieldEvent); // unbind form.submit

      form.off("submit", methods._onSubmitEvent);
      form.removeData('jqv');
      form.off("click", "a[data-validation-engine-skip], a[class*='validate-skip'], button[data-validation-engine-skip], button[class*='validate-skip'], input[data-validation-engine-skip], input[class*='validate-skip']", methods._submitButtonClick);
      form.removeData('jqv_submitButton');
      if (options.autoPositionUpdate) $(window).off("resize", methods.updatePromptsPosition);
      return this;
    },

    /**
     * Validates either a form or a list of fields, shows prompts accordingly.
     * Note: There is no ajax form validation with this method, only field ajax validation are evaluated
     *
     * @return true if the form validates, false if it fails
     */
    validate: function () {
      var element = $(this);
      var valid = null;

      if (element.is("form") || element.hasClass("validationEngineContainer")) {
        if (element.hasClass('validating')) {
          // form is already validating.
          // Should abort old validation and start new one. I don't know how to implement it.
          return false;
        } else {
          element.addClass('validating');
          var options = element.data('jqv');

          var valid = methods._validateFields(this); // If the form doesn't validate, clear the 'validating' class before the user has a chance to submit again


          setTimeout(function () {
            element.removeClass('validating');
          }, 100);

          if (valid && options.onSuccess) {
            options.onSuccess();
          } else if (!valid && options.onFailure) {
            options.onFailure();
          }
        }
      } else if (element.is('form') || element.hasClass('validationEngineContainer')) {
        element.removeClass('validating');
      } else {
        // field validation
        var form = element.closest('form, .validationEngineContainer'),
            options = form.data('jqv') ? form.data('jqv') : $.validationEngine.defaults,
            valid = methods._validateField(element, options);

        if (valid && options.onFieldSuccess) options.onFieldSuccess();else if (options.onFieldFailure && options.InvalidFields.length > 0) {
          options.onFieldFailure();
        }
      }

      if (options.onValidationComplete) {
        // !! ensures that an undefined return is interpreted as return false but allows a onValidationComplete() to possibly return true and have form continue processing
        return !!options.onValidationComplete(form, valid);
      }

      return valid;
    },

    /**
     *  Redraw prompts position, useful when you change the DOM state when validating
     */
    updatePromptsPosition: function (event) {
      if (event && this == window) {
        var form = event.data.formElem;
        var noAnimation = event.data.noAnimation;
      } else var form = $(this.closest('form, .validationEngineContainer'));

      var options = form.data('jqv'); // No option, take default one

      form.find('[' + options.validateAttribute + '*=validate]').not(":disabled").each(function () {
        var field = $(this);
        if (options.prettySelect && field.is(":hidden")) field = form.find("#" + options.usePrefix + field.attr('id') + options.useSuffix);

        var prompt = methods._getPrompt(field);

        var promptText = $(prompt).find(".formErrorContent").html();
        if (prompt) methods._updatePrompt(field, $(prompt), promptText, undefined, false, options, noAnimation);
      });
      return this;
    },

    /**
     * Displays a prompt on a element.
     * Note that the element needs an id!
     *
     * @param {String} promptText html text to display type
     * @param {String} type the type of bubble: 'pass' (green), 'load' (black) anything else (red)
     * @param {String} possible values topLeft, topRight, bottomLeft, centerRight, bottomRight
     */
    showPrompt: function (promptText, type, promptPosition, showArrow) {
      var form = this.closest('form, .validationEngineContainer');
      var options = form.data('jqv'); // No option, take default one

      if (!options) options = methods._saveOptions(this, options);
      if (promptPosition) options.promptPosition = promptPosition;
      options.showArrow = showArrow == true;

      methods._showPrompt(this, promptText, type, false, options);

      return this;
    },

    /**
     * Closes form error prompts, CAN be invidual
     */
    hide: function () {
      var form = $(this).closest('form, .validationEngineContainer');
      var options = form.data('jqv');
      var fadeDuration = options && options.fadeDuration ? options.fadeDuration : 0.3;
      var closingtag;

      if ($(this).is("form") || $(this).hasClass("validationEngineContainer")) {
        closingtag = "parentForm" + methods._getClassName($(this).attr("id"));
      } else {
        closingtag = methods._getClassName($(this).attr("id")) + "formError";
      }

      $('.' + closingtag).fadeTo(fadeDuration, 0.3, function () {
        $(this).parent('.formErrorOuter').remove();
        $(this).remove();
      });
      return this;
    },

    /**
     * Closes all error prompts on the page
     */
    hideAll: function () {
      var form = this;
      var options = form.data('jqv');
      var duration = options ? options.fadeDuration : 300;
      $('.formError').fadeTo(duration, 300, function () {
        $(this).parent('.formErrorOuter').remove();
        $(this).remove();
      });
      return this;
    },

    /**
     * Typically called when user exists a field using tab or a mouse click, triggers a field
     * validation
     */
    _onFieldEvent: function (event) {
      var field = $(this);
      var form = field.closest('form, .validationEngineContainer');
      var options = form.data('jqv');
      options.eventTrigger = "field"; // validate the current field

      window.setTimeout(function () {
        methods._validateField(field, options);

        if (options.InvalidFields.length == 0 && options.onFieldSuccess) {
          options.onFieldSuccess();
        } else if (options.InvalidFields.length > 0 && options.onFieldFailure) {
          options.onFieldFailure();
        }
      }, event.data ? event.data.delay : 0);
    },

    /**
     * Called when the form is submited, shows prompts accordingly
     *
     * @param {jqObject}
     *            form
     * @return false if form submission needs to be cancelled
     */
    _onSubmitEvent: function () {
      var form = $(this);
      var options = form.data('jqv'); //check if it is trigger from skipped button

      if (form.data("jqv_submitButton")) {
        var submitButton = $("#" + form.data("jqv_submitButton"));

        if (submitButton) {
          if (submitButton.length > 0) {
            if (submitButton.hasClass("validate-skip") || submitButton.attr("data-validation-engine-skip") == "true") return true;
          }
        }
      }

      options.eventTrigger = "submit"; // validate each field
      // (- skip field ajax validation, not necessary IF we will perform an ajax form validation)

      var r = methods._validateFields(form);

      if (r && options.ajaxFormValidation) {
        methods._validateFormWithAjax(form, options); // cancel form auto-submission - process with async call onAjaxFormComplete


        return false;
      }

      if (options.onValidationComplete) {
        // !! ensures that an undefined return is interpreted as return false but allows a onValidationComplete() to possibly return true and have form continue processing
        return !!options.onValidationComplete(form, r);
      }

      return r;
    },

    /**
     * Return true if the ajax field validations passed so far
     * @param {Object} options
     * @return true, is all ajax validation passed so far (remember ajax is async)
     */
    _checkAjaxStatus: function (options) {
      var status = true;
      $.each(options.ajaxValidCache, function (key, value) {
        if (!value) {
          status = false; // break the each

          return false;
        }
      });
      return status;
    },

    /**
     * Return true if the ajax field is validated
     * @param {String} fieldid
     * @param {Object} options
     * @return true, if validation passed, false if false or doesn't exist
     */
    _checkAjaxFieldStatus: function (fieldid, options) {
      return options.ajaxValidCache[fieldid] == true;
    },

    /**
     * Validates form fields, shows prompts accordingly
     *
     * @param {jqObject}
     *            form
     * @param {skipAjaxFieldValidation}
     *            boolean - when set to true, ajax field validation is skipped, typically used when the submit button is clicked
     *
     * @return true if form is valid, false if not, undefined if ajax form validation is done
     */
    _validateFields: function (form) {
      var options = form.data('jqv'); // this variable is set to true if an error is found

      var errorFound = false; // Trigger hook, start validation

      form.trigger("jqv.form.validating"); // first, evaluate status of non ajax fields

      var first_err = null;
      form.find('[' + options.validateAttribute + '*=validate]').not(":disabled").each(function () {
        var field = $(this);
        var names = [];

        if ($.inArray(field.attr('name'), names) < 0) {
          errorFound |= methods._validateField(field, options);
          if (errorFound && first_err == null) if (field.is(":hidden") && options.prettySelect) first_err = field = form.find("#" + options.usePrefix + methods._jqSelector(field.attr('id')) + options.useSuffix);else {
            //Check if we need to adjust what element to show the prompt on
            //and and such scroll to instead
            if (field.data('jqv-prompt-at') instanceof jQuery) {
              field = field.data('jqv-prompt-at');
            } else if (field.data('jqv-prompt-at')) {
              field = $(field.data('jqv-prompt-at'));
            }

            first_err = field;
          }
          if (options.doNotShowAllErrosOnSubmit) return false;
          names.push(field.attr('name')); //if option set, stop checking validation rules after one error is found

          if (options.showOneMessage == true && errorFound) {
            return false;
          }
        }
      }); // second, check to see if all ajax calls completed ok
      // errorFound |= !methods._checkAjaxStatus(options);
      // third, check status and scroll the container accordingly

      form.trigger("jqv.form.result", [errorFound]);

      if (errorFound) {
        if (options.scroll) {
          var destination = first_err.offset().top;
          var fixleft = first_err.offset().left; //prompt positioning adjustment support. Usage: positionType:Xshift,Yshift (for ex.: bottomLeft:+20 or bottomLeft:-20,+10)

          var positionType = options.promptPosition;
          if (typeof positionType == 'string' && positionType.indexOf(":") != -1) positionType = positionType.substring(0, positionType.indexOf(":"));

          if (positionType != "bottomRight" && positionType != "bottomLeft") {
            var prompt_err = methods._getPrompt(first_err);

            if (prompt_err) {
              destination = prompt_err.offset().top;
            }
          } // Offset the amount the page scrolls by an amount in px to accomodate fixed elements at top of page


          if (options.scrollOffset) {
            destination -= options.scrollOffset;
          } // get the position of the first error, there should be at least one, no need to check this
          //var destination = form.find(".formError:not('.greenPopup'):first").offset().top;


          if (options.isOverflown) {
            var overflowDIV = $(options.overflownDIV);
            if (!overflowDIV.length) return false;
            var scrollContainerScroll = overflowDIV.scrollTop();
            var scrollContainerPos = -parseInt(overflowDIV.offset().top);
            destination += scrollContainerScroll + scrollContainerPos - 5;
            var scrollContainer = $(options.overflownDIV + ":not(:animated)");
            scrollContainer.animate({
              scrollTop: destination
            }, 1100, function () {
              if (options.focusFirstField) first_err.focus();
            });
          } else {
            $("html, body").animate({
              scrollTop: destination
            }, 1100, function () {
              if (options.focusFirstField) first_err.focus();
            });
            $("html, body").animate({
              scrollLeft: fixleft
            }, 1100);
          }
        } else if (options.focusFirstField) first_err.focus();

        return false;
      }

      return true;
    },

    /**
     * This method is called to perform an ajax form validation.
     * During this process all the (field, value) pairs are sent to the server which returns a list of invalid fields or true
     *
     * @param {jqObject} form
     * @param {Map} options
     */
    _validateFormWithAjax: function (form, options) {
      var data = form.serialize();
      var type = options.ajaxFormValidationMethod ? options.ajaxFormValidationMethod : "GET";
      var url = options.ajaxFormValidationURL ? options.ajaxFormValidationURL : form.attr("action");
      var dataType = options.dataType ? options.dataType : "json";
      $.ajax({
        type: type,
        url: url,
        cache: false,
        dataType: dataType,
        data: data,
        form: form,
        methods: methods,
        options: options,
        beforeSend: function () {
          return options.onBeforeAjaxFormValidation(form, options);
        },
        error: function (data, transport) {
          methods._ajaxError(data, transport);
        },
        success: function (json) {
          if (dataType == "json" && json !== true) {
            // getting to this case doesn't necessary means that the form is invalid
            // the server may return green or closing prompt actions
            // this flag helps figuring it out
            var errorInForm = false;

            for (var i = 0; i < json.length; i++) {
              var value = json[i];
              var errorFieldId = value[0];
              var errorField = $($("#" + errorFieldId)[0]); // make sure we found the element

              if (errorField.length == 1) {
                // promptText or selector
                var msg = value[2]; // if the field is valid

                if (value[1] == true) {
                  if (msg == "" || !msg) {
                    // if for some reason, status==true and error="", just close the prompt
                    methods._closePrompt(errorField);
                  } else {
                    // the field is valid, but we are displaying a green prompt
                    if (options.allrules[msg]) {
                      var txt = options.allrules[msg].alertTextOk;
                      if (txt) msg = txt;
                    }

                    if (options.showPrompts) methods._showPrompt(errorField, msg, "pass", false, options, true);
                  }
                } else {
                  // the field is invalid, show the red error prompt
                  errorInForm |= true;

                  if (options.allrules[msg]) {
                    var txt = options.allrules[msg].alertText;
                    if (txt) msg = txt;
                  }

                  if (options.showPrompts) methods._showPrompt(errorField, msg, "", false, options, true);
                }
              }
            }

            options.onAjaxFormComplete(!errorInForm, form, json, options);
          } else options.onAjaxFormComplete(true, form, json, options);
        }
      });
    },

    /**
     * Validates field, shows prompts accordingly
     *
     * @param {jqObject}
     *            field
     * @param {Array[String]}
     *            field's validation rules
     * @param {Map}
     *            user options
     * @return false if field is valid (It is inversed for *fields*, it return false on validate and true on errors.)
     */
    _validateField: function (field, options, skipAjaxValidation) {
      if (!field.attr("id")) {
        field.attr("id", "form-validation-field-" + $.validationEngine.fieldIdCounter);
        ++$.validationEngine.fieldIdCounter;
      }

      if (!options.validateNonVisibleFields && (field.is(":hidden") && !options.prettySelect || field.parent().is(":hidden"))) return false;
      var rulesParsing = field.attr(options.validateAttribute);
      var getRules = /validate\[(.*)\]/.exec(rulesParsing);
      if (!getRules) return false;
      var str = getRules[1];
      var rules = str.split(/\[|,|\]/); // true if we ran the ajax validation, tells the logic to stop messing with prompts

      var isAjaxValidator = false;
      var fieldName = field.attr("name");
      var promptText = "";
      var promptType = "";
      var required = false;
      var limitErrors = false;
      options.isError = false;
      options.showArrow = true; // If the programmer wants to limit the amount of error messages per field,

      if (options.maxErrorsPerField > 0) {
        limitErrors = true;
      }

      var form = $(field.closest("form, .validationEngineContainer")); // Fix for adding spaces in the rules

      for (var i = 0; i < rules.length; i++) {
        rules[i] = rules[i].replace(" ", ""); // Remove any parsing errors

        if (rules[i] === '') {
          delete rules[i];
        }
      }

      for (var i = 0, field_errors = 0; i < rules.length; i++) {
        // If we are limiting errors, and have hit the max, break
        if (limitErrors && field_errors >= options.maxErrorsPerField) {
          // If we haven't hit a required yet, check to see if there is one in the validation rules for this
          // field and that it's index is greater or equal to our current index
          if (!required) {
            var have_required = $.inArray('required', rules);
            required = have_required != -1 && have_required >= i;
          }

          break;
        }

        var errorMsg = undefined;

        switch (rules[i]) {
          case "required":
            required = true;
            errorMsg = methods._getErrorMessage(form, field, rules[i], rules, i, options, methods._required);
            break;

          case "custom":
            errorMsg = methods._getErrorMessage(form, field, rules[i], rules, i, options, methods._custom);
            break;

          case "groupRequired":
            // Check is its the first of group, if not, reload validation with first field
            // AND continue normal validation on present field
            var classGroup = "[" + options.validateAttribute + "*=" + rules[i + 1] + "]";
            var firstOfGroup = form.find(classGroup).eq(0);

            if (firstOfGroup[0] != field[0]) {
              methods._validateField(firstOfGroup, options, skipAjaxValidation);

              options.showArrow = true;
            }

            errorMsg = methods._getErrorMessage(form, field, rules[i], rules, i, options, methods._groupRequired);
            if (errorMsg) required = true;
            options.showArrow = false;
            break;

          case "ajax":
            // AJAX defaults to returning it's loading message
            errorMsg = methods._ajax(field, rules, i, options);

            if (errorMsg) {
              promptType = "load";
            }

            break;

          case "minSize":
            errorMsg = methods._getErrorMessage(form, field, rules[i], rules, i, options, methods._minSize);
            break;

          case "maxSize":
            errorMsg = methods._getErrorMessage(form, field, rules[i], rules, i, options, methods._maxSize);
            break;

          case "min":
            errorMsg = methods._getErrorMessage(form, field, rules[i], rules, i, options, methods._min);
            break;

          case "max":
            errorMsg = methods._getErrorMessage(form, field, rules[i], rules, i, options, methods._max);
            break;

          case "past":
            errorMsg = methods._getErrorMessage(form, field, rules[i], rules, i, options, methods._past);
            break;

          case "future":
            errorMsg = methods._getErrorMessage(form, field, rules[i], rules, i, options, methods._future);
            break;

          case "dateRange":
            var classGroup = "[" + options.validateAttribute + "*=" + rules[i + 1] + "]";
            options.firstOfGroup = form.find(classGroup).eq(0);
            options.secondOfGroup = form.find(classGroup).eq(1); //if one entry out of the pair has value then proceed to run through validation

            if (options.firstOfGroup[0].value || options.secondOfGroup[0].value) {
              errorMsg = methods._getErrorMessage(form, field, rules[i], rules, i, options, methods._dateRange);
            }

            if (errorMsg) required = true;
            options.showArrow = false;
            break;

          case "dateTimeRange":
            var classGroup = "[" + options.validateAttribute + "*=" + rules[i + 1] + "]";
            options.firstOfGroup = form.find(classGroup).eq(0);
            options.secondOfGroup = form.find(classGroup).eq(1); //if one entry out of the pair has value then proceed to run through validation

            if (options.firstOfGroup[0].value || options.secondOfGroup[0].value) {
              errorMsg = methods._getErrorMessage(form, field, rules[i], rules, i, options, methods._dateTimeRange);
            }

            if (errorMsg) required = true;
            options.showArrow = false;
            break;

          case "maxCheckbox":
            field = $(form.find("input[name='" + fieldName + "']"));
            errorMsg = methods._getErrorMessage(form, field, rules[i], rules, i, options, methods._maxCheckbox);
            break;

          case "minCheckbox":
            field = $(form.find("input[name='" + fieldName + "']"));
            errorMsg = methods._getErrorMessage(form, field, rules[i], rules, i, options, methods._minCheckbox);
            break;

          case "equals":
            errorMsg = methods._getErrorMessage(form, field, rules[i], rules, i, options, methods._equals);
            break;

          case "funcCall":
            errorMsg = methods._getErrorMessage(form, field, rules[i], rules, i, options, methods._funcCall);
            break;

          case "creditCard":
            errorMsg = methods._getErrorMessage(form, field, rules[i], rules, i, options, methods._creditCard);
            break;

          case "condRequired":
            errorMsg = methods._getErrorMessage(form, field, rules[i], rules, i, options, methods._condRequired);

            if (errorMsg !== undefined) {
              required = true;
            }

            break;

          default:
        }

        var end_validation = false; // If we were passed back an message object, check what the status was to determine what to do

        if (typeof errorMsg == "object") {
          switch (errorMsg.status) {
            case "_break":
              end_validation = true;
              break;
            // If we have an error message, set errorMsg to the error message

            case "_error":
              errorMsg = errorMsg.message;
              break;
            // If we want to throw an error, but not show a prompt, return early with true

            case "_error_no_prompt":
              return true;
              break;
            // Anything else we continue on

            default:
              break;
          }
        } // If it has been specified that validation should end now, break


        if (end_validation) {
          break;
        } // If we have a string, that means that we have an error, so add it to the error message.


        if (typeof errorMsg == 'string') {
          promptText += errorMsg + "<br/>";
          options.isError = true;
          field_errors++;
        }
      } // If the rules required is not added, an empty field is not validated


      if (!required && !field.val() && field.val().length < 1) options.isError = false; // Hack for radio/checkbox group button, the validation go into the
      // first radio/checkbox of the group

      var fieldType = field.prop("type");
      var positionType = field.data("promptPosition") || options.promptPosition;

      if ((fieldType == "radio" || fieldType == "checkbox") && form.find("input[name='" + fieldName + "']").size() > 1) {
        if (positionType === 'inline') {
          field = $(form.find("input[name='" + fieldName + "'][type!=hidden]:last"));
        } else {
          field = $(form.find("input[name='" + fieldName + "'][type!=hidden]:first"));
        }

        options.showArrow = false;
      }

      if (field.is(":hidden") && options.prettySelect) {
        field = form.find("#" + options.usePrefix + methods._jqSelector(field.attr('id')) + options.useSuffix);
      }

      if (options.isError && options.showPrompts) {
        methods._showPrompt(field, promptText, promptType, false, options);
      } else {
        if (!isAjaxValidator) methods._closePrompt(field);
      }

      if (!isAjaxValidator) {
        field.trigger("jqv.field.result", [field, options.isError, promptText]);
      }
      /* Record error */


      var errindex = $.inArray(field[0], options.InvalidFields);

      if (errindex == -1) {
        if (options.isError) options.InvalidFields.push(field[0]);
      } else if (!options.isError) {
        options.InvalidFields.splice(errindex, 1);
      }

      methods._handleStatusCssClasses(field, options);
      /* run callback function for each field */


      if (options.isError && options.onFieldFailure) options.onFieldFailure(field);
      if (!options.isError && options.onFieldSuccess) options.onFieldSuccess(field);
      return options.isError;
    },

    /**
     * Handling css classes of fields indicating result of validation
     *
     * @param {jqObject}
     *            field
     * @param {Array[String]}
     *            field's validation rules
     * @private
     */
    _handleStatusCssClasses: function (field, options) {
      /* remove all classes */
      if (options.addSuccessCssClassToField) field.removeClass(options.addSuccessCssClassToField);
      if (options.addFailureCssClassToField) field.removeClass(options.addFailureCssClassToField);
      /* Add classes */

      if (options.addSuccessCssClassToField && !options.isError) field.addClass(options.addSuccessCssClassToField);
      if (options.addFailureCssClassToField && options.isError) field.addClass(options.addFailureCssClassToField);
    },

    /********************
     * _getErrorMessage
     *
     * @param form
     * @param field
     * @param rule
     * @param rules
     * @param i
     * @param options
     * @param originalValidationMethod
     * @return {*}
     * @private
     */
    _getErrorMessage: function (form, field, rule, rules, i, options, originalValidationMethod) {
      // If we are using the custon validation type, build the index for the rule.
      // Otherwise if we are doing a function call, make the call and return the object
      // that is passed back.
      var rule_index = jQuery.inArray(rule, rules);

      if (rule === "custom" || rule === "funcCall") {
        var custom_validation_type = rules[rule_index + 1];
        rule = rule + "[" + custom_validation_type + "]"; // Delete the rule from the rules array so that it doesn't try to call the
        // same rule over again

        delete rules[rule_index];
      } // Change the rule to the composite rule, if it was different from the original


      var alteredRule = rule;
      var element_classes = field.attr("data-validation-engine") ? field.attr("data-validation-engine") : field.attr("class");
      var element_classes_array = element_classes.split(" "); // Call the original validation method. If we are dealing with dates or checkboxes, also pass the form

      var errorMsg;

      if (rule == "future" || rule == "past" || rule == "maxCheckbox" || rule == "minCheckbox") {
        errorMsg = originalValidationMethod(form, field, rules, i, options);
      } else {
        errorMsg = originalValidationMethod(field, rules, i, options);
      } // If the original validation method returned an error and we have a custom error message,
      // return the custom message instead. Otherwise return the original error message.


      if (errorMsg != undefined) {
        var custom_message = methods._getCustomErrorMessage($(field), element_classes_array, alteredRule, options);

        if (custom_message) errorMsg = custom_message;
      }

      return errorMsg;
    },
    _getCustomErrorMessage: function (field, classes, rule, options) {
      var custom_message = false;
      var validityProp = /^custom\[.*\]$/.test(rule) ? methods._validityProp["custom"] : methods._validityProp[rule]; // If there is a validityProp for this rule, check to see if the field has an attribute for it

      if (validityProp != undefined) {
        custom_message = field.attr("data-errormessage-" + validityProp); // If there was an error message for it, return the message

        if (custom_message != undefined) return custom_message;
      }

      custom_message = field.attr("data-errormessage"); // If there is an inline custom error message, return it

      if (custom_message != undefined) return custom_message;
      var id = '#' + field.attr("id"); // If we have custom messages for the element's id, get the message for the rule from the id.
      // Otherwise, if we have custom messages for the element's classes, use the first class message we find instead.

      if (typeof options.custom_error_messages[id] != "undefined" && typeof options.custom_error_messages[id][rule] != "undefined") {
        custom_message = options.custom_error_messages[id][rule]['message'];
      } else if (classes.length > 0) {
        for (var i = 0; i < classes.length && classes.length > 0; i++) {
          var element_class = "." + classes[i];

          if (typeof options.custom_error_messages[element_class] != "undefined" && typeof options.custom_error_messages[element_class][rule] != "undefined") {
            custom_message = options.custom_error_messages[element_class][rule]['message'];
            break;
          }
        }
      }

      if (!custom_message && typeof options.custom_error_messages[rule] != "undefined" && typeof options.custom_error_messages[rule]['message'] != "undefined") {
        custom_message = options.custom_error_messages[rule]['message'];
      }

      return custom_message;
    },
    _validityProp: {
      "required": "value-missing",
      "custom": "custom-error",
      "groupRequired": "value-missing",
      "ajax": "custom-error",
      "minSize": "range-underflow",
      "maxSize": "range-overflow",
      "min": "range-underflow",
      "max": "range-overflow",
      "past": "type-mismatch",
      "future": "type-mismatch",
      "dateRange": "type-mismatch",
      "dateTimeRange": "type-mismatch",
      "maxCheckbox": "range-overflow",
      "minCheckbox": "range-underflow",
      "equals": "pattern-mismatch",
      "funcCall": "custom-error",
      "creditCard": "pattern-mismatch",
      "condRequired": "value-missing"
    },

    /**
     * Required validation
     *
     * @param {jqObject} field
     * @param {Array[String]} rules
     * @param {int} i rules index
     * @param {Map}
     *            user options
     * @param {bool} condRequired flag when method is used for internal purpose in condRequired check
     * @return an error string if validation failed
     */
    _required: function (field, rules, i, options, condRequired) {
      switch (field.prop("type")) {
        case "text":
        case "password":
        case "textarea":
        case "file":
        case "select-one":
        case "select-multiple":
        default:
          var field_val = $.trim(field.val());
          var dv_placeholder = $.trim(field.attr("data-validation-placeholder")); //var placeholder    = $.trim( field.attr("placeholder")                 );

          if (!field_val || dv_placeholder && field_val == dv_placeholder //|| ( placeholder    && field_val == placeholder    )
          ) {
            return options.allrules[rules[i]].alertText;
          }

          break;

        case "radio":
        case "checkbox":
          // new validation style to only check dependent field
          if (condRequired) {
            if (!field.attr('checked')) {
              return options.allrules[rules[i]].alertTextCheckboxMultiple;
            }

            break;
          } // old validation style


          var form = field.closest("form, .validationEngineContainer");
          var name = field.attr("name");

          if (form.find("input[name='" + name + "']:checked").size() == 0) {
            if (form.find("input[name='" + name + "']:visible").size() == 1) return options.allrules[rules[i]].alertTextCheckboxe;else return options.allrules[rules[i]].alertTextCheckboxMultiple;
          }

          break;
      }
    },

    /**
     * Validate that 1 from the group field is required
     *
     * @param {jqObject} field
     * @param {Array[String]} rules
     * @param {int} i rules index
     * @param {Map}
     *            user options
     * @return an error string if validation failed
     */
    _groupRequired: function (field, rules, i, options) {
      var classGroup = "[" + options.validateAttribute + "*=" + rules[i + 1] + "]";
      var isValid = false; // Check all fields from the group

      field.closest("form, .validationEngineContainer").find(classGroup).each(function () {
        if (!methods._required($(this), rules, i, options)) {
          isValid = true;
          return false;
        }
      });

      if (!isValid) {
        return options.allrules[rules[i]].alertText;
      }
    },

    /**
     * Validate rules
     *
     * @param {jqObject} field
     * @param {Array[String]} rules
     * @param {int} i rules index
     * @param {Map}
     *            user options
     * @return an error string if validation failed
     */
    _custom: function (field, rules, i, options) {
      var customRule = rules[i + 1];
      var rule = options.allrules[customRule];
      var fn;

      if (!rule) {
        alert("jqv:custom rule not found - " + customRule);
        return;
      }

      if (rule["regex"]) {
        var ex = rule.regex;

        if (!ex) {
          alert("jqv:custom regex not found - " + customRule);
          return;
        }

        var pattern = new RegExp(ex);
        if (!pattern.test(field.val())) return options.allrules[customRule].alertText;
      } else if (rule["func"]) {
        fn = rule["func"];

        if (typeof fn !== "function") {
          alert("jqv:custom parameter 'function' is no function - " + customRule);
          return;
        }

        if (!fn(field, rules, i, options)) return options.allrules[customRule].alertText;
      } else {
        alert("jqv:custom type not allowed " + customRule);
        return;
      }
    },

    /**
     * Validate custom function outside of the engine scope
     *
     * @param {jqObject} field
     * @param {Array[String]} rules
     * @param {int} i rules index
     * @param {Map}
     *            user options
     * @return an error string if validation failed
     */
    _funcCall: function (field, rules, i, options) {
      var functionName = rules[i + 1];
      var fn;

      if (functionName.indexOf('.') > -1) {
        var namespaces = functionName.split('.');
        var scope = window;

        while (namespaces.length) {
          scope = scope[namespaces.shift()];
        }

        fn = scope;
      } else fn = window[functionName] || options.customFunctions[functionName];

      if (typeof fn == 'function') return fn(field, rules, i, options);
    },

    /**
     * Field match
     *
     * @param {jqObject} field
     * @param {Array[String]} rules
     * @param {int} i rules index
     * @param {Map}
     *            user options
     * @return an error string if validation failed
     */
    _equals: function (field, rules, i, options) {
      var equalsField = rules[i + 1];
      if (field.val() != $("#" + equalsField).val()) return options.allrules.equals.alertText;
    },

    /**
     * Check the maximum size (in characters)
     *
     * @param {jqObject} field
     * @param {Array[String]} rules
     * @param {int} i rules index
     * @param {Map}
     *            user options
     * @return an error string if validation failed
     */
    _maxSize: function (field, rules, i, options) {
      var max = rules[i + 1];
      var len = field.val().length;

      if (len > max) {
        var rule = options.allrules.maxSize;

        if (typeof rule.alertText2 == 'string') {
          return rule.alertText + min + rule.alertText2;
        } else {
          return rule.alertText;
        }
      }
    },

    /**
     * Check the minimum size (in characters)
     *
     * @param {jqObject} field
     * @param {Array[String]} rules
     * @param {int} i rules index
     * @param {Map}
     *            user options
     * @return an error string if validation failed
     */
    _minSize: function (field, rules, i, options) {
      var min = rules[i + 1];
      var len = field.val().length;

      if (len < min) {
        var rule = options.allrules.minSize;

        if (typeof rule.alertText2 == 'string') {
          return rule.alertText + min + rule.alertText2;
        } else {
          return rule.alertText;
        }
      }
    },

    /**
     * Check number minimum value
     *
     * @param {jqObject} field
     * @param {Array[String]} rules
     * @param {int} i rules index
     * @param {Map}
     *            user options
     * @return an error string if validation failed
     */
    _min: function (field, rules, i, options) {
      var min = parseFloat(rules[i + 1]);
      var len = parseFloat(field.val());

      if (len < min) {
        var rule = options.allrules.min;
        if (rule.alertText2) return rule.alertText + min + rule.alertText2;
        return rule.alertText + min;
      }
    },

    /**
     * Check number maximum value
     *
     * @param {jqObject} field
     * @param {Array[String]} rules
     * @param {int} i rules index
     * @param {Map}
     *            user options
     * @return an error string if validation failed
     */
    _max: function (field, rules, i, options) {
      var max = parseFloat(rules[i + 1]);
      var len = parseFloat(field.val());

      if (len > max) {
        var rule = options.allrules.max;
        if (rule.alertText2) return rule.alertText + max + rule.alertText2; //orefalo: to review, also do the translations

        return rule.alertText + max;
      }
    },

    /**
     * Checks date is in the past
     *
     * @param {jqObject} field
     * @param {Array[String]} rules
     * @param {int} i rules index
     * @param {Map}
     *            user options
     * @return an error string if validation failed
     */
    _past: function (form, field, rules, i, options) {
      var p = rules[i + 1];
      var fieldAlt = $(form.find("input[name='" + p.replace(/^#+/, '') + "']"));
      var pdate;

      if (p.toLowerCase() == "now") {
        pdate = new Date();
      } else if (undefined != fieldAlt.val()) {
        if (fieldAlt.is(":disabled")) return;
        pdate = methods._parseDate(fieldAlt.val());
      } else {
        pdate = methods._parseDate(p);
      }

      var vdate = methods._parseDate(field.val());

      if (vdate > pdate) {
        var rule = options.allrules.past;
        if (rule.alertText2) return rule.alertText + methods._dateToString(pdate) + rule.alertText2;
        return rule.alertText + methods._dateToString(pdate);
      }
    },

    /**
     * Checks date is in the future
     *
     * @param {jqObject} field
     * @param {Array[String]} rules
     * @param {int} i rules index
     * @param {Map}
     *            user options
     * @return an error string if validation failed
     */
    _future: function (form, field, rules, i, options) {
      var p = rules[i + 1];
      var fieldAlt = $(form.find("input[name='" + p.replace(/^#+/, '') + "']"));
      var pdate;

      if (p.toLowerCase() == "now") {
        pdate = new Date();
      } else if (undefined != fieldAlt.val()) {
        if (fieldAlt.is(":disabled")) return;
        pdate = methods._parseDate(fieldAlt.val());
      } else {
        pdate = methods._parseDate(p);
      }

      var vdate = methods._parseDate(field.val());

      if (vdate < pdate) {
        var rule = options.allrules.future;
        if (rule.alertText2) return rule.alertText + methods._dateToString(pdate) + rule.alertText2;
        return rule.alertText + methods._dateToString(pdate);
      }
    },

    /**
     * Checks if valid date
     *
     * @param {string} date string
     * @return a bool based on determination of valid date
     */
    _isDate: function (value) {
      var dateRegEx = new RegExp(/^\d{4}[\/\-](0?[1-9]|1[012])[\/\-](0?[1-9]|[12][0-9]|3[01])$|^(?:(?:(?:0?[13578]|1[02])(\/|-)31)|(?:(?:0?[1,3-9]|1[0-2])(\/|-)(?:29|30)))(\/|-)(?:[1-9]\d\d\d|\d[1-9]\d\d|\d\d[1-9]\d|\d\d\d[1-9])$|^(?:(?:0?[1-9]|1[0-2])(\/|-)(?:0?[1-9]|1\d|2[0-8]))(\/|-)(?:[1-9]\d\d\d|\d[1-9]\d\d|\d\d[1-9]\d|\d\d\d[1-9])$|^(0?2(\/|-)29)(\/|-)(?:(?:0[48]00|[13579][26]00|[2468][048]00)|(?:\d\d)?(?:0[48]|[2468][048]|[13579][26]))$/);
      return dateRegEx.test(value);
    },

    /**
     * Checks if valid date time
     *
     * @param {string} date string
     * @return a bool based on determination of valid date time
     */
    _isDateTime: function (value) {
      var dateTimeRegEx = new RegExp(/^\d{4}[\/\-](0?[1-9]|1[012])[\/\-](0?[1-9]|[12][0-9]|3[01])\s+(1[012]|0?[1-9]){1}:(0?[1-5]|[0-6][0-9]){1}:(0?[0-6]|[0-6][0-9]){1}\s+(am|pm|AM|PM){1}$|^(?:(?:(?:0?[13578]|1[02])(\/|-)31)|(?:(?:0?[1,3-9]|1[0-2])(\/|-)(?:29|30)))(\/|-)(?:[1-9]\d\d\d|\d[1-9]\d\d|\d\d[1-9]\d|\d\d\d[1-9])$|^((1[012]|0?[1-9]){1}\/(0?[1-9]|[12][0-9]|3[01]){1}\/\d{2,4}\s+(1[012]|0?[1-9]){1}:(0?[1-5]|[0-6][0-9]){1}:(0?[0-6]|[0-6][0-9]){1}\s+(am|pm|AM|PM){1})$/);
      return dateTimeRegEx.test(value);
    },
    //Checks if the start date is before the end date
    //returns true if end is later than start
    _dateCompare: function (start, end) {
      return new Date(start.toString()) < new Date(end.toString());
    },

    /**
     * Checks date range
     *
     * @param {jqObject} first field name
     * @param {jqObject} second field name
     * @return an error string if validation failed
     */
    _dateRange: function (field, rules, i, options) {
      //are not both populated
      if (!options.firstOfGroup[0].value && options.secondOfGroup[0].value || options.firstOfGroup[0].value && !options.secondOfGroup[0].value) {
        return options.allrules[rules[i]].alertText + options.allrules[rules[i]].alertText2;
      } //are not both dates


      if (!methods._isDate(options.firstOfGroup[0].value) || !methods._isDate(options.secondOfGroup[0].value)) {
        return options.allrules[rules[i]].alertText + options.allrules[rules[i]].alertText2;
      } //are both dates but range is off


      if (!methods._dateCompare(options.firstOfGroup[0].value, options.secondOfGroup[0].value)) {
        return options.allrules[rules[i]].alertText + options.allrules[rules[i]].alertText2;
      }
    },

    /**
     * Checks date time range
     *
     * @param {jqObject} first field name
     * @param {jqObject} second field name
     * @return an error string if validation failed
     */
    _dateTimeRange: function (field, rules, i, options) {
      //are not both populated
      if (!options.firstOfGroup[0].value && options.secondOfGroup[0].value || options.firstOfGroup[0].value && !options.secondOfGroup[0].value) {
        return options.allrules[rules[i]].alertText + options.allrules[rules[i]].alertText2;
      } //are not both dates


      if (!methods._isDateTime(options.firstOfGroup[0].value) || !methods._isDateTime(options.secondOfGroup[0].value)) {
        return options.allrules[rules[i]].alertText + options.allrules[rules[i]].alertText2;
      } //are both dates but range is off


      if (!methods._dateCompare(options.firstOfGroup[0].value, options.secondOfGroup[0].value)) {
        return options.allrules[rules[i]].alertText + options.allrules[rules[i]].alertText2;
      }
    },

    /**
     * Max number of checkbox selected
     *
     * @param {jqObject} field
     * @param {Array[String]} rules
     * @param {int} i rules index
     * @param {Map}
     *            user options
     * @return an error string if validation failed
     */
    _maxCheckbox: function (form, field, rules, i, options) {
      var nbCheck = rules[i + 1];
      var groupname = field.attr("name");
      var groupSize = form.find("input[name='" + groupname + "']:checked").size();

      if (groupSize > nbCheck) {
        options.showArrow = false;
        if (options.allrules.maxCheckbox.alertText2) return options.allrules.maxCheckbox.alertText + " " + nbCheck + " " + options.allrules.maxCheckbox.alertText2;
        return options.allrules.maxCheckbox.alertText;
      }
    },

    /**
     * Min number of checkbox selected
     *
     * @param {jqObject} field
     * @param {Array[String]} rules
     * @param {int} i rules index
     * @param {Map}
     *            user options
     * @return an error string if validation failed
     */
    _minCheckbox: function (form, field, rules, i, options) {
      var nbCheck = rules[i + 1];
      var groupname = field.attr("name");
      var groupSize = form.find("input[name='" + groupname + "']:checked").size();

      if (groupSize < nbCheck) {
        options.showArrow = false;
        return options.allrules.minCheckbox.alertText + " " + nbCheck + " " + options.allrules.minCheckbox.alertText2;
      }
    },

    /**
     * Checks that it is a valid credit card number according to the
     * Luhn checksum algorithm.
     *
     * @param {jqObject} field
     * @param {Array[String]} rules
     * @param {int} i rules index
     * @param {Map}
     *            user options
     * @return an error string if validation failed
     */
    _creditCard: function (field, rules, i, options) {
      //spaces and dashes may be valid characters, but must be stripped to calculate the checksum.
      var valid = false,
          cardNumber = field.val().replace(/ +/g, '').replace(/-+/g, '');
      var numDigits = cardNumber.length;

      if (numDigits >= 14 && numDigits <= 16 && parseInt(cardNumber) > 0) {
        var sum = 0,
            i = numDigits - 1,
            pos = 1,
            digit,
            luhn = new String();

        do {
          digit = parseInt(cardNumber.charAt(i));
          luhn += pos++ % 2 == 0 ? digit * 2 : digit;
        } while (--i >= 0);

        for (i = 0; i < luhn.length; i++) {
          sum += parseInt(luhn.charAt(i));
        }

        valid = sum % 10 == 0;
      }

      if (!valid) return options.allrules.creditCard.alertText;
    },

    /**
     * Ajax field validation
     *
     * @param {jqObject} field
     * @param {Array[String]} rules
     * @param {int} i rules index
     * @param {Map}
     *            user options
     * @return nothing! the ajax validator handles the prompts itself
     */
    _ajax: function (field, rules, i, options) {
      var errorSelector = rules[i + 1];
      var rule = options.allrules[errorSelector];
      var extraData = rule.extraData;
      var extraDataDynamic = rule.extraDataDynamic;
      var data = {
        "fieldId": field.attr("id"),
        "fieldValue": field.val()
      };

      if (typeof extraData === "object") {
        $.extend(data, extraData);
      } else if (typeof extraData === "string") {
        var tempData = extraData.split("&");

        for (var i = 0; i < tempData.length; i++) {
          var values = tempData[i].split("=");

          if (values[0] && values[0]) {
            data[values[0]] = values[1];
          }
        }
      }

      if (extraDataDynamic) {
        var tmpData = [];
        var domIds = String(extraDataDynamic).split(",");

        for (var i = 0; i < domIds.length; i++) {
          var id = domIds[i];

          if ($(id).length) {
            var inputValue = field.closest("form, .validationEngineContainer").find(id).val();
            var keyValue = id.replace('#', '') + '=' + escape(inputValue);
            data[id.replace('#', '')] = inputValue;
          }
        }
      } // If a field change event triggered this we want to clear the cache for this ID


      if (options.eventTrigger == "field") {
        delete options.ajaxValidCache[field.attr("id")];
      } // If there is an error or if the the field is already validated, do not re-execute AJAX


      if (!options.isError && !methods._checkAjaxFieldStatus(field.attr("id"), options)) {
        $.ajax({
          type: options.ajaxFormValidationMethod,
          url: rule.url,
          cache: false,
          dataType: "json",
          data: data,
          field: field,
          rule: rule,
          methods: methods,
          options: options,
          beforeSend: function () {},
          error: function (data, transport) {
            methods._ajaxError(data, transport);
          },
          success: function (json) {
            // asynchronously called on success, data is the json answer from the server
            var errorFieldId = json[0]; //var errorField = $($("#" + errorFieldId)[0]);

            var errorField = $("#" + errorFieldId).eq(0); // make sure we found the element

            if (errorField.length == 1) {
              var status = json[1]; // read the optional msg from the server

              var msg = json[2];

              if (!status) {
                // Houston we got a problem - display an red prompt
                options.ajaxValidCache[errorFieldId] = false;
                options.isError = true; // resolve the msg prompt

                if (msg) {
                  if (options.allrules[msg]) {
                    var txt = options.allrules[msg].alertText;

                    if (txt) {
                      msg = txt;
                    }
                  }
                } else msg = rule.alertText;

                if (options.showPrompts) methods._showPrompt(errorField, msg, "", true, options);
              } else {
                options.ajaxValidCache[errorFieldId] = true; // resolves the msg prompt

                if (msg) {
                  if (options.allrules[msg]) {
                    var txt = options.allrules[msg].alertTextOk;

                    if (txt) {
                      msg = txt;
                    }
                  }
                } else msg = rule.alertTextOk;

                if (options.showPrompts) {
                  // see if we should display a green prompt
                  if (msg) methods._showPrompt(errorField, msg, "pass", true, options);else methods._closePrompt(errorField);
                } // If a submit form triggered this, we want to re-submit the form


                if (options.eventTrigger == "submit") field.closest("form").submit();
              }
            }

            errorField.trigger("jqv.field.result", [errorField, options.isError, msg]);
          }
        });
        return rule.alertTextLoad;
      }
    },

    /**
     * Common method to handle ajax errors
     *
     * @param {Object} data
     * @param {Object} transport
     */
    _ajaxError: function (data, transport) {
      if (data.status == 0 && transport == null) alert("The page is not served from a server! ajax call failed");else if (typeof console != "undefined") console.log("Ajax error: " + data.status + " " + transport);
    },

    /**
     * date -> string
     *
     * @param {Object} date
     */
    _dateToString: function (date) {
      return date.getFullYear() + "-" + (date.getMonth() + 1) + "-" + date.getDate();
    },

    /**
     * Parses an ISO date
     * @param {String} d
     */
    _parseDate: function (d) {
      var dateParts = d.split("-");
      if (dateParts == d) dateParts = d.split("/");

      if (dateParts == d) {
        dateParts = d.split(".");
        return new Date(dateParts[2], dateParts[1] - 1, dateParts[0]);
      }

      return new Date(dateParts[0], dateParts[1] - 1, dateParts[2]);
    },

    /**
     * Builds or updates a prompt with the given information
     *
     * @param {jqObject} field
     * @param {String} promptText html text to display type
     * @param {String} type the type of bubble: 'pass' (green), 'load' (black) anything else (red)
     * @param {boolean} ajaxed - use to mark fields than being validated with ajax
     * @param {Map} options user options
     */
    _showPrompt: function (field, promptText, type, ajaxed, options, ajaxform) {
      //Check if we need to adjust what element to show the prompt on
      if (field.data('jqv-prompt-at') instanceof jQuery) {
        field = field.data('jqv-prompt-at');
      } else if (field.data('jqv-prompt-at')) {
        field = $(field.data('jqv-prompt-at'));
      }

      var prompt = methods._getPrompt(field); // The ajax submit errors are not see has an error in the form,
      // When the form errors are returned, the engine see 2 bubbles, but those are ebing closed by the engine at the same time
      // Because no error was found befor submitting


      if (ajaxform) prompt = false; // Check that there is indded text

      if ($.trim(promptText)) {
        if (prompt) methods._updatePrompt(field, prompt, promptText, type, ajaxed, options);else methods._buildPrompt(field, promptText, type, ajaxed, options);
      }
    },

    /**
     * Builds and shades a prompt for the given field.
     *
     * @param {jqObject} field
     * @param {String} promptText html text to display type
     * @param {String} type the type of bubble: 'pass' (green), 'load' (black) anything else (red)
     * @param {boolean} ajaxed - use to mark fields than being validated with ajax
     * @param {Map} options user options
     */
    _buildPrompt: function (field, promptText, type, ajaxed, options) {
      // create the prompt
      var prompt = $('<div>');
      prompt.addClass(methods._getClassName(field.attr("id")) + "formError"); // add a class name to identify the parent form of the prompt

      prompt.addClass("parentForm" + methods._getClassName(field.closest('form, .validationEngineContainer').attr("id")));
      prompt.addClass("formError");

      switch (type) {
        case "pass":
          prompt.addClass("greenPopup");
          break;

        case "load":
          prompt.addClass("blackPopup");
          break;

        default:
        /* it has error  */
        //alert("unknown popup type:"+type);

      }

      if (ajaxed) prompt.addClass("ajaxed"); // create the prompt content

      var promptContent = $('<div>').addClass("formErrorContent").html(promptText).appendTo(prompt); // determine position type

      var positionType = field.data("promptPosition") || options.promptPosition; // create the css arrow pointing at the field
      // note that there is no triangle on max-checkbox and radio

      if (options.showArrow) {
        var arrow = $('<div>').addClass("formErrorArrow"); //prompt positioning adjustment support. Usage: positionType:Xshift,Yshift (for ex.: bottomLeft:+20 or bottomLeft:-20,+10)

        if (typeof positionType == 'string') {
          var pos = positionType.indexOf(":");
          if (pos != -1) positionType = positionType.substring(0, pos);
        }

        switch (positionType) {
          case "bottomLeft":
          case "bottomRight":
            prompt.find(".formErrorContent").before(arrow);
            arrow.addClass("formErrorArrowBottom").html('<div class="line1"><!-- --></div><div class="line2"><!-- --></div><div class="line3"><!-- --></div><div class="line4"><!-- --></div><div class="line5"><!-- --></div><div class="line6"><!-- --></div><div class="line7"><!-- --></div><div class="line8"><!-- --></div><div class="line9"><!-- --></div><div class="line10"><!-- --></div>');
            break;

          case "topLeft":
          case "topRight":
            arrow.html('<div class="line10"><!-- --></div><div class="line9"><!-- --></div><div class="line8"><!-- --></div><div class="line7"><!-- --></div><div class="line6"><!-- --></div><div class="line5"><!-- --></div><div class="line4"><!-- --></div><div class="line3"><!-- --></div><div class="line2"><!-- --></div><div class="line1"><!-- --></div>');
            prompt.append(arrow);
            break;
        }
      } // Add custom prompt class


      if (options.addPromptClass) prompt.addClass(options.addPromptClass); // Add custom prompt class defined in element

      var requiredOverride = field.attr('data-required-class');

      if (requiredOverride !== undefined) {
        prompt.addClass(requiredOverride);
      } else {
        if (options.prettySelect) {
          if ($('#' + field.attr('id')).next().is('select')) {
            var prettyOverrideClass = $('#' + field.attr('id').substr(options.usePrefix.length).substring(options.useSuffix.length)).attr('data-required-class');

            if (prettyOverrideClass !== undefined) {
              prompt.addClass(prettyOverrideClass);
            }
          }
        }
      }

      prompt.css({
        "opacity": 0
      });

      if (positionType === 'inline') {
        prompt.addClass("inline");

        if (typeof field.attr('data-prompt-target') !== 'undefined' && $('#' + field.attr('data-prompt-target')).length > 0) {
          prompt.appendTo($('#' + field.attr('data-prompt-target')));
        } else {
          field.after(prompt);
        }
      } else {
        field.before(prompt);
      }

      var pos = methods._calculatePosition(field, prompt, options);

      prompt.css({
        'position': positionType === 'inline' ? 'relative' : 'absolute',
        "top": pos.callerTopPosition,
        "left": pos.callerleftPosition,
        "marginTop": pos.marginTopSize,
        "opacity": 0
      }).data("callerField", field);

      if (options.autoHidePrompt) {
        setTimeout(function () {
          prompt.animate({
            "opacity": 0
          }, function () {
            prompt.closest('.formErrorOuter').remove();
            prompt.remove();
          });
        }, options.autoHideDelay);
      }

      return prompt.animate({
        "opacity": 0.87
      });
    },

    /**
     * Updates the prompt text field - the field for which the prompt
     * @param {jqObject} field
     * @param {String} promptText html text to display type
     * @param {String} type the type of bubble: 'pass' (green), 'load' (black) anything else (red)
     * @param {boolean} ajaxed - use to mark fields than being validated with ajax
     * @param {Map} options user options
     */
    _updatePrompt: function (field, prompt, promptText, type, ajaxed, options, noAnimation) {
      if (prompt) {
        if (typeof type !== "undefined") {
          if (type == "pass") prompt.addClass("greenPopup");else prompt.removeClass("greenPopup");
          if (type == "load") prompt.addClass("blackPopup");else prompt.removeClass("blackPopup");
        }

        if (ajaxed) prompt.addClass("ajaxed");else prompt.removeClass("ajaxed");
        prompt.find(".formErrorContent").html(promptText);

        var pos = methods._calculatePosition(field, prompt, options);

        var css = {
          "top": pos.callerTopPosition,
          "left": pos.callerleftPosition,
          "marginTop": pos.marginTopSize
        };
        if (noAnimation) prompt.css(css);else prompt.animate(css);
      }
    },

    /**
     * Closes the prompt associated with the given field
     *
     * @param {jqObject}
     *            field
     */
    _closePrompt: function (field) {
      var prompt = methods._getPrompt(field);

      if (prompt) prompt.fadeTo("fast", 0, function () {
        prompt.parent('.formErrorOuter').remove();
        prompt.remove();
      });
    },
    closePrompt: function (field) {
      return methods._closePrompt(field);
    },

    /**
     * Returns the error prompt matching the field if any
     *
     * @param {jqObject}
     *            field
     * @return undefined or the error prompt (jqObject)
     */
    _getPrompt: function (field) {
      var formId = $(field).closest('form, .validationEngineContainer').attr('id');
      var className = methods._getClassName(field.attr("id")) + "formError";
      var match = $("." + methods._escapeExpression(className) + '.parentForm' + methods._getClassName(formId))[0];
      if (match) return $(match);
    },

    /**
     * Returns the escapade classname
     *
     * @param {selector}
     *            className
     */
    _escapeExpression: function (selector) {
      return selector.replace(/([#;&,\.\+\*\~':"\!\^$\[\]\(\)=>\|])/g, "\\$1");
    },

    /**
     * returns true if we are in a RTLed document
     *
     * @param {jqObject} field
     */
    isRTL: function (field) {
      var $document = $(document);
      var $body = $('body');
      var rtl = field && field.hasClass('rtl') || field && (field.attr('dir') || '').toLowerCase() === 'rtl' || $document.hasClass('rtl') || ($document.attr('dir') || '').toLowerCase() === 'rtl' || $body.hasClass('rtl') || ($body.attr('dir') || '').toLowerCase() === 'rtl';
      return Boolean(rtl);
    },

    /**
     * Calculates prompt position
     *
     * @param {jqObject}
     *            field
     * @param {jqObject}
     *            the prompt
     * @param {Map}
     *            options
     * @return positions
     */
    _calculatePosition: function (field, promptElmt, options) {
      var promptTopPosition, promptleftPosition, marginTopSize;
      var fieldWidth = field.width();
      var fieldLeft = field.position().left;
      var fieldTop = field.position().top;
      var fieldHeight = field.height();
      var promptHeight = promptElmt.height(); // is the form contained in an overflown container?

      promptTopPosition = promptleftPosition = 0; // compensation for the arrow

      marginTopSize = -promptHeight; //prompt positioning adjustment support
      //now you can adjust prompt position
      //usage: positionType:Xshift,Yshift
      //for example:
      //   bottomLeft:+20 means bottomLeft position shifted by 20 pixels right horizontally
      //   topRight:20, -15 means topRight position shifted by 20 pixels to right and 15 pixels to top
      //You can use +pixels, - pixels. If no sign is provided than + is default.

      var positionType = field.data("promptPosition") || options.promptPosition;
      var shift1 = "";
      var shift2 = "";
      var shiftX = 0;
      var shiftY = 0;

      if (typeof positionType == 'string') {
        //do we have any position adjustments ?
        if (positionType.indexOf(":") != -1) {
          shift1 = positionType.substring(positionType.indexOf(":") + 1);
          positionType = positionType.substring(0, positionType.indexOf(":")); //if any advanced positioning will be needed (percents or something else) - parser should be added here
          //for now we use simple parseInt()
          //do we have second parameter?

          if (shift1.indexOf(",") != -1) {
            shift2 = shift1.substring(shift1.indexOf(",") + 1);
            shift1 = shift1.substring(0, shift1.indexOf(","));
            shiftY = parseInt(shift2);
            if (isNaN(shiftY)) shiftY = 0;
          }

          ;
          shiftX = parseInt(shift1);
          if (isNaN(shift1)) shift1 = 0;
        }

        ;
      }

      ;

      switch (positionType) {
        default:
        case "topRight":
          promptleftPosition += fieldLeft + fieldWidth - 30;
          promptTopPosition += fieldTop;
          break;

        case "topLeft":
          promptTopPosition += fieldTop;
          promptleftPosition += fieldLeft;
          break;

        case "centerRight":
          promptTopPosition = fieldTop + 4;
          marginTopSize = 0;
          promptleftPosition = fieldLeft + field.outerWidth(true) + 5;
          break;

        case "centerLeft":
          promptleftPosition = fieldLeft - (promptElmt.width() + 2);
          promptTopPosition = fieldTop + 4;
          marginTopSize = 0;
          break;

        case "bottomLeft":
          promptTopPosition = fieldTop + field.height() + 5;
          marginTopSize = 0;
          promptleftPosition = fieldLeft;
          break;

        case "bottomRight":
          promptleftPosition = fieldLeft + fieldWidth - 30;
          promptTopPosition = fieldTop + field.height() + 5;
          marginTopSize = 0;
          break;

        case "inline":
          promptleftPosition = 0;
          promptTopPosition = 0;
          marginTopSize = 0;
      }

      ; //apply adjusments if any

      promptleftPosition += shiftX;
      promptTopPosition += shiftY;
      return {
        "callerTopPosition": promptTopPosition + "px",
        "callerleftPosition": promptleftPosition + "px",
        "marginTopSize": marginTopSize + "px"
      };
    },

    /**
     * Saves the user options and variables in the form.data
     *
     * @param {jqObject}
     *            form - the form where the user option should be saved
     * @param {Map}
     *            options - the user options
     * @return the user options (extended from the defaults)
     */
    _saveOptions: function (form, options) {
      // is there a language localisation ?
      if ($.validationEngineLanguage) var allRules = $.validationEngineLanguage.allRules;else $.error("jQuery.validationEngine rules are not loaded, plz add localization files to the page"); // --- Internals DO NOT TOUCH or OVERLOAD ---
      // validation rules and i18

      $.validationEngine.defaults.allrules = allRules;
      var userOptions = $.extend(true, {}, $.validationEngine.defaults, options);
      form.data('jqv', userOptions);
      return userOptions;
    },

    /**
     * Removes forbidden characters from class name
     * @param {String} className
     */
    _getClassName: function (className) {
      if (className) return className.replace(/:/g, "_").replace(/\./g, "_");
    },

    /**
     * Escape special character for jQuery selector
     * http://totaldev.com/content/escaping-characters-get-valid-jquery-id
     * @param {String} selector
     */
    _jqSelector: function (str) {
      return str.replace(/([;&,\.\+\*\~':"\!\^#$%@\[\]\(\)=>\|])/g, '\\$1');
    },

    /**
     * Conditionally required field
     *
     * @param {jqObject} field
     * @param {Array[String]} rules
     * @param {int} i rules index
     * @param {Map}
     * user options
     * @return an error string if validation failed
     */
    _condRequired: function (field, rules, i, options) {
      var idx, dependingField;

      for (idx = i + 1; idx < rules.length; idx++) {
        dependingField = jQuery("#" + rules[idx]).first();
        /* Use _required for determining wether dependingField has a value.
         * There is logic there for handling all field types, and default value; so we won't replicate that here
         * Indicate this special use by setting the last parameter to true so we only validate the dependingField on chackboxes and radio buttons (#462)
         */

        if (dependingField.length && methods._required(dependingField, ["required"], 0, options, true) == undefined) {
          /* We now know any of the depending fields has a value,
           * so we can validate this field as per normal required code
           */
          return methods._required(field, ["required"], 0, options);
        }
      }
    },
    _submitButtonClick: function (event) {
      var button = $(this);
      var form = button.closest('form, .validationEngineContainer');
      form.data("jqv_submitButton", button.attr("id"));
    }
  };
  /**
   * Plugin entry point.
   * You may pass an action as a parameter or a list of options.
   * if none, the init and attach methods are being called.
   * Remember: if you pass options, the attached method is NOT called automatically
   *
   * @param {String}
   *            method (optional) action
   */

  $.fn.validationEngine = function (method) {
    var form = $(this);
    if (!form[0]) return form; // stop here if the form does not exist

    if (typeof method == 'string' && method.charAt(0) != '_' && methods[method]) {
      // make sure init is called once
      if (method != "showPrompt" && method != "hide" && method != "hideAll") methods.init.apply(form);
      return methods[method].apply(form, Array.prototype.slice.call(arguments, 1));
    } else if (typeof method == 'object' || !method) {
      // default constructor with or without arguments
      methods.init.apply(form, arguments);
      return methods.attach.apply(form);
    } else {
      $.error('Method ' + method + ' does not exist in jQuery.validationEngine');
    }
  }; // LEAK GLOBAL OPTIONS


  $.validationEngine = {
    fieldIdCounter: 0,
    defaults: {
      // Name of the event triggering field validation
      validationEventTrigger: "blur",
      // Automatically scroll viewport to the first error
      scroll: true,
      // Focus on the first input
      focusFirstField: true,
      // Show prompts, set to false to disable prompts
      showPrompts: true,
      // Should we attempt to validate non-visible input fields contained in the form? (Useful in cases of tabbed containers, e.g. jQuery-UI tabs)
      validateNonVisibleFields: false,
      // Opening box position, possible locations are: topLeft,
      // topRight, bottomLeft, centerRight, bottomRight, inline
      // inline gets inserted after the validated field or into an element specified in data-prompt-target
      promptPosition: "topRight",
      bindMethod: "bind",
      // internal, automatically set to true when it parse a _ajax rule
      inlineAjax: false,
      // if set to true, the form data is sent asynchronously via ajax to the form.action url (get)
      ajaxFormValidation: false,
      // The url to send the submit ajax validation (default to action)
      ajaxFormValidationURL: false,
      // HTTP method used for ajax validation
      ajaxFormValidationMethod: 'get',
      // Ajax form validation callback method: boolean onComplete(form, status, errors, options)
      // retuns false if the form.submit event needs to be canceled.
      onAjaxFormComplete: $.noop,
      // called right before the ajax call, may return false to cancel
      onBeforeAjaxFormValidation: $.noop,
      // Stops form from submitting and execute function assiciated with it
      onValidationComplete: false,
      // Used when you have a form fields too close and the errors messages are on top of other disturbing viewing messages
      doNotShowAllErrosOnSubmit: false,
      // Object where you store custom messages to override the default error messages
      custom_error_messages: {},
      // true if you want to vind the input fields
      binded: true,
      // set to true, when the prompt arrow needs to be displayed
      showArrow: true,
      // did one of the validation fail ? kept global to stop further ajax validations
      isError: false,
      // Limit how many displayed errors a field can have
      maxErrorsPerField: false,
      // Caches field validation status, typically only bad status are created.
      // the array is used during ajax form validation to detect issues early and prevent an expensive submit
      ajaxValidCache: {},
      // Auto update prompt position after window resize
      autoPositionUpdate: false,
      InvalidFields: [],
      onFieldSuccess: false,
      onFieldFailure: false,
      onSuccess: false,
      onFailure: false,
      validateAttribute: "class",
      addSuccessCssClassToField: "",
      addFailureCssClassToField: "",
      // Auto-hide prompt
      autoHidePrompt: false,
      // Delay before auto-hide
      autoHideDelay: 10000,
      // Fade out duration while hiding the validations
      fadeDuration: 0.3,
      // Use Prettify select library
      prettySelect: false,
      // Add css class on prompt
      addPromptClass: "",
      // Custom ID uses prefix
      usePrefix: "",
      // Custom ID uses suffix
      useSuffix: "",
      // Only show one message per error prompt
      showOneMessage: false
    }
  };
  /**************************************************************
   * Modifications begin here!
   */

  var tooltipSettings = {
    hook: 'rightmiddle',
    hideOn: false,
    skin: 'cloud',
    hideOthers: false
  };

  methods._buildPrompt = function (field, promptText, type, ajaxed, options) {
    field.data("promptText", promptText);
    Tipped.create(field[0], promptText, tooltipSettings);
    Tipped.show(field[0]);
  };

  methods._closePrompt = function (field) {
    field.data("promptText", "");
    Tipped.remove(field[0]);
  };

  methods._updatePrompt = function (field, prompt, promptText, type, ajaxed, options, noAnimation) {
    if (field.data("promptText") != promptText) {
      methods._closePrompt(field);

      methods._buildPrompt(field, promptText);
    }
  };

  methods._getPrompt = function (field) {
    return Tipped.get(field[0]);
  };
  /**************************************************************
   * End of Modifications
   */


  $(function () {
    $.validationEngine.defaults.promptPosition = methods.isRTL() ? 'topLeft' : "topRight";
  });
})(jQuery);
// jQuery WipeTouch 1.2.0
// ------------------------------------------------------------------------
//
// Developed and maintained by Igor Ramadas
// http://aboutigor.com
// http://devv.com
//
// USAGE
// ------------------------------------------------------------------------
//
// $(selector).wipetouch(config);
//
// The wipe events should expect the result object with the following properties:
// speed - the wipe speed from 1 to 5
// x - how many pixels moved on the horizontal axis
// y - how many pixels moved on the vertical axis
// source - the element which triggered the wipe gesture
//
// EXAMPLE
//		$(document).wipetouch({
//			allowDiagonal: true,
//			wipeLeft: function(result) { alert("Left on speed " + result.speed) },
//			wipeTopLeft: function(result) { alert("Top left on speed " + result.speed) },
//			wipeBottomLeft: function(result) { alert("Bottom left on speed " + result.speed) }
//		});
//
//
// More details at http://wipetouch.codeplex.com/
//
// CHANGE LOG
// ------------------------------------------------------------------------
// 1.2.0
// - New: wipeMove event, triggered while moving the mouse/finger.
// - New: added "source" to the result object.
// - Bug fix: sometimes vertical wipe events would not trigger correctly.
// - Bug fix: improved tapToClick handler.
// - General code refactoring.
// - Windows Phone 7 is not supported, yet! Its behaviour is completely broken and would require some special tricks to make it work. Maybe in the future...
//
// 1.1.0
// - New: tapToClick, if true will identify taps and and trigger a click on the touched element. Default is false.
// - Changed: events wipeBottom*** and wipeTop*** renamed to wipeDown*** and wipeUp***.
// - Changed: better touch speed calculation (was always too fast before).
// - Changed: speed will be an integer now (instead of float).
// - Changed: better wipe detection (if Y movement is more than X, do a vertical wipe instead of horizontal).
// - Bug fix: added preventDefault to touchStart and touchEnd internal events (this was missing).
// - Other general tweaks to the code.
//
// The minified version of WipeTouch can be generated using Jasc: http://jasc.codeplex.com
(function ($) {
  $.fn.wipetouch = function (settings) {
    // ------------------------------------------------------------------------
    // PLUGIN SETTINGS
    // ------------------------------------------------------------------------
    var config = {
      // Variables and options
      moveX: 40,
      // minimum amount of horizontal pixels to trigger a wipe event
      moveY: 40,
      // minimum amount of vertical pixels to trigger a wipe event
      tapToClick: false,
      // if user taps the screen it will fire a click event on the touched element
      preventDefault: true,
      // if true, prevents default events (click for example)
      allowDiagonal: false,
      // if false, will trigger horizontal and vertical movements so wipeUpLeft, wipeDownLeft, wipeUpRight, wipeDownRight are ignored,
      preventDefaultWhenTriggering: true,
      // Wipe events
      wipeLeft: false,
      // called on wipe left gesture
      wipeRight: false,
      // called on wipe right gesture
      wipeUp: false,
      // called on wipe up gesture
      wipeDown: false,
      // called on wipe down gesture
      wipeUpLeft: false,
      // called on wipe top and left gesture
      wipeDownLeft: false,
      // called on wipe bottom and left gesture
      wipeUpRight: false,
      // called on wipe top and right gesture
      wipeDownRight: false,
      // called on wipe bottom and right gesture
      wipeMove: false,
      // triggered whenever touchMove acts
      // DEPRECATED EVENTS
      wipeTopLeft: false,
      // USE WIPEUPLEFT
      wipeBottomLeft: false,
      // USE WIPEDOWNLEFT
      wipeTopRight: false,
      // USE WIPEUPRIGHT
      wipeBottomRight: false // USE WIPEDOWNRIGHT

    };

    if (settings) {
      $.extend(config, settings);
    }

    this.each(function () {
      // ------------------------------------------------------------------------
      // INTERNAL VARIABLES
      // ------------------------------------------------------------------------
      var startX; // where touch has started, left

      var startY; // where touch has started, top

      var startDate = false; // used to calculate timing and aprox. acceleration

      var curX; // keeps touch X position while moving on the screen

      var curY; // keeps touch Y position while moving on the screen

      var isMoving = false; // is user touching and moving?

      var touchedElement = false; // element which user has touched
      // These are for non-touch devices!

      var useMouseEvents = false; // force using the mouse events to simulate touch

      var clickEvent = false; // holds the click event of the target, when used hasn't clicked
      // ------------------------------------------------------------------------
      // TOUCH EVENTS
      // ------------------------------------------------------------------------
      // Called when user touches the screen.

      function onTouchStart(e) {
        resetTouch();
        var start = useMouseEvents || e.originalEvent.touches && e.originalEvent.touches.length > 0;

        if (!isMoving && start) {
          if (config.preventDefault) {
            e.preventDefault();
          } // Temporary fix for deprecated events, these will be removed on next version!


          if (config.allowDiagonal) {
            if (!config.wipeDownLeft) {
              config.wipeDownLeft = config.wipeBottomLeft;
            }

            if (!config.wipeDownRight) {
              config.wipeDownRight = config.wipeBottomRight;
            }

            if (!config.wipeUpLeft) {
              config.wipeUpLeft = config.wipeTopLeft;
            }

            if (!config.wipeUpRight) {
              config.wipeUpRight = config.wipeTopRight;
            }
          } // When touch events are not present, use mouse events.


          if (useMouseEvents) {
            startX = e.pageX;
            startY = e.pageY;
            $(this).bind("mousemove", onTouchMove);
            $(this).one("mouseup", onTouchEnd);
          } else {
            startX = e.originalEvent.touches[0].pageX;
            startY = e.originalEvent.touches[0].pageY;
            $(this).bind("touchmove", onTouchMove);
          } // Set the start date and current X/Y.


          startDate = new Date().getTime();
          curX = startX;
          curY = startY;
          isMoving = true;
          touchedElement = $(e.target);
        }
      } // Called when user untouches the screen.


      function onTouchEnd(e) {
        if (config.preventDefault) {
          e.preventDefault();
        } // When touch events are not present, use mouse events.


        if (useMouseEvents) {
          $(this).unbind("mousemove", onTouchMove);
        } else {
          $(this).unbind("touchmove", onTouchMove);
        } // If is moving then calculate the touch results, otherwise reset it.


        if (isMoving) {
          touchCalculate(e);
        } else {
          resetTouch();
        }
      } // Called when user is touching and moving on the screen.


      function onTouchMove(e) {
        if (config.preventDefault) {
          e.preventDefault();
        }

        if (useMouseEvents && !isMoving) {
          onTouchStart(e);
        }

        if (isMoving) {
          if (useMouseEvents) {
            curX = e.pageX;
            curY = e.pageY;
          } else {
            curX = e.originalEvent.touches[0].pageX;
            curY = e.originalEvent.touches[0].pageY;
          } // If there's a wipeMove event, call it passing
          // current X and Y position (curX and curY).


          if (config.wipeMove) {
            triggerEvent(config.wipeMove, {
              curX: curX,
              curY: curY
            });
          }
        }
      } // ------------------------------------------------------------------------
      // CALCULATE TOUCH AND TRIGGER
      // ------------------------------------------------------------------------


      function touchCalculate(e) {
        var endDate = new Date().getTime(); // current date to calculate timing

        var ms = startDate - endDate; // duration of touch in milliseconds

        var x = curX; // current left position

        var y = curY; // current top position

        var dx = x - startX; // diff of current left to starting left

        var dy = y - startY; // diff of current top to starting top

        var ax = Math.abs(dx); // amount of horizontal movement

        var ay = Math.abs(dy); // amount of vertical movement
        // If moved less than 15 pixels, touch duration is less than 100ms,
        // and tapToClick is true then trigger a click event and stop processing.

        if (ax < 15 && ay < 15 && ms < 100) {
          clickEvent = false;

          if (config.preventDefault) {
            resetTouch();
            touchedElement.trigger("click");
            return;
          }
        } // When touch events are not present, use mouse events.
        else if (useMouseEvents) {
          var evts = touchedElement.data("events");

          if (evts) {
            // Save click event to the temp clickEvent variable.
            var clicks = evts.click;

            if (clicks && clicks.length > 0) {
              $.each(clicks, function (i, f) {
                clickEvent = f;
                return;
              });
              touchedElement.unbind("click");
            }
          }
        } // Is it moving to the right or left, top or bottom?


        var toright = dx > 0;
        var tobottom = dy > 0; // Calculate speed from 1 to 5, 1 being slower and 5 faster.

        var s = (ax + ay) * 60 / (ms / 6 * ms);
        if (s < 1) s = 1;
        if (s > 5) s = 5;
        var result = {
          speed: parseInt(s),
          x: ax,
          y: ay,
          source: touchedElement
        };

        if (ax >= config.moveX) {
          // Check if it's allowed and trigger diagonal wipe events.
          if (config.allowDiagonal && ay >= config.moveY) {
            if (toright && tobottom) {
              triggerEvent(config.wipeDownRight, result, e);
            } else if (toright && !tobottom) {
              triggerEvent(config.wipeUpRight, result, e);
            } else if (!toright && tobottom) {
              triggerEvent(config.wipeDownLeft, result, e);
            } else {
              triggerEvent(config.wipeUpLeft, result, e);
            }
          } // Otherwise trigger horizontal events if X > Y.
          else if (ax >= ay) {
            if (toright) {
              triggerEvent(config.wipeRight, result, e);
            } else {
              triggerEvent(config.wipeLeft, result, e);
            }
          }
        } // If Y > X and no diagonal, trigger vertical events.
        else if (ay >= config.moveY && ay > ax) {
          if (tobottom) {
            triggerEvent(config.wipeDown, result, e);
          } else {
            triggerEvent(config.wipeUp, result, e);
          }
        }

        resetTouch();
      } // Resets the cached variables.


      function resetTouch() {
        startX = false;
        startY = false;
        startDate = false;
        isMoving = false; // If there's a click event, bind after a few miliseconds.

        if (clickEvent) {
          window.setTimeout(function () {
            touchedElement.bind("click", clickEvent);
            clickEvent = false;
          }, 50);
        }
      } // Trigger a wipe event passing a result object with
      // speed from 1 to 5, x / y movement amount in pixels,
      // and the source element.


      function triggerEvent(wipeEvent, result, e) {
        if (wipeEvent) {
          if (config.preventDefaultWhenTriggering) {
            e.preventDefault();
          }

          wipeEvent(result);
        }
      } // ------------------------------------------------------------------------
      // ADD TOUCHSTART AND TOUCHEND EVENT LISTENERS
      // ------------------------------------------------------------------------


      if ("ontouchstart" in document.documentElement) {
        $(this).bind("touchstart", onTouchStart);
        $(this).bind("touchend", onTouchEnd);
      } else {
        useMouseEvents = true;
        $(this).bind("mousedown", onTouchStart);
        $(this).bind("mouseout mouseup", onTouchEnd);
      }
    });
    return this;
  };
})(jQuery);
/* == malihu jquery custom scrollbar plugin == Version: 3.1.5, License: MIT License (MIT) */
!function (e) {
  "function" == typeof define && define.amd ? define(["jquery"], e) : "undefined" != typeof module && module.exports ? module.exports = e : e(jQuery, window, document);
}(function (e) {
  !function (t) {
    var o = "function" == typeof define && define.amd,
        a = "undefined" != typeof module && module.exports,
        n = "https:" == document.location.protocol ? "https:" : "http:",
        i = "cdnjs.cloudflare.com/ajax/libs/jquery-mousewheel/3.1.13/jquery.mousewheel.min.js";
    o || (a ? require("jquery-mousewheel")(e) : e.event.special.mousewheel || e("head").append(decodeURI("%3Cscript src=" + n + "//" + i + "%3E%3C/script%3E"))), t();
  }(function () {
    var t,
        o = "mCustomScrollbar",
        a = "mCS",
        n = ".mCustomScrollbar",
        i = {
      setTop: 0,
      setLeft: 0,
      axis: "y",
      scrollbarPosition: "inside",
      scrollInertia: 950,
      autoDraggerLength: !0,
      alwaysShowScrollbar: 0,
      snapOffset: 0,
      mouseWheel: {
        enable: !0,
        scrollAmount: "auto",
        axis: "y",
        deltaFactor: "auto",
        disableOver: ["select", "option", "keygen", "datalist", "textarea"]
      },
      scrollButtons: {
        scrollType: "stepless",
        scrollAmount: "auto"
      },
      keyboard: {
        enable: !0,
        scrollType: "stepless",
        scrollAmount: "auto"
      },
      contentTouchScroll: 25,
      documentTouchScroll: !0,
      advanced: {
        autoScrollOnFocus: "input,textarea,select,button,datalist,keygen,a[tabindex],area,object,[contenteditable='true']",
        updateOnContentResize: !0,
        updateOnImageLoad: "auto",
        autoUpdateTimeout: 60
      },
      theme: "light",
      callbacks: {
        onTotalScrollOffset: 0,
        onTotalScrollBackOffset: 0,
        alwaysTriggerOffsets: !0
      }
    },
        r = 0,
        l = {},
        s = window.attachEvent && !window.addEventListener ? 1 : 0,
        c = !1,
        d = ["mCSB_dragger_onDrag", "mCSB_scrollTools_onDrag", "mCS_img_loaded", "mCS_disabled", "mCS_destroyed", "mCS_no_scrollbar", "mCS-autoHide", "mCS-dir-rtl", "mCS_no_scrollbar_y", "mCS_no_scrollbar_x", "mCS_y_hidden", "mCS_x_hidden", "mCSB_draggerContainer", "mCSB_buttonUp", "mCSB_buttonDown", "mCSB_buttonLeft", "mCSB_buttonRight"],
        u = {
      init: function (t) {
        var t = e.extend(!0, {}, i, t),
            o = f.call(this);

        if (t.live) {
          var s = t.liveSelector || this.selector || n,
              c = e(s);
          if ("off" === t.live) return void m(s);
          l[s] = setTimeout(function () {
            c.mCustomScrollbar(t), "once" === t.live && c.length && m(s);
          }, 500);
        } else m(s);

        return t.setWidth = t.set_width ? t.set_width : t.setWidth, t.setHeight = t.set_height ? t.set_height : t.setHeight, t.axis = t.horizontalScroll ? "x" : p(t.axis), t.scrollInertia = t.scrollInertia > 0 && t.scrollInertia < 17 ? 17 : t.scrollInertia, "object" != typeof t.mouseWheel && 1 == t.mouseWheel && (t.mouseWheel = {
          enable: !0,
          scrollAmount: "auto",
          axis: "y",
          preventDefault: !1,
          deltaFactor: "auto",
          normalizeDelta: !1,
          invert: !1
        }), t.mouseWheel.scrollAmount = t.mouseWheelPixels ? t.mouseWheelPixels : t.mouseWheel.scrollAmount, t.mouseWheel.normalizeDelta = t.advanced.normalizeMouseWheelDelta ? t.advanced.normalizeMouseWheelDelta : t.mouseWheel.normalizeDelta, t.scrollButtons.scrollType = g(t.scrollButtons.scrollType), h(t), e(o).each(function () {
          var o = e(this);

          if (!o.data(a)) {
            o.data(a, {
              idx: ++r,
              opt: t,
              scrollRatio: {
                y: null,
                x: null
              },
              overflowed: null,
              contentReset: {
                y: null,
                x: null
              },
              bindEvents: !1,
              tweenRunning: !1,
              sequential: {},
              langDir: o.css("direction"),
              cbOffsets: null,
              trigger: null,
              poll: {
                size: {
                  o: 0,
                  n: 0
                },
                img: {
                  o: 0,
                  n: 0
                },
                change: {
                  o: 0,
                  n: 0
                }
              }
            });
            var n = o.data(a),
                i = n.opt,
                l = o.data("mcs-axis"),
                s = o.data("mcs-scrollbar-position"),
                c = o.data("mcs-theme");
            l && (i.axis = l), s && (i.scrollbarPosition = s), c && (i.theme = c, h(i)), v.call(this), n && i.callbacks.onCreate && "function" == typeof i.callbacks.onCreate && i.callbacks.onCreate.call(this), e("#mCSB_" + n.idx + "_container img:not(." + d[2] + ")").addClass(d[2]), u.update.call(null, o);
          }
        });
      },
      update: function (t, o) {
        var n = t || f.call(this);
        return e(n).each(function () {
          var t = e(this);

          if (t.data(a)) {
            var n = t.data(a),
                i = n.opt,
                r = e("#mCSB_" + n.idx + "_container"),
                l = e("#mCSB_" + n.idx),
                s = [e("#mCSB_" + n.idx + "_dragger_vertical"), e("#mCSB_" + n.idx + "_dragger_horizontal")];
            if (!r.length) return;
            n.tweenRunning && Q(t), o && n && i.callbacks.onBeforeUpdate && "function" == typeof i.callbacks.onBeforeUpdate && i.callbacks.onBeforeUpdate.call(this), t.hasClass(d[3]) && t.removeClass(d[3]), t.hasClass(d[4]) && t.removeClass(d[4]), l.css("max-height", "none"), l.height() !== t.height() && l.css("max-height", t.height()), _.call(this), "y" === i.axis || i.advanced.autoExpandHorizontalScroll || r.css("width", x(r)), n.overflowed = y.call(this), M.call(this), i.autoDraggerLength && S.call(this), b.call(this), T.call(this);
            var c = [Math.abs(r[0].offsetTop), Math.abs(r[0].offsetLeft)];
            "x" !== i.axis && (n.overflowed[0] ? s[0].height() > s[0].parent().height() ? B.call(this) : (G(t, c[0].toString(), {
              dir: "y",
              dur: 0,
              overwrite: "none"
            }), n.contentReset.y = null) : (B.call(this), "y" === i.axis ? k.call(this) : "yx" === i.axis && n.overflowed[1] && G(t, c[1].toString(), {
              dir: "x",
              dur: 0,
              overwrite: "none"
            }))), "y" !== i.axis && (n.overflowed[1] ? s[1].width() > s[1].parent().width() ? B.call(this) : (G(t, c[1].toString(), {
              dir: "x",
              dur: 0,
              overwrite: "none"
            }), n.contentReset.x = null) : (B.call(this), "x" === i.axis ? k.call(this) : "yx" === i.axis && n.overflowed[0] && G(t, c[0].toString(), {
              dir: "y",
              dur: 0,
              overwrite: "none"
            }))), o && n && (2 === o && i.callbacks.onImageLoad && "function" == typeof i.callbacks.onImageLoad ? i.callbacks.onImageLoad.call(this) : 3 === o && i.callbacks.onSelectorChange && "function" == typeof i.callbacks.onSelectorChange ? i.callbacks.onSelectorChange.call(this) : i.callbacks.onUpdate && "function" == typeof i.callbacks.onUpdate && i.callbacks.onUpdate.call(this)), N.call(this);
          }
        });
      },
      scrollTo: function (t, o) {
        if ("undefined" != typeof t && null != t) {
          var n = f.call(this);
          return e(n).each(function () {
            var n = e(this);

            if (n.data(a)) {
              var i = n.data(a),
                  r = i.opt,
                  l = {
                trigger: "external",
                scrollInertia: r.scrollInertia,
                scrollEasing: "mcsEaseInOut",
                moveDragger: !1,
                timeout: 60,
                callbacks: !0,
                onStart: !0,
                onUpdate: !0,
                onComplete: !0
              },
                  s = e.extend(!0, {}, l, o),
                  c = Y.call(this, t),
                  d = s.scrollInertia > 0 && s.scrollInertia < 17 ? 17 : s.scrollInertia;
              c[0] = X.call(this, c[0], "y"), c[1] = X.call(this, c[1], "x"), s.moveDragger && (c[0] *= i.scrollRatio.y, c[1] *= i.scrollRatio.x), s.dur = ne() ? 0 : d, setTimeout(function () {
                null !== c[0] && "undefined" != typeof c[0] && "x" !== r.axis && i.overflowed[0] && (s.dir = "y", s.overwrite = "all", G(n, c[0].toString(), s)), null !== c[1] && "undefined" != typeof c[1] && "y" !== r.axis && i.overflowed[1] && (s.dir = "x", s.overwrite = "none", G(n, c[1].toString(), s));
              }, s.timeout);
            }
          });
        }
      },
      stop: function () {
        var t = f.call(this);
        return e(t).each(function () {
          var t = e(this);
          t.data(a) && Q(t);
        });
      },
      disable: function (t) {
        var o = f.call(this);
        return e(o).each(function () {
          var o = e(this);

          if (o.data(a)) {
            o.data(a);
            N.call(this, "remove"), k.call(this), t && B.call(this), M.call(this, !0), o.addClass(d[3]);
          }
        });
      },
      destroy: function () {
        var t = f.call(this);
        return e(t).each(function () {
          var n = e(this);

          if (n.data(a)) {
            var i = n.data(a),
                r = i.opt,
                l = e("#mCSB_" + i.idx),
                s = e("#mCSB_" + i.idx + "_container"),
                c = e(".mCSB_" + i.idx + "_scrollbar");
            r.live && m(r.liveSelector || e(t).selector), N.call(this, "remove"), k.call(this), B.call(this), n.removeData(a), $(this, "mcs"), c.remove(), s.find("img." + d[2]).removeClass(d[2]), l.replaceWith(s.contents()), n.removeClass(o + " _" + a + "_" + i.idx + " " + d[6] + " " + d[7] + " " + d[5] + " " + d[3]).addClass(d[4]);
          }
        });
      }
    },
        f = function () {
      return "object" != typeof e(this) || e(this).length < 1 ? n : this;
    },
        h = function (t) {
      var o = ["rounded", "rounded-dark", "rounded-dots", "rounded-dots-dark"],
          a = ["rounded-dots", "rounded-dots-dark", "3d", "3d-dark", "3d-thick", "3d-thick-dark", "inset", "inset-dark", "inset-2", "inset-2-dark", "inset-3", "inset-3-dark"],
          n = ["minimal", "minimal-dark"],
          i = ["minimal", "minimal-dark"],
          r = ["minimal", "minimal-dark"];
      t.autoDraggerLength = e.inArray(t.theme, o) > -1 ? !1 : t.autoDraggerLength, t.autoExpandScrollbar = e.inArray(t.theme, a) > -1 ? !1 : t.autoExpandScrollbar, t.scrollButtons.enable = e.inArray(t.theme, n) > -1 ? !1 : t.scrollButtons.enable, t.autoHideScrollbar = e.inArray(t.theme, i) > -1 ? !0 : t.autoHideScrollbar, t.scrollbarPosition = e.inArray(t.theme, r) > -1 ? "outside" : t.scrollbarPosition;
    },
        m = function (e) {
      l[e] && (clearTimeout(l[e]), $(l, e));
    },
        p = function (e) {
      return "yx" === e || "xy" === e || "auto" === e ? "yx" : "x" === e || "horizontal" === e ? "x" : "y";
    },
        g = function (e) {
      return "stepped" === e || "pixels" === e || "step" === e || "click" === e ? "stepped" : "stepless";
    },
        v = function () {
      var t = e(this),
          n = t.data(a),
          i = n.opt,
          r = i.autoExpandScrollbar ? " " + d[1] + "_expand" : "",
          l = ["<div id='mCSB_" + n.idx + "_scrollbar_vertical' class='mCSB_scrollTools mCSB_" + n.idx + "_scrollbar mCS-" + i.theme + " mCSB_scrollTools_vertical" + r + "'><div class='" + d[12] + "'><div id='mCSB_" + n.idx + "_dragger_vertical' class='mCSB_dragger' style='position:absolute;'><div class='mCSB_dragger_bar' /></div><div class='mCSB_draggerRail' /></div></div>", "<div id='mCSB_" + n.idx + "_scrollbar_horizontal' class='mCSB_scrollTools mCSB_" + n.idx + "_scrollbar mCS-" + i.theme + " mCSB_scrollTools_horizontal" + r + "'><div class='" + d[12] + "'><div id='mCSB_" + n.idx + "_dragger_horizontal' class='mCSB_dragger' style='position:absolute;'><div class='mCSB_dragger_bar' /></div><div class='mCSB_draggerRail' /></div></div>"],
          s = "yx" === i.axis ? "mCSB_vertical_horizontal" : "x" === i.axis ? "mCSB_horizontal" : "mCSB_vertical",
          c = "yx" === i.axis ? l[0] + l[1] : "x" === i.axis ? l[1] : l[0],
          u = "yx" === i.axis ? "<div id='mCSB_" + n.idx + "_container_wrapper' class='mCSB_container_wrapper' />" : "",
          f = i.autoHideScrollbar ? " " + d[6] : "",
          h = "x" !== i.axis && "rtl" === n.langDir ? " " + d[7] : "";
      i.setWidth && t.css("width", i.setWidth), i.setHeight && t.css("height", i.setHeight), i.setLeft = "y" !== i.axis && "rtl" === n.langDir ? "989999px" : i.setLeft, t.addClass(o + " _" + a + "_" + n.idx + f + h).wrapInner("<div id='mCSB_" + n.idx + "' class='mCustomScrollBox mCS-" + i.theme + " " + s + "'><div id='mCSB_" + n.idx + "_container' class='mCSB_container' style='position:relative; top:" + i.setTop + "; left:" + i.setLeft + ";' dir='" + n.langDir + "' /></div>");
      var m = e("#mCSB_" + n.idx),
          p = e("#mCSB_" + n.idx + "_container");
      "y" === i.axis || i.advanced.autoExpandHorizontalScroll || p.css("width", x(p)), "outside" === i.scrollbarPosition ? ("static" === t.css("position") && t.css("position", "relative"), t.css("overflow", "visible"), m.addClass("mCSB_outside").after(c)) : (m.addClass("mCSB_inside").append(c), p.wrap(u)), w.call(this);
      var g = [e("#mCSB_" + n.idx + "_dragger_vertical"), e("#mCSB_" + n.idx + "_dragger_horizontal")];
      g[0].css("min-height", g[0].height()), g[1].css("min-width", g[1].width());
    },
        x = function (t) {
      var o = [t[0].scrollWidth, Math.max.apply(Math, t.children().map(function () {
        return e(this).outerWidth(!0);
      }).get())],
          a = t.parent().width();
      return o[0] > a ? o[0] : o[1] > a ? o[1] : "100%";
    },
        _ = function () {
      var t = e(this),
          o = t.data(a),
          n = o.opt,
          i = e("#mCSB_" + o.idx + "_container");

      if (n.advanced.autoExpandHorizontalScroll && "y" !== n.axis) {
        i.css({
          width: "auto",
          "min-width": 0,
          "overflow-x": "scroll"
        });
        var r = Math.ceil(i[0].scrollWidth);
        3 === n.advanced.autoExpandHorizontalScroll || 2 !== n.advanced.autoExpandHorizontalScroll && r > i.parent().width() ? i.css({
          width: r,
          "min-width": "100%",
          "overflow-x": "inherit"
        }) : i.css({
          "overflow-x": "inherit",
          position: "absolute"
        }).wrap("<div class='mCSB_h_wrapper' style='position:relative; left:0; width:999999px;' />").css({
          width: Math.ceil(i[0].getBoundingClientRect().right + .4) - Math.floor(i[0].getBoundingClientRect().left),
          "min-width": "100%",
          position: "relative"
        }).unwrap();
      }
    },
        w = function () {
      var t = e(this),
          o = t.data(a),
          n = o.opt,
          i = e(".mCSB_" + o.idx + "_scrollbar:first"),
          r = oe(n.scrollButtons.tabindex) ? "tabindex='" + n.scrollButtons.tabindex + "'" : "",
          l = ["<a href='#' class='" + d[13] + "' " + r + " />", "<a href='#' class='" + d[14] + "' " + r + " />", "<a href='#' class='" + d[15] + "' " + r + " />", "<a href='#' class='" + d[16] + "' " + r + " />"],
          s = ["x" === n.axis ? l[2] : l[0], "x" === n.axis ? l[3] : l[1], l[2], l[3]];
      n.scrollButtons.enable && i.prepend(s[0]).append(s[1]).next(".mCSB_scrollTools").prepend(s[2]).append(s[3]);
    },
        S = function () {
      var t = e(this),
          o = t.data(a),
          n = e("#mCSB_" + o.idx),
          i = e("#mCSB_" + o.idx + "_container"),
          r = [e("#mCSB_" + o.idx + "_dragger_vertical"), e("#mCSB_" + o.idx + "_dragger_horizontal")],
          l = [n.height() / i.outerHeight(!1), n.width() / i.outerWidth(!1)],
          c = [parseInt(r[0].css("min-height")), Math.round(l[0] * r[0].parent().height()), parseInt(r[1].css("min-width")), Math.round(l[1] * r[1].parent().width())],
          d = s && c[1] < c[0] ? c[0] : c[1],
          u = s && c[3] < c[2] ? c[2] : c[3];
      r[0].css({
        height: d,
        "max-height": r[0].parent().height() - 10
      }).find(".mCSB_dragger_bar").css({
        "line-height": c[0] + "px"
      }), r[1].css({
        width: u,
        "max-width": r[1].parent().width() - 10
      });
    },
        b = function () {
      var t = e(this),
          o = t.data(a),
          n = e("#mCSB_" + o.idx),
          i = e("#mCSB_" + o.idx + "_container"),
          r = [e("#mCSB_" + o.idx + "_dragger_vertical"), e("#mCSB_" + o.idx + "_dragger_horizontal")],
          l = [i.outerHeight(!1) - n.height(), i.outerWidth(!1) - n.width()],
          s = [l[0] / (r[0].parent().height() - r[0].height()), l[1] / (r[1].parent().width() - r[1].width())];
      o.scrollRatio = {
        y: s[0],
        x: s[1]
      };
    },
        C = function (e, t, o) {
      var a = o ? d[0] + "_expanded" : "",
          n = e.closest(".mCSB_scrollTools");
      "active" === t ? (e.toggleClass(d[0] + " " + a), n.toggleClass(d[1]), e[0]._draggable = e[0]._draggable ? 0 : 1) : e[0]._draggable || ("hide" === t ? (e.removeClass(d[0]), n.removeClass(d[1])) : (e.addClass(d[0]), n.addClass(d[1])));
    },
        y = function () {
      var t = e(this),
          o = t.data(a),
          n = e("#mCSB_" + o.idx),
          i = e("#mCSB_" + o.idx + "_container"),
          r = null == o.overflowed ? i.height() : i.outerHeight(!1),
          l = null == o.overflowed ? i.width() : i.outerWidth(!1),
          s = i[0].scrollHeight,
          c = i[0].scrollWidth;
      return s > r && (r = s), c > l && (l = c), [r > n.height(), l > n.width()];
    },
        B = function () {
      var t = e(this),
          o = t.data(a),
          n = o.opt,
          i = e("#mCSB_" + o.idx),
          r = e("#mCSB_" + o.idx + "_container"),
          l = [e("#mCSB_" + o.idx + "_dragger_vertical"), e("#mCSB_" + o.idx + "_dragger_horizontal")];

      if (Q(t), ("x" !== n.axis && !o.overflowed[0] || "y" === n.axis && o.overflowed[0]) && (l[0].add(r).css("top", 0), G(t, "_resetY")), "y" !== n.axis && !o.overflowed[1] || "x" === n.axis && o.overflowed[1]) {
        var s = dx = 0;
        "rtl" === o.langDir && (s = i.width() - r.outerWidth(!1), dx = Math.abs(s / o.scrollRatio.x)), r.css("left", s), l[1].css("left", dx), G(t, "_resetX");
      }
    },
        T = function () {
      function t() {
        r = setTimeout(function () {
          e.event.special.mousewheel ? (clearTimeout(r), W.call(o[0])) : t();
        }, 100);
      }

      var o = e(this),
          n = o.data(a),
          i = n.opt;

      if (!n.bindEvents) {
        if (I.call(this), i.contentTouchScroll && D.call(this), E.call(this), i.mouseWheel.enable) {
          var r;
          t();
        }

        P.call(this), U.call(this), i.advanced.autoScrollOnFocus && H.call(this), i.scrollButtons.enable && F.call(this), i.keyboard.enable && q.call(this), n.bindEvents = !0;
      }
    },
        k = function () {
      var t = e(this),
          o = t.data(a),
          n = o.opt,
          i = a + "_" + o.idx,
          r = ".mCSB_" + o.idx + "_scrollbar",
          l = e("#mCSB_" + o.idx + ",#mCSB_" + o.idx + "_container,#mCSB_" + o.idx + "_container_wrapper," + r + " ." + d[12] + ",#mCSB_" + o.idx + "_dragger_vertical,#mCSB_" + o.idx + "_dragger_horizontal," + r + ">a"),
          s = e("#mCSB_" + o.idx + "_container");
      n.advanced.releaseDraggableSelectors && l.add(e(n.advanced.releaseDraggableSelectors)), n.advanced.extraDraggableSelectors && l.add(e(n.advanced.extraDraggableSelectors)), o.bindEvents && (e(document).add(e(!A() || top.document)).unbind("." + i), l.each(function () {
        e(this).unbind("." + i);
      }), clearTimeout(t[0]._focusTimeout), $(t[0], "_focusTimeout"), clearTimeout(o.sequential.step), $(o.sequential, "step"), clearTimeout(s[0].onCompleteTimeout), $(s[0], "onCompleteTimeout"), o.bindEvents = !1);
    },
        M = function (t) {
      var o = e(this),
          n = o.data(a),
          i = n.opt,
          r = e("#mCSB_" + n.idx + "_container_wrapper"),
          l = r.length ? r : e("#mCSB_" + n.idx + "_container"),
          s = [e("#mCSB_" + n.idx + "_scrollbar_vertical"), e("#mCSB_" + n.idx + "_scrollbar_horizontal")],
          c = [s[0].find(".mCSB_dragger"), s[1].find(".mCSB_dragger")];
      "x" !== i.axis && (n.overflowed[0] && !t ? (s[0].add(c[0]).add(s[0].children("a")).css("display", "block"), l.removeClass(d[8] + " " + d[10])) : (i.alwaysShowScrollbar ? (2 !== i.alwaysShowScrollbar && c[0].css("display", "none"), l.removeClass(d[10])) : (s[0].css("display", "none"), l.addClass(d[10])), l.addClass(d[8]))), "y" !== i.axis && (n.overflowed[1] && !t ? (s[1].add(c[1]).add(s[1].children("a")).css("display", "block"), l.removeClass(d[9] + " " + d[11])) : (i.alwaysShowScrollbar ? (2 !== i.alwaysShowScrollbar && c[1].css("display", "none"), l.removeClass(d[11])) : (s[1].css("display", "none"), l.addClass(d[11])), l.addClass(d[9]))), n.overflowed[0] || n.overflowed[1] ? o.removeClass(d[5]) : o.addClass(d[5]);
    },
        O = function (t) {
      var o = t.type,
          a = t.target.ownerDocument !== document && null !== frameElement ? [e(frameElement).offset().top, e(frameElement).offset().left] : null,
          n = A() && t.target.ownerDocument !== top.document && null !== frameElement ? [e(t.view.frameElement).offset().top, e(t.view.frameElement).offset().left] : [0, 0];

      switch (o) {
        case "pointerdown":
        case "MSPointerDown":
        case "pointermove":
        case "MSPointerMove":
        case "pointerup":
        case "MSPointerUp":
          return a ? [t.originalEvent.pageY - a[0] + n[0], t.originalEvent.pageX - a[1] + n[1], !1] : [t.originalEvent.pageY, t.originalEvent.pageX, !1];

        case "touchstart":
        case "touchmove":
        case "touchend":
          var i = t.originalEvent.touches[0] || t.originalEvent.changedTouches[0],
              r = t.originalEvent.touches.length || t.originalEvent.changedTouches.length;
          return t.target.ownerDocument !== document ? [i.screenY, i.screenX, r > 1] : [i.pageY, i.pageX, r > 1];

        default:
          return a ? [t.pageY - a[0] + n[0], t.pageX - a[1] + n[1], !1] : [t.pageY, t.pageX, !1];
      }
    },
        I = function () {
      function t(e, t, a, n) {
        if (h[0].idleTimer = d.scrollInertia < 233 ? 250 : 0, o.attr("id") === f[1]) var i = "x",
            s = (o[0].offsetLeft - t + n) * l.scrollRatio.x;else var i = "y",
            s = (o[0].offsetTop - e + a) * l.scrollRatio.y;
        G(r, s.toString(), {
          dir: i,
          drag: !0
        });
      }

      var o,
          n,
          i,
          r = e(this),
          l = r.data(a),
          d = l.opt,
          u = a + "_" + l.idx,
          f = ["mCSB_" + l.idx + "_dragger_vertical", "mCSB_" + l.idx + "_dragger_horizontal"],
          h = e("#mCSB_" + l.idx + "_container"),
          m = e("#" + f[0] + ",#" + f[1]),
          p = d.advanced.releaseDraggableSelectors ? m.add(e(d.advanced.releaseDraggableSelectors)) : m,
          g = d.advanced.extraDraggableSelectors ? e(!A() || top.document).add(e(d.advanced.extraDraggableSelectors)) : e(!A() || top.document);
      m.bind("contextmenu." + u, function (e) {
        e.preventDefault();
      }).bind("mousedown." + u + " touchstart." + u + " pointerdown." + u + " MSPointerDown." + u, function (t) {
        if (t.stopImmediatePropagation(), t.preventDefault(), ee(t)) {
          c = !0, s && (document.onselectstart = function () {
            return !1;
          }), L.call(h, !1), Q(r), o = e(this);
          var a = o.offset(),
              l = O(t)[0] - a.top,
              u = O(t)[1] - a.left,
              f = o.height() + a.top,
              m = o.width() + a.left;
          f > l && l > 0 && m > u && u > 0 && (n = l, i = u), C(o, "active", d.autoExpandScrollbar);
        }
      }).bind("touchmove." + u, function (e) {
        e.stopImmediatePropagation(), e.preventDefault();
        var a = o.offset(),
            r = O(e)[0] - a.top,
            l = O(e)[1] - a.left;
        t(n, i, r, l);
      }), e(document).add(g).bind("mousemove." + u + " pointermove." + u + " MSPointerMove." + u, function (e) {
        if (o) {
          var a = o.offset(),
              r = O(e)[0] - a.top,
              l = O(e)[1] - a.left;
          if (n === r && i === l) return;
          t(n, i, r, l);
        }
      }).add(p).bind("mouseup." + u + " touchend." + u + " pointerup." + u + " MSPointerUp." + u, function () {
        o && (C(o, "active", d.autoExpandScrollbar), o = null), c = !1, s && (document.onselectstart = null), L.call(h, !0);
      });
    },
        D = function () {
      function o(e) {
        if (!te(e) || c || O(e)[2]) return void (t = 0);
        t = 1, b = 0, C = 0, d = 1, y.removeClass("mCS_touch_action");
        var o = I.offset();
        u = O(e)[0] - o.top, f = O(e)[1] - o.left, z = [O(e)[0], O(e)[1]];
      }

      function n(e) {
        if (te(e) && !c && !O(e)[2] && (T.documentTouchScroll || e.preventDefault(), e.stopImmediatePropagation(), (!C || b) && d)) {
          g = K();
          var t = M.offset(),
              o = O(e)[0] - t.top,
              a = O(e)[1] - t.left,
              n = "mcsLinearOut";
          if (E.push(o), W.push(a), z[2] = Math.abs(O(e)[0] - z[0]), z[3] = Math.abs(O(e)[1] - z[1]), B.overflowed[0]) var i = D[0].parent().height() - D[0].height(),
              r = u - o > 0 && o - u > -(i * B.scrollRatio.y) && (2 * z[3] < z[2] || "yx" === T.axis);
          if (B.overflowed[1]) var l = D[1].parent().width() - D[1].width(),
              h = f - a > 0 && a - f > -(l * B.scrollRatio.x) && (2 * z[2] < z[3] || "yx" === T.axis);
          r || h ? (U || e.preventDefault(), b = 1) : (C = 1, y.addClass("mCS_touch_action")), U && e.preventDefault(), w = "yx" === T.axis ? [u - o, f - a] : "x" === T.axis ? [null, f - a] : [u - o, null], I[0].idleTimer = 250, B.overflowed[0] && s(w[0], R, n, "y", "all", !0), B.overflowed[1] && s(w[1], R, n, "x", L, !0);
        }
      }

      function i(e) {
        if (!te(e) || c || O(e)[2]) return void (t = 0);
        t = 1, e.stopImmediatePropagation(), Q(y), p = K();
        var o = M.offset();
        h = O(e)[0] - o.top, m = O(e)[1] - o.left, E = [], W = [];
      }

      function r(e) {
        if (te(e) && !c && !O(e)[2]) {
          d = 0, e.stopImmediatePropagation(), b = 0, C = 0, v = K();
          var t = M.offset(),
              o = O(e)[0] - t.top,
              a = O(e)[1] - t.left;

          if (!(v - g > 30)) {
            _ = 1e3 / (v - p);
            var n = "mcsEaseOut",
                i = 2.5 > _,
                r = i ? [E[E.length - 2], W[W.length - 2]] : [0, 0];
            x = i ? [o - r[0], a - r[1]] : [o - h, a - m];
            var u = [Math.abs(x[0]), Math.abs(x[1])];
            _ = i ? [Math.abs(x[0] / 4), Math.abs(x[1] / 4)] : [_, _];
            var f = [Math.abs(I[0].offsetTop) - x[0] * l(u[0] / _[0], _[0]), Math.abs(I[0].offsetLeft) - x[1] * l(u[1] / _[1], _[1])];
            w = "yx" === T.axis ? [f[0], f[1]] : "x" === T.axis ? [null, f[1]] : [f[0], null], S = [4 * u[0] + T.scrollInertia, 4 * u[1] + T.scrollInertia];
            var y = parseInt(T.contentTouchScroll) || 0;
            w[0] = u[0] > y ? w[0] : 0, w[1] = u[1] > y ? w[1] : 0, B.overflowed[0] && s(w[0], S[0], n, "y", L, !1), B.overflowed[1] && s(w[1], S[1], n, "x", L, !1);
          }
        }
      }

      function l(e, t) {
        var o = [1.5 * t, 2 * t, t / 1.5, t / 2];
        return e > 90 ? t > 4 ? o[0] : o[3] : e > 60 ? t > 3 ? o[3] : o[2] : e > 30 ? t > 8 ? o[1] : t > 6 ? o[0] : t > 4 ? t : o[2] : t > 8 ? t : o[3];
      }

      function s(e, t, o, a, n, i) {
        e && G(y, e.toString(), {
          dur: t,
          scrollEasing: o,
          dir: a,
          overwrite: n,
          drag: i
        });
      }

      var d,
          u,
          f,
          h,
          m,
          p,
          g,
          v,
          x,
          _,
          w,
          S,
          b,
          C,
          y = e(this),
          B = y.data(a),
          T = B.opt,
          k = a + "_" + B.idx,
          M = e("#mCSB_" + B.idx),
          I = e("#mCSB_" + B.idx + "_container"),
          D = [e("#mCSB_" + B.idx + "_dragger_vertical"), e("#mCSB_" + B.idx + "_dragger_horizontal")],
          E = [],
          W = [],
          R = 0,
          L = "yx" === T.axis ? "none" : "all",
          z = [],
          P = I.find("iframe"),
          H = ["touchstart." + k + " pointerdown." + k + " MSPointerDown." + k, "touchmove." + k + " pointermove." + k + " MSPointerMove." + k, "touchend." + k + " pointerup." + k + " MSPointerUp." + k],
          U = void 0 !== document.body.style.touchAction && "" !== document.body.style.touchAction;

      I.bind(H[0], function (e) {
        o(e);
      }).bind(H[1], function (e) {
        n(e);
      }), M.bind(H[0], function (e) {
        i(e);
      }).bind(H[2], function (e) {
        r(e);
      }), P.length && P.each(function () {
        e(this).bind("load", function () {
          A(this) && e(this.contentDocument || this.contentWindow.document).bind(H[0], function (e) {
            o(e), i(e);
          }).bind(H[1], function (e) {
            n(e);
          }).bind(H[2], function (e) {
            r(e);
          });
        });
      });
    },
        E = function () {
      function o() {
        return window.getSelection ? window.getSelection().toString() : document.selection && "Control" != document.selection.type ? document.selection.createRange().text : 0;
      }

      function n(e, t, o) {
        d.type = o && i ? "stepped" : "stepless", d.scrollAmount = 10, j(r, e, t, "mcsLinearOut", o ? 60 : null);
      }

      var i,
          r = e(this),
          l = r.data(a),
          s = l.opt,
          d = l.sequential,
          u = a + "_" + l.idx,
          f = e("#mCSB_" + l.idx + "_container"),
          h = f.parent();
      f.bind("mousedown." + u, function () {
        t || i || (i = 1, c = !0);
      }).add(document).bind("mousemove." + u, function (e) {
        if (!t && i && o()) {
          var a = f.offset(),
              r = O(e)[0] - a.top + f[0].offsetTop,
              c = O(e)[1] - a.left + f[0].offsetLeft;
          r > 0 && r < h.height() && c > 0 && c < h.width() ? d.step && n("off", null, "stepped") : ("x" !== s.axis && l.overflowed[0] && (0 > r ? n("on", 38) : r > h.height() && n("on", 40)), "y" !== s.axis && l.overflowed[1] && (0 > c ? n("on", 37) : c > h.width() && n("on", 39)));
        }
      }).bind("mouseup." + u + " dragend." + u, function () {
        t || (i && (i = 0, n("off", null)), c = !1);
      });
    },
        W = function () {
      function t(t, a) {
        if (Q(o), !z(o, t.target)) {
          var r = "auto" !== i.mouseWheel.deltaFactor ? parseInt(i.mouseWheel.deltaFactor) : s && t.deltaFactor < 100 ? 100 : t.deltaFactor || 100,
              d = i.scrollInertia;
          if ("x" === i.axis || "x" === i.mouseWheel.axis) var u = "x",
              f = [Math.round(r * n.scrollRatio.x), parseInt(i.mouseWheel.scrollAmount)],
              h = "auto" !== i.mouseWheel.scrollAmount ? f[1] : f[0] >= l.width() ? .9 * l.width() : f[0],
              m = Math.abs(e("#mCSB_" + n.idx + "_container")[0].offsetLeft),
              p = c[1][0].offsetLeft,
              g = c[1].parent().width() - c[1].width(),
              v = "y" === i.mouseWheel.axis ? t.deltaY || a : t.deltaX;else var u = "y",
              f = [Math.round(r * n.scrollRatio.y), parseInt(i.mouseWheel.scrollAmount)],
              h = "auto" !== i.mouseWheel.scrollAmount ? f[1] : f[0] >= l.height() ? .9 * l.height() : f[0],
              m = Math.abs(e("#mCSB_" + n.idx + "_container")[0].offsetTop),
              p = c[0][0].offsetTop,
              g = c[0].parent().height() - c[0].height(),
              v = t.deltaY || a;
          "y" === u && !n.overflowed[0] || "x" === u && !n.overflowed[1] || ((i.mouseWheel.invert || t.webkitDirectionInvertedFromDevice) && (v = -v), i.mouseWheel.normalizeDelta && (v = 0 > v ? -1 : 1), (v > 0 && 0 !== p || 0 > v && p !== g || i.mouseWheel.preventDefault) && (t.stopImmediatePropagation(), t.preventDefault()), t.deltaFactor < 5 && !i.mouseWheel.normalizeDelta && (h = t.deltaFactor, d = 17), G(o, (m - v * h).toString(), {
            dir: u,
            dur: d
          }));
        }
      }

      if (e(this).data(a)) {
        var o = e(this),
            n = o.data(a),
            i = n.opt,
            r = a + "_" + n.idx,
            l = e("#mCSB_" + n.idx),
            c = [e("#mCSB_" + n.idx + "_dragger_vertical"), e("#mCSB_" + n.idx + "_dragger_horizontal")],
            d = e("#mCSB_" + n.idx + "_container").find("iframe");
        d.length && d.each(function () {
          e(this).bind("load", function () {
            A(this) && e(this.contentDocument || this.contentWindow.document).bind("mousewheel." + r, function (e, o) {
              t(e, o);
            });
          });
        }), l.bind("mousewheel." + r, function (e, o) {
          t(e, o);
        });
      }
    },
        R = new Object(),
        A = function (t) {
      var o = !1,
          a = !1,
          n = null;
      if (void 0 === t ? a = "#empty" : void 0 !== e(t).attr("id") && (a = e(t).attr("id")), a !== !1 && void 0 !== R[a]) return R[a];

      if (t) {
        try {
          var i = t.contentDocument || t.contentWindow.document;
          n = i.body.innerHTML;
        } catch (r) {}

        o = null !== n;
      } else {
        try {
          var i = top.document;
          n = i.body.innerHTML;
        } catch (r) {}

        o = null !== n;
      }

      return a !== !1 && (R[a] = o), o;
    },
        L = function (e) {
      var t = this.find("iframe");

      if (t.length) {
        var o = e ? "auto" : "none";
        t.css("pointer-events", o);
      }
    },
        z = function (t, o) {
      var n = o.nodeName.toLowerCase(),
          i = t.data(a).opt.mouseWheel.disableOver,
          r = ["select", "textarea"];
      return e.inArray(n, i) > -1 && !(e.inArray(n, r) > -1 && !e(o).is(":focus"));
    },
        P = function () {
      var t,
          o = e(this),
          n = o.data(a),
          i = a + "_" + n.idx,
          r = e("#mCSB_" + n.idx + "_container"),
          l = r.parent(),
          s = e(".mCSB_" + n.idx + "_scrollbar ." + d[12]);
      s.bind("mousedown." + i + " touchstart." + i + " pointerdown." + i + " MSPointerDown." + i, function (o) {
        c = !0, e(o.target).hasClass("mCSB_dragger") || (t = 1);
      }).bind("touchend." + i + " pointerup." + i + " MSPointerUp." + i, function () {
        c = !1;
      }).bind("click." + i, function (a) {
        if (t && (t = 0, e(a.target).hasClass(d[12]) || e(a.target).hasClass("mCSB_draggerRail"))) {
          Q(o);
          var i = e(this),
              s = i.find(".mCSB_dragger");

          if (i.parent(".mCSB_scrollTools_horizontal").length > 0) {
            if (!n.overflowed[1]) return;
            var c = "x",
                u = a.pageX > s.offset().left ? -1 : 1,
                f = Math.abs(r[0].offsetLeft) - u * (.9 * l.width());
          } else {
            if (!n.overflowed[0]) return;
            var c = "y",
                u = a.pageY > s.offset().top ? -1 : 1,
                f = Math.abs(r[0].offsetTop) - u * (.9 * l.height());
          }

          G(o, f.toString(), {
            dir: c,
            scrollEasing: "mcsEaseInOut"
          });
        }
      });
    },
        H = function () {
      var t = e(this),
          o = t.data(a),
          n = o.opt,
          i = a + "_" + o.idx,
          r = e("#mCSB_" + o.idx + "_container"),
          l = r.parent();
      r.bind("focusin." + i, function () {
        var o = e(document.activeElement),
            a = r.find(".mCustomScrollBox").length,
            i = 0;
        o.is(n.advanced.autoScrollOnFocus) && (Q(t), clearTimeout(t[0]._focusTimeout), t[0]._focusTimer = a ? (i + 17) * a : 0, t[0]._focusTimeout = setTimeout(function () {
          var e = [ae(o)[0], ae(o)[1]],
              a = [r[0].offsetTop, r[0].offsetLeft],
              s = [a[0] + e[0] >= 0 && a[0] + e[0] < l.height() - o.outerHeight(!1), a[1] + e[1] >= 0 && a[0] + e[1] < l.width() - o.outerWidth(!1)],
              c = "yx" !== n.axis || s[0] || s[1] ? "all" : "none";
          "x" === n.axis || s[0] || G(t, e[0].toString(), {
            dir: "y",
            scrollEasing: "mcsEaseInOut",
            overwrite: c,
            dur: i
          }), "y" === n.axis || s[1] || G(t, e[1].toString(), {
            dir: "x",
            scrollEasing: "mcsEaseInOut",
            overwrite: c,
            dur: i
          });
        }, t[0]._focusTimer));
      });
    },
        U = function () {
      var t = e(this),
          o = t.data(a),
          n = a + "_" + o.idx,
          i = e("#mCSB_" + o.idx + "_container").parent();
      i.bind("scroll." + n, function () {
        0 === i.scrollTop() && 0 === i.scrollLeft() || e(".mCSB_" + o.idx + "_scrollbar").css("visibility", "hidden");
      });
    },
        F = function () {
      var t = e(this),
          o = t.data(a),
          n = o.opt,
          i = o.sequential,
          r = a + "_" + o.idx,
          l = ".mCSB_" + o.idx + "_scrollbar",
          s = e(l + ">a");
      s.bind("contextmenu." + r, function (e) {
        e.preventDefault();
      }).bind("mousedown." + r + " touchstart." + r + " pointerdown." + r + " MSPointerDown." + r + " mouseup." + r + " touchend." + r + " pointerup." + r + " MSPointerUp." + r + " mouseout." + r + " pointerout." + r + " MSPointerOut." + r + " click." + r, function (a) {
        function r(e, o) {
          i.scrollAmount = n.scrollButtons.scrollAmount, j(t, e, o);
        }

        if (a.preventDefault(), ee(a)) {
          var l = e(this).attr("class");

          switch (i.type = n.scrollButtons.scrollType, a.type) {
            case "mousedown":
            case "touchstart":
            case "pointerdown":
            case "MSPointerDown":
              if ("stepped" === i.type) return;
              c = !0, o.tweenRunning = !1, r("on", l);
              break;

            case "mouseup":
            case "touchend":
            case "pointerup":
            case "MSPointerUp":
            case "mouseout":
            case "pointerout":
            case "MSPointerOut":
              if ("stepped" === i.type) return;
              c = !1, i.dir && r("off", l);
              break;

            case "click":
              if ("stepped" !== i.type || o.tweenRunning) return;
              r("on", l);
          }
        }
      });
    },
        q = function () {
      function t(t) {
        function a(e, t) {
          r.type = i.keyboard.scrollType, r.scrollAmount = i.keyboard.scrollAmount, "stepped" === r.type && n.tweenRunning || j(o, e, t);
        }

        switch (t.type) {
          case "blur":
            n.tweenRunning && r.dir && a("off", null);
            break;

          case "keydown":
          case "keyup":
            var l = t.keyCode ? t.keyCode : t.which,
                s = "on";

            if ("x" !== i.axis && (38 === l || 40 === l) || "y" !== i.axis && (37 === l || 39 === l)) {
              if ((38 === l || 40 === l) && !n.overflowed[0] || (37 === l || 39 === l) && !n.overflowed[1]) return;
              "keyup" === t.type && (s = "off"), e(document.activeElement).is(u) || (t.preventDefault(), t.stopImmediatePropagation(), a(s, l));
            } else if (33 === l || 34 === l) {
              if ((n.overflowed[0] || n.overflowed[1]) && (t.preventDefault(), t.stopImmediatePropagation()), "keyup" === t.type) {
                Q(o);
                var f = 34 === l ? -1 : 1;
                if ("x" === i.axis || "yx" === i.axis && n.overflowed[1] && !n.overflowed[0]) var h = "x",
                    m = Math.abs(c[0].offsetLeft) - f * (.9 * d.width());else var h = "y",
                    m = Math.abs(c[0].offsetTop) - f * (.9 * d.height());
                G(o, m.toString(), {
                  dir: h,
                  scrollEasing: "mcsEaseInOut"
                });
              }
            } else if ((35 === l || 36 === l) && !e(document.activeElement).is(u) && ((n.overflowed[0] || n.overflowed[1]) && (t.preventDefault(), t.stopImmediatePropagation()), "keyup" === t.type)) {
              if ("x" === i.axis || "yx" === i.axis && n.overflowed[1] && !n.overflowed[0]) var h = "x",
                  m = 35 === l ? Math.abs(d.width() - c.outerWidth(!1)) : 0;else var h = "y",
                  m = 35 === l ? Math.abs(d.height() - c.outerHeight(!1)) : 0;
              G(o, m.toString(), {
                dir: h,
                scrollEasing: "mcsEaseInOut"
              });
            }

        }
      }

      var o = e(this),
          n = o.data(a),
          i = n.opt,
          r = n.sequential,
          l = a + "_" + n.idx,
          s = e("#mCSB_" + n.idx),
          c = e("#mCSB_" + n.idx + "_container"),
          d = c.parent(),
          u = "input,textarea,select,datalist,keygen,[contenteditable='true']",
          f = c.find("iframe"),
          h = ["blur." + l + " keydown." + l + " keyup." + l];
      f.length && f.each(function () {
        e(this).bind("load", function () {
          A(this) && e(this.contentDocument || this.contentWindow.document).bind(h[0], function (e) {
            t(e);
          });
        });
      }), s.attr("tabindex", "0").bind(h[0], function (e) {
        t(e);
      });
    },
        j = function (t, o, n, i, r) {
      function l(e) {
        u.snapAmount && (f.scrollAmount = u.snapAmount instanceof Array ? "x" === f.dir[0] ? u.snapAmount[1] : u.snapAmount[0] : u.snapAmount);

        var o = "stepped" !== f.type,
            a = r ? r : e ? o ? p / 1.5 : g : 1e3 / 60,
            n = e ? o ? 7.5 : 40 : 2.5,
            s = [Math.abs(h[0].offsetTop), Math.abs(h[0].offsetLeft)],
            d = [c.scrollRatio.y > 10 ? 10 : c.scrollRatio.y, c.scrollRatio.x > 10 ? 10 : c.scrollRatio.x],
            m = "x" === f.dir[0] ? s[1] + f.dir[1] * (d[1] * n) : s[0] + f.dir[1] * (d[0] * n),
            v = "x" === f.dir[0] ? s[1] + f.dir[1] * parseInt(f.scrollAmount) : s[0] + f.dir[1] * parseInt(f.scrollAmount),
            x = "auto" !== f.scrollAmount ? v : m,
            _ = i ? i : e ? o ? "mcsLinearOut" : "mcsEaseInOut" : "mcsLinear",
            w = !!e;

        return e && 17 > a && (x = "x" === f.dir[0] ? s[1] : s[0]), G(t, x.toString(), {
          dir: f.dir[0],
          scrollEasing: _,
          dur: a,
          onComplete: w
        }), e ? void (f.dir = !1) : (clearTimeout(f.step), void (f.step = setTimeout(function () {
          l();
        }, a)));
      }

      function s() {
        clearTimeout(f.step), $(f, "step"), Q(t);
      }

      var c = t.data(a),
          u = c.opt,
          f = c.sequential,
          h = e("#mCSB_" + c.idx + "_container"),
          m = "stepped" === f.type,
          p = u.scrollInertia < 26 ? 26 : u.scrollInertia,
          g = u.scrollInertia < 1 ? 17 : u.scrollInertia;

      switch (o) {
        case "on":
          if (f.dir = [n === d[16] || n === d[15] || 39 === n || 37 === n ? "x" : "y", n === d[13] || n === d[15] || 38 === n || 37 === n ? -1 : 1], Q(t), oe(n) && "stepped" === f.type) return;
          l(m);
          break;

        case "off":
          s(), (m || c.tweenRunning && f.dir) && l(!0);
      }
    },
        Y = function (t) {
      var o = e(this).data(a).opt,
          n = [];
      return "function" == typeof t && (t = t()), t instanceof Array ? n = t.length > 1 ? [t[0], t[1]] : "x" === o.axis ? [null, t[0]] : [t[0], null] : (n[0] = t.y ? t.y : t.x || "x" === o.axis ? null : t, n[1] = t.x ? t.x : t.y || "y" === o.axis ? null : t), "function" == typeof n[0] && (n[0] = n[0]()), "function" == typeof n[1] && (n[1] = n[1]()), n;
    },
        X = function (t, o) {
      if (null != t && "undefined" != typeof t) {
        var n = e(this),
            i = n.data(a),
            r = i.opt,
            l = e("#mCSB_" + i.idx + "_container"),
            s = l.parent(),
            c = typeof t;
        o || (o = "x" === r.axis ? "x" : "y");
        var d = "x" === o ? l.outerWidth(!1) - s.width() : l.outerHeight(!1) - s.height(),
            f = "x" === o ? l[0].offsetLeft : l[0].offsetTop,
            h = "x" === o ? "left" : "top";

        switch (c) {
          case "function":
            return t();

          case "object":
            var m = t.jquery ? t : e(t);
            if (!m.length) return;
            return "x" === o ? ae(m)[1] : ae(m)[0];

          case "string":
          case "number":
            if (oe(t)) return Math.abs(t);
            if (-1 !== t.indexOf("%")) return Math.abs(d * parseInt(t) / 100);
            if (-1 !== t.indexOf("-=")) return Math.abs(f - parseInt(t.split("-=")[1]));

            if (-1 !== t.indexOf("+=")) {
              var p = f + parseInt(t.split("+=")[1]);
              return p >= 0 ? 0 : Math.abs(p);
            }

            if (-1 !== t.indexOf("px") && oe(t.split("px")[0])) return Math.abs(t.split("px")[0]);
            if ("top" === t || "left" === t) return 0;
            if ("bottom" === t) return Math.abs(s.height() - l.outerHeight(!1));
            if ("right" === t) return Math.abs(s.width() - l.outerWidth(!1));

            if ("first" === t || "last" === t) {
              var m = l.find(":" + t);
              return "x" === o ? ae(m)[1] : ae(m)[0];
            }

            return e(t).length ? "x" === o ? ae(e(t))[1] : ae(e(t))[0] : (l.css(h, t), void u.update.call(null, n[0]));
        }
      }
    },
        N = function (t) {
      function o() {
        return clearTimeout(f[0].autoUpdate), 0 === l.parents("html").length ? void (l = null) : void (f[0].autoUpdate = setTimeout(function () {
          return c.advanced.updateOnSelectorChange && (s.poll.change.n = i(), s.poll.change.n !== s.poll.change.o) ? (s.poll.change.o = s.poll.change.n, void r(3)) : c.advanced.updateOnContentResize && (s.poll.size.n = l[0].scrollHeight + l[0].scrollWidth + f[0].offsetHeight + l[0].offsetHeight + l[0].offsetWidth, s.poll.size.n !== s.poll.size.o) ? (s.poll.size.o = s.poll.size.n, void r(1)) : !c.advanced.updateOnImageLoad || "auto" === c.advanced.updateOnImageLoad && "y" === c.axis || (s.poll.img.n = f.find("img").length, s.poll.img.n === s.poll.img.o) ? void ((c.advanced.updateOnSelectorChange || c.advanced.updateOnContentResize || c.advanced.updateOnImageLoad) && o()) : (s.poll.img.o = s.poll.img.n, void f.find("img").each(function () {
            n(this);
          }));
        }, c.advanced.autoUpdateTimeout));
      }

      function n(t) {
        function o(e, t) {
          return function () {
            return t.apply(e, arguments);
          };
        }

        function a() {
          this.onload = null, e(t).addClass(d[2]), r(2);
        }

        if (e(t).hasClass(d[2])) return void r();
        var n = new Image();
        n.onload = o(n, a), n.src = t.src;
      }

      function i() {
        c.advanced.updateOnSelectorChange === !0 && (c.advanced.updateOnSelectorChange = "*");
        var e = 0,
            t = f.find(c.advanced.updateOnSelectorChange);
        return c.advanced.updateOnSelectorChange && t.length > 0 && t.each(function () {
          e += this.offsetHeight + this.offsetWidth;
        }), e;
      }

      function r(e) {
        clearTimeout(f[0].autoUpdate), u.update.call(null, l[0], e);
      }

      var l = e(this),
          s = l.data(a),
          c = s.opt,
          f = e("#mCSB_" + s.idx + "_container");
      return t ? (clearTimeout(f[0].autoUpdate), void $(f[0], "autoUpdate")) : void o();
    },
        V = function (e, t, o) {
      return Math.round(e / t) * t - o;
    },
        Q = function (t) {
      var o = t.data(a),
          n = e("#mCSB_" + o.idx + "_container,#mCSB_" + o.idx + "_container_wrapper,#mCSB_" + o.idx + "_dragger_vertical,#mCSB_" + o.idx + "_dragger_horizontal");
      n.each(function () {
        Z.call(this);
      });
    },
        G = function (t, o, n) {
      function i(e) {
        return s && c.callbacks[e] && "function" == typeof c.callbacks[e];
      }

      function r() {
        return [c.callbacks.alwaysTriggerOffsets || w >= S[0] + y, c.callbacks.alwaysTriggerOffsets || -B >= w];
      }

      function l() {
        var e = [h[0].offsetTop, h[0].offsetLeft],
            o = [x[0].offsetTop, x[0].offsetLeft],
            a = [h.outerHeight(!1), h.outerWidth(!1)],
            i = [f.height(), f.width()];
        t[0].mcs = {
          content: h,
          top: e[0],
          left: e[1],
          draggerTop: o[0],
          draggerLeft: o[1],
          topPct: Math.round(100 * Math.abs(e[0]) / (Math.abs(a[0]) - i[0])),
          leftPct: Math.round(100 * Math.abs(e[1]) / (Math.abs(a[1]) - i[1])),
          direction: n.dir
        };
      }

      var s = t.data(a),
          c = s.opt,
          d = {
        trigger: "internal",
        dir: "y",
        scrollEasing: "mcsEaseOut",
        drag: !1,
        dur: c.scrollInertia,
        overwrite: "all",
        callbacks: !0,
        onStart: !0,
        onUpdate: !0,
        onComplete: !0
      },
          n = e.extend(d, n),
          u = [n.dur, n.drag ? 0 : n.dur],
          f = e("#mCSB_" + s.idx),
          h = e("#mCSB_" + s.idx + "_container"),
          m = h.parent(),
          p = c.callbacks.onTotalScrollOffset ? Y.call(t, c.callbacks.onTotalScrollOffset) : [0, 0],
          g = c.callbacks.onTotalScrollBackOffset ? Y.call(t, c.callbacks.onTotalScrollBackOffset) : [0, 0];

      if (s.trigger = n.trigger, 0 === m.scrollTop() && 0 === m.scrollLeft() || (e(".mCSB_" + s.idx + "_scrollbar").css("visibility", "visible"), m.scrollTop(0).scrollLeft(0)), "_resetY" !== o || s.contentReset.y || (i("onOverflowYNone") && c.callbacks.onOverflowYNone.call(t[0]), s.contentReset.y = 1), "_resetX" !== o || s.contentReset.x || (i("onOverflowXNone") && c.callbacks.onOverflowXNone.call(t[0]), s.contentReset.x = 1), "_resetY" !== o && "_resetX" !== o) {
        if (!s.contentReset.y && t[0].mcs || !s.overflowed[0] || (i("onOverflowY") && c.callbacks.onOverflowY.call(t[0]), s.contentReset.x = null), !s.contentReset.x && t[0].mcs || !s.overflowed[1] || (i("onOverflowX") && c.callbacks.onOverflowX.call(t[0]), s.contentReset.x = null), c.snapAmount) {
          var v = c.snapAmount instanceof Array ? "x" === n.dir ? c.snapAmount[1] : c.snapAmount[0] : c.snapAmount;
          o = V(o, v, c.snapOffset);
        }

        switch (n.dir) {
          case "x":
            var x = e("#mCSB_" + s.idx + "_dragger_horizontal"),
                _ = "left",
                w = h[0].offsetLeft,
                S = [f.width() - h.outerWidth(!1), x.parent().width() - x.width()],
                b = [o, 0 === o ? 0 : o / s.scrollRatio.x],
                y = p[1],
                B = g[1],
                T = y > 0 ? y / s.scrollRatio.x : 0,
                k = B > 0 ? B / s.scrollRatio.x : 0;
            break;

          case "y":
            var x = e("#mCSB_" + s.idx + "_dragger_vertical"),
                _ = "top",
                w = h[0].offsetTop,
                S = [f.height() - h.outerHeight(!1), x.parent().height() - x.height()],
                b = [o, 0 === o ? 0 : o / s.scrollRatio.y],
                y = p[0],
                B = g[0],
                T = y > 0 ? y / s.scrollRatio.y : 0,
                k = B > 0 ? B / s.scrollRatio.y : 0;
        }

        b[1] < 0 || 0 === b[0] && 0 === b[1] ? b = [0, 0] : b[1] >= S[1] ? b = [S[0], S[1]] : b[0] = -b[0], t[0].mcs || (l(), i("onInit") && c.callbacks.onInit.call(t[0])), clearTimeout(h[0].onCompleteTimeout), J(x[0], _, Math.round(b[1]), u[1], n.scrollEasing), !s.tweenRunning && (0 === w && b[0] >= 0 || w === S[0] && b[0] <= S[0]) || J(h[0], _, Math.round(b[0]), u[0], n.scrollEasing, n.overwrite, {
          onStart: function () {
            n.callbacks && n.onStart && !s.tweenRunning && (i("onScrollStart") && (l(), c.callbacks.onScrollStart.call(t[0])), s.tweenRunning = !0, C(x), s.cbOffsets = r());
          },
          onUpdate: function () {
            n.callbacks && n.onUpdate && i("whileScrolling") && (l(), c.callbacks.whileScrolling.call(t[0]));
          },
          onComplete: function () {
            if (n.callbacks && n.onComplete) {
              "yx" === c.axis && clearTimeout(h[0].onCompleteTimeout);
              var e = h[0].idleTimer || 0;
              h[0].onCompleteTimeout = setTimeout(function () {
                i("onScroll") && (l(), c.callbacks.onScroll.call(t[0])), i("onTotalScroll") && b[1] >= S[1] - T && s.cbOffsets[0] && (l(), c.callbacks.onTotalScroll.call(t[0])), i("onTotalScrollBack") && b[1] <= k && s.cbOffsets[1] && (l(), c.callbacks.onTotalScrollBack.call(t[0])), s.tweenRunning = !1, h[0].idleTimer = 0, C(x, "hide");
              }, e);
            }
          }
        });
      }
    },
        J = function (e, t, o, a, n, i, r) {
      function l() {
        S.stop || (x || m.call(), x = K() - v, s(), x >= S.time && (S.time = x > S.time ? x + f - (x - S.time) : x + f - 1, S.time < x + 1 && (S.time = x + 1)), S.time < a ? S.id = h(l) : g.call());
      }

      function s() {
        a > 0 ? (S.currVal = u(S.time, _, b, a, n), w[t] = Math.round(S.currVal) + "px") : w[t] = o + "px", p.call();
      }

      function c() {
        f = 1e3 / 60, S.time = x + f, h = window.requestAnimationFrame ? window.requestAnimationFrame : function (e) {
          return s(), setTimeout(e, .01);
        }, S.id = h(l);
      }

      function d() {
        null != S.id && (window.requestAnimationFrame ? window.cancelAnimationFrame(S.id) : clearTimeout(S.id), S.id = null);
      }

      function u(e, t, o, a, n) {
        switch (n) {
          case "linear":
          case "mcsLinear":
            return o * e / a + t;

          case "mcsLinearOut":
            return e /= a, e--, o * Math.sqrt(1 - e * e) + t;

          case "easeInOutSmooth":
            return e /= a / 2, 1 > e ? o / 2 * e * e + t : (e--, -o / 2 * (e * (e - 2) - 1) + t);

          case "easeInOutStrong":
            return e /= a / 2, 1 > e ? o / 2 * Math.pow(2, 10 * (e - 1)) + t : (e--, o / 2 * (-Math.pow(2, -10 * e) + 2) + t);

          case "easeInOut":
          case "mcsEaseInOut":
            return e /= a / 2, 1 > e ? o / 2 * e * e * e + t : (e -= 2, o / 2 * (e * e * e + 2) + t);

          case "easeOutSmooth":
            return e /= a, e--, -o * (e * e * e * e - 1) + t;

          case "easeOutStrong":
            return o * (-Math.pow(2, -10 * e / a) + 1) + t;

          case "easeOut":
          case "mcsEaseOut":
          default:
            var i = (e /= a) * e,
                r = i * e;
            return t + o * (.499999999999997 * r * i + -2.5 * i * i + 5.5 * r + -6.5 * i + 4 * e);
        }
      }

      e._mTween || (e._mTween = {
        top: {},
        left: {}
      });

      var f,
          h,
          r = r || {},
          m = r.onStart || function () {},
          p = r.onUpdate || function () {},
          g = r.onComplete || function () {},
          v = K(),
          x = 0,
          _ = e.offsetTop,
          w = e.style,
          S = e._mTween[t];

      "left" === t && (_ = e.offsetLeft);
      var b = o - _;
      S.stop = 0, "none" !== i && d(), c();
    },
        K = function () {
      return window.performance && window.performance.now ? window.performance.now() : window.performance && window.performance.webkitNow ? window.performance.webkitNow() : Date.now ? Date.now() : new Date().getTime();
    },
        Z = function () {
      var e = this;
      e._mTween || (e._mTween = {
        top: {},
        left: {}
      });

      for (var t = ["top", "left"], o = 0; o < t.length; o++) {
        var a = t[o];
        e._mTween[a].id && (window.requestAnimationFrame ? window.cancelAnimationFrame(e._mTween[a].id) : clearTimeout(e._mTween[a].id), e._mTween[a].id = null, e._mTween[a].stop = 1);
      }
    },
        $ = function (e, t) {
      try {
        delete e[t];
      } catch (o) {
        e[t] = null;
      }
    },
        ee = function (e) {
      return !(e.which && 1 !== e.which);
    },
        te = function (e) {
      var t = e.originalEvent.pointerType;
      return !(t && "touch" !== t && 2 !== t);
    },
        oe = function (e) {
      return !isNaN(parseFloat(e)) && isFinite(e);
    },
        ae = function (e) {
      var t = e.parents(".mCSB_container");
      return [e.offset().top - t.offset().top, e.offset().left - t.offset().left];
    },
        ne = function () {
      function e() {
        var e = ["webkit", "moz", "ms", "o"];
        if ("hidden" in document) return "hidden";

        for (var t = 0; t < e.length; t++) if (e[t] + "Hidden" in document) return e[t] + "Hidden";

        return null;
      }

      var t = e();
      return t ? document[t] : !1;
    };

    e.fn[o] = function (t) {
      return u[t] ? u[t].apply(this, Array.prototype.slice.call(arguments, 1)) : "object" != typeof t && t ? void e.error("Method " + t + " does not exist") : u.init.apply(this, arguments);
    }, e[o] = function (t) {
      return u[t] ? u[t].apply(this, Array.prototype.slice.call(arguments, 1)) : "object" != typeof t && t ? void e.error("Method " + t + " does not exist") : u.init.apply(this, arguments);
    }, e[o].defaults = i, window[o] = !0, e(window).bind("load", function () {
      e(n)[o](), e.extend(e.expr[":"], {
        mcsInView: e.expr[":"].mcsInView || function (t) {
          var o,
              a,
              n = e(t),
              i = n.parents(".mCSB_container");
          if (i.length) return o = i.parent(), a = [i[0].offsetTop, i[0].offsetLeft], a[0] + ae(n)[0] >= 0 && a[0] + ae(n)[0] < o.height() - n.outerHeight(!1) && a[1] + ae(n)[1] >= 0 && a[1] + ae(n)[1] < o.width() - n.outerWidth(!1);
        },
        mcsInSight: e.expr[":"].mcsInSight || function (t, o, a) {
          var n,
              i,
              r,
              l,
              s = e(t),
              c = s.parents(".mCSB_container"),
              d = "exact" === a[3] ? [[1, 0], [1, 0]] : [[.9, .1], [.6, .4]];
          if (c.length) return n = [s.outerHeight(!1), s.outerWidth(!1)], r = [c[0].offsetTop + ae(s)[0], c[0].offsetLeft + ae(s)[1]], i = [c.parent()[0].offsetHeight, c.parent()[0].offsetWidth], l = [n[0] < i[0] ? d[0] : d[1], n[1] < i[1] ? d[0] : d[1]], r[0] - i[0] * l[0][0] < 0 && r[0] + n[0] - i[0] * l[0][1] >= 0 && r[1] - i[1] * l[1][0] < 0 && r[1] + n[1] - i[1] * l[1][1] >= 0;
        },
        mcsOverflow: e.expr[":"].mcsOverflow || function (t) {
          var o = e(t).data(a);
          if (o) return o.overflowed[0] || o.overflowed[1];
        }
      });
    });
  });
});
/** 
 * This is only currently needed in a separate file in libraries because 
 * the javascript files are loaded alphabetically from files and we need to 
 * ensure that our namespace object is loaded before all other ogame specific 
 * javascript code
 */

/*
 * global javascript namespace for ogame
 */
var ogame = ogame || {};
/*!
 * Select2 4.0.0
 * https://select2.github.io
 *
 * Released under the MIT license
 * https://github.com/select2/select2/blob/master/LICENSE.md
 */
(function (factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['jquery'], factory);
  } else if (typeof exports === 'object') {
    // Node/CommonJS
    factory(require('jquery'));
  } else {
    // Browser globals
    factory(jQuery);
  }
})(function (jQuery) {
  // This is needed so we can catch the AMD loader configuration and use it
  // The inner file should be wrapped (by `banner.start.js`) in a function that
  // returns the AMD loader references.
  var S2 = function () {
    // Restore the Select2 AMD loader so it can be used
    // Needed mostly in the language files, where the loader is not inserted
    if (jQuery && jQuery.fn && jQuery.fn.select2 && jQuery.fn.select2.amd) {
      var S2 = jQuery.fn.select2.amd;
    }

    var S2;

    (function () {
      if (!S2 || !S2.requirejs) {
        if (!S2) {
          S2 = {};
        } else {
          require = S2;
        }
        /**
         * @license almond 0.2.9 Copyright (c) 2011-2014, The Dojo Foundation All Rights Reserved.
         * Available via the MIT or new BSD license.
         * see: http://github.com/jrburke/almond for details
         */
        //Going sloppy to avoid 'use strict' string cost, but strict practices should
        //be followed.

        /*jslint sloppy: true */

        /*global setTimeout: false */


        var requirejs, require, define;

        (function (undef) {
          var main,
              req,
              makeMap,
              handlers,
              defined = {},
              waiting = {},
              config = {},
              defining = {},
              hasOwn = Object.prototype.hasOwnProperty,
              aps = [].slice,
              jsSuffixRegExp = /\.js$/;

          function hasProp(obj, prop) {
            return hasOwn.call(obj, prop);
          }
          /**
           * Given a relative module name, like ./something, normalize it to
           * a real name that can be mapped to a path.
           * @param {String} name the relative name
           * @param {String} baseName a real name that the name arg is relative
           * to.
           * @returns {String} normalized name
           */


          function normalize(name, baseName) {
            var nameParts,
                nameSegment,
                mapValue,
                foundMap,
                lastIndex,
                foundI,
                foundStarMap,
                starI,
                i,
                j,
                part,
                baseParts = baseName && baseName.split("/"),
                map = config.map,
                starMap = map && map['*'] || {}; //Adjust any relative paths.

            if (name && name.charAt(0) === ".") {
              //If have a base name, try to normalize against it,
              //otherwise, assume it is a top-level require that will
              //be relative to baseUrl in the end.
              if (baseName) {
                //Convert baseName to array, and lop off the last part,
                //so that . matches that "directory" and not name of the baseName's
                //module. For instance, baseName of "one/two/three", maps to
                //"one/two/three.js", but we want the directory, "one/two" for
                //this normalization.
                baseParts = baseParts.slice(0, baseParts.length - 1);
                name = name.split('/');
                lastIndex = name.length - 1; // Node .js allowance:

                if (config.nodeIdCompat && jsSuffixRegExp.test(name[lastIndex])) {
                  name[lastIndex] = name[lastIndex].replace(jsSuffixRegExp, '');
                }

                name = baseParts.concat(name); //start trimDots

                for (i = 0; i < name.length; i += 1) {
                  part = name[i];

                  if (part === ".") {
                    name.splice(i, 1);
                    i -= 1;
                  } else if (part === "..") {
                    if (i === 1 && (name[2] === '..' || name[0] === '..')) {
                      //End of the line. Keep at least one non-dot
                      //path segment at the front so it can be mapped
                      //correctly to disk. Otherwise, there is likely
                      //no path mapping for a path starting with '..'.
                      //This can still fail, but catches the most reasonable
                      //uses of ..
                      break;
                    } else if (i > 0) {
                      name.splice(i - 1, 2);
                      i -= 2;
                    }
                  }
                } //end trimDots


                name = name.join("/");
              } else if (name.indexOf('./') === 0) {
                // No baseName, so this is ID is resolved relative
                // to baseUrl, pull off the leading dot.
                name = name.substring(2);
              }
            } //Apply map config if available.


            if ((baseParts || starMap) && map) {
              nameParts = name.split('/');

              for (i = nameParts.length; i > 0; i -= 1) {
                nameSegment = nameParts.slice(0, i).join("/");

                if (baseParts) {
                  //Find the longest baseName segment match in the config.
                  //So, do joins on the biggest to smallest lengths of baseParts.
                  for (j = baseParts.length; j > 0; j -= 1) {
                    mapValue = map[baseParts.slice(0, j).join('/')]; //baseName segment has  config, find if it has one for
                    //this name.

                    if (mapValue) {
                      mapValue = mapValue[nameSegment];

                      if (mapValue) {
                        //Match, update name to the new value.
                        foundMap = mapValue;
                        foundI = i;
                        break;
                      }
                    }
                  }
                }

                if (foundMap) {
                  break;
                } //Check for a star map match, but just hold on to it,
                //if there is a shorter segment match later in a matching
                //config, then favor over this star map.


                if (!foundStarMap && starMap && starMap[nameSegment]) {
                  foundStarMap = starMap[nameSegment];
                  starI = i;
                }
              }

              if (!foundMap && foundStarMap) {
                foundMap = foundStarMap;
                foundI = starI;
              }

              if (foundMap) {
                nameParts.splice(0, foundI, foundMap);
                name = nameParts.join('/');
              }
            }

            return name;
          }

          function makeRequire(relName, forceSync) {
            return function () {
              //A version of a require function that passes a moduleName
              //value for items that may need to
              //look up paths relative to the moduleName
              return req.apply(undef, aps.call(arguments, 0).concat([relName, forceSync]));
            };
          }

          function makeNormalize(relName) {
            return function (name) {
              return normalize(name, relName);
            };
          }

          function makeLoad(depName) {
            return function (value) {
              defined[depName] = value;
            };
          }

          function callDep(name) {
            if (hasProp(waiting, name)) {
              var args = waiting[name];
              delete waiting[name];
              defining[name] = true;
              main.apply(undef, args);
            }

            if (!hasProp(defined, name) && !hasProp(defining, name)) {
              throw new Error('No ' + name);
            }

            return defined[name];
          } //Turns a plugin!resource to [plugin, resource]
          //with the plugin being undefined if the name
          //did not have a plugin prefix.


          function splitPrefix(name) {
            var prefix,
                index = name ? name.indexOf('!') : -1;

            if (index > -1) {
              prefix = name.substring(0, index);
              name = name.substring(index + 1, name.length);
            }

            return [prefix, name];
          }
          /**
           * Makes a name map, normalizing the name, and using a plugin
           * for normalization if necessary. Grabs a ref to plugin
           * too, as an optimization.
           */


          makeMap = function (name, relName) {
            var plugin,
                parts = splitPrefix(name),
                prefix = parts[0];
            name = parts[1];

            if (prefix) {
              prefix = normalize(prefix, relName);
              plugin = callDep(prefix);
            } //Normalize according


            if (prefix) {
              if (plugin && plugin.normalize) {
                name = plugin.normalize(name, makeNormalize(relName));
              } else {
                name = normalize(name, relName);
              }
            } else {
              name = normalize(name, relName);
              parts = splitPrefix(name);
              prefix = parts[0];
              name = parts[1];

              if (prefix) {
                plugin = callDep(prefix);
              }
            } //Using ridiculous property names for space reasons


            return {
              f: prefix ? prefix + '!' + name : name,
              //fullName
              n: name,
              pr: prefix,
              p: plugin
            };
          };

          function makeConfig(name) {
            return function () {
              return config && config.config && config.config[name] || {};
            };
          }

          handlers = {
            require: function (name) {
              return makeRequire(name);
            },
            exports: function (name) {
              var e = defined[name];

              if (typeof e !== 'undefined') {
                return e;
              } else {
                return defined[name] = {};
              }
            },
            module: function (name) {
              return {
                id: name,
                uri: '',
                exports: defined[name],
                config: makeConfig(name)
              };
            }
          };

          main = function (name, deps, callback, relName) {
            var cjsModule,
                depName,
                ret,
                map,
                i,
                args = [],
                callbackType = typeof callback,
                usingExports; //Use name if no relName

            relName = relName || name; //Call the callback to define the module, if necessary.

            if (callbackType === 'undefined' || callbackType === 'function') {
              //Pull out the defined dependencies and pass the ordered
              //values to the callback.
              //Default to [require, exports, module] if no deps
              deps = !deps.length && callback.length ? ['require', 'exports', 'module'] : deps;

              for (i = 0; i < deps.length; i += 1) {
                map = makeMap(deps[i], relName);
                depName = map.f; //Fast path CommonJS standard dependencies.

                if (depName === "require") {
                  args[i] = handlers.require(name);
                } else if (depName === "exports") {
                  //CommonJS module spec 1.1
                  args[i] = handlers.exports(name);
                  usingExports = true;
                } else if (depName === "module") {
                  //CommonJS module spec 1.1
                  cjsModule = args[i] = handlers.module(name);
                } else if (hasProp(defined, depName) || hasProp(waiting, depName) || hasProp(defining, depName)) {
                  args[i] = callDep(depName);
                } else if (map.p) {
                  map.p.load(map.n, makeRequire(relName, true), makeLoad(depName), {});
                  args[i] = defined[depName];
                } else {
                  throw new Error(name + ' missing ' + depName);
                }
              }

              ret = callback ? callback.apply(defined[name], args) : undefined;

              if (name) {
                //If setting exports via "module" is in play,
                //favor that over return value and exports. After that,
                //favor a non-undefined return value over exports use.
                if (cjsModule && cjsModule.exports !== undef && cjsModule.exports !== defined[name]) {
                  defined[name] = cjsModule.exports;
                } else if (ret !== undef || !usingExports) {
                  //Use the return value from the function.
                  defined[name] = ret;
                }
              }
            } else if (name) {
              //May just be an object definition for the module. Only
              //worry about defining if have a module name.
              defined[name] = callback;
            }
          };

          requirejs = require = req = function (deps, callback, relName, forceSync, alt) {
            if (typeof deps === "string") {
              if (handlers[deps]) {
                //callback in this case is really relName
                return handlers[deps](callback);
              } //Just return the module wanted. In this scenario, the
              //deps arg is the module name, and second arg (if passed)
              //is just the relName.
              //Normalize module name, if it contains . or ..


              return callDep(makeMap(deps, callback).f);
            } else if (!deps.splice) {
              //deps is a config object, not an array.
              config = deps;

              if (config.deps) {
                req(config.deps, config.callback);
              }

              if (!callback) {
                return;
              }

              if (callback.splice) {
                //callback is an array, which means it is a dependency list.
                //Adjust args if there are dependencies
                deps = callback;
                callback = relName;
                relName = null;
              } else {
                deps = undef;
              }
            } //Support require(['a'])


            callback = callback || function () {}; //If relName is a function, it is an errback handler,
            //so remove it.


            if (typeof relName === 'function') {
              relName = forceSync;
              forceSync = alt;
            } //Simulate async callback;


            if (forceSync) {
              main(undef, deps, callback, relName);
            } else {
              //Using a non-zero value because of concern for what old browsers
              //do, and latest browsers "upgrade" to 4 if lower value is used:
              //http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#dom-windowtimers-settimeout:
              //If want a value immediately, use require('id') instead -- something
              //that works in almond on the global level, but not guaranteed and
              //unlikely to work in other AMD implementations.
              setTimeout(function () {
                main(undef, deps, callback, relName);
              }, 4);
            }

            return req;
          };
          /**
           * Just drops the config on the floor, but returns req in case
           * the config return value is used.
           */


          req.config = function (cfg) {
            return req(cfg);
          };
          /**
           * Expose module registry for debugging and tooling
           */


          requirejs._defined = defined;

          define = function (name, deps, callback) {
            //This module may not have dependencies
            if (!deps.splice) {
              //deps is not an array, so probably means
              //an object literal or factory function for
              //the value. Adjust args.
              callback = deps;
              deps = [];
            }

            if (!hasProp(defined, name) && !hasProp(waiting, name)) {
              waiting[name] = [name, deps, callback];
            }
          };

          define.amd = {
            jQuery: true
          };
        })();

        S2.requirejs = requirejs;
        S2.require = require;
        S2.define = define;
      }
    })();

    S2.define("almond", function () {});
    /* global jQuery:false, $:false */

    S2.define('jquery', [], function () {
      var _$ = jQuery || $;

      if (_$ == null && console && console.error) {
        console.error('Select2: An instance of jQuery or a jQuery-compatible library was not ' + 'found. Make sure that you are including jQuery before Select2 on your ' + 'web page.');
      }

      return _$;
    });
    S2.define('select2/utils', ['jquery'], function ($) {
      var Utils = {};

      Utils.Extend = function (ChildClass, SuperClass) {
        var __hasProp = {}.hasOwnProperty;

        function BaseConstructor() {
          this.constructor = ChildClass;
        }

        for (var key in SuperClass) {
          if (__hasProp.call(SuperClass, key)) {
            ChildClass[key] = SuperClass[key];
          }
        }

        BaseConstructor.prototype = SuperClass.prototype;
        ChildClass.prototype = new BaseConstructor();
        ChildClass.__super__ = SuperClass.prototype;
        return ChildClass;
      };

      function getMethods(theClass) {
        var proto = theClass.prototype;
        var methods = [];

        for (var methodName in proto) {
          var m = proto[methodName];

          if (typeof m !== 'function') {
            continue;
          }

          if (methodName === 'constructor') {
            continue;
          }

          methods.push(methodName);
        }

        return methods;
      }

      Utils.Decorate = function (SuperClass, DecoratorClass) {
        var decoratedMethods = getMethods(DecoratorClass);
        var superMethods = getMethods(SuperClass);

        function DecoratedClass() {
          var unshift = Array.prototype.unshift;
          var argCount = DecoratorClass.prototype.constructor.length;
          var calledConstructor = SuperClass.prototype.constructor;

          if (argCount > 0) {
            unshift.call(arguments, SuperClass.prototype.constructor);
            calledConstructor = DecoratorClass.prototype.constructor;
          }

          calledConstructor.apply(this, arguments);
        }

        DecoratorClass.displayName = SuperClass.displayName;

        function ctr() {
          this.constructor = DecoratedClass;
        }

        DecoratedClass.prototype = new ctr();

        for (var m = 0; m < superMethods.length; m++) {
          var superMethod = superMethods[m];
          DecoratedClass.prototype[superMethod] = SuperClass.prototype[superMethod];
        }

        var calledMethod = function (methodName) {
          // Stub out the original method if it's not decorating an actual method
          var originalMethod = function () {};

          if (methodName in DecoratedClass.prototype) {
            originalMethod = DecoratedClass.prototype[methodName];
          }

          var decoratedMethod = DecoratorClass.prototype[methodName];
          return function () {
            var unshift = Array.prototype.unshift;
            unshift.call(arguments, originalMethod);
            return decoratedMethod.apply(this, arguments);
          };
        };

        for (var d = 0; d < decoratedMethods.length; d++) {
          var decoratedMethod = decoratedMethods[d];
          DecoratedClass.prototype[decoratedMethod] = calledMethod(decoratedMethod);
        }

        return DecoratedClass;
      };

      var Observable = function () {
        this.listeners = {};
      };

      Observable.prototype.on = function (event, callback) {
        this.listeners = this.listeners || {};

        if (event in this.listeners) {
          this.listeners[event].push(callback);
        } else {
          this.listeners[event] = [callback];
        }
      };

      Observable.prototype.trigger = function (event) {
        var slice = Array.prototype.slice;
        this.listeners = this.listeners || {};

        if (event in this.listeners) {
          this.invoke(this.listeners[event], slice.call(arguments, 1));
        }

        if ('*' in this.listeners) {
          this.invoke(this.listeners['*'], arguments);
        }
      };

      Observable.prototype.invoke = function (listeners, params) {
        for (var i = 0, len = listeners.length; i < len; i++) {
          listeners[i].apply(this, params);
        }
      };

      Utils.Observable = Observable;

      Utils.generateChars = function (length) {
        var chars = '';

        for (var i = 0; i < length; i++) {
          var randomChar = Math.floor(Math.random() * 36);
          chars += randomChar.toString(36);
        }

        return chars;
      };

      Utils.bind = function (func, context) {
        return function () {
          func.apply(context, arguments);
        };
      };

      Utils._convertData = function (data) {
        for (var originalKey in data) {
          var keys = originalKey.split('-');
          var dataLevel = data;

          if (keys.length === 1) {
            continue;
          }

          for (var k = 0; k < keys.length; k++) {
            var key = keys[k]; // Lowercase the first letter
            // By default, dash-separated becomes camelCase

            key = key.substring(0, 1).toLowerCase() + key.substring(1);

            if (!(key in dataLevel)) {
              dataLevel[key] = {};
            }

            if (k == keys.length - 1) {
              dataLevel[key] = data[originalKey];
            }

            dataLevel = dataLevel[key];
          }

          delete data[originalKey];
        }

        return data;
      };

      Utils.hasScroll = function (index, el) {
        // Adapted from the function created by @ShadowScripter
        // and adapted by @BillBarry on the Stack Exchange Code Review website.
        // The original code can be found at
        // http://codereview.stackexchange.com/q/13338
        // and was designed to be used with the Sizzle selector engine.
        var $el = $(el);
        var overflowX = el.style.overflowX;
        var overflowY = el.style.overflowY; //Check both x and y declarations

        if (overflowX === overflowY && (overflowY === 'hidden' || overflowY === 'visible')) {
          return false;
        }

        if (overflowX === 'scroll' || overflowY === 'scroll') {
          return true;
        }

        return $el.innerHeight() < el.scrollHeight || $el.innerWidth() < el.scrollWidth;
      };

      Utils.escapeMarkup = function (markup) {
        var replaceMap = {
          '\\': '&#92;',
          '&': '&amp;',
          '<': '&lt;',
          '>': '&gt;',
          '"': '&quot;',
          '\'': '&#39;',
          '/': '&#47;'
        }; // Do not try to escape the markup if it's not a string

        if (typeof markup !== 'string') {
          return markup;
        }

        return String(markup).replace(/[&<>"'\/\\]/g, function (match) {
          return replaceMap[match];
        });
      }; // Append an array of jQuery nodes to a given element.


      Utils.appendMany = function ($element, $nodes) {
        // jQuery 1.7.x does not support $.fn.append() with an array
        // Fall back to a jQuery object collection using $.fn.add()
        if ($.fn.jquery.substr(0, 3) === '1.7') {
          var $jqNodes = $();
          $.map($nodes, function (node) {
            $jqNodes = $jqNodes.add(node);
          });
          $nodes = $jqNodes;
        }

        $element.append($nodes);
      };

      return Utils;
    });
    S2.define('select2/results', ['jquery', './utils'], function ($, Utils) {
      function Results($element, options, dataAdapter) {
        this.$element = $element;
        this.data = dataAdapter;
        this.options = options;

        Results.__super__.constructor.call(this);
      }

      Utils.Extend(Results, Utils.Observable);

      Results.prototype.render = function () {
        var $results = $('<ul class="select2-results__options" role="tree"></ul>');

        if (this.options.get('multiple')) {
          $results.attr('aria-multiselectable', 'true');
        }

        this.$results = $results;
        return $results;
      };

      Results.prototype.clear = function () {
        this.$results.empty();
      };

      Results.prototype.displayMessage = function (params) {
        var escapeMarkup = this.options.get('escapeMarkup');
        this.clear();
        this.hideLoading();
        var $message = $('<li role="treeitem" class="select2-results__option"></li>');
        var message = this.options.get('translations').get(params.message);
        $message.append(escapeMarkup(message(params.args)));
        this.$results.append($message);
      };

      Results.prototype.append = function (data) {
        this.hideLoading();
        var $options = [];

        if (data.results == null || data.results.length === 0) {
          if (this.$results.children().length === 0) {
            this.trigger('results:message', {
              message: 'noResults'
            });
          }

          return;
        }

        data.results = this.sort(data.results);

        for (var d = 0; d < data.results.length; d++) {
          var item = data.results[d];
          var $option = this.option(item);
          $options.push($option);
        }

        this.$results.append($options);
      };

      Results.prototype.position = function ($results, $dropdown) {
        var $resultsContainer = $dropdown.find('.select2-results');
        $resultsContainer.append($results);
      };

      Results.prototype.sort = function (data) {
        var sorter = this.options.get('sorter');
        return sorter(data);
      };

      Results.prototype.setClasses = function () {
        var self = this;
        this.data.current(function (selected) {
          var selectedIds = $.map(selected, function (s) {
            return s.id.toString();
          });
          var $options = self.$results.find('.select2-results__option[aria-selected]');
          $options.each(function () {
            var $option = $(this);
            var item = $.data(this, 'data'); // id needs to be converted to a string when comparing

            var id = '' + item.id;

            if (item.element != null && item.element.selected || item.element == null && $.inArray(id, selectedIds) > -1) {
              $option.attr('aria-selected', 'true');
            } else {
              $option.attr('aria-selected', 'false');
            }
          });
          var $selected = $options.filter('[aria-selected=true]'); // Check if there are any selected options

          if ($selected.length > 0) {
            // If there are selected options, highlight the first
            $selected.first().trigger('mouseenter');
          } else {
            // If there are no selected options, highlight the first option
            // in the dropdown
            $options.first().trigger('mouseenter');
          }
        });
      };

      Results.prototype.showLoading = function (params) {
        this.hideLoading();
        var loadingMore = this.options.get('translations').get('searching');
        var loading = {
          disabled: true,
          loading: true,
          text: loadingMore(params)
        };
        var $loading = this.option(loading);
        $loading.className += ' loading-results';
        this.$results.prepend($loading);
      };

      Results.prototype.hideLoading = function () {
        this.$results.find('.loading-results').remove();
      };

      Results.prototype.option = function (data) {
        var option = document.createElement('li');
        option.className = 'select2-results__option';
        var attrs = {
          'role': 'treeitem',
          'aria-selected': 'false'
        };

        if (data.disabled) {
          delete attrs['aria-selected'];
          attrs['aria-disabled'] = 'true';
        }

        if (data.id == null) {
          delete attrs['aria-selected'];
        }

        if (data._resultId != null) {
          option.id = data._resultId;
        }

        if (data.title) {
          option.title = data.title;
        }

        if (data.children) {
          attrs.role = 'group';
          attrs['aria-label'] = data.text;
          delete attrs['aria-selected'];
        }

        for (var attr in attrs) {
          var val = attrs[attr];
          option.setAttribute(attr, val);
        }

        if (data.children) {
          var $option = $(option);
          var label = document.createElement('strong');
          label.className = 'select2-results__group';
          var $label = $(label);
          this.template(data, label);
          var $children = [];

          for (var c = 0; c < data.children.length; c++) {
            var child = data.children[c];
            var $child = this.option(child);
            $children.push($child);
          }

          var $childrenContainer = $('<ul></ul>', {
            'class': 'select2-results__options select2-results__options--nested'
          });
          $childrenContainer.append($children);
          $option.append(label);
          $option.append($childrenContainer);
        } else {
          this.template(data, option);
        }

        $.data(option, 'data', data);
        return option;
      };

      Results.prototype.bind = function (container, $container) {
        var self = this;
        var id = container.id + '-results';
        this.$results.attr('id', id);
        container.on('results:all', function (params) {
          self.clear();
          self.append(params.data);

          if (container.isOpen()) {
            self.setClasses();
          }
        });
        container.on('results:append', function (params) {
          self.append(params.data);

          if (container.isOpen()) {
            self.setClasses();
          }
        });
        container.on('query', function (params) {
          self.showLoading(params);
        });
        container.on('select', function () {
          if (!container.isOpen()) {
            return;
          }

          self.setClasses();
        });
        container.on('unselect', function () {
          if (!container.isOpen()) {
            return;
          }

          self.setClasses();
        });
        container.on('open', function () {
          // When the dropdown is open, aria-expended="true"
          self.$results.attr('aria-expanded', 'true');
          self.$results.attr('aria-hidden', 'false');
          self.setClasses();
          self.ensureHighlightVisible();
        });
        container.on('close', function () {
          // When the dropdown is closed, aria-expended="false"
          self.$results.attr('aria-expanded', 'false');
          self.$results.attr('aria-hidden', 'true');
          self.$results.removeAttr('aria-activedescendant');
        });
        container.on('results:toggle', function () {
          var $highlighted = self.getHighlightedResults();

          if ($highlighted.length === 0) {
            return;
          }

          $highlighted.trigger('mouseup');
        });
        container.on('results:select', function () {
          var $highlighted = self.getHighlightedResults();

          if ($highlighted.length === 0) {
            return;
          }

          var data = $highlighted.data('data');

          if ($highlighted.attr('aria-selected') == 'true') {
            self.trigger('close');
          } else {
            self.trigger('select', {
              data: data
            });
          }
        });
        container.on('results:previous', function () {
          var $highlighted = self.getHighlightedResults();
          var $options = self.$results.find('[aria-selected]');
          var currentIndex = $options.index($highlighted); // If we are already at te top, don't move further

          if (currentIndex === 0) {
            return;
          }

          var nextIndex = currentIndex - 1; // If none are highlighted, highlight the first

          if ($highlighted.length === 0) {
            nextIndex = 0;
          }

          var $next = $options.eq(nextIndex);
          $next.trigger('mouseenter');
          var currentOffset = self.$results.offset().top;
          var nextTop = $next.offset().top;
          var nextOffset = self.$results.scrollTop() + (nextTop - currentOffset);

          if (nextIndex === 0) {
            self.$results.scrollTop(0);
          } else if (nextTop - currentOffset < 0) {
            self.$results.scrollTop(nextOffset);
          }
        });
        container.on('results:next', function () {
          var $highlighted = self.getHighlightedResults();
          var $options = self.$results.find('[aria-selected]');
          var currentIndex = $options.index($highlighted);
          var nextIndex = currentIndex + 1; // If we are at the last option, stay there

          if (nextIndex >= $options.length) {
            return;
          }

          var $next = $options.eq(nextIndex);
          $next.trigger('mouseenter');
          var currentOffset = self.$results.offset().top + self.$results.outerHeight(false);
          var nextBottom = $next.offset().top + $next.outerHeight(false);
          var nextOffset = self.$results.scrollTop() + nextBottom - currentOffset;

          if (nextIndex === 0) {
            self.$results.scrollTop(0);
          } else if (nextBottom > currentOffset) {
            self.$results.scrollTop(nextOffset);
          }
        });
        container.on('results:focus', function (params) {
          params.element.addClass('select2-results__option--highlighted');
        });
        container.on('results:message', function (params) {
          self.displayMessage(params);
        });

        if ($.fn.mousewheel) {
          this.$results.on('mousewheel', function (e) {
            var top = self.$results.scrollTop();
            var bottom = self.$results.get(0).scrollHeight - self.$results.scrollTop() + e.deltaY;
            var isAtTop = e.deltaY > 0 && top - e.deltaY <= 0;
            var isAtBottom = e.deltaY < 0 && bottom <= self.$results.height();

            if (isAtTop) {
              self.$results.scrollTop(0);
              e.preventDefault();
              e.stopPropagation();
            } else if (isAtBottom) {
              self.$results.scrollTop(self.$results.get(0).scrollHeight - self.$results.height());
              e.preventDefault();
              e.stopPropagation();
            }
          });
        }

        this.$results.on('mouseup', '.select2-results__option[aria-selected]', function (evt) {
          var $this = $(this);
          var data = $this.data('data');

          if ($this.attr('aria-selected') === 'true') {
            if (self.options.get('multiple')) {
              self.trigger('unselect', {
                originalEvent: evt,
                data: data
              });
            } else {
              self.trigger('close');
            }

            return;
          }

          self.trigger('select', {
            originalEvent: evt,
            data: data
          });
        });
        this.$results.on('mouseenter', '.select2-results__option[aria-selected]', function (evt) {
          var data = $(this).data('data');
          self.getHighlightedResults().removeClass('select2-results__option--highlighted');
          self.trigger('results:focus', {
            data: data,
            element: $(this)
          });
        });
      };

      Results.prototype.getHighlightedResults = function () {
        var $highlighted = this.$results.find('.select2-results__option--highlighted');
        return $highlighted;
      };

      Results.prototype.destroy = function () {
        this.$results.remove();
      };

      Results.prototype.ensureHighlightVisible = function () {
        var $highlighted = this.getHighlightedResults();

        if ($highlighted.length === 0) {
          return;
        }

        var $options = this.$results.find('[aria-selected]');
        var currentIndex = $options.index($highlighted);
        var currentOffset = this.$results.offset().top;
        var nextTop = $highlighted.offset().top;
        var nextOffset = this.$results.scrollTop() + (nextTop - currentOffset);
        var offsetDelta = nextTop - currentOffset;
        nextOffset -= $highlighted.outerHeight(false) * 2;

        if (currentIndex <= 2) {
          this.$results.scrollTop(0);
        } else if (offsetDelta > this.$results.outerHeight() || offsetDelta < 0) {
          this.$results.scrollTop(nextOffset);
        }
      };

      Results.prototype.template = function (result, container) {
        var template = this.options.get('templateResult');
        var escapeMarkup = this.options.get('escapeMarkup');
        var content = template(result);

        if (content == null) {
          container.style.display = 'none';
        } else if (typeof content === 'string') {
          container.innerHTML = escapeMarkup(content);
        } else {
          $(container).append(content);
        }
      };

      return Results;
    });
    S2.define('select2/keys', [], function () {
      var KEYS = {
        BACKSPACE: 8,
        TAB: 9,
        ENTER: 13,
        SHIFT: 16,
        CTRL: 17,
        ALT: 18,
        ESC: 27,
        SPACE: 32,
        PAGE_UP: 33,
        PAGE_DOWN: 34,
        END: 35,
        HOME: 36,
        LEFT: 37,
        UP: 38,
        RIGHT: 39,
        DOWN: 40,
        DELETE: 46
      };
      return KEYS;
    });
    S2.define('select2/selection/base', ['jquery', '../utils', '../keys'], function ($, Utils, KEYS) {
      function BaseSelection($element, options) {
        this.$element = $element;
        this.options = options;

        BaseSelection.__super__.constructor.call(this);
      }

      Utils.Extend(BaseSelection, Utils.Observable);

      BaseSelection.prototype.render = function () {
        var $selection = $('<span class="select2-selection" role="combobox" ' + 'aria-autocomplete="list" aria-haspopup="true" aria-expanded="false">' + '</span>');
        this._tabindex = 0;

        if (this.$element.data('old-tabindex') != null) {
          this._tabindex = this.$element.data('old-tabindex');
        } else if (this.$element.attr('tabindex') != null) {
          this._tabindex = this.$element.attr('tabindex');
        }

        $selection.attr('title', this.$element.attr('title'));
        $selection.attr('tabindex', this._tabindex);
        this.$selection = $selection;
        return $selection;
      };

      BaseSelection.prototype.bind = function (container, $container) {
        var self = this;
        var id = container.id + '-container';
        var resultsId = container.id + '-results';
        this.container = container;
        this.$selection.on('focus', function (evt) {
          self.trigger('focus', evt);
        });
        this.$selection.on('blur', function (evt) {
          self.trigger('blur', evt);
        });
        this.$selection.on('keydown', function (evt) {
          self.trigger('keypress', evt);

          if (evt.which === KEYS.SPACE) {
            evt.preventDefault();
          }
        });
        container.on('results:focus', function (params) {
          self.$selection.attr('aria-activedescendant', params.data._resultId);
        });
        container.on('selection:update', function (params) {
          self.update(params.data);
        });
        container.on('open', function () {
          // When the dropdown is open, aria-expanded="true"
          self.$selection.attr('aria-expanded', 'true');
          self.$selection.attr('aria-owns', resultsId);

          self._attachCloseHandler(container);
        });
        container.on('close', function () {
          // When the dropdown is closed, aria-expanded="false"
          self.$selection.attr('aria-expanded', 'false');
          self.$selection.removeAttr('aria-activedescendant');
          self.$selection.removeAttr('aria-owns');
          self.$selection.focus();

          self._detachCloseHandler(container);
        });
        container.on('enable', function () {
          self.$selection.attr('tabindex', self._tabindex);
        });
        container.on('disable', function () {
          self.$selection.attr('tabindex', '-1');
        });
      };

      BaseSelection.prototype._attachCloseHandler = function (container) {
        var self = this;
        $(document.body).on('mousedown.select2.' + container.id, function (e) {
          var $target = $(e.target);
          var $select = $target.closest('.select2');
          var $all = $('.select2.select2-container--open');
          $all.each(function () {
            var $this = $(this);

            if (this == $select[0]) {
              return;
            }

            var $element = $this.data('element');
            $element.select2('close');
          });
        });
      };

      BaseSelection.prototype._detachCloseHandler = function (container) {
        $(document.body).off('mousedown.select2.' + container.id);
      };

      BaseSelection.prototype.position = function ($selection, $container) {
        var $selectionContainer = $container.find('.selection');
        $selectionContainer.append($selection);
      };

      BaseSelection.prototype.destroy = function () {
        this._detachCloseHandler(this.container);
      };

      BaseSelection.prototype.update = function (data) {
        throw new Error('The `update` method must be defined in child classes.');
      };

      return BaseSelection;
    });
    S2.define('select2/selection/single', ['jquery', './base', '../utils', '../keys'], function ($, BaseSelection, Utils, KEYS) {
      function SingleSelection() {
        SingleSelection.__super__.constructor.apply(this, arguments);
      }

      Utils.Extend(SingleSelection, BaseSelection);

      SingleSelection.prototype.render = function () {
        var $selection = SingleSelection.__super__.render.call(this);

        $selection.addClass('select2-selection--single');
        $selection.html('<span class="select2-selection__rendered"></span>' + '<span class="select2-selection__arrow" role="presentation">' + '<b role="presentation"></b>' + '</span>');
        return $selection;
      };

      SingleSelection.prototype.bind = function (container, $container) {
        var self = this;

        SingleSelection.__super__.bind.apply(this, arguments);

        var id = container.id + '-container';
        this.$selection.find('.select2-selection__rendered').attr('id', id);
        this.$selection.attr('aria-labelledby', id);
        this.$selection.on('mousedown', function (evt) {
          // Only respond to left clicks
          if (evt.which !== 1) {
            return;
          }

          self.trigger('toggle', {
            originalEvent: evt
          });
        });
        this.$selection.on('focus', function (evt) {// User focuses on the container
        });
        this.$selection.on('blur', function (evt) {// User exits the container
        });
        container.on('selection:update', function (params) {
          self.update(params.data);
        });
      };

      SingleSelection.prototype.clear = function () {
        this.$selection.find('.select2-selection__rendered').empty();
      };

      SingleSelection.prototype.display = function (data) {
        var template = this.options.get('templateSelection');
        var escapeMarkup = this.options.get('escapeMarkup');
        return escapeMarkup(template(data));
      };

      SingleSelection.prototype.selectionContainer = function () {
        return $('<span></span>');
      };

      SingleSelection.prototype.update = function (data) {
        if (data.length === 0) {
          this.clear();
          return;
        }

        var selection = data[0];
        var formatted = this.display(selection);
        var $rendered = this.$selection.find('.select2-selection__rendered');
        $rendered.empty().append(formatted);
        $rendered.prop('title', selection.title || selection.text);
      };

      return SingleSelection;
    });
    S2.define('select2/selection/multiple', ['jquery', './base', '../utils'], function ($, BaseSelection, Utils) {
      function MultipleSelection($element, options) {
        MultipleSelection.__super__.constructor.apply(this, arguments);
      }

      Utils.Extend(MultipleSelection, BaseSelection);

      MultipleSelection.prototype.render = function () {
        var $selection = MultipleSelection.__super__.render.call(this);

        $selection.addClass('select2-selection--multiple');
        $selection.html('<ul class="select2-selection__rendered"></ul>');
        return $selection;
      };

      MultipleSelection.prototype.bind = function (container, $container) {
        var self = this;

        MultipleSelection.__super__.bind.apply(this, arguments);

        this.$selection.on('click', function (evt) {
          self.trigger('toggle', {
            originalEvent: evt
          });
        });
        this.$selection.on('click', '.select2-selection__choice__remove', function (evt) {
          var $remove = $(this);
          var $selection = $remove.parent();
          var data = $selection.data('data');
          self.trigger('unselect', {
            originalEvent: evt,
            data: data
          });
        });
      };

      MultipleSelection.prototype.clear = function () {
        this.$selection.find('.select2-selection__rendered').empty();
      };

      MultipleSelection.prototype.display = function (data) {
        var template = this.options.get('templateSelection');
        var escapeMarkup = this.options.get('escapeMarkup');
        return escapeMarkup(template(data));
      };

      MultipleSelection.prototype.selectionContainer = function () {
        var $container = $('<li class="select2-selection__choice">' + '<span class="select2-selection__choice__remove" role="presentation">' + '&times;' + '</span>' + '</li>');
        return $container;
      };

      MultipleSelection.prototype.update = function (data) {
        this.clear();

        if (data.length === 0) {
          return;
        }

        var $selections = [];

        for (var d = 0; d < data.length; d++) {
          var selection = data[d];
          var formatted = this.display(selection);
          var $selection = this.selectionContainer();
          $selection.append(formatted);
          $selection.prop('title', selection.title || selection.text);
          $selection.data('data', selection);
          $selections.push($selection);
        }

        var $rendered = this.$selection.find('.select2-selection__rendered');
        Utils.appendMany($rendered, $selections);
      };

      return MultipleSelection;
    });
    S2.define('select2/selection/placeholder', ['../utils'], function (Utils) {
      function Placeholder(decorated, $element, options) {
        this.placeholder = this.normalizePlaceholder(options.get('placeholder'));
        decorated.call(this, $element, options);
      }

      Placeholder.prototype.normalizePlaceholder = function (_, placeholder) {
        if (typeof placeholder === 'string') {
          placeholder = {
            id: '',
            text: placeholder
          };
        }

        return placeholder;
      };

      Placeholder.prototype.createPlaceholder = function (decorated, placeholder) {
        var $placeholder = this.selectionContainer();
        $placeholder.html(this.display(placeholder));
        $placeholder.addClass('select2-selection__placeholder').removeClass('select2-selection__choice');
        return $placeholder;
      };

      Placeholder.prototype.update = function (decorated, data) {
        var singlePlaceholder = data.length == 1 && data[0].id != this.placeholder.id;
        var multipleSelections = data.length > 1;

        if (multipleSelections || singlePlaceholder) {
          return decorated.call(this, data);
        }

        this.clear();
        var $placeholder = this.createPlaceholder(this.placeholder);
        this.$selection.find('.select2-selection__rendered').append($placeholder);
      };

      return Placeholder;
    });
    S2.define('select2/selection/allowClear', ['jquery', '../keys'], function ($, KEYS) {
      function AllowClear() {}

      AllowClear.prototype.bind = function (decorated, container, $container) {
        var self = this;
        decorated.call(this, container, $container);

        if (this.placeholder == null) {
          if (this.options.get('debug') && window.console && console.error) {
            console.error('Select2: The `allowClear` option should be used in combination ' + 'with the `placeholder` option.');
          }
        }

        this.$selection.on('mousedown', '.select2-selection__clear', function (evt) {
          self._handleClear(evt);
        });
        container.on('keypress', function (evt) {
          self._handleKeyboardClear(evt, container);
        });
      };

      AllowClear.prototype._handleClear = function (_, evt) {
        // Ignore the event if it is disabled
        if (this.options.get('disabled')) {
          return;
        }

        var $clear = this.$selection.find('.select2-selection__clear'); // Ignore the event if nothing has been selected

        if ($clear.length === 0) {
          return;
        }

        evt.stopPropagation();
        var data = $clear.data('data');

        for (var d = 0; d < data.length; d++) {
          var unselectData = {
            data: data[d]
          }; // Trigger the `unselect` event, so people can prevent it from being
          // cleared.

          this.trigger('unselect', unselectData); // If the event was prevented, don't clear it out.

          if (unselectData.prevented) {
            return;
          }
        }

        this.$element.val(this.placeholder.id).trigger('change');
        this.trigger('toggle');
      };

      AllowClear.prototype._handleKeyboardClear = function (_, evt, container) {
        if (container.isOpen()) {
          return;
        }

        if (evt.which == KEYS.DELETE || evt.which == KEYS.BACKSPACE) {
          this._handleClear(evt);
        }
      };

      AllowClear.prototype.update = function (decorated, data) {
        decorated.call(this, data);

        if (this.$selection.find('.select2-selection__placeholder').length > 0 || data.length === 0) {
          return;
        }

        var $remove = $('<span class="select2-selection__clear">' + '&times;' + '</span>');
        $remove.data('data', data);
        this.$selection.find('.select2-selection__rendered').prepend($remove);
      };

      return AllowClear;
    });
    S2.define('select2/selection/search', ['jquery', '../utils', '../keys'], function ($, Utils, KEYS) {
      function Search(decorated, $element, options) {
        decorated.call(this, $element, options);
      }

      Search.prototype.render = function (decorated) {
        var $search = $('<li class="select2-search select2-search--inline">' + '<input class="select2-search__field" type="search" tabindex="-1"' + ' autocomplete="off" autocorrect="off" autocapitalize="off"' + ' spellcheck="false" role="textbox" />' + '</li>');
        this.$searchContainer = $search;
        this.$search = $search.find('input');
        var $rendered = decorated.call(this);
        return $rendered;
      };

      Search.prototype.bind = function (decorated, container, $container) {
        var self = this;
        decorated.call(this, container, $container);
        container.on('open', function () {
          self.$search.attr('tabindex', 0);
          self.$search.focus();
        });
        container.on('close', function () {
          self.$search.attr('tabindex', -1);
          self.$search.val('');
          self.$search.focus();
        });
        container.on('enable', function () {
          self.$search.prop('disabled', false);
        });
        container.on('disable', function () {
          self.$search.prop('disabled', true);
        });
        this.$selection.on('focusin', '.select2-search--inline', function (evt) {
          self.trigger('focus', evt);
        });
        this.$selection.on('focusout', '.select2-search--inline', function (evt) {
          self.trigger('blur', evt);
        });
        this.$selection.on('keydown', '.select2-search--inline', function (evt) {
          evt.stopPropagation();
          self.trigger('keypress', evt);
          self._keyUpPrevented = evt.isDefaultPrevented();
          var key = evt.which;

          if (key === KEYS.BACKSPACE && self.$search.val() === '') {
            var $previousChoice = self.$searchContainer.prev('.select2-selection__choice');

            if ($previousChoice.length > 0) {
              var item = $previousChoice.data('data');
              self.searchRemoveChoice(item);
              evt.preventDefault();
            }
          }
        }); // Workaround for browsers which do not support the `input` event
        // This will prevent double-triggering of events for browsers which support
        // both the `keyup` and `input` events.

        this.$selection.on('input', '.select2-search--inline', function (evt) {
          // Unbind the duplicated `keyup` event
          self.$selection.off('keyup.search');
        });
        this.$selection.on('keyup.search input', '.select2-search--inline', function (evt) {
          self.handleSearch(evt);
        });
      };

      Search.prototype.createPlaceholder = function (decorated, placeholder) {
        this.$search.attr('placeholder', placeholder.text);
      };

      Search.prototype.update = function (decorated, data) {
        this.$search.attr('placeholder', '');
        decorated.call(this, data);
        this.$selection.find('.select2-selection__rendered').append(this.$searchContainer);
        this.resizeSearch();
      };

      Search.prototype.handleSearch = function () {
        this.resizeSearch();

        if (!this._keyUpPrevented) {
          var input = this.$search.val();
          this.trigger('query', {
            term: input
          });
        }

        this._keyUpPrevented = false;
      };

      Search.prototype.searchRemoveChoice = function (decorated, item) {
        this.trigger('unselect', {
          data: item
        });
        this.trigger('open');
        this.$search.val(item.text + ' ');
      };

      Search.prototype.resizeSearch = function () {
        this.$search.css('width', '25px');
        var width = '';

        if (this.$search.attr('placeholder') !== '') {
          width = this.$selection.find('.select2-selection__rendered').innerWidth();
        } else {
          var minimumWidth = this.$search.val().length + 1;
          width = minimumWidth * 0.75 + 'em';
        }

        this.$search.css('width', width);
      };

      return Search;
    });
    S2.define('select2/selection/eventRelay', ['jquery'], function ($) {
      function EventRelay() {}

      EventRelay.prototype.bind = function (decorated, container, $container) {
        var self = this;
        var relayEvents = ['open', 'opening', 'close', 'closing', 'select', 'selecting', 'unselect', 'unselecting'];
        var preventableEvents = ['opening', 'closing', 'selecting', 'unselecting'];
        decorated.call(this, container, $container);
        container.on('*', function (name, params) {
          // Ignore events that should not be relayed
          if ($.inArray(name, relayEvents) === -1) {
            return;
          } // The parameters should always be an object


          params = params || {}; // Generate the jQuery event for the Select2 event

          var evt = $.Event('select2:' + name, {
            params: params
          });
          self.$element.trigger(evt); // Only handle preventable events if it was one

          if ($.inArray(name, preventableEvents) === -1) {
            return;
          }

          params.prevented = evt.isDefaultPrevented();
        });
      };

      return EventRelay;
    });
    S2.define('select2/translation', ['jquery', 'require'], function ($, require) {
      function Translation(dict) {
        this.dict = dict || {};
      }

      Translation.prototype.all = function () {
        return this.dict;
      };

      Translation.prototype.get = function (key) {
        return this.dict[key];
      };

      Translation.prototype.extend = function (translation) {
        this.dict = $.extend({}, translation.all(), this.dict);
      }; // Static functions


      Translation._cache = {};

      Translation.loadPath = function (path) {
        if (!(path in Translation._cache)) {
          var translations = require(path);

          Translation._cache[path] = translations;
        }

        return new Translation(Translation._cache[path]);
      };

      return Translation;
    });
    S2.define('select2/diacritics', [], function () {
      var diacritics = {
        '\u24B6': 'A',
        '\uFF21': 'A',
        '\u00C0': 'A',
        '\u00C1': 'A',
        '\u00C2': 'A',
        '\u1EA6': 'A',
        '\u1EA4': 'A',
        '\u1EAA': 'A',
        '\u1EA8': 'A',
        '\u00C3': 'A',
        '\u0100': 'A',
        '\u0102': 'A',
        '\u1EB0': 'A',
        '\u1EAE': 'A',
        '\u1EB4': 'A',
        '\u1EB2': 'A',
        '\u0226': 'A',
        '\u01E0': 'A',
        '\u00C4': 'A',
        '\u01DE': 'A',
        '\u1EA2': 'A',
        '\u00C5': 'A',
        '\u01FA': 'A',
        '\u01CD': 'A',
        '\u0200': 'A',
        '\u0202': 'A',
        '\u1EA0': 'A',
        '\u1EAC': 'A',
        '\u1EB6': 'A',
        '\u1E00': 'A',
        '\u0104': 'A',
        '\u023A': 'A',
        '\u2C6F': 'A',
        '\uA732': 'AA',
        '\u00C6': 'AE',
        '\u01FC': 'AE',
        '\u01E2': 'AE',
        '\uA734': 'AO',
        '\uA736': 'AU',
        '\uA738': 'AV',
        '\uA73A': 'AV',
        '\uA73C': 'AY',
        '\u24B7': 'B',
        '\uFF22': 'B',
        '\u1E02': 'B',
        '\u1E04': 'B',
        '\u1E06': 'B',
        '\u0243': 'B',
        '\u0182': 'B',
        '\u0181': 'B',
        '\u24B8': 'C',
        '\uFF23': 'C',
        '\u0106': 'C',
        '\u0108': 'C',
        '\u010A': 'C',
        '\u010C': 'C',
        '\u00C7': 'C',
        '\u1E08': 'C',
        '\u0187': 'C',
        '\u023B': 'C',
        '\uA73E': 'C',
        '\u24B9': 'D',
        '\uFF24': 'D',
        '\u1E0A': 'D',
        '\u010E': 'D',
        '\u1E0C': 'D',
        '\u1E10': 'D',
        '\u1E12': 'D',
        '\u1E0E': 'D',
        '\u0110': 'D',
        '\u018B': 'D',
        '\u018A': 'D',
        '\u0189': 'D',
        '\uA779': 'D',
        '\u01F1': 'DZ',
        '\u01C4': 'DZ',
        '\u01F2': 'Dz',
        '\u01C5': 'Dz',
        '\u24BA': 'E',
        '\uFF25': 'E',
        '\u00C8': 'E',
        '\u00C9': 'E',
        '\u00CA': 'E',
        '\u1EC0': 'E',
        '\u1EBE': 'E',
        '\u1EC4': 'E',
        '\u1EC2': 'E',
        '\u1EBC': 'E',
        '\u0112': 'E',
        '\u1E14': 'E',
        '\u1E16': 'E',
        '\u0114': 'E',
        '\u0116': 'E',
        '\u00CB': 'E',
        '\u1EBA': 'E',
        '\u011A': 'E',
        '\u0204': 'E',
        '\u0206': 'E',
        '\u1EB8': 'E',
        '\u1EC6': 'E',
        '\u0228': 'E',
        '\u1E1C': 'E',
        '\u0118': 'E',
        '\u1E18': 'E',
        '\u1E1A': 'E',
        '\u0190': 'E',
        '\u018E': 'E',
        '\u24BB': 'F',
        '\uFF26': 'F',
        '\u1E1E': 'F',
        '\u0191': 'F',
        '\uA77B': 'F',
        '\u24BC': 'G',
        '\uFF27': 'G',
        '\u01F4': 'G',
        '\u011C': 'G',
        '\u1E20': 'G',
        '\u011E': 'G',
        '\u0120': 'G',
        '\u01E6': 'G',
        '\u0122': 'G',
        '\u01E4': 'G',
        '\u0193': 'G',
        '\uA7A0': 'G',
        '\uA77D': 'G',
        '\uA77E': 'G',
        '\u24BD': 'H',
        '\uFF28': 'H',
        '\u0124': 'H',
        '\u1E22': 'H',
        '\u1E26': 'H',
        '\u021E': 'H',
        '\u1E24': 'H',
        '\u1E28': 'H',
        '\u1E2A': 'H',
        '\u0126': 'H',
        '\u2C67': 'H',
        '\u2C75': 'H',
        '\uA78D': 'H',
        '\u24BE': 'I',
        '\uFF29': 'I',
        '\u00CC': 'I',
        '\u00CD': 'I',
        '\u00CE': 'I',
        '\u0128': 'I',
        '\u012A': 'I',
        '\u012C': 'I',
        '\u0130': 'I',
        '\u00CF': 'I',
        '\u1E2E': 'I',
        '\u1EC8': 'I',
        '\u01CF': 'I',
        '\u0208': 'I',
        '\u020A': 'I',
        '\u1ECA': 'I',
        '\u012E': 'I',
        '\u1E2C': 'I',
        '\u0197': 'I',
        '\u24BF': 'J',
        '\uFF2A': 'J',
        '\u0134': 'J',
        '\u0248': 'J',
        '\u24C0': 'K',
        '\uFF2B': 'K',
        '\u1E30': 'K',
        '\u01E8': 'K',
        '\u1E32': 'K',
        '\u0136': 'K',
        '\u1E34': 'K',
        '\u0198': 'K',
        '\u2C69': 'K',
        '\uA740': 'K',
        '\uA742': 'K',
        '\uA744': 'K',
        '\uA7A2': 'K',
        '\u24C1': 'L',
        '\uFF2C': 'L',
        '\u013F': 'L',
        '\u0139': 'L',
        '\u013D': 'L',
        '\u1E36': 'L',
        '\u1E38': 'L',
        '\u013B': 'L',
        '\u1E3C': 'L',
        '\u1E3A': 'L',
        '\u0141': 'L',
        '\u023D': 'L',
        '\u2C62': 'L',
        '\u2C60': 'L',
        '\uA748': 'L',
        '\uA746': 'L',
        '\uA780': 'L',
        '\u01C7': 'LJ',
        '\u01C8': 'Lj',
        '\u24C2': 'M',
        '\uFF2D': 'M',
        '\u1E3E': 'M',
        '\u1E40': 'M',
        '\u1E42': 'M',
        '\u2C6E': 'M',
        '\u019C': 'M',
        '\u24C3': 'N',
        '\uFF2E': 'N',
        '\u01F8': 'N',
        '\u0143': 'N',
        '\u00D1': 'N',
        '\u1E44': 'N',
        '\u0147': 'N',
        '\u1E46': 'N',
        '\u0145': 'N',
        '\u1E4A': 'N',
        '\u1E48': 'N',
        '\u0220': 'N',
        '\u019D': 'N',
        '\uA790': 'N',
        '\uA7A4': 'N',
        '\u01CA': 'NJ',
        '\u01CB': 'Nj',
        '\u24C4': 'O',
        '\uFF2F': 'O',
        '\u00D2': 'O',
        '\u00D3': 'O',
        '\u00D4': 'O',
        '\u1ED2': 'O',
        '\u1ED0': 'O',
        '\u1ED6': 'O',
        '\u1ED4': 'O',
        '\u00D5': 'O',
        '\u1E4C': 'O',
        '\u022C': 'O',
        '\u1E4E': 'O',
        '\u014C': 'O',
        '\u1E50': 'O',
        '\u1E52': 'O',
        '\u014E': 'O',
        '\u022E': 'O',
        '\u0230': 'O',
        '\u00D6': 'O',
        '\u022A': 'O',
        '\u1ECE': 'O',
        '\u0150': 'O',
        '\u01D1': 'O',
        '\u020C': 'O',
        '\u020E': 'O',
        '\u01A0': 'O',
        '\u1EDC': 'O',
        '\u1EDA': 'O',
        '\u1EE0': 'O',
        '\u1EDE': 'O',
        '\u1EE2': 'O',
        '\u1ECC': 'O',
        '\u1ED8': 'O',
        '\u01EA': 'O',
        '\u01EC': 'O',
        '\u00D8': 'O',
        '\u01FE': 'O',
        '\u0186': 'O',
        '\u019F': 'O',
        '\uA74A': 'O',
        '\uA74C': 'O',
        '\u01A2': 'OI',
        '\uA74E': 'OO',
        '\u0222': 'OU',
        '\u24C5': 'P',
        '\uFF30': 'P',
        '\u1E54': 'P',
        '\u1E56': 'P',
        '\u01A4': 'P',
        '\u2C63': 'P',
        '\uA750': 'P',
        '\uA752': 'P',
        '\uA754': 'P',
        '\u24C6': 'Q',
        '\uFF31': 'Q',
        '\uA756': 'Q',
        '\uA758': 'Q',
        '\u024A': 'Q',
        '\u24C7': 'R',
        '\uFF32': 'R',
        '\u0154': 'R',
        '\u1E58': 'R',
        '\u0158': 'R',
        '\u0210': 'R',
        '\u0212': 'R',
        '\u1E5A': 'R',
        '\u1E5C': 'R',
        '\u0156': 'R',
        '\u1E5E': 'R',
        '\u024C': 'R',
        '\u2C64': 'R',
        '\uA75A': 'R',
        '\uA7A6': 'R',
        '\uA782': 'R',
        '\u24C8': 'S',
        '\uFF33': 'S',
        '\u1E9E': 'S',
        '\u015A': 'S',
        '\u1E64': 'S',
        '\u015C': 'S',
        '\u1E60': 'S',
        '\u0160': 'S',
        '\u1E66': 'S',
        '\u1E62': 'S',
        '\u1E68': 'S',
        '\u0218': 'S',
        '\u015E': 'S',
        '\u2C7E': 'S',
        '\uA7A8': 'S',
        '\uA784': 'S',
        '\u24C9': 'T',
        '\uFF34': 'T',
        '\u1E6A': 'T',
        '\u0164': 'T',
        '\u1E6C': 'T',
        '\u021A': 'T',
        '\u0162': 'T',
        '\u1E70': 'T',
        '\u1E6E': 'T',
        '\u0166': 'T',
        '\u01AC': 'T',
        '\u01AE': 'T',
        '\u023E': 'T',
        '\uA786': 'T',
        '\uA728': 'TZ',
        '\u24CA': 'U',
        '\uFF35': 'U',
        '\u00D9': 'U',
        '\u00DA': 'U',
        '\u00DB': 'U',
        '\u0168': 'U',
        '\u1E78': 'U',
        '\u016A': 'U',
        '\u1E7A': 'U',
        '\u016C': 'U',
        '\u00DC': 'U',
        '\u01DB': 'U',
        '\u01D7': 'U',
        '\u01D5': 'U',
        '\u01D9': 'U',
        '\u1EE6': 'U',
        '\u016E': 'U',
        '\u0170': 'U',
        '\u01D3': 'U',
        '\u0214': 'U',
        '\u0216': 'U',
        '\u01AF': 'U',
        '\u1EEA': 'U',
        '\u1EE8': 'U',
        '\u1EEE': 'U',
        '\u1EEC': 'U',
        '\u1EF0': 'U',
        '\u1EE4': 'U',
        '\u1E72': 'U',
        '\u0172': 'U',
        '\u1E76': 'U',
        '\u1E74': 'U',
        '\u0244': 'U',
        '\u24CB': 'V',
        '\uFF36': 'V',
        '\u1E7C': 'V',
        '\u1E7E': 'V',
        '\u01B2': 'V',
        '\uA75E': 'V',
        '\u0245': 'V',
        '\uA760': 'VY',
        '\u24CC': 'W',
        '\uFF37': 'W',
        '\u1E80': 'W',
        '\u1E82': 'W',
        '\u0174': 'W',
        '\u1E86': 'W',
        '\u1E84': 'W',
        '\u1E88': 'W',
        '\u2C72': 'W',
        '\u24CD': 'X',
        '\uFF38': 'X',
        '\u1E8A': 'X',
        '\u1E8C': 'X',
        '\u24CE': 'Y',
        '\uFF39': 'Y',
        '\u1EF2': 'Y',
        '\u00DD': 'Y',
        '\u0176': 'Y',
        '\u1EF8': 'Y',
        '\u0232': 'Y',
        '\u1E8E': 'Y',
        '\u0178': 'Y',
        '\u1EF6': 'Y',
        '\u1EF4': 'Y',
        '\u01B3': 'Y',
        '\u024E': 'Y',
        '\u1EFE': 'Y',
        '\u24CF': 'Z',
        '\uFF3A': 'Z',
        '\u0179': 'Z',
        '\u1E90': 'Z',
        '\u017B': 'Z',
        '\u017D': 'Z',
        '\u1E92': 'Z',
        '\u1E94': 'Z',
        '\u01B5': 'Z',
        '\u0224': 'Z',
        '\u2C7F': 'Z',
        '\u2C6B': 'Z',
        '\uA762': 'Z',
        '\u24D0': 'a',
        '\uFF41': 'a',
        '\u1E9A': 'a',
        '\u00E0': 'a',
        '\u00E1': 'a',
        '\u00E2': 'a',
        '\u1EA7': 'a',
        '\u1EA5': 'a',
        '\u1EAB': 'a',
        '\u1EA9': 'a',
        '\u00E3': 'a',
        '\u0101': 'a',
        '\u0103': 'a',
        '\u1EB1': 'a',
        '\u1EAF': 'a',
        '\u1EB5': 'a',
        '\u1EB3': 'a',
        '\u0227': 'a',
        '\u01E1': 'a',
        '\u00E4': 'a',
        '\u01DF': 'a',
        '\u1EA3': 'a',
        '\u00E5': 'a',
        '\u01FB': 'a',
        '\u01CE': 'a',
        '\u0201': 'a',
        '\u0203': 'a',
        '\u1EA1': 'a',
        '\u1EAD': 'a',
        '\u1EB7': 'a',
        '\u1E01': 'a',
        '\u0105': 'a',
        '\u2C65': 'a',
        '\u0250': 'a',
        '\uA733': 'aa',
        '\u00E6': 'ae',
        '\u01FD': 'ae',
        '\u01E3': 'ae',
        '\uA735': 'ao',
        '\uA737': 'au',
        '\uA739': 'av',
        '\uA73B': 'av',
        '\uA73D': 'ay',
        '\u24D1': 'b',
        '\uFF42': 'b',
        '\u1E03': 'b',
        '\u1E05': 'b',
        '\u1E07': 'b',
        '\u0180': 'b',
        '\u0183': 'b',
        '\u0253': 'b',
        '\u24D2': 'c',
        '\uFF43': 'c',
        '\u0107': 'c',
        '\u0109': 'c',
        '\u010B': 'c',
        '\u010D': 'c',
        '\u00E7': 'c',
        '\u1E09': 'c',
        '\u0188': 'c',
        '\u023C': 'c',
        '\uA73F': 'c',
        '\u2184': 'c',
        '\u24D3': 'd',
        '\uFF44': 'd',
        '\u1E0B': 'd',
        '\u010F': 'd',
        '\u1E0D': 'd',
        '\u1E11': 'd',
        '\u1E13': 'd',
        '\u1E0F': 'd',
        '\u0111': 'd',
        '\u018C': 'd',
        '\u0256': 'd',
        '\u0257': 'd',
        '\uA77A': 'd',
        '\u01F3': 'dz',
        '\u01C6': 'dz',
        '\u24D4': 'e',
        '\uFF45': 'e',
        '\u00E8': 'e',
        '\u00E9': 'e',
        '\u00EA': 'e',
        '\u1EC1': 'e',
        '\u1EBF': 'e',
        '\u1EC5': 'e',
        '\u1EC3': 'e',
        '\u1EBD': 'e',
        '\u0113': 'e',
        '\u1E15': 'e',
        '\u1E17': 'e',
        '\u0115': 'e',
        '\u0117': 'e',
        '\u00EB': 'e',
        '\u1EBB': 'e',
        '\u011B': 'e',
        '\u0205': 'e',
        '\u0207': 'e',
        '\u1EB9': 'e',
        '\u1EC7': 'e',
        '\u0229': 'e',
        '\u1E1D': 'e',
        '\u0119': 'e',
        '\u1E19': 'e',
        '\u1E1B': 'e',
        '\u0247': 'e',
        '\u025B': 'e',
        '\u01DD': 'e',
        '\u24D5': 'f',
        '\uFF46': 'f',
        '\u1E1F': 'f',
        '\u0192': 'f',
        '\uA77C': 'f',
        '\u24D6': 'g',
        '\uFF47': 'g',
        '\u01F5': 'g',
        '\u011D': 'g',
        '\u1E21': 'g',
        '\u011F': 'g',
        '\u0121': 'g',
        '\u01E7': 'g',
        '\u0123': 'g',
        '\u01E5': 'g',
        '\u0260': 'g',
        '\uA7A1': 'g',
        '\u1D79': 'g',
        '\uA77F': 'g',
        '\u24D7': 'h',
        '\uFF48': 'h',
        '\u0125': 'h',
        '\u1E23': 'h',
        '\u1E27': 'h',
        '\u021F': 'h',
        '\u1E25': 'h',
        '\u1E29': 'h',
        '\u1E2B': 'h',
        '\u1E96': 'h',
        '\u0127': 'h',
        '\u2C68': 'h',
        '\u2C76': 'h',
        '\u0265': 'h',
        '\u0195': 'hv',
        '\u24D8': 'i',
        '\uFF49': 'i',
        '\u00EC': 'i',
        '\u00ED': 'i',
        '\u00EE': 'i',
        '\u0129': 'i',
        '\u012B': 'i',
        '\u012D': 'i',
        '\u00EF': 'i',
        '\u1E2F': 'i',
        '\u1EC9': 'i',
        '\u01D0': 'i',
        '\u0209': 'i',
        '\u020B': 'i',
        '\u1ECB': 'i',
        '\u012F': 'i',
        '\u1E2D': 'i',
        '\u0268': 'i',
        '\u0131': 'i',
        '\u24D9': 'j',
        '\uFF4A': 'j',
        '\u0135': 'j',
        '\u01F0': 'j',
        '\u0249': 'j',
        '\u24DA': 'k',
        '\uFF4B': 'k',
        '\u1E31': 'k',
        '\u01E9': 'k',
        '\u1E33': 'k',
        '\u0137': 'k',
        '\u1E35': 'k',
        '\u0199': 'k',
        '\u2C6A': 'k',
        '\uA741': 'k',
        '\uA743': 'k',
        '\uA745': 'k',
        '\uA7A3': 'k',
        '\u24DB': 'l',
        '\uFF4C': 'l',
        '\u0140': 'l',
        '\u013A': 'l',
        '\u013E': 'l',
        '\u1E37': 'l',
        '\u1E39': 'l',
        '\u013C': 'l',
        '\u1E3D': 'l',
        '\u1E3B': 'l',
        '\u017F': 'l',
        '\u0142': 'l',
        '\u019A': 'l',
        '\u026B': 'l',
        '\u2C61': 'l',
        '\uA749': 'l',
        '\uA781': 'l',
        '\uA747': 'l',
        '\u01C9': 'lj',
        '\u24DC': 'm',
        '\uFF4D': 'm',
        '\u1E3F': 'm',
        '\u1E41': 'm',
        '\u1E43': 'm',
        '\u0271': 'm',
        '\u026F': 'm',
        '\u24DD': 'n',
        '\uFF4E': 'n',
        '\u01F9': 'n',
        '\u0144': 'n',
        '\u00F1': 'n',
        '\u1E45': 'n',
        '\u0148': 'n',
        '\u1E47': 'n',
        '\u0146': 'n',
        '\u1E4B': 'n',
        '\u1E49': 'n',
        '\u019E': 'n',
        '\u0272': 'n',
        '\u0149': 'n',
        '\uA791': 'n',
        '\uA7A5': 'n',
        '\u01CC': 'nj',
        '\u24DE': 'o',
        '\uFF4F': 'o',
        '\u00F2': 'o',
        '\u00F3': 'o',
        '\u00F4': 'o',
        '\u1ED3': 'o',
        '\u1ED1': 'o',
        '\u1ED7': 'o',
        '\u1ED5': 'o',
        '\u00F5': 'o',
        '\u1E4D': 'o',
        '\u022D': 'o',
        '\u1E4F': 'o',
        '\u014D': 'o',
        '\u1E51': 'o',
        '\u1E53': 'o',
        '\u014F': 'o',
        '\u022F': 'o',
        '\u0231': 'o',
        '\u00F6': 'o',
        '\u022B': 'o',
        '\u1ECF': 'o',
        '\u0151': 'o',
        '\u01D2': 'o',
        '\u020D': 'o',
        '\u020F': 'o',
        '\u01A1': 'o',
        '\u1EDD': 'o',
        '\u1EDB': 'o',
        '\u1EE1': 'o',
        '\u1EDF': 'o',
        '\u1EE3': 'o',
        '\u1ECD': 'o',
        '\u1ED9': 'o',
        '\u01EB': 'o',
        '\u01ED': 'o',
        '\u00F8': 'o',
        '\u01FF': 'o',
        '\u0254': 'o',
        '\uA74B': 'o',
        '\uA74D': 'o',
        '\u0275': 'o',
        '\u01A3': 'oi',
        '\u0223': 'ou',
        '\uA74F': 'oo',
        '\u24DF': 'p',
        '\uFF50': 'p',
        '\u1E55': 'p',
        '\u1E57': 'p',
        '\u01A5': 'p',
        '\u1D7D': 'p',
        '\uA751': 'p',
        '\uA753': 'p',
        '\uA755': 'p',
        '\u24E0': 'q',
        '\uFF51': 'q',
        '\u024B': 'q',
        '\uA757': 'q',
        '\uA759': 'q',
        '\u24E1': 'r',
        '\uFF52': 'r',
        '\u0155': 'r',
        '\u1E59': 'r',
        '\u0159': 'r',
        '\u0211': 'r',
        '\u0213': 'r',
        '\u1E5B': 'r',
        '\u1E5D': 'r',
        '\u0157': 'r',
        '\u1E5F': 'r',
        '\u024D': 'r',
        '\u027D': 'r',
        '\uA75B': 'r',
        '\uA7A7': 'r',
        '\uA783': 'r',
        '\u24E2': 's',
        '\uFF53': 's',
        '\u00DF': 's',
        '\u015B': 's',
        '\u1E65': 's',
        '\u015D': 's',
        '\u1E61': 's',
        '\u0161': 's',
        '\u1E67': 's',
        '\u1E63': 's',
        '\u1E69': 's',
        '\u0219': 's',
        '\u015F': 's',
        '\u023F': 's',
        '\uA7A9': 's',
        '\uA785': 's',
        '\u1E9B': 's',
        '\u24E3': 't',
        '\uFF54': 't',
        '\u1E6B': 't',
        '\u1E97': 't',
        '\u0165': 't',
        '\u1E6D': 't',
        '\u021B': 't',
        '\u0163': 't',
        '\u1E71': 't',
        '\u1E6F': 't',
        '\u0167': 't',
        '\u01AD': 't',
        '\u0288': 't',
        '\u2C66': 't',
        '\uA787': 't',
        '\uA729': 'tz',
        '\u24E4': 'u',
        '\uFF55': 'u',
        '\u00F9': 'u',
        '\u00FA': 'u',
        '\u00FB': 'u',
        '\u0169': 'u',
        '\u1E79': 'u',
        '\u016B': 'u',
        '\u1E7B': 'u',
        '\u016D': 'u',
        '\u00FC': 'u',
        '\u01DC': 'u',
        '\u01D8': 'u',
        '\u01D6': 'u',
        '\u01DA': 'u',
        '\u1EE7': 'u',
        '\u016F': 'u',
        '\u0171': 'u',
        '\u01D4': 'u',
        '\u0215': 'u',
        '\u0217': 'u',
        '\u01B0': 'u',
        '\u1EEB': 'u',
        '\u1EE9': 'u',
        '\u1EEF': 'u',
        '\u1EED': 'u',
        '\u1EF1': 'u',
        '\u1EE5': 'u',
        '\u1E73': 'u',
        '\u0173': 'u',
        '\u1E77': 'u',
        '\u1E75': 'u',
        '\u0289': 'u',
        '\u24E5': 'v',
        '\uFF56': 'v',
        '\u1E7D': 'v',
        '\u1E7F': 'v',
        '\u028B': 'v',
        '\uA75F': 'v',
        '\u028C': 'v',
        '\uA761': 'vy',
        '\u24E6': 'w',
        '\uFF57': 'w',
        '\u1E81': 'w',
        '\u1E83': 'w',
        '\u0175': 'w',
        '\u1E87': 'w',
        '\u1E85': 'w',
        '\u1E98': 'w',
        '\u1E89': 'w',
        '\u2C73': 'w',
        '\u24E7': 'x',
        '\uFF58': 'x',
        '\u1E8B': 'x',
        '\u1E8D': 'x',
        '\u24E8': 'y',
        '\uFF59': 'y',
        '\u1EF3': 'y',
        '\u00FD': 'y',
        '\u0177': 'y',
        '\u1EF9': 'y',
        '\u0233': 'y',
        '\u1E8F': 'y',
        '\u00FF': 'y',
        '\u1EF7': 'y',
        '\u1E99': 'y',
        '\u1EF5': 'y',
        '\u01B4': 'y',
        '\u024F': 'y',
        '\u1EFF': 'y',
        '\u24E9': 'z',
        '\uFF5A': 'z',
        '\u017A': 'z',
        '\u1E91': 'z',
        '\u017C': 'z',
        '\u017E': 'z',
        '\u1E93': 'z',
        '\u1E95': 'z',
        '\u01B6': 'z',
        '\u0225': 'z',
        '\u0240': 'z',
        '\u2C6C': 'z',
        '\uA763': 'z',
        '\u0386': '\u0391',
        '\u0388': '\u0395',
        '\u0389': '\u0397',
        '\u038A': '\u0399',
        '\u03AA': '\u0399',
        '\u038C': '\u039F',
        '\u038E': '\u03A5',
        '\u03AB': '\u03A5',
        '\u038F': '\u03A9',
        '\u03AC': '\u03B1',
        '\u03AD': '\u03B5',
        '\u03AE': '\u03B7',
        '\u03AF': '\u03B9',
        '\u03CA': '\u03B9',
        '\u0390': '\u03B9',
        '\u03CC': '\u03BF',
        '\u03CD': '\u03C5',
        '\u03CB': '\u03C5',
        '\u03B0': '\u03C5',
        '\u03C9': '\u03C9',
        '\u03C2': '\u03C3'
      };
      return diacritics;
    });
    S2.define('select2/data/base', ['../utils'], function (Utils) {
      function BaseAdapter($element, options) {
        BaseAdapter.__super__.constructor.call(this);
      }

      Utils.Extend(BaseAdapter, Utils.Observable);

      BaseAdapter.prototype.current = function (callback) {
        throw new Error('The `current` method must be defined in child classes.');
      };

      BaseAdapter.prototype.query = function (params, callback) {
        throw new Error('The `query` method must be defined in child classes.');
      };

      BaseAdapter.prototype.bind = function (container, $container) {// Can be implemented in subclasses
      };

      BaseAdapter.prototype.destroy = function () {// Can be implemented in subclasses
      };

      BaseAdapter.prototype.generateResultId = function (container, data) {
        var id = container.id + '-result-';
        id += Utils.generateChars(4);

        if (data.id != null) {
          id += '-' + data.id.toString();
        } else {
          id += '-' + Utils.generateChars(4);
        }

        return id;
      };

      return BaseAdapter;
    });
    S2.define('select2/data/select', ['./base', '../utils', 'jquery'], function (BaseAdapter, Utils, $) {
      function SelectAdapter($element, options) {
        this.$element = $element;
        this.options = options;

        SelectAdapter.__super__.constructor.call(this);
      }

      Utils.Extend(SelectAdapter, BaseAdapter);

      SelectAdapter.prototype.current = function (callback) {
        var data = [];
        var self = this;
        this.$element.find(':selected').each(function () {
          var $option = $(this);
          var option = self.item($option);
          data.push(option);
        });
        callback(data);
      };

      SelectAdapter.prototype.select = function (data) {
        var self = this;
        data.selected = true; // If data.element is a DOM node, use it instead

        if ($(data.element).is('option')) {
          data.element.selected = true;
          this.$element.trigger('change');
          return;
        }

        if (this.$element.prop('multiple')) {
          this.current(function (currentData) {
            var val = [];
            data = [data];
            data.push.apply(data, currentData);

            for (var d = 0; d < data.length; d++) {
              var id = data[d].id;

              if ($.inArray(id, val) === -1) {
                val.push(id);
              }
            }

            self.$element.val(val);
            self.$element.trigger('change');
          });
        } else {
          var val = data.id;
          this.$element.val(val);
          this.$element.trigger('change');
        }
      };

      SelectAdapter.prototype.unselect = function (data) {
        var self = this;

        if (!this.$element.prop('multiple')) {
          return;
        }

        data.selected = false;

        if ($(data.element).is('option')) {
          data.element.selected = false;
          this.$element.trigger('change');
          return;
        }

        this.current(function (currentData) {
          var val = [];

          for (var d = 0; d < currentData.length; d++) {
            var id = currentData[d].id;

            if (id !== data.id && $.inArray(id, val) === -1) {
              val.push(id);
            }
          }

          self.$element.val(val);
          self.$element.trigger('change');
        });
      };

      SelectAdapter.prototype.bind = function (container, $container) {
        var self = this;
        this.container = container;
        container.on('select', function (params) {
          self.select(params.data);
        });
        container.on('unselect', function (params) {
          self.unselect(params.data);
        });
      };

      SelectAdapter.prototype.destroy = function () {
        // Remove anything added to child elements
        this.$element.find('*').each(function () {
          // Remove any custom data set by Select2
          $.removeData(this, 'data');
        });
      };

      SelectAdapter.prototype.query = function (params, callback) {
        var data = [];
        var self = this;
        var $options = this.$element.children();
        $options.each(function () {
          var $option = $(this);

          if (!$option.is('option') && !$option.is('optgroup')) {
            return;
          }

          var option = self.item($option);
          var matches = self.matches(params, option);

          if (matches !== null) {
            data.push(matches);
          }
        });
        callback({
          results: data
        });
      };

      SelectAdapter.prototype.addOptions = function ($options) {
        Utils.appendMany(this.$element, $options);
      };

      SelectAdapter.prototype.option = function (data) {
        var option;

        if (data.children) {
          option = document.createElement('optgroup');
          option.label = data.text;
        } else {
          option = document.createElement('option');

          if (option.textContent !== undefined) {
            option.textContent = data.text;
          } else {
            option.innerText = data.text;
          }
        }

        if (data.id) {
          option.value = data.id;
        }

        if (data.disabled) {
          option.disabled = true;
        }

        if (data.selected) {
          option.selected = true;
        }

        if (data.title) {
          option.title = data.title;
        }

        var $option = $(option);

        var normalizedData = this._normalizeItem(data);

        normalizedData.element = option; // Override the option's data with the combined data

        $.data(option, 'data', normalizedData);
        return $option;
      };

      SelectAdapter.prototype.item = function ($option) {
        var data = {};
        data = $.data($option[0], 'data');

        if (data != null) {
          return data;
        }

        if ($option.is('option')) {
          data = {
            id: $option.val(),
            text: $option.text(),
            disabled: $option.prop('disabled'),
            selected: $option.prop('selected'),
            title: $option.prop('title')
          };
        } else if ($option.is('optgroup')) {
          data = {
            text: $option.prop('label'),
            children: [],
            title: $option.prop('title')
          };
          var $children = $option.children('option');
          var children = [];

          for (var c = 0; c < $children.length; c++) {
            var $child = $($children[c]);
            var child = this.item($child);
            children.push(child);
          }

          data.children = children;
        }

        data = this._normalizeItem(data);
        data.element = $option[0];
        $.data($option[0], 'data', data);
        return data;
      };

      SelectAdapter.prototype._normalizeItem = function (item) {
        if (!$.isPlainObject(item)) {
          item = {
            id: item,
            text: item
          };
        }

        item = $.extend({}, {
          text: ''
        }, item);
        var defaults = {
          selected: false,
          disabled: false
        };

        if (item.id != null) {
          item.id = item.id.toString();
        }

        if (item.text != null) {
          item.text = item.text.toString();
        }

        if (item._resultId == null && item.id && this.container != null) {
          item._resultId = this.generateResultId(this.container, item);
        }

        return $.extend({}, defaults, item);
      };

      SelectAdapter.prototype.matches = function (params, data) {
        var matcher = this.options.get('matcher');
        return matcher(params, data);
      };

      return SelectAdapter;
    });
    S2.define('select2/data/array', ['./select', '../utils', 'jquery'], function (SelectAdapter, Utils, $) {
      function ArrayAdapter($element, options) {
        var data = options.get('data') || [];

        ArrayAdapter.__super__.constructor.call(this, $element, options);

        this.addOptions(this.convertToOptions(data));
      }

      Utils.Extend(ArrayAdapter, SelectAdapter);

      ArrayAdapter.prototype.select = function (data) {
        var $option = this.$element.find('option').filter(function (i, elm) {
          return elm.value == data.id.toString();
        });

        if ($option.length === 0) {
          $option = this.option(data);
          this.addOptions($option);
        }

        ArrayAdapter.__super__.select.call(this, data);
      };

      ArrayAdapter.prototype.convertToOptions = function (data) {
        var self = this;
        var $existing = this.$element.find('option');
        var existingIds = $existing.map(function () {
          return self.item($(this)).id;
        }).get();
        var $options = []; // Filter out all items except for the one passed in the argument

        function onlyItem(item) {
          return function () {
            return $(this).val() == item.id;
          };
        }

        for (var d = 0; d < data.length; d++) {
          var item = this._normalizeItem(data[d]); // Skip items which were pre-loaded, only merge the data


          if ($.inArray(item.id, existingIds) >= 0) {
            var $existingOption = $existing.filter(onlyItem(item));
            var existingData = this.item($existingOption);
            var newData = $.extend(true, {}, existingData, item);
            var $newOption = this.option(existingData);
            $existingOption.replaceWith($newOption);
            continue;
          }

          var $option = this.option(item);

          if (item.children) {
            var $children = this.convertToOptions(item.children);
            Utils.appendMany($option, $children);
          }

          $options.push($option);
        }

        return $options;
      };

      return ArrayAdapter;
    });
    S2.define('select2/data/ajax', ['./array', '../utils', 'jquery'], function (ArrayAdapter, Utils, $) {
      function AjaxAdapter($element, options) {
        this.ajaxOptions = this._applyDefaults(options.get('ajax'));

        if (this.ajaxOptions.processResults != null) {
          this.processResults = this.ajaxOptions.processResults;
        }

        ArrayAdapter.__super__.constructor.call(this, $element, options);
      }

      Utils.Extend(AjaxAdapter, ArrayAdapter);

      AjaxAdapter.prototype._applyDefaults = function (options) {
        var defaults = {
          data: function (params) {
            return {
              q: params.term
            };
          },
          transport: function (params, success, failure) {
            var $request = $.ajax(params);
            $request.then(success);
            $request.fail(failure);
            return $request;
          }
        };
        return $.extend({}, defaults, options, true);
      };

      AjaxAdapter.prototype.processResults = function (results) {
        return results;
      };

      AjaxAdapter.prototype.query = function (params, callback) {
        var matches = [];
        var self = this;

        if (this._request != null) {
          // JSONP requests cannot always be aborted
          if ($.isFunction(this._request.abort)) {
            this._request.abort();
          }

          this._request = null;
        }

        var options = $.extend({
          type: 'GET'
        }, this.ajaxOptions);

        if (typeof options.url === 'function') {
          options.url = options.url(params);
        }

        if (typeof options.data === 'function') {
          options.data = options.data(params);
        }

        function request() {
          var $request = options.transport(options, function (data) {
            var results = self.processResults(data, params);

            if (self.options.get('debug') && window.console && console.error) {
              // Check to make sure that the response included a `results` key.
              if (!results || !results.results || !$.isArray(results.results)) {
                console.error('Select2: The AJAX results did not return an array in the ' + '`results` key of the response.');
              }
            }

            callback(results);
          }, function () {// TODO: Handle AJAX errors
          });
          self._request = $request;
        }

        if (this.ajaxOptions.delay && params.term !== '') {
          if (this._queryTimeout) {
            window.clearTimeout(this._queryTimeout);
          }

          this._queryTimeout = window.setTimeout(request, this.ajaxOptions.delay);
        } else {
          request();
        }
      };

      return AjaxAdapter;
    });
    S2.define('select2/data/tags', ['jquery'], function ($) {
      function Tags(decorated, $element, options) {
        var tags = options.get('tags');
        var createTag = options.get('createTag');

        if (createTag !== undefined) {
          this.createTag = createTag;
        }

        decorated.call(this, $element, options);

        if ($.isArray(tags)) {
          for (var t = 0; t < tags.length; t++) {
            var tag = tags[t];

            var item = this._normalizeItem(tag);

            var $option = this.option(item);
            this.$element.append($option);
          }
        }
      }

      Tags.prototype.query = function (decorated, params, callback) {
        var self = this;

        this._removeOldTags();

        if (params.term == null || params.page != null) {
          decorated.call(this, params, callback);
          return;
        }

        function wrapper(obj, child) {
          var data = obj.results;

          for (var i = 0; i < data.length; i++) {
            var option = data[i];
            var checkChildren = option.children != null && !wrapper({
              results: option.children
            }, true);
            var checkText = option.text === params.term;

            if (checkText || checkChildren) {
              if (child) {
                return false;
              }

              obj.data = data;
              callback(obj);
              return;
            }
          }

          if (child) {
            return true;
          }

          var tag = self.createTag(params);

          if (tag != null) {
            var $option = self.option(tag);
            $option.attr('data-select2-tag', true);
            self.addOptions([$option]);
            self.insertTag(data, tag);
          }

          obj.results = data;
          callback(obj);
        }

        decorated.call(this, params, wrapper);
      };

      Tags.prototype.createTag = function (decorated, params) {
        var term = $.trim(params.term);

        if (term === '') {
          return null;
        }

        return {
          id: term,
          text: term
        };
      };

      Tags.prototype.insertTag = function (_, data, tag) {
        data.unshift(tag);
      };

      Tags.prototype._removeOldTags = function (_) {
        var tag = this._lastTag;
        var $options = this.$element.find('option[data-select2-tag]');
        $options.each(function () {
          if (this.selected) {
            return;
          }

          $(this).remove();
        });
      };

      return Tags;
    });
    S2.define('select2/data/tokenizer', ['jquery'], function ($) {
      function Tokenizer(decorated, $element, options) {
        var tokenizer = options.get('tokenizer');

        if (tokenizer !== undefined) {
          this.tokenizer = tokenizer;
        }

        decorated.call(this, $element, options);
      }

      Tokenizer.prototype.bind = function (decorated, container, $container) {
        decorated.call(this, container, $container);
        this.$search = container.dropdown.$search || container.selection.$search || $container.find('.select2-search__field');
      };

      Tokenizer.prototype.query = function (decorated, params, callback) {
        var self = this;

        function select(data) {
          self.select(data);
        }

        params.term = params.term || '';
        var tokenData = this.tokenizer(params, this.options, select);

        if (tokenData.term !== params.term) {
          // Replace the search term if we have the search box
          if (this.$search.length) {
            this.$search.val(tokenData.term);
            this.$search.focus();
          }

          params.term = tokenData.term;
        }

        decorated.call(this, params, callback);
      };

      Tokenizer.prototype.tokenizer = function (_, params, options, callback) {
        var separators = options.get('tokenSeparators') || [];
        var term = params.term;
        var i = 0;

        var createTag = this.createTag || function (params) {
          return {
            id: params.term,
            text: params.term
          };
        };

        while (i < term.length) {
          var termChar = term[i];

          if ($.inArray(termChar, separators) === -1) {
            i++;
            continue;
          }

          var part = term.substr(0, i);
          var partParams = $.extend({}, params, {
            term: part
          });
          var data = createTag(partParams);
          callback(data); // Reset the term to not include the tokenized portion

          term = term.substr(i + 1) || '';
          i = 0;
        }

        return {
          term: term
        };
      };

      return Tokenizer;
    });
    S2.define('select2/data/minimumInputLength', [], function () {
      function MinimumInputLength(decorated, $e, options) {
        this.minimumInputLength = options.get('minimumInputLength');
        decorated.call(this, $e, options);
      }

      MinimumInputLength.prototype.query = function (decorated, params, callback) {
        params.term = params.term || '';

        if (params.term.length < this.minimumInputLength) {
          this.trigger('results:message', {
            message: 'inputTooShort',
            args: {
              minimum: this.minimumInputLength,
              input: params.term,
              params: params
            }
          });
          return;
        }

        decorated.call(this, params, callback);
      };

      return MinimumInputLength;
    });
    S2.define('select2/data/maximumInputLength', [], function () {
      function MaximumInputLength(decorated, $e, options) {
        this.maximumInputLength = options.get('maximumInputLength');
        decorated.call(this, $e, options);
      }

      MaximumInputLength.prototype.query = function (decorated, params, callback) {
        params.term = params.term || '';

        if (this.maximumInputLength > 0 && params.term.length > this.maximumInputLength) {
          this.trigger('results:message', {
            message: 'inputTooLong',
            args: {
              maximum: this.maximumInputLength,
              input: params.term,
              params: params
            }
          });
          return;
        }

        decorated.call(this, params, callback);
      };

      return MaximumInputLength;
    });
    S2.define('select2/data/maximumSelectionLength', [], function () {
      function MaximumSelectionLength(decorated, $e, options) {
        this.maximumSelectionLength = options.get('maximumSelectionLength');
        decorated.call(this, $e, options);
      }

      MaximumSelectionLength.prototype.query = function (decorated, params, callback) {
        var self = this;
        this.current(function (currentData) {
          var count = currentData != null ? currentData.length : 0;

          if (self.maximumSelectionLength > 0 && count >= self.maximumSelectionLength) {
            self.trigger('results:message', {
              message: 'maximumSelected',
              args: {
                maximum: self.maximumSelectionLength
              }
            });
            return;
          }

          decorated.call(self, params, callback);
        });
      };

      return MaximumSelectionLength;
    });
    S2.define('select2/dropdown', ['jquery', './utils'], function ($, Utils) {
      function Dropdown($element, options) {
        this.$element = $element;
        this.options = options;

        Dropdown.__super__.constructor.call(this);
      }

      Utils.Extend(Dropdown, Utils.Observable);

      Dropdown.prototype.render = function () {
        var $dropdown = $('<span class="select2-dropdown">' + '<span class="select2-results"></span>' + '</span>');
        $dropdown.attr('dir', this.options.get('dir'));
        this.$dropdown = $dropdown;
        return $dropdown;
      };

      Dropdown.prototype.position = function ($dropdown, $container) {// Should be implmented in subclasses
      };

      Dropdown.prototype.destroy = function () {
        // Remove the dropdown from the DOM
        this.$dropdown.remove();
      };

      return Dropdown;
    });
    S2.define('select2/dropdown/search', ['jquery', '../utils'], function ($, Utils) {
      function Search() {}

      Search.prototype.render = function (decorated) {
        var $rendered = decorated.call(this);
        var $search = $('<span class="select2-search select2-search--dropdown">' + '<input class="select2-search__field" type="search" tabindex="-1"' + ' autocomplete="off" autocorrect="off" autocapitalize="off"' + ' spellcheck="false" role="textbox" />' + '</span>');
        this.$searchContainer = $search;
        this.$search = $search.find('input');
        $rendered.prepend($search);
        return $rendered;
      };

      Search.prototype.bind = function (decorated, container, $container) {
        var self = this;
        decorated.call(this, container, $container);
        this.$search.on('keydown', function (evt) {
          self.trigger('keypress', evt);
          self._keyUpPrevented = evt.isDefaultPrevented();
        }); // Workaround for browsers which do not support the `input` event
        // This will prevent double-triggering of events for browsers which support
        // both the `keyup` and `input` events.

        this.$search.on('input', function (evt) {
          // Unbind the duplicated `keyup` event
          $(this).off('keyup');
        });
        this.$search.on('keyup input', function (evt) {
          self.handleSearch(evt);
        });
        container.on('open', function () {
          self.$search.attr('tabindex', 0);
          self.$search.focus();
          window.setTimeout(function () {
            self.$search.focus();
          }, 0);
        });
        container.on('close', function () {
          self.$search.attr('tabindex', -1);
          self.$search.val('');
        });
        container.on('results:all', function (params) {
          if (params.query.term == null || params.query.term === '') {
            var showSearch = self.showSearch(params);

            if (showSearch) {
              self.$searchContainer.removeClass('select2-search--hide');
            } else {
              self.$searchContainer.addClass('select2-search--hide');
            }
          }
        });
      };

      Search.prototype.handleSearch = function (evt) {
        if (!this._keyUpPrevented) {
          var input = this.$search.val();
          this.trigger('query', {
            term: input
          });
        }

        this._keyUpPrevented = false;
      };

      Search.prototype.showSearch = function (_, params) {
        return true;
      };

      return Search;
    });
    S2.define('select2/dropdown/hidePlaceholder', [], function () {
      function HidePlaceholder(decorated, $element, options, dataAdapter) {
        this.placeholder = this.normalizePlaceholder(options.get('placeholder'));
        decorated.call(this, $element, options, dataAdapter);
      }

      HidePlaceholder.prototype.append = function (decorated, data) {
        data.results = this.removePlaceholder(data.results);
        decorated.call(this, data);
      };

      HidePlaceholder.prototype.normalizePlaceholder = function (_, placeholder) {
        if (typeof placeholder === 'string') {
          placeholder = {
            id: '',
            text: placeholder
          };
        }

        return placeholder;
      };

      HidePlaceholder.prototype.removePlaceholder = function (_, data) {
        var modifiedData = data.slice(0);

        for (var d = data.length - 1; d >= 0; d--) {
          var item = data[d];

          if (this.placeholder.id === item.id) {
            modifiedData.splice(d, 1);
          }
        }

        return modifiedData;
      };

      return HidePlaceholder;
    });
    S2.define('select2/dropdown/infiniteScroll', ['jquery'], function ($) {
      function InfiniteScroll(decorated, $element, options, dataAdapter) {
        this.lastParams = {};
        decorated.call(this, $element, options, dataAdapter);
        this.$loadingMore = this.createLoadingMore();
        this.loading = false;
      }

      InfiniteScroll.prototype.append = function (decorated, data) {
        this.$loadingMore.remove();
        this.loading = false;
        decorated.call(this, data);

        if (this.showLoadingMore(data)) {
          this.$results.append(this.$loadingMore);
        }
      };

      InfiniteScroll.prototype.bind = function (decorated, container, $container) {
        var self = this;
        decorated.call(this, container, $container);
        container.on('query', function (params) {
          self.lastParams = params;
          self.loading = true;
        });
        container.on('query:append', function (params) {
          self.lastParams = params;
          self.loading = true;
        });
        this.$results.on('scroll', function () {
          var isLoadMoreVisible = $.contains(document.documentElement, self.$loadingMore[0]);

          if (self.loading || !isLoadMoreVisible) {
            return;
          }

          var currentOffset = self.$results.offset().top + self.$results.outerHeight(false);
          var loadingMoreOffset = self.$loadingMore.offset().top + self.$loadingMore.outerHeight(false);

          if (currentOffset + 50 >= loadingMoreOffset) {
            self.loadMore();
          }
        });
      };

      InfiniteScroll.prototype.loadMore = function () {
        this.loading = true;
        var params = $.extend({}, {
          page: 1
        }, this.lastParams);
        params.page++;
        this.trigger('query:append', params);
      };

      InfiniteScroll.prototype.showLoadingMore = function (_, data) {
        return data.pagination && data.pagination.more;
      };

      InfiniteScroll.prototype.createLoadingMore = function () {
        var $option = $('<li class="option load-more" role="treeitem"></li>');
        var message = this.options.get('translations').get('loadingMore');
        $option.html(message(this.lastParams));
        return $option;
      };

      return InfiniteScroll;
    });
    S2.define('select2/dropdown/attachBody', ['jquery', '../utils'], function ($, Utils) {
      function AttachBody(decorated, $element, options) {
        this.$dropdownParent = options.get('dropdownParent') || document.body;
        decorated.call(this, $element, options);
      }

      AttachBody.prototype.bind = function (decorated, container, $container) {
        var self = this;
        var setupResultsEvents = false;
        decorated.call(this, container, $container);
        container.on('open', function () {
          self._showDropdown();

          self._attachPositioningHandler(container);

          if (!setupResultsEvents) {
            setupResultsEvents = true;
            container.on('results:all', function () {
              self._positionDropdown();

              self._resizeDropdown();
            });
            container.on('results:append', function () {
              self._positionDropdown();

              self._resizeDropdown();
            });
          }
        });
        container.on('close', function () {
          self._hideDropdown();

          self._detachPositioningHandler(container);
        });
        this.$dropdownContainer.on('mousedown', function (evt) {
          evt.stopPropagation();
        });
      };

      AttachBody.prototype.position = function (decorated, $dropdown, $container) {
        // Clone all of the container classes
        $dropdown.attr('class', $container.attr('class'));
        $dropdown.removeClass('select2');
        $dropdown.addClass('select2-container--open');
        $dropdown.css({
          position: 'absolute',
          top: -999999
        });
        this.$container = $container;
      };

      AttachBody.prototype.render = function (decorated) {
        var $container = $('<span></span>');
        var $dropdown = decorated.call(this);
        $container.append($dropdown);
        this.$dropdownContainer = $container;
        return $container;
      };

      AttachBody.prototype._hideDropdown = function (decorated) {
        this.$dropdownContainer.detach();
      };

      AttachBody.prototype._attachPositioningHandler = function (container) {
        var self = this;
        var scrollEvent = 'scroll.select2.' + container.id;
        var resizeEvent = 'resize.select2.' + container.id;
        var orientationEvent = 'orientationchange.select2.' + container.id;
        var $watchers = this.$container.parents().filter(Utils.hasScroll);
        $watchers.each(function () {
          $(this).data('select2-scroll-position', {
            x: $(this).scrollLeft(),
            y: $(this).scrollTop()
          });
        });
        $watchers.on(scrollEvent, function (ev) {
          var position = $(this).data('select2-scroll-position');
          $(this).scrollTop(position.y);
        });
        $(window).on(scrollEvent + ' ' + resizeEvent + ' ' + orientationEvent, function (e) {
          self._positionDropdown();

          self._resizeDropdown();
        });
      };

      AttachBody.prototype._detachPositioningHandler = function (container) {
        var scrollEvent = 'scroll.select2.' + container.id;
        var resizeEvent = 'resize.select2.' + container.id;
        var orientationEvent = 'orientationchange.select2.' + container.id;
        var $watchers = this.$container.parents().filter(Utils.hasScroll);
        $watchers.off(scrollEvent);
        $(window).off(scrollEvent + ' ' + resizeEvent + ' ' + orientationEvent);
      };

      AttachBody.prototype._positionDropdown = function () {
        var $window = $(window);
        var isCurrentlyAbove = this.$dropdown.hasClass('select2-dropdown--above');
        var isCurrentlyBelow = this.$dropdown.hasClass('select2-dropdown--below');
        var newDirection = null;
        var position = this.$container.position();
        var offset = this.$container.offset();
        offset.bottom = offset.top + this.$container.outerHeight(false);
        var container = {
          height: this.$container.outerHeight(false)
        };
        container.top = offset.top;
        container.bottom = offset.top + container.height;
        var dropdown = {
          height: this.$dropdown.outerHeight(false)
        };
        var viewport = {
          top: $window.scrollTop(),
          bottom: $window.scrollTop() + $window.height()
        };
        var enoughRoomAbove = viewport.top < offset.top - dropdown.height;
        var enoughRoomBelow = viewport.bottom > offset.bottom + dropdown.height;
        var css = {
          left: offset.left,
          top: container.bottom
        };

        if (!isCurrentlyAbove && !isCurrentlyBelow) {
          newDirection = 'below';
        }

        if (!enoughRoomBelow && enoughRoomAbove && !isCurrentlyAbove) {
          newDirection = 'above';
        } else if (!enoughRoomAbove && enoughRoomBelow && isCurrentlyAbove) {
          newDirection = 'below';
        }

        if (newDirection == 'above' || isCurrentlyAbove && newDirection !== 'below') {
          css.top = container.top - dropdown.height;
        }

        if (newDirection != null) {
          this.$dropdown.removeClass('select2-dropdown--below select2-dropdown--above').addClass('select2-dropdown--' + newDirection);
          this.$container.removeClass('select2-container--below select2-container--above').addClass('select2-container--' + newDirection);
        }

        this.$dropdownContainer.css(css);
      };

      AttachBody.prototype._resizeDropdown = function () {
        this.$dropdownContainer.width();
        var css = {
          width: this.$container.outerWidth(false) + 'px'
        };

        if (this.options.get('dropdownAutoWidth')) {
          css.minWidth = css.width;
          css.width = 'auto';
        }

        this.$dropdown.css(css);
      };

      AttachBody.prototype._showDropdown = function (decorated) {
        this.$dropdownContainer.appendTo(this.$dropdownParent);

        this._positionDropdown();

        this._resizeDropdown();
      };

      return AttachBody;
    });
    S2.define('select2/dropdown/minimumResultsForSearch', [], function () {
      function countResults(data) {
        var count = 0;

        for (var d = 0; d < data.length; d++) {
          var item = data[d];

          if (item.children) {
            count += countResults(item.children);
          } else {
            count++;
          }
        }

        return count;
      }

      function MinimumResultsForSearch(decorated, $element, options, dataAdapter) {
        this.minimumResultsForSearch = options.get('minimumResultsForSearch');

        if (this.minimumResultsForSearch < 0) {
          this.minimumResultsForSearch = Infinity;
        }

        decorated.call(this, $element, options, dataAdapter);
      }

      MinimumResultsForSearch.prototype.showSearch = function (decorated, params) {
        if (countResults(params.data.results) < this.minimumResultsForSearch) {
          return false;
        }

        return decorated.call(this, params);
      };

      return MinimumResultsForSearch;
    });
    S2.define('select2/dropdown/selectOnClose', [], function () {
      function SelectOnClose() {}

      SelectOnClose.prototype.bind = function (decorated, container, $container) {
        var self = this;
        decorated.call(this, container, $container);
        container.on('close', function () {
          self._handleSelectOnClose();
        });
      };

      SelectOnClose.prototype._handleSelectOnClose = function () {
        var $highlightedResults = this.getHighlightedResults();

        if ($highlightedResults.length < 1) {
          return;
        }

        this.trigger('select', {
          data: $highlightedResults.data('data')
        });
      };

      return SelectOnClose;
    });
    S2.define('select2/dropdown/closeOnSelect', [], function () {
      function CloseOnSelect() {}

      CloseOnSelect.prototype.bind = function (decorated, container, $container) {
        var self = this;
        decorated.call(this, container, $container);
        container.on('select', function (evt) {
          self._selectTriggered(evt);
        });
        container.on('unselect', function (evt) {
          self._selectTriggered(evt);
        });
      };

      CloseOnSelect.prototype._selectTriggered = function (_, evt) {
        var originalEvent = evt.originalEvent; // Don't close if the control key is being held

        if (originalEvent && originalEvent.ctrlKey) {
          return;
        }

        this.trigger('close');
      };

      return CloseOnSelect;
    });
    S2.define('select2/i18n/en', [], function () {
      // English
      return {
        errorLoading: function () {
          return 'The results could not be loaded.';
        },
        inputTooLong: function (args) {
          var overChars = args.input.length - args.maximum;
          var message = 'Please delete ' + overChars + ' character';

          if (overChars != 1) {
            message += 's';
          }

          return message;
        },
        inputTooShort: function (args) {
          var remainingChars = args.minimum - args.input.length;
          var message = 'Please enter ' + remainingChars + ' or more characters';
          return message;
        },
        loadingMore: function () {
          return 'Loading more results…';
        },
        maximumSelected: function (args) {
          var message = 'You can only select ' + args.maximum + ' item';

          if (args.maximum != 1) {
            message += 's';
          }

          return message;
        },
        noResults: function () {
          return 'No results found';
        },
        searching: function () {
          return 'Searching…';
        }
      };
    });
    S2.define('select2/defaults', ['jquery', 'require', './results', './selection/single', './selection/multiple', './selection/placeholder', './selection/allowClear', './selection/search', './selection/eventRelay', './utils', './translation', './diacritics', './data/select', './data/array', './data/ajax', './data/tags', './data/tokenizer', './data/minimumInputLength', './data/maximumInputLength', './data/maximumSelectionLength', './dropdown', './dropdown/search', './dropdown/hidePlaceholder', './dropdown/infiniteScroll', './dropdown/attachBody', './dropdown/minimumResultsForSearch', './dropdown/selectOnClose', './dropdown/closeOnSelect', './i18n/en'], function ($, require, ResultsList, SingleSelection, MultipleSelection, Placeholder, AllowClear, SelectionSearch, EventRelay, Utils, Translation, DIACRITICS, SelectData, ArrayData, AjaxData, Tags, Tokenizer, MinimumInputLength, MaximumInputLength, MaximumSelectionLength, Dropdown, DropdownSearch, HidePlaceholder, InfiniteScroll, AttachBody, MinimumResultsForSearch, SelectOnClose, CloseOnSelect, EnglishTranslation) {
      function Defaults() {
        this.reset();
      }

      Defaults.prototype.apply = function (options) {
        options = $.extend({}, this.defaults, options);

        if (options.dataAdapter == null) {
          if (options.ajax != null) {
            options.dataAdapter = AjaxData;
          } else if (options.data != null) {
            options.dataAdapter = ArrayData;
          } else {
            options.dataAdapter = SelectData;
          }

          if (options.minimumInputLength > 0) {
            options.dataAdapter = Utils.Decorate(options.dataAdapter, MinimumInputLength);
          }

          if (options.maximumInputLength > 0) {
            options.dataAdapter = Utils.Decorate(options.dataAdapter, MaximumInputLength);
          }

          if (options.maximumSelectionLength > 0) {
            options.dataAdapter = Utils.Decorate(options.dataAdapter, MaximumSelectionLength);
          }

          if (options.tags) {
            options.dataAdapter = Utils.Decorate(options.dataAdapter, Tags);
          }

          if (options.tokenSeparators != null || options.tokenizer != null) {
            options.dataAdapter = Utils.Decorate(options.dataAdapter, Tokenizer);
          }

          if (options.query != null) {
            var Query = require(options.amdBase + 'compat/query');

            options.dataAdapter = Utils.Decorate(options.dataAdapter, Query);
          }

          if (options.initSelection != null) {
            var InitSelection = require(options.amdBase + 'compat/initSelection');

            options.dataAdapter = Utils.Decorate(options.dataAdapter, InitSelection);
          }
        }

        if (options.resultsAdapter == null) {
          options.resultsAdapter = ResultsList;

          if (options.ajax != null) {
            options.resultsAdapter = Utils.Decorate(options.resultsAdapter, InfiniteScroll);
          }

          if (options.placeholder != null) {
            options.resultsAdapter = Utils.Decorate(options.resultsAdapter, HidePlaceholder);
          }

          if (options.selectOnClose) {
            options.resultsAdapter = Utils.Decorate(options.resultsAdapter, SelectOnClose);
          }
        }

        if (options.dropdownAdapter == null) {
          if (options.multiple) {
            options.dropdownAdapter = Dropdown;
          } else {
            var SearchableDropdown = Utils.Decorate(Dropdown, DropdownSearch);
            options.dropdownAdapter = SearchableDropdown;
          }

          if (options.minimumResultsForSearch !== 0) {
            options.dropdownAdapter = Utils.Decorate(options.dropdownAdapter, MinimumResultsForSearch);
          }

          if (options.closeOnSelect) {
            options.dropdownAdapter = Utils.Decorate(options.dropdownAdapter, CloseOnSelect);
          }

          if (options.dropdownCssClass != null || options.dropdownCss != null || options.adaptDropdownCssClass != null) {
            var DropdownCSS = require(options.amdBase + 'compat/dropdownCss');

            options.dropdownAdapter = Utils.Decorate(options.dropdownAdapter, DropdownCSS);
          }

          options.dropdownAdapter = Utils.Decorate(options.dropdownAdapter, AttachBody);
        }

        if (options.selectionAdapter == null) {
          if (options.multiple) {
            options.selectionAdapter = MultipleSelection;
          } else {
            options.selectionAdapter = SingleSelection;
          } // Add the placeholder mixin if a placeholder was specified


          if (options.placeholder != null) {
            options.selectionAdapter = Utils.Decorate(options.selectionAdapter, Placeholder);
          }

          if (options.allowClear) {
            options.selectionAdapter = Utils.Decorate(options.selectionAdapter, AllowClear);
          }

          if (options.multiple) {
            options.selectionAdapter = Utils.Decorate(options.selectionAdapter, SelectionSearch);
          }

          if (options.containerCssClass != null || options.containerCss != null || options.adaptContainerCssClass != null) {
            var ContainerCSS = require(options.amdBase + 'compat/containerCss');

            options.selectionAdapter = Utils.Decorate(options.selectionAdapter, ContainerCSS);
          }

          options.selectionAdapter = Utils.Decorate(options.selectionAdapter, EventRelay);
        }

        if (typeof options.language === 'string') {
          // Check if the language is specified with a region
          if (options.language.indexOf('-') > 0) {
            // Extract the region information if it is included
            var languageParts = options.language.split('-');
            var baseLanguage = languageParts[0];
            options.language = [options.language, baseLanguage];
          } else {
            options.language = [options.language];
          }
        }

        if ($.isArray(options.language)) {
          var languages = new Translation();
          options.language.push('en');
          var languageNames = options.language;

          for (var l = 0; l < languageNames.length; l++) {
            var name = languageNames[l];
            var language = {};

            try {
              // Try to load it with the original name
              language = Translation.loadPath(name);
            } catch (e) {
              try {
                // If we couldn't load it, check if it wasn't the full path
                name = this.defaults.amdLanguageBase + name;
                language = Translation.loadPath(name);
              } catch (ex) {
                // The translation could not be loaded at all. Sometimes this is
                // because of a configuration problem, other times this can be
                // because of how Select2 helps load all possible translation files.
                if (options.debug && window.console && console.warn) {
                  console.warn('Select2: The language file for "' + name + '" could not be ' + 'automatically loaded. A fallback will be used instead.');
                }

                continue;
              }
            }

            languages.extend(language);
          }

          options.translations = languages;
        } else {
          var baseTranslation = Translation.loadPath(this.defaults.amdLanguageBase + 'en');
          var customTranslation = new Translation(options.language);
          customTranslation.extend(baseTranslation);
          options.translations = customTranslation;
        }

        return options;
      };

      Defaults.prototype.reset = function () {
        function stripDiacritics(text) {
          // Used 'uni range + named function' from http://jsperf.com/diacritics/18
          function match(a) {
            return DIACRITICS[a] || a;
          }

          return text.replace(/[^\u0000-\u007E]/g, match);
        }

        function matcher(params, data) {
          // Always return the object if there is nothing to compare
          if ($.trim(params.term) === '') {
            return data;
          } // Do a recursive check for options with children


          if (data.children && data.children.length > 0) {
            // Clone the data object if there are children
            // This is required as we modify the object to remove any non-matches
            var match = $.extend(true, {}, data); // Check each child of the option

            for (var c = data.children.length - 1; c >= 0; c--) {
              var child = data.children[c];
              var matches = matcher(params, child); // If there wasn't a match, remove the object in the array

              if (matches == null) {
                match.children.splice(c, 1);
              }
            } // If any children matched, return the new object


            if (match.children.length > 0) {
              return match;
            } // If there were no matching children, check just the plain object


            return matcher(params, match);
          }

          var original = stripDiacritics(data.text).toUpperCase();
          var term = stripDiacritics(params.term).toUpperCase(); // Check if the text contains the term

          if (original.indexOf(term) > -1) {
            return data;
          } // If it doesn't contain the term, don't return anything


          return null;
        }

        this.defaults = {
          amdBase: './',
          amdLanguageBase: './i18n/',
          closeOnSelect: true,
          debug: false,
          dropdownAutoWidth: false,
          escapeMarkup: Utils.escapeMarkup,
          language: EnglishTranslation,
          matcher: matcher,
          minimumInputLength: 0,
          maximumInputLength: 0,
          maximumSelectionLength: 0,
          minimumResultsForSearch: 0,
          selectOnClose: false,
          sorter: function (data) {
            return data;
          },
          templateResult: function (result) {
            return result.text;
          },
          templateSelection: function (selection) {
            return selection.text;
          },
          theme: 'default',
          width: 'resolve'
        };
      };

      Defaults.prototype.set = function (key, value) {
        var camelKey = $.camelCase(key);
        var data = {};
        data[camelKey] = value;

        var convertedData = Utils._convertData(data);

        $.extend(this.defaults, convertedData);
      };

      var defaults = new Defaults();
      return defaults;
    });
    S2.define('select2/options', ['require', 'jquery', './defaults', './utils'], function (require, $, Defaults, Utils) {
      function Options(options, $element) {
        this.options = options;

        if ($element != null) {
          this.fromElement($element);
        }

        this.options = Defaults.apply(this.options);

        if ($element && $element.is('input')) {
          var InputCompat = require(this.get('amdBase') + 'compat/inputData');

          this.options.dataAdapter = Utils.Decorate(this.options.dataAdapter, InputCompat);
        }
      }

      Options.prototype.fromElement = function ($e) {
        var excludedData = ['select2'];

        if (this.options.multiple == null) {
          this.options.multiple = $e.prop('multiple');
        }

        if (this.options.disabled == null) {
          this.options.disabled = $e.prop('disabled');
        }

        if (this.options.language == null) {
          if ($e.prop('lang')) {
            this.options.language = $e.prop('lang').toLowerCase();
          } else if ($e.closest('[lang]').prop('lang')) {
            this.options.language = $e.closest('[lang]').prop('lang');
          }
        }

        if (this.options.dir == null) {
          if ($e.prop('dir')) {
            this.options.dir = $e.prop('dir');
          } else if ($e.closest('[dir]').prop('dir')) {
            this.options.dir = $e.closest('[dir]').prop('dir');
          } else {
            this.options.dir = 'ltr';
          }
        }

        $e.prop('disabled', this.options.disabled);
        $e.prop('multiple', this.options.multiple);

        if ($e.data('select2Tags')) {
          if (this.options.debug && window.console && console.warn) {
            console.warn('Select2: The `data-select2-tags` attribute has been changed to ' + 'use the `data-data` and `data-tags="true"` attributes and will be ' + 'removed in future versions of Select2.');
          }

          $e.data('data', $e.data('select2Tags'));
          $e.data('tags', true);
        }

        if ($e.data('ajaxUrl')) {
          if (this.options.debug && window.console && console.warn) {
            console.warn('Select2: The `data-ajax-url` attribute has been changed to ' + '`data-ajax--url` and support for the old attribute will be removed' + ' in future versions of Select2.');
          }

          $e.attr('ajax--url', $e.data('ajaxUrl'));
          $e.data('ajax--url', $e.data('ajaxUrl'));
        }

        var dataset = {}; // Prefer the element's `dataset` attribute if it exists
        // jQuery 1.x does not correctly handle data attributes with multiple dashes

        if ($.fn.jquery && $.fn.jquery.substr(0, 2) == '1.' && $e[0].dataset) {
          dataset = $.extend(true, {}, $e[0].dataset, $e.data());
        } else {
          dataset = $e.data();
        }

        var data = $.extend(true, {}, dataset);
        data = Utils._convertData(data);

        for (var key in data) {
          if ($.inArray(key, excludedData) > -1) {
            continue;
          }

          if ($.isPlainObject(this.options[key])) {
            $.extend(this.options[key], data[key]);
          } else {
            this.options[key] = data[key];
          }
        }

        return this;
      };

      Options.prototype.get = function (key) {
        return this.options[key];
      };

      Options.prototype.set = function (key, val) {
        this.options[key] = val;
      };

      return Options;
    });
    S2.define('select2/core', ['jquery', './options', './utils', './keys'], function ($, Options, Utils, KEYS) {
      var Select2 = function ($element, options) {
        if ($element.data('select2') != null) {
          $element.data('select2').destroy();
        }

        this.$element = $element;
        this.id = this._generateId($element);
        options = options || {};
        this.options = new Options(options, $element);

        Select2.__super__.constructor.call(this); // Set up the tabindex


        var tabindex = $element.attr('tabindex') || 0;
        $element.data('old-tabindex', tabindex);
        $element.attr('tabindex', '-1'); // Set up containers and adapters

        var DataAdapter = this.options.get('dataAdapter');
        this.dataAdapter = new DataAdapter($element, this.options);
        var $container = this.render();

        this._placeContainer($container);

        var SelectionAdapter = this.options.get('selectionAdapter');
        this.selection = new SelectionAdapter($element, this.options);
        this.$selection = this.selection.render();
        this.selection.position(this.$selection, $container);
        var DropdownAdapter = this.options.get('dropdownAdapter');
        this.dropdown = new DropdownAdapter($element, this.options);
        this.$dropdown = this.dropdown.render();
        this.dropdown.position(this.$dropdown, $container);
        var ResultsAdapter = this.options.get('resultsAdapter');
        this.results = new ResultsAdapter($element, this.options, this.dataAdapter);
        this.$results = this.results.render();
        this.results.position(this.$results, this.$dropdown); // Bind events

        var self = this; // Bind the container to all of the adapters

        this._bindAdapters(); // Register any DOM event handlers


        this._registerDomEvents(); // Register any internal event handlers


        this._registerDataEvents();

        this._registerSelectionEvents();

        this._registerDropdownEvents();

        this._registerResultsEvents();

        this._registerEvents(); // Set the initial state


        this.dataAdapter.current(function (initialData) {
          self.trigger('selection:update', {
            data: initialData
          });
        }); // Hide the original select

        $element.addClass('select2-hidden-accessible');
        $element.attr('aria-hidden', 'true'); // Synchronize any monitored attributes

        this._syncAttributes();

        $element.data('select2', this);
      };

      Utils.Extend(Select2, Utils.Observable);

      Select2.prototype._generateId = function ($element) {
        var id = '';

        if ($element.attr('id') != null) {
          id = $element.attr('id');
        } else if ($element.attr('name') != null) {
          id = $element.attr('name') + '-' + Utils.generateChars(2);
        } else {
          id = Utils.generateChars(4);
        }

        id = 'select2-' + id;
        return id;
      };

      Select2.prototype._placeContainer = function ($container) {
        $container.insertAfter(this.$element);

        var width = this._resolveWidth(this.$element, this.options.get('width'));

        if (width != null) {
          $container.css('width', width);
        }
      };

      Select2.prototype._resolveWidth = function ($element, method) {
        var WIDTH = /^width:(([-+]?([0-9]*\.)?[0-9]+)(px|em|ex|%|in|cm|mm|pt|pc))/i;

        if (method == 'resolve') {
          var styleWidth = this._resolveWidth($element, 'style');

          if (styleWidth != null) {
            return styleWidth;
          }

          return this._resolveWidth($element, 'element');
        }

        if (method == 'element') {
          var elementWidth = $element.outerWidth(false);

          if (elementWidth <= 0) {
            return 'auto';
          }

          return elementWidth + 'px';
        }

        if (method == 'style') {
          var style = $element.attr('style');

          if (typeof style !== 'string') {
            return null;
          }

          var attrs = style.split(';');

          for (var i = 0, l = attrs.length; i < l; i = i + 1) {
            var attr = attrs[i].replace(/\s/g, '');
            var matches = attr.match(WIDTH);

            if (matches !== null && matches.length >= 1) {
              return matches[1];
            }
          }

          return null;
        }

        return method;
      };

      Select2.prototype._bindAdapters = function () {
        this.dataAdapter.bind(this, this.$container);
        this.selection.bind(this, this.$container);
        this.dropdown.bind(this, this.$container);
        this.results.bind(this, this.$container);
      };

      Select2.prototype._registerDomEvents = function () {
        var self = this;
        this.$element.on('change.select2', function () {
          self.dataAdapter.current(function (data) {
            self.trigger('selection:update', {
              data: data
            });
          });
        });
        this._sync = Utils.bind(this._syncAttributes, this);

        if (this.$element[0].attachEvent) {
          this.$element[0].attachEvent('onpropertychange', this._sync);
        }

        var observer = window.MutationObserver || window.WebKitMutationObserver || window.MozMutationObserver;

        if (observer != null) {
          this._observer = new observer(function (mutations) {
            $.each(mutations, self._sync);
          });

          this._observer.observe(this.$element[0], {
            attributes: true,
            subtree: false
          });
        } else if (this.$element[0].addEventListener) {
          this.$element[0].addEventListener('DOMAttrModified', self._sync, false);
        }
      };

      Select2.prototype._registerDataEvents = function () {
        var self = this;
        this.dataAdapter.on('*', function (name, params) {
          self.trigger(name, params);
        });
      };

      Select2.prototype._registerSelectionEvents = function () {
        var self = this;
        var nonRelayEvents = ['toggle'];
        this.selection.on('toggle', function () {
          self.toggleDropdown();
        });
        this.selection.on('*', function (name, params) {
          if ($.inArray(name, nonRelayEvents) !== -1) {
            return;
          }

          self.trigger(name, params);
        });
      };

      Select2.prototype._registerDropdownEvents = function () {
        var self = this;
        this.dropdown.on('*', function (name, params) {
          self.trigger(name, params);
        });
      };

      Select2.prototype._registerResultsEvents = function () {
        var self = this;
        this.results.on('*', function (name, params) {
          self.trigger(name, params);
        });
      };

      Select2.prototype._registerEvents = function () {
        var self = this;
        this.on('open', function () {
          self.$container.addClass('select2-container--open');
        });
        this.on('close', function () {
          self.$container.removeClass('select2-container--open');
        });
        this.on('enable', function () {
          self.$container.removeClass('select2-container--disabled');
        });
        this.on('disable', function () {
          self.$container.addClass('select2-container--disabled');
        });
        this.on('focus', function () {
          self.$container.addClass('select2-container--focus');
        });
        this.on('blur', function () {
          self.$container.removeClass('select2-container--focus');
        });
        this.on('query', function (params) {
          if (!self.isOpen()) {
            self.trigger('open');
          }

          this.dataAdapter.query(params, function (data) {
            self.trigger('results:all', {
              data: data,
              query: params
            });
          });
        });
        this.on('query:append', function (params) {
          this.dataAdapter.query(params, function (data) {
            self.trigger('results:append', {
              data: data,
              query: params
            });
          });
        });
        this.on('keypress', function (evt) {
          var key = evt.which;

          if (self.isOpen()) {
            if (key === KEYS.ENTER) {
              self.trigger('results:select');
              evt.preventDefault();
            } else if (key === KEYS.SPACE && evt.ctrlKey) {
              self.trigger('results:toggle');
              evt.preventDefault();
            } else if (key === KEYS.UP) {
              self.trigger('results:previous');
              evt.preventDefault();
            } else if (key === KEYS.DOWN) {
              self.trigger('results:next');
              evt.preventDefault();
            } else if (key === KEYS.ESC || key === KEYS.TAB) {
              self.close();
              evt.preventDefault();
            }
          } else {
            if (key === KEYS.ENTER || key === KEYS.SPACE || (key === KEYS.DOWN || key === KEYS.UP) && evt.altKey) {
              self.open();
              evt.preventDefault();
            }
          }
        });
      };

      Select2.prototype._syncAttributes = function () {
        this.options.set('disabled', this.$element.prop('disabled'));

        if (this.options.get('disabled')) {
          if (this.isOpen()) {
            this.close();
          }

          this.trigger('disable');
        } else {
          this.trigger('enable');
        }
      };
      /**
       * Override the trigger method to automatically trigger pre-events when
       * there are events that can be prevented.
       */


      Select2.prototype.trigger = function (name, args) {
        var actualTrigger = Select2.__super__.trigger;
        var preTriggerMap = {
          'open': 'opening',
          'close': 'closing',
          'select': 'selecting',
          'unselect': 'unselecting'
        };

        if (name in preTriggerMap) {
          var preTriggerName = preTriggerMap[name];
          var preTriggerArgs = {
            prevented: false,
            name: name,
            args: args
          };
          actualTrigger.call(this, preTriggerName, preTriggerArgs);

          if (preTriggerArgs.prevented) {
            args.prevented = true;
            return;
          }
        }

        actualTrigger.call(this, name, args);
      };

      Select2.prototype.toggleDropdown = function () {
        if (this.options.get('disabled')) {
          return;
        }

        if (this.isOpen()) {
          this.close();
        } else {
          this.open();
        }
      };

      Select2.prototype.open = function () {
        if (this.isOpen()) {
          return;
        }

        this.trigger('query', {});
        this.trigger('open');
      };

      Select2.prototype.close = function () {
        if (!this.isOpen()) {
          return;
        }

        this.trigger('close');
      };

      Select2.prototype.isOpen = function () {
        return this.$container.hasClass('select2-container--open');
      };

      Select2.prototype.enable = function (args) {
        if (this.options.get('debug') && window.console && console.warn) {
          console.warn('Select2: The `select2("enable")` method has been deprecated and will' + ' be removed in later Select2 versions. Use $element.prop("disabled")' + ' instead.');
        }

        if (args == null || args.length === 0) {
          args = [true];
        }

        var disabled = !args[0];
        this.$element.prop('disabled', disabled);
      };

      Select2.prototype.data = function () {
        if (this.options.get('debug') && arguments.length > 0 && window.console && console.warn) {
          console.warn('Select2: Data can no longer be set using `select2("data")`. You ' + 'should consider setting the value instead using `$element.val()`.');
        }

        var data = [];
        this.dataAdapter.current(function (currentData) {
          data = currentData;
        });
        return data;
      };

      Select2.prototype.val = function (args) {
        if (this.options.get('debug') && window.console && console.warn) {
          console.warn('Select2: The `select2("val")` method has been deprecated and will be' + ' removed in later Select2 versions. Use $element.val() instead.');
        }

        if (args == null || args.length === 0) {
          return this.$element.val();
        }

        var newVal = args[0];

        if ($.isArray(newVal)) {
          newVal = $.map(newVal, function (obj) {
            return obj.toString();
          });
        }

        this.$element.val(newVal).trigger('change');
      };

      Select2.prototype.destroy = function () {
        this.$container.remove();

        if (this.$element[0].detachEvent) {
          this.$element[0].detachEvent('onpropertychange', this._sync);
        }

        if (this._observer != null) {
          this._observer.disconnect();

          this._observer = null;
        } else if (this.$element[0].removeEventListener) {
          this.$element[0].removeEventListener('DOMAttrModified', this._sync, false);
        }

        this._sync = null;
        this.$element.off('.select2');
        this.$element.attr('tabindex', this.$element.data('old-tabindex'));
        this.$element.removeClass('select2-hidden-accessible');
        this.$element.attr('aria-hidden', 'false');
        this.$element.removeData('select2');
        this.dataAdapter.destroy();
        this.selection.destroy();
        this.dropdown.destroy();
        this.results.destroy();
        this.dataAdapter = null;
        this.selection = null;
        this.dropdown = null;
        this.results = null;
      };

      Select2.prototype.render = function () {
        var $container = $('<span class="select2 select2-container">' + '<span class="selection"></span>' + '<span class="dropdown-wrapper" aria-hidden="true"></span>' + '</span>');
        $container.attr('dir', this.options.get('dir'));
        this.$container = $container;
        this.$container.addClass('select2-container--' + this.options.get('theme'));
        $container.data('element', this.$element);
        return $container;
      };

      return Select2;
    });
    S2.define('jquery.select2', ['jquery', 'require', './select2/core', './select2/defaults'], function ($, require, Select2, Defaults) {
      // Force jQuery.mousewheel to be loaded if it hasn't already
      require('jquery.mousewheel');

      if ($.fn.select2 == null) {
        // All methods that should return the element
        var thisMethods = ['open', 'close', 'destroy'];

        $.fn.select2 = function (options) {
          options = options || {};

          if (typeof options === 'object') {
            this.each(function () {
              var instanceOptions = $.extend({}, options, true);
              var instance = new Select2($(this), instanceOptions);
            });
            return this;
          } else if (typeof options === 'string') {
            var instance = this.data('select2');

            if (instance == null && window.console && console.error) {
              console.error('The select2(\'' + options + '\') method was called on an ' + 'element that is not using Select2.');
            }

            var args = Array.prototype.slice.call(arguments, 1);
            var ret = instance[options](args); // Check if we should be returning `this`

            if ($.inArray(options, thisMethods) > -1) {
              return this;
            }

            return ret;
          } else {
            throw new Error('Invalid arguments for Select2: ' + options);
          }
        };
      }

      if ($.fn.select2.defaults == null) {
        $.fn.select2.defaults = Defaults;
      }

      return Select2;
    });
    S2.define('jquery.mousewheel', ['jquery'], function ($) {
      // Used to shim jQuery.mousewheel for non-full builds.
      return $;
    }); // Return the AMD loader configuration so it can be used outside of this file

    return {
      define: S2.define,
      require: S2.require
    };
  }(); // Autoload the jQuery bindings
  // We know that all of the modules exist above this, so we're safe


  var select2 = S2.require('jquery.select2'); // Hold the AMD module references on the jQuery function that was just loaded
  // This allows Select2 to use the internal loader outside of this file, such
  // as in the language files.


  jQuery.fn.select2.amd = S2; // Return the Select2 instance for anyone who is importing it.

  return select2;
});
/*!
 * Spinners 3.0.0
 * (c) 2010-2012 Nick Stakenburg - http://www.nickstakenburg.com
 *
 * Spinners is freely distributable under the terms of an MIT-style license.
 *
 * GitHub: http://github.com/staaky/spinners
 */
;
var Spinners = {
  version: "3.0.0"
};

(function (a) {
  function b(a) {
    return a * Math.PI / 180;
  }

  function c(a) {
    this.element = a;
  }

  function d(b, c) {
    b && (this.element = b, h.remove(b), h.removeDetached(), this._position = 0, this._state = "stopped", this.setOptions(a.extend({
      color: "#000",
      dashes: 12,
      radius: 5,
      height: 5,
      width: 1.8,
      opacity: 1,
      padding: 3,
      rotation: 700
    }, c || {})), this.drawPosition(0), h.add(this));
  }

  var e = {
    scroll: function (a, b) {
      if (!b) return a;
      var c = a.slice(0, b);
      return a.slice(b, a.length).concat(c);
    },
    isElement: function (a) {
      return a && 1 == a.nodeType;
    },
    element: {
      isAttached: function () {
        return function (a) {
          for (; a && a.parentNode;) a = a.parentNode;

          return !!a && !!a.body;
        };
      }()
    }
  },
      f = {
    drawRoundedRectangle: function (c, d) {
      var e = a.extend({
        top: 0,
        left: 0,
        width: 0,
        height: 0,
        radius: 0
      }, d || {}),
          f = e.left,
          g = e.top,
          h = e.width,
          i = e.height,
          e = e.radius;
      c.beginPath(), c.moveTo(f + e, g), c.arc(f + h - e, g + e, e, b(-90), b(0), !1), c.arc(f + h - e, g + i - e, e, b(0), b(90), !1), c.arc(f + e, g + i - e, e, b(90), b(180), !1), c.arc(f + e, g + e, e, b(-180), b(-90), !1), c.closePath(), c.fill();
    }
  },
      g = function () {
    function a(a) {
      var c = [];
      0 == a.indexOf("#") && (a = a.substring(1)), a = a.toLowerCase();
      if ("" != a.replace(b, "")) return null;
      3 == a.length ? (c[0] = a.charAt(0) + a.charAt(0), c[1] = a.charAt(1) + a.charAt(1), c[2] = a.charAt(2) + a.charAt(2)) : (c[0] = a.substring(0, 2), c[1] = a.substring(2, 4), c[2] = a.substring(4));

      for (a = 0; a < c.length; a++) c[a] = parseInt(c[a], 16);

      return c.red = c[0], c.green = c[1], c.blue = c[2], c;
    }

    var b = RegExp("[0123456789abcdef]", "g"),
        c = function () {
      function a(a, b, c) {
        return a = a.toString(c || 10), Array(b - a.length).join("0") + a;
      }

      return function (b, c, d) {
        return "#" + a(b, 2, 16) + a(c, 2, 16) + a(d, 2, 16);
      };
    }();

    return {
      hex2rgb: a,
      hex2fill: function (b, c) {
        "undefined" == typeof c && (c = 1);
        var d = c,
            e = a(b);
        return e[3] = d, e.opacity = d, "rgba(" + e.join() + ")";
      },
      rgb2hex: c
    };
  }();

  a.extend(Spinners, {
    enabled: !1,
    support: {
      canvas: function () {
        var b = a("<canvas>")[0];
        return !!b.getContext && !!b.getContext("2d");
      }()
    },
    init: function () {
      if (this.support.canvas || window.G_vmlCanvasManager && window.attachEvent && -1 === navigator.userAgent.indexOf("Opera")) window.G_vmlCanvasManager && window.G_vmlCanvasManager.init_(document), this.enabled = !0;
    },
    create: function (a, b) {
      return c.create(a, b), this.get(a);
    },
    get: function (a) {
      return new c(a);
    },
    play: function (a) {
      return this.get(a).play(), this;
    },
    pause: function (a) {
      return this.get(a).pause(), this;
    },
    toggle: function (a) {
      return this.get(a).toggle(), this;
    },
    stop: function (a) {
      return this.get(a).stop(), this;
    },
    remove: function (a) {
      return this.get(a).remove(), this;
    },
    removeDetached: function () {
      return h.removeDetached(), this;
    },
    center: function (a) {
      return this.get(a).center(), this;
    },
    setOptions: function (a, b) {
      return this.get(a).setOptions(b), this;
    },
    getDimensions: function (a) {
      return a = 2 * h.get(a)[0].getLayout().workspace.radius, {
        width: a,
        height: a
      };
    }
  });
  var h = {
    spinners: [],
    get: function (b) {
      if (b) {
        var c = [];
        return a.each(this.spinners, function (d, f) {
          f && (e.isElement(b) ? f.element == b : a(f.element).is(b)) && c.push(f);
        }), c;
      }
    },
    add: function (a) {
      this.spinners.push(a);
    },
    remove: function (b) {
      a(a.map(this.spinners, function (c) {
        if (e.isElement(b) ? c.element == b : a(c.element).is(b)) return c.element;
      })).each(a.proxy(function (a, b) {
        this.removeByElement(b);
      }, this));
    },
    removeByElement: function (b) {
      var c = this.get(b)[0];
      c && (c.remove(), this.spinners = a.grep(this.spinners, function (a) {
        return a.element != b;
      }));
    },
    removeDetached: function () {
      a.each(this.spinners, a.proxy(function (a, b) {
        b && b.element && !e.element.isAttached(b.element) && this.remove(b.element);
      }, this));
    }
  };
  a.extend(c, {
    create: function (b, c) {
      if (b) {
        var f = c || {},
            g = [];
        return e.isElement(b) ? g.push(new d(b, f)) : a(b).each(function (a, b) {
          g.push(new d(b, f));
        }), g;
      }
    }
  }), a.extend(c.prototype, {
    items: function () {
      return h.get(this.element);
    },
    play: function () {
      return a.each(this.items(), function (a, b) {
        b.play();
      }), this;
    },
    stop: function () {
      return a.each(this.items(), function (a, b) {
        b.stop();
      }), this;
    },
    pause: function () {
      return a.each(this.items(), function (a, b) {
        b.pause();
      }), this;
    },
    toggle: function () {
      return a.each(this.items(), function (a, b) {
        b.toggle();
      }), this;
    },
    center: function () {
      return a.each(this.items(), function (a, b) {
        b.center();
      }), this;
    },
    setOptions: function (b) {
      return a.each(this.items(), function (a, c) {
        c.setOptions(b);
      }), this;
    },
    remove: function () {
      return h.remove(this.element), this;
    }
  }), a.extend(d.prototype, {
    setOptions: function (b) {
      this.options = a.extend({}, this.options, b || {}), this.options.radii && (b = this.options.radii, this.options.radius = Math.min(b[0], b[1]), this.options.height = Math.max(b[0], b[1]) - this.options.radius), this.options.dashWidth && (this.options.width = this.options.dashWidth), this.options.speed && (this.options.duration = 1e3 * this.options.speed);
      var b = this._state,
          c = this._position;
      this._layout = null, this.build(), c && c >= this.options.dashes - 1 && (this._position = this.options.dashes - 1);

      switch (b) {
        case "playing":
          this.play();
          break;

        case "paused":
        case "stopped":
          this.drawPosition(this._position);
      }

      this._centered && this.center();
    },
    remove: function () {
      this.canvas && (this.pause(), a(this.canvas).remove(), this.ctx = this.canvas = null);
    },
    build: function () {
      this.remove();
      var b = this.getLayout().workspace.radius;
      return a(document.body).append(this.canvas = a("<canvas>").attr({
        width: 2 * b,
        height: 2 * b
      }).css({
        zoom: 1
      })), window.G_vmlCanvasManager && G_vmlCanvasManager.initElement(this.canvas[0]), this.ctx = this.canvas[0].getContext("2d"), this.ctx.globalAlpha = this.options.opacity, a(this.element).append(this.canvas), this.ctx.translate(b, b), this;
    },
    drawPosition: function (a) {
      var c = this.getLayout().workspace,
          a = e.scroll(c.opacities, -1 * a),
          d = c.radius,
          c = this.options.dashes,
          f = b(360 / c);
      this.ctx.clearRect(-1 * d, -1 * d, 2 * d, 2 * d);

      for (d = 0; d < c; d++) this.drawDash(a[d], this.options.color), this.ctx.rotate(f);
    },
    drawDash: function (a, b) {
      this.ctx.fillStyle = g.hex2fill(b, a);
      var c = this.getLayout(),
          d = c.workspace.radius,
          e = c.dash.position,
          c = c.dash.dimensions;
      f.drawRoundedRectangle(this.ctx, {
        top: e.top - d,
        left: e.left - d,
        width: c.width,
        height: c.height,
        radius: Math.min(c.height, c.width) / 2
      });
    },
    _nextPosition: function () {
      var b = this.options.rotation / this.options.dashes;
      this.nextPosition(), this._playTimer = window.setTimeout(a.proxy(this._nextPosition, this), b);
    },
    nextPosition: function () {
      this._position == this.options.dashes - 1 && (this._position = -1), this._position++, this.drawPosition(this._position);
    },
    play: function () {
      if ("playing" != this._state) {
        this._state = "playing";
        var b = this.options.rotation / this.options.dashes;
        return this._playTimer = window.setTimeout(a.proxy(this._nextPosition, this), b), this;
      }
    },
    pause: function () {
      if ("paused" != this._state) return this._pause(), this._state = "paused", this;
    },
    _pause: function () {
      this._playTimer && (window.clearTimeout(this._playTimer), this._playTimer = null);
    },
    stop: function () {
      if ("stopped" != this._state) return this._pause(), this._position = 0, this.drawPosition(0), this._state = "stopped", this;
    },
    toggle: function () {
      return this["playing" == this._state ? "pause" : "play"](), this;
    },
    getLayout: function () {
      if (this._layout) return this._layout;

      for (var a = this.options, b = a.dashes, c = a.width, d = a.radius, e = a.radius + a.height, f = Math.max(c, e), f = Math.ceil(Math.max(f, Math.sqrt(e * e + c / 2 * (c / 2)))), a = f += a.padding, g = 1 / b, h = [], i = 0; i < b; i++) h.push((i + 1) * g);

      return this._layout = b = {
        workspace: {
          radius: a,
          opacities: h
        },
        dash: {
          position: {
            top: f - e,
            left: f - c / 2
          },
          dimensions: {
            width: c,
            height: e - d
          }
        }
      };
    },
    center: function () {
      var b = 2 * this.getLayout().workspace.radius;
      a(this.element.parentNode).css({
        position: "relative"
      }), a(this.element).css({
        position: "absolute",
        height: b + "px",
        width: b + "px",
        top: "50%",
        left: "50%",
        marginLeft: -0.5 * b + "px",
        marginTop: -0.5 * b + "px"
      }), this._centered = !0;
    }
  }), Spinners.init(), Spinners.enabled || (c.create = function () {
    return [];
  });
})(jQuery);
/*!
 * Tipped - A Complete Javascript Tooltip Solution - v4.7.0
 * (c) 2012-2019 Nick Stakenburg
 *
 * http://www.tippedjs.com
 *
 * @license: https://creativecommons.org/licenses/by/4.0
 */
!function (t, i) {
  "function" == typeof define && define.amd ? define(["jquery"], i) : "object" == typeof module && module.exports ? module.exports = i(require("jquery")) : t.Tipped = i(jQuery);
}(this, function ($) {
  var Tipped = {};
  $.extend(Tipped, {
    version: "4.7.0"
  }), Tipped.Skins = {
    base: {
      afterUpdate: !1,
      ajax: {},
      cache: !0,
      container: !1,
      containment: {
        selector: "viewport",
        padding: 5
      },
      close: !1,
      detach: !0,
      fadeIn: 200,
      fadeOut: 200,
      showDelay: 75,
      hideDelay: 25,
      hideAfter: !1,
      hideOn: {
        element: "mouseleave"
      },
      hideOthers: !1,
      position: "top",
      inline: !1,
      offset: {
        x: 0,
        y: 0
      },
      onHide: !1,
      onShow: !1,
      padding: !0,
      radius: !0,
      shadow: !0,
      showOn: {
        element: "mousemove"
      },
      size: "medium",
      spinner: !0,
      stem: !0,
      target: "element",
      voila: !0
    },
    reset: {
      ajax: !1,
      hideOn: {
        element: "mouseleave",
        tooltip: "mouseleave"
      },
      showOn: {
        element: "mouseenter",
        tooltip: "mouseenter"
      }
    }
  }, $.each("dark light gray red green blue lightyellow lightblue lightpink".split(" "), function (t, i) {
    Tipped.Skins[i] = {};
  });
  var Browser = (e = navigator.userAgent, {
    IE: !(!window.attachEvent || -1 !== e.indexOf("Opera")) && f("MSIE "),
    Opera: -1 < e.indexOf("Opera") && (!!window.opera && opera.version && parseFloat(opera.version()) || 7.55),
    WebKit: -1 < e.indexOf("AppleWebKit/") && f("AppleWebKit/"),
    Gecko: -1 < e.indexOf("Gecko") && -1 === e.indexOf("KHTML") && f("rv:"),
    MobileSafari: !!e.match(/Apple.*Mobile.*Safari/),
    Chrome: -1 < e.indexOf("Chrome") && f("Chrome/"),
    ChromeMobile: -1 < e.indexOf("CrMo") && f("CrMo/"),
    Android: -1 < e.indexOf("Android") && f("Android "),
    IEMobile: -1 < e.indexOf("IEMobile") && f("IEMobile/")
  }),
      e;

  function f(t) {
    var i = new RegExp(t + "([\\d.]+)").exec(e);
    return !i || parseFloat(i[1]);
  }

  var Support = (i = document.createElement("div"), j = "Webkit Moz O ms Khtml".split(" "), {
    css: {
      animation: m("animation"),
      transform: m("transform"),
      prefixed: function (t) {
        return m(t, "prefix");
      }
    },
    shadow: m("boxShadow") && m("pointerEvents"),
    touch: function () {
      try {
        return !!("ontouchstart" in window || window.DocumentTouch && document instanceof DocumentTouch);
      } catch (t) {
        return !1;
      }
    }()
  }),
      i,
      j;

  function m(t, e) {
    var s = t.charAt(0).toUpperCase() + t.substr(1);
    return function (t, e) {
      for (var s in t) if (void 0 !== i.style[t[s]]) return "prefix" !== e || t[s];

      return !1;
    }((t + " " + j.join(s + " ") + s).split(" "), e);
  }

  var _slice = Array.prototype.slice,
      _ = {
    wrap: function (t, i) {
      var e = t;
      return function () {
        var t = [$.proxy(e, this)].concat(_slice.call(arguments));
        return i.apply(this, t);
      };
    },
    isElement: function (t) {
      return t && 1 === t.nodeType;
    },
    isText: function (t) {
      return t && 3 === t.nodeType;
    },
    isDocumentFragment: function (t) {
      return t && 11 === t.nodeType;
    },
    delay: function (t, i) {
      var e = _slice.call(arguments, 2);

      return setTimeout(function () {
        return t.apply(t, e);
      }, i);
    },
    defer: function (t) {
      return _.delay.apply(this, [t, 1].concat(_slice.call(arguments, 1)));
    },
    pointer: function (t) {
      return {
        x: t.pageX,
        y: t.pageY
      };
    },
    element: {
      isAttached: function (t) {
        var i = function (t) {
          for (var i = t; i && i.parentNode;) i = i.parentNode;

          return i;
        }(t);

        return !(!i || !i.body);
      }
    }
  };

  function degrees(t) {
    return 180 * t / Math.PI;
  }

  function radian(t) {
    return t * Math.PI / 180;
  }

  function sec(t) {
    return 1 / Math.cos(t);
  }

  function sfcc(t) {
    return String.fromCharCode.apply(String, t.replace(" ", "").split(","));
  }

  function deepExtend(t, i) {
    for (var e in i) i[e] && i[e].constructor && i[e].constructor === Object ? (t[e] = $.extend({}, t[e]) || {}, deepExtend(t[e], i[e])) : t[e] = i[e];

    return t;
  }

  var getUID = (U = 0, function (t) {
    for (t = t || "_tipped-uid-", U++; document.getElementById(t + U);) U++;

    return t + U;
  }),
      U,
      Position = {
    positions: ["topleft", "topmiddle", "topright", "righttop", "rightmiddle", "rightbottom", "bottomright", "bottommiddle", "bottomleft", "leftbottom", "leftmiddle", "lefttop"],
    regex: {
      toOrientation: /^(top|left|bottom|right)(top|left|bottom|right|middle|center)$/,
      horizontal: /^(top|bottom)/,
      isCenter: /(middle|center)/,
      side: /^(top|bottom|left|right)/
    },
    toDimension: (X = {
      top: "height",
      left: "width",
      bottom: "height",
      right: "width"
    }, function (t) {
      return X[t];
    }),
    isCenter: function (t) {
      return !!t.toLowerCase().match(this.regex.isCenter);
    },
    isCorner: function (t) {
      return !this.isCenter(t);
    },
    getOrientation: function (t) {
      return t.toLowerCase().match(this.regex.horizontal) ? "horizontal" : "vertical";
    },
    getSide: function (t) {
      var i = null,
          e = t.toLowerCase().match(this.regex.side);
      return e && e[1] && (i = e[1]), i;
    },
    split: function (t) {
      return t.toLowerCase().match(this.regex.toOrientation);
    },
    _flip: {
      top: "bottom",
      bottom: "top",
      left: "right",
      right: "left"
    },
    flip: function (t, i) {
      var e = this.split(t);
      return i ? this.inverseCornerPlane(this.flip(this.inverseCornerPlane(t))) : this._flip[e[1]] + e[2];
    },
    inverseCornerPlane: function (t) {
      if (Position.isCorner(t)) {
        var i = this.split(t);
        return i[2] + i[1];
      }

      return t;
    },
    adjustOffsetBasedOnPosition: function (t, i, e) {
      var s = $.extend({}, t),
          o = {
        horizontal: "x",
        vertical: "y"
      },
          n = Position.getOrientation(i);

      if (n === Position.getOrientation(e)) {
        if (Position.getSide(i) !== Position.getSide(e)) s[{
          x: "y",
          y: "x"
        }[o[n]]] *= -1;
      } else {
        var r = s.x;
        s.x = s.y, s.y = r;
        var h = {
          top: {
            right: "x"
          },
          bottom: {
            left: "x"
          },
          left: {
            bottom: "y"
          },
          right: {
            top: "y"
          }
        }[Position.getSide(i)][Position.getSide(e)];
        h && (s[h] *= -1), s[o[Position.getOrientation(e)]] = 0;
      }

      return s;
    },
    getBoxFromPoints: function (t, i, e, s) {
      var o = Math.min(t, e),
          n = Math.max(t, e),
          r = Math.min(i, s),
          h = Math.max(i, s);
      return {
        left: o,
        top: r,
        width: Math.max(n - o, 0),
        height: Math.max(h - r, 0)
      };
    },
    isPointWithinBox: function (t, i, e, s, o, n) {
      var r = this.getBoxFromPoints(e, s, o, n);
      return t >= r.left && t <= r.left + r.width && i >= r.top && i <= r.top + r.height;
    },
    isPointWithinBoxLayout: function (t, i, e) {
      return this.isPointWithinBox(t, i, e.position.left, e.position.top, e.position.left + e.dimensions.width, e.position.top + e.dimensions.height);
    },
    getDistance: function (t, i, e, s) {
      return Math.sqrt(Math.pow(Math.abs(e - t), 2) + Math.pow(Math.abs(s - i), 2));
    },
    intersectsLine: function (t, i, e, s, o, n, r, h, a) {
      return a ? (u = ((l = r - o) * (i - n) - (c = h - n) * (t - o)) / (-l * (p = s - i) + (d = e - t) * c), 0 <= (f = (-p * (t - o) + d * (i - n)) / (-l * p + d * c)) && f <= 1 && 0 <= u && u <= 1 && {
        x: t + u * d,
        y: i + u * p
      }) : Sa(t, i, o, n, r, h) != Sa(e, s, o, n, r, h) && Sa(t, i, e, s, o, n) != Sa(t, i, e, s, r, h);
      var d, p, l, c, f, u;
    }
  },
      X;

  function Sa(t, i, e, s, o, n) {
    var r = (n - i) * (e - t) - (s - i) * (o - t);
    return 0 < r || !(r < 0);
  }

  var Bounds = {
    viewport: function () {
      return Browser.MobileSafari || Browser.Android && Browser.Gecko ? {
        width: window.innerWidth,
        height: window.innerHeight
      } : {
        height: $(window).height(),
        width: $(window).width()
      };
    }
  },
      Mouse = {
    _buffer: {
      pageX: 0,
      pageY: 0
    },
    _dimensions: {
      width: 30,
      height: 30
    },
    _shift: {
      x: 2,
      y: 10
    },
    getPosition: function (t) {
      var i = this.getActualPosition(t);
      return {
        left: i.left - Math.round(.5 * this._dimensions.width) + this._shift.x,
        top: i.top - Math.round(.5 * this._dimensions.height) + this._shift.y
      };
    },
    getActualPosition: function (t) {
      var i = t && "number" === $.type(t.pageX) ? t : this._buffer;
      return {
        left: i.pageX,
        top: i.pageY
      };
    },
    getDimensions: function () {
      return this._dimensions;
    }
  },
      Color = (ub = {
    _default: "#000000",
    aqua: "#00ffff",
    black: "#000000",
    blue: "#0000ff",
    fuchsia: "#ff00ff",
    gray: "#808080",
    green: "#008000",
    lime: "#00ff00",
    maroon: "#800000",
    navy: "#000080",
    olive: "#808000",
    purple: "#800080",
    red: "#ff0000",
    silver: "#c0c0c0",
    teal: "#008080",
    white: "#ffffff",
    yellow: "#ffff00"
  }, {
    toRGB: function (t) {
      if (/^rgba?\(/.test(t)) return function (t) {
        return "#" + vb((t = t.match(/^rgba?\((\d+),\s*(\d+),\s*(\d+)(?:,\s*(\d+))?\)$/))[1]) + vb(t[2]) + vb(t[3]);
      }(t);
      ub[t] && (t = ub[t]);
      var i = t.replace("#", "");
      return /^(?:[0-9a-fA-F]{3}){1,2}$/.test(i) ? (3 == i.length && (i = i.charAt(0) + i.charAt(0) + i.charAt(1) + i.charAt(1) + i.charAt(2) + i.charAt(2)), "#" + i) : ub._default;
    }
  }),
      ub;

  function vb(t) {
    return ("0" + parseInt(t).toString(16)).slice(-2);
  }

  function Spin() {
    return this.initialize.apply(this, _slice.call(arguments));
  }

  function Visible() {
    return this.initialize.apply(this, _slice.call(arguments));
  }

  Spin.supported = Support.css.transform && Support.css.animation, $.extend(Spin.prototype, {
    initialize: function () {
      this.options = $.extend({}, arguments[0] || {}), this.build(), this.start();
    },
    build: function () {
      var t = 2 * (this.options.length + this.options.radius),
          i = {
        height: t,
        width: t
      };
      this.element = $("<div>").addClass("tpd-spin").css(i), this.element.append(this._rotate = $("<div>").addClass("tpd-spin-rotate")), this.element.css({
        "margin-left": -.5 * i.width,
        "margin-top": -.5 * i.height
      });

      for (var e = this.options.lines, s = 0; s < e; s++) {
        var o, n;
        this._rotate.append(o = $("<div>").addClass("tpd-spin-frame").append(n = $("<div>").addClass("tpd-spin-line"))), n.css({
          "background-color": this.options.color,
          width: this.options.width,
          height: this.options.length,
          "margin-left": -.5 * this.options.width,
          "border-radius": Math.round(.5 * this.options.width)
        }), o.css({
          opacity: (1 / e * (s + 1)).toFixed(2)
        });
        var r = {};
        r[Support.css.prefixed("transform")] = "rotate(" + 360 / e * (s + 1) + "deg)", o.css(r);
      }
    },
    start: function () {
      var t = {};
      t[Support.css.prefixed("animation")] = "tpd-spin 1s infinite steps(" + this.options.lines + ")", this._rotate.css(t);
    },
    stop: function () {
      var t = {};
      t[Support.css.prefixed("animation")] = "none", this._rotate.css(t), this.element.detach();
    }
  }), $.extend(Visible.prototype, {
    initialize: function (t) {
      return t = "array" == $.type(t) ? t : [t], this.elements = t, this._restore = [], $.each(t, $.proxy(function (t, i) {
        var e = $(i).is(":visible");
        e || $(i).show(), this._restore.push({
          element: i,
          visible: e
        });
      }, this)), this;
    },
    restore: function () {
      $.each(this._restore, function (t, i) {
        i.visible || $(i.element).show();
      }), this._restore = null;
    }
  });

  var AjaxCache = (Qb = [], {
    get: function (t) {
      for (var i = null, e = 0; e < Qb.length; e++) Qb[e] && Qb[e].url === t.url && (Qb[e].type || "GET").toUpperCase() === (t.type || "GET").toUpperCase() && $.param(Qb[e].data || {}) === $.param(t.data || {}) && (i = Qb[e]);

      return i;
    },
    set: function (t, i, e) {
      var s = this.get(t);
      s || (s = $.extend({
        callbacks: {}
      }, t), Qb.push(s)), s.callbacks[i] = e;
    },
    remove: function (t) {
      for (var i = 0; i < Qb.length; i++) Qb[i] && Qb[i].url === t && delete Qb[i];
    },
    clear: function () {
      Qb = [];
    }
  }),
      Qb,
      Voila = function (r) {
    function h(t, i, e) {
      if (!(this instanceof h)) return new h(t, i, e);
      var s = r.type(i),
          o = "object" === s ? i : {},
          n = "function" === s ? i : "function" === r.type(e) && e;
      return this.options = r.extend({
        method: "onload"
      }, o), this.deferred = new jQuery.Deferred(), n && this.always(n), this._processed = 0, this.images = [], this._add(t), this;
    }

    r.extend(h.prototype, {
      _add: function (t) {
        var i = "string" == r.type(t) ? r(t) : t instanceof jQuery || 0 < t.length ? t : [t];
        r.each(i, r.proxy(function (t, i) {
          var e = r(),
              s = r(i);
          (e = s.is("img") ? e.add(s) : e.add(s.find("img"))).each(r.proxy(function (t, i) {
            this.images.push(new o(i, r.proxy(function (t) {
              this._progress(t);
            }, this), r.proxy(function (t) {
              this._progress(t);
            }, this), this.options));
          }, this));
        }, this)), this.images.length < 1 && setTimeout(r.proxy(function () {
          this._resolve();
        }, this));
      },
      abort: function () {
        this._progress = this._notify = this._reject = this._resolve = function () {}, r.each(this.images, function (t, i) {
          i.abort();
        }), this.images = [];
      },
      _progress: function (t) {
        this._processed++, t.isLoaded || (this._broken = !0), this._notify(t), this._processed === this.images.length && this[this._broken ? "_reject" : "_resolve"]();
      },
      _notify: function (t) {
        this.deferred.notify(this, t);
      },
      _reject: function () {
        this.deferred.reject(this);
      },
      _resolve: function () {
        this.deferred.resolve(this);
      },
      always: function (t) {
        return this.deferred.always(t), this;
      },
      done: function (t) {
        return this.deferred.done(t), this;
      },
      fail: function (t) {
        return this.deferred.fail(t), this;
      },
      progress: function (t) {
        return this.deferred.progress(t), this;
      }
    });

    var o = function (n) {
      function t() {
        return this.initialize.apply(this, Array.prototype.slice.call(arguments));
      }

      n.extend(t.prototype, {
        initialize: function () {
          this.options = n.extend({
            test: function () {},
            success: function () {},
            timeout: function () {},
            callAt: !1,
            intervals: [[0, 0], [1e3, 10], [2e3, 50], [4e3, 100], [2e4, 500]]
          }, arguments[0] || {}), this._test = this.options.test, this._success = this.options.success, this._timeout = this.options.timeout, this._ipos = 0, this._time = 0, this._delay = this.options.intervals[this._ipos][1], this._callTimeouts = [], this.poll(), this._createCallsAt();
        },
        poll: function () {
          this._polling = setTimeout(n.proxy(function () {
            if (this._test()) this.success();else {
              if (this._time += this._delay, this._time >= this.options.intervals[this._ipos][0]) {
                if (!this.options.intervals[this._ipos + 1]) return void ("function" == n.type(this._timeout) && this._timeout());
                this._ipos++, this._delay = this.options.intervals[this._ipos][1];
              }

              this.poll();
            }
          }, this), this._delay);
        },
        success: function () {
          this.abort(), this._success();
        },
        _createCallsAt: function () {
          this.options.callAt && n.each(this.options.callAt, n.proxy(function (t, i) {
            var e = i[0],
                s = i[1],
                o = setTimeout(n.proxy(function () {
              s();
            }, this), e);

            this._callTimeouts.push(o);
          }, this));
        },
        _stopCallTimeouts: function () {
          n.each(this._callTimeouts, function (t, i) {
            clearTimeout(i);
          }), this._callTimeouts = [];
        },
        abort: function () {
          this._stopCallTimeouts(), this._polling && (clearTimeout(this._polling), this._polling = null);
        }
      });

      function i() {
        return this.initialize.apply(this, Array.prototype.slice.call(arguments));
      }

      return n.extend(i.prototype, {
        supports: {
          naturalWidth: "naturalWidth" in new Image()
        },
        initialize: function (t, i, e) {
          this.img = n(t)[0], this.successCallback = i, this.errorCallback = e, this.isLoaded = !1, this.options = n.extend({
            method: "onload",
            pollFallbackAfter: 1e3
          }, arguments[3] || {}), "onload" != this.options.method && this.supports.naturalWidth ? this.poll() : this.load();
        },
        poll: function () {
          this._poll = new t({
            test: n.proxy(function () {
              return 0 < this.img.naturalWidth;
            }, this),
            success: n.proxy(function () {
              this.success();
            }, this),
            timeout: n.proxy(function () {
              this.error();
            }, this),
            callAt: [[this.options.pollFallbackAfter, n.proxy(function () {
              this.load();
            }, this)]]
          });
        },
        load: function () {
          this._loading = setTimeout(n.proxy(function () {
            var t = new Image();
            (this._onloadImage = t).onload = n.proxy(function () {
              t.onload = function () {}, this.supports.naturalWidth || (this.img.naturalWidth = t.width, this.img.naturalHeight = t.height, t.naturalWidth = t.width, t.naturalHeight = t.height), this.success();
            }, this), t.onerror = n.proxy(this.error, this), t.src = this.img.src;
          }, this));
        },
        success: function () {
          this._calledSuccess || (this._calledSuccess = !0, this.abort(), this.waitForRender(n.proxy(function () {
            this.isLoaded = !0, this.successCallback(this);
          }, this)));
        },
        error: function () {
          this._calledError || (this._calledError = !0, this.abort(), this._errorRenderTimeout = setTimeout(n.proxy(function () {
            this.errorCallback && this.errorCallback(this);
          }, this)));
        },
        abort: function () {
          this.stopLoading(), this.stopPolling(), this.stopWaitingForRender();
        },
        stopPolling: function () {
          this._poll && (this._poll.abort(), this._poll = null);
        },
        stopLoading: function () {
          this._loading && (clearTimeout(this._loading), this._loading = null), this._onloadImage && (this._onloadImage.onload = function () {}, this._onloadImage.onerror = function () {});
        },
        waitForRender: function (t) {
          this._renderTimeout = setTimeout(t);
        },
        stopWaitingForRender: function () {
          this._renderTimeout && (clearTimeout(this._renderTimeout), this._renderTimeout = null), this._errorRenderTimeout && (clearTimeout(this._errorRenderTimeout), this._errorRenderTimeout = null);
        }
      }), i;
    }(jQuery);

    return h;
  }(jQuery);

  Tipped.Behaviors = {
    hide: {
      showOn: {
        element: "mouseenter",
        tooltip: !1
      },
      hideOn: {
        element: "mouseleave",
        tooltip: "mouseenter"
      }
    },
    mouse: {
      showOn: {
        element: "mouseenter",
        tooltip: !1
      },
      hideOn: {
        element: "mouseleave",
        tooltip: "mouseenter"
      },
      target: "mouse",
      showDelay: 100,
      fadeIn: 0,
      hideDelay: 0,
      fadeOut: 0
    },
    sticky: {
      showOn: {
        element: "mouseenter",
        tooltip: "mouseenter"
      },
      hideOn: {
        element: "mouseleave",
        tooltip: "mouseleave"
      },
      showDelay: 150,
      target: "mouse",
      fixed: !0
    }
  };
  var Options = {
    create: Rc
  },
      Oc,
      Pc;

  function Rc(t) {
    return Oc = Tipped.Skins.base, Pc = deepExtend($.extend({}, Oc), Tipped.Skins.reset), (Rc = Uc)(t);
  }

  function Sc(t) {
    return t.match(/^(top|left|bottom|right)$/) && (t += "middle"), t.replace("center", "middle").replace(" ", ""), t;
  }

  function Tc(t) {
    var i;
    return t.behavior && (i = Tipped.Behaviors[t.behavior]) ? deepExtend($.extend({}, i), t) : t;
  }

  function Uc(t) {
    var i = t.skin ? t.skin : Tooltips.options.defaultSkin,
        e = $.extend({}, Tipped.Skins[i] || {});
    e.skin || (e.skin = Tooltips.options.defaultSkin || "dark");
    var s,
        o = deepExtend($.extend({}, Pc), Tc(e)),
        n = deepExtend($.extend({}, o), Tc(t));

    if (n.ajax) {
      Pc.ajax;
      var r = Oc.ajax;
      "boolean" === $.type(n.ajax) && (n.ajax = {}), n.ajax = deepExtend($.extend({}, r), n.ajax);
    }

    var h = h = n.position && n.position.target || "string" === $.type(n.position) && n.position || Pc.position && Pc.position.target || "string" === $.type(Pc.position) && Pc.position || Oc.position && Oc.position.target || Oc.position;
    h = Sc(h);
    var a,
        d = n.position && n.position.tooltip || Pc.position && Pc.position.tooltip || Oc.position && Oc.position.tooltip || Tooltips.Position.getInversedPosition(h);

    if (d = Sc(d), n.position ? "string" === $.type(n.position) ? (n.position = Sc(n.position), s = {
      target: n.position,
      tooltip: Tooltips.Position.getTooltipPositionFromTarget(n.position)
    }) : (s = {
      tooltip: d,
      target: h
    }, n.position.tooltip && (s.tooltip = Sc(n.position.tooltip)), n.position.target && (s.target = Sc(n.position.target))) : s = {
      tooltip: d,
      target: h
    }, Position.isCorner(s.target) && Position.getOrientation(s.target) !== Position.getOrientation(s.tooltip) && (s.target = Position.inverseCornerPlane(s.target)), "mouse" === n.target) {
      var p = Position.getOrientation(s.target);
      s.target = "horizontal" === p ? s.target.replace(/(left|right)/, "middle") : s.target.replace(/(top|bottom)/, "middle");
    }

    if (n.position = s, "mouse" === n.target ? (a = $.extend({}, Oc.offset), $.extend(a, Tipped.Skins.reset.offset || {}), t.skin && $.extend(a, (Tipped.Skins[t.skin] || Tipped.Skins[Tooltips.options.defaultSkin] || {}).offset || {}), a = Position.adjustOffsetBasedOnPosition(Oc.offset, Oc.position, s.target, !0), t.offset && (a = $.extend(a, t.offset || {}))) : a = {
      x: n.offset.x,
      y: n.offset.y
    }, n.offset = a, n.hideOn && "click-outside" === n.hideOn && (n.hideOnClickOutside = !0, n.hideOn = !1, n.fadeOut = 0), n.showOn) {
      var l = n.showOn;
      "string" === $.type(l) && (l = {
        element: l
      }), n.showOn = l;
    }

    if (n.hideOn) {
      var c = n.hideOn;
      "string" === $.type(c) && (c = {
        element: c
      }), n.hideOn = c;
    }

    return n.inline && "string" !== $.type(n.inline) && (n.inline = !1), Browser.IE && Browser.IE < 9 && $.extend(n, {
      fadeIn: 0,
      fadeOut: 0,
      hideDelay: 0
    }), n.spinner && (Spin.supported ? "boolean" === $.type(n.spinner) && (n.spinner = Pc.spinner || Oc.spinner || {}) : n.spinner = !1), n.container || (n.container = document.body), n.containment && "string" === $.type(n.containment) && (n.containment = {
      selector: n.containment,
      padding: Pc.containment && Pc.containment.padding || Oc.padding && Oc.containment.padding
    }), n.shadow && (n.shadow = Support.shadow), n;
  }

  function Skin() {
    this.initialize.apply(this, _slice.call(arguments));
  }

  function Stem() {
    this.initialize.apply(this, _slice.call(arguments));
  }

  $.extend(Skin.prototype, {
    initialize: function (t) {
      this.tooltip = t, this.element = t._skin;
      var i,
          e,
          s,
          o,
          n = this.tooltip.options;

      this.tooltip._tooltip[(n.shadow ? "remove" : "add") + "Class"]("tpd-no-shadow")[(n.radius ? "remove" : "add") + "Class"]("tpd-no-radius")[(n.stem ? "remove" : "add") + "Class"]("tpd-no-stem");

      var r = Support.css.prefixed("borderTopLeftRadius");
      this.element.append(i = $("<div>").addClass("tpd-frames").append($("<div>").addClass("tpd-frame").append($("<div>").addClass("tpd-backgrounds").append(e = $("<div>").addClass("tpd-background").append(s = $("<div>").addClass("tpd-background-content")))))).append(o = $("<div>").addClass("tpd-spinner")), e.css({
        width: 999,
        height: 999,
        zoom: 1
      }), this._css = {
        border: parseFloat(e.css("border-top-width")),
        radius: parseFloat(r ? e.css(r) : 0),
        padding: parseFloat(t._content.css("padding-top")),
        borderColor: e.css("border-top-color"),
        backgroundColor: s.css("background-color"),
        backgroundOpacity: s.css("opacity"),
        spinner: {
          dimensions: {
            width: o.innerWidth(),
            height: o.innerHeight()
          }
        }
      }, o.remove(), i.remove(), this._side = Position.getSide(t.options.position.tooltip) || "top", this._vars = {};
    },
    destroy: function () {
      this.frames && ($.each("top right bottom left".split(" "), $.proxy(function (t, i) {
        this["stem_" + i] && this["stem_" + i].destroy();
      }, this)), this.frames.remove(), this.frames = null);
    },
    build: function () {
      this.frames || (this.element.append(this.frames = $("<div>").addClass("tpd-frames")), $.each("top right bottom left".split(" "), $.proxy(function (t, i) {
        this.insertFrame(i);
      }, this)), this._spinner || this.tooltip._tooltip.append(this._spinner = $("<div>").addClass("tpd-spinner").hide().append($("<div>").addClass("tpd-spinner-spin"))));
    },
    _frame: function () {
      var e,
          t = $("<div>").addClass("tpd-frame").append(e = $("<div>").addClass("tpd-backgrounds").append($("<div>").addClass("tpd-background-shadow"))).append($("<div>").addClass("tpd-shift-stem").append($("<div>").addClass("tpd-shift-stem-side tpd-shift-stem-side-before")).append($("<div>").addClass("tpd-stem")).append($("<div>").addClass("tpd-shift-stem-side tpd-shift-stem-side-after")));
      return $.each("top right bottom left".split(" "), $.proxy(function (t, i) {
        e.append($("<div>").addClass("tpd-background-box tpd-background-box-" + i).append($("<div>").addClass("tpd-background-box-shift").append($("<div>").addClass("tpd-background-box-shift-further").append($("<div>").addClass("tpd-background").append($("<div>").addClass("tpd-background-title")).append($("<div>").addClass("tpd-background-content"))).append($("<div>").addClass("tpd-background tpd-background-loading")).append($("<div>").addClass("tpd-background-border-hack").hide()))));
      }, this)), t;
    }(),
    _getFrame: function (t) {
      var i = this._frame.clone();

      i.addClass("tpd-frame-" + t), i.find(".tpd-background-shadow").css({
        "border-radius": this._css.radius
      }), this.tooltip.options.stem && i.find(".tpd-stem").attr("data-stem-position", t);
      var e = Math.max(this._css.radius - this._css.border, 0);
      i.find(".tpd-background-title").css({
        "border-top-left-radius": e,
        "border-top-right-radius": e
      }), i.find(".tpd-background-content").css({
        "border-bottom-left-radius": e,
        "border-bottom-right-radius": e
      }), i.find(".tpd-background-loading").css({
        "border-radius": e
      });
      var s = {
        backgroundColor: this._css.borderColor
      };
      s["horizontal" === Position.getOrientation(t) ? "height" : "width"] = this._css.border + "px";
      return s[{
        top: "bottom",
        bottom: "top",
        left: "right",
        right: "left"
      }[t]] = 0, i.find(".tpd-shift-stem-side").css(s), i;
    },
    insertFrame: function (t) {
      var i = this["frame_" + t] = this._getFrame(t);

      if (this.frames.append(i), this.tooltip.options.stem) {
        var e = i.find(".tpd-stem");
        this["stem_" + t] = new Stem(e, this, {});
      }
    },
    startLoading: function () {
      this.tooltip.supportsLoading && (this.build(), this._spinner || this.tooltip.is("resize-to-content") || this.setDimensions(this._css.spinner.dimensions), this._spinner && this._spinner.show());
    },
    stopLoading: function () {
      this.tooltip.supportsLoading && this._spinner && (this.build(), this._spinner.hide());
    },
    updateBackground: function () {
      var t = this._vars.frames[this._side],
          i = $.extend({}, t.background.dimensions);

      if (this.tooltip.title && !this.tooltip.is("loading")) {
        this.element.find(".tpd-background-title, .tpd-background-content").show(), this.element.find(".tpd-background").css({
          "background-color": "transparent"
        });

        var e = $.extend({}, i),
            s = Math.max(this._css.radius - this._css.border, 0),
            o = {
          "border-top-left-radius": s,
          "border-top-right-radius": s,
          "border-bottom-left-radius": s,
          "border-bottom-right-radius": s
        },
            n = new Visible(this.tooltip._tooltip),
            r = this.tooltip._titleWrapper.innerHeight();

        e.height -= r, this.element.find(".tpd-background-title").css({
          height: r,
          width: i.width
        }), o["border-top-left-radius"] = 0, o["border-top-right-radius"] = 0, n.restore(), this.element.find(".tpd-background-content").css(e).css(o), this.element.find(".tpd-background-loading").css({
          "background-color": this._css.backgroundColor
        });
      } else this.element.find(".tpd-background-title, .tpd-background-content").hide(), this.element.find(".tpd-background").css({
        "background-color": this._css.backgroundColor
      });

      this._css.border && (this.element.find(".tpd-background").css({
        "border-color": "transparent"
      }), this.element.find(".tpd-background-border-hack").css({
        width: i.width,
        height: i.height,
        "border-radius": this._css.radius,
        "border-width": this._css.border,
        "border-color": this._css.borderColor
      }).show());
    },
    paint: function () {
      if (!this._paintedDimensions || this._paintedDimensions.width !== this._dimensions.width || this._paintedDimensions.height !== this._dimensions.height || this._paintedStemPosition !== this._stemPosition) {
        this._paintedDimensions = this._dimensions, this._paintedStemPosition = this._stemPosition, this.element.removeClass("tpd-visible-frame-top tpd-visible-frame-bottom tpd-visible-frame-left tpd-visible-frame-right").addClass("tpd-visible-frame-" + this._side);
        var t = this._vars.frames[this._side],
            i = $.extend({}, t.background.dimensions);
        this.element.find(".tpd-background").css(i), this.element.find(".tpd-background-shadow").css({
          width: i.width + 2 * this._css.border,
          height: i.height + 2 * this._css.border
        }), this.updateBackground(), this.element.find(".tpd-background-box-shift, .tpd-background-box-shift-further").removeAttr("style"), this.element.add(this.frames).add(this.tooltip._tooltip).css(t.dimensions);
        var e = this._side,
            s = this._vars.frames[e],
            o = this.element.find(".tpd-frame-" + this._side),
            n = this._vars.frames[e].dimensions;
        o.css(n), o.find(".tpd-backgrounds").css($.extend({}, s.background.position, {
          width: n.width - s.background.position.left,
          height: n.height - s.background.position.top
        }));
        var r = Position.getOrientation(e);
        if (this.tooltip.options.stem) if (o.find(".tpd-shift-stem").css($.extend({}, s.shift.dimensions, s.shift.position)), "vertical" === r) {
          (a = o.find(".tpd-background-box-top, .tpd-background-box-bottom")).css({
            height: this._vars.cut,
            width: this._css.border
          }), o.find(".tpd-background-box-bottom").css({
            top: s.dimensions.height - this._vars.cut
          }).find(".tpd-background-box-shift").css({
            "margin-top": -1 * s.dimensions.height + this._vars.cut
          });
          var h = "right" === e ? s.dimensions.width - s.stemPx - this._css.border : 0;
          a.css({
            left: h
          }).find(".tpd-background-box-shift").css({
            "margin-left": -1 * h
          }), o.find(".tpd-background-box-" + ("left" == e ? "left" : "right")).hide(), "right" === e ? o.find(".tpd-background-box-left").css({
            width: s.dimensions.width - s.stemPx - this._css.border
          }) : o.find(".tpd-background-box-right").css({
            "margin-left": this._css.border
          }).find(".tpd-background-box-shift").css({
            "margin-left": -1 * this._css.border
          }), (d = o.find(".tpd-background-box-" + this._side)).css({
            height: s.dimensions.height - 2 * this._vars.cut,
            "margin-top": this._vars.cut
          }), d.find(".tpd-background-box-shift").css({
            "margin-top": -1 * this._vars.cut
          });
        } else {
          var a;
          (a = o.find(".tpd-background-box-left, .tpd-background-box-right")).css({
            width: this._vars.cut,
            height: this._css.border
          }), o.find(".tpd-background-box-right").css({
            left: s.dimensions.width - this._vars.cut
          }).find(".tpd-background-box-shift").css({
            "margin-left": -1 * s.dimensions.width + this._vars.cut
          });
          var d;
          h = "bottom" === e ? s.dimensions.height - s.stemPx - this._css.border : 0;
          a.css({
            top: h
          }).find(".tpd-background-box-shift").css({
            "margin-top": -1 * h
          }), o.find(".tpd-background-box-" + ("top" === e ? "top" : "bottom")).hide(), "bottom" === e ? o.find(".tpd-background-box-top").css({
            height: s.dimensions.height - s.stemPx - this._css.border
          }) : o.find(".tpd-background-box-bottom").css({
            "margin-top": this._css.border
          }).find(".tpd-background-box-shift").css({
            "margin-top": -1 * this._css.border
          }), (d = o.find(".tpd-background-box-" + this._side)).css({
            width: s.dimensions.width - 2 * this._vars.cut,
            "margin-left": this._vars.cut
          }), d.find(".tpd-background-box-shift").css({
            "margin-left": -1 * this._vars.cut
          });
        }
        var p = t.background,
            l = p.position,
            c = p.dimensions;

        this._spinner.css({
          top: l.top + this._css.border + (.5 * c.height - .5 * this._css.spinner.dimensions.height),
          left: l.left + this._css.border + (.5 * c.width - .5 * this._css.spinner.dimensions.width)
        });
      }
    },
    getVars: function () {
      this._css.padding, this._css.radius;
      var r = this._css.border,
          t = this._vars.maxStemHeight || 0,
          h = $.extend({}, this._dimensions || {}),
          a = {
        frames: {},
        dimensions: h,
        maxStemHeight: t
      };
      a.cut = Math.max(this._css.border, this._css.radius) || 0;
      var d = {
        width: 0,
        height: 0
      },
          i = 0,
          p = 0;
      return this.tooltip.options.stem && (d = this.stem_top.getMath().dimensions.outside, i = this.stem_top._css.offset, p = Math.max(d.height - this._css.border, 0)), a.stemDimensions = d, a.stemOffset = i, $.each("top right bottom left".split(" "), $.proxy(function (t, i) {
        var e = "vertical" === Position.getOrientation(i),
            s = {
          width: h.width + 2 * r,
          height: h.height + 2 * r
        },
            o = s[e ? "height" : "width"] - 2 * a.cut,
            n = {
          dimensions: s,
          stemPx: p,
          position: {
            top: 0,
            left: 0
          },
          background: {
            dimensions: $.extend({}, h),
            position: {
              top: 0,
              left: 0
            }
          }
        };

        switch ((a.frames[i] = n).dimensions[e ? "width" : "height"] += p, "top" !== i && "left" !== i || (n.background.position[i] += p), $.extend(n, {
          shift: {
            position: {
              top: 0,
              left: 0
            },
            dimensions: {
              width: e ? d.height : o,
              height: e ? o : d.height
            }
          }
        }), i) {
          case "top":
          case "bottom":
            n.shift.position.left += a.cut, "bottom" === i && (n.shift.position.top += s.height - r - p);
            break;

          case "left":
          case "right":
            n.shift.position.top += a.cut, "right" === i && (n.shift.position.left += s.width - r - p);
        }
      }, this)), a.connections = {}, $.each(Position.positions, $.proxy(function (t, i) {
        a.connections[i] = this.getConnectionLayout(i, a);
      }, this)), a;
    },
    setDimensions: function (t) {
      this.build();
      var i = this._dimensions;
      i && i.width === t.width && i.height === t.height || (this._dimensions = t, this._vars = this.getVars());
    },
    setSide: function (t) {
      this._side = t, this._vars = this.getVars();
    },
    getConnectionLayout: function (t, i) {
      var e = Position.getSide(t),
          s = Position.getOrientation(t),
          o = (i.dimensions, i.cut),
          n = this["stem_" + e],
          r = i.stemOffset,
          h = this.tooltip.options.stem ? n.getMath().dimensions.outside.width : 0,
          a = o + r + .5 * h,
          d = {
        stem: {}
      },
          p = {
        left: 0,
        right: 0,
        up: 0,
        down: 0
      },
          l = {
        top: 0,
        left: 0
      },
          c = {
        top: 0,
        left: 0
      },
          f = i.frames[e];
      a = 0;

      if ("horizontal" == s) {
        var u = f.dimensions.width;
        this.tooltip.options.stem && ((u = f.shift.dimensions.width) - h < 2 * r && (r = Math.floor(.5 * (u - h)) || 0), a = o + r + .5 * h);
        var m = u - 2 * r,
            g = r;

        switch ((v = Position.split(t))[2]) {
          case "left":
            p.right = m - h, l.left = a;
            break;

          case "middle":
            g += Math.round(.5 * m - .5 * h), p.left = g - r, p.right = g - r, l.left = c.left = Math.round(.5 * f.dimensions.width);
            break;

          case "right":
            g += m - h, p.left = m - h, l.left = f.dimensions.width - a, c.left = f.dimensions.width;
        }

        "bottom" === v[1] && (l.top += f.dimensions.height, c.top += f.dimensions.height), $.extend(d.stem, {
          position: {
            left: g
          },
          before: {
            width: g
          },
          after: {
            left: g + h,
            width: u - g - h + 1
          }
        });
      } else {
        var b = f.dimensions.height;
        this.tooltip.options.stem && ((b = f.shift.dimensions.height) - h < 2 * r && (r = Math.floor(.5 * (b - h)) || 0), a = o + r + .5 * h);

        var v,
            _ = b - 2 * r,
            x = r;

        switch ((v = Position.split(t))[2]) {
          case "top":
            p.down = _ - h, l.top = a;
            break;

          case "middle":
            x += Math.round(.5 * _ - .5 * h), p.up = x - r, p.down = x - r, l.top = c.top = Math.round(.5 * f.dimensions.height);
            break;

          case "bottom":
            x += _ - h, p.up = _ - h, l.top = f.dimensions.height - a, c.top = f.dimensions.height;
        }

        "right" === v[1] && (l.left += f.dimensions.width, c.left += f.dimensions.width), $.extend(d.stem, {
          position: {
            top: x
          },
          before: {
            height: x
          },
          after: {
            top: x + h,
            height: b - x - h + 1
          }
        });
      }

      return d.move = p, d.stem.connection = l, d.connection = c, d;
    },
    setStemPosition: function (t, i) {
      if (this._stemPosition !== t) {
        this._stemPosition = t;
        var e = Position.getSide(t);
        this.setSide(e);
      }

      this.tooltip.options.stem && this.setStemShift(t, i);
    },
    setStemShift: function (t, i) {
      var e = this._shift,
          s = this._dimensions;

      if (!e || e.stemPosition !== t || e.shift.x !== i.x || e.shift.y !== i.y || !s || e.dimensions.width !== s.width || e.dimensions.height !== s.height) {
        this._shift = {
          stemPosition: t,
          shift: i,
          dimensions: s
        };
        var o = Position.getSide(t),
            n = {
          horizontal: "x",
          vertical: "y"
        }[Position.getOrientation(t)],
            r = {
          x: {
            left: "left",
            width: "width"
          },
          y: {
            left: "top",
            width: "height"
          }
        }[n],
            h = this["stem_" + o],
            a = deepExtend({}, this._vars.connections[t].stem);
        i && 0 !== i[n] && (a.before[r.width] += i[n], a.position[r.left] += i[n], a.after[r.left] += i[n], a.after[r.width] -= i[n]), h.element.css(a.position), h.element.siblings(".tpd-shift-stem-side-before").css(a.before), h.element.siblings(".tpd-shift-stem-side-after").css(a.after);
      }
    }
  }), $.extend(Stem.prototype, {
    initialize: function (t, i) {
      this.element = $(t), this.element[0] && (this.skin = i, this.element.removeClass("tpd-stem-reset"), this._css = $.extend({}, i._css, {
        width: this.element.innerWidth(),
        height: this.element.innerHeight(),
        offset: parseFloat(this.element.css("margin-left")),
        spacing: parseFloat(this.element.css("margin-top"))
      }), this.element.addClass("tpd-stem-reset"), this.options = $.extend({}, arguments[2] || {}), this._position = this.element.attr("data-stem-position") || "top", this._m = 100, this.build());
    },
    destroy: function () {
      this.element.html("");
    },
    build: function () {
      this.destroy();
      var t = this._css.backgroundColor,
          i = -1 < t.indexOf("rgba") && parseFloat(t.replace(/^.*,(.+)\)/, "$1")),
          e = i && i < 1;
      this._useTransform = e && Support.css.transform, this._css.border || (this._useTransform = !1), this[(this._useTransform ? "build" : "buildNo") + "Transform"]();
    },
    buildTransform: function () {
      this.element.append(this.spacer = $("<div>").addClass("tpd-stem-spacer").append(this.downscale = $("<div>").addClass("tpd-stem-downscale").append(this.transform = $("<div>").addClass("tpd-stem-transform").append(this.first = $("<div>").addClass("tpd-stem-side").append(this.border = $("<div>").addClass("tpd-stem-border")).append($("<div>").addClass("tpd-stem-border-corner")).append($("<div>").addClass("tpd-stem-triangle")))))), this.transform.append(this.last = this.first.clone().addClass("tpd-stem-side-inversed")), this.sides = this.first.add(this.last);
      var t = this.getMath(),
          i = t.dimensions,
          e = this._m,
          s = Position.getSide(this._position);

      if (this.element.find(".tpd-stem-spacer").css({
        width: l ? i.inside.height : i.inside.width,
        height: l ? i.inside.width : i.inside.height
      }), "top" === s || "left" === s) {
        var o = {};
        "top" === s ? (o.bottom = 0, o.top = "auto") : "left" === s && (o.right = 0, o.left = "auto"), this.element.find(".tpd-stem-spacer").css(o);
      }

      this.transform.css({
        width: i.inside.width * e,
        height: i.inside.height * e
      });
      var n = Support.css.prefixed("transform"),
          r = {
        "background-color": "transparent",
        "border-bottom-color": this._css.backgroundColor,
        "border-left-width": .5 * i.inside.width * e,
        "border-bottom-width": i.inside.height * e
      };
      r[n] = "translate(" + t.border * e + "px, 0)", this.element.find(".tpd-stem-triangle").css(r);
      var h = this._css.borderColor;
      alpha = -1 < h.indexOf("rgba") && parseFloat(h.replace(/^.*,(.+)\)/, "$1")), alpha && alpha < 1 ? h = (h.substring(0, h.lastIndexOf(",")) + ")").replace("rgba", "rgb") : alpha = 1;
      var a = {
        "background-color": "transparent",
        "border-right-width": t.border * e,
        width: t.border * e,
        "margin-left": -2 * t.border * e,
        "border-color": h,
        opacity: alpha
      };
      a[n] = "skew(" + t.skew + "deg) translate(" + t.border * e + "px, " + -1 * this._css.border * e + "px)", this.element.find(".tpd-stem-border").css(a);
      h = this._css.borderColor;
      alpha = -1 < h.indexOf("rgba") && parseFloat(h.replace(/^.*,(.+)\)/, "$1")), alpha && alpha < 1 ? h = (h.substring(0, h.lastIndexOf(",")) + ")").replace("rgba", "rgb") : alpha = 1;
      var d = {
        width: t.border * e,
        "border-right-width": t.border * e,
        "border-right-color": h,
        background: h,
        opacity: alpha,
        "margin-left": -2 * t.border * e
      };

      if (d[n] = "skew(" + t.skew + "deg) translate(" + t.border * e + "px, " + (i.inside.height - this._css.border) * e + "px)", this.element.find(".tpd-stem-border-corner").css(d), this.setPosition(this._position), 1 < e) {
        var p = {};
        p[n] = "scale(" + 1 / e + "," + 1 / e + ")", this.downscale.css(p);
      }

      var l = /^(left|right)$/.test(this._position);
      this._css.border || this.element.find(".tpd-stem-border, .tpd-stem-border-corner").hide(), this.element.css({
        width: l ? i.outside.height : i.outside.width,
        height: l ? i.outside.width : i.outside.height
      });
    },
    buildNoTransform: function () {
      this.element.append(this.spacer = $("<div>").addClass("tpd-stem-spacer").append($("<div>").addClass("tpd-stem-notransform").append($("<div>").addClass("tpd-stem-border").append($("<div>").addClass("tpd-stem-border-corner")).append($("<div>").addClass("tpd-stem-border-center-offset").append($("<div>").addClass("tpd-stem-border-center-offset-inverse").append($("<div>").addClass("tpd-stem-border-center"))))).append($("<div>").addClass("tpd-stem-triangle"))));
      var t = this.getMath(),
          i = t.dimensions,
          e = /^(left|right)$/.test(this._position),
          s = /^(bottom)$/.test(this._position),
          o = /^(right)$/.test(this._position),
          n = Position.getSide(this._position);

      if (this.element.css({
        width: e ? i.outside.height : i.outside.width,
        height: e ? i.outside.width : i.outside.height
      }), this.element.find(".tpd-stem-notransform").add(this.element.find(".tpd-stem-spacer")).css({
        width: e ? i.inside.height : i.inside.width,
        height: e ? i.inside.width : i.inside.height
      }), "top" === n || "left" === n) {
        var r = {};
        "top" === n ? (r.bottom = 0, r.top = "auto") : "left" === n && (r.right = 0, r.left = "auto"), this.element.find(".tpd-stem-spacer").css(r);
      }

      this.element.find(".tpd-stem-border").css({
        width: "100%",
        background: "transparent"
      });
      var h = {
        opacity: 1
      };
      h[e ? "height" : "width"] = "100%", h[e ? "width" : "height"] = this._css.border, h[s ? "top" : "bottom"] = 0, $.extend(h, o ? {
        left: 0
      } : {
        right: 0
      }), this.element.find(".tpd-stem-border-corner").css(h);
      var a = {
        width: 0,
        "background-color": "transparent",
        opacity: 1
      },
          d = .5 * i.inside.width + "px solid transparent",
          p = {
        "background-color": "transparent"
      };
      i.inside.width, t.border;

      if (e) {
        l = {
          left: "auto",
          top: "50%",
          "margin-top": -.5 * i.inside.width,
          "border-top": d,
          "border-bottom": d
        };
        $.extend(a, l), a[o ? "right" : "left"] = 0, a[o ? "border-left" : "border-right"] = i.inside.height + "px solid " + this._css.borderColor, $.extend(p, l), p[o ? "border-left" : "border-right"] = i.inside.height + "px solid " + this._css.backgroundColor, p[o ? "right" : "left"] = t.top, p[o ? "left" : "right"] = "auto", this.element.find(".tpd-stem-border-center-offset").css({
          "margin-left": -1 * this._css.border * (o ? -1 : 1)
        }).find(".tpd-stem-border-center-offset-inverse").css({
          "margin-left": this._css.border * (o ? -1 : 1)
        });
      } else {
        var l = {
          "margin-left": -.5 * i.inside.width,
          "border-left": d,
          "border-right": d
        };
        $.extend(a, l), a[s ? "border-top" : "border-bottom"] = i.inside.height + "px solid " + this._css.borderColor, $.extend(p, l), p[s ? "border-top" : "border-bottom"] = i.inside.height + "px solid " + this._css.backgroundColor, p[s ? "bottom" : "top"] = t.top, p[s ? "top" : "bottom"] = "auto", this.element.find(".tpd-stem-border-center-offset").css({
          "margin-top": -1 * this._css.border * (s ? -1 : 1)
        }).find(".tpd-stem-border-center-offset-inverse").css({
          "margin-top": this._css.border * (s ? -1 : 1)
        });
      }

      this.element.find(".tpd-stem-border-center").css(a), this.element.find(".tpd-stem-border-corner").css({
        "background-color": this._css.borderColor
      }), this.element.find(".tpd-stem-triangle").css(p), this._css.border || this.element.find(".tpd-stem-border").hide();
    },
    setPosition: function (t) {
      this._position = t, this.transform.attr("class", "tpd-stem-transform tpd-stem-transform-" + t);
    },
    getMath: function () {
      var t = this._css.height,
          i = this._css.width,
          e = this._css.border;
      this._useTransform && Math.floor(i) % 2 && (i = Math.max(Math.floor(i) - 1, 0));
      var s = degrees(Math.atan(.5 * i / t)),
          o = 90 - s,
          n = {
        width: i + 2 * (e / Math.cos((90 - o) * Math.PI / 180)),
        height: t + (c = e / Math.cos((90 - s) * Math.PI / 180))
      };
      Math.max(e, this._css.radius);
      t = n.height, i = .5 * n.width;
      var r = 90 - degrees(Math.atan(t / i)),
          h = e / Math.cos(r * Math.PI / 180),
          a = 180 * Math.atan(t / i) / Math.PI,
          d = -1 * (90 - a),
          p = 90 - a,
          l = e * Math.tan(p * Math.PI / 180),
          c = e / Math.cos((90 - p) * Math.PI / 180),
          f = $.extend({}, n),
          u = $.extend({}, n);
      u.height += this._css.spacing, u.height = Math.ceil(u.height);
      var m = !0;
      return n.width <= 2 * e && (m = !1), {
        enabled: m,
        outside: u,
        dimensions: {
          inside: f,
          outside: u
        },
        top: c,
        border: h,
        skew: d,
        corner: l
      };
    }
  });
  var Tooltips = {
    tooltips: {},
    options: {
      defaultSkin: "dark",
      startingZIndex: 999999
    },
    _emptyClickHandler: function () {},
    init: function () {
      this.reset(), this._resizeHandler = $.proxy(this.onWindowResize, this), $(window).bind("resize orientationchange", this._resizeHandler), Browser.MobileSafari && $("body").bind("click", this._emptyClickHandler);
    },
    reset: function () {
      Tooltips.removeAll(), Delegations.removeAll(), this._resizeHandler && $(window).unbind("resize orientationchange", this._resizeHandler), Browser.MobileSafari && $("body").unbind("click", this._emptyClickHandler);
    },
    onWindowResize: function () {
      this._resizeTimer && (window.clearTimeout(this._resizeTimer), this._resizeTimer = null), this._resizeTimer = _.delay($.proxy(function () {
        var t = this.getVisible();
        $.each(t, function (t, i) {
          i.clearUpdatedTo(), i.position();
        });
      }, this), 15);
    },
    _getTooltips: function (t, i) {
      var e,
          s = [],
          o = [];

      if (_.isElement(t) ? (e = $(t).data("tipped-uids")) && (s = s.concat(e)) : $(t).each(function (t, i) {
        (e = $(i).data("tipped-uids")) && (s = s.concat(e));
      }), !s[0] && !i) {
        var n = this.getTooltipByTooltipElement($(t).closest(".tpd-tooltip")[0]);
        n && n.element && (e = $(n.element).data("tipped-uids") || []) && (s = s.concat(e));
      }

      return 0 < s.length && $.each(s, $.proxy(function (t, i) {
        var e;
        (e = this.tooltips[i]) && o.push(e);
      }, this)), o;
    },
    findElement: function (t) {
      var i = [];
      return _.isElement(t) && (i = this._getTooltips(t)), i[0] && i[0].element;
    },
    get: function (e) {
      var t = $.extend({
        api: !1
      }, arguments[1] || {}),
          s = [];
      return _.isElement(e) ? s = this._getTooltips(e) : e instanceof $ ? e.each($.proxy(function (t, i) {
        var e = this._getTooltips(i, !0);

        0 < e.length && (s = s.concat(e));
      }, this)) : "string" === $.type(e) && $.each(this.tooltips, function (t, i) {
        i.element && $(i.element).is(e) && s.push(i);
      }), t.api && $.each(s, function (t, i) {
        i.is("api", !0);
      }), s;
    },
    getTooltipByTooltipElement: function (e) {
      if (!e) return null;
      var s = null;
      return $.each(this.tooltips, function (t, i) {
        i.is("build") && i._tooltip[0] === e && (s = i);
      }), s;
    },
    getBySelector: function (e) {
      var s = [];
      return $.each(this.tooltips, function (t, i) {
        i.element && $(i.element).is(e) && s.push(i);
      }), s;
    },
    getNests: function () {
      var e = [];
      return $.each(this.tooltips, function (t, i) {
        i.is("nest") && e.push(i);
      }), e;
    },
    show: function (t) {
      $(this.get(t)).each(function (t, i) {
        i.show(!1, !0);
      });
    },
    hide: function (t) {
      $(this.get(t)).each(function (t, i) {
        i.hide();
      });
    },
    toggle: function (t) {
      $(this.get(t)).each(function (t, i) {
        i.toggle();
      });
    },
    hideAll: function (e) {
      $.each(this.getVisible(), function (t, i) {
        e && e === i || i.hide();
      });
    },
    refresh: function (t) {
      var i;
      i = t ? $.grep(this.get(t), function (t, i) {
        return t.is("visible");
      }) : this.getVisible(), $.each(i, function (t, i) {
        i.refresh();
      });
    },
    getVisible: function () {
      var e = [];
      return $.each(this.tooltips, function (t, i) {
        i.visible() && e.push(i);
      }), e;
    },
    isVisibleByElement: function (e) {
      var s = !1;
      return _.isElement(e) && $.each(this.getVisible() || [], function (t, i) {
        if (i.element === e) return !(s = !0);
      }), s;
    },
    getHighestTooltip: function () {
      var e,
          s = 0;
      return $.each(this.tooltips, function (t, i) {
        i.zIndex > s && (s = i.zIndex, e = i);
      }), e;
    },
    resetZ: function () {
      this.getVisible().length <= 1 && $.each(this.tooltips, function (t, i) {
        i.is("build") && !i.options.zIndex && i._tooltip.css({
          zIndex: i.zIndex = +Tooltips.options.startingZIndex
        });
      });
    },
    clearAjaxCache: function () {
      $.each(this.tooltips, $.proxy(function (t, i) {
        i.options.ajax && (i._cache && i._cache.xhr && (i._cache.xhr.abort(), i._cache.xhr = null), i.is("updated", !1), i.is("updating", !1), i.is("sanitized", !1));
      }, this)), AjaxCache.clear();
    },
    add: function (t) {
      this.tooltips[t.uid] = t;
    },
    remove: function (t) {
      var i = this._getTooltips(t);

      this.removeTooltips(i);
    },
    removeTooltips: function (t) {
      t && $.each(t, $.proxy(function (t, i) {
        var e = i.uid;
        delete this.tooltips[e], i.remove();
      }, this));
    },
    removeDetached: function () {
      var t = this.getNests(),
          e = [];
      0 < t.length && $.each(t, function (t, i) {
        i.is("detached") && (e.push(i), i.attach());
      }), $.each(this.tooltips, $.proxy(function (t, i) {
        i.element && !_.element.isAttached(i.element) && this.remove(i.element);
      }, this)), $.each(e, function (t, i) {
        i.detach();
      });
    },
    removeAll: function () {
      $.each(this.tooltips, $.proxy(function (t, i) {
        i.element && this.remove(i.element);
      }, this)), this.tooltips = {};
    },
    setDefaultSkin: function (t) {
      this.options.defaultSkin = t || "dark";
    },
    setStartingZIndex: function (t) {
      this.options.startingZIndex = t || 0;
    }
  };

  function Tooltip() {
    this.initialize.apply(this, _slice.call(arguments));
  }

  Tooltips.Position = {
    inversedPosition: {
      left: "right",
      right: "left",
      top: "bottom",
      bottom: "top",
      middle: "middle",
      center: "center"
    },
    getInversedPosition: function (t) {
      var i = Position.split(t),
          e = i[1],
          s = i[2],
          o = Position.getOrientation(t),
          n = $.extend({
        horizontal: !0,
        vertical: !0
      }, arguments[1] || {});
      return "horizontal" === o ? (n.vertical && (e = this.inversedPosition[e]), n.horizontal && (s = this.inversedPosition[s])) : (n.vertical && (s = this.inversedPosition[s]), n.horizontal && (e = this.inversedPosition[e])), e + s;
    },
    getTooltipPositionFromTarget: function (t) {
      var i = Position.split(t);
      return this.getInversedPosition(i[1] + this.inversedPosition[i[2]]);
    }
  }, $.extend(Tooltip.prototype, {
    supportsLoading: Support.css.transform && Support.css.animation,
    initialize: function (element, content) {
      if (this.element = element, this.element) {
        var options;
        "object" !== $.type(content) || _.isElement(content) || _.isText(content) || _.isDocumentFragment(content) || content instanceof $ ? options = arguments[2] || {} : (options = content, content = null);
        var dataOptions = $(element).data("tipped-options");
        dataOptions && (options = deepExtend($.extend({}, options), eval("({" + dataOptions + "})"))), this.options = Options.create(options), this._cache = {
          dimensions: {
            width: 0,
            height: 0
          },
          events: [],
          timers: {},
          layouts: {},
          is: {},
          fnCallFn: "",
          updatedTo: {}
        }, this.queues = {
          showhide: $({})
        };
        var title = $(element).attr("title") || $(element).data("tipped-restore-title");

        if (!content) {
          var dt = $(element).attr("data-tipped");

          if (dt ? content = dt : title && (content = title), content) {
            var SCRIPT_REGEX = /<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi;
            content = content.replace(SCRIPT_REGEX, "");
          }
        }

        if (!(!content || content instanceof $ && !content[0]) || this.options.ajax && this.options.ajax.url || this.options.inline) {
          title && ($(element).data("tipped-restore-title", title), $(element)[0].setAttribute("title", "")), this.content = content, this.title = $(this.element).data("tipped-title"), "undefined" != $.type(this.options.title) && (this.title = this.options.title), this.zIndex = this.options.zIndex || +Tooltips.options.startingZIndex;
          var uids = $(element).data("tipped-uids");
          uids = uids || [];
          var uid = getUID();
          this.uid = uid, uids.push(uid), $(element).data("tipped-uids", uids);
          var parentTooltipElement = $(this.element).closest(".tpd-tooltip")[0],
              parentTooltip;
          parentTooltipElement && (parentTooltip = Tooltips.getTooltipByTooltipElement(parentTooltipElement)) && parentTooltip.is("nest", !0);
          var target = this.options.target;
          this.target = "mouse" === target ? this.element : "element" !== target && target ? _.isElement(target) ? target : target instanceof $ && target[0] ? target[0] : this.element : this.element, this.options.inline && (this.content = $("#" + this.options.inline)[0]), this.options.ajax && (this.__content = this.content), "function" === $.type(this.content) && (this._fn = this.content), this.preBuild(), Tooltips.add(this);
        } else this._aborted = !0;
      }
    },
    remove: function () {
      this.unbind(), this.clearTimers(), this.restoreElementToMarker(), this.stopLoading(), this.abort(), this.is("build") && this._tooltip && (this._tooltip.remove(), this._tooltip = null);
      var t = $(this.element).data("tipped-uids") || [],
          i = $.inArray(this.uid, t);

      if (-1 < i && (t.splice(i, 1), $(this.element).data("tipped-uids", t)), t.length < 1) {
        var e,
            s = "tipped-restore-title";
        (e = $(this.element).data(s)) && ("" != !$(this.element)[0].getAttribute("title") && $(this.element).attr("title", e), $(this.element).removeData(s)), $(this.element).removeData("tipped-uids");
      }

      var o = ($(this.element).attr("class") || "").replace(/(tpd-delegation-uid-)\d+/g, "").replace(/^\s\s*/, "").replace(/\s\s*$/, "");
      $(this.element).attr("class", o);
    },
    detach: function () {
      this.options.detach && !this.is("detached") && (this._tooltip && this._tooltip.detach(), this.is("detached", !0));
    },
    attach: function () {
      if (this.is("detached")) {
        var t;

        if ("string" === $.type(this.options.container)) {
          var i = this.target;
          "mouse" === i && (i = this.element), t = $($(i).closest(this.options.container).first());
        } else t = $(this.options.container);

        t[0] || (t = $(document.body)), t.append(this._tooltip), this.is("detached", !1);
      }
    },
    preBuild: function () {
      this.is("detached", !0);
      var t = {
        left: "-10000px",
        top: "-10000px",
        opacity: 0,
        zIndex: this.zIndex
      };
      this._tooltip = $("<div>").addClass("tpd-tooltip").addClass("tpd-skin-" + this.options.skin).addClass("tpd-size-" + this.options.size).css(t).hide(), this.createPreBuildObservers();
    },
    build: function () {
      this.is("build") || (this.attach(), this._tooltip.append(this._skin = $("<div>").addClass("tpd-skin")).append(this._contentWrapper = $("<div>").addClass("tpd-content-wrapper").append(this._contentSpacer = $("<div>").addClass("tpd-content-spacer").append(this._titleWrapper = $("<div>").addClass("tpd-title-wrapper").append(this._titleSpacer = $("<div>").addClass("tpd-title-spacer").append(this._titleRelative = $("<div>").addClass("tpd-title-relative").append(this._titleRelativePadder = $("<div>").addClass("tpd-title-relative-padder").append(this._title = $("<div>").addClass("tpd-title"))))).append(this._close = $("<div>").addClass("tpd-close").append($("<div>").addClass("tpd-close-icon").html("&times;")))).append(this._contentRelative = $("<div>").addClass("tpd-content-relative").append(this._contentRelativePadder = $("<div>").addClass("tpd-content-relative-padder").append(this._content = $("<div>").addClass("tpd-content"))).append(this._inner_close = $("<div>").addClass("tpd-close").append($("<div>").addClass("tpd-close-icon").html("&times;")))))), this.skin = new Skin(this), this._contentSpacer.css({
        "border-radius": Math.max(this.skin._css.radius - this.skin._css.border, 0)
      }), this.createPostBuildObservers(), this.is("build", !0));
    },
    createPostBuildObservers: function () {
      this._tooltip.delegate(".tpd-close, .close-tooltip", "click", $.proxy(function (t) {
        t.stopPropagation(), t.preventDefault(), this.is("api", !1), this.hide(!0);
      }, this));
    },
    createPreBuildObservers: function () {
      this.bind(this.element, "mouseenter", this.setActive), this.bind(this._tooltip, Support.touch && Browser.MobileSafari ? "touchstart" : "mouseenter", this.setActive), this.bind(this.element, "mouseleave", function (t) {
        this.setIdle(t);
      }), this.bind(this._tooltip, "mouseleave", function (t) {
        this.setIdle(t);
      }), this.options.showOn && ($.each(this.options.showOn, $.proxy(function (t, i) {
        var e,
            s = !1;

        switch (t) {
          case "element":
            e = this.element, this.options.hideOn && this.options.showOn && "click" === this.options.hideOn.element && "click" === this.options.showOn.element && (s = !0, this.is("toggleable", s));
            break;

          case "tooltip":
            e = this._tooltip;
            break;

          case "target":
            e = this.target;
        }

        if (e && i) {
          var o = i;
          this.bind(e, o, "click" === i && s ? function (t) {
            this.is("api", !1), this.toggle();
          } : function (t) {
            this.is("api", !1), this.showDelayed();
          });
        }
      }, this)), Support.touch && Browser.MobileSafari && this.bind(this._tooltip, "touchend", function () {
        this._tooltipTouchEndTime = new Date().getTime();
      })), this.options.hideOn && $.each(this.options.hideOn, $.proxy(function (t, i) {
        var e;

        switch (t) {
          case "element":
            if (this.is("toggleable") && "click" === i) return;
            e = this.element;
            break;

          case "tooltip":
            e = this._tooltip;
            break;

          case "target":
            e = this.target;
        }

        if (e && i) {
          var s = i;
          Support.touch && Browser.MobileSafari && /^(target|element)/.test(t) && /mouse(leave|out)/.test(s) ? this.bind(e, s, function (t) {
            if (this._tooltipTouchEndTime && /^mouse(leave|out)$/.test(t.type) && new Date().getTime() - this._tooltipTouchEndTime < 450) return;
            this.is("api", !1), this.hideDelayed();
          }) : this.bind(e, s, function (t) {
            this.is("api", !1), this.hideDelayed();
          });
        }
      }, this)), this.options.hideOnClickOutside && ($(this.element).addClass("tpd-hideOnClickOutside"), this.bind(document.documentElement, "click touchend", $.proxy(function (t) {
        if (this.visible()) {
          var i = $(t.target).closest(".tpd-tooltip, .tpd-hideOnClickOutside")[0];
          (!i || i && i !== this._tooltip[0] && i !== this.element) && this.hide();
        }
      }, this))), "mouse" === this.options.target && this.bind(this.element, "mouseenter mousemove", $.proxy(function (t) {
        this._cache.event = t;
      }, this));
      var t = !1;
      this.options.showOn && "mouse" === this.options.target && !this.options.fixed && (t = !0), t && this.bind(this.element, "mousemove", function (t) {
        this.is("build") && (this.is("api", !1), this.position());
      });
    }
  }), $.extend(Tooltip.prototype, {
    stop: function () {
      this._tooltip && (this.queues.showhide.queue([]), this._tooltip.stop(1, 0));
    },
    showDelayed: function (t) {
      this.is("disabled") || (this.clearTimer("hide"), this.is("visible") || this.getTimer("show") || this.setTimer("show", $.proxy(function () {
        this.clearTimer("show"), this.show();
      }, this), this.options.showDelay || 1));
    },
    show: function () {
      if (this.clearTimer("hide"), !this.visible() && !this.is("disabled") && $(this.target).is(":visible")) {
        this.is("visible", !0), this.attach(), this.stop();
        var t = this.queues.showhide;
        this.is("updated") || this.is("updating") || t.queue($.proxy(function (i) {
          this._onResizeDimensions = {
            width: 0,
            height: 0
          }, this.update($.proxy(function (t) {
            if (t) return this.is("visible", !1), void this.detach();
            i();
          }, this));
        }, this)), t.queue($.proxy(function (t) {
          this.is("sanitized") ? (this.stopLoading(), this._contentWrapper.css({
            visibility: "visible"
          }), this.is("resize-to-content", !0), t()) : (this._contentWrapper.css({
            visibility: "hidden"
          }), this.startLoading(), this.sanitize($.proxy(function () {
            this.stopLoading(), this._contentWrapper.css({
              visibility: "visible"
            }), this.is("resize-to-content", !0), t();
          }, this)));
        }, this)), t.queue($.proxy(function (t) {
          this.position(), this.raise(), t();
        }, this)), t.queue($.proxy(function (t) {
          if (this.is("updated") && "function" === $.type(this.options.onShow)) {
            var i = new Visible(this._tooltip);
            this.options.onShow(this._content[0], this.element), i.restore(), t();
          } else t();
        }, this)), t.queue($.proxy(function (t) {
          this._show(this.options.fadeIn, function () {
            t();
          });
        }, this));
      }
    },
    _show: function (t, i) {
      t = ("number" === $.type(t) ? t : this.options.fadeIn) || 0, i = i || "function" == $.type(t) && t, this.options.hideOthers && Tooltips.hideAll(this), this._tooltip.fadeTo(t, 1, $.proxy(function () {
        i && i();
      }, this));
    },
    hideDelayed: function () {
      this.clearTimer("show"), this.getTimer("hide") || !this.visible() || this.is("disabled") || this.setTimer("hide", $.proxy(function () {
        this.clearTimer("hide"), this.hide();
      }, this), this.options.hideDelay || 1);
    },
    hide: function (i, e) {
      if (this.clearTimer("show"), this.visible() && !this.is("disabled")) {
        this.is("visible", !1), this.stop();
        var t = this.queues.showhide;
        t.queue($.proxy(function (t) {
          this.abort(), t();
        }, this)), t.queue($.proxy(function (t) {
          this._hide(i, t);
        }, this)), t.queue(function (t) {
          Tooltips.resetZ(), t();
        }), t.queue($.proxy(function (t) {
          this.clearUpdatedTo(), t();
        }, this)), "function" === $.type(this.options.afterHide) && this.is("updated") && t.queue($.proxy(function (t) {
          this.options.afterHide(this._content[0], this.element), t();
        }, this)), this.options.cache || !this.options.ajax && !this._fn || t.queue($.proxy(function (t) {
          this.is("updated", !1), this.is("updating", !1), this.is("sanitized", !1), t();
        }, this)), "function" === $.type(e) && t.queue(function (t) {
          e(), t();
        }), t.queue($.proxy(function (t) {
          this.detach(), t();
        }, this));
      }
    },
    _hide: function (t, i) {
      i = i || "function" === $.type(t) && t, this.attach(), this._tooltip.fadeTo(t ? 0 : this.options.fadeOut, 0, $.proxy(function () {
        this.stopLoading(), this.is("resize-to-content", !1), this._tooltip.hide(), i && i();
      }, this));
    },
    toggle: function () {
      this.is("disabled") || this[this.visible() ? "hide" : "show"]();
    },
    raise: function () {
      if (this.is("build") && !this.options.zIndex) {
        var t = Tooltips.getHighestTooltip();
        t && t !== this && this.zIndex <= t.zIndex && (this.zIndex = t.zIndex + 1, this._tooltip.css({
          "z-index": this.zIndex
        }), this._tooltipShadow && (this._tooltipShadow.css({
          "z-index": this.zIndex
        }), this.zIndex = t.zIndex + 2, this._tooltip.css({
          "z-index": this.zIndex
        })));
      }
    }
  }), $.extend(Tooltip.prototype, {
    createElementMarker: function (t) {
      !this.elementMarker && this.content && _.element.isAttached(this.content) && ($(this.content).data("tpd-restore-inline-display", $(this.content).css("display")), this.elementMarker = $("<div>").hide(), $(this.content).before($(this.elementMarker).hide()));
    },
    restoreElementToMarker: function () {
      var t;
      this.elementMarker && this.content && ((t = $(this.content).data("tpd-restore-inline-display")) && $(this.content).css({
        display: t
      }), $(this.elementMarker).before(this.content).remove());
    },
    startLoading: function () {
      this.is("loading") || (this.build(), this.is("loading", !0), this.options.spinner && (this._tooltip.addClass("tpd-is-loading"), this.skin.startLoading(), this.is("resize-to-content") || (this.position(), this.raise(), this._show())));
    },
    stopLoading: function () {
      this.build(), this.is("loading", !1), this.options.spinner && (this._tooltip.removeClass("tpd-is-loading"), this.skin.stopLoading());
    },
    abort: function () {
      this.abortAjax(), this.abortSanitize(), this.is("refreshed-before-sanitized", !1);
    },
    abortSanitize: function () {
      this._cache.voila && (this._cache.voila.abort(), this._cache.voila = null);
    },
    abortAjax: function () {
      this._cache.xhr && (this._cache.xhr.abort(), this._cache.xhr = null, this.is("updated", !1), this.is("updating", !1));
    },
    update: function (n) {
      if (!this.is("updating")) {
        this.is("updating", !0), this.build();
        var t = this.options.inline ? "inline" : this.options.ajax ? "ajax" : _.isElement(this.content) || _.isText(this.content) || _.isDocumentFragment(this.content) ? "element" : this._fn ? "function" : "html";

        switch (this._contentWrapper.css({
          visibility: "hidden"
        }), t) {
          case "html":
          case "element":
          case "inline":
            if (this.is("updated")) return void (n && n());

            this._update(this.content, n);

            break;

          case "function":
            if (this.is("updated")) return void (n && n());

            var i = this._fn(this.element);

            if (!i) return this.is("updating", !1), void (n && n(!0));

            this._update(i, n);

            break;

          case "ajax":
            var e = this.options.ajax || {},
                s = e.url || this.__content,
                o = e.dataType,
                r = {
              url: s,
              data: e.data || {}
            };
            (t = e.type || "GET") && $.extend(r, {
              type: t
            }), o && $.extend(r, {
              dataType: o
            });
            var h,
                a = $.extend({}, r, e);
            if (a.method && delete (a = $.extend({}, a)).method, $.each("complete error success".split(" "), $.proxy(function (t, o) {
              a[o] || (a[o] = "success" === o ? function (t, i, e) {
                return e.responseText;
              } : function () {}), a[o] = _.wrap(a[o], $.proxy(function (t) {
                var i = _slice.call(arguments, 1),
                    e = $.type("object" === i[0]) ? i[0] : i[2];

                if (!e.statusText || "abort" !== e.statusText) {
                  this.options.cache && AjaxCache.set({
                    url: a.url,
                    type: a.type,
                    data: a.data
                  }, o, i), this._cache.xhr = null;
                  var s = t.apply(this, i);
                  s && this._update(s, n);
                }
              }, this));
            }, this)), this.options.cache && (h = AjaxCache.get(a)) && h.callbacks.success) return void $.each(h.callbacks, $.proxy(function (t, i) {
              "function" === $.type(a[t]) && a[t].apply(this, i);
            }, this));
            this.startLoading(), this._cache.xhr = $.ajax(a);
        }
      }
    },
    _update: function (t, i) {
      var e = {
        title: this.options.title,
        close: this.options.close
      };
      "string" === $.type(t) || _.isElement(t) || _.isText(t) || _.isDocumentFragment(t) || t instanceof $ ? e.content = t : $.extend(e, t);
      t = e.content;
      var s = e.title,
          o = e.close;
      this.content = t, this.title = s, this.close = o, this.createElementMarker(), (_.isElement(t) || t instanceof $) && $(t).show(), this._content.html(this.content), this._title.html(s && "string" === $.type(s) ? s : ""), this._titleWrapper[s ? "show" : "hide"](), this._close[(this.title || this.options.title) && o ? "show" : "hide"]();
      var n = o && !(this.options.title || this.title),
          r = o && !(this.options.title || this.title) && "overlap" !== o,
          h = o && (this.options.title || this.title) && "overlap" !== o;
      this._inner_close[n ? "show" : "hide"](), this._tooltip[(r ? "add" : "remove") + "Class"]("tpd-has-inner-close"), this._tooltip[(h ? "add" : "remove") + "Class"]("tpd-has-title-close"), this._content[(this.options.padding ? "remove" : "add") + "Class"]("tpd-content-no-padding"), this.finishUpdate(i);
    },
    sanitize: function (i) {
      if (!this.options.voila || this._content.find("img").length < 1) return this.is("sanitized", !0), void (i && i());
      this._cache.voila = Voila(this._content, {
        method: "onload"
      }, $.proxy(function (t) {
        this._markImagesAsSanitized(t.images), this.is("refreshed-before-sanitized") ? (this.is("refreshed-before-sanitized", !1), this.sanitize(i)) : (this.is("sanitized", !0), i && i());
      }, this));
    },
    _markImagesAsSanitized: function (t) {
      $.each(t, function (t, i) {
        var e = i.img;
        $(e).data("completed-src", i.img.src);
      });
    },
    _hasAllImagesSanitized: function () {
      var s = !0;
      return this._content.find("img").each(function (t, i) {
        var e = $(i).data("completed-src");
        if (!e || i.src !== e) return s = !1;
      }), s;
    },
    refresh: function () {
      this.visible() && (this.is("sanitized") ? (this.is("refreshing", !0), this.clearTimer("refresh-spinner"), !this.options.voila || this._content.find("img").length < 1 || this._hasAllImagesSanitized() ? (this.is("should-update-dimensions", !0), this.position(), this.is("refreshing", !1)) : (this.is("sanitized", !1), this._contentWrapper.css({
        visibility: "hidden"
      }), this.startLoading(), this.sanitize($.proxy(function () {
        this._contentWrapper.css({
          visibility: "visible"
        }), this.stopLoading(), this.is("should-update-dimensions", !0), this.position(), this.is("refreshing", !1);
      }, this)))) : this.is("refreshed-before-sanitized", !0));
    },
    finishUpdate: function (t) {
      if (this.is("updated", !0), this.is("updating", !1), "function" === $.type(this.options.afterUpdate)) {
        var i = this._contentWrapper.css("visibility");

        i && this._contentWrapper.css({
          visibility: "visible"
        }), this.options.afterUpdate(this._content[0], this.element), i && this._contentWrapper.css({
          visibility: "hidden"
        });
      }

      t && t();
    }
  }), $.extend(Tooltip.prototype, {
    clearUpdatedTo: function () {
      this._cache.updatedTo = {};
    },
    updateDimensionsToContent: function (t, i) {
      this.skin.build();
      var e = this.is("loading"),
          s = this._cache.updatedTo;

      if ((this._maxWidthPass || this.is("api") || this.is("should-update-dimensions") || s.stemPosition !== i || s.loading !== e) && (!e || !this.is("resize-to-content"))) {
        this._cache.updatedTo = {
          type: this.is("resize-to-content") ? "content" : "spinner",
          loading: this.is("loading"),
          stemPosition: i
        }, this.is("should-update-dimensions") && this.is("should-update-dimensions", !1), t = t || this.options.position.target, i = i || this.options.position.tooltip;
        var o = Position.getSide(i),
            n = Position.getOrientation(i),
            r = this.skin._css.border;

        this._tooltip.addClass("tpd-tooltip-measuring");

        var h = this._tooltip.attr("style");

        this._tooltip.removeAttr("style");

        var a = {
          top: r,
          right: r,
          bottom: r,
          left: r
        },
            d = 0;

        if ("vertical" === Position.getOrientation(i)) {
          this.options.stem && (a[o] = this.skin["stem_" + o].getMath().dimensions.outside.height);
          var p = this.getMouseRoom();
          p[Position._flip[o]] && (a[o] += p[Position._flip[o]]);
          var l = this.getContainmentLayout(i),
              c = this.getPaddingLine(t),
              f = !1;
          if (Position.isPointWithinBoxLayout(c.x1, c.y1, l) || Position.isPointWithinBoxLayout(c.x2, c.y2, l)) f = !0;else {
            $.each("top right bottom left".split(" "), $.proxy(function (t, i) {
              var e = this.getSideLine(l, i);
              if (Position.intersectsLine(c.x1, c.y1, c.x2, c.y2, e.x1, e.y1, e.x2, e.y2)) return !(f = !0);
            }, this));
          }
          f && (d = "left" === o ? c.x1 - l.position.left : l.position.left + l.dimensions.width - c.x1, a[o] += d);
        }

        if (this.options.offset && "vertical" === n) {
          var u = Position.adjustOffsetBasedOnPosition(this.options.offset, this.options.position.target, t);
          0 !== u.x && (a.right += Math.abs(u.x));
        }

        this.options.containment && (d = this.options.containment.padding) && ($.each(a, function (t, i) {
          a[t] += d;
        }), "vertical" === n ? a["left" === o ? "left" : "right"] -= d : a["top" === o ? "top" : "bottom"] -= d);
        var m = Bounds.viewport(),
            g = {
          width: 0,
          height: 0
        };
        this.close && "overlap" !== this.close && !this.title && (g = this._innerCloseDimensions || {
          width: this._inner_close.outerWidth(!0),
          height: this._inner_close.outerHeight(!0)
        }, this._innerCloseDimensions = g), this._contentRelativePadder.css({
          "padding-right": g.width
        }), this._contentSpacer.css({
          width: m.width - a.left - a.right
        });
        var b = {
          width: this._content.innerWidth() + g.width,
          height: Math.max(this._content.innerHeight(), g.height || 0)
        },
            v = {
          width: 0,
          height: 0
        };

        if (this.title) {
          var _ = {
            width: 0,
            height: 0
          };
          this._titleWrapper.add(this._titleSpacer).css({
            width: "auto",
            height: "auto"
          }), this.close && "overlap" !== this.close && (_ = {
            width: this._close.outerWidth(!0),
            height: this._close.outerHeight(!0)
          }, this._close.hide()), this._maxWidthPass && b.width > this.options.maxWidth && this._titleRelative.css({
            width: b.width
          }), this._titleRelativePadder.css({
            "padding-right": _.width
          });
          var x = parseFloat(this._titleWrapper.css("border-bottom-width"));
          (v = {
            width: this.title ? this._titleWrapper.innerWidth() : 0,
            height: Math.max(this.title ? this._titleWrapper.innerHeight() + x : 0, _.height + x)
          }).width > m.width - a.left - a.right && (v.width = m.width - a.left - a.right, this._titleSpacer.css({
            width: v.width
          }), v.height = Math.max(this.title ? this._titleWrapper.innerHeight() + x : 0, _.height + x)), b.width = Math.max(v.width, b.width), b.height += v.height, this._titleWrapper.css({
            height: Math.max(this.title ? this._titleWrapper.innerHeight() : 0, _.height)
          }), this.close && this._close.show();
        }

        if (this.options.stem) {
          var w = "vertical" === n ? "height" : "width",
              y = this.skin["stem_" + o].getMath().outside.width + 2 * this.skin._css.radius;

          b[w] < y && (b[w] = y);
        }

        if (this._contentSpacer.css({
          width: b.width
        }), b.height !== Math.max(this._content.innerHeight(), g.height) + (this.title ? this._titleRelative.outerHeight() : 0) && b.width++, this.is("resize-to-content") || (b = this.skin._css.spinner.dimensions), this.setDimensions(b), a = {
          top: r,
          right: r,
          bottom: r,
          left: r
        }, this.options.stem) {
          var T = Position.getSide(i);
          a[T] = this.skin.stem_top.getMath().dimensions.outside.height;
        }

        this._contentSpacer.css({
          "margin-top": a.top,
          "margin-left": +a.left,
          width: b.width
        }), (this.title || this.close) && this._titleWrapper.css({
          height: this._titleWrapper.innerHeight(),
          width: b.width
        }), this._tooltip.removeClass("tpd-tooltip-measuring"), this._tooltip.attr("style", h);

        var k = this._contentRelative.add(this._titleRelative);

        this.options.maxWidth && b.width > this.options.maxWidth && !this._maxWidthPass && this.is("resize-to-content") && (k.css({
          width: this.options.maxWidth
        }), this._maxWidthPass = !0, this.updateDimensionsToContent(t, i), this._maxWidthPass = !1, k.css({
          width: "auto"
        }));
      }
    },
    setDimensions: function (t) {
      this.skin.setDimensions(t);
    },
    getContainmentSpace: function (t, i) {
      var e = this.getContainmentLayout(t, i),
          s = this.getTargetLayout(),
          o = s.position,
          n = s.dimensions,
          r = e.position,
          h = e.dimensions,
          a = {
        top: Math.max(o.top - r.top, 0),
        bottom: Math.max(r.top + h.height - (o.top + n.height), 0),
        left: Math.max(o.left - r.left, 0),
        right: Math.max(r.left + h.width - (o.left + n.width), 0)
      };
      return o.top > r.top + h.height && (a.top -= o.top - (r.top + h.height)), o.top + n.height < r.top && (a.bottom -= r.top - (o.top + n.height)), o.left > r.left + h.width && r.left + h.width >= o.left && (a.left -= o.left - (r.left + h.width)), o.left + n.width < r.left && (a.right -= r.left - (o.left + n.width)), this._cache.layouts.containmentSpace = a;
    },
    position: function (t) {
      if (this.visible()) {
        this.is("positioning", !0), this._cache.layouts = {};
        this._cache.dimensions;
        var i = this.options.position.target,
            e = this.options.position.tooltip,
            s = e,
            o = i;
        this.updateDimensionsToContent(o, s);
        var n = deepExtend(this.getPositionBasedOnTarget(o, s)),
            r = [];

        if (this.options.containment) {
          var h = !1,
              a = {};
          if ($.each("top right bottom left".split(" "), $.proxy(function (t, i) {
            (a[i] = this.isSideWithinContainment(i, s, !0)) && (h = !0);
          }, this)), h || (n.contained = !0), n.contained) this.setPosition(n);else if (r.unshift({
            position: n,
            targetPosition: o,
            stemPosition: s
          }), o = Position.flip(i), s = Position.flip(e), a[Position.getSide(o)] ? (this.updateDimensionsToContent(o, s), n = this.getPositionBasedOnTarget(o, s)) : n.contained = !1, n.contained) this.setPosition(n, s);else {
            r.unshift({
              position: n,
              targetPosition: o,
              stemPosition: s
            });
            var d = i,
                p = this.getContainmentSpace(s, !0),
                l = "horizontal" === Position.getOrientation(d) ? ["left", "right"] : ["top", "bottom"],
                c = (p[l[0]] === p[l[1]] ? "horizontal" === Position.getOrientation(d) ? "left" : "top" : l[p[l[0]] > p[l[1]] ? 0 : 1]) + Position.split(d)[1],
                f = Position.flip(c);
            if (o = c, s = f, a[Position.getSide(o)] ? (this.updateDimensionsToContent(o, s), n = this.getPositionBasedOnTarget(o, s)) : n.contained = !1, n.contained) this.setPosition(n, s);else {
              var u;
              r.unshift({
                position: n,
                targetPosition: o,
                stemPosition: s
              });
              var m = [];

              if ($.each(r, function (t, i) {
                if (0 <= i.position.top && 0 <= i.position.left) u = i;else {
                  var e = 0 <= i.position.top ? 1 : Math.abs(i.position.top),
                      s = 0 <= i.position.left ? 1 : Math.abs(i.position.left);
                  m.push({
                    result: i,
                    negativity: e * s
                  });
                }
              }), !u) {
                var g = m[m.length - 1];
                $.each(m, function (t, i) {
                  i.negativity < g.negativity && (g = i);
                }), u = g.result;
              }

              this.updateDimensionsToContent(u.targetPosition, u.stemPosition, !0), this.setPosition(u.position, u.stemPosition);
            }
          }
        } else this.setPosition(n);

        this._cache.dimensions = this.skin._vars.dimensions, this.skin.paint(), this.is("positioning", !1);
      }
    },
    getPositionBasedOnTarget: function (t, i) {
      i = i || this.options.position.tooltip;
      var e,
          s = this.getTargetDimensions(),
          o = {
        left: 0,
        top: 0
      },
          n = {
        left: 0,
        top: 0
      },
          r = (Position.getSide(t), this.skin._vars),
          h = r.frames[Position.getSide(i)],
          a = Position.getOrientation(t),
          d = Position.split(t);

      if ("horizontal" === a) {
        switch (e = Math.floor(.5 * s.width), d[2]) {
          case "left":
            n.left = e;
            break;

          case "middle":
            o.left = s.width - e, n.left = o.left;
            break;

          case "right":
            o.left = s.width, n.left = s.width - e;
        }

        "bottom" === d[1] && (o.top = s.height, n.top = s.height);
      } else {
        switch (e = Math.floor(.5 * s.height), d[2]) {
          case "top":
            n.top = e;
            break;

          case "middle":
            o.top = s.height - e, n.top = o.top;
            break;

          case "bottom":
            n.top = s.height - e, o.top = s.height;
        }

        "right" === d[1] && (o.left = s.width, n.left = s.width);
      }

      var p = this.getTargetPosition(),
          l = $.extend({}, s, {
        top: p.top,
        left: p.left,
        connection: o,
        max: n
      }),
          c = {
        width: h.dimensions.width,
        height: h.dimensions.height,
        top: 0,
        left: 0,
        connection: r.connections[i].connection,
        stem: r.connections[i].stem
      };

      if (c.top = l.top + l.connection.top, c.left = l.left + l.connection.left, c.top -= c.connection.top, c.left -= c.connection.left, this.options.stem) {
        var f = r.stemDimensions.width,
            u = {
          stem: {
            top: c.top + c.stem.connection.top,
            left: c.left + c.stem.connection.left
          },
          connection: {
            top: l.top + l.connection.top,
            left: l.left + l.connection.left
          },
          max: {
            top: l.top + l.max.top,
            left: l.left + l.max.left
          }
        };

        if (!Position.isPointWithinBox(u.stem.left, u.stem.top, u.connection.left, u.connection.top, u.max.left, u.max.top)) {
          u = {
            stem: {
              top: c.top + c.stem.connection.top,
              left: c.left + c.stem.connection.left
            },
            connection: {
              top: l.top + l.connection.top,
              left: l.left + l.connection.left
            },
            max: {
              top: l.top + l.max.top,
              left: l.left + l.max.left
            }
          };
          var m = {
            connection: Position.getDistance(u.stem.left, u.stem.top, u.connection.left, u.connection.top),
            max: Position.getDistance(u.stem.left, u.stem.top, u.max.left, u.max.top)
          },
              g = Math.min(m.connection, m.max),
              b = u[m.connection <= m.max ? "connection" : "max"],
              v = "horizontal" === Position.getOrientation(i) ? "left" : "top";

          if (f <= Position.getDistance(u.connection.left, u.connection.top, u.max.left, u.max.top)) {
            var _ = {
              top: 0,
              left: 0
            },
                x = b[v] < u.stem[v] ? -1 : 1;
            _[v] = g * x, _[v] += Math.floor(.5 * f) * x, c.left += _.left, c.top += _.top;
          } else {
            $.extend(u, {
              center: {
                top: Math.round(l.top + .5 * s.height),
                left: Math.round(l.left + .5 * s.left)
              }
            });
            g = m[Position.getDistance(u.center.left, u.center.top, u.connection.left, u.connection.top) <= Position.getDistance(u.center.left, u.center.top, u.max.left, u.max.top) ? "connection" : "max"];
            var w = {
              top: 0,
              left: 0
            };
            x = b[v] < u.stem[v] ? -1 : 1;
            w[v] = g * x, c.left += w.left, c.top += w.top;
          }
        }
      }

      if (this.options.offset) {
        var y = $.extend({}, this.options.offset);
        y = Position.adjustOffsetBasedOnPosition(y, this.options.position.target, t), c.top += y.y, c.left += y.x;
      }

      var T = this.getContainment({
        top: c.top,
        left: c.left
      }, i),
          k = T.horizontal && T.vertical,
          P = {
        x: 0,
        y: 0
      },
          C = Position.getOrientation(i);

      if (!T[C]) {
        var S = "horizontal" === C,
            O = S ? ["left", "right"] : ["up", "down"],
            M = S ? "x" : "y",
            z = S ? "left" : "top",
            D = T.correction[M],
            I = this.getContainmentLayout(i),
            A = I.position[S ? "left" : "top"];

        if (0 !== D) {
          var W = r.connections[i].move,
              E = W[O[-1 * D < 0 ? 0 : 1]],
              L = D < 0 ? -1 : 1;
          if (D * L <= E && c[z] + D >= A) c[z] += D, P[M] = -1 * D, k = !0;else if (Position.getOrientation(t) === Position.getOrientation(i)) {
            if (c[z] += E * L, P[M] = E * L * -1, c[z] < A) {
              var j = A - c[z],
                  B = W[O[0]] + W[O[1]];
              j = Math.min(j, B), c[z] += j;
              var H = P[M] - j;
              H >= r.connections[i].move[O[0]] && H <= r.connections[i].move[O[1]] && (P[M] -= j);
            }

            var R = (T = this.getContainment({
              top: c.top,
              left: c.left
            }, i)).correction[M],
                F = deepExtend({}, c);
            this.options.offset && (F.left -= this.options.offset.x, F.top -= this.options.offset.y), (u = {
              stem: {
                top: F.top + c.stem.connection.top,
                left: F.left + c.stem.connection.left
              }
            }).stem[z] += P[M];
            var q = this.getTargetLayout(),
                U = (f = r.stemDimensions.width, Math.floor(.5 * f)),
                Q = A + I.dimensions[S ? "width" : "height"];

            if ("x" == M) {
              var V = q.position.left + U;
              0 < R && (V += q.dimensions.width - 2 * U), (R < 0 && u.stem.left + R >= V && F.left + R >= A || 0 < R && u.stem.left + R <= V && F.left + R <= Q) && (F.left += R);
            } else {
              var G = q.position.top + U;
              0 < R && (G += q.dimensions.height - 2 * U), (R < 0 && u.stem.top + R >= G && F.top + R >= A || 0 < R && u.stem.top + R <= G && F.top + R <= Q) && (F.top += R);
            }

            c = F, this.options.offset && (c.left += this.options.offset.x, c.top += this.options.offset.y);
          }
        }

        k = (T = this.getContainment({
          top: c.top,
          left: c.left
        }, i)).horizontal && T.vertical;
      }

      return {
        top: c.top,
        left: c.left,
        contained: k,
        shift: P
      };
    },
    setPosition: function (t, i) {
      var e = this._position;

      if (!e || e.top !== t.top || e.left !== t.left) {
        var s;

        if (this.options.container !== document.body) {
          if ("string" === $.type(this.options.container)) {
            var o = this.target;
            "mouse" === o && (o = this.element), s = $($(o).closest(this.options.container).first());
          } else s = $(s);

          if (s[0]) {
            var n = $(s).offset(),
                r = Math.round(n.top),
                h = Math.round(n.left),
                a = Math.round($(s).scrollTop()),
                d = Math.round($(s).scrollLeft());
            t.top -= r, t.top += a, t.left -= h, t.left += d;
          }
        }

        this._position = t, this._tooltip.css({
          top: t.top,
          left: t.left
        });
      }

      this.skin.setStemPosition(i || this.options.position.tooltip, t.shift || {
        x: 0,
        y: 0
      });
    },
    getSideLine: function (t, i) {
      var e = t.position.left,
          s = t.position.top,
          o = t.position.left,
          n = t.position.top;

      switch (i) {
        case "top":
          o += t.dimensions.width;
          break;

        case "bottom":
          s += t.dimensions.height, o += t.dimensions.width, n += t.dimensions.height;
          break;

        case "left":
          n += t.dimensions.height;
          break;

        case "right":
          e += t.dimensions.width, o += t.dimensions.width, n += t.dimensions.height;
      }

      return {
        x1: e,
        y1: s,
        x2: o,
        y2: n
      };
    },
    isSideWithinContainment: function (t, i, e) {
      var s = this.getContainmentLayout(i, e),
          o = this.getTargetLayout(),
          n = this.getSideLine(o, t);
      if (Position.isPointWithinBoxLayout(n.x1, n.y1, s) || Position.isPointWithinBoxLayout(n.x2, n.y2, s)) return !0;
      var r = !1;
      return $.each("top right bottom left".split(" "), $.proxy(function (t, i) {
        var e = this.getSideLine(s, i);
        if (Position.intersectsLine(n.x1, n.y1, n.x2, n.y2, e.x1, e.y1, e.x2, e.y2)) return !(r = !0);
      }, this)), r;
    },
    getContainment: function (t, i) {
      var e = {
        horizontal: !0,
        vertical: !0,
        correction: {
          y: 0,
          x: 0
        }
      };

      if (this.options.containment) {
        var s = this.getContainmentLayout(i),
            o = this.skin._vars.frames[Position.getSide(i)].dimensions;

        this.options.containment && ((t.left < s.position.left || t.left + o.width > s.position.left + s.dimensions.width) && (e.horizontal = !1, t.left < s.position.left ? e.correction.x = s.position.left - t.left : e.correction.x = s.position.left + s.dimensions.width - (t.left + o.width)), (t.top < s.position.top || t.top + o.height > s.position.top + s.dimensions.height) && (e.vertical = !1, t.top < s.position.top ? e.correction.y = s.position.top - t.top : e.correction.y = s.position.top + s.dimensions.height - (t.top + o.height)));
      }

      return e;
    },
    getContainmentLayout: function (t, i) {
      var e = {
        top: $(window).scrollTop(),
        left: $(window).scrollLeft()
      },
          s = this.target;
      "mouse" === s && (s = this.element);
      var o,
          n = $(s).closest(this.options.containment.selector).first()[0];
      o = n && "viewport" !== this.options.containment.selector ? {
        dimensions: {
          width: $(n).innerWidth(),
          height: $(n).innerHeight()
        },
        position: $(n).offset()
      } : {
        dimensions: Bounds.viewport(),
        position: e
      };
      var r = this.options.containment.padding;

      if (r && !i) {
        var h = Math.max(o.dimensions.height, o.dimensions.width);
        if (h < 2 * r && (r = Math.max(Math.floor(.5 * h), 0)), r) o.dimensions.width -= 2 * r, o.dimensions.height -= 2 * r, o.position.top += r, o.position.left += r, "vertical" === Position.getOrientation(t) ? (o.dimensions.width += r, "left" === Position.getSide(t) && (o.position.left -= r)) : (o.dimensions.height += r, "top" === Position.getSide(t) && (o.position.top -= r));
      }

      return this._cache.layouts.containmentLayout = o;
    },
    getMouseRoom: function () {
      var t = {
        top: 0,
        left: 0,
        right: 0,
        bottom: 0
      };

      if ("mouse" === this.options.target && !this.is("api")) {
        var i = Mouse.getActualPosition(this._cache.event),
            e = $(this.element).offset(),
            s = $(this.element).innerWidth(),
            o = $(this.element).innerHeight();
        t = {
          top: Math.max(0, i.top - e.top),
          bottom: Math.max(0, e.top + o - i.top),
          left: Math.max(0, i.left - e.left),
          right: Math.max(0, e.left + s - i.left)
        };
      }

      return t;
    },
    getTargetPosition: function () {
      var t, i;
      return t = "mouse" === this.options.target ? this.is("api") ? (i = $(this.element).offset(), {
        top: Math.round(i.top),
        left: Math.round(i.left)
      }) : Mouse.getPosition(this._cache.event) : (i = $(this.target).offset(), {
        top: Math.round(i.top),
        left: Math.round(i.left)
      }), this._cache.layouts.targetPosition = t;
    },
    getTargetDimensions: function () {
      return this._cache.layouts.targetDimensions ? this._cache.layouts.targetDimensions : (t = "mouse" === this.options.target ? Mouse.getDimensions() : {
        width: $(this.target).innerWidth(),
        height: $(this.target).innerHeight()
      }, this._cache.layouts.targetDimensions = t);
      var t;
    },
    getTargetLayout: function () {
      if (this._cache.layouts.targetLayout) return this._cache.layouts.targetLayout;
      var t = {
        position: this.getTargetPosition(),
        dimensions: this.getTargetDimensions()
      };
      return this._cache.layouts.targetLayout = t;
    },
    getPaddingLine: function (t) {
      var i = this.getTargetLayout(),
          e = "left";
      if ("vertical" === Position.getOrientation(t)) return this.getSideLine(i, Position.getSide(t));

      if (Position.isCorner(t)) {
        var s = Position.inverseCornerPlane(t);
        return e = Position.getSide(s), this.getSideLine(i, e);
      }

      var o = this.getSideLine(i, e),
          n = Math.round(.5 * i.dimensions.width);
      return o.x1 += n, o.x2 += n, o;
    }
  }), $.extend(Tooltip.prototype, {
    setActive: function () {
      this.is("active", !0), this.visible() && this.raise(), this.options.hideAfter && this.clearTimer("idle");
    },
    setIdle: function () {
      this.is("active", !1), this.options.hideAfter && this.setTimer("idle", $.proxy(function () {
        this.clearTimer("idle"), this.is("active") || this.hide();
      }, this), this.options.hideAfter);
    }
  }), $.extend(Tooltip.prototype, {
    bind: function (t, i, e, s) {
      var o = $.proxy(e, s || this);
      this._cache.events.push({
        element: t,
        eventName: i,
        handler: o
      }), $(t).bind(i, o);
    },
    unbind: function () {
      $.each(this._cache.events, function (t, i) {
        $(i.element).unbind(i.eventName, i.handler);
      }), this._cache.events = [];
    }
  }), $.extend(Tooltip.prototype, {
    disable: function () {
      this.is("disabled") || this.is("disabled", !0);
    },
    enable: function () {
      this.is("disabled") && this.is("disabled", !1);
    }
  }), $.extend(Tooltip.prototype, {
    is: function (t, i) {
      return "boolean" === $.type(i) && (this._cache.is[t] = i), this._cache.is[t];
    },
    visible: function () {
      return this.is("visible");
    }
  }), $.extend(Tooltip.prototype, {
    setTimer: function (t, i, e) {
      this._cache.timers[t] = _.delay(i, e);
    },
    getTimer: function (t) {
      return this._cache.timers[t];
    },
    clearTimer: function (t) {
      this._cache.timers[t] && (clearTimeout(this._cache.timers[t]), delete this._cache.timers[t]);
    },
    clearTimers: function () {
      $.each(this._cache.timers, function (t, i) {
        clearTimeout(i);
      }), this._cache.timers = {};
    }
  }), $.extend(Tipped, {
    init: function () {
      Tooltips.init();
    },
    create: function (t, e) {
      var s = $.extend({}, arguments[2] || {}),
          o = [];
      return _.isElement(t) ? o.push(new Tooltip(t, e, s)) : $(t).each(function (t, i) {
        o.push(new Tooltip(i, e, s));
      }), new Collection(o);
    },
    get: function (t) {
      return new Collection(Tooltips.get(t));
    },
    findElement: function (t) {
      return Tooltips.findElement(t);
    },
    hideAll: function () {
      return Tooltips.hideAll(), this;
    },
    setDefaultSkin: function (t) {
      return Tooltips.setDefaultSkin(t), this;
    },
    visible: function (t) {
      if (_.isElement(t)) return Tooltips.isVisibleByElement(t);
      if ("undefined" === $.type(t)) return Tooltips.getVisible().length;
      var i = $(t),
          e = 0;
      return $.each(i, function (t, i) {
        Tooltips.isVisibleByElement(i) && e++;
      }), e;
    },
    clearAjaxCache: function () {
      return Tooltips.clearAjaxCache(), this;
    },
    refresh: function (t, i, e) {
      return Tooltips.refresh(t, i, e), this;
    },
    setStartingZIndex: function (t) {
      return Tooltips.setStartingZIndex(t), this;
    },
    remove: function (t) {
      return Tooltips.remove(t), this;
    }
  }), $.each("show hide toggle disable enable".split(" "), function (t, i) {
    Tipped[i] = function (t) {
      return this.get(t)[i](), this;
    };
  }), $.extend(Tipped, {
    delegate: function () {
      Delegations.add.apply(Delegations, _slice.call(arguments));
    },
    undelegate: function () {
      Delegations.remove.apply(Delegations, _slice.call(arguments));
    }
  });
  var Delegations = {
    _uid: 0,
    _delegations: {},
    add: function (t, e, s) {
      "object" !== $.type(e) || _.isElement(e) ? s = s || {} : (s = e, e = null);
      var o = ++this._uid,
          i = Options.create($.extend({}, s));
      this._delegations[o] = {
        uid: o,
        selector: t,
        content: e,
        options: i
      };

      function n(t) {
        $(this).addClass("tpd-delegation-uid-" + o);
        var i = new Tooltip(this, e, s);
        i._cache.event = t, i.setActive(), i.showDelayed();
      }

      this._delegations[o].removeTitleHandler = $.proxy(this.removeTitle, this), $(document).delegate(t + ":not(.tpd-delegation-uid-" + o + ")", "mouseenter", this._delegations[o].removeTitleHandler), this._delegations[o].handler = n, $(document).delegate(t + ":not(.tpd-delegation-uid-" + o + ")", i.showOn.element, n);
    },
    removeTitle: function (t) {
      var i = t.currentTarget,
          e = $(i).attr("title");
      e && ($(i).data("tipped-restore-title", e), $(i)[0].setAttribute("title", ""));
    },
    remove: function (e) {
      $.each(this._delegations, $.proxy(function (t, i) {
        i.selector === e && ($(document).undelegate(e + ":not(.tpd-delegation-uid-" + t + ")", "mouseenter", i.removeTitleHandler).undelegate(e + ":not(.tpd-delegation-uid-" + t + ")", i.options.showOn.element, i.handler), delete this._delegations[t]);
      }, this));
    },
    removeAll: function () {
      $.each(this._delegations, $.proxy(function (t, i) {
        $(document).undelegate(i.selector + ":not(.tpd-delegation-uid-" + t + ")", "mouseenter", i.removeTitleHandler).undelegate(i.selector + ":not(.tpd-delegation-uid-" + t + ")", i.options.showOn.element, i.handler), delete this._delegations[t];
      }, this));
    }
  };

  function Collection() {
    this.initialize.apply(this, _slice.call(arguments));
  }

  return $.extend(Collection.prototype, {
    initialize: function (t) {
      return this.tooltips = t, this;
    },
    items: function () {
      return $.each(this.tooltips, function (t, i) {
        i.is("api", !0);
      }), this.tooltips;
    },
    refresh: function (t) {
      return $.each(this._tooltips, function (t, i) {
        i.is("visible") && i.refresh();
      }), this;
    },
    remove: function () {
      return Tooltips.removeTooltips(this.tooltips), this.tooltips = [], this;
    }
  }), $.each("show hide toggle disable enable".split(" "), function (t, e) {
    Collection.prototype[e] = function () {
      return $.each(this.tooltips, function (t, i) {
        i.is("api", !0), i[e]();
      }), this;
    };
  }), Tipped.init(), Tipped;
});
function reloadRightmenu(url) {
  $.get(url, {}, displayRightmenu);
}

function displayRightmenu(data) {
  $("#rechts").replaceWith(data);
  initPlanetSorting();
}

function ajaxFormSubmit(form, url, okFunction, additionalParams) {
  var params = $("#" + form + "").serialize();

  if (typeof additionalParams === 'object') {
    for (var key in additionalParams) {
      if (!additionalParams.hasOwnProperty(key)) {
        continue;
      }

      params += '&' + key + '=' + additionalParams[key];
    }
  }

  var successFunction = null;

  if (okFunction != null && typeof okFunction == "function") {
    successFunction = okFunction;
  }

  $.ajax({
    type: "POST",
    url: url,
    data: params,
    success: successFunction
  });
}

function initConnectionErrorFunction() {
  if (isMobile) {
    document.addEventListener("deviceready", function () {
      $(document).ajaxError(function (e, xhr, settings, exception) {
        HostApp.ShowNoConnectionScreen();
      });
    }, false);
  }
}
// page: ainfo.js
function initAllianceInfo() {
  initConnectionErrorFunction();
  initTooltips();
  initOverlays();
  initHideElements();
}

$('[data-homepage-link]').on('click', function (e) {
  e.preventDefault();
  errorBoxDecision(LocalizationStrings.attention, LocalizationStrings.redirectMessage, LocalizationStrings.yes, LocalizationStrings.no, function () {
    window.location.href = 'redir.php?url=' + encodeURIComponent(allyHome);
  }, false, false);
});
// ----------------------------------------------------------------------------
// markItUp!
// ----------------------------------------------------------------------------
// Copyright (C) 2011 Jay Salvat
// http://markitup.jaysalvat.com/
// ----------------------------------------------------------------------------
// Html tags
// http://en.wikipedia.org/wiki/html
// ----------------------------------------------------------------------------
// Basic set. Feel free to add more tags
// ----------------------------------------------------------------------------

/**
 * Ogame specific initialisation code for the markItUp Editor
 *
 * @param locaKeys { Object }
 * @param itemArray { Object }
 * @param imagesAllowed { Boolean }
 * @param selector { String } - is specified, only init editor for this selector
 * @param maxChars { Number } - maximum length of entered text
 * @param lite { bool } - limits possible functions
 **/
function initBBCodeEditor(locaKeys, itemArray, imagesAllowed, selector, maxChars, lite) {
  var $textareas;

  if (typeof selector == 'undefined' || selector == null) {
    $textareas = $('textarea:not(.markItUpEditor)');
  } else {
    $textareas = $(selector).filter(':not(.markItUpEditor)');
  }

  if ($textareas.length == 0) {
    return;
  }

  var imagesAllowed = imagesAllowed || false;
  var fontSizeArray = [];

  for (var fontSizeCounter = 6; fontSizeCounter <= 30; fontSizeCounter += 2) {
    fontSizeArray.push({
      name: fontSizeCounter,
      openWith: '[size=' + fontSizeCounter + ']',
      closeWith: '[/size]',
      placeHolder: 'Text',
      className: 'fontSize' + fontSizeCounter
    });
  }

  var itemDropdownArray = [];
  $.each(itemArray, function (uuid, name) {
    itemDropdownArray.push({
      name: name,
      replaceWith: '[item]' + uuid + '[/item]'
    });
  });

  function multiInsertSelectionFix(e) {
    if (e.selection.length == 0) {
      return;
    }

    var $textarea = $(e.textarea);
    var range = $textarea.getSelection();
    var listItemStart = $textarea.val().indexOf(e.openWith, range.start);
    var rangeValue = listItemStart + e.openWith.length;
    var placeHolderLength = typeof e.placeHolder == 'string' ? e.placeHolder.length : 0;
    var newRange = {
      start: rangeValue,
      end: rangeValue + placeHolderLength
    };
    $textarea.setSelection(newRange);
  }

  function colorPicker(e) {
    var openWith = e.openWith;
    var $textarea = $(e.textarea);
    var selection = $textarea.getSelection();
    $textarea.siblings('.colorpicker').val('').colorpicker('open').colorpicker('option', 'close', function (e, color) {
      var replaceBy = openWith.replace(/%colorCode%/, color.formatted); // determine new text selection

      var selectionOffset = "%colorCode%".length - color.formatted.length;
      selection.start = selection.start - selectionOffset;
      selection.end = selection.end - selectionOffset;
      $textarea.val($textarea.val().replace(openWith, replaceBy)).setSelection(selection);
    });
    var $button = $textarea.siblings('.markItUpHeader').find('.' + e.className);
    $('.ui-colorpicker:visible').css('top', $button.offset().top + $button.height()).css('left', $button.offset().left);
    $('.ui-colorpicker').draggable();
    $('.ui-colorpicker-rgb-r .ui-colorpicker-number').focus();
    return e;
  }

  function backgroundImage(e) {
    var $textarea = $(e.textarea);
    var selection = $textarea.getSelection();
    var openWith = e.openWith;
    var $imagePickerOverlay = $('#backgroundImagePicker');

    if ($imagePickerOverlay.is(':visible')) {
      $imagePickerOverlay.dialog('close');
    }

    $imagePickerOverlay.find('input:checked').prop('checked', false);
    $imagePickerOverlay.find('.url').val('http://').focus();
    openOverlay($imagePickerOverlay, {
      type: 'inline',
      title: locaKeys.backgroundImage,
      close: function () {
        var imageText = $imagePickerOverlay.find('.url').val();
        var checkedX = $imagePickerOverlay.find('.repeatX:checked').length;
        var checkedY = $imagePickerOverlay.find('.repeatY:checked').length;
        var repeat = "";

        if (checkedX && checkedY) {
          repeat = "yes";
        } else if (checkedX) {
          repeat = "yes-x";
        } else if (checkedY) {
          repeat = "yes-y";
        }

        if (repeat.length) {
          imageText += " image-repeat=" + repeat;
        }

        var replaceBy = openWith.replace(/%image%/, imageText); // determine new text selection

        var selectionOffset = "%image%".length - imageText.length;
        selection.start = selection.start - selectionOffset;
        selection.end = selection.end - selectionOffset;
        $textarea.val($textarea.val().replace(openWith, replaceBy)).setSelection(selection);
      }
    });
    var $button = $textarea.siblings('.markItUpHeader').find('.' + e.className);
    $imagePickerOverlay.parent().css('top', $button.offset().top + $button.height()).css('left', $button.offset().left);
    return e;
  } // END function backgroundImage(e)


  var markupSetBasic = lite ? [{
    name: locaKeys.bold,
    key: 'B',
    openWith: '[b]',
    closeWith: '[/b]',
    className: 'bold'
  }, {
    name: locaKeys.italic,
    key: 'I',
    openWith: '[i]',
    closeWith: '[/i]',
    className: 'italic'
  }, {
    name: locaKeys.fontColor,
    afterInsert: colorPicker,
    openWith: '[color=%colorCode%]',
    closeWith: '[/color]',
    placeHolder: locaKeys.textPlaceHolder,
    className: 'fontColor'
  }, {
    name: locaKeys.fontSize,
    className: 'fontSize',
    dropMenu: fontSizeArray
  }, {
    name: locaKeys.list,
    openWith: '[*]',
    multiline: true,
    openBlockWith: '[list]\n',
    closeBlockWith: '\n[/list]',
    className: 'list',
    afterMultiInsert: multiInsertSelectionFix,
    placeHolder: locaKeys.textPlaceHolder
  }, {
    name: locaKeys.coordinates,
    openWith: '[coordinates]',
    closeWith: '[/coordinates]',
    placeHolder: locaKeys.coordinatePlaceHolder,
    className: 'coordinates'
  }] : [{
    name: locaKeys.bold,
    key: 'B',
    openWith: '[b]',
    closeWith: '[/b]',
    className: 'bold'
  }, {
    name: locaKeys.italic,
    key: 'I',
    openWith: '[i]',
    closeWith: '[/i]',
    className: 'italic'
  }, {
    name: locaKeys.fontColor,
    afterInsert: colorPicker,
    openWith: '[color=%colorCode%]',
    closeWith: '[/color]',
    placeHolder: locaKeys.textPlaceHolder,
    className: 'fontColor'
  }, {
    name: locaKeys.fontSize,
    className: 'fontSize',
    dropMenu: fontSizeArray
  }, {
    name: locaKeys.list,
    openWith: '[*]',
    multiline: true,
    openBlockWith: '[list]\n',
    closeBlockWith: '\n[/list]',
    className: 'list',
    afterMultiInsert: multiInsertSelectionFix,
    placeHolder: locaKeys.textPlaceHolder
  }, {
    name: locaKeys.link,
    key: 'L',
    openWith: '[url=[![' + locaKeys.link + ':!:http://]!]]',
    closeWith: '[/url]',
    placeHolder: locaKeys.textPlaceHolder,
    className: 'link'
  }, {
    name: locaKeys.coordinates,
    openWith: '[coordinates]',
    closeWith: '[/coordinates]',
    placeHolder: locaKeys.coordinatePlaceHolder,
    className: 'coordinates'
  }];
  var markupSetAdvanced = lite ? [{
    name: locaKeys.underline,
    key: 'U',
    openWith: '[u]',
    closeWith: '[/u]',
    className: 'underline'
  }, {
    name: locaKeys.stroke,
    key: 'S',
    openWith: '[s]',
    closeWith: '[/s]',
    className: 'strikeThrough'
  }, {
    name: locaKeys.sub,
    openWith: '[sub]',
    closeWith: '[/sub]',
    className: 'sub'
  }, {
    name: locaKeys.sup,
    openWith: '[sup]',
    closeWith: '[/sup]',
    className: 'sup'
  }, {
    separator: '-'
  }, {
    name: locaKeys.item,
    className: 'item',
    dropMenu: itemDropdownArray
  }, {
    name: locaKeys.player,
    openWith: '[player]',
    closeWith: '[/player]',
    placeHolder: locaKeys.playerPlaceHolder,
    className: 'player'
  }, {
    separator: '-'
  }, {
    name: locaKeys.alignLeft,
    openWith: '[align=left]',
    closeWith: '[/align]',
    className: 'leftAlign'
  }, {
    name: locaKeys.alignCenter,
    openWith: '[align=center]',
    closeWith: '[/align]',
    className: 'centerAlign'
  }, {
    name: locaKeys.alignRight,
    openWith: '[align=right]',
    closeWith: '[/align]',
    className: 'rightAlign'
  }, {
    name: locaKeys.alignJustify,
    openWith: '[align=justify]',
    closeWith: '[/align]',
    className: 'justifyAlign'
  }, {
    separator: '-'
  }, {
    name: locaKeys.code,
    openWith: '[code]',
    closeWith: '[/code]',
    className: 'code'
  }, {
    separator: '-'
  }, {
    name: locaKeys.email,
    key: 'E',
    openWith: '[email=[![' + locaKeys.email + ':!:]!]]',
    closeWith: '[/email]',
    placeHolder: locaKeys.textPlaceHolder,
    className: 'email'
  }, {
    name: locaKeys.preview,
    className: 'preview',
    call: 'preview'
  }] : [{
    name: locaKeys.underline,
    key: 'U',
    openWith: '[u]',
    closeWith: '[/u]',
    className: 'underline'
  }, {
    name: locaKeys.stroke,
    key: 'S',
    openWith: '[s]',
    closeWith: '[/s]',
    className: 'strikeThrough'
  }, {
    name: locaKeys.sub,
    openWith: '[sub]',
    closeWith: '[/sub]',
    className: 'sub'
  }, {
    name: locaKeys.sup,
    openWith: '[sup]',
    closeWith: '[/sup]',
    className: 'sup'
  }, {
    name: locaKeys.backgroundColor,
    afterInsert: colorPicker,
    openWith: '[background color=%colorCode%]',
    closeWith: '[/background]',
    placeHolder: locaKeys.textPlaceHolder,
    className: 'backgroundColor'
  }, {
    name: locaKeys.backgroundImage,
    afterInsert: backgroundImage,
    openWith: '[background image=%image%]',
    closeWith: '[/background]',
    placeHolder: locaKeys.textPlaceHolder,
    className: 'backgroundImage'
  }, {
    separator: '-'
  }, {
    name: locaKeys.item,
    className: 'item',
    dropMenu: itemDropdownArray
  }, {
    name: locaKeys.player,
    openWith: '[player]',
    closeWith: '[/player]',
    placeHolder: locaKeys.playerPlaceHolder,
    className: 'player'
  }, {
    name: locaKeys.tooltip,
    openWith: '[tooltip position="top" text="[![Tooltip Text:!:Tooltip Text]!]"]',
    closeWith: '[/tooltip]',
    placeHolder: locaKeys.textPlaceHolder,
    className: 'tooltip'
  }, {
    separator: '-'
  }, {
    name: locaKeys.alignLeft,
    openWith: '[align=left]',
    closeWith: '[/align]',
    className: 'leftAlign'
  }, {
    name: locaKeys.alignCenter,
    openWith: '[align=center]',
    closeWith: '[/align]',
    className: 'centerAlign'
  }, {
    name: locaKeys.alignRight,
    openWith: '[align=right]',
    closeWith: '[/align]',
    className: 'rightAlign'
  }, {
    name: locaKeys.alignJustify,
    openWith: '[align=justify]',
    closeWith: '[/align]',
    className: 'justifyAlign'
  }, {
    separator: '-'
  }, {
    name: locaKeys.block,
    openWith: '[p]',
    closeWith: '[/p]',
    className: 'block'
  }, {
    name: locaKeys.code,
    openWith: '[code]',
    closeWith: '[/code]',
    className: 'code'
  }, {
    name: locaKeys.spoiler,
    openWith: '[spoiler]',
    closeWith: '[/spoiler]',
    className: 'spoiler'
  }, {
    separator: '-'
  }, {
    name: locaKeys.hr,
    openWith: '[hr]',
    className: 'hr'
  }, {
    separator: '-'
  }, {
    name: locaKeys.picture,
    key: 'Z',
    replaceWith: '[img][![' + locaKeys.picture + ':!:http://]!][/img]',
    className: 'picture'
  }, {
    name: locaKeys.email,
    key: 'E',
    openWith: '[email=[![' + locaKeys.email + ':!:]!]]',
    closeWith: '[/email]',
    placeHolder: locaKeys.textPlaceHolder,
    className: 'email'
  }, {
    name: locaKeys.preview,
    className: 'preview',
    call: 'preview'
  }];

  if (!imagesAllowed) {
    $.each(markupSetAdvanced, function (index) {
      if (this.className == 'picture' || this.className == 'backgroundImage') {
        markupSetAdvanced.splice(index, 1);
      }
    });
  }

  if (isMobile) {
    // dont show colorpickers on ipad
    $.each(markupSetBasic, function (index) {
      if (this.className == 'fontColor' || this.className == 'backgroundColor') {
        markupSetBasic.splice(index, 1);
      }
    });
    $.each(markupSetAdvanced, function (index) {
      if (this.className == 'fontColor' || this.className == 'backgroundColor') {
        markupSetAdvanced.splice(index, 1);
      }
    });
  }

  var editorSettings = {
    onShiftEnter: {
      keepDefault: false,
      replaceWith: '\n'
    },
    onCtrlEnter: {
      keepDefault: false,
      openWith: '\n[p]',
      closeWith: '[/p]'
    },
    onTab: {
      keepDefault: false,
      replaceWith: '\t'
    },
    markupSet: [markupSetBasic, markupSetAdvanced],
    resizeHandle: false,
    previewParserPath: bbcodePreviewUrl + "&imgAllowed=" + (imagesAllowed ? 1 : 0),
    previewAutoRefresh: true,
    previewParserVar: 'text',
    previewInElement: $('<div class="miu_preview_container"></div>'),
    afterInsert: function (e) {
      $(e.textarea).trigger('keyup');
    }
  };
  $.colorpicker.regional['custom'] = locaKeys.colorPicker;
  $textareas.each(function () {
    var $this = $(this);
    $this.markItUp(editorSettings) // create colorpicker
    .after($('<input type="hidden" class="colorpicker"/>').colorpicker({
      color: '#000000',
      colorFormat: "#HEX",
      hsv: false,
      parts: 'popup',
      regional: 'custom',
      showCancelButton: false
    })); // The preview element needs to be inserted after creation of editor to be in the right place

    editorSettings.previewInElement.insertAfter($this); // preview action as link and not as set button

    $('.miu_advanced .preview').hide(); // create a footer for char count and preview link

    var $miuFooter = $('<div class="miu_footer clearfix"></div>');
    $miuFooter.append('<a role="button" class="fright txt_link btn_blue preview_link">' + locaKeys.preview + '</a>').append('<span class="fleft"><span class="cnt_chars">' + maxChars + '</span> ' + locaKeys.charsLeft + '</span>');
    $miuFooter.insertAfter($this);
    $this.on('keyup.bbCodeEditor', function () {
      if ($this.val().length > maxChars) {
        $this.val($this.val().substr(0, maxChars));
      }

      $this.closest('.markItUpContainer').find('.cnt_chars').html(maxChars - $this.val().length);
    });
    $('.miu_preview_container').hide();
    $('.preview_link').on('click.bbCodeEditor', function () {
      editorSettings.previewInElement.insertAfter($(event.target).closest('.markItUpContainer').find('.miu_footer'));
      $(event.target).closest('.markItUpContainer').find('.miu_preview_container').show();
      $(event.target).closest('.markItUpContainer').find('.preview').click();
    });

    if (isMobile) {
      $this.siblings(".markItUpHeader").find("a").attr('title', '');
      $this.siblings(".markItUpHeader").find("li:not(.markItUpDropMenu) a").bind('mouseup', function () {
        // open keyboard again
        $this.focus();
      });
    } else {
      $this.siblings(".markItUpHeader").find("ul ul a").attr('title', '');
    }

    if ($('#backgroundImagePicker').length == 0) {
      $("body").append($('<div id="backgroundImagePicker" style="display: none;"><table>' + '<tr><td>' + locaKeys.backgroundImage + ':</td><td><input type="text" class="url"/></td></tr>' + '<tr><td>' + locaKeys.backgroundImagePicker.repeatX + ':</td><td><input type="checkbox" class="repeatX"/></td></tr>' + '<tr><td>' + locaKeys.backgroundImagePicker.repeatY + ':</td><td><input type="checkbox" class="repeatY"/></td></tr>' + '</table>' + '<div><a href="javascript:void(0);" class="btn_blue">' + locaKeys.backgroundImagePicker.ok + '</a></div>' + '</div>'));
      $('#backgroundImagePicker').find('a').bind('click', function () {
        $('#backgroundImagePicker').dialog('close');
      });
    }
  });
  /* *** adding additional event listeners *** */

  $('.toggle_miu_advanced').on('click.bbCodeEditor', function () {
    if ($('.miu_advanced').is(':visible')) {
      $('.miu_advanced').hide();
      $(this).removeClass('hide_miu_advanced').addClass('show_miu_advanced');
    } else {
      $('.miu_advanced').show();
      $(this).removeClass('show_miu_advanced').addClass('hide_miu_advanced');
    }
  });
}

function initBBCodes() {
  $(document).undelegate('.spoilerHeader', 'click').delegate('.spoilerHeader', 'click', function () {
    var thisObj = this;
    $(this).next('.spoilerText').toggle(0, function () {
      Tipped.refresh(thisObj);
    });
  });
}
ogame.buddies = {
  initBuddyList: function () {
    $.tablesorter.addParser({
      id: 'coordinates',
      is: function (s) {
        return false;
      },
      format: function (s) {
        // format your data for normalization
        var res = $.trim(s).slice(1, -1).split(':');
        var result = res[0] * 16384 + res[1] * 32 + res[2] * 1;
        return result;
      },
      type: 'numeric'
    });
    $.tablesorter.addParser({
      id: "commaDigit",
      is: function (s, table) {
        var c = table.config;
        return jQuery.tablesorter.isDigit(s.replace(/\./g, ""), c);
      },
      format: function (s) {
        return jQuery.tablesorter.formatFloat(s.replace(/\./g, ""));
      },
      type: "numeric"
    });
    $('.content_table').tablesorter({
      widgets: ['zebra'],
      headers: {
        0: {
          sorter: false
        },
        2: {
          sorter: 'commaDigit'
        },
        5: {
          sorter: 'coordinates'
        },
        6: {
          sorter: false
        }
      },
      cssHeader: 'ct_sortable_title',
      cssAsc: 'ct_sort_asc',
      cssDesc: 'ct_sort_desc'
    });
    $('#buddylist').off('.buddyList');
    $('#buddylist').on('click.buddyList', '.deleteBuddy', deleteBuddy);
    $('#chatContent').on('click.chat_info', '.deleteBuddy', deleteBuddy);
  },

  /*
  * Initializes that is needed for the buddies page
  * @returns {undefined}
  */
  initBuddies: function () {
    // adding hover style for tables
    $('.zebra tr').mouseover(function () {
      $(this).addClass("over");
    }).mouseout(function () {
      $(this).removeClass("over");
    }); // toggles the buddy requests section

    $('.js_accordion').accordion({
      collapsible: true,
      heightStyle: 'content'
    }); // for buddy requests

    $('.js_tabs').tabs();
    $(".js_scrollbar").mCustomScrollbar({
      theme: "ogame"
    });
  }
};

function initInviteCodes() {
  $("#buddyinvite .code").click(function () {
    $(this).selectText();
  });
}

function incrementBuddyCount() {
  var buddyCount = parseInt($("#buddyCount").text()) + 1;
  var requestCount = parseInt($("#newRequestCount").text()) - 1;
  updateRequestCount(requestCount);
  updateBuddyCount(buddyCount);
}

function updateRequestCount(count) {
  $("#newRequestCount").html(count);
}

function updateBuddyCount(count) {
  $("#buddyCount").html(count);
}

function reportMessage(id, fromPlayer, toPlayer) {
  $.ajax({
    type: 'POST',
    url: '?page=reportSpam_ajax',
    dataType: 'json',
    data: {
      messageId: id,
      from: fromPlayer,
      to: toPlayer
    },
    success: function (data) {
      fadeBox(data.message, !data.result);
    },
    error: function () {}
  });
}

function reportAllyMessage(id, fromPlayer) {
  $.ajax({
    type: 'POST',
    url: '?page=reportSpam_ajax',
    dataType: 'json',
    data: {
      messageId: id,
      from: fromPlayer
    },
    success: function (data) {
      fadeBox(data.message, !data.result);
    },
    error: function () {}
  });
}

var elem, messageId, senderId;

function reportAllyRoundMessage(_elem, _messageId, _senderId, _question) {
  elem = _elem;
  messageId = _messageId;
  senderId = _senderId;
  errorBoxDecision(LocalizationStrings.attention, _question, LocalizationStrings.yes, LocalizationStrings.no, reportMessageCallback);
}

function reportMessageCallback() {
  elem.hide();
  reportAllyMessage(messageId, senderId);
}

function requestsReady() {
  $(document).on('click', '.acceptRequest', acceptRequest);
  $(document).on('click', '.rejectRequest', rejectRequest);
  $(document).on('click', '.cancelRequest', cancelRequest);
  $(document).on('click', '.reportRequest', reportRequest);
}

function initBuddyRequestForm() {
  $(".overlayDiv .buddyRequest form").unbind('submit').bind('submit', function (e) {
    var $thisObj = $(this);
    e.preventDefault();
    $.post($thisObj.attr('action'), $thisObj.serialize(), "html").done(function (data) {
      document.open();
      document.write(data);
      document.close();
    }).fail(function () {
      var currentlocation = window.location.href;
      window.location = currentlocation.substring(0, currentlocation.indexOf('?')) + '?page=ingame&component=buddies';
    }).always(function () {
      return false;
    });
  });
  $('.buddyRequest').each(function () {
    var $thisObj = $(this);
    var $overlayTitle = $thisObj.parents('.ui-dialog').find('.ui-dialog-title');

    if (!$overlayTitle.find('span.buddyName').length) {
      $overlayTitle.append($(document.createElement('span')).addClass('buddyName').text(' (' + $thisObj.attr('data-title') + ')'));
    }
  });
}
function initBuyResourceOverlay(isLastBuildingSlot, showLastBuildingSlotWarning, localization) {
  $('.close_buyResourceOverlay').on('click', function () {
    $('#buyResourceOverlayBody').closest('.ui-dialog').find('.ui-icon-closethick').click();
  });

  var sendStuff = function () {
    if (isLastBuildingSlot && showLastBuildingSlotWarning) {
      errorBoxDecision(localization.allNetworkAttention, localization.slotWarning, localization.allYes, localization.allNo, sendDMAcceptanceForm);
    } else {
      sendDMAcceptanceForm();
    }
  };

  $('#premiumConfirmButton').on('click', function (event) {
    event.preventDefault();
    sendStuff();
  });
  $(document).on("ajaxShowOverlay", function (event) {
    $('#premiumConfirmButton').focus();
  });
  $('#premiumConfirmButton').on('keyup', function (event) {
    event.stopPropagation();

    if (event.keyCode == 13) {
      sendStuff();
    }
  });
}

function sendDMAcceptanceForm() {
  $('#premiumAcceptForm').submit();
}

function openBuyResourceDialog(buyResourceDialogLink) {
  openOverlay(buyResourceDialogLink, {
    'class': "buyResourceDialog"
  });
}

function abortBuyResource() {
  $('.overlaydiv .abort_button').on('click', function () {
    $('.overlaydiv').dialog('close');
  });
}

function initBuyResources() {
  refreshBars('bar_container', 'filllevel_bar');
  $('.fill_resource').on('click', '.fillup', onChangeToPremium).on('click', '.btn_premium', submitBuyRequest);
  $('.fillup').on('keyup', '.resource_name input', handleInputForResourcePackages);
  initThousandSeparator();
}

function onChangeToPremium(e) {
  var $btn = $(e.currentTarget).find('.btn_blue'),
      $fillup = $btn.closest('.fillup'),
      $premiumBar = $btn.closest('.fill_resource_ctn').find('.premium_bar'); // reset

  $('.fillup').removeClass('premium').parent().find('.current_stock span').removeClass('premium_txt').each(function () {
    // color of the current amount of the selected resource
    var $this = $(this);
    $this.text($this.data('currentAmount')); // reset stock text to current amount
  });
  $('.fill_resource .btn_premium').html(loca.fillUpResource).attr('class', 'btn_blue');
  $('.premium_bar').css('width', '0%').data('premiumPercent', 0); // do not highlight disabled buttons

  if ($btn.attr('disabled') === 'disabled') {
    return;
  }

  updateBuyTextAndActivatePackage($btn, $fillup);
  $fillup.parent().find('.current_stock span').addClass('premium_txt') // color of the current amount of the selected resource
  .text($btn.data('newValueFormatted')); // set stock text to the amount the player will have after buying the package

  $premiumBar.data('premiumPercent', $btn.data('premiumPercent'));
  changeTooltip($premiumBar, '+' + tsdpkt(Math.floor($btn.data('premiumValue'))));
  refreshBars('bar_container', 'filllevel_bar', 'premium_bar');
}

function submitBuyRequest(event, confirmedProductionLoweredWarning) {
  let $btn = $(event.currentTarget),
      userInputAmounts = {},
      changed = false;

  if ($('.buy_resources.content_inner').hasClass('productionBasedPackages') && $btn.data('sufficientDarkMatter') === 0) {
    redirectBuyPremium();
    return;
  }

  if (typeof confirmedProductionLoweredWarning === 'undefined') {
    confirmedProductionLoweredWarning = false;
  } else {
    $btn = confirmedProductionLoweredWarning;
    confirmedProductionLoweredWarning = true;
  }

  let isCapped = parseInt($btn.data('isCapped')),
      productionLowered = parseInt($btn.data('productionLowered'));
  $btn.parents('.fillup').find('.resource_box').each(function () {
    let $elem = $(this);
    let resourceName = $elem.find('.resource_name > input').data('resourceType');
    let $input = $elem.find('.resource_name input');
    userInputAmounts[resourceName] = parseInt($input.val().split(LocalizationStrings.thousandSeperator).join(''));
    changed = changed || $input.data('original') !== userInputAmounts[resourceName];
  });

  if (changed === false) {
    userInputAmounts = {};
  }

  if (productionLowered && confirmedProductionLoweredWarning !== true) {
    errorBoxDecision(loca.buyNow, loca.warnProductionLowered, loca.yes, loca.no, function () {
      submitBuyRequest(event, $btn);
    });
    return;
  }

  if (isCapped === 1 && changed === false) {
    // this can only happen for production based packages
    errorBoxDecision(loca.buyNow, loca.warnCapped, loca.yes, loca.no, function () {
      reallySubmitBuyRequest($btn);
    });
    return;
  }

  reallySubmitBuyRequest($btn, userInputAmounts);
}

function reallySubmitBuyRequest($btn, userInputAmounts) {
  let costs = $btn.data('premiumCosts'),
      itemuuid = $btn.data('itemuuid');
  $.ajax({
    url: buyResourcesLink,
    data: {
      itemUuid: itemuuid,
      costs: costs,
      _token: token,
      userInputAmounts: userInputAmounts
    },
    type: "POST",
    dataType: "json",
    success: function (dataFromBuy) {
      token = dataFromBuy.newAjaxToken;

      if (dataFromBuy.status === 'failure') {
        let error = dataFromBuy.errors[0] || undefined;

        if (error && error.message) {
          fadeBox(error.message, true);
        } else {
          fadeBox(loca["error"], true);
        }

        return;
      } else {
        window.location.reload();
      }
    },
    error: function () {}
  });
}

function handleInputForResourcePackages(e) {
  let regex;

  if (LocalizationStrings.thousandSeperator === '.') {
    regex = new RegExp('\\' + LocalizationStrings.thousandSeperator, 'g');
  } else {
    regex = new RegExp(LocalizationStrings.thousandSeperator, 'g');
  }

  let $input = $(e.target),
      val = parseInt($input.val().replace(regex, '')) || 0,
      original = $input.data('original'),
      modified = false;

  if (e.which !== 75 && e.which >= 65 && e.which <= 90) {
    // prevent a-z. "k" is handled before.
    val = 0;
    modified = true;
  }

  if (val > original) {
    val = original;
    modified = true;
  }

  if (modified === true) {
    $input.val(tsdpkt(val));
  }

  updateCostsAfterUserModification($input);
}

function updateCostsAfterUserModification($clickedInput) {
  let $package = $clickedInput.parents('.fillup'),
      $button = $package.find('.btn_wrap>a'),
      $priceDisplay = $package.find('.premium_txt'),
      $resourceBoxes = $package.find('.resource_box'),
      newPrice = 0,
      darkMatter = $('.buy_resources').data('darkMatter');
  $resourceBoxes.each(function () {
    let $input = $(this).find('.resource_name input');
    let currentInputValue = parseInt($input.val().split(LocalizationStrings.thousandSeperator).join('')) || 0;
    let currentPrice = 0;

    if ($input.data('original') > 0) {
      currentPrice = Math.round($input.data('originalPrice') * currentInputValue / $input.data('dailyProduction'));
    }

    if (currentInputValue > 0 && currentPrice < $button.data('minPremiumCosts')) {
      currentPrice = $button.data('minPremiumCosts');
    }

    newPrice += currentPrice;
  });
  $priceDisplay.html(tsdpkt(newPrice));
  $button.data('premiumCosts', newPrice);

  if (darkMatter < newPrice) {
    $priceDisplay.addClass('overmark');
    $button.data('sufficientDarkMatter', 0);
  } else {
    $priceDisplay.removeClass('overmark');
    $button.data('sufficientDarkMatter', 1);
  } // switch text and set to premium


  updateBuyTextAndActivatePackage($button, $package);
}

function updatePercentageBasedPackages(dataFromBuy, myPackageType, $myButton, $currentPackage, $largePackageNumber) {
  if (!dataFromBuy['isBuyable']) {
    $myButton.attr('disabled', 'disabled');
    $currentPackage.attr('disabled', 'disabled');
    $currentPackage.addClass('disabled');
  }

  $myButton.data('premiumCosts', dataFromBuy['costs']);
  $myButton.data('premiumValue', dataFromBuy['resources']);
  $myButton.data('newValueFormatted', dataFromBuy['newValueFormatted']);

  if (dataFromBuy['displayCosts']) {
    $currentPackage.find('.fillup_cost .premium_txt').html(dataFromBuy['formattedCosts']);
  } else {
    $currentPackage.find('.fillup_cost').addClass('overmark').html('-'); // also kills span with .premium_txt
  }

  if (myPackageType === $largePackageNumber) {
    var buyButtonClass = $myButton.data('buyButtonClass');

    if (!dataFromBuy['isCapped'] && $currentPackage.children("." + buyButtonClass).length) {
      // package was capped but isn't capped anymore
      $currentPackage.children("." + buyButtonClass).removeClass(buyButtonClass).addClass('fillup_100percent');
      $currentPackage.children('.fillup_txt').html(loca.fillUpTo);
    }
  }
}

function updateProductionBasedPackages(collectionData, myPackageType, $myButton, $currentPackage, darkMatter) {
  if (!collectionData['isBuyable']) {
    $myButton.attr('disabled', 'disabled');
    $currentPackage.attr('disabled', 'disabled');
    $currentPackage.addClass('disabled');
    $currentPackage.find('.fillup_cost').addClass('overmark').html('-');
  } else if (darkMatter < collectionData['displayCosts']) {
    $currentPackage.find('.fillup_cost .premium_txt').addClass('overmark').html(tsdpkt(collectionData['displayCosts']));
    $currentPackage.find('.btn_wrap>a').data('sufficientDarkMatter', 0);
  } else {
    $currentPackage.find('.fillup_cost .premium_txt').html(tsdpkt(collectionData['displayCosts']));
  }

  $myButton.data('premiumCosts', collectionData['displayCosts']);
  $currentPackage.find('.resource_box').each(function () {
    let $box = $(this);

    for (let resourceName in collectionData['amounts']) {
      if ($box.find('.resource_img').hasClass(resourceName)) {
        let $amountDisplay = $box.find('.resource_name');
        $amountDisplay.find('input').val(collectionData['amounts'][resourceName]).data('original', collectionData['amounts'][resourceName]);

        if (collectionData['isResourceCapped'][resourceName]) {
          $amountDisplay.addClass('overmark');
        }

        if (collectionData['isCapped']) {
          $myButton.data('isCapped', 1);
        } else {
          $myButton.data('isCapped', 0);
        }
      }
    }
  });
}

function updateBuyTextAndActivatePackage($buttonElem, $package) {
  $buttonElem.html(!$('.buy_resources.content_inner').hasClass('productionBasedPackages') || $buttonElem.data('sufficientDarkMatter') ? loca.buyNow : loca.getDM).attr('class', 'btn_premium small');
  $package.addClass('premium');
}
/**/
ogame.chat = {
  socket: null,
  connected: false,
  connecting: false,
  timeout: null,
  retryInterval: 5000,
  playerId: null,
  associationId: null,
  data: {
    association: {}
  },
  playernames: {},
  playerList: null,
  isLoadingPlayerList: false,
  playerListSelector: new Array(),

  /**
   * Initialize connection to the socket
   */
  initConnection: function () {
    var $this = ogame.chat; // if its connected or on connecting do nothing

    if ($this.connecting || $this.connected || $this.isMobile) {
      if (this.socket) {
        $this.socket.disconnect();
      }
    }

    $this.connecting = true; // try to connect

    try {
      $this.socket = io.connect(":" + nodePort + "/chat", nodeParams);
      $this.socket.on('connect', function () {
        clearTimeout(this.timeout); // send session for authorize... on success set it to connected else disconnect socket

        $this.socket.emit("authorize", session, function (success) {
          $this.connecting = false;

          if (success) {
            $this.connected = true;
          } else {
            $this.socket.disconnect();
          }
        });
      });
      $this.socket.on("chat", function (data) {
        $this.messageReceived(data);
      });
      $this.socket.on('disconnect', function () {
        $this.connected = false;
        $this.connecting = false; //$this.retryConnection();
      });
    } catch (e) {
      // TODO: Ursache fuer doppelten Aufruf auf der Chat-Seite finden
      $this.connecting = false; // wichtig, damit 2. Aufruf durch geht
    }
  },

  /**
   * initialize connection and chatlog
   */
  initialize: function () {
    if (typeof nodeUrl === 'undefined') {
      return;
    }

    var $this = ogame.chat;
    loadScript(nodeUrl, $this.initConnection);
    $(".new_msg_count[data-playerid]").each(function () {
      $this.saveMessageCounter($(this).data('new-messages'), $(this).data('playerid'));
    });
    this.updateTotalNewChatCounter(); // Aufrufe von Chats ueber die Spielerliste

    $('.js_playerlist').on('click', '.playerlist_item', function () {
      var nothing2load = $(this).hasClass('nothingThere');

      if (!nothing2load) {
        var msgid = $(this).data('msgid');

        if (msgid) {
          $this.loadChatLogWithPlayer(this, msgid);
        } else {
          $this.loadChatLogWithPlayer(this);
        }
      }
    }); // Aufruf von Alli/Kolaitions-Chats ueber die Spielerliste

    $('.js_playerlist').on('click', '.openAssociationChat', function () {
      var msgid = $(this).data('msgid');

      if (msgid) {
        $this.loadChatLogWithAssociation(this, msgid);
      } else {
        $this.loadChatLogWithAssociation(this);
      }
    }); // Aufrufe von Chats ueber die Chatliste

    $('#chatMsgList').on('click', '.msg', function () {
      var msgPlayerId = $(this).data('playerid');
      var msgAssociationId = $(this).data('associationid');

      if (msgPlayerId !== undefined && msgPlayerId > 0) {
        $this.saveMessageCounter(0, msgPlayerId);
        ogame.messagemarker.setPartnerId(msgPlayerId);
        ogame.messagemarker.updateNewMarker();
        ogame.chat.updateTotalNewChatCounter();
        var msgid = $('.playerlist .playerlist_item[data-playerId=' + msgPlayerId + ']').data('msgid');

        if (msgid) {
          $this.loadChatLogWithPlayer(this, msgid);
        } else {
          $this.loadChatLogWithPlayer(this);
        }
      } else {
        var msgid = $('.playerlist .playerlist_item[data-associationId=' + msgAssociationId + ']').data('msgid');
        $this.saveMessageCounterAssociation(0, msgAssociationId);

        if (msgid) {
          $this.loadChatLogWithAssociation(this, msgid);
        } else {
          $this.loadChatLogWithAssociation(this);
        }
      }
    });
    $('.chat').on('click', '.sys_msg', function (event) {
      var playerIdOfclickedChat = $(this).data('foreign-player-id');
      var associationIdOfclickedChat = $(this).data('foreign-association-id');
      var ajaxData = {
        playerId: playerIdOfclickedChat,
        associationId: associationIdOfclickedChat,
        ajax: 1
      };
      $.ajax({
        url: chatUrlLoadMoreMessages,
        type: 'POST',
        dataType: 'html',
        data: ajaxData,
        success: function (data) {
          //Finding the right chat window
          $('.chat').each(function (index, element) {
            if (playerIdOfclickedChat !== undefined && playerIdOfclickedChat == $(element).data('foreign-player-id')) {
              $(element).html(data); //Replace the content of the chat-window with the new data from the backend.
            } else if (associationIdOfclickedChat !== undefined && associationIdOfclickedChat == $(element).data('foreign-association-id')) {
              $(element).html(data); //Replace the content of the chat-window with the new data from the backend.
            }
          });
        },
        error: function (jqXHR, textStatus, errorThrown) {}
      });
    });
    $('body').on('click', '.js_openChat', function () {
      $this.loadChatLogWithPlayer(this);
    }); //maximize Chat set

    if (typeof $.cookie('maximizeId') == "string" || typeof $.cookie('maximizeId') == "number") {
      $('#chatMsgList .msg[data-playerid="' + $.cookie('maximizeId') + '"]').trigger('click');
      $.cookie('maximizeId', null);
    }
  },

  /**
   * gets the total new chat counter.
   * 
   * @returns {Number}
   */
  getTotalNewChatCounter: function () {
    return ogame.messagecounter.sumNewChatMessages;
  },

  /**
   * calc total new chat counter and updates it.
   * 
   * @returns {Number} total new chat counter
   */
  updateTotalNewChatCounter: function () {
    var sumNewChatMessages = 0;

    if ($(".msg .new_msg_count").length > 0) {
      $(".msg .new_msg_count").each(function () {
        sumNewChatMessages += Number($(this).data('new-messages'));
      });
    } else if ($("#chatBarPlayerList .new_msg_count").length > 0) {
      $("#chatBarPlayerList .new_msg_count").each(function () {
        sumNewChatMessages += Number($(this).data('new-messages'));
      });
    }

    ogame.messagecounter.initialize(ogame.messagecounter.type_chat, ogame.chat.playerId);

    if (ogame.messagecounter.sumNewChatMessages !== sumNewChatMessages) {
      ogame.messagecounter.initChatCounter(sumNewChatMessages);
      ogame.messagecounter.sumNewChatMessages = sumNewChatMessages;
      ogame.messagecounter.update();
    }

    return sumNewChatMessages;
  },

  /**
   * retry to initialize Connection
   */
  retryConnection: function () {
    var $this = ogame.chat;
    setTimeout(function () {
      $this.initConnection();
    }, 5000);
  },

  /**
   * sending the message
   * 
   * @param {number} playerId >> id of the chat partner
   * @param {number} associationId >> id of the association (ally or coalition)
   * @param {string} messageText >> text to send
   * 
   */
  sendMessage: function (playerId, associationId, messageText, refData) {
    var $this = ogame.chat;

    if ($.trim(messageText).length == 0) {
      showError("TEXT_EMPTY");
      return;
    }

    var ajaxData;

    if (playerId > 0) {
      ajaxData = {
        playerId: playerId,
        text: messageText,
        mode: 1,
        ajax: 1,
        _token: window.ajaxChatToken
      };
    } else {
      ajaxData = {
        associationId: associationId,
        text: messageText,
        mode: 3,
        ajax: 1,
        _token: window.ajaxChatToken
      };
    }

    if (typeof refData !== "undefined" && typeof refData.id !== "undefined") {
      ajaxData.msg2reply = refData.id;
    }

    function sendMessageViaAjax() {
      // send ajax Request
      $.ajax({
        url: chatUrl,
        type: 'POST',
        dataType: 'json',
        data: ajaxData,
        success: function (data) {
          addChatMessage(data);
          window.ajaxChatToken = data.newToken;
        },
        error: function (jqXHR, textStatus, errorThrown) {}
      });
    }

    function messageSent(data) {
      if (typeof data.refAuthor !== "undefined" && typeof data.refContent !== "undefined") {
        $refData = {
          'author': data.refAuthor,
          'text': data.refContent
        };
      } else {
        $refData = 0;
      }

      if (data.targetId !== undefined) {
        $this.addChatItem(data.targetId, 0, data.text, data.id, false, $refData, data.date);
      } else {
        $this.addChatItem(playerId, data.targetAssociationId, data.text, data.id, false, $refData, data.date);
      }
    }

    function showError(errorText) {
      if (chatLoca[errorText] !== undefined) {
        errorBoxNotify(LocalizationStrings.error, chatLoca[errorText], LocalizationStrings.ok);
      } else {
        errorBoxNotify(LocalizationStrings.error, errorText, LocalizationStrings.ok);
      }
    }

    function addChatMessage(result) {
      switch (result.status) {
        case 'NOT_AUTHORIZED':
          // do not show this error, try to send with ajax instead
          sendMessageViaAjax();
          break;

        case 'OK':
          messageSent(result);
          ogame.chat.cleanupUrl();
          break;

        default:
          showError(result.status);
      }
    }

    sendMessageViaAjax();
  },

  /**
   * get new message in chat
   * 
   * @param {object} data >> message data
   * 
   */
  messageReceived: function (data) {
    var $this = ogame.chat;

    if (typeof data.refAuthor !== "undefined" && typeof data.refText !== "undefined") {
      $refData = {
        'author': data.refAuhtor,
        'text': data.refText
      };
    } else {
      $refData = 0;
    } // for the association chats we need to get the player names from the backend. 


    if (data.senderName !== undefined && data.senderId !== undefined) {
      //Save names, you get from the backend for later use in addChatItem
      $this.playernames[data.senderId] = data.senderName;
    }

    if ($(".chat_bar_list").length) {
      //only if chat bar is active
      if (data.associationId !== undefined && data.associationId > 0) {
        if ($this.data.association[data.associationId] === undefined) {
          $this.loadChatLogWithAssociation(data.associationId, null, function () {
            $this.addChatItem(data.senderId, data.associationId, data.text, data.id, true, $refData, data.date);
          }, false);
        } else {
          $this.addChatItem(data.senderId, data.associationId, data.text, data.id, true, $refData, data.date);
        }
      } else {
        if ($this.data[data.senderId] === undefined) {
          $this.loadChatLogWithPlayer(data.senderId, null, function () {
            $this.addChatItem(data.senderId, 0, data.text, data.id, true, $refData, data.date);
          }, false);
        } else {
          $this.addChatItem(data.senderId, 0, data.text, data.id, true, $refData, data.date);
        }
      }
    }

    if (data.associationId !== undefined && data.associationId > 0) {
      // count new mesages only if chat closed
      if ($('.chat_bar_list_item.open[data-associationid="' + data.associationId + '"]').length <= 0) {
        var newCount = $('.new_msg_count[data-associationid="' + data.associationId + '"]').data('new-messages');

        if (isNaN(newCount)) {
          newCount = 0;
        }

        newCount++;
        $this.saveMessageCounterAssociation(newCount, data.associationId);
        $this.updateTotalNewChatCounter();
      } else {
        // Set received message as read
        var ajaxData = {
          associationId: data.associationId,
          mode: 4,
          ajax: 1,
          updateUnread: 1
        };
        $.ajax({
          url: chatUrl,
          type: 'POST',
          data: ajaxData,
          success: function (data) {},
          error: function (jqXHR, textStatus, errorThrown) {}
        });
      }
    } else if (data.senderId !== undefined && data.senderId > 0) {
      ogame.messagemarker.setPartnerId(data.senderId);

      if (!$this.isOpen(data.senderId)) {
        ogame.messagecounter.initialize(ogame.messagecounter.type_chat, data.senderId);
        var newCount = parseInt(ogame.messagecounter.newChats[data.senderId]);

        if (isNaN(newCount)) {
          newCount = 0;
        }

        newCount++;
        $this.saveMessageCounter(newCount, data.senderId);
        ogame.messagemarker.updateNewMarker();
      } else {
        $this.saveMessageCounter(0, $(this).data('playerid'));
        ogame.messagemarker.updateNewMarker();
      }
    }
  },
  cleanupUrl: function () {// @todo what is the purpose?
    // since twig components always contain a & in their path I need to comment it out

    /*
    var currentUrl = window.location.href;
    var indexOfMsgid = currentUrl.indexOf('&');
      	if(indexOfMsgid > 0) {
    var paramIndex = currentUrl.indexOf('?');
    var firstPartOfUrl = currentUrl.substring(0, paramIndex);
    var newUrl = firstPartOfUrl+'?page=chat';
    	
    	window.history.pushState({}, "", newUrl);
    }
    */
  },
  saveMessageCounter: function (count, playerId) {
    if (isNaN(playerId) || playerId === 0) {
      return false;
    }

    $('.new_msg_count[data-playerid="' + playerId + '"]').data('new-messages', count);
    ogame.messagecounter.newChats[playerId] = count;
  },
  saveMessageCounterAssociation: function (count, associationId) {
    if (isNaN(associationId) || associationId === 0) {
      return false;
    }

    $('.new_msg_count[data-associationid="' + associationId + '"]').data('new-messages', count);
    $('.new_msg_count[data-associationid="' + associationId + '"]').text(count);
    ogame.messagemarker.updateNewMarker();
  },

  /**
   * proof if the chat of the player is open
   * @param {string} playerid
   * @returns {boolean}
   */
  isOpen: function (playerid) {
    var isChatOpen = false;
    var chatPartnerId = $(".chatContent").data('chatplayerid');

    if (chatPartnerId != 'undefined' && chatPartnerId == playerid) {
      isChatOpen = true;
    } else {
      $(".chat_box").each(function () {
        if ($(this).attr('data-playerid') == playerid) {
          if ($(this).css("display") == "block") {
            isChatOpen = true;
          }
        }
      });
    }

    return isChatOpen;
  },

  /**
   * Load chatlog of player and playerinfo
   * 
   * @param {mixed} element >> playerid of the other player
   * @param function callback
   * 
   */
  loadChatLogWithPlayer: function (element, msg2reply, callback, updateUnread) {
    var $this = ogame.chat;
    var foreignPlayerId;

    if (typeof updateUnread == 'undefined') {
      updateUnread = true;
    }

    if (typeof element == 'number') {
      foreignPlayerId = element;
    } else {
      foreignPlayerId = $(element).attr('data-playerId');
    }

    var ajaxData = {
      playerId: foreignPlayerId,
      mode: 2,
      ajax: 1,
      updateUnread: updateUnread ? 1 : 0
    };

    if (typeof msg2reply == 'number') {
      ajaxData.msg2reply = msg2reply;
    }

    $.ajax({
      url: chatUrl,
      type: 'POST',
      data: ajaxData,
      success: function (data) {
        data = JSON.parse(data);
        $this.data[data.playerId] = {
          playerstatus: data.playerstatus,
          playerName: data.playerName,
          playerId: data.playerId,
          chatItems: data.chatItems,
          chatItemsByDateAsc: data.chatItemsByDateAsc
        };

        if (typeof callback == 'function') {
          callback();
        } else if ($(element).parents('#chatBarPlayerList').length || $('body')[0].id != 'chat') {
          // use chat bar
          $this.showChat(data);
        } else {
          $this.showChatHistory(data);
        }

        var currentChat = $(".chat_bar_list").find("[data-playerid='" + data.playerId + "']");
        $this.updateCustomScrollbar(currentChat.find('.chat_box_ctn'));
      },
      error: function (jqXHR, textStatus, errorThrown) {}
    });
  },

  /**
   * Load chatlog of association chat
   *
   * @param {mixed} element >> associationid of the other player
   * @param function callback
   *
   */
  loadChatLogWithAssociation: function (element, msg2reply, callback, updateUnread) {
    var $this = ogame.chat;
    var associationId;

    if (typeof updateUnread == 'undefined') {
      updateUnread = true;
    }

    if (typeof element == 'number') {
      associationId = element;
    } else {
      associationId = $(element).attr('data-associationid');
    }

    var ajaxData = {
      associationId: associationId,
      mode: 4,
      ajax: 1,
      updateUnread: updateUnread ? 1 : 0
    };

    if (typeof msg2reply == 'number') {
      ajaxData.msg2reply = msg2reply;
    }

    $.ajax({
      url: chatUrl,
      type: 'POST',
      data: ajaxData,
      success: function (data) {
        data = JSON.parse(data);
        $this.data.association[data.associationId] = {
          playerstatus: data.playerstatus,
          associationName: data.associationName,
          associationId: data.associationId,
          chatItems: data.chatItems,
          chatItemsByDateAsc: data.chatItemsByDateAsc
        };

        if (typeof callback == 'function') {
          callback();
        } else if ($(element).parents('#chatBarPlayerList').length || $('body')[0].id != 'chat') {
          // use chat bar
          $this.showChat(data);
        } else {
          $this.showChatHistory(data);
        }

        var currentChat = $(".chat_bar_list").find("[data-associationid='" + data.associationId + "']");
        $this.updateCustomScrollbar(currentChat.find('.chat_box_ctn'));
      },
      error: function (jqXHR, textStatus, errorThrown) {}
    });
  },

  /**
   * This initializes the node.js chat
   * @returns {undefined}
   */
  initChat: function (playerId, isMobile) {
    ogame.chat.playerId = playerId;
    ogame.chat.isMobile = isMobile;
    ogame.chat.initPlayerlist();
    ogame.chat.initialize();
    ogame.chat.toggleVisibility();
    ogame.chat.setVisibilityState();
    ogame.chat.initMaximize();
    ogame.chat.getInMaxChat();
  },

  /**
   * get data of a specific message in dom
   * 
   * @return {object} itemData
   */
  getLastChatItemData: function () {
    var $this = ogame.chat;
    var newestChatMessage = null;
    $(".chat_box_ctn .mCustomScrollBox .mCSB_container").each(function () {
      var lastMessage = $(this).children('ul.chat').children('li:last');

      if (newestChatMessage === null || lastMessage.attr('data-chat-id') > newestChatMessage.attr('data-chat-id')) {
        newestChatMessage = lastMessage;
      }
    }); // Ugly hack to enable chatting when chatbar is disabled

    if (newestChatMessage === null) {
      $("ul.largeChat").each(function () {
        var lastMessage = $(this).children('li:last');

        if (newestChatMessage === null || lastMessage.attr('data-chat-id') > newestChatMessage.attr('data-chat-id')) {
          newestChatMessage = lastMessage;
        }
      });
    }

    if (newestChatMessage === null) return null;
    var msgDate = newestChatMessage.children('.msg_head').find('.msg_date').html();
    var msgText = newestChatMessage.find('.msg_content').html();
    var itemData = {
      'date': msgDate,
      'text': msgText
    };
    return itemData;
  },

  /**
   * Adds a chat item to a chat in the chat bar and to the Detail Chat Page ( = chatHistory)
   * if we are on that page
   *
   * @param {String} foreignPlayerId
   * @param {String} associationId
   * @param {String} msg
   * @param {int} msgId
   * @param {bool} received
   * @param $refData
   * @param srvTime
   * @return {undefined}
   */
  addChatItem: function (foreignPlayerId, associationId, msg, msgId, received, $refData, srvTime) {
    var $this = ogame.chat;
    var currentChat;

    if (associationId > 0) {
      currentChat = $(".chat_bar_list").find("[data-associationid='" + associationId + "']");
    } else {
      currentChat = $(".chat_bar_list").find("[data-playerid='" + foreignPlayerId + "']");
    }

    var chatItemData = {};
    chatItemData.date = srvTime; //will be formated later in createchatitem

    chatItemData.newClass = 'new';

    if (received) {
      // the class odd should only be added in case a message was received
      if ($this.data[foreignPlayerId] !== undefined) {
        chatItemData.playerName = $this.data[foreignPlayerId].playerName;
      } else {
        chatItemData.playerName = $this.playernames[foreignPlayerId];
      }

      chatItemData.altClass = '';
    } else {
      chatItemData.playerName = playerName;
      /* global own playerName */

      chatItemData.altClass = 'odd';
    }

    chatItemData.chatID = msgId; // this is probably some unique number

    chatItemData.chatContent = msg;

    if (typeof $refData == 'object') {
      chatItemData.refData = $refData;
    }

    if (!currentChat.length) {
      // someone new wants to talk to us || we want to talk to someone new \\
      var chatBoxContainer = $this.createChatBarContainer(foreignPlayerId);
      $this.updateChatBar(chatBoxContainer);
      currentChat = $(".chat_bar_list").find("[data-playerid='" + foreignPlayerId + "']");
    }

    var chatItem = $this.createChatItem(chatItemData);
    var lastItem = $this.getLastChatItemData(); // if message already exists

    if (lastItem !== null && (chatItemData.date != lastItem.date || chatItemData.chatContent != lastItem.text)) {
      // chatbar
      currentChat.find('.chat').append(chatItem);
      $this.updateCustomScrollbar(currentChat.find('.chat_box_ctn'));
      var chatHistory = $('.js_chatHistory');

      if (chatHistory.length && (chatHistory.data('chatplayerid') == foreignPlayerId || chatHistory.data('associationid') == associationId)) {
        //chat page
        chatHistory.find('.chat.clearfix').append(chatItem.clone());
        $this.updateCustomScrollbar($(".largeChatContainer"));
      }
    }
  },

  /** 
   * Add items to moreBox
   *
   * @param {Object} chatbarListItems - Array of chatbar list items
   * @return {undefined}
   */
  addToMoreBox: function (chatbarListItems) {
    var $this = ogame.chat;
    var listLength = chatbarListItems.length;

    if (listLength && $('.more_chat_bar_items').length < 1) {
      $('.chat_bar_list').append($this.createMoreBox('more_chat_bar_items'));
    }

    var moreItemsList = $('.more_chat_bar_items .more_items');
    var moreItemsBox = $('.more_chat_bar_items .chat_box');

    for (var i = 0; i <= listLength; i++) {
      moreItemsList.append(chatbarListItems.pop());
    }

    $this.updateCustomScrollbar(moreItemsBox);
  },

  /**
   * Creates a new chatbar container element.
   *
   * A chatbar container consists of the chatbar list element for the player with the given playerid
   * and the corresponing chatbox (the chatbox is initially open)
   *
   * @param {String} playerid
   * @returns {DOM Object}
   */
  createChatBarContainer: function (playerid) {
    var $this = ogame.chat;

    if (!playerid) {
      return;
    }

    var chatBarData = $this.data[playerid];
    $this.data.playerId = playerid;
    var chatBarItem = $('<li class="chat_bar_list_item open" data-playerid="' + playerid + '"></li>');
    chatBarItem.append('<span class="playerstatus ' + chatBarData.playerstatus + '"></span>');
    chatBarItem.append('<span class="cb_playername">' + chatBarData.playerName + '</span>');
    chatBarItem.append('<span class="icon icon_close fright"></span>'); // adding the chat to the box

    chatBarItem.prepend($this.createChatBox(playerid));
    return chatBarItem;
  },

  /**
   * Creates a new chatbar container element for group chats.
   *
   *
   * @param {String} associationId
   * @returns {DOM Object}
   */
  createChatBarContainerForAssociations: function (associationId) {
    var $this = ogame.chat;

    if (!associationId) {
      return;
    }

    var chatBarData = $this.data.association[associationId];
    $this.data.associationId = associationId;
    var chatBarItem = $('<li class="chat_bar_list_item open" data-associationId="' + associationId + '"></li>');
    chatBarItem.append('<span class="playerstatus ' + chatBarData.playerstatus + '"></span>');
    chatBarItem.append('<span class="cb_playername">' + chatBarData.associationName + '</span>');
    chatBarItem.append('<span class="icon icon_close fright"></span>'); // adding the chat to the box

    chatBarItem.prepend($this.createChatBoxForAssociations(associationId));
    return chatBarItem;
  },

  /**
   * Make it Invisible in the Chatbar
   */
  closeChatBox: function (playerid, associationid) {
    var chatbaritems = $(".chat_bar_list_item");
    $.each(chatbaritems, function (key, item) {
      if (playerid !== undefined && $(item).data('playerid') == playerid) {
        $(item).addClass('outOfChatbar');
        $(item).removeClass('open');
      } else if (associationid !== undefined && $(item).data('associationid') == associationid) {
        $(item).addClass('outOfChatbar');
        $(item).removeClass('open');
      }
    });
  },

  /**
   * Get ONLY the chats that should be shown
   * 
   * @returns {Array} visibleChats
   */
  getVisibleChats: function () {
    if (typeof visibleChats == "undefined") visibleChats = {
      "chatbar": false,
      "players": [],
      "associations": []
    };
    return visibleChats;
  },

  /**
   * get playerids from visible chats
   * 
   * @returns {Array} playerIDs
   */
  getVisibleChatPlayerIds: function () {
    var $this = ogame.chat;
    var visibles = $this.getVisibleChats();
    var playerIDs = {};
    var jsonIndex = 0;

    for (var i = 0; i < visibles.players.length; i++) {
      if ($.inArray(visibles.players[i]['partnerId'], playerIDs) == -1) {
        playerIDs[jsonIndex] = visibles.players[i]['partnerId'];
        jsonIndex++;
      }
    }

    return playerIDs;
  },

  /**
   * get associationIds from visible chats
   *
   * @returns {Array} playerIDs
   */
  getVisibleChatAssociationIds: function () {
    var $this = ogame.chat;
    var visibles = $this.getVisibleChats();
    var associationIDs = {};
    var jsonIndex = 0;

    for (var i = 0; i < visibles.associations.length; i++) {
      if ($.inArray(visibles.associations[i]['partnerId'], associationIDs) == -1) {
        associationIDs[jsonIndex] = visibles.associations[i];
        jsonIndex++;
      }
    }

    return associationIDs;
  },

  /**
   * Set visibility state of chats
   */
  setVisibilityState: function () {
    var $this = ogame.chat;
    var visiblesPlayers = $this.getVisibleChatPlayerIds();
    var visiblesAssociations = $this.getVisibleChatAssociationIds();
    var listitems = $('#chatBar .chat_bar_list .chat_bar_list_item');

    for (var i = 0; i < listitems.length; i++) {
      var item = listitems.get(i);
      var playerid = $(item).data('playerid');
      var associationid = $(item).data('associationid'); //if its not on the visiblelist - close it instant

      if (playerid !== undefined && !$this.isInJson(playerid, visiblesPlayers)) {
        $this.closeChatBox(playerid, 0);
      } else if (associationid !== undefined && !$this.isInJson(associationid, visiblesAssociations)) {
        $this.closeChatBox(0, associationid);
      } else {
        item.style.display = 'inline';

        if ($(item).hasClass('open')) {
          var box = $(item).find('div.chat_box')[0];
          box.style.display = 'inline';
          $this.updateCustomScrollbar($(item).find('.chat_box_ctn'), 1);
        }
      }
    }
  },

  /**
   * Search 4 value in json-object
   */
  isInJson: function (value, json) {
    var returningValue = null;

    if ($.isEmptyObject(json)) {
      returningValue = false;
    }

    if (returningValue !== false) {
      $.each(json, function (key, jsonValue) {
        if (jsonValue == value) {
          returningValue = true;
        }
      });

      if (returningValue !== true) {
        false;
      }
    }

    return returningValue;
  },
  toggleVisibility: function () {
    $(".chat_bar_list_item .icon_close").on("click", function (clickObject) {
      var toPlayerId = $(this).parent().data("playerid");
      var closeThis = $(this).closest('.chat_box');

      if (!closeThis.length) {
        closeThis = $(this).parent()[0];
        closeThis.style.display = 'none';
      }

      if (toPlayerId > 0) {
        $.ajax({
          type: "POST",
          url: "/game/index.php?page=ajaxChatToggleVisibility",
          data: {
            from: playerId,
            to: toPlayerId,
            showState: 0
          },
          success: function (e) {},
          error: function (jqXHR, textStatus, errorThrown) {}
        });
      }
    });
    $(".cb_playerlist_box .playerlist_item").on("click", function () {
      var toPlayerId = $(this).data("playerid");

      if (toPlayerId) {
        $.ajax({
          type: "POST",
          url: "/game/index.php?page=ajaxChatToggleVisibility",
          data: {
            from: playerId,
            to: toPlayerId,
            showState: 1
          },
          success: function (e) {},
          error: function (jqXHR, textStatus, errorThrown) {}
        });
      }
    });
  },
  initMaximize: function () {
    $('.chat_bar_list').on('click.chatBar', '.chat_box .chat_box_title .icon_maximize', function () {
      var chatTitle = $(this).parent();
      var playerid = $(chatTitle).parent().data('playerid');
      $.cookie('maximizeId', playerid);
      $('.chat_bar_list_item.open .chat_box_title .icon_close').trigger('click');
      window.location = bigChatLink + '&playerId=' + playerid;
    });
  },
  getInMaxChat: function () {
    var currentLocation = location.href;
    if (typeof bigChatLink == "undefined") bigChatLink = "";

    if (bigChatLink == currentLocation) {
      if ($.cookie('maximizeId') !== null) {
        $('#chatMsgList .msg[data-playerId=' + $.cookie('maximizeId') + ']').trigger('click');
      }
    }

    $.cookie('maximizeId', null);
  },

  /**
   * Create a chatbox item to be shown in the chatbar.
   * A Chatbox contains chatitems
   *
   * @param {String} playerid
   * @returns {DOM Object} $chatBox
   */
  createChatBox: function (playerid) {
    var $this = ogame.chat;

    if (!playerid) {
      return;
    }

    var chatBarData = $this.data[playerid];
    var chatBoxHeader = $('<div class="chat_box_title"></div>');
    chatBoxHeader.append('<span class="icon icon_close fright"></span>');
    chatBoxHeader.append('<span class="icon icon_maximize fright"></span>');
    var chatBoxCtn = $('<div class="chat_box_ctn"><ul class="chat clearfix"></ul></div>');
    var chatItem = {};

    for (var i = 0; i < chatBarData.chatItemsByDateAsc.length; i++) {
      chatItem = chatBarData.chatItems[chatBarData.chatItemsByDateAsc[i]];
      chatBoxCtn.find('.chat').append($this.createChatItem(chatItem));
    }

    var chatBox = $('<div class="chat_box" data-playerid="' + playerid + '"></div>');
    chatBox.append(chatBoxHeader);
    chatBox.append(chatBoxCtn);
    chatBox.append('<textarea name="text" class="chat_box_textarea"></textarea>');
    return chatBox;
  },

  /**
   * Create a chatbox item to be shown in the chatbar.
   * A Chatbox contains chatitems
   *
   * @param {String} playerid
   * @returns {DOM Object} $chatBox
   */
  createChatBoxForAssociations: function (associationId) {
    var $this = ogame.chat;

    if (!associationId) {
      return;
    }

    var chatBarData = $this.data.association[associationId];
    var chatBoxHeader = $('<div class="chat_box_title"></div>');
    chatBoxHeader.append('<span class="icon icon_close fright"></span>');
    chatBoxHeader.append('<span class="icon icon_maximize fright"></span>');
    var chatBoxCtn = $('<div class="chat_box_ctn"><ul class="chat clearfix"></ul></div>');
    var chatItem = {};

    for (var i = 0; i < chatBarData.chatItemsByDateAsc.length; i++) {
      chatItem = chatBarData.chatItems[chatBarData.chatItemsByDateAsc[i]];
      chatBoxCtn.find('.chat').append($this.createChatItem(chatItem));
    }

    var chatBox = $('<div class="chat_box" data-associationId="' + associationId + '"></div>');
    chatBox.append(chatBoxHeader);
    chatBox.append(chatBoxCtn);
    chatBox.append('<textarea name="text" class="chat_box_textarea"></textarea>');
    return chatBox;
  },

  /**
   * Creates a chatitem
   *
   * A Chatitem can be added to a chatbox in the chatbar or to an existing chat in the chatcontent page.
   *
   * @param {Object} chatData - data needed for the chat item
   * @returns {DOM Object} $chatItem
   */
  createChatItem: function (chatData) {
    if (!chatData) {
      console.warn('no chatItem given');
      return;
    }

    var chatItemHeader = $('<div class="msg_head"></div>');
    chatItemHeader.append('<span class="msg_date fright">' + getFormatedDate(chatData.date, '[d].[m].[Y] <span>[H]:[i]:[s]</span>') + '</span>');
    chatItemHeader.append('<span class="msg_title blue_txt ' + chatData.newClass + '">' + chatData.playerName + '</span>');
    var chatItem = $('<li class="chat_msg ' + chatData.altClass + '" data-chat-id="' + chatData.chatID + '"></li>');
    chatItem.append(chatItemHeader);

    if (typeof chatData.refData !== "undefined") {
      var refMsgItem = $('<div class="referenceMsg"></div>');
      var refAuthorItem = '<div class="refAuthor">' + chatData.refData.author + '</div>';
      var refTextItem = '<div class="refText new">' + chatData.refData.text + '</div>';
      refMsgItem.append(refAuthorItem);
      refMsgItem.append(refTextItem);
      chatItem.append(refMsgItem);
    }

    chatItem.append('<span class="msg_content">' + chatData.chatContent + '</span>');
    chatItem.append('<div class="speechbubble_arrow"></div>');
    return chatItem;
  },

  /**
   * Create a a chatbar item of the type moreBox that will be a container for
   * all items that don't fit into the chatbar directly 
   * 
   * @param {String} itemClass
   * @returns {DOM Object} $moreBox
   */
  createMoreBox: function (itemClass) {
    var moreBox = $('<li class="chat_bar_list_item ' + itemClass + '">' + chatLoca['MORE_USERS'] + '<span class="icon icon_close fright"></span></li>');
    moreBox.prepend($('<div class="chat_box"><ul class="more_items clearfix"></ul></div>'));
    return moreBox;
  },

  /**
   * Filters the playerlist after the criteria that are selected in the
   * filter form
   *
   * @returns {undefined}
   */
  filterPlayerlist: function () {
    var filters = [];
    var isChecked;
    var filterCheckboxes = $('#playerlistFilters').find('input[type="checkbox"]'); // get filters to check

    filterCheckboxes.each(function () {
      filters.push($(this).attr('id'));
    });
    $('.playerlist_item').show(); // we don't need to filter anything if no filter is active

    isChecked = false;
    filterCheckboxes.each(function () {
      if ($(this).prop('checked')) isChecked = true;
    });

    if (!isChecked) {
      return;
    }

    var doFilter;
    var listElement;
    $('.playerlist_item').filter(function () {
      doFilter = false;
      listElement = $(this); // for every filter

      $.each(filters, function (i, filter) {
        // check if the element matches filter criteria 
        // and should be filtered by that criteria
        if (listElement.data(filter) === 'off' && $('#' + filter).prop('checked')) {
          doFilter = true;
        }
      }); // hide the element if it should be filtered out

      doFilter === true ? listElement.hide() : listElement.show();
    });
  },

  /**
   * initializes the functions needed for the display of the chatbar
   *
   * @returns {undefined}
   */
  initChatBar: function (playerId) {
    var $this = ogame.chat;
    ogame.chat.playerId = playerId;
    $('html').off('.chatBar');
    $(window).resize(function () {
      $this.updateChatBar();
    }); // var playeridsInList = [];
    //
    // $('#chatBarPlayerList li.playerlist_item').each(function(index) {
    // 	if(!$(this).hasClass('nothingThere')) {
    // 		playeridsInList[index] = $(this).data('playerid');
    // 	}
    // });
    //
    // if(playeridsInList.length > 0) {
    // 	ogame.messagemarker.initMarker(playeridsInList);
    // }
    //        var chatsum = 0;
    //        
    //        $('#chatBarPlayerList li.playerlist_item .newMsgMarker').each(function() {
    //        	chatsum = chatsum + 1;
    //        });
    //        
    //        ogame.messagecounter.initChatCounter(chatsum);
    // $(".new_msg_count").each(function() {
    //     $this.saveMessageCounter($(this).data('new-messages'), $(this).data('playerid'));
    // });
    //
    // this.updateTotalNewChatCounter();

    $('.chat_bar_list').on('click.chatBar', '#chatBarPlayerList', function (e) {
      if ($(e.target).attr('id') !== 'chatBarPlayerList' && !$(e.target).hasClass('onlineCount')) {
        return;
      }

      $('.cb_playerlist_box').toggle();
      $this.updateCustomScrollbar($(".scrollContainer"), true);
      $.ajax({
        url: chatUrl,
        type: 'POST',
        dataType: 'json',
        data: {
          action: 'toggleChatBar'
        },
        success: function (data) {},
        error: function (jqXHR, textStatus, errorThrown) {}
      });
    }).on('click.chatBar', '.chat_bar_list_item', function (e) {
      e.stopPropagation();

      if (!isNaN($(this).data('playerid'))) {
        ogame.messagemarker.toggle(ogame.messagemarker.action_remove, ogame.messagemarker.type_chattab, $(this).data('playerid'));
        ogame.messagemarker.toggle(ogame.messagemarker.action_remove, ogame.messagemarker.type_chatbar, $(this).data('playerid'));
        $this.saveMessageCounter(0, $(this).data('playerid'));
        ogame.messagemarker.setPartnerId($(this).data('playerid'));
        ogame.messagemarker.updateNewMarker();
        ogame.chat.updateTotalNewChatCounter();
      } else if (!isNaN($(this).data('associationid') > 0)) {
        $this.saveMessageCounterAssociation(0, $(this).data('associationid'));
      }

      $.ajax({
        url: chatUrl,
        type: 'POST',
        dataType: 'json',
        data: {
          playerId: $(this).data('playerid'),
          action: 'chatBarListRead'
        },
        success: function (data) {},
        error: function (jqXHR, textStatus, errorThrown) {}
      });

      if ($(this).closest('.more_items').length) {
        $this.swapChatBarItem($(this));
      } else {
        $this.toggleChatBox($(e.target), $(this));
      }

      $this.updateVisibleState();
    }).on('click.chatBar', '.chat_bar_list_item > .icon_close', function (e) {
      e.stopPropagation();
      var chatbarItem = $(this).closest('.chat_bar_list_item');
      ogame.chat.closeChatBox(chatbarItem.attr('data-playerid'), chatbarItem.attr('data-associationid'));
      chatbarItem.remove('open');
      $this.updateChatBar();
    }).on('keyup.chatBar', '.chat_box_textarea', function (e) {
      if ((e.ctrlKey || e.keyCode == 10) && e.keyCode == 13) {
        e.preventDefault();
        var s = $(this).val();
        $(this).val(s + "\n");
      } else {
        if ($.trim($(this).val().length > 0)) {
          e.preventDefault();
          $this.submitChatBarMsg($(e.currentTarget), e.which, e.shiftKey, e.delegateTarget.scrollHeight);
        }
      }
    }).on('click.chatBar', '.chat_box_textarea', function (e) {
      ogame.messagemarker.toggle(ogame.messagemarker.action_remove, ogame.messagemarker.type_chattab, $(this).parent().parent().parent().data('playerid'));
      ogame.messagemarker.toggle(ogame.messagemarker.action_remove, ogame.messagemarker.type_chatbar, $(this).parent().parent().parent().data('playerid'));

      if ($(this).data('playerid') > 0) {
        $this.saveMessageCounter(0, $(this).data('playerid'));
      } else if ($(this).data('associationid') > 0) {
        $this.saveMessageCounterAssociation(0, $(this).data('associationid'));
      }
    }).on('keydown.chatBar', '.chat_box_textarea', function (e) {
      if (e.keyCode == 13) {
        if (e.shiftKey == false) {
          e.preventDefault();
        }
      }
    }); //        $this.updateCustomScrollbar($('.chat_box_ctn'));
    //        $this.updateCustomScrollbar($(".scrollContainer"), true);
  },

  /**
   * initializes the functions needed for the display of the playerlist
   *
   * @returns {undefined}
   */
  initPlayerlist: function () {
    var $this = ogame.chat;
    var $tools = ogame.tools; // for playerlist toggle

    $('.js_accordion').accordion({
      collapsible: true,
      heightStyle: 'content'
    }); // adding "zebra" to list items

    $(".playerlist_item:odd").addClass("odd");
    $tools.addHover('.playerlist_item, .msg, .playerlist_top_box .playerlist'); // playerlist events

    $('.js_playerlist').on('click.playerList', '.pl_filter_set', function () {
      $this.filterPlayerlist();
    });
    $this.filterPlayerlist(); // Do this once, to restore filter settings.
  },

  /**
   * Shows a chat in the chatbar
   *
   * @param data {Object} - the chat data to show
   * @returns {undefined}
   */
  showChat: function (data) {
    var found = false;
    var $this = ogame.chat;
    $('.chat_bar_list_item').each(function () {
      var $item = $(this); // trigger opening if we found the desired chat

      if (data['playerId'] !== undefined && $item.data('playerid') === data['playerId'] || data['associationId'] !== undefined && $item.data('associationid') === data['associationId']) {
        found = true;

        if ($item.hasClass('outOfChatbar')) {
          $item.removeClass('outOfChatbar');
        }

        if (!$item.hasClass('open')) {
          $item.click(); // trigger opening

          $item[0].style.display = 'inline';
        } else {
          $item.fadeTo('400', 0.3).fadeTo('400', 1.0);
        }

        $item.find('textarea').focus();
      }
    }); // add the chat if is not yet in chatbar or more list

    if (!found) {
      var chatBarContainer;

      if (data['playerId'] !== undefined) {
        chatBarContainer = $this.createChatBarContainer(data['playerId']);
      } else {
        chatBarContainer = $this.createChatBarContainerForAssociations(data['associationId']);
      }

      $this.updateChatBar(chatBarContainer);
    }
  },

  /**
   * Shows the (complete) chat history in the detail chat page 
   *
   * @param data {Object} - the chat data to show
   * @returns {undefined}
   */
  showChatHistory: function (data) {
    var history = $('.js_chatHistory');
    var documentContent = data['data'];

    if (history.length) {
      history.remove();
    }

    $('#chatList').remove();
    $(documentContent).insertAfter('#planet');
    $("li.playerlist_item").removeClass('active');
    $("li.playerlist_item[data-playerid='" + data.playerId + "']").addClass('active');
    initBBCodeEditor(locaKeys, itemNames, false, '.new_msg_textarea', 2000, true);
  },

  /**
   * Handles the display of a sent message in a chat on the chat bar
   * @TODO: Actually send the message as well.
   * @param clickedElement {Object} - 
   * @param pressedKey {Object} - 
   * @param shiftKey {Object} - if shiftkey was pressed simultaneously
   * @param msgScrollHeight {Object} - 
   * @returns {undefined}
   */
  submitChatBarMsg: function (clickedElement, pressedKey, shiftKey, msgScrollHeight) {
    var $this = ogame.chat;
    var msgMaxHeight = parseInt($('.chat_box_textarea').css('max-height'));
    var msgPadding = parseInt($('.chat_box_textarea').css('padding-top')) + parseInt($('.chat_box_textarea').css('padding-bottom')); // enter pressed while shift already was pressed
    // == new line without sending the message

    if (pressedKey === 13 && shiftKey) {
      if (msgScrollHeight <= msgMaxHeight + msgPadding) {
        clickedElement.css('height', msgScrollHeight - msgPadding);
      }

      return;
    }

    if (pressedKey === 13) {
      if (clickedElement.parent('.chat_box').data('playerid') !== undefined) {
        $this.sendMessage(clickedElement.parent('.chat_box').data('playerid'), 0, clickedElement.val());
      } else if (clickedElement.parent('.chat_box').data('associationid') !== undefined) {
        $this.sendMessage(0, clickedElement.parent('.chat_box').data('associationid'), clickedElement.val());
      } // @TODO: adding the element can only actually happen when the message was sent successfully!


      clickedElement.val('');
    }
  },

  /**
   * Removes an item from the list of more items and inserts it as the last item in the chat bar list
   *
   * @param $itemToSwap {DOM Object} - the item that will be swapped
   * @returns {undefined}
   */
  swapChatBarItem: function (itemToSwapIn) {
    var $this = ogame.chat; // remove item to swap out from the chatbar

    var itemToSwapOut = $('.more_chat_bar_items').prev();
    itemToSwapOut.removeClass('open').find('.icon_close').hide().end().find('.chat_box').hide();
    itemToSwapOut.remove(); // swap item back to chatbar

    itemToSwapIn.addClass('open').find('.icon_close').show().end().find('.chat_box').show().end().insertBefore('.more_chat_bar_items');
    $this.addToMoreBox([itemToSwapOut]); // if after the insertion we would not have enough space we need to correct that

    $this.updateChatBar();
    $this.updateCustomScrollbar(itemToSwapIn.find('.chat_box_ctn'));
  },

  /**
   * show the minimal chat for the clicked player on correct position
   * expand/shrink width accordingly
   *
   * @param clickedTarget {DOM Object} - clicked element
   * @param originalTarget {DOM Object} - element that was originally targeted
   * @returns {undefined}
   */
  toggleChatBox: function (clickedTarget, originalTarget) {
    var $this = ogame.chat; // some elements should not trigger toggle:

    if (clickedTarget.parents('.chat_box').length && !clickedTarget.hasClass('icon_close')) {
      return;
    }

    var chatBox = originalTarget.children('.chat_box'); // toggling the display of chat contents

    if (chatBox.is(':visible')) {
      chatBox.hide();
      originalTarget.removeClass('open');
    } else {
      if (!originalTarget.hasClass('more_chat_bar_items')) {
        originalTarget.addClass('open');
        $this.updateChatBar();
      }

      chatBox.show();
      var chatboxClass = chatBox.find('.chat_box_ctn');

      if (originalTarget.hasClass('more_chat_bar_items')) {
        chatboxClass = chatBox;
      }

      $this.updateCustomScrollbar(chatboxClass);
      chatBox.find('textarea').focus();
    }

    ogame.messagecounter.resetCounterByType(ogame.messagecounter.type_chat);
  },

  /**
   * move item to the morelist
   * 
   * @see important for ogame.chat.updateChatBar
   * @param chatOpenLength, chatClosedLength, widthOpen, widthClosed, widthMoreItems, widthWindow @see ogame.chat.updateChatBar
   */
  handleTooMuchWindows: function (chatOpenLength, chatClosedLength, widthOpen, widthClosed, widthMoreItems, widthWindow) {
    var $this = ogame.chat;
    var isTooWide = true;
    var chatbarListItems = [];
    $($('.chat_bar_list > .chat_bar_list_item').get().reverse()).each(function () {
      var listItem = $(this);

      if (isTooWide) {
        // these element should never be removed:
        if (listItem.hasClass('more_chat_bar_items') || listItem.attr('id') === 'chatBarPlayerList') {
          return;
        } // decide what kind of element shall be removed (swapped out)


        if (listItem.hasClass('open')) {
          chatOpenLength--;
        } else {
          chatClosedLength--;
        } // prepare the item and add it to the more list


        listItem.removeClass('open').find('.icon_close').hide().end().find('.chat_box').hide();
        chatbarListItems.push(listItem);
        listItem.remove(); // check if more elements need to be removed

        widthTotal = widthClosed * chatClosedLength + widthOpen * chatOpenLength + widthMoreItems;
        isTooWide = widthTotal >= widthWindow ? true : false;
      }
    }); // update morebox with contents of chatbarListItems

    $this.addToMoreBox(chatbarListItems);
  },

  /**
   * move item back to the chatbar
   * 
   * @see important for ogame.chat.updateChatBar
   */
  getItemFromMorelist2Chatbar: function () {
    // get item from more list then remove it from more list.
    var swappedChatBarItem = $('.more_items .chat_bar_list_item').first().remove();
    var $this = ogame.chat; // add swapped item back to chat bar

    swappedChatBarItem.addClass('open').find('.icon_close').show().end().find('.chat_box').show().end().insertBefore('.more_chat_bar_items'); // if more list is now empty remove it as well

    if ($('.more_items .chat_bar_list_item').length <= 0) {
      $('.more_chat_bar_items').remove();
    }

    $this.updateCustomScrollbar($('.more_chat_bar_items>.chat_box'));
    $this.updateCustomScrollbar(swappedChatBarItem.find('.chat_box_ctn'));
  },

  /**
   * Calculates available horizontal space and updates how many items are shown in the chatbar
   * and moves items to/from more list accordingly
   *
   * @param {DOM Object} chatBarItem - new item to add to chatbar
   */
  updateChatBar: function (chatBarItem) {
    var $this = ogame.chat;
    var chatOpenLength = $('.chat_bar_list > .chat_bar_list_item.open').length;
    var moreItemsLength = $('.more_chat_bar_items').length;
    var chatClosedLength = $('.chat_bar_list').children().length - chatOpenLength - moreItemsLength;
    var widthClosed = 190;
    var widthOpen = 270;
    var widthMoreItems = 190; // 180 + 10 px space

    var widthWindow = $('body').innerWidth(); // new items will be directly open

    if (chatBarItem) {
      chatOpenLength++;
    }

    var widthTotal = widthClosed * chatClosedLength + widthOpen * chatOpenLength + widthMoreItems * moreItemsLength; // if there are more elements than fit in the window

    if (widthTotal >= widthWindow) {
      $this.handleTooMuchWindows(chatOpenLength, chatClosedLength, widthOpen, widthClosed, widthMoreItems, widthWindow);
    } else if (widthTotal + widthOpen <= widthWindow && $('.more_chat_bar_items').length > 0) {
      // if widthTotal is small enough that another open element will fit an we have one in the more list
      $this.getItemFromMorelist2Chatbar();
    }

    if (chatBarItem) {
      chatBarItem.insertAfter('#chatBarPlayerList');
      $this.updateCustomScrollbar(chatBarItem.find('.chat_box_ctn'));
    }
  },

  /**
   * update the custom scrollbar or add it if the element has none
   * 
   * @param element {DOM Object} - the element that gets the scrollbar
   * @param skipScrolling bool Skip scrolling to the bottom
   */
  updateCustomScrollbar: function (element, skipScrolling) {
    if (!element || element.length == 0) {
      return;
    }

    if (element.hasClass('mCustomScrollbar')) {
      element.mCustomScrollbar('update');
    } else {
      element.mCustomScrollbar({
        theme: "ogame"
      });
    }

    if (skipScrolling !== true) {
      element.mCustomScrollbar("scrollTo", "bottom", {
        scrollInertia: 0
      });
    }

    element.each(function () {
      if ($(this).height() + "px" == $(this).css("max-height")) {
        $(this).addClass("scrollbarPresent");
      }
    });
  },
  updateVisibleState: function () {
    var visibleChats = {
      "chatbar": false,
      "players": [],
      "associations": []
    };
    $('.chat_bar_list>.chat_bar_list_item').each(function () {
      var $item = $(this);

      if ($item.attr('id') === 'chatBarPlayerList' && $item.children('.cb_playerlist_box').is(':visible')) {
        visibleChats.chatbar = true;
      } else if ($item.data('playerid') && $item.children('.chat_box').is(':visible')) {
        visibleChats.players.push($item.data('playerid'));
      } else if ($item.data('associationid') && $item.children('.chat_box').is(':visible')) {
        visibleChats.associations.push($item.data('associationid'));
      }
    });
    $.cookie('visibleChats', JSON.stringify(visibleChats), {
      expires: 7
    });
  },
  showPlayerList: function (selector) {
      // TODO: re-enable later
      return;
    var $this = ogame.chat;

    if (window.deactivateChatBecauseOfLogout) {
      return;
    }

    if ($.inArray(selector, $this.playerListSelector) === -1) {
      $this.playerListSelector.push(selector);
    }

    if ($this.isLoadingPlayerList === false && $this.playerList === null) {
      $this.isLoadingPlayerList = true;
      $.ajax({
        url: chatUrl,
        type: 'POST',
        dataType: 'json',
        data: {
          action: 'showPlayerList'
        },
        success: function (data) {
          $this.playerList = data.content;
          $this.isLoadingPlayerList = false;

          $this._showPlayerList();
        },
        error: function (jqXHR, textStatus, errorThrown) {
          $this.isLoadingPlayerList = false;
        }
      });
    } else {
      $this._showPlayerList();
    }
  },
  _showPlayerList: function () {
    var $this = ogame.chat;
    $.each($this.playerListSelector, function (index, value) {
      $(value).html($this.playerList);
    });
  }
};
let characterClassArr = ['neutral', 'miner', 'warrior', 'explorer'];
let allianceClassArr = ['neutral', 'warrior', 'trader', 'explorer'];
let characterClassBonuses = {
  warrior: {
    109: 2,
    110: 2,
    111: 2
  }
};
let allianceClassBonuses = {
  warrior: {
    109: 1,
    110: 1,
    111: 1
  }
};

function isJsonString(str) {
  try {
    JSON.parse(str);
  } catch (e) {
    return false;
  }

  return true;
}

function isReportString(str) {
  let [reportType, lang, serverId, apiKey] = str.split('-');

  if (str.length !== 50 || reportType !== 'sr' || lang !== js_serverlang || serverId !== js_serverid || str.match('/sr-' + js_serverlang + '-' + js_serverid + '[A-Z]{40}/g') === false || apiKey.length !== 40) {
    showNotification(combatSimLoca.LOCA_COMBATSIM_INVALID_DATA + ' ' + combatSimLoca.LOCA_COMBATSIM_INVALID_API, 'warning');
    return false;
  }

  return true;
}

function loadPlanetAction(planetId, currentTarget, isBaseDefender, attackType) {
  let body = {
    _token: token
  };

  if (planetId) {
    body["planetId"] = planetId;
  }

  $.ajax({
    url: simBackendUrl + '&action=loadPlanet',
    data: body,
    type: "POST",
    dataType: "json",
    success: function (json) {
      if (typeof json.planetData == 'object') {
        token = json.newAjaxToken;
        fillData($(currentTarget.closest("fleet-content")[0]), json.planetData, isBaseDefender, attackType);
        showNotification(combatSimLoca.LOCA_COMBATSIM_PLANET_LOADED, 'success');
      } else {
        token = json.newAjaxToken;

        if (json.errors && json.errors.length) {
          showNotification(json.errors[0].message, 'error');
        }
      }
    },
    error: function () {
      showNotification(combatSimLoca.LOCA_ERROR_DEFAULT, 'error');
    }
  });
}

function loadSpyReport(hashId, currentTarget, isBaseDefender, attackType) {
  if (!currentTarget || !currentTarget.length) {
    return;
  }

  let body = {
    _token: token
  };

  if (hashId) {
    body["reportHash"] = hashId;
  }

  $.ajax({
    url: simBackendUrl + '&action=loadReport',
    data: body,
    type: "POST",
    dataType: "json",
    success: function (json) {
      if (typeof json.planetData == 'object') {
        token = json.newAjaxToken;
        adjustResearchClassBonuses(json.planetData);
        fillData($(currentTarget.closest("fleet-content")[0]), json.planetData, isBaseDefender, attackType);
        $("fleet-content[data-participant-id=0][data-attack-type=2] input[name='apikey']").val(hashId);
        showNotification(json.message, 'success');
        simChanged(currentTarget);
      } else {
        token = json.newAjaxToken;

        if (json.errors && json.errors.length) {
          showNotification(json.errors[0].message, 'error');
        }
      }
    },
    error: function () {
      showNotification(combatSimLoca.LOCA_ERROR_DEFAULT, 'error');
    }
  });
}

function adjustResearchClassBonuses(planetData) {
  let className = findClassName(characterClassArr, planetData.characterClassId ?? 0);

  if (characterClassBonuses[className]) {
    Object.keys(characterClassBonuses[className]).forEach(researchId => {
      if (planetData.researches[researchId] > 0) {
        planetData.researches[researchId] = Math.max(0, planetData.researches[researchId] - characterClassBonuses[className][researchId]);
      }
    });
  }

  className = findClassName(allianceClassArr, planetData.allianceClassId ?? 0);

  if (allianceClassBonuses[className]) {
    Object.keys(allianceClassBonuses[className]).forEach(researchId => {
      if (planetData.researches[researchId] > 0) {
        planetData.researches[researchId] = Math.max(0, planetData.researches[researchId] - allianceClassBonuses[className][researchId]);
      }
    });
  }
}

function simChanged(obj) {
  if ($(obj).attr('max')) {
    $(obj).val(Math.min(parseInt($(obj).attr('max')), parseInt($(obj).val())) || 0);
  }

  if ($(obj).attr('min')) {
    $(obj).val(Math.max(parseInt($(obj).attr('min')), parseInt($(obj).val())) || $(obj).attr('min'));
  } else {
    $(obj).val(Math.max(0, $(obj).val()));
  }

  if ($("gradient-button button#saveCombatPlanning div.emoji").length === 0) {
    $('<div class="emoji warningsign tooltipLeft" title="' + combatSimLoca.LOCA_COMBATSIM_DATA_CHANGED + '"></div>').insertBefore($("gradient-button button#saveCombatPlanning span"));
  }

  combatSimChanged = true;
  $('#showCombatResultShortInfo').prop('disabled', true).data('target', '');
  $("#saveCombatPlanning").removeAttr('disabled');
  $("#simulateCombatPlanning").prop('disabled', true);
}

function switchSpaceObject(obj) {
  let currentTarget = $(obj);

  if (currentTarget.hasClass("selected")) {
    return false;
  }

  let basicData = $(currentTarget.closest("basic-data")[0]);
  basicData.find('.togglePanel ul').hide().removeClass('active');
  basicData.find('.planetSelection div').removeClass('selected');
  currentTarget.addClass('selected');
  let className = 'planet';

  if (currentTarget.hasClass("moon")) {
    className = 'moon';
  }

  basicData.find('.togglePanel ul.' + className).show().addClass('active');
  let spaceObject = basicData.find('.togglePanel').find('ul.' + className + ' li:first');
  basicData.find('.toggleLink').attr('data-selected-planetid', spaceObject.data('planetid')).data('selectedPlanetid', spaceObject.data('planetid'));
  basicData.find('.togglePanel').hide();
  basicData.find('.togglePanel li').removeClass('selected');
  basicData.find('.togglePanel ul #' + spaceObject.data('planetid')).addClass('selected');
  basicData.find('.toggleLink').html(spaceObject.html());
}

function changeClass(target, selectedClass, type) {
  let classArr = characterClassArr;
  let classBonusArr = characterClassBonuses;

  if (type === 'allianceclass') {
    classArr = allianceClassArr;
    classBonusArr = allianceClassBonuses;
  }

  const classId = findClassId(classArr, selectedClass);
  const classSelection = $(target).closest("class-selection");
  const inputField = classSelection.find("input").first();
  const fleetSection = target.closest('fleet-content');
  const currentClass = findClassName(classArr, inputField.data('classId') === '' ? 0 : parseInt(inputField.data('classId')));
  inputField.data("classId", classId);
  inputField.attr("data-class-id", classId);
  inputField.prop('checked', false);
  const icons = classSelection.find(type + '-icon');
  icons.each((idx, icon) => {
    classArr.forEach(className => {
      $(icon).removeAttr(className);
    });
    targetId = idx + 1;

    if (targetId === classId) {
      targetId = 0;
    }

    $(icon).attr(classArr[targetId], true);
  });

  if (classBonusArr[currentClass]) {
    Object.keys(classBonusArr[currentClass]).forEach(techId => {
      const researchInput = $(fleetSection).find(".technology-row input[name='amount[" + techId + "]']").first();
      const currentValue = researchInput.val().length === 0 ? 0 : parseInt(researchInput.val());
      const currentMin = (researchInput.attr('min') ?? '').length === 0 ? 0 : parseInt(researchInput.attr('min'));
      researchInput.val(Math.max(0, currentValue - classBonusArr[currentClass][techId]));
      researchInput.attr('min', Math.max(0, currentMin - classBonusArr[currentClass][techId]));
    });
  }

  if (classBonusArr[selectedClass]) {
    Object.keys(classBonusArr[selectedClass]).forEach(techId => {
      const researchInput = $(fleetSection).find(".technology-row input[name='amount[" + techId + "]']").first();
      const currentValue = researchInput.val().length === 0 ? 0 : parseInt(researchInput.val());
      const currentMin = (researchInput.attr('min') ?? '').length === 0 ? 0 : parseInt(researchInput.attr('min'));
      researchInput.val(currentValue + classBonusArr[selectedClass][techId]);
      researchInput.attr('min', currentMin + classBonusArr[selectedClass][techId]);
    });
  }

  simChanged(classSelection);
}

function fillData(fleetSection, jsonObj, isBaseDefender, attackType) {
  changeClass(fleetSection.find('characterclass-icon'), characterClassArr[0], 'characterclass');
  changeClass(fleetSection.find('allianceclass-icon'), allianceClassArr[0], 'allianceclass');
  let inputField;
  $.each(jsonObj.researches, function (index, value) {
    inputField = $(fleetSection.find(".technology-row input[name='amount[" + index + "]']")[0]);
    inputField.val(value);
  });
  let selection = 0;

  if (characterClassArr[parseInt(jsonObj.characterClassId)]) {
    selection = parseInt(jsonObj.characterClassId);
  }

  changeClass(fleetSection.find('characterclass-icon'), characterClassArr[selection], 'characterclass');

  if (allianceClassArr[parseInt(jsonObj.allianceClassId)]) {
    selection = parseInt(jsonObj.allianceClassId);
  }

  changeClass(fleetSection.find('allianceclass-icon'), allianceClassArr[selection], 'allianceclass');
  $.each(jsonObj.ships, function (index, value) {
    inputField = $(fleetSection.find(".technology-row input[name='amount[" + index + "]']")[0]);
    inputField.val(value.amount);
    inputField = $(fleetSection.find(".technology-fullrow input[name='weapon[" + index + "]']")[0]);
    inputField.val((Math.floor(value.weapon * 10000) / 100).toFixed(2));
    inputField = $(fleetSection.find(".technology-fullrow input[name='shield[" + index + "]']")[0]);
    inputField.val((Math.floor(value.shield * 10000) / 100).toFixed(2));
    inputField = $(fleetSection.find(".technology-fullrow input[name='armor[" + index + "]']")[0]);
    inputField.val((Math.floor(value.armor * 10000) / 100).toFixed(2));
    inputField = $(fleetSection.find(".technology-fullrow input[name='cargo[" + index + "]']")[0]);
    inputField.val((Math.floor(value.cargo * 10000) / 100).toFixed(2));
    inputField = $(fleetSection.find(".technology-fullrow input[name='speed[" + index + "]']")[0]);
    inputField.val((Math.floor(value.speed * 10000) / 100).toFixed(2));
    inputField = $(fleetSection.find(".technology-fullrow input[name='fuel[" + index + "]']")[0]);
    inputField.val((Math.floor(value.fuel * 10000) / 100).toFixed(2));
  });
  inputField = $(fleetSection.find(".technology-fullrow input[name='classBonus[1]']")[0]);
  inputField.val((Math.floor(jsonObj.bonuses.characterClassBooster[1] * 10000) / 100).toFixed(2));
  inputField = $(fleetSection.find(".technology-fullrow input[name='classBonus[2]']")[0]);
  inputField.val((Math.floor(jsonObj.bonuses.characterClassBooster[2] * 10000) / 100).toFixed(2));
  inputField = $(fleetSection.find(".technology-fullrow input[name='classBonus[3]']")[0]);
  inputField.val((Math.floor(jsonObj.bonuses.characterClassBooster[3] * 10000) / 100).toFixed(2));
  inputField = $(fleetSection.find("fleetspeed-section input[value='" + jsonObj.fleetspeed + "']")[0]);
  inputField.prop('checked', true);
  let coords = {};

  if (typeof jsonObj.coords == 'object') {
    coords[0] = jsonObj.coords.galaxy;
    coords[1] = jsonObj.coords.system;
    coords[2] = jsonObj.coords.position;
  } else {
    coords = jsonObj.coords.split(':');
  }

  $(fleetSection.find("coordinates-section input[name='galaxy']")[0]).val(coords[0]);
  $(fleetSection.find("coordinates-section input[name='system']")[0]).val(coords[1]);
  $(fleetSection.find("coordinates-section input[name='position']")[0]).val(coords[2]);

  if (isBaseDefender === true) {
    fleetSection = $("combatsim-section[base-defender] fleet-content");
    $.each(jsonObj.resources, function (index, value) {
      inputField = $(fleetSection.find(".resource-row input[name='resource[" + index + "]']")[0]);
      inputField.val(value);
    });
    $.each(jsonObj.ships, function (index, value) {
      inputField = $(fleetSection.find(".technology-row input[name='amount[" + index + "]']")[0]);
      inputField.val(value.amount);
    });
    $.each(jsonObj.defenses, function (index, value) {
      inputField = $(fleetSection.find(".technology-row input[name='amount[" + index + "]']")[0]);
      inputField.val(value.amount);
      inputField = $(fleetSection.find(".technology-fullrow input[name='weapon[" + index + "]']")[0]);
      inputField.val((Math.floor(value.weapon * 10000) / 100).toFixed(2));
      inputField = $(fleetSection.find(".technology-fullrow input[name='shield[" + index + "]']")[0]);
      inputField.val((Math.floor(value.shield * 10000) / 100).toFixed(2));
      inputField = $(fleetSection.find(".technology-fullrow input[name='armor[" + index + "]']")[0]);
      inputField.val((Math.floor(value.armor * 10000) / 100).toFixed(2));
    });
    inputField = $(fleetSection.find(".technology-fullrow input[name='special[11112]']")[0]);
    inputField.val((Math.floor(jsonObj.bonuses.lifeformProtection * 10000) / 100).toFixed(2));
    inputField = $(fleetSection.find(".technology-fullrow input[name='special[12112]']")[0]);
    inputField.val((Math.floor(jsonObj.bonuses.spaceDockExtender * 10000) / 100).toFixed(2));
    inputField = $(fleetSection.find(".technology-fullrow input[name='special[13112]']")[0]);
    inputField.val((Math.floor(jsonObj.bonuses.recycleAttackerFleet * 10000) / 100).toFixed(2));
    inputField = $(fleetSection.find(".technology-fullrow input[name='special[14112]']")[0]);
    inputField.val((Math.floor(jsonObj.bonuses.moonChanceIncrease * 10000) / 100).toFixed(2));
    inputField = $(fleetSection.find(".technology-fullrow input[name='denCapacity[22]']")[0]);
    inputField.val((Math.floor(jsonObj.bonuses.denCapacity.metal * 10000) / 100).toFixed(2));
    inputField = $(fleetSection.find(".technology-fullrow input[name='denCapacity[23]']")[0]);
    inputField.val((Math.floor(jsonObj.bonuses.denCapacity.crystal * 10000) / 100).toFixed(2));
    inputField = $(fleetSection.find(".technology-fullrow input[name='denCapacity[24]']")[0]);
    inputField.val((Math.floor(jsonObj.bonuses.denCapacity.deuterium * 10000) / 100).toFixed(2));
    $.each(jsonObj.missiles, function (index, value) {
      inputField = $(fleetSection.find(".technology-row input[name='amount[" + index + "]']")[0]);
      inputField.val(value.amount);
    });
  }

  simChanged(fleetSection);
}

function clearPlayer(obj) {
  let participantId = $(obj).data('participantId');
  let attackType = $(obj).data('attackType');
  $("fleet-content[data-participant-id=" + participantId + "][data-attack-type=" + attackType + "] fleetspeed-section input").prop('checked', false);
  $("fleet-content[data-participant-id=" + participantId + "][data-attack-type=" + attackType + "] fleetspeed-section input[value='10']").prop('checked', true);
  let fleetSection = $("fleet-content[data-participant-id=" + participantId + "][data-attack-type=" + attackType + "]");
  changeClass(fleetSection.find('characterclass-icon'), characterClassArr[0], 'characterclass');
  changeClass(fleetSection.find('allianceclass-icon'), allianceClassArr[0], 'allianceclass');
  fleetSection.find("research-section input").val('');
  fleetSection.find("ship-section input").val('');
  fleetSection.find("defense-section input").val('');
  fleetSection.find("coordinates-section input").val('');
  fleetSection.find("lifeform-data input").val('');
  simChanged(obj);
}

function clearTechnologies(obj) {
  let participantId = $(obj).data('participantId');
  let attackType = $(obj).data('attackType');
  $("fleet-content[data-participant-id=" + participantId + "][data-attack-type=" + attackType + "] ship-section input").val('');
  $("fleet-content[data-participant-id=" + participantId + "][data-attack-type=" + attackType + "] defense-section input").val('');
  simChanged(obj);
}

function expandLifeforms(obj) {
  let combatsimSection = $(obj).closest("combatsim-section");

  if (combatsimSection.attr("show-lifeform") === "1") {
    combatsimSection.attr("show-lifeform", "0");
  } else {
    combatsimSection.attr("show-lifeform", "1");
  }
}

function showSpaceObjectSelection(obj) {
  let basicData = $($(obj).closest("basic-data")[0]);
  let togglePanel = basicData.find('.js_togglePanel');
  togglePanel.toggle();
}

function selectSpaceObject(obj) {
  let currentTarget = $(obj);
  let basicData = currentTarget.closest("basic-data");
  basicData.find('.toggleLink').attr('data-selected-planetid', currentTarget.data('planetid')).data('selectedPlanetid', currentTarget.data('planetid'));
  basicData.find('.togglePanel').hide();
  basicData.find('.togglePanel li').removeClass('selected');
  basicData.find('.togglePanel ul #' + currentTarget.data('planetid')).addClass('selected');
  basicData.find('.toggleLink').html(currentTarget.html());
}

function loadPlanetInfo(obj) {
  let loadDataSection = $(obj).closest("div.selectWrapper");
  let inputField = loadDataSection.find(".toggleLink").first();
  let attackType = $(obj).data('attackType');
  let isBaseDefender = attackType === 2 && $(obj).data('participantId') === $('fleet-content[data-attack-type=2]').first().data('participantId');
  loadPlanetAction(inputField.data('selectedPlanetid'), $(obj), isBaseDefender, attackType);
  simChanged(obj);
}

function loadInfoParticipant(obj) {
  let loadDataSection = $(obj).closest("div.load_data");
  let inputField = loadDataSection.find("input").first();
  let attackType = inputField.data('attackType');
  let isBaseDefender = attackType === 2 && inputField.data('participantId') === $('fleet-content[data-attack-type=2]').first().data('participantId');

  if (isJsonString(inputField.val())) {
    fillData($(obj).closest("fleet-content"), JSON.parse(inputField.val()), isBaseDefender, attackType);
  } else if (isReportString(inputField.val())) {
    loadSpyReport(inputField.val(), $(obj), isBaseDefender, attackType);
  }
}

function selectCharacterClass(obj) {
  let selection = 'neutral';
  characterClassArr.forEach(characterClass => {
    if (obj.attributes[characterClass]) selection = characterClass;
  });
  changeClass(obj, selection, 'characterclass');
}

function selectAllianceClass(obj) {
  let selection = 'neutral';
  allianceClassArr.forEach(allianceClass => {
    if (obj.attributes[allianceClass]) selection = allianceClass;
  });
  changeClass(obj, selection, 'allianceclass');
}

function switchParticipant(obj) {
  if ($(obj).hasClass('active')) {
    return;
  }

  let attackType = $(obj).data('attackType');
  let participantId = $(obj).data('participantId');
  let combatsimSection = $(obj).closest("combatsim-section");
  $('participant-header[data-attack-type="' + attackType + '"]').removeClass('active');
  $('participant-header[data-attack-type="' + attackType + '"][data-participant-id="' + participantId + '"]').addClass('active');
  $('fleet-content[data-attack-type="' + attackType + '"]:not(fleet-content[base-defender])').hide();
  $('fleet-content[data-attack-type="' + attackType + '"][data-participant-id="' + participantId + '"]').show(); //adjust buttons

  $(combatsimSection.find("fleet-section-clear .clearPlayer")).attr('data-participant-id', participantId).data('participantId', participantId).attr('data-attack-type', attackType).data('attackType', attackType);
  $(combatsimSection.find("fleet-section-clear .clearTechnologies")).attr('data-participant-id', participantId).data('participantId', participantId).attr('data-attack-type', attackType).data('attackType', attackType);
}

function deleteRequest(obj) {
  let simId = $(obj).data('simulationId');

  if (simId === 0) {
    return;
  }

  let creation = $("single-simulation[data-simulation-id=" + simId + "] .creation").html();
  let target = $("single-simulation[data-simulation-id=" + simId + "] .target span").html();
  let question = combatSimLoca.LOCA_COMBATSIM_DELETE_REQUEST.replace('#date#', creation).replace('#target#', target);
  errorBoxDecision(combatSimLoca.LOCA_COMBATSIM_DELETE, question, jsloca.LOCA_ALL_YES, jsloca.LOCA_ALL_NO, function () {
    deleteSim(simId);
  });
}

function deleteSim(simId) {
  let body = {
    _token: token,
    simId: simId
  };
  $.ajax({
    url: simBackendUrl + '&action=deleteSim',
    data: body,
    type: "POST",
    dataType: "json",
    success: function (json) {
      token = json.newAjaxToken;

      if (json.status === 'failure') {
        showNotification(json.errors[0].message, 'error');
        return;
      }

      if (json.status === 'success') {
        $("combatsim-list single-simulation[data-simulation-id=" + json.simId + "]").remove();
        showNotification(json.message, 'success');

        if (combatSimId === json.simId) {
          combatSimId = 0;
          loadSimDetails();
          $('#deleteCombatPlanning').attr('disabled', true).attr('data-simulation-id', 0).data('simulationId', 0);
          newCombatPlanning();
        }

        if ($("combatsim-list owned-sims single-simulation").length === 0) {
          $("combatsim-list owned-sims").append('<div className="noentries">' + combatSimLoca.LOCA_COMBATSIM_NO_SIMS_FOUND + '</div>');
        }

        $("combatsim-list .entryCount .current").html($("combatsim-list single-simulation").length);
      }
    },
    error: function () {
      showNotification(combatSimLoca.LOCA_ERROR_DEFAULT, 'error');
    }
  });
}

function saveSimName(obj) {
  let simId = $(obj).data('simulationId');

  if (simId === 0 || simId !== combatSimId) {
    return;
  }

  let simName = $('combatsim-name input[name=simulationName]').val();
  let body = {
    _token: token,
    simId: simId,
    simName: simName
  };
  $.ajax({
    url: simBackendUrl + '&action=saveSimName',
    data: body,
    type: "POST",
    dataType: "json",
    success: function (json) {
      token = json.newAjaxToken;

      if (json.status === 'failure') {
        showNotification(json.errors[0].message, 'error');
        return;
      }

      if (json.status === 'success') {
        $("combatsim-list single-simulation[data-simulation-id=" + json.simData.simId + "] .state span.simName").text(' - ' + json.simData.simName);
        $("combatsim-shortinfo .shortName span").text(json.simData.simName);
        showNotification(json.message, 'success');
      }
    },
    error: function () {
      showNotification(combatSimLoca.LOCA_ERROR_DEFAULT, 'error');
    }
  });
}

function filterPlayerNames(obj) {
  if ($(obj).val().length >= 3) {
    const filtered = Object.values(playerNames).filter(user => user.name.toLowerCase().includes($(obj).val().toLowerCase())).filter(function (user) {
      if (this.count < 5 && user.id > 0) {
        this.count++;
        return true;
      }

      return false;
    }, {
      count: 0
    });
    showUsers(filtered);
  }
}

function loadSimInfo(obj) {
  let simId = $(obj).data('simulationId');

  if (combatSimChanged === true) {
    let creation = $("single-simulation[data-simulation-id=" + simId + "] .creation").html();
    let target = $("single-simulation[data-simulation-id=" + simId + "] .target span").html();
    let question = combatSimLoca.LOCA_COMBATSIM_UNSAVED.replace('#date#', creation).replace('#target#', target);
    errorBoxDecision(jsloca.LOCA_NOTIFY_WARNING, question, jsloca.LOCA_ALL_YES, jsloca.LOCA_ALL_NO, function () {
      loadSim(simId);
    });
  } else {
    loadSim(simId);
  }
}

function saveRequest() {
  let simId = combatSimId;

  if (combatSimProgress === true) {
    let creation = $("single-simulation[data-simulation-id=" + simId + "] .creation").html();
    let target = $("single-simulation[data-simulation-id=" + simId + "] .target span").html();
    let question = combatSimLoca.LOCA_COMBATSIM_RESULTS_ERASE.replace('#date#', creation).replace('#target#', target);
    errorBoxDecision(jsloca.LOCA_NOTIFY_WARNING, question, jsloca.LOCA_ALL_YES, jsloca.LOCA_ALL_NO, function () {
      saveSim();
    });
  } else {
    saveSim();
  }
}

function saveSim() {
  let completeCombatsSim = $("div#combatsim");
  let fleetContent, participantId, attackType;
  let attackerObj = {},
      defenderObj = {};
  let currentObject;
  let totalShipCount = 0;
  let firstDefender = $(completeCombatsSim.find("combatsim-section[base-defender] fleet-content")[0]);
  let mainDefenderParticipantId = firstDefender.data('participantId');
  firstDefender = $('fleet-content[data-attack-type="2"][data-participant-id="' + mainDefenderParticipantId + '"]:not(fleet-content[base-defender])');

  if ($(firstDefender.find("coordinates-section input[name='galaxy']")[0]).val().length === 0 || $(firstDefender.find("coordinates-section input[name='system']")[0]).val().length === 0 || $(firstDefender.find("coordinates-section input[name='position']")[0]).val().length === 0) {
    showNotification(combatSimLoca.LOCA_COMBATSIM_INVALID_TARGET, 'warning');
    return;
  }

  completeCombatsSim.find("fleet-content").each(function () {
    fleetContent = $(this);
    participantId = fleetContent.data('participantId');

    if (typeof participantId === 'undefined') {
      return;
    }

    attackType = fleetContent.data('attackType');

    if (attackType === 1) {
      currentObject = attackerObj;
    } else {
      currentObject = defenderObj;
    }

    if (!currentObject[participantId]) {
      currentObject[participantId] = {
        resources: {},
        researches: {},
        ships: {},
        defenses: {},
        missiles: {},
        bonuses: {},
        fleetspeed: 10,
        allianceClassId: $(fleetContent.find("basic-data class-selection input.allianceClass")[0]).data('classId'),
        characterClassId: $(fleetContent.find("basic-data class-selection input.characterClass")[0]).data('classId'),
        coords: {
          galaxy: $(fleetContent.find("coordinates-section input[name='galaxy']")[0]).val(),
          system: $(fleetContent.find("coordinates-section input[name='system']")[0]).val(),
          position: $(fleetContent.find("coordinates-section input[name='position']")[0]).val()
        }
      };
    }

    let fleetSpeedElement = $(fleetContent.find("fleetspeed-section")[0]);

    if (fleetSpeedElement.length) {
      currentObject[participantId].fleetspeed = fleetSpeedElement.find("input[name='speed[" + attackType + "][" + participantId + "]']:checked").val();
    }

    let technologyId, classId;
    $(fleetContent.find("research-section")[0]).find("input").each(function () {
      technologyId = $(this).data('technologyId');

      if (technologyId >= 100 && technologyId < 200) {
        currentObject[participantId].researches[technologyId] = parseInt($(this).val().length === 0 ? 0 : $(this).val());
        const characterClassName = findClassName(characterClassArr, currentObject[participantId]['characterClassId']);

        if (characterClassBonuses[characterClassName] && characterClassBonuses[characterClassName][technologyId]) {
          currentObject[participantId].researches[technologyId] = Math.max(0, currentObject[participantId].researches[technologyId] - characterClassBonuses[characterClassName][technologyId]);
        }

        const allianceClassName = findClassName(allianceClassArr, currentObject[participantId]['allianceClassId']);

        if (allianceClassBonuses[allianceClassName] && allianceClassBonuses[allianceClassName][technologyId]) {
          currentObject[participantId].researches[technologyId] = Math.max(0, currentObject[participantId].researches[technologyId] - allianceClassBonuses[allianceClassName][technologyId]);
        }
      }
    });
    let lfData = fleetContent.find("lifeform-data").first();
    $(fleetContent.find("ship-section")[0]).find("input").each(function () {
      technologyId = $(this).data('technologyId');

      if (technologyId >= 200 && technologyId < 300) {
        totalShipCount += parseInt($(this).val().length === 0 ? 0 : $(this).val());
        currentObject[participantId].ships[technologyId] = {
          amount: parseInt($(this).val().length === 0 ? 0 : $(this).val()),
          weapon: lfData.find("input[name='weapon[" + technologyId + "]']").val() / 100,
          shield: lfData.find("input[name='shield[" + technologyId + "]']").val() / 100,
          armor: lfData.find("input[name='armor[" + technologyId + "]']").val() / 100,
          cargo: lfData.find("input[name='cargo[" + technologyId + "]']").val() / 100,
          speed: lfData.find("input[name='speed[" + technologyId + "]']").val() / 100,
          fuel: lfData.find("input[name='fuel[" + technologyId + "]']").val() / 100
        };
      }
    });
    fleetContent.find(".resource-row input").each(function () {
      if ($(this).data('resource')) {
        currentObject[participantId].resources[$(this).data('resource')] = parseInt($(this).val().length === 0 ? 0 : $(this).val());
      }
    });
    lfData.find("characterclass-bonus input").each(function () {
      classId = $(this).data('classId');

      if (classId > 0) {
        currentObject[participantId].bonuses.characterClassBooster = {
          1: parseFloat(lfData.find("input[name='classBonus[1]']").val().length === 0 ? 0 : lfData.find("input[name='classBonus[1]']").val() / 100),
          2: parseFloat(lfData.find("input[name='classBonus[2]']").val().length === 0 ? 0 : lfData.find("input[name='classBonus[2]']").val() / 100),
          3: parseFloat(lfData.find("input[name='classBonus[3]']").val().length === 0 ? 0 : lfData.find("input[name='classBonus[3]']").val() / 100)
        };
      }
    });
    $(fleetContent.find("defense-section")[0]).find("input").each(function () {
      technologyId = $(this).data('technologyId');

      if (technologyId >= 200 && technologyId < 300) {
        totalShipCount += parseInt($(this).val().length === 0 ? 0 : $(this).val());
        currentObject[participantId].ships[technologyId] = {
          amount: parseInt($(this).val().length === 0 ? 0 : $(this).val()),
          weapon: firstDefender.find("lifeform-data input[name='weapon[" + technologyId + "]']").val() / 100,
          shield: firstDefender.find("lifeform-data input[name='shield[" + technologyId + "]']").val() / 100,
          armor: firstDefender.find("lifeform-data input[name='armor[" + technologyId + "]']").val() / 100,
          cargo: firstDefender.find("lifeform-data input[name='cargo[" + technologyId + "]']").val() / 100,
          speed: firstDefender.find("lifeform-data input[name='speed[" + technologyId + "]']").val() / 100,
          fuel: firstDefender.find("lifeform-data input[name='fuel[" + technologyId + "]']").val() / 100
        };
      }

      if (technologyId >= 400 && technologyId < 500) {
        totalShipCount += parseInt($(this).val().length === 0 ? 0 : $(this).val());
        currentObject[participantId].defenses[technologyId] = {
          amount: parseInt($(this).val().length === 0 ? 0 : $(this).val()),
          weapon: lfData.find("input[name='weapon[" + technologyId + "]']").val() / 100,
          shield: lfData.find("input[name='shield[" + technologyId + "]']").val() / 100,
          armor: lfData.find("input[name='armor[" + technologyId + "]']").val() / 100
        };
      }

      if (technologyId >= 500 && technologyId < 600) {
        currentObject[participantId].missiles[technologyId] = {
          amount: parseInt($(this).val().length === 0 ? 0 : $(this).val())
        };
      }

      currentObject[participantId].bonuses.denCapacity = {
        metal: parseFloat(lfData.find("input[name='denCapacity[22]']").val().length === 0 ? 0 : lfData.find("input[name='denCapacity[22]']").val() / 100),
        crystal: parseFloat(lfData.find("input[name='denCapacity[23]']").val().length === 0 ? 0 : lfData.find("input[name='denCapacity[23]']").val() / 100),
        deuterium: parseFloat(lfData.find("input[name='denCapacity[24]']").val().length === 0 ? 0 : lfData.find("input[name='denCapacity[24]']").val() / 100)
      };
      currentObject[participantId].bonuses.lifeformProtection = parseFloat(lfData.find("input[name='special[11112]']").val().length === 0 ? 0 : lfData.find("input[name='special[11112]']").val() / 100);
      currentObject[participantId].bonuses.moonChanceIncrease = parseFloat(lfData.find("input[name='special[12112]']").val().length === 0 ? 0 : lfData.find("input[name='special[12112]']").val() / 100);
      currentObject[participantId].bonuses.recycleAttackerFleet = parseFloat(lfData.find("input[name='special[13112]']").val().length === 0 ? 0 : lfData.find("input[name='special[13112]']").val() / 100);
      currentObject[participantId].bonuses.spaceDockExtender = parseFloat(lfData.find("input[name='special[14112]']").val().length === 0 ? 0 : lfData.find("input[name='special[14112]']").val() / 100);
    });
    let miscSection = $(fleetContent.find("misc-section")[0]);

    if (miscSection.length) {
      currentObject[participantId].engineerActive = $("#square-checkboxEngineer").is(':checked');
      currentObject[participantId].lootFood = $("#square-checkboxFoodLoot").is(':checked');
      currentObject[participantId].lootModifier = $('misc-section input[name=lootModifier]:checked').val();
    }

    if (attackType === 1) {
      attackerObj = currentObject;
    } else {
      defenderObj = currentObject;
    }
  });

  if (Object.keys(attackerObj).length + Object.keys(defenderObj).length > combatSimMaxParticipants) {
    showNotification(combatSimLoca.LOCA_COMBATSIM_TOO_MUCH_PARTICIPANTS.replace("#number#", combatSimMaxParticipants), 'error');
    return;
  }

  if (totalShipCount > combatSimMaxShips) {
    showNotification(combatSimLoca.LOCA_COMBATSIM_TOO_MUCH_SHIPS.replace("#number#", combatSimMaxShips.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ".")), 'error');
    return;
  }

  let body = {
    _token: token,
    simId: combatSimId,
    participants: JSON.stringify({
      attacker: attackerObj,
      defender: defenderObj
    })
  };
  $.ajax({
    url: simBackendUrl + '&action=saveSim',
    data: body,
    type: "POST",
    dataType: "json",
    success: function (json) {
      token = json.newAjaxToken;

      if (typeof json.simData == 'object') {
        combatSimChanged = false;
        let combatSimIdBeforeSave = combatSimId;
        $("gradient-button button#saveCombatPlanning div.emoji").remove();
        $("#saveCombatPlanning").prop('disabled', true);
        showNotification(json.message, 'success'); // update short info

        $('combatsim-shortinfo .shortSimId span').html(json.simData.simId);
        $('combatsim-shortinfo .shortTarget span').html(json.simData.simName + ' ' + json.simData.target);
        $('combatsim-shortinfo .shortAttackerCount span').html(json.simData.attackerCount);
        $('combatsim-shortinfo .shortDefenderCount span').html(json.simData.defenderCount);
        $('combatsim-shortinfo .shortShipCount span').html(json.simData.shipCount);
        combatSimId = json.simData.simId;
        $('#deleteCombatPlanning').attr('data-simulation-id', combatSimId).data('simulationId', combatSimId);

        if (json.simData.isOwner === 0) {
          $('#deleteCombatPlanning').removeAttr('disabled');
          $("#simulateCombatPlanning").removeAttr('disabled');

          if ($("combatsim-list owned-sims .noentries").length === 1) {
            $("combatsim-list owned-sims .noentries").remove();
          }
        } else {
          $("#deleteCombatPlanning").prop('disabled', true);
          $("#simulateCombatPlanning").prop('disabled', true);
        } // update overview


        if ($("combatsim-list single-simulation[data-simulation-id=" + json.simData.simId + "]").length === 0) {
          if (json.simData.isOwner === 0) {
            $("combatsim-list owned-sims").append(json.simData.singleSimTemplate);
          }
        } else {
          $("combatsim-list single-simulation[data-simulation-id=" + json.simData.simId + "] .target span").html(json.simData.target);
          $("combatsim-list single-simulation[data-simulation-id=" + json.simData.simId + "] .attackerCount span").html(json.simData.attackerCount);
          $("combatsim-list single-simulation[data-simulation-id=" + json.simData.simId + "] .defenderCount span").html(json.simData.defenderCount);
          $("combatsim-list single-simulation[data-simulation-id=" + json.simData.simId + "] .shipCount span").html(json.simData.shipCount);
        }

        $("combatsim-list .entryCount .current").html($("combatsim-list owned-sims single-simulation").length);

        if (combatSimIdBeforeSave !== combatSimId) {
          loadSimDetails();
        }
      }

      if (json.status === 'failure') {
        showNotification(json.errors[0].message, 'error');

        if (json.errors[0].error === 280001) {
          newCombatPlanning();
          $("combatsim-list single-simulation[data-simulation-id=" + body.simId + "]").remove();
        }
      }
    },
    error: function () {
      showNotification(combatSimLoca.LOCA_ERROR_DEFAULT, 'error');
    }
  });
}

function removeCombatSim(simId) {
  if (combatSimId === simId) {
    combatSimId = 0;
    newCombatPlanning();
  }

  $(`combatsim-list single-simulation[data-simulation-id="${simId}"]`).remove();
}

function changeCombatSimState(simId, state) {
  let element = $(`combatsim-section[overview] single-simulation[data-simulation-id='${simId}'] .state .status`);
  let action = $(`combatsim-section[overview] single-simulation[data-simulation-id='${simId}'] sim-actions button.overlay`);
  let shortAction = $('#showCombatResultShortInfo');
  action.hide();

  switch (state) {
    case 1:
      element.text(jsloca.COMBATSIM_PENDING).removeClass('planning done').addClass('pending');
      break;

    case 2:
      element.text(jsloca.COMBATSIM_DONE).removeClass('planning pending').addClass('done');
      action.show();
      shortAction.removeAttr('disabled').attr('data-target', action.data('target'));
      break;

    default:
      element.text(jsloca.COMBATSIM_PLANNING).removeClass('pending done').addClass('planning');
  }
}

function loadSim(simId) {
  let body = {
    _token: token,
    simId: simId
  };
  $.ajax({
    url: simBackendUrl + '&action=loadSim',
    data: body,
    type: "POST",
    dataType: "json",
    success: function (json) {
      token = json.newAjaxToken;

      if (json.status === 'success') {
        newCombatPlanning(); // update short info

        $('combatsim-shortinfo .shortSimId span').html(json.simData.simId);
        $('combatsim-shortinfo .shortName span').html(json.simData.simName);
        $('combatsim-shortinfo .shortTarget span').html('[' + json.simData.galaxy + ':' + json.simData.system + ':' + json.simData.position + ']');
        $('combatsim-shortinfo .shortAttackerCount span').html(json.simData.attackerCount);
        $('combatsim-shortinfo .shortDefenderCount span').html(json.simData.defenderCount);
        $('combatsim-shortinfo .shortShipCount span').html(json.simData.shipCount);
        combatSimId = json.simData.simId;
        $('#deleteCombatPlanning').removeAttr('disabled').attr('data-simulation-id', combatSimId).data('simulationId', combatSimId);
        let combatSimSection;

        if (json.simData.attackerCount > 1) {
          combatSimSection = $("combatsim-section[data-attack-type=1]").first();
          Object.keys(json.simData.data.attacker).slice(1).forEach(participantId => {
            addParticipant(combatSimSection, participantId);
          });
        }

        if (json.simData.defenderCount > 1) {
          combatSimSection = $("combatsim-section[data-attack-type=2]").first();
          Object.keys(json.simData.data.defender).slice(1).forEach(participantId => {
            addParticipant(combatSimSection, participantId);
          });
        }

        let attackType = 1;
        let isBaseDefender = false;
        Object.keys(json.simData.data.attacker).forEach(index => {
          adjustResearchClassBonuses(json.simData.data.attacker[index]);
          fillData($("fleet-content[data-participant-id=" + index + "][data-attack-type=1]").first(), json.simData.data.attacker[index], isBaseDefender, attackType);
        });
        attackType = 2;
        isBaseDefender = true;
        Object.keys(json.simData.data.defender).forEach(index => {
          adjustResearchClassBonuses(json.simData.data.defender[index]);
          const element = json.simData.data.defender[index];

          if (isBaseDefender === true) {
            index = 0;

            if (element.engineerActive === true) {
              $("#square-checkboxEngineer").attr('checked', true);
            } else {
              $("#square-checkboxEngineer").removeAttr('checked');
            }

            if (element.lootFood === true) {
              $("#square-checkboxFoodLoot").attr('checked', true);
            } else {
              $("#square-checkboxFoodLoot").removeAttr('checked');
            }

            $("fleet-content[base-defender] misc-section input[name='lootModifier']").removeAttr('checked');
            $("#round-radioLootModifier" + Math.floor((element.lootModifier - 0.25) / 0.25)).attr('checked', true);
          }

          fillData($("fleet-content[data-participant-id=" + index + "][data-attack-type=2]").first(), element, isBaseDefender, attackType);
          isBaseDefender = false;
        });
        combatSimChanged = false;
        $("gradient-button button#saveCombatPlanning div.emoji").remove();

        if (parseInt(json.simData.type) === 0) {
          $("#deleteCombatPlanning").removeAttr('disabled');

          if (json.simStateProgress === true) {
            $("#simulateCombatPlanning").prop('disabled', true);
          } else {
            $("#simulateCombatPlanning").removeAttr('disabled');
          }
        } else {
          $("#deleteCombatPlanning").prop('disabled', true);
          $("#simulateCombatPlanning").prop('disabled', true);
        }

        $("#saveCombatPlanning").prop('disabled', true);
        loadSimDetails();
        showNotification(json.message, 'success');
      } else {
        showNotification(json.errors[0].message, 'error');

        if (json.errors[0].error === 280001) {
          newCombatPlanning();
          $("combatsim-list single-simulation[data-simulation-id=" + simId + "]").remove();
        }
      }
    },
    error: function () {
      showNotification(combatSimLoca.LOCA_ERROR_DEFAULT, 'error');
    }
  });
}

function addParticipant(combatsimSection, participantId = null) {
  let attackType = combatsimSection.data('attackType');
  combatsimSection.attr('show-lifeform', '0');
  combatsimSection.find("participants-headline").show();
  combatsimSection.find(".removeParticipantBtn").removeClass('disabled');

  if (participantId === null) {
    participantId = combatsimSection.find("participants-headline participant-header").last().data('participantId') + 1;
  }

  if ($("participant-header").length >= combatSimMaxParticipants) {
    showNotification(combatSimLoca.LOCA_COMBATSIM_TOO_MUCH_PARTICIPANTS.replace("#number#", combatSimMaxParticipants), 'error');
    return;
  } // handle participants


  $(combatsimSection.find("participant-header")).removeClass('active');
  let newParticipant = [{
    attackType: attackType,
    participantId: participantId
  }].map(participantHeaderTemplate).join('');
  let cloneParticipant = combatsimSection.find("participants-headline participant-header").last().clone(true);
  cloneParticipant.attr('data-participant-id', $(newParticipant).data('participantId')).data('participantId', $(newParticipant).data('participantId')).attr('data-attack-type', $(newParticipant).data('attackType')).data('attackType', $(newParticipant).data('attackType')).addClass('active').html($(newParticipant).html()).insertAfter(combatsimSection.find("participants-headline participant-header").last()); // handle new fleet

  let newFleetSection = [{
    attackType: attackType,
    participantId: participantId
  }].map(fleetContentTemplate).join('');

  if (attackType === 2) {
    newFleetSection = newFleetSection.replace(/tabindex=\"(\d.*?)\"/g, function (i, match) {
      return "tabindex=\"" + (parseInt(match) + 200) + "\"";
    });
  }

  let cloneFleet = combatsimSection.find("fleet-content").last().clone(true);
  let newElement = $(newFleetSection);
  $(combatsimSection.find("fleet-content")).hide();
  newElement.find("lifeform-data technology-icon[solarsatellite]").closest('div.technology-fullrow').hide();
  newElement.find("lifeform-data technology-icon[resbuggy]").closest('div.technology-fullrow').hide();
  cloneFleet.attr('data-participant-id', newElement.data('participantId')).data('participantId', newElement.data('participantId')).attr('data-attack-type', newElement.data('attackType')).data('attackType', newElement.data('attackType')).html(newElement.html()).show().insertAfter(combatsimSection.find("fleet-content").last());
  combatsimSection.find("participants-headline participant-header p").each(function (index, element) {
    $(element).html(index + 1);
  }); //adjust buttons

  $(combatsimSection.find("fleet-section-clear .clearPlayer")).attr('data-participant-id', participantId).data('participantId', participantId).attr('data-attack-type', attackType).data('attackType', attackType);
  $(combatsimSection.find("fleet-section-clear .clearTechnologies")).attr('data-participant-id', participantId).data('participantId', participantId).attr('data-attack-type', attackType).data('attackType', attackType);
  simChanged(combatsimSection);
}

function newCombatPlanning() {
  let participantId = 0,
      attackType;
  let completeCombatsSim = $("div#combatsim");
  completeCombatsSim.find("combatsim-section:not(combatsim-section[base-defender]):not(combatsim-section[overview])").each((index, element) => {
    const combatsimSection = $(element);
    combatsimSection.attr('show-lifeform', '0');
    attackType = $(combatsimSection.find("thick-headline-background")[0]).data('attackType'); // remove header

    combatsimSection.find("participants-headline participant-header").remove();
    let newParticipant = [{
      attackType: attackType,
      participantId: participantId
    }].map(participantHeaderTemplate).join('');
    combatsimSection.find("participants-headline").hide().append(newParticipant);
    combatsimSection.find("participants-headline participant-header p").each(function (index, element) {
      $(element).html(index + 1);
    }); // remove fleet sections

    let newFleetSection = [{
      attackType: attackType,
      participantId: participantId
    }].map(fleetContentTemplate).join('');

    if (attackType === 2) {
      newFleetSection = newFleetSection.replace(/tabindex=\"(\d.*?)\"/g, function (i, match) {
        return "tabindex=\"" + (parseInt(match) + 200) + "\"";
      });
    }

    combatsimSection.find("fleet-content").remove();
    let newElement = $(newFleetSection);

    if (attackType !== 2) {
      newElement.find("lifeform-data technology-icon[solarsatellite]").closest('div.technology-fullrow').hide();
      newElement.find("lifeform-data technology-icon[resbuggy]").closest('div.technology-fullrow').hide();
    }

    newElement.insertBefore(combatsimSection.find("fleet-section-clear")); //adjust buttons

    $(combatsimSection.find("fleet-section-clear .clearPlayer")).attr('data-participant-id', 0).data('participantId', 0).attr('data-attack-type', attackType).data('attackType', attackType);
    $(combatsimSection.find("fleet-section-clear .clearTechnologies")).attr('data-participant-id', 0).data('participantId', 0).attr('data-attack-type', attackType).data('attackType', attackType);
  });
  completeCombatsSim.find("fleet-content[base-defender] misc-section input").removeAttr('checked');
  completeCombatsSim.find("fleet-content[base-defender] misc-section #round-radioLootModifier2").attr('checked', true);
  completeCombatsSim.find("combatsim-section[base-defender] basic-data .resource-row input").val('');
  completeCombatsSim.find("combatsim-section[base-defender] basic-data defense-section input").val('');
  completeCombatsSim.find("combatsim-section[base-defender] lifeform-data input").val('');
  completeCombatsSim.find("combatsim-section[base-defender] lifeform-data").hide();
  completeCombatsSim.find("combatsim-section[base-defender]").attr('show-lifeform', '0');
  combatSimChanged = false;
  $("gradient-button button#saveCombatPlanning div.emoji").remove();
  combatSimId = 0;
  loadSimDetails();
  $('#deleteCombatPlanning').attr('disabled', true).attr('data-simulation-id', 0).data('simulationId', 0);
  $("combatsim-shortinfo div > span").html('-');
  $('#showCombatResultShortInfo').prop('disabled', true).attr('data-target', '');
  $("#saveCombatPlanning").prop('disabled', true);
  $("#simulateCombatPlanning").prop('disabled', true);
  $(".removeParticipantBtn").addClass('disabled');
}

function resetAnim(obj) {
  let currentTarget = $(obj);
  currentTarget.find('.togglePanel').hide();
  currentTarget.find('class-selection input').prop('checked', false);
}

function invitePlayerToSim(obj) {
  let simId = $(obj).data('simulationId');
  let playerId = $(obj).data('playerId');

  if ($("shared-participant").length >= combatSimMaxParticipants) {
    showNotification(combatSimLoca.LOCA_COMBATSIM_TOO_MUCH_PARTICIPANTS.replace("#number#", combatSimMaxParticipants), 'error');
    return;
  }

  if (combatSimId !== 0 && simId === combatSimId) {
    let body = {
      _token: token,
      simId: simId,
      playerId: playerId
    };
    $.ajax({
      url: simBackendUrl + '&action=invitePlayer',
      data: body,
      type: "POST",
      dataType: "json",
      success: function (json) {
        token = json.newAjaxToken;

        if (json.status === 'failure') {
          showNotification(json.errors[0].message, 'error');
          return;
        }

        if (json.status === 'success') {
          showNotification(json.message, 'success');
          loadSimDetails();
        }
      }
    });
  }
}

function removeParticipant(obj) {
  let simId = $(obj).data('simulationId');
  let playerId = $(obj).data('playerId');

  if (combatSimId !== 0 && simId === combatSimId) {
    let body = {
      _token: token,
      simId: simId,
      playerId: playerId
    };
    $.ajax({
      url: simBackendUrl + '&action=removePlayer',
      data: body,
      type: "POST",
      dataType: "json",
      success: function (json) {
        token = json.newAjaxToken;

        if (json.status === 'failure') {
          showNotification(json.errors[0].message, 'error');
          return;
        }

        if (json.status === 'success') {
          showNotification(json.message, 'success');
          loadSimDetails();
        }
      }
    });
  }
}

function loadSimDetails() {
  if (combatSimId === 0) {
    $("fleet-content[siminfo]").html('<div class="noentries">' + combatSimLoca.LOCA_COMBATSIM_NO_SIMS_FOUND + '</div>');
  } else {
    let body = {
      _token: token,
      simId: combatSimId
    };
    $.ajax({
      url: simInfoUrl,
      data: body,
      type: "POST",
      dataType: "json",
      success: function (json) {
        token = json.newAjaxToken;
        $("fleet-content[siminfo]").html(json.content[json.target]);
        updateSimShortInfo($('combatsim-intro combatsim-shortinfo'));

        if (combatSimProgress) {
          let action = $(`combatsim-section[overview] single-simulation[data-simulation-id='${combatSimId}'] sim-actions button.overlay`);
          let shortAction = $('#showCombatResultShortInfo');
          shortAction.removeAttr('disabled').attr('data-target', action.data('target'));
        }
      }
    });
  }
}

function updateSimShortInfo(element) {
  if (!element || !element.length) {
    return;
  }

  $('combatsim-shortinfo .shortSimId span').text(element.find('.shortSimId span').first().text());
  $('combatsim-shortinfo .shortTarget span').text(element.find('.shortTarget span').first().text());
  $('combatsim-shortinfo .shortAttackerCount span').text(element.find('.shortAttackerCount span').first().text());
  $('combatsim-shortinfo .shortDefenderCount span').text(element.find('.shortDefenderCount span').first().text());
  $('combatsim-shortinfo .shortShipCount span').text(element.find('.shortShipCount span').first().text());
}

function joinCombatSim(simId, playerId) {
  let body = {
    _token: token,
    simId: simId,
    playerId: playerId
  };
  $.ajax({
    url: simBackendUrl + '&action=joinSim',
    data: body,
    type: "POST",
    dataType: "json",
    success: function (json) {
      token = json.newAjaxToken;

      if (json.status === 'failure') {
        showNotification(json.errors[0].message, 'error');
        return;
      }

      if (json.status === 'success') {
        showNotification(json.message, 'success');
        window.open(combatSimUrl);
      }
    },
    error: function () {}
  });
}

function startSimulation(obj) {
  let body = {
    _token: token,
    simId: combatSimId
  };
  $.ajax({
    url: simBackendUrl + '&action=startSim',
    data: body,
    type: "POST",
    dataType: "json",
    success: function (json) {
      token = json.newAjaxToken;

      if (json.status === 'failure') {
        showNotification(json.errors[0].message, 'error');
        return;
      }

      if (json.status === 'success') {
        loadSimDetails();
        $("#simulateCombatPlanning").prop('disabled', true);
        showNotification(json.message, 'success');
      }
    },
    error: function () {}
  });
}

$(function () {
  $('thick-headline-background .minimizeBtn').on("click", function (event) {
    event.preventDefault();
    event.stopPropagation();

    if ($(event.currentTarget).hasClass('minimized')) {
      $(event.currentTarget).removeClass('minimized').html('&#128469;&#xFE0E;');
      $("combatsim-section[overview] combatsim-list").show();
      $("combatsim-section[overview] combatsim-shortinfo").show();
      $("combatsim-section[overview] combatsim-actions").removeAttr('style');
      $("combatsim-section[overview]").removeAttr('minimized');
    } else {
      $(event.currentTarget).addClass('minimized').html('&#128470;&#xFE0E;');
      $("combatsim-section[overview] combatsim-list").hide();
      $("combatsim-section[overview] combatsim-shortinfo").hide();
      $("combatsim-section[overview] combatsim-actions").css('flex-direction', 'row').css('width', '100%');
      $("combatsim-section[overview]").attr('minimized', true);
    }
  });
  $('thick-headline-background .addParticipantBtn').on("click", function (event) {
    event.preventDefault();
    event.stopPropagation();
    let combatsimSection = $($(event.currentTarget).closest("combatsim-section")[0]);
    addParticipant(combatsimSection);
  });
  $('thick-headline-background .removeParticipantBtn').on("click", function (event) {
    event.preventDefault();
    event.stopPropagation();
    let attackType = $(event.currentTarget).closest('thick-headline-background').data('attackType');
    let combatsimSection = $(event.currentTarget).closest("combatsim-section");

    if (combatsimSection.find("participant-header").length === 1) {
      return;
    }

    let currentActive = combatsimSection.find("participant-header.active").first();
    let participantId = currentActive.data('participantId');
    const sectionToRemove = combatsimSection.find("fleet-content[data-participant-id=" + participantId + "][data-attack-type=" + attackType + "]");
    const previousCoords = {
      galaxy: sectionToRemove.find("coordinates-section input[name='galaxy']").first().val(),
      system: sectionToRemove.find("coordinates-section input[name='system']").first().val(),
      position: sectionToRemove.find("coordinates-section input[name='position']").first().val()
    };
    sectionToRemove.remove();
    currentActive.remove();
    combatsimSection.find("participants-headline participant-header p").each(function (index, element) {
      $(element).html(index + 1);
    });
    let newActive = combatsimSection.find("fleet-content").first().data('participantId');
    combatsimSection.find("fleet-content[data-participant-id=" + newActive + "][data-attack-type=" + attackType + "]").show();
    combatsimSection.find("participants-headline participant-header[data-participant-id=" + newActive + "][data-attack-type=" + attackType + "]").addClass('active').show();

    if (combatsimSection.find("participant-header").length === 1) {
      combatsimSection.find("participants-headline").hide();
      combatsimSection.find(".removeParticipantBtn").addClass('disabled');
    } //adjust buttons


    $(combatsimSection.find("fleet-section-clear .clearPlayer")).attr('data-participant-id', newActive).data('participantId', newActive).attr('data-attack-type', attackType).data('attackType', attackType);
    $(combatsimSection.find("fleet-section-clear .clearTechnologies")).attr('data-participant-id', newActive).data('participantId', newActive).attr('data-attack-type', attackType).data('attackType', attackType); //adjust base defender

    let firstDefender = $("fleet-content[data-attack-type=2]:not(fleet-content[base-defender])").first();
    firstDefender.find("lifeform-data technology-icon[solarsatellite]").closest('div.technology-fullrow').show();
    firstDefender.find("lifeform-data technology-icon[resbuggy]").closest('div.technology-fullrow').show();
    let coordsGalaxy = firstDefender.find("coordinates-section input[name='galaxy']").first();
    let coordsSystem = firstDefender.find("coordinates-section input[name='system']").first();
    let coordsPosition = firstDefender.find("coordinates-section input[name='position']").first();

    if (coordsGalaxy.val() === '' || coordsSystem.val() === '' || coordsPosition.val() === '') {
      coordsGalaxy.val(previousCoords.galaxy);
      coordsSystem.val(previousCoords.system);
      coordsPosition.val(previousCoords.position);
    }

    $("fleet-content[base-defender]").attr('data-participant-id', firstDefender.data('participantId')).data('participantId', firstDefender.data('participantId'));
    simChanged(combatsimSection);
  });
  $('gradient-button #newCombatPlanning').on("click", function (event) {
    event.preventDefault();
    event.stopPropagation();
    newCombatPlanning();
  });
  $('gradient-button #saveCombatPlanning').on("click", function (event) {
    event.preventDefault();
    event.stopPropagation();
  });
});
$(document).ready(function () {
  let params = new URL(document.location).searchParams;
  let reportHash = params.get('reportHash');

  if (reportHash) {
    loadSpyReport(reportHash, $("fleet-content[data-participant-id=0][data-attack-type=2] .loadInfoParticipant"), true, 2);
  }
});

function closeCombatSimResultOverlay() {
  if (!$(".overlayDiv.combatSimResultOverlay").length) {
    return;
  }

  $(".overlayDiv.combatSimResultOverlay").remove();
}
/* Rounds start */


function getRoundData(round, participant, side = "attacker") {
  let remainingTechs = {};
  let lostTechs = {};
  let roundData = {};

  if (typeof combatData === 'undefined') {
    return roundData;
  }

  let {
    combatRounds
  } = combatData;

  if (!combatRounds[round]) {
    return roundData;
  }

  let currentRound = combatRounds[round];

  if (participant !== 'all') {
    if (currentRound[`${side}Ships`] && currentRound[`${side}Ships`][participant]) {
      remainingTechs = currentRound[`${side}Ships`][participant];
    }

    if (currentRound[`${side}Losses`] && currentRound[`${side}Losses`][participant]) {
      lostTechs = currentRound[`${side}Losses`][participant];
    }
  } else {
    if (currentRound[`${side}ShipsTotal`]) {
      remainingTechs = currentRound[`${side}ShipsTotal`];
    }

    if (currentRound[`${side}LossesInThisRoundTotal`]) {
      lostTechs = currentRound[`${side}LossesInThisRoundTotal`];
    }
  }

  Object.keys(remainingTechs).map(techId => {
    if (!roundData[techId]) {
      roundData[techId] = {
        "remaining": 0,
        "lost": 0
      };
    }

    roundData[techId].remaining = remainingTechs[techId];
  });
  Object.keys(lostTechs).map(techId => {
    if (!roundData[techId]) {
      roundData[techId] = {
        "remaining": 0,
        "lost": 0
      };
    }

    roundData[techId].lost = lostTechs[techId];
  });
  return roundData;
}

function selectRound(round) {
  let attacker = 'all';

  if ($('#combatSimReport .attacker .participant_select').length) {
    attacker = $('#combatSimReport .attacker .participant_select').val();
  }

  displayRoundData(round, attacker, 'attacker');
  let defender = 'all';

  if ($('#combatSimReport .defender .participant_select').length) {
    defender = $('#combatSimReport .defender .participant_select').val();
  }

  displayRoundData(round, defender, 'defender');
  displayRoundStatistics(round);
  $('.selectRoundBtn').removeAttr('disabled');
  $(`.selectRoundBtn[data-round-number=${round}]`).prop('disabled', true);
}

function displayRoundData(round, participant, side = "attacker") {
  let roundData = getRoundData(round, participant, side); // let shownTechIds = Object.keys(roundData)

  $(`#combatSimRounds .combat_participant.${side} .military_ships > li`).hide().removeClass('even odd');
  $(`#combatSimRounds .combat_participant.${side} .civil_ships > li`).hide().removeClass('even odd');
  $(`#combatSimRounds .combat_participant.${side} .defence_techs > li`).hide().removeClass('even odd');
  Object.keys(roundData).map(techId => {
    let {
      remaining,
      lost
    } = roundData[techId];

    if (remaining || lost) {
      $(`#${side}CombatSimTechRow_${techId}`).show();
      $(`#${side}CombatSimTechRow_${techId} .detail_shipsleft`).text(remaining);
      $(`#${side}CombatSimTechRow_${techId} .detail_shipslost`).text(-lost);
    }
  });
  let participantNumber = 0;

  if (participant !== 'all') {
    participantNumber = participant;
  }

  $(`.${side}CharacterClass characterclass-icon`).removeAttr(characterClassArr.join(' ')).attr(findClassName(characterClassArr, combatData[side][participantNumber].characterClassId), true);
  $(`.${side}AllianceClass allianceclass-icon`).removeAttr(allianceClassArr.join(' ')).attr(findClassName(allianceClassArr, combatData[side][participantNumber].allianceClassId), true);
  let visibleIterator = 0;
  $(`#combatSimRounds .combat_participant.${side} .military_ships li`).each(function (index, obj) {
    if ($(obj).is(':visible')) {
      if (visibleIterator % 2 === 0) {
        $(obj).addClass('odd');
      } else {
        $(obj).addClass('even');
      }

      visibleIterator++;
    }
  });
  $(`#combatSimRounds .combat_participant.${side} .combatShipsTitle`).show();

  if (!visibleIterator) {
    $(`#combatSimRounds .combat_participant.${side} .combatShipsTitle`).hide();
  }

  visibleIterator = 0;
  $(`#combatSimRounds .combat_participant.${side} .civil_ships li`).each(function (index, obj) {
    if ($(obj).is(':visible')) {
      if (visibleIterator % 2 === 0) {
        $(obj).addClass('odd');
      } else {
        $(obj).addClass('even');
      }

      visibleIterator++;
    }
  });
  $(`#combatSimRounds .combat_participant.${side} .civilShipsTitle`).show();

  if (!visibleIterator) {
    $(`#combatSimRounds .combat_participant.${side} .civilShipsTitle`).hide();
  }

  visibleIterator = 0;
  $(`#combatSimRounds .combat_participant.${side} .defence_techs li`).each(function (index, obj) {
    if ($(obj).is(':visible')) {
      if (visibleIterator % 2 === 0) {
        $(obj).addClass('odd');
      } else {
        $(obj).addClass('even');
      }

      visibleIterator++;
    }
  });
  $(`#combatSimRounds .combat_participant.${side} .defenceTechsTitle`).show();

  if (!visibleIterator) {
    $(`#combatSimRounds .combat_participant.${side} .defenceTechsTitle`).hide();
  }
}

function getRoundStatistic(round) {
  let statistic = {
    absorbedDamageAttacker: 0,
    absorbedDamageDefender: 0,
    fullStrengthAttacker: 0,
    fullStrengthDefender: 0,
    hitsAttacker: 0,
    hitsDefender: 0
  };

  if (typeof combatData === 'undefined') {
    return statistic;
  }

  let {
    combatRounds
  } = combatData;

  if (!combatRounds[round]) {
    return statistic;
  }

  let currentRound = combatRounds[round];

  if (currentRound.statistic) {
    statistic = currentRound.statistic;
  }

  return statistic;
}

function displayRoundStatistics(round) {
  let statistic = getRoundStatistic(round);
  Object.keys(statistic).map(statisticKey => {
    $(`#${statisticKey}`).text(statistic[statisticKey]);
  });
}

function getCombatResearchPercentages(side, participant = 'all') {
  let combatResearchPercentages = {
    weaponPercentage: 0,
    shieldPercentage: 0,
    armorPercentage: 0
  };

  if (typeof combatData === 'undefined') {
    return combatResearchPercentages;
  }

  if (!combatData[side]) {
    return combatResearchPercentages;
  }

  if (participant === 'all') {
    combatData[side].map(participantData => {
      if (participantData.weaponPercentage) {
        combatResearchPercentages.weaponPercentage += participantData.weaponPercentage;
      }

      if (participantData.shieldPercentage) {
        combatResearchPercentages.shieldPercentage += participantData.shieldPercentage;
      }

      if (participantData.armorPercentage) {
        combatResearchPercentages.armorPercentage += participantData.armorPercentage;
      }
    });
    combatResearchPercentages.weaponPercentage /= combatData[side].length;
    combatResearchPercentages.shieldPercentage /= combatData[side].length;
    combatResearchPercentages.armorPercentage /= combatData[side].length;
  } else {
    if (combatData[side] && combatData[side][participant]) {
      let participantData = combatData[side][participant];

      if (participantData.weaponPercentage) {
        combatResearchPercentages.weaponPercentage = participantData.weaponPercentage;
      }

      if (participantData.shieldPercentage) {
        combatResearchPercentages.shieldPercentage = participantData.shieldPercentage;
      }

      if (participantData.armorPercentage) {
        combatResearchPercentages.armorPercentage = participantData.armorPercentage;
      }
    }
  }

  return combatResearchPercentages;
}

function displayCombatResearchPercentages(side, participant) {
  let combatResarchPercentages = getCombatResearchPercentages(side, participant);
  $(`#combatSimRounds .combat_participant.${side} .${side}Weapon span`).text(`${combatResarchPercentages.weaponPercentage}%`);
  $(`#combatSimRounds .combat_participant.${side} .${side}Shield span`).text(`${combatResarchPercentages.shieldPercentage}%`);
  $(`#combatSimRounds .combat_participant.${side} .${side}Cover span`).text(`${combatResarchPercentages.armorPercentage}%`);
}

function findClassName(classArr, id) {
  return classArr[id] ?? classArr[0];
}

function findClassId(classArr, name) {
  return Math.max(0, classArr.indexOf(name));
}
/* rounds end */
/**
 * convert seconds to time interval for display. Usage in formatTime
 * @param timestamp Time interval in seconds
 * @param maxDigits count of shown digits
 * @param showUnits flag to use localized units
 * @param delimiter used delimiter
 * @param zerofill flag to use two digit zerofill
 * @param approx prefix for time string
 * @returns {string}
 */
function formatTimeWrapper(timestamp, maxDigits, showUnits, delimiter, zerofill, approx) {
  let timeUnits = {
    week: 604800,
    day: 86400,
    hour: 3600,
    minute: 60,
    second: 1
  };
  let timeString = "";

  for (let k in timeUnits) {
    let nv = Math.floor(timestamp / timeUnits[k]);

    if (maxDigits > 0 && (nv > 0 || zerofill && timeString !== "")) {
      timestamp = timestamp - nv * timeUnits[k];

      if (timeString !== "") {
        timeString += delimiter;

        if (nv < 10 && nv > 0 && zerofill) {
          nv = "0" + nv;
        }

        if (nv === 0) {
          nv = "00";
        }
      }

      timeString += nv + (showUnits ? LocalizationStrings.timeunits['short'][k] : '');
      maxDigits--;
    }
  }

  if (timestamp > 0) {
    timeString = approx + timeString;
  }

  return timeString;
}
/**
 * counter finished reload page
 * @param url
 */


function reload_page(url) {
  if (timerHandler && !timerHandler.pageReloadAlreadyTriggered) {
    timerHandler.pageReloadAlreadyTriggered = true;
    openParentLocation(url);
  }
}

class SimpleCountdownTimer {
  constructor(targetName, leftoverTime, reloadPage, countdownDoneFunction) {
    // default config
    this.timestamp = 0;
    this.maxDigits = 2;
    this.delimiter = " ";
    this.approx = "";
    this.showunits = true;
    this.zerofill = false;
    this.startTime = new Date().getTime();
    this.startLeftoverTime = parseInt(leftoverTime);
    this.targetName = targetName;
    this.reloadPage = reloadPage;
    this.countdownDoneFunction = countdownDoneFunction;
    this.timer = timerHandler.appendCallback(this.updateCountdown.bind(this));
    this.updateCountdown();
  }

  get getTimer() {
    return this.timer;
  }

  get getCurrentTimestring() {
    return formatTimeWrapper(this.getLeftoverTime(), this.maxDigits, this.showunits, this.delimiter, this.zerofill, this.approx);
  }

  getLeftoverTime() {
    let currTime = new Date();
    return Math.round(this.startLeftoverTime + (currTime.getTime() - this.startTime) * -1 / 1000);
  }

  updateCountdown() {
    let timeLeftInSeconds = this.getLeftoverTime();

    if (timeLeftInSeconds > 0) {
      $(this.targetName).text(this.getCurrentTimestring);
    } else {
      $(this.targetName).text(LocalizationStrings.status.ready);

      if (typeof this.countdownDoneFunction == 'function') {
        this.countdownDoneFunction();
      }

      if (timeLeftInSeconds <= -1 && timeLeftInSeconds > -12 && Math.abs(timeLeftInSeconds % 3) === 0 || timeLeftInSeconds <= -12 && timeLeftInSeconds > -180 && Math.abs(timeLeftInSeconds % 10) === 0) {
        if (this.reloadPage != null) {
          reload_page(this.reloadPage);
        }

        timerHandler.removeCallback(this.timer);
      }
    }
  }

}

class CountdownTimer {
  constructor(targetName, leftoverTime, reloadPage, countdownDoneFunction, primaryReloadViaWS, maxDigits = 2, countValue = -1) {
    // default config
    this.countValue = parseInt(countValue);
    this.timestamp = 0;
    this.maxDigits = parseInt(maxDigits); // with 2 seconds won't be show when time is > 1h

    this.delimiter = " ";
    this.approx = "";
    this.showunits = true;
    this.zerofill = false;
    this.startTime = new Date().getTime();
    this.startLeftoverTime = parseInt(leftoverTime);
    this.targetName = targetName;
    this.reloadPage = reloadPage;
    this.countdownDoneFunction = countdownDoneFunction;
    this.primaryReloadViaWS = primaryReloadViaWS;
    this.timer = timerHandler.appendCallback(this.updateCountdown.bind(this));
    this.updateCountdown();
  } // Getter


  get getCurrentTimestring() {
    return formatTimeWrapper(this.getLeftoverTime(), this.maxDigits, this.showunits, this.delimiter, this.zerofill, this.approx);
  } // Method


  getLeftoverTime() {
    let currTime = new Date();
    return Math.round(this.startLeftoverTime + (currTime.getTime() - this.startTime) * this.countValue / 1000);
  }

  updateCountdown() {
    let timeLeftInSeconds = this.getLeftoverTime();

    if (timeLeftInSeconds > 0) {
      $(`time.${this.targetName}`).text(this.getCurrentTimestring);
    } else {
      $(`time.${this.targetName}`).text(LocalizationStrings.status.ready);

      if (typeof this.countdownDoneFunction == 'function') {
        this.countdownDoneFunction();
      }

      if (timeLeftInSeconds <= -1 && timeLeftInSeconds > -12 && Math.abs(timeLeftInSeconds % 3) === 0 || timeLeftInSeconds <= -12 && timeLeftInSeconds > -180 && Math.abs(timeLeftInSeconds % 10) === 0) {
        if (this.reloadPage != null && !isOverlayOpen() && (!this.primaryReloadViaWS || this.primaryReloadViaWS === true && ogame.frontendActions.connected !== true)) {
          reload_page(this.reloadPage);
        }

        timerHandler.removeCallback(this.timer);
      }
    }
  }

}

class CountdownTimerUnit {
  constructor(targetName, leftoverTime, shipCount, targetTechnologyId, timePerUnit, reloadPage, maxDigits = 2) {
    // default config
    this.timestamp = 0;
    this.maxDigits = parseInt(maxDigits); // with 2 seconds won't be show when time is > 1h

    this.delimiter = " ";
    this.approx = "";
    this.showunits = true;
    this.zerofill = false;
    this.startTime = new Date().getTime();
    this.startLeftoverTime = parseInt(leftoverTime);
    this.shipCount = shipCount;
    this.timePerUnit = timePerUnit;
    this.targetTechnologyId = targetTechnologyId;
    this.targetName = targetName;
    this.reloadPage = reloadPage;
    this.timer = timerHandler.appendCallback(this.updateCountdown.bind(this));
    this.updateCountdown();
  } // Getter


  get getCurrentTimestring() {
    return formatTimeWrapper(this.getLeftoverTime(), this.maxDigits, this.showunits, this.delimiter, this.zerofill, this.approx);
  } // Method


  getLeftoverTime() {
    let currTime = new Date();
    return Math.round(this.startLeftoverTime + (currTime.getTime() - this.startTime) * -1 / 1000);
  }

  updateCountdown() {
    let timeLeftInSeconds = this.getLeftoverTime();
    let currentShipCount = parseInt($(`li.technology[data-technology=${this.targetTechnologyId}] span.amount`).attr('data-value'));
    let factor = Math.max(0, timeLeftInSeconds) / this.timePerUnit;
    $(`time.${this.targetName}`).text(this.getCurrentTimestring);

    if (factor > 0) {
      $(`li.technology[data-technology=${this.targetTechnologyId}][data-status="active"] .cooldownBackground`).css('height', factor * 100 + "%");
    } else {
      // let targetAmount = $(`li.technology[data-technology=${this.targetTechnologyId}] span.targetamount`).data('value')
      if (this.shipCount > 0) {
        this.shipCount--; // targetAmount--

        currentShipCount++;
      }

      if (this.shipCount >= 0) {
        // $(`li.technology[data-technology=${this.targetTechnologyId}] span.targetamount`).attr('data-value', targetAmount).text(targetAmount)
        $(`.shipSumCount.${this.targetName}`).text(this.shipCount);
      }

      $(`li.technology[data-technology=${this.targetTechnologyId}] span.amount`).attr('data-value', currentShipCount);
      $(`li.technology[data-technology=${this.targetTechnologyId}] span.amount .stockAmount`).text(gfNumberGetHumanReadable(currentShipCount));

      if (this.shipCount > 0) {
        this.startTime = new Date().getTime();
        this.startLeftoverTime = this.timePerUnit; // new CountdownTimerUnit(this.targetName, this.leftoverTime, this.shipCount, this.targetTechnologyId, this.timePerUnit, this.reloadPage)

        $(`time.${this.targetName}`).text(LocalizationStrings.status.ready);
      } else {
        if (timeLeftInSeconds <= -1 && timeLeftInSeconds > -6) {
          if (this.reloadPage != null && !isOverlayOpen()) {
            reload_page(this.reloadPage);
          }

          timerHandler.removeCallback(this.timer);
        }

        $(`time.${this.targetName}`).text(LocalizationStrings.status.ready);
      }
    }
  }

}
/*
 *	allgemeiner Countdown
 */


function oldcountdown(leftoverTime, maxDigits, countValue) {
  if (maxDigits == null || maxDigits == "") {
    maxDigits = 2;
  }

  var thisObj = this;
  thisObj.countValue = parseInt(countValue) || -1; // config

  thisObj.timestamp = 0;
  thisObj.maxDigits = parseInt(maxDigits); // bei 2 werden keine Sekunden gezeigt, wenn der Zeitraum > 1 h ist

  thisObj.delimiter = " "; // Trennzeichen

  thisObj.approx = ""; // wird vor Zeitstring angefuegt

  thisObj.showunits = true; // Einheiten zeigen

  thisObj.zerofill = false; // nullen auffuellen

  var localTime = new Date();
  thisObj.startTime = localTime.getTime(); // Script-Startzeit

  thisObj.startLeftoverTime = parseInt(leftoverTime); // Sekunden Restzeit

  this.getCurrentTimestring = function () {
    return formatTimeWrapper(thisObj.getLeftoverTime(), thisObj.maxDigits, thisObj.showunits, thisObj.delimiter, thisObj.zerofill, thisObj.approx);
  };

  this.getLeftoverTime = function () {
    var currTime = new Date();
    return Math.round(thisObj.startLeftoverTime + (currTime.getTime() - thisObj.startTime) * thisObj.countValue / 1000);
  };
}
/*
* Countdown fuer die Eventliste
*/


function eventboxCountdown(htmlObj, leftoverTime, parentElement, checkEventsUrl, checkEventIds) {
  if (typeof htmlObj !== 'object') {
    return;
  }

  var thisObj = this; // diese elemente werden veraendert

  thisObj.timeHtmlObj = htmlObj;

  this.updateCountdown = function () {
    thisObj.countdown.getCurrentTimestring();
    var timestamp = thisObj.countdown.getLeftoverTime();
    var timestring = thisObj.countdown.getCurrentTimestring();

    if (timestamp > 0) {
      $(thisObj.timeHtmlObj).html(timestring);
    } else {
      timerHandler.removeCallback(thisObj.timer);
      $(thisObj.timeHtmlObj).html(LocalizationStrings.status.ready); // checkEvents NICHT spammen:

      if (!timerHandler.checkEventsAlreadyQueued) {
        timerHandler.checkEventsAlreadyQueued = true;
        setTimeout(function () {
          $.post(checkEventsUrl, {
            ids: checkEventIds
          }, function (data) {
            var rowIDs = $.parseJSON(data);

            for (var index in rowIDs["rows"]) {
              $(parentElement).find("#eventRow-" + rowIDs["rows"][index]).remove();
              $(".union" + rowIDs["rows"][index]).remove();
            }

            $('.eventFleet').removeClass('odd');
            $('.partnerInfo').removeClass('part-even');
            $('.eventFleet:odd').addClass('odd');
            $('.partnerInfo:even').addClass('part-even');
            timerHandler.checkEventsAlreadyQueued = false;
          });
        }, 2500);
      } // else: wir sind noch innerhalb der 2,5 Sekunden vom letzten Aufruf (durch anderes Event)

    }
  };

  if (thisObj.timeHtmlObj) {
    // oldcountdown objekt
    thisObj.countdown = new oldcountdown(leftoverTime, 3);
    thisObj.timer = timerHandler.appendCallback(thisObj.updateCountdown);
    thisObj.updateCountdown();
  }
}
/*
* Einfacher Countdown mit Funktionsaufruf nach Ende des Countdowns
*/


function simpleCountdown(htmlObj, leftoverTime, countdownDoneFunction, countdownTickFunction) {
  if (typeof htmlObj !== 'object') {
    return;
  }

  var thisObj = this; // diese elemente werden veraendert

  thisObj.timeHtmlObj = $(htmlObj)[0];

  this.updateCountdown = function () {
    var timestamp = thisObj.countdownObject.getLeftoverTime();
    var timestring = thisObj.countdownObject.getCurrentTimestring();

    if (timestamp > 0) {
      $('#' + thisObj.timeHtmlObj.id).text(timestring);

      if (typeof countdownTickFunction == "string" && $.isFunction(window[countdownTickFunction])) {
        window[countdownTickFunction]();
      } else if ($.isFunction(countdownTickFunction)) {
        countdownTickFunction();
      }
    } else {
      timerHandler.removeCallback(thisObj.timer);
      $('#' + thisObj.timeHtmlObj.id).text(LocalizationStrings.status.ready);

      if (typeof countdownDoneFunction == "string" && $.isFunction(window[countdownDoneFunction])) {
        window[countdownDoneFunction]();
      } else if ($.isFunction(countdownDoneFunction)) {
        countdownDoneFunction();
      }
    }
  };

  if (typeof thisObj.timer != 'undefined') {
    timerHandler.removeCallback(thisObj.timer);
  }

  if (thisObj.timeHtmlObj) {
    // oldcountdown objekt
    thisObj.countdownObject = new oldcountdown(leftoverTime, 3);
    thisObj.timer = timerHandler.appendCallback(thisObj.updateCountdown);
    thisObj.updateCountdown();
  }
}

function countdownWithTickFunction(htmlObj, leftoverTime, totalTime, countdownDoneFunction, countdownTickFunction, maxDigits) {
  if (typeof htmlObj !== 'object') {
    return;
  }

  var thisObj = this; // diese elemente werden veraendert

  thisObj.timeHtmlObj = htmlObj;

  if (typeof $(htmlObj).attr("data-oldcountdown") != 'undefined') {
    timerHandler.removeCallback($(htmlObj).attr("data-oldcountdown"));
  }

  this.updateCountdown = function () {
    timestamp = thisObj.countdown.getLeftoverTime();
    timestring = thisObj.countdown.getCurrentTimestring();

    if (timestamp > 0) {
      thisObj.timeHtmlObj.innerHTML = timestring;

      if (typeof countdownTickFunction == "string" && $.isFunction(window[countdownTickFunction])) {
        window[countdownTickFunction](timestamp, totalTime);
      } else if ($.isFunction(countdownTickFunction)) {
        countdownTickFunction(timestamp, totalTime);
      }
    } else {
      timerHandler.removeCallback(thisObj.timer);
      thisObj.timeHtmlObj.innerHTML = LocalizationStrings.status.ready;

      if (typeof countdownDoneFunction == "string" && $.isFunction(window[countdownDoneFunction])) {
        window[countdownDoneFunction]();
      } else if ($.isFunction(countdownDoneFunction)) {
        countdownDoneFunction();
      }
    }
  };

  if (thisObj.timeHtmlObj) {
    // oldcountdown objekt
    thisObj.countdown = new oldcountdown(leftoverTime, maxDigits);
    thisObj.timer = timerHandler.appendCallback(thisObj.updateCountdown);
    thisObj.updateCountdown();
    $(htmlObj).attr("data-oldcountdown", thisObj.timer);
  }

  return thisObj;
}

function movementImageCountdown(htmlObj, leftoverTime, duration, isReturn, isRTL, routeLength) {
  if (typeof htmlObj !== 'object') {
    return;
  }

  var thisObj = this; // diese elemente werden veraendert

  thisObj.timeHtmlObj = htmlObj;

  this.updateCountdown = function () {
    thisObj.countdown.getCurrentTimestring();
    var timestamp = thisObj.countdown.getLeftoverTime();
    var timestring = thisObj.countdown.getCurrentTimestring();

    if (timestamp > 0) {
      percent = clampFloat(timestamp / duration, 0.0, 1.0);

      if (!isReturn) {
        pixel = Math.abs(routeLength - routeLength * percent);
      } else {
        pixel = Math.abs(routeLength * percent);
      }

      pixel = clampInt(Math.round(pixel), 0, routeLength);

      if (isRTL) {
        thisObj.timeHtmlObj.style['marginRight'] = pixel + 'px';
      } else {
        thisObj.timeHtmlObj.style['marginLeft'] = pixel + 'px';
      }
    }
  };

  if (thisObj.timeHtmlObj) {
    // oldcountdown objekt
    thisObj.countdown = new oldcountdown(leftoverTime, 3);
    timerHandler.appendCallback(thisObj.updateCountdown);
    thisObj.updateCountdown();
  }
}
function initItemActivation(currItemUuid) {
  inventoryObj.initalizeSlider(inventoryObj.items_inventory, "js_activeItemSlider", 395, 172, ' ', true, ' ', true, true);

  if (typeof currItemUuid == 'undefined' || currItemUuid.length == 0 || currItemUuid == 1) {
    // we can use this selector, because all Items in the set can be activated
    var $firstItem = $('.item_img_box .detail_button').filter(':first'); // there can only be no items if we're on a moon:

    if ($firstItem.length === 0) {
      $('#noItems').show();
      $('#itemDetailBox').hide();
      return;
    } else {
      $.bbq.pushState({
        'item': $firstItem.attr('ref')
      });
    }
  } else {
    $.bbq.pushState({
      'item': currItemUuid
    });
    $(window).trigger('hashchange');
  } // show cooldown for all active items:


  $('#activeBuffDetails .js_is_active').each(function () {
    $durationEl = $(this).parent().siblings('.js_duration');
    $pusherEl = $(this).parent().siblings('.pusher');
    startCooldown($durationEl, $pusherEl, 75);
  });
  $(document).undelegate('#activeBuffDetails .detail_button', 'click.updateItemDetails').delegate('#activeBuffDetails .detail_button', 'click.updateItemDetails', function () {
    if ($(this).hasClass('active')) {
      return;
    }

    $('#activeBuffDetails .detail_button').removeClass('active');
    $(this).addClass('active');
    $.bbq.pushState({
      'item': $(this).attr('ref')
    });
  }).undelegate('#activeBuffDetails .build-it', 'click.activateItem').delegate('#activeBuffDetails .build-it', 'click.activateItem', function () {
    activateItem($(this).attr('ref'));
  }).undelegate('#activeBuffDetails .buyAndActivate.dm.build-it_disabled', 'click.activateItem').delegate('#activeBuffDetails .buyAndActivate.dm.build-it_disabled', 'click.activateItem', function () {
    if (vacation) {
      return;
    }

    var uuid = $(this).attr('ref');

    if ($("#js_activeItemSlider>li a[ref='" + uuid + "']").length == 0) {
      return;
    }

    errorBoxDecision(LocalizationStrings.error, translation.buyDMDecision, LocalizationStrings.yes, LocalizationStrings.no, function () {
      window.location.href = $("#darkmatter_box a").attr("href");
    });
  }).undelegate('#activeBuffDetails .close_detail', 'click.changeHash').delegate('#activeBuffDetails .close_detail', 'click.changeHash', function () {
    $.bbq.pushState({
      'item': ''
    });
  });
}

function initBuffBar() {
  let slider = $('.sliderWrapper .active_items');
  slider.anythingSlider({
    buildNavigation: false,

    /* keine navigation zu einzelnen seiten */
    buildStartStop: false,

    /* keine start oder stop buttons */
    infiniteSlides: false,

    /* round robin abschalten */
    stopAtEnd: true
    /* zurueckspulen verhindern */

  });
  slider.removeClass('hidden');
  $(window).unbind("hashchange.openBuffBar").bind("hashchange.openBuffBar", function (hash) {
    var url = $.deparam.fragment(hash.fragment);

    if (typeof url['item'] != 'undefined') {
      var $activateItem = $('#buffBar .activate_item');
      $("#buffBar a").removeClass('active');
      var itemUuid = url['item'];

      if (itemUuid != '') {
        if ($("#activeBuffDetails:visible").length) {
          if (typeof inventoryObj.items_inventory[itemUuid] == 'undefined') {
            var $firstItem = $('#activeBuffDetails .detail_button').filter(':first');
            $.bbq.pushState({
              'item': $firstItem.attr('ref')
            });
            return;
          }

          $("#buffBar a[ref='" + url['item'] + "']").addClass('active');
          $activateItem.addClass('active');
          $('#noItems').hide();
          $('#itemDetailBox').show();
          updateItemDetails(itemUuid);
        } else {
          $("#buffBar a[ref='" + url['item'] + "']").addClass('active');
          $activateItem.addClass('active');
          gfSlider.slideIn(getElementByIdWithCache("detail"), itemUuid);
        }
      } else {
        if ($('#activeBuffDetails .detail_button').filter(':first').length === 0) {
          $('#noItems').show();
          $('#itemDetailBox').hide();
        }

        $("#activeBuffDetails .close_details").click();
        $activateItem.removeClass('active');
      }
    }
  });
  $(document).undelegate('#buffBar a', 'click.openDetails').delegate('#buffBar a', 'click.openDetails', function () {
    if ($(this).hasClass('active')) {
      $.bbq.pushState({
        'item': ''
      });
    } else {
      $.bbq.pushState({
        'item': $(this).attr('ref')
      });
    }
  });
  $('#buffBar').unbind('click.openDetails').bind('click.openDetails', function (event) {
    if (!$(event.target).is('#buffBar .activate_item') && !$(event.target).is('.arrow a')) {
      $('#buffBar .activate_item').click();
    }
  });
  $('#buffBar .active_items div:not(.activate_item)').each(function () {
    $durationEl = $(this).find('.js_duration');
    $pusherEl = $(this).find('.pusher');
    startCooldown($durationEl, $pusherEl, 32);
  });
  $(window).trigger('hashchange');
}

function getItem(uuid) {
  if (typeof inventoryObj.items_inventory[uuid] != 'undefined') {
    return inventoryObj.items_inventory[uuid];
  }

  return null;
}

function updateItemDetails(uuid) {
  var item = getItem(uuid);
  $('#activeBuffDetails .detail_button').removeClass('active');
  $('#activeBuffDetails .detail_button[ref="' + uuid + '"]').addClass('active');
  $('#activeBuffDetails .js_itemName').html(item.name);
  $('#activeBuffDetails .js_itemEffect').html(item.effect);
  $('#activeBuffDetails .js_itemAmount').html(item.amount);

  if (item.firstStatus) {
    $('#activeBuffDetails .js_itemDurationStatus').html(translation.durationType[item.firstStatus]);
  } else {
    $('#activeBuffDetails .js_itemDurationStatus').html(translation.durationType.effecting);
  }

  if (item.duration) {
    if (item.durationExtension) {
      $('#activeBuffDetails .js_itemDuration').html(formatTimeWrapper(item.duration, 2, true, " ", false, "") + item.durationExtension);
    } else {
      $('#activeBuffDetails .js_itemDuration').html(formatTimeWrapper(item.duration, 2, true, " ", false, ""));
    }
  } else if (item.duration === null) {
    if (item.moonOnlyItem) {
      $('#activeBuffDetails .js_itemDuration').html(translation.permanentMoon);
    } else {
      $('#activeBuffDetails .js_itemDuration').html(translation.permanent);
    }
  } else {
    $('#activeBuffDetails .js_itemDuration').html(translation.now);
  }

  if (item.timeLeft) {
    $('#activeBuffDetails .js_itemTimeLeftTxt').show();
    $('#activeBuffDetails .js_itemTimeLeft').html(formatTimeWrapper(item.timeLeft, 2, true, " ", false, ""));
  } else {
    $('#activeBuffDetails .js_itemTimeLeftTxt').hide();
  }

  var $activateBtn = $('#activationButton');
  $activateBtn.attr('ref', uuid);
  $activateBtn.removeClass('buyAndActivate activateItem build-it_disabled build-it dm bp').addClass(item.currency);

  if (item.amount > 0) {
    $activateBtn.addClass('activateItem').html('<span>' + (item.timeLeft > 0 && item.extendable ? translation.extend : translation.activate) + '</span>').addClass(item.canBeActivated ? 'build-it' : 'build-it_disabled');
  } else {
    var buyString = item.timeLeft > 0 && item.extendable ? translation.buyAndExtend : translation.buyAndActivate;
    buyString = buyString.replace(/%price%/, tsdpkt(item.costs));
    buyString = buyString.replace(/%currency%/, translation.currencies[item.currency]);
    $activateBtn.addClass('buyAndActivate').html('<span>' + buyString + '</span>').addClass(item.canBeBoughtAndActivated && item.hasEnoughCurrency ? 'build-it' : 'build-it_disabled');
  }
}

let startedActivation = false;

function noHandlerItemActivation() {
  startedActivation = false;
}

function activateItem(uuid) {
  if (startedActivation) {
    return;
  }

  startedActivation = true;
  var dataObject = {
    _token: token,
    itemUuid: uuid,
    referrerPage: $.deparam.querystring().page
  };
  var item = getItem(uuid);
  let action = 'buyAndActivate';

  if (item.amount > 0) {
    action = 'activate';
  }

  function updateItemAjax() {
    $.ajax({
      cache: false,
      url: inventoryObj.inventoryUrl + `&itemUuid=${uuid}&action=${action}`,
      data: dataObject,
      type: "GET",
      dataType: "json",
      success: function (data, textStatus, jqXHR) {
        token = data.newAjaxToken;

        if (data.status != 'success') {
          fadeBox(data.message, true);
          return;
        }

        if (data.reload) {
          location.href = getRedirectLink();
          return;
        }

        fadeBox(data.message, false);

        if (data.buff !== false) {
          // animate buff activation
          var item = getItem(data.buff);
          var isNew = true;
          var $activeItems = $('.active_items');
          var activeItemsSlider = $activeItems.data('AnythingSlider');
          var $buffElement;
          $activeItems.find('li a').removeClass('active');
          $activeItems.find('li a.activate_item').addClass('active'); // Prolong existing buff

          $activeItems.find('div[data-id=' + data.buffId + ']').each(function () {
            $(this).hide().show('pulsate').find('a').addClass('active');
            isNew = false;
            $buffElement = $(this);
          }); // Add a new buff

          if (isNew == true) {
            var $newItem = $('<div data-uuid="' + data.buff + '" data-id="' + data.buffId + '">' + '<div class="js_duration" style="display: none;"></div>' + '<a href="javascript:void(0);" ref="' + data.buff + '" class="detail_button slideIn active_item active r_' + data.item.rarity + ' border3px tooltipHTML" title=\'' + data.tooltip + '\'>' + '<div class="pusher" style="height: 0%; "></div>' + '<img src="/cdn/img/item-images/' + data.item.image + '-small.png" alt=""/>' + '</a>' + '</div>');
            var numberOfVisibleItemsInARow = 14; // gleicher Name in PHP
            // Store the number of the currently viewed page
            // In case the new item is appended to the page we already see, do not animate the slider
            // when switching to the new last page after repagination

            var currentSliderPage = activeItemsSlider.currentPage;
            var sliderAnimationTime = activeItemsSlider.options.animationTime; // If the new item leads to removal of existing buffs, handle that first

            if (data.upgraded) {
              $activeItems.find('div[data-id=' + data.upgraded + ']').remove();
            } // Add new item


            var numberOfBuffsInLastPage = $activeItems.children().last().children().length;

            if (numberOfBuffsInLastPage < numberOfVisibleItemsInARow) {
              // Item can be appended to existing last page
              $newItem.hide().appendTo($activeItems.children().last()).show('pulsate');

              if (currentSliderPage == activeItemsSlider.pages) {
                activeItemsSlider.options.animationTime = 0;
              }

              activeItemsSlider.gotoPage(activeItemsSlider.pages);

              if (currentSliderPage == activeItemsSlider.pages) {
                activeItemsSlider.options.animationTime = sliderAnimationTime;
              }
            } else {
              // Item does not fit into last page, so create new page
              $newItem = $newItem.hide().wrap('<li/>');
              $newItem.parent().appendTo($activeItems).children().last();
              activeItemsSlider.updateSlider();

              if (currentSliderPage == activeItemsSlider.pages) {
                activeItemsSlider.options.animationTime = 0;
              }

              activeItemsSlider.gotoPage(activeItemsSlider.pages);

              if (currentSliderPage == activeItemsSlider.pages) {
                activeItemsSlider.options.animationTime = sliderAnimationTime;
              }

              $newItem.show('pulsate');
            }

            $buffElement = $newItem;
          } else {
            var $oldItem = $('<div data-uuid="' + item.ref + '" data-id="' + data.buffId + '">' + '<div class="js_duration" style="display: none;"></div>' + '<a href="javascript:void(0);" ref="' + item.ref + '" class="detail_button slideIn active_item active r_' + data.item.rarity + ' border3px tooltipHTML" title="' + data.item.toolTip + '">' + '<div class="pusher" style="height: 0%; "></div>' + '<img src="/cdn/img/item-images/' + item.image + '-small.png" alt=""/>' + '</a>' + '</div>');
            var upgradedUuid = item.ref;
            $activeItems.find('div[data-uuid=' + upgradedUuid + ']').remove();
            $oldItem.hide().appendTo($activeItems.children().last()).show('pulsate');
            $buffElement = $oldItem;
          }

          var $pusherElement = $buffElement.find('.pusher');
          var $durationElement = $buffElement.find('.js_duration');
          $durationElement.attr('data-total-duration', data.duration).text(data.item.timeLeft);
          startCooldown($durationElement, $pusherElement, 32); // renew item buff box

          getAjaxResourcebox();
          $.ajax({
            type: "POST",
            url: detailUrl,
            data: {
              type: uuid
            },
            beforeSend: function () {
              $('#detailWrapper .detail_screen').html('<div id="techDetailLoading"></div>');
            },
            success: function (data) {
              $('#detailWrapper .detail_screen').html(data);
            }
          });
        }

        startedActivation = false;
      },
      error: function (data) {
        fadeBox("Error!", true);
        startedActivation = false;
      }
    });
  }

  if (item.isAnUpgrade) {
    errorBoxDecision(LocalizationStrings.activateItem.upgradeItemQuestionHeader, LocalizationStrings.activateItem.upgradeItemQuestion, LocalizationStrings.yes, LocalizationStrings.no, updateItemAjax, noHandlerItemActivation);
  } // character class items need extra confirmation box
  else if (item.isCharacterClassItem) {
    if (item.amount > 0) {
      errorBoxDecision(LocalizationStrings.notice, LocalizationStrings.characterClassItem.activateItemQuestion.replace('#characterClassName#', item.name), LocalizationStrings.yes, LocalizationStrings.no, updateItemAjax, noHandlerItemActivation);
    } else {
      errorBoxDecision(LocalizationStrings.notice, LocalizationStrings.characterClassItem.buyAndActivateItemQuestion.replace('#characterClassName#', item.name).replace('#darkmatter#', tsdpkt(item.costs)), LocalizationStrings.yes, LocalizationStrings.no, updateItemAjax, noHandlerItemActivation);
    }
  } // same as character class items
  else if (item.isAllianceClassItem) {
    if (item.amount > 0) {
      fetchDataAboutCurrentAllianceClass(item.name, updateItemAjax, 'activateItemQuestion', null);
    } else {
      fetchDataAboutCurrentAllianceClass(item.name, updateItemAjax, 'buyAndActivateItemQuestion', item.costs);
    }
  } else {
    updateItemAjax();
  }
}

function initEmpireEquipment() {
  $(".overview_equipment .item_img_box .hidden").each(function () {
    startCooldown($(this), $(this).parent().parent().find('.pusher'), 32);
  });
}

function startCooldown($durationEl, $pusherEl, maxHeight) {
  if ($.trim($durationEl.text()).match(/^\d+$/)) {
    var countdown = new countdownWithTickFunction($durationEl[0], parseInt($.trim($durationEl.text())), parseInt($durationEl.attr("data-total-duration")), function () {
      location.href = getRedirectLink(); // reload, damit das item verschwindet
    }, function (duration, totalDuration) {
      var faktor = 1 - duration / totalDuration;
      var realHeight = Math.floor(maxHeight * faktor);
      $pusherEl.css("height", realHeight + "px");
    });
  }
}

let activatingItem = false;

function fetchDataAboutCurrentAllianceClass(newClassName, upgradeItemAjax, questionType, price) {
  if (!activatingItem) {
    activatingItem = true;
    $.ajax({
      url: inventoryObj.ingameUrl,
      type: "GET",
      data: {
        component: 'allianceclassselection',
        action: 'fetchDataAboutCurrentAllianceClass',
        ajax: 1,
        asJson: 1
      },
      dataType: "json",
      error: function (error) {
        promptUserForAllianceClassChange(newClassName, upgradeItemAjax, questionType, price);
      },
      success: function (data) {
        promptUserForAllianceClassChange(newClassName, upgradeItemAjax, questionType, price, data);
      }
    });
  }
}

function promptUserForAllianceClassChange(newClassName, upgradeItemAjax, questionType, price, response) {
  activatingItem = false;

  if (response.userDoesNotHaveAlliance) {
    return 0;
  }

  let localizationString = LocalizationStrings.allianceClassItem[questionType];
  localizationString = localizationString.replace('#allianceClassName#', newClassName);

  if (questionType === 'buyAndActivateItemQuestion') {
    localizationString = localizationString.replace('#darkmatter#', tsdpkt(price));
  }

  if (response && response.currentAllianceClass && response.dateOfLastAllianceClassChange) {
    localizationString += LocalizationStrings.allianceClassItem.appendCurrentClassQuestion;
    localizationString = localizationString.replace('#currentAllianceClassName#', response.currentAllianceClass);
    localizationString = localizationString.replace('#lastAllianceClassChange#', response.dateOfLastAllianceClassChange);
  }

  errorBoxDecision(LocalizationStrings.notice, localizationString, LocalizationStrings.yes, LocalizationStrings.no, upgradeItemAjax);
}
function errorBoxAsArray(data) {
  if (data["type"] == "notify") {
    notifyBoxAsArray(data);
  } else if (data["type"] == "decision") {
    decisionBoxAsArray(data);
  } else if (data["type"] == "fadeBox") {
    fadeBox(data["text"], data["failed"]);
  }
}

function notifyBoxAsArray(data) {
  errorBoxNotify(data["title"], data["text"], data["buttonOk"], String(data["okFunction"]), data["removeOpen"], data["modal"]);
}

function fadeBox(message, failed, callback, duration) {
  if (failed) {
    $("#fadeBoxStyle").attr("class", "failed");
  } else {
    $("#fadeBoxStyle").attr("class", "success");
  }

  $("#fadeBoxContent").html(message);
  $("#fadeBox").stop(false, true).show().fadeOut(duration || 10000, callback);
}

let NotificationTimers = {};

function showNotification(message, type = 'info', headline = null) {
  let boxType = {
    error: {
      sign: '&#x2716;',
      cssClass: 'notification-error',
      headline: headline ?? jsloca.LOCA_NOTIFY_ERROR
    },
    info: {
      sign: '&#x2139;',
      cssClass: 'notification-info',
      headline: headline ?? jsloca.LOCA_NOTIFY_INFO
    },
    success: {
      sign: '&#x2714;',
      cssClass: 'notification-success',
      headline: headline ?? jsloca.LOCA_NOTIFY_SUCCESS
    },
    warning: {
      sign: '&#x2755;',
      cssClass: 'notification-warning',
      headline: headline ?? jsloca.LOCA_NOTIFY_WARNING
    }
  };
  let boxData = boxType[type] ?? boxType['info'];
  let notifyBoxId = Date.now();
  let notifyBox = `<notification id="${notifyBoxId}" class="${boxData.cssClass}">
            <notification-content>
                <notification-sign>${boxData.sign}</notification-sign>
                <notification-message>
                    <span class="headline">${boxData.headline}</span>
                    <span>${message}</span>
                </notification-message>
            </notification-content>
            <notification-close onclick="removeNotification(${notifyBoxId})">&#x2717;</notification-close>
            <notification-progress class=""></notification-progress>
        </notification>`;
  $("notification-container").append(notifyBox);
  let timer1 = setTimeout(() => {
    $("notification-container notification#" + notifyBoxId).addClass('active');
    $("notification-container notification#" + notifyBoxId + " notification-progress").addClass('active');
  }, 10);
  let timer2 = setTimeout(() => {
    $("notification-container notification#" + notifyBoxId).removeClass('active');
  }, 5010);
  let timer3 = setTimeout(() => {
    removeNotification(notifyBoxId);
  }, 5300);
  NotificationTimers[notifyBoxId] = {
    timer1: timer1,
    timer2: timer2,
    timer3: timer3
  };
}

function removeNotification(notifyBoxId) {
  $("notification-container notification#" + notifyBoxId).remove();
  clearTimeout(NotificationTimers[notifyBoxId].timer1);
  clearTimeout(NotificationTimers[notifyBoxId].timer2);
  clearTimeout(NotificationTimers[notifyBoxId].timer3);
  delete NotificationTimers[notifyBoxId];
}

function decisionBoxAsArray(data) {
  errorBoxDecision(data["title"], data["text"], data["buttonOk"], data["buttonNOk"], String(data["okFunction"]), String(data["nokFunction"]), data["removeOpen"]);
}

function errorBoxDecision(head, content, yes, no, yesHandler, noHandler, useHashCharacter) {
  var useHash = getIEVersion() <= 9 && (useHashCharacter || false);
  var errorBox = $("#errorBoxDecision");
  errorBox.find("#errorBoxDecisionHead").html(head);
  errorBox.find("#errorBoxDecisionContent").html(content);

  var yesFunction = function (e) {
    e.stopPropagation();

    if (typeof errorBox.data('uiDialog') != 'undefined') {
      errorBox.dialog('destroy');
    }

    if (typeof yesHandler == 'function') {
      yesHandler();
    }

    if (yesHandler == 'submit_planet_delete_form') {
      $('#planetMaintenanceDelete').submit();
    }
  };

  var noFunction = function (e) {
    e.stopPropagation();

    if (typeof errorBox.data('uiDialog') != 'undefined') {
      errorBox.dialog('destroy');
    }

    if (noHandler == 'reload') {
      location.reload();
    }

    if (typeof noHandler == 'function') {
      noHandler();
    }
  }; // workaround for firefox instantly firing yes on click event when the error box was opened via keyboard enter event:
  // setting a timeout with the event bindings


  errorBox.find(".yes, .no").unbind('click');
  errorBox.unbind('keydown.yesHandler');
  setTimeout(function () {
    var $yesButton = errorBox.find('.yes');
    var $noButton = errorBox.find('.no');
    $yesButton.unbind('click').bind('click', yesFunction).focus().find("#errorBoxDecisionYes").html(yes);
    $noButton.unbind('click').bind('click', noFunction).find("#errorBoxDecisionNo").html(no);

    if (useHash) {
      $yesButton.attr('href', '#');
      $noButton.attr('href', '#');
    } else {
      $yesButton.attr('href', 'javascript:void(0);');
      $noButton.attr('href', 'javascript:void(0);');
    }

    errorBox.bind('keydown.yesHandler', function (e) {
      if (e.which == KeyEvent.DOM_VK_RETURN) {
        errorBox.find('.yes').trigger('click');
      }
    });
  }, 100);
  Tipped.hideAll();
  errorBox.dialog({
    resizable: false,
    modal: true,
    title: head,
    close: noFunction,
    width: 400,
    dialogClass: 'errorBox'
  });
}

function errorBoxNotify(head, content, ok, okHandler, useHashCharacter) {
  var useHash = getIEVersion() <= 9 && (useHashCharacter || false);
  var errorBox = $("#errorBoxNotify");
  errorBox.find("#errorBoxNotifyHead").html(head);
  errorBox.find("#errorBoxNotifyContent").html(content);

  var okFunction = function (e) {
    e.stopPropagation();
    errorBox.dialog('destroy');

    if (typeof okHandler == 'function') {
      okHandler();
    } else if (typeof window[okHandler] == "function") {
      window[okHandler]();
    }
  };

  var $okButton = errorBox.find('.ok');
  $okButton.unbind('click').bind('click', okFunction).find("#errorBoxNotifyOk").html(ok);

  if (useHash) {
    $okButton.attr('href', '#');
  } else {
    $okButton.attr('href', 'javascript:void(0);');
  }

  Tipped.hideAll();
  errorBox.dialog({
    resizable: false,
    modal: true,
    title: head,
    close: okFunction,
    width: 400,
    dialogClass: 'errorBox'
  });
}
/* 
    Document   : eventBirthday
    Created on : 31.08.2012, 12:16:13
    Author     : stefanie.knoth
    Description:
        This file contains the javascript that is neccessary for the Birthday 
        Event
*/
function eventBDayInitGalaxy() {
  if (isMobile) {
    $('.js_bday_details').hide();
    $('.bdaySlotBox .name').click(function (e) {
      $('.row').children().each(function () {
        if ($(this).html().trim()) $(this).removeClass('active');
      });
      $('.bdaySlotBox .name').removeClass('active');
      $('.js_detailRow').hide();
      $(this).toggleClass('active');

      if ($(e.target).attr('class').indexOf('planet') !== -1) {
        $('.js_detailRowPlanet17').toggle();
      } else if ($(e.target).attr('class').indexOf('debris') !== -1) {
        $('.js_detailRowDebris17').toggle();
      }
    });
  }
}

function eventBDayInit() {
  var $event_box = $('.event_box');
  $('#eventBDayWrapper').click(function (e) {
    if ($(e.target).attr('id') === 'BDayContent' || $(e.target).attr('id') === 'BDayEventClose' || $(e.target).closest('#BDayHeader').length > 0) {
      $event_box.hide();
      $('.bday_box').removeClass('active');
    }

    e.stopPropagation();
  });
  $('.bday_box').click(function (e) {
    $('.bday_box').removeClass('active');
    var boxId = $(e.target).closest('.bday_box').attr('id').replace('box', '');
    $event_box.removeClass().addClass('event_box ' + eventBoxData[boxId].eventTypeClass);

    if (eventBoxData[boxId] !== undefined) {
      $event_box.attr('id', 'eventBox' + boxId).show();
      $('#box' + boxId).addClass('active');

      if (eventBoxData[boxId].eventTypeClass !== 'future') {
        $('#eventBox' + boxId + ' #BDayEventDate').html(eventBoxData[boxId].date + ': ');
      } else {
        $('#eventBox' + boxId + ' #BDayEventDate').html('');
      }

      $('#eventBox' + boxId + ' #BDayEventTitle').html(eventBoxData[boxId].title);
      $('#eventBox' + boxId + ' #BDayofficerImg').attr('src', eventBoxData[boxId].eventOfficerImgSrc);

      if (eventBoxData[boxId].eventTypeClass !== 'future' || eventBoxData[boxId].txtChronic !== undefined) {
        $('#eventBox' + boxId + ' #BDayEventTxtChronic').html(eventBoxData[boxId].txtChronic);
        $('#eventBox' + boxId + ' #BDayChronic').show();
      } else {
        $('#eventBox' + boxId + ' #BDayChronic').hide();
      }

      if (eventBoxData[boxId].eventImgSrc === undefined && eventBoxData[boxId].eventTypeClass === 'future') {
        $('#eventBox' + boxId + ' #BDayEventImg').attr('src', '//gf3.geo.gfsrv.net/cdn82/d995359d038c9a0c21aed16b3cc162.png');
      } else {
        $('#eventBox' + boxId + ' #BDayEventImg').attr('src', eventBoxData[boxId].eventImgSrc);
      }

      if (eventBoxData[boxId].eventTxtDesc === undefined) {
        $('#eventBox' + boxId + ' #BDayEventTxtDesc').html('');
      } else {
        $('#eventBox' + boxId + ' #BDayEventTxtDesc').html(eventBoxData[boxId].eventTxtDesc);
      }

      $('#eventBox' + boxId + ' #BDayEventPastTxt').hide();

      if (eventBoxData[boxId].eventTypeClass === 'past') {
        $('#eventBox' + boxId + ' #BDayEventPastTxt').html(eventPastTxt).show();
      }

      $('#eventBox' + boxId + ' #BDayEventBtnCTA').hide();

      if (eventBoxData[boxId].eventTypeClass !== ('past' || 'future') && eventBoxData[boxId].btnCTA !== undefined) {
        $('#eventBox' + boxId + ' #BDayEventBtnCTA').html(eventBoxData[boxId].btnCTA).attr('href', eventBoxData[boxId].btnCTALink).show();
      }
    }
  });
}

function initBDayEventHints() {
  $(document).undelegate('.event_build_faster, .event_active_hint', 'click').delegate('.event_build_faster, .event_active_hint', 'click', function (e) {
    e.stopPropagation();

    if ($(this).parent().attr('id') === 'expeditionbutton') {
      doExpedition();
    } else {
      $(this).siblings('.detail_button').click();
    }
  });
}
function toggleEvents(doNotClose) {
  if ($("#eventboxContent").is(":hidden")) {
    $("#eventboxContent").slideDown('fast');
    $('#js_eventDetailsClosed').hide();
    $('#js_eventDetailsOpen').show();

    if (typeof toggleEvents.loaded == 'undefined' || !toggleEvents.loaded) {
      refreshFleetEvents();
    }
  } else {
    if (doNotClose) {
      return;
    }

    $("#eventboxContent").slideUp('fast');
    $('#js_eventDetailsClosed').show();
    $('#js_eventDetailsOpen').hide();
  }

  $("#contentWrapper select").ogameDropDown('hide');
}

function refreshFleetEvents(force) {
  if (typeof eventlistLink === 'undefined') {
    return;
  }

  // TODO: re-enable later
  return;

  if (!$("#eventboxContent").is(":hidden") || force === true) {
    $("#eventboxContent").html('<img height="16" width="16" src="//gf3.geo.gfsrv.net/cdne3/3f9884806436537bdec305aa26fc60.gif" />');
    $.ajax({
      url: eventlistLink,
      success: function (response) {
        $("#eventboxContent").html(response);
        toggleEvents.loaded = true;
      }
    });
  }
}

function toggleDetails() {
  var relTr = $(".partnerInfo." + $(this).attr("rel"));

  if ($(relTr).is(":hidden")) {
    $(relTr).show();
    $(this).parents("tr").addClass("detailsOpened").removeClass("detailsClosed");
  } else {
    $(relTr).hide();
    $(this).parents("tr").addClass("detailsClosed").removeClass("detailsOpened");
  }
}
function Exodus(cfg) {
  this.loca = cfg.loca;
  this.initServerSelect(cfg);
}

Exodus.prototype.onAjaxDone = function () {
  this.loadingIndicator.hide(); //@todo handle error
};

Exodus.prototype.onAjaxError = function () {};

Exodus.prototype.updateToken = function (updatetoken) {
  this.token = updatetoken;
  token = updatetoken;
};

Exodus.prototype.initCommon = function (cfg) {
  this.serverWrapper = $('.exodus #serverNumbers');
  this.loadingIndicator = this.serverWrapper.ogameLoadingIndicator();
  this.serverLanguage = $('.exodus #serverLanguage');
  this.serverNumber = $('.exodus #serverNumber');
  this.serverNumbers = null;
  this.token = cfg.token;
  this.selectedLanguage = cfg.sourceLanguage;
  this.serverSelection = $('#serverSelection');
  this.table = this.serverLanguage.closest('.og-table');
  this.availableLanguages = cfg.availableLanguages;
  this.urlServerIds = cfg.urlServerIds || null;
  this.urlIsReady = cfg.urlIsReady || null;
  this.urlSubmitExodus = cfg.urlSubmitExodus || null;
  this.isReadyForExodus = cfg.isReadyForExodus || false;
  this.serverAmount = 0;
};

Exodus.prototype.initServerSelect = function (cfg) {
  this.initCommon(cfg);
  this.dropDownLanguageSelect = $('.exodus #serverLanguage');
  this.dropDownServerSelect = $('.exodus #serverNumber');
  this.exodusSubmitButton = $('.exodus #submitExodus');
  this.exodusSubmitButton.on('click', this.onClickExecute.bind(this));
  this.dropDownLanguageSelect.on('change', this.onChangeServerLanguage.bind(this));
  this.dropDownServerSelect.on('change', this.onChangeServerNumber.bind(this));
  this.refreshLanguage();
  this.fetchServerNumbers();
};

Exodus.prototype.onChangeServerLanguage = function (e) {
  this.selectedLanguage = this.dropDownLanguageSelect.val();
  this.refreshLanguage();
  this.fetchServerNumbers();
};

Exodus.prototype.onChangeServerNumber = function (e) {
  this.selectedServer = this.dropDownServerSelect.val();
  this.refreshServer();
};

Exodus.prototype.onClickExecute = function (e) {
  e.stopPropagation();
  e.preventDefault();
  let serverName = this.dropDownServerSelect.find('option[value="' + this.selectedServer + '"]').html();
  this.loadingIndicator.show();
  let that = this;
  errorBoxDecision(this.loca.LOCA_EXODUS_TRANSFER_QUESTION_TITLE, this.loca.LOCA_EXODUS_TRANSFER_QUESTION.replace('#uniname#', serverName), this.loca.LOCA_ALL_YES, this.loca.LOCA_ALL_NO, function () {
    let data = {
      serverNumber: parseInt(that.selectedServer),
      serverLanguage: that.selectedLanguage,
      _token: that.token
    };
    $.post(that.urlSubmitExodus, data, that.handleSubmitExodusResponse.bind(that)).done(that.onAjaxDone.bind(that));
  }, function () {
    that.loadingIndicator.hide();
  });
};

Exodus.prototype.fetchServerNumbers = function () {
  this.loadingIndicator.show();
  let data = {
    language: this.selectedLanguage
  };
  $.getJSON(this.urlServerIds, data, this.onFetchServerNumbers.bind(this)).done(this.onAjaxDone.bind(this));
};

Exodus.prototype.checkIsReady = function () {
  let data = {};

  if (this.serverAmount > 0) {
    $.getJSON(this.urlIsReady, data, this.onCheckIsReady.bind(this)).done(this.onAjaxDone.bind(this));
  }
};

Exodus.prototype.setLanguage = function (language) {
  let languageOld = this.selectedLanguage;
  this.selectedLanguage = language;

  if (this.selectedLanguage !== languageOld) {
    this.resetLanguage();
    this.refreshLanguage();
    this.fetchServerNumbers();
    this.resetServer();
    this.checkIsReady();
  }
};

Exodus.prototype.setServer = function (number) {
  let serverOld = this.selectedServer;
  this.selectedServer = number;

  if (this.selectedServer !== serverOld) {
    this.resetServer();
    this.refreshServer();
    this.checkIsReady();
  }
};

Exodus.prototype.refreshLanguage = function () {
  this.dropDownLanguageSelect.find('option').removeAttr('selected');

  if (this.selectedLanguage) {
    this.dropDownLanguageSelect.find('option[value="' + this.selectedLanguage + '"]').attr('selected', 'selected');
    this.dropDownLanguageSelect.val(this.selectedLanguage);
  }
};

Exodus.prototype.refreshServer = function () {
  this.dropDownServerSelect.find('option').removeAttr('selected');

  if (this.selectedServer) {
    this.dropDownServerSelect.val(this.selectedServer);
    this.dropDownServerSelect.find('option[value="' + this.selectedServer + '"]').attr('selected', 'selected');
  }
};

Exodus.prototype.resetLanguage = function () {
  this.setLanguage(this.getFirstLanguage());
};

Exodus.prototype.resetServer = function () {
  this.setServer(this.selectedServer);
};

Exodus.prototype.getFirstLanguage = function () {
  return this.availableLanguages[0];
};

Exodus.prototype.onCheckIsReady = function (data) {
  this.isReadyForExodus = data.isReady;

  if (this.isReadyForExodus && this.selectedServer !== 0) {
    this.exodusSubmitButton.removeClass('disabled');
  } else {
    this.exodusSubmitButton.addClass('disabled');
  }
};

Exodus.prototype.handleSubmitExodusResponse = function (response) {
  let data = JSON.parse(response);
  let status = data.status || 'failure';

  if (status === 'success') {
    fadeBox(data.message, false);
    window.location = data.redirectUrl;
  } else {
    this.updateToken(data.newAjaxToken);
    this.displayErrors(data);
  }
};

Exodus.prototype.displayErrors = function (data) {
  // only display the first error
  let error = data.errors[0] || undefined;

  if (error) {
    fadeBox(error.message, true);
    this.updateToken(data.newAjaxToken);
  }
};

Exodus.prototype.onFetchServerNumbers = function (data) {
  if (data.serverNumbers.length === 0 || this.isReadyForExodus === false) {
    if (this.isReadyForExodus === false) {
      this.serverSelection.html('<span id="noServer">' + this.loca.LOCA_EXODUS_RESTRICTION_NOT_FULFILLED + '</span>');
    }

    if (data.serverNumbers.length === 0) {
      this.serverSelection.html('<span id="noServer">' + this.loca.LOCA_EXODUS_NO_SERVER_AVAILABLE + '</span>');
    }

    this.exodusSubmitButton.addClass('disabled');
    this.serverAmount = 0;
    this.selectedServer = 0;
    return;
  } else {
    this.serverSelection.html('<select id="serverNumber" type="text" class="og-input" name="serverNumber"></select>');
    this.exodusSubmitButton.removeClass('disabled');
    this.dropDownServerSelect = $('.exodus #serverNumber');
    this.dropDownServerSelect.on('change', this.onChangeServerNumber.bind(this));
    this.serverAmount = data.serverNumbers.length;
  }

  this.selectedServer = data.serverNumbers[0].number;
  this.serverNumbers = data.serverNumbers;
  var select = this.dropDownServerSelect;

  if (select.prop) {
    var options = select.prop('options');
  } else {
    var options = select.attr('options');
  }

  $('option', select).remove();
  let htmlOptions = '';
  $.each(data.serverNumbers, function (key, server) {
    options[options.length] = new Option(server.name, server.number);
    htmlOptions += '<option value="' + server.number + '">' + server.name + '</option>';
  });
  this.dropDownServerSelect.ogameDropDown('destroy');
  this.dropDownServerSelect.html('');
  this.dropDownServerSelect.html(htmlOptions).ogameDropDown();
};
/**
 * Object.assign polyfill
 * @see https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Object/assign#Polyfill
 */
if (typeof Object.assign !== "function") {
  Object.assign = function (target) {
    if (target == null) {
      throw new TypeError("Cannot convert undefined or null to object");
    }

    target = Object(target);

    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      if (source != null) {
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
    }

    return target;
  };
}
/**
 * Number.isInteger polyfill
 * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger#Polyfill
 */


if (typeof Number.isInteger !== "function") {
  //noinspection JSPrimitiveTypeWrapperUsage
  Number.isInteger = function (number) {
    return typeof number === "number" && isFinite(number) && number > -9007199254740992 && number < 9007199254740992 && Math.floor(number) === number;
  };
}

var Formatter = {
  // #################################################################################################################
  // ##  DATE, TIME & PERIOD  ########################################################################################
  // #################################################################################################################

  /**
   * Human-readable time units
   */
  "timeUnits": {
    "second": 1,
    "minute": 60,
    "hour": 60 * 60,
    "day": 24 * 60 * 60,
    "week": 7 * 24 * 60 * 60
  },

  /**
   * Format seconds to human readable time (weeks, days, hours, minutes, seconds)
   *
   * @param {int} seconds
   * @param {Array} options
   * @returns {string}
   */
  "secondsToTime": function (seconds, options) {
    var defaults = {
      "segments": -1,
      "delimiter": " ",
      "units": {
        "weeks": "w",
        "days": "d",
        "hours": "h",
        "minutes": "m",
        "seconds": "s"
      },
      "now": "now"
    };
    options = Object.assign(defaults, options);

    if (!Number.isInteger(seconds)) {
      throw "Integer expected for parameter seconds";
    }

    if (seconds <= 0) {
      return options.now;
    }

    var time = {
      "weeks": Math.floor(seconds / Formatter.timeUnits.week),
      "days": Math.floor(seconds % Formatter.timeUnits.week / Formatter.timeUnits.day),
      "hours": Math.floor(seconds % Formatter.timeUnits.day / Formatter.timeUnits.hour),
      "minutes": Math.floor(seconds % Formatter.timeUnits.hour / Formatter.timeUnits.minute),
      "seconds": seconds % Formatter.timeUnits.minute
    };
    var formattedTime = [];

    for (var segment in time) {
      if (time[segment] > 0 && (options.segments == -1 || formattedTime.length < options.segments)) {
        formattedTime.push(time[segment] + options.units[segment]);
      }
    }

    return formattedTime.join(options.delimiter);
  },

  /**
   * Format seconds to period string (PDTHMS)
   *
   * @param {int} seconds
   * @returns {string}
   */
  "secondsToPeriod": function (seconds) {
    if (!Number.isInteger(seconds)) {
      throw "Integer expected for parameter seconds";
    }

    if (seconds <= 0) {
      return "PT0H0M0S";
    }

    var period = {
      "days": {
        "value": Math.floor(seconds / Formatter.timeUnits.day),
        "unit": "D"
      },
      "hours": {
        "value": Math.floor(seconds % Formatter.timeUnits.day / Formatter.timeUnits.hour),
        "unit": "H"
      },
      "minutes": {
        "value": Math.floor(seconds % Formatter.timeUnits.hour / Formatter.timeUnits.minute),
        "unit": "M"
      },
      "seconds": {
        "value": seconds % Formatter.timeUnits.minute,
        "unit": "S"
      }
    };
    var formattedPeriodDays = [],
        formattedPeriodTime = [];

    for (var segment in period) {
      if (period[segment].value > 0) {
        if (segment == "days") {
          formattedPeriodDays.push(period[segment].value + period[segment].unit);
        } else {
          formattedPeriodTime.push(period[segment].value + period[segment].unit);
        }
      }
    }

    return "P" + formattedPeriodDays.join("") + (formattedPeriodTime.length > 0 ? "T" + formattedPeriodTime.join("") : "");
  },
  // #################################################################################################################
  // ##  NUMBER ######################################################################################################
  // #################################################################################################################

  /**
   * Format number to string
   *
   * @param {number} number
   * @param {Array} options
   * @returns {string}
   */
  "numberToString": function (number, options) {
    var NUMBER_PRECISION_MINIMUM = 0;
    var NUMBER_PRECISION_MAXIMUM = 3;
    var NUMBER_TRANSFORM_ROUND = 1;
    var NUMBER_TRANSFORM_CEIL = 2;
    var NUMBER_TRANSFORM_FLOOR = 3;
    /**
     * Round fractions up or down with precision
     *
     * @param {number} number
     * @param {int} precision
     * @returns {number}
     */

    var round = function (number, precision) {
      if (typeof number !== "number") {
        throw "Numeric expected for parameter number";
      }

      if (!Number.isInteger(precision)) {
        throw "Integer expected for parameter precision";
      }

      if (precision <= 0) {
        return Math.round(number);
      }

      return Math.round(number * Math.pow(10, precision)) / Math.pow(10, precision);
    };
    /**
     * Round fractions up with precision
     *
     * @param {number} number
     * @param {int} precision
     * @returns {number}
     */


    var ceil = function (number, precision) {
      if (typeof number !== "number") {
        throw "Numeric expected for parameter number";
      }

      if (!Number.isInteger(precision)) {
        throw "Integer expected for parameter precision";
      }

      if (precision <= 0) {
        return Math.ceil(number);
      }

      return Math.ceil(number * Math.pow(10, precision)) / Math.pow(10, precision);
    };
    /**
     * Round fractions down with precision
     *
     * @param {number} number
     * @param {int} precision
     * @returns {number}
     */


    var floor = function (number, precision) {
      if (typeof number !== "number") {
        throw "Numeric expected for parameter number";
      }

      if (!Number.isInteger(precision)) {
        throw "Integer expected for parameter precision";
      }

      if (precision <= 0) {
        return Math.floor(number);
      }

      return Math.floor(number * Math.pow(10, precision)) / Math.pow(10, precision);
    };
    /**
     * Transform number using round, ceil or floor
     *
     * @param {number} number
     * @param {int} mode
     * @param {int} precision
     * @returns {number}
     */


    var transformNumber = function (number, mode, precision) {
      switch (mode) {
        case NUMBER_TRANSFORM_ROUND:
          number = round(number, precision);
          break;

        case NUMBER_TRANSFORM_CEIL:
          number = ceil(number, precision);
          break;

        case NUMBER_TRANSFORM_FLOOR:
          number = floor(number, precision);
          break;
      }

      return number;
    };

    var defaults = {
      "transform": NUMBER_TRANSFORM_ROUND,
      "precision": {
        "minimum": NUMBER_PRECISION_MINIMUM,
        "maximum": NUMBER_PRECISION_MAXIMUM
      },
      "separators": {
        "thousands": ",",
        "decimals": "."
      },
      "boundaries": {
        /*1000:           "K",*/
        1000000: "M",
        1000000000: "Bn"
      }
    };
    options = Object.assign(defaults, options);

    if (typeof number !== "number") {
      throw "Numeric expected for parameter number";
    }

    if (typeof options.precision === "undefined" || typeof options.precision.minimum === "undefined") {
      throw "Minimum precision not specified";
    }

    if (typeof options.precision === "undefined" || typeof options.precision.maximum === "undefined") {
      throw "Maximum precision not specified";
    }

    if (options.precision.minimum > options.precision.maximum) {
      throw "Minimum precision larger than maximum precision";
    }

    var boundaries = Object.keys(options.boundaries).sort(function (a, b) {
      return parseFloat(b) - parseFloat(a);
    });
    var unit = "";

    for (var i = 0; i < boundaries.length; i++) {
      var boundary = parseInt(boundaries[i]);

      if (boundary === 0) {
        continue;
      }

      if (Math.abs(number) >= boundary) {
        number /= boundary;
        unit = options.boundaries[boundaries[i]];
        break;
      }
    }

    var precision = options.precision.maximum;

    while ((number = transformNumber(number, options.transform, precision)) == transformNumber(number, options.transform, precision - 1) && precision > options.precision.minimum) {
      precision--;
    }

    number = number.toFixed(precision);
    var numberParts = number.toString().split(".");
    numberParts[0] = numberParts[0].replace(/\B(?=(\d{3})+(?!\d))/g, options.separators.thousands);
    return numberParts.join(options.separators.decimals) + unit;
  }
};
ogame.frontendActions = {
  socket: null,
  connected: false,
  connecting: false,
  timeout: null,
  retryInterval: 5000,
  initConnection: function () {
    var that = ogame.frontendActions;

    if (that.connecting || that.connected || that.isMobile) {
      if (this.socket) {
        that.socket.disconnect();
      }
    }

    that.connecting = true;

    try {
      that.socket = io.connect(":" + nodePort + "/frontendactions", nodeParams);
      that.socket.on('connect', function () {
        clearTimeout(this.timeout); // send session for authorize... on success set it to connected else disconnect socket

        that.socket.emit("authorize", session, function (success) {
          that.connecting = false;

          if (success) {
            that.connected = true;
          } else {
            that.socket.disconnect();
          }
        });
      });
      that.socket.on("refreshFrontendData", function (data) {
        that.refreshFrontendData(data);
      });
      that.socket.on("refreshSimulationData", function (data) {
        that.refreshSimulationData(data);
      });
      that.socket.on('disconnect', function () {
        that.connected = false;
        that.connecting = false;
      });
    } catch (e) {
      that.connecting = false;
    }
  },
  initialize: function () {
    if (typeof nodeUrl === 'undefined') {
      return;
    }

    // TODO: re-enable later
    return;

    var that = ogame.frontendActions;
    loadScript(nodeUrl, that.initConnection);
  },
  retryConnection: function () {
    var that = ogame.frontendActions;
    setTimeout(function () {
      that.initConnection();
    }, 5000);
  },
  refreshFrontendData: function (wsData) {
    if (buildListActionCalled || speedingUpBuildListEntry) {
      return;
    }

    try {
      let currentUrl = window.location.href;
      let currentPageParams = new URLSearchParams(currentUrl.split('?')[1] ?? "");
      let currentComponent = currentPageParams.get("component");
      let currentIngamePage = currentPageParams.get("page");

      if (wsData.type && wsData.type === 'buildList') {
        if (currentComponent === 'empire') {
          window.location.reload();
          return;
        }

        if (wsData.spaceObjectId && wsData.spaceObjectId !== "any" && typeof currentSpaceObjectId !== "undefined" && wsData.spaceObjectId === currentSpaceObjectId || wsData.spaceObjectId === "any") {
          if (currentComponent === 'resourcesettings' && wsData.actionType && wsData.actionType === "built") {
            window.location.reload();
            return;
          }

          if (wsData.component) {
            if (wsData.component.indexOf(currentComponent) > -1 || wsData.component.indexOf(currentIngamePage) > -1) {
              window.location.reload();
              return;
            }
          }

          if (wsData.productionBox) {
            if ($(`#productionbox${wsData.productionBox}component`).length > 0) {
              reloadComponent(`productionbox${wsData.productionBox}`);
            }
          }

          if (typeof currentSpaceObjectId !== "undefined" && wsData.spaceObjectId === currentSpaceObjectId) {
            getAjaxResourcebox();
          }
        }

        reloadComponent('planetbar', currentIngamePage !== 'ingame');
      }
    } catch (e) {}
  },
  refreshSimulationData: function (wsData) {
    try {
      if (wsData.type && wsData.type === 'refreshSimInfo' && wsData.remove) {
        removeCombatSim(wsData.simId);
        loadSimDetails();
      }

      if (wsData.type && wsData.type === 'refreshSimInfo') {
        changeCombatSimState(wsData.simId, wsData.simState);
        loadSimDetails();
      }
    } catch (e) {}
  },
  initFrontendActions: function () {
    ogame.frontendActions.initialize();
  }
};

function reloadComponent(component, addFleft, callback) {
  $.ajax({
    type: "GET",
    url: `${ajaxReloadComponentURI}&component=${component}&currentComponent=${currentPage}`,
    success: function (response) {
      try {
        let parsedData = JSON.parse(response);
        $("#" + parsedData.id).replaceWith(parsedData.html);

        if (addFleft) {
          $("#" + parsedData.id).addClass('fleft');
        }

        token = parsedData.newAjaxToken;

        if (callback && typeof callback === "function") {
          callback();
        }

        $('select').ogameDropDown();
      } catch (e) {
        window.location.reload();
      }
    },
    error: function (err) {
      window.location.reload();
    }
  });
}

$(document).ready(() => {
  ogame.frontendActions.initFrontendActions();
});
function Graveyard(cfg) {
  this.loca = cfg.loca;
  this.initServerSelect(cfg);
}

Graveyard.prototype.onAjaxDone = function () {
  this.loadingIndicator.hide(); //@todo handle error
};

Graveyard.prototype.onAjaxError = function () {};

Graveyard.prototype.updateToken = function (token) {
  this.token = token;
};

Graveyard.prototype.initCommon = function (cfg) {
  this.serverWrapper = $('.graveyard #serverNumbers');
  this.loadingIndicator = this.serverWrapper.ogameLoadingIndicator();
  this.serverLanguage = $('.graveyard #serverLanguage');
  this.serverNumber = $('.graveyard #serverNumber');
  this.serverNumbers = null;
  this.selectedLanguage = null;
  this.serverSelection = $('#serverSelection');
  this.token = cfg.token;
  this.table = this.serverLanguage.closest('.og-table');
  this.availableLanguages = cfg.availableLanguages;
  this.urlServerIds = cfg.urlServerIds || null;
  this.urlIsReady = cfg.urlIsReady || null;
  this.urlSubmitExodus = cfg.urlSubmitExodus || null;
  this.isReadyForExodus = cfg.isReadyForExodus || false;
  this.serverAmount = 0;
};

Graveyard.prototype.initServerSelect = function (cfg) {
  this.initCommon(cfg);
  this.dropDownLanguageSelect = $('.graveyard #serverLanguage');
  this.dropDownServerSelect = $('.graveyard #serverNumber');
  this.exodusSubmitButton = $('.graveyard #submitExodus');
  this.exodusSubmitButton.on('click', this.onClickExecute.bind(this));
  this.dropDownLanguageSelect.on('change', this.onChangeServerLanguage.bind(this));
  this.dropDownServerSelect.on('change', this.onChangeServerNumber.bind(this));
  this.resetLanguage();
  this.refreshLanguage();
};

Graveyard.prototype.onChangeServerLanguage = function (e) {
  this.selectedLanguage = this.dropDownLanguageSelect.val();
  this.refreshLanguage();
  this.fetchServerNumbers();
};

Graveyard.prototype.onChangeServerNumber = function (e) {
  this.selectedServer = this.dropDownServerSelect.val();
  this.refreshServer();
};

Graveyard.prototype.onClickExecute = function (e) {
  e.stopPropagation();
  e.preventDefault();
  let serverName = this.dropDownServerSelect.find('option[value="' + this.selectedServer + '"]').html();
  this.loadingIndicator.show();
  let that = this;
  errorBoxDecision(this.loca.LOCA_EXODUS_TRANSFER_QUESTION_TITLE, this.loca.LOCA_EXODUS_TRANSFER_QUESTION.replace('#uniname#', serverName), this.loca.LOCA_ALL_YES, this.loca.LOCA_ALL_NO, function () {
    let data = {
      serverNumber: parseInt(that.selectedServer),
      serverLanguage: that.selectedLanguage,
      _token: that.token
    };
    $.post(that.urlSubmitExodus, data, that.handleSubmitExodusResponse.bind(that)).done(that.onAjaxDone.bind(that));
  }, function () {
    that.loadingIndicator.hide();
  });
};

Graveyard.prototype.fetchServerNumbers = function () {
  this.loadingIndicator.show();
  let data = {
    language: this.selectedLanguage
  };
  $.getJSON(this.urlServerIds, data, this.onFetchServerNumbers.bind(this)).done(this.onAjaxDone.bind(this));
};

Graveyard.prototype.checkIsReady = function () {
  let data = {};

  if (this.serverAmount > 0) {
    $.getJSON(this.urlIsReady, data, this.onCheckIsReady.bind(this)).done(this.onAjaxDone.bind(this));
  }
};

Graveyard.prototype.setLanguage = function (language) {
  let languageOld = this.selectedLanguage;
  this.selectedLanguage = language;

  if (this.selectedLanguage !== languageOld) {
    this.resetLanguage();
    this.refreshLanguage();
    this.fetchServerNumbers();
    this.resetServer();
    this.checkIsReady();
  }
};

Graveyard.prototype.setServer = function (number) {
  let serverOld = this.selectedServer;
  this.selectedServer = number;

  if (this.selectedServer !== serverOld) {
    this.resetServer();
    this.refreshServer();
    this.checkIsReady();
  }
};

Graveyard.prototype.refreshLanguage = function () {
  this.dropDownLanguageSelect.find('option').removeAttr('selected');

  if (this.selectedLanguage) {
    this.dropDownLanguageSelect.find('option[value="' + this.selectedLanguage + '"]').attr('selected', 'selected');
    this.dropDownLanguageSelect.val(this.selectedLanguage);
  }
};

Graveyard.prototype.refreshServer = function () {
  this.dropDownServerSelect.find('option').removeAttr('selected');

  if (this.selectedServer) {
    this.dropDownServerSelect.find('option[value="' + this.selectedServer + '"]').attr('selected', 'selected');
  }
};

Graveyard.prototype.resetLanguage = function () {
  this.setLanguage(this.getFirstLanguage());
};

Graveyard.prototype.resetServer = function () {
  this.setServer(this.selectedServer);
};

Graveyard.prototype.getFirstLanguage = function () {
  return this.availableLanguages[0];
};

Graveyard.prototype.onCheckIsReady = function (data) {
  this.isReadyForExodus = data.isReady;

  if (this.isReadyForExodus && this.selectedServer !== 0) {
    this.exodusSubmitButton.removeClass('disabled');
  } else {
    this.exodusSubmitButton.addClass('disabled');
  }
};

Graveyard.prototype.handleSubmitExodusResponse = function (response) {
  let data = JSON.parse(response);
  let status = data.status || 'failure';

  if (status === 'success') {
    fadeBox(data.message, false);
    window.location = data.redirectUrl;
  } else {
    this.displayErrors(data);
  }
};

Graveyard.prototype.displayErrors = function (data) {
  // only display the first error
  let error = data.errors[0] || undefined;

  if (error) {
    this.updateToken(data.newAjaxToken);
    fadeBox(error.message, true);
  }
};

Graveyard.prototype.onFetchServerNumbers = function (data) {
  if (data.serverNumbers.length === 0) {
    if (data.serverNumbers.length === 0) {
      this.serverSelection.html('<span id="noServer">' + this.loca.LOCA_EXODUS_NO_SERVER_AVAILABLE + '</span>');
    }

    if (this.isReadyForExodus === false) {
      this.serverSelection.html('<span id="noServer">' + this.loca.LOCA_EXODUS_RESTRICTION_NOT_FULFILLED + '</span>');
    }

    this.exodusSubmitButton.addClass('disabled');
    this.serverAmount = 0;
    this.selectedServer = 0;
    return;
  } else {
    this.serverSelection.html('<select id="serverNumber" type="text" class="og-input" name="serverNumber"></select>');
    this.exodusSubmitButton.removeClass('disabled');
    this.dropDownServerSelect = $('.graveyard #serverNumber');
    this.dropDownServerSelect.on('change', this.onChangeServerNumber.bind(this));
    this.serverAmount = data.serverNumbers.length;
  }

  this.selectedServer = data.serverNumbers[0].number;
  this.serverNumbers = data.serverNumbers;
  var select = this.dropDownServerSelect;

  if (select.prop) {
    var options = select.prop('options');
  } else {
    var options = select.attr('options');
  }

  $('option', select).remove();
  let htmlOptions = '';
  $.each(data.serverNumbers, function (key, server) {
    options[options.length] = new Option(server.name, server.number);
    htmlOptions += '<option value="' + server.number + '">' + server.name + '</option>';
  });
  this.dropDownServerSelect.ogameDropDown('destroy');
  this.dropDownServerSelect.html('');
  this.dropDownServerSelect.html(htmlOptions).ogameDropDown();
};
/**
 * getElementById-Funktion mit Cache
 */
var DOM_GET_ELEMENT_BY_ID_CACHE = [];

function getElementByIdWithCache(uid) {
  if (!DOM_GET_ELEMENT_BY_ID_CACHE[uid]) {
    DOM_GET_ELEMENT_BY_ID_CACHE[uid] = document.getElementById(uid);
  }

  return DOM_GET_ELEMENT_BY_ID_CACHE[uid];
}
/**
 *  returns a formated number like php number_format()
 *
 * @see http://de3.php.net/number_format
 */


function number_format(number, decimals, dec_point, thousands_sep) {
  dec_point = dec_point || LocalizationStrings['decimalPoint'];
  thousands_sep = thousands_sep || LocalizationStrings['thousandSeperator'];
  var exponent = "";
  var numberstr = number.toString();
  var eindex = numberstr.indexOf("e");

  if (eindex > -1) {
    exponent = numberstr.substring(eindex);
    number = parseFloat(numberstr.substring(0, eindex));
  }

  if (decimals != null) {
    var temp = Math.pow(10, decimals);
    number = Math.round(number * temp) / temp;
  }

  var sign = number < 0 ? "-" : "";
  var integer = (number > 0 ? Math.floor(number) : Math.abs(Math.ceil(number))).toString();
  var fractional = number.toString().substring(integer.length + sign.length);
  dec_point = dec_point != null ? dec_point : ".";
  fractional = decimals != null && decimals > 0 || fractional.length > 1 ? dec_point + fractional.substring(1) : "";

  if (decimals != null && decimals > 0) {
    for (i = fractional.length - 1, z = decimals; i < z; ++i) fractional += "0";
  }

  thousands_sep = thousands_sep != dec_point || fractional.length == 0 ? thousands_sep : null;

  if (thousands_sep != null && thousands_sep != "") {
    for (i = integer.length - 3; i > 0; i -= 3) integer = integer.substring(0, i) + thousands_sep + integer.substring(i);
  }

  return sign + integer + fractional + exponent;
}

function gfNumberGetHumanReadable(value, shortForm, precision) {
  value = Math.floor(value);
  shortForm = shortForm || false;
  var unit = '';
  var precision = precision || 3;

  if (shortForm) {
    if (value >= 1000000000) {
      unit = LocalizationStrings['unitMilliard'];
      value = value / 1000000000;
    } else if (value >= 1000000) {
      unit = LocalizationStrings['unitMega'];
      value = value / 1000000;
    }
  }

  floorWithPrecision = function (value, precision) {
    return Math.floor(value * Math.pow(10, precision)) / Math.pow(10, precision);
  };

  value = floorWithPrecision(value, precision);

  while (precision >= 0) {
    if (floorWithPrecision(value, precision - 1) != value) {
      break;
    }

    precision = precision - 1;
  }

  return number_format(value, precision, LocalizationStrings['decimalPoint'], LocalizationStrings['thousandSeperator']) + unit;
}

function getNumberFormatShort(value, precision) {
  if (typeof precision == 'undefined') {
    precision = 0;
  }

  value = Math.floor(value);
  var unit = '';

  if (value >= 1000000000) {
    unit = LocalizationStrings['unitMilliard'];
    value = value / 1000000000;
  }

  if (value >= 1000000) {
    unit = LocalizationStrings['unitMega'];
    value = value / 1000000;
  }

  if (value >= 1000) {
    unit = LocalizationStrings['unitKilo'];
    value = value / 1000;
  }

  return number_format(value, precision, LocalizationStrings['decimalPoint'], LocalizationStrings['thousandSeperator']) + unit;
}

function createExpireTime(timestamp) {
  var date = new Date();
  timestamp = timestamp * 1000;
  date.setTime(timestamp);
  return date;
}
function initHighscore() {
  $("a.navButton, a.subnavButton").click(function () {
    var type = $(this).attr('rel');
    var $parent = $(this).parent();
    var searchRelString = "";

    if ($parent.attr('id') == 'typeButtons') {
      $("#typeButtons > a.active").removeClass('active');
    } else if ($parent.attr('id') == 'categoryButtons') {
      $('#categoryButtons > a.active').removeClass('active');
      $("#typeButtons a.active").each(function () {
        type = $(this).attr('rel');
      });
    }

    if (searchRelId != null && $parent.attr('id') == 'typeButtons' || $parent.attr('id') == 'subnav_fleet') {
      searchRelString = "&searchRelId=" + searchRelId;
    }

    $(".subnavButton[rel!=" + type + "]").removeClass('active');
    $('#stat_list_content').html(LocalizationStrings['loading']);
    $(this).addClass('active');
    var category = $("#categoryButtons > a.active").attr('rel');
    var url = highscoreContentUrl + '&category=' + category + '&type=' + type + searchRelString;

    if (($parent.attr('id') == 'typeButtons' || $(this).hasClass('subnavButton')) && searchSite != site) {
      url = url + "&site=" + site;
    }

    removeTooltip(getTooltipSelector('#highscoreContent #ranks'));
    ajaxSubmit(url, '#send', '#stat_list_content', initHighscoreContent);

    if ($('.navButton.active').attr('rel') == 1) {
      $('#highscoreContent .header h2').text(highscoreLoca.playerHighscore);
    } else {
      $('#highscoreContent .header h2').text(highscoreLoca.allianceHighscore);
    }
  });
  $(".stat_filter").click(function () {
    var subnav = $(this).attr('id');
    $('.subnav').hide();
    $('#subnav_' + subnav).fadeIn('slow');
  }); // scroll to top buttons

  var threshold = $("#ranks").offset().top;
  var scrollToTopButton = $("#scrollToTop");
  $(window).unbind('scroll.highscoreTop').bind('scroll.highscoreTop', function (e) {
    var scrollTop = $(this).scrollTop();

    if (scrollTop > threshold) {
      scrollToTopButton.css('visibility', 'visible');
    } else {
      scrollToTopButton.css('visibility', 'hidden');
    }
  });
  $(document).undelegate('.scrollToTop', 'click').delegate('.scrollToTop', 'click', function () {
    $('html, body').animate({
      scrollTop: 0
    }, 50);
  });
}

function initHighscoreContent() {
  if (userWantsFocus) {
    if ($("#position" + searchPosition).length > 0) {
      $('html, body').animate({
        scrollTop: Math.max(0, $("#position" + searchPosition).offset().top - 200)
      }, 1000);
    }
  }

  $(".changeSite").change(function () {
    var value = $(this).val();
    $("#stat_list_content").html('<div class="ajaxLoad">' + LocalizationStrings.loading + '</div>');
    ajaxCall(highscoreContentUrl + '&category=' + currentCategory + '&type=' + currentType + '&site=' + value, '#stat_list_content', initHighscoreContent);
  }); // scroll to top buttons

  var scrollToTopButton = $("#scrollToTop");
  var positionCell = $("#ranks thead .score");

  function positionScrollButton() {
    if (positionCell.length) {
      scrollToTopButton.css('left', positionCell.offset().left);
    }
  }

  positionScrollButton();
  $(window).unbind('resize.highscoreTop').bind('resize.highscoreTop', positionScrollButton);
}
const IPI = {
  config: null,
  loadingIndicator: null,
  highlights: [],
  highlightSteps: [],
  highlightStepIndex: 0,
  ipiCall: (url, callback) => {
    IPI.loadingIndicator.show();
    $.get(url, {}, data => {
      IPI.loadingIndicator.hide();
      const result = JSON.parse(data);
      token = result.newAjaxToken ?? token;

      if (typeof result.success === "undefined" || result.success !== true) {
        if (typeof result.error !== "undefined") {
          fadeBox(result.error, true);
        }

        return;
      }

      callback(result);
    });
  },
  trackTask: taskId => {
    IPI.ipiCall(IPI.config.trackTaskUrl + "&token=" + (token ?? "0") + "&taskId=" + taskId, result => {
      const taskElements = document.querySelectorAll('.ipiTaskItem');
      taskElements.forEach(taskElement => {
        const taskTrackElement = taskElement.querySelector('.ipiTaskItemTrack');
        const currentState = taskElement.getAttribute('data-state') ?? 'none';

        if (parseInt(taskElement.getAttribute('data-taskid')) === taskId) {
          taskElement.setAttribute('data-state', currentState === 'none' ? 'tracked' : 'none');
          taskTrackElement.textContent = currentState === 'none' ? IPI.config.loca.LOCA_IPI_UNTRACK_TASK : IPI.config.loca.LOCA_IPI_TRACK_TASK;
          IPI.showTaskDescription(taskElement);
          return;
        }

        if (currentState === 'tracked') {
          taskElement.setAttribute('data-state', 'none');
          taskTrackElement.textContent = IPI.config.loca.LOCA_IPI_TRACK_TASK;
        }
      });

      if (typeof result.trackedAction !== 'undefined') {
        const actionTitle = result.trackedAction?.title ?? '';
        const actionHighlights = result.trackedAction?.highlights ?? [];
        IPI.updateCurrentAction(actionTitle, actionHighlights);
      }
    });
  },
  collectTask: taskId => {
    IPI.ipiCall(IPI.config.collectTaskUrl + "&token=" + (token ?? "0") + "&taskId=" + taskId, result => {
      IPI.markTaskAsCollected(document.querySelector('.ipiTaskItem[data-taskid="' + taskId + '"]'));

      if (typeof result.unclaimedRewards !== 'undefined') {
        const collectHint = document.querySelector('#ipiOverviewChapters .ipiChapterItem.active .ipiHintCollect');

        if (parseInt(result.unclaimedRewards) > 0) {
          collectHint.textContent = result.unclaimedRewards;
        } else {
          collectHint.remove();
        }
      }

      getAjaxResourcebox();
      fadeBox(result.claimedRewardsRendered ?? '', false);
    });
  },
  collectChapter: chapterId => {
    if (chapterId <= 0) {
      console.error("Invalid ChapterId: " + chapterId);
      return;
    }

    IPI.ipiCall(IPI.config.collectChapterUrl + "&token=" + (token ?? "0") + "&chapterId=" + chapterId, result => {
      const collectChapterElement = document.querySelector('#ipiOverviewChapterRewards .ipiOverviewCollectRewards');
      collectChapterElement.classList.add('disabled');
      collectChapterElement.textContent = IPI.config.loca.LOCA_IPI_CHAPTER_COLLECTED;
      document.querySelectorAll('.ipiTaskItem:not([data-state="collected"])').forEach(IPI.markTaskAsCollected);
      getAjaxResourcebox();
      fadeBox(result.claimedRewardsRendered ?? '', false);
    });
  },
  initIpiLayer: config => {
    IPI.config = config;
    IPI.loadingIndicator = $("#ipiOverviewContent").ogameLoadingIndicator();
    document.querySelectorAll('.ipiOverviewSelectChapter').forEach(linkElement => {
      linkElement.addEventListener('click', event => IPI.loadingIndicator.show());
    });
    const taskItems = document.querySelectorAll('.ipiTaskItem');
    taskItems.forEach(taskItem => {
      const taskId = parseInt(taskItem.getAttribute('data-taskid') ?? 0);
      taskItem.querySelector('.ipiTaskItemTitle')?.addEventListener('click', event => {
        if (taskItem.classList.contains('active')) {
          IPI.hideTaskDescription(taskItem);
          return;
        }

        IPI.showTaskDescription(taskItem);
      });

      if (taskItem.getAttribute('data-state') === 'tracked') {
        IPI.showTaskDescription(taskItem);
      }

      if (taskId === 5001 && taskItem.getAttribute('data-state') !== 'collected') {
        IPI.showTaskDescription(taskItem);
      }

      const trackElement = taskItem.querySelector('.ipiTaskItemTrack');
      trackElement.addEventListener('click', event => {
        if (IPI.config === null) {
          console.error("IPI Config missing");
          return;
        }

        const state = taskItem.getAttribute('data-state') ?? 'none';

        if (taskId <= 0) {
          console.error("Invalid TaskId: " + taskId);
          return;
        }

        switch (state) {
          case 'none':
          case 'tracked':
            IPI.trackTask(taskId);
            break;

          case 'completed':
            IPI.collectTask(taskId);
        }
      });
      const collectElement = taskItem.querySelector('.ipiOverviewCollectRewards');
      collectElement.addEventListener('click', event => {
        if (taskItem.getAttribute('data-state') !== 'completed') {
          return;
        }

        IPI.collectTask(taskId);
      });
      const progressElement = taskItem.querySelector('.ipiTaskItemProgress');
      const progress = parseInt(progressElement.getAttribute('data-progress') ?? 0);
      const total = parseInt(progressElement.getAttribute('data-total') ?? 0);

      if (progress > 0 && total > 0 && total >= progress) {
        const progressPercent = progress / total * 100;
        let progressColor = '#5a5716';
        let backgroundColor = 'transparent';

        if (progressPercent >= 100) {
          progressColor = '#4f4f4f';
        }

        progressElement.style.background = `linear-gradient(90deg, ${progressColor} ${progressPercent}%, ${backgroundColor} ${progressPercent}%)`;
      }

      const ipiMenuWrapper = document.querySelector('#ipiMenuWrapper');

      if (ipiMenuWrapper !== null) {
        changeTooltip(ipiMenuWrapper, '');
      }
    });
    const collectChapterElement = document.querySelector('#ipiOverviewChapterRewards .ipiOverviewCollectRewards');
    collectChapterElement.addEventListener('click', event => {
      if (IPI.config === null) {
        console.error("IPI Config missing");
        return;
      }

      if (collectChapterElement.classList.contains('disabled')) {
        return;
      }

      const target = parseInt(collectChapterElement.getAttribute('data-target') ?? 0);

      if (target <= 0) {
        console.error("Invalid ChapterId: " + target);
        return;
      }

      IPI.collectChapter(target);
    });
  },
  showTaskDescription: taskItem => {
    taskItem.classList.add('active');
    const contentElement = taskItem.querySelector('.ipiTaskItemContent');
    $(contentElement).slideDown();
  },
  hideTaskDescription: taskItem => {
    taskItem.classList.remove('active');
    const contentElement = taskItem.querySelector('.ipiTaskItemContent');
    $(contentElement).slideUp();
  },
  markTaskAsCollected: taskElement => {
    const taskTrackElement = taskElement.querySelector('.ipiTaskItemTrack');
    taskElement.setAttribute('data-state', 'collected');
    taskTrackElement.textContent = IPI.config.loca.LOCA_IPI_TASK_COLLECTED;
    const claimTaskRewardsButton = taskElement.querySelector('.ipiTaskItemContentCollect .claimTaskRewards');
    claimTaskRewardsButton.textContent = IPI.config.loca.LOCA_IPI_TASK_COLLECTED;
    claimTaskRewardsButton.classList.add('disabled');
  },
  addHighlight: highlightName => {
    if (typeof highlightName === 'object' && highlightName.length > 0) {
      IPI.highlightSteps = highlightName;
      IPI.highlightStepIndex = 0;
      return IPI.addHighlight(highlightName[IPI.highlightStepIndex]);
    }

    const targets = document.querySelectorAll('.ipiHintable[data-ipi-hint="' + highlightName + '"]');

    if (targets.length <= 0) {
      return false;
    }

    targets.forEach(target => {
      target.classList.add('ipiHintActive');
    });
    return true;
  },
  nextHighlightStep: event => {
    if (IPI.highlightSteps.length <= 0 || IPI.highlightStepIndex >= IPI.highlightSteps.length) {
      return;
    }

    const step = event.target.getAttribute('data-ipi-highlight-step');
    const previousHighlights = document.querySelectorAll('.ipiHintActive[data-ipi-hint="' + step + '"]');

    if (previousHighlights.length <= 0) {
      return;
    }

    previousHighlights.forEach(target => {
      target.classList.remove('ipiHintActive');
    });
    IPI.highlightStepIndex += 1;
    IPI.addHighlight(IPI.highlightSteps[IPI.highlightStepIndex]);
  },
  initIpiHighlights: highlights => {
    IPI.highlights = highlights;
    IPI.refreshHighlights();
    document.querySelectorAll('[data-ipi-highlight-step]').forEach(target => {
      if (target.nodeName.toLowerCase() === 'input') {
        target.addEventListener('change', IPI.nextHighlightStep);
        return;
      }

      target.addEventListener('click', IPI.nextHighlightStep);
    });
  },
  refreshHighlights: () => {
    document.querySelectorAll('.ipiHintable.ipiHintActive').forEach(target => {
      target.classList.remove('ipiHintActive');
    }); //this approach is more friendly to old browsers, since they do not support Array.toReversed yet

    const tmpHighlights = Array.from(IPI.highlights).reverse();

    for (highlight of tmpHighlights) {
      if (typeof highlight === 'object') {
        let highlightAdded = false;
        highlight.forEach(sub => highlightAdded = IPI.addHighlight(sub) || highlightAdded);

        if (highlightAdded === true) {
          break;
        }

        continue;
      }

      if (IPI.addHighlight(highlight) === true) {
        break;
      }
    }
  },
  updateCurrentAction: (title, highlights) => {
    const currentTaskComponent = document.querySelector('#ipimenucomponent .ipiMenuBody');
    const currentTaskFooter = document.querySelector('#ipimenucomponent .ipiMenuFooter');
    currentTaskComponent.textContent = title;

    if (title === '') {
      currentTaskComponent.classList.add('hidden');
      currentTaskFooter.classList.add('hidden');
    } else {
      currentTaskComponent.classList.remove('hidden');
      currentTaskFooter.classList.remove('hidden');
    }

    IPI.highlights = highlights;
    IPI.refreshHighlights();
  },
  initializeMenuContent: ipiMenuConfig => {
    $.ajax({
      url: ipiMenuConfig.ipiMenuContentUrl
    }).done(response => {
      IPI.populateMenuContent(response);
    }).fail(() => {
      fadeBox(result.error, true);
      return false;
    });
    $('.ipiMenuBody').mouseover();
    IPI.initIpiHighlights(ipiMenuConfig.highlights);
  },
  populateMenuContent: content => {
    $('#ipiMenuWrapper').html(content);
  },
  updateMenuContent: content => {
    if (typeof content.unclaimedRewards !== 'undefined') {
      const collectHint = $('#ipimenucomponent .ipiHintCollect');

      if (parseInt(content.unclaimedRewards) > 0) {
        collectHint.textContent = content.unclaimedRewards;
      } else {
        collectHint.remove();
      }
    }

    if (typeof content.trackedAction !== 'undefined') {
      const actionTitle = content.trackedAction?.title ?? '';
      const actionHighlights = content.trackedAction?.highlights ?? [];
      IPI.updateCurrentAction(actionTitle, actionHighlights);
    }
  }
};
/**
 * Save the current sort order to the cookie
 *
 * @param string destination
 */
function saveImperiumOrder(destination, isMoon) {
  var typeName = "impSortOrder";

  if (isMoon) {
    typeName = "impSortOrderMoon";
  }

  $.ajax({
    url: saveUrl,
    method: "post",
    dataType: "json",
    data: {
      ajax: 1,
      type: typeName,
      planets: $(destination).sortable('toArray')
    }
  });
}
/**
 * Reset the current sort order
 *
 */


function clearImperiumOrder() {
  $.ajax({
    url: saveUrl,
    method: "post",
    dataType: "json",
    data: {
      ajax: 1,
      type: 'reset'
    },
    success: function (data) {
      if (!data.error) {
        location.reload();
      }
    }
  });
}
/**
 * Generates the summary column for the imperium overview table
 *
 * @see createImperiumHtml()
 * @param array data
 * @return string
 */


function createSummaryHtml(data) {
  // Some variables we use
  var content = '';
  var planet = null;
  var value = 0;
  var i = 0;
  var key = '';
  content = content + '<div class="planetHead">' + '<div class="planetname">' + data.translations.summary + '</div>' + '<div class="planetImg"><img src="//gf3.geo.gfsrv.net/cdn8a/7efb2e73ca11d2344bbed43668da10.jpg"/></div>' + '<div class="planetData">' + '<ul>' + '<li class="coords textLeft"></li>' + '<li class="fields textRight"></li>' + '</ul>' + '</div>' + '<div class="clearfloat"></div>' + '</div>'; // Generate the content

  for (group in data.groups) {
    content = content + '<div class="row"></div>' + '<div class="values ' + group + ' group' + group + '">';

    for (i = 0; key = data.groups[group][i]; i++) {
      if (data.translations.planets[key] == null) {
        continue;
      }

      var production = {
        hourly: 0,
        daily: 0,
        weekly: 0
      };

      if (key == 'name') {
        value = data.translations.summary;
      } else {
        value = 0;

        if (group == "research") {
          if (!isNaN(data.planets[0][key])) {
            value = data.planets[0][key];
          }
        } else {
          $.each(data.planets, function () {
            planet = this;

            if (!isNaN(planet[key])) {
              value = value + parseInt(planet[key]);

              if (group == "supply" && !isNaN(planet['production']['hourly'][key - 1])) {
                production.hourly += planet['production']['hourly'][key - 1];
                production.daily += planet['production']['daily'][key - 1];
                production.weekly += planet['production']['weekly'][key - 1];
              }
            }
          });
        }
      }

      if (group == "supply" || group == "station") {
        value = "&#x00F8; " + tsdpkt(round(value / data.planets.length, 1));
      } else if (group == "items") {
        value = "&nbsp;";
      } else {
        value = tsdpkt(value);
      }

      if (group == "supply" && key != "name" && production.hourly > 0) {
        var tooltip = '<table>' + "<tr><td>" + data.translations.production.hourly + ':</td><td style=&quot;text-align: right;&quot;>' + tsdpkt(production.hourly) + "</td></tr>" + "<tr><td>" + data.translations.production.daily + ':</td><td style=&quot;text-align: right;&quot;>' + tsdpkt(production.daily) + "</td></tr>" + "<tr><td>" + data.translations.production.weekly + ':</td><td style=&quot;text-align: right;&quot;>' + tsdpkt(production.weekly) + "</td></tr></table>";
        tooltip = tooltip.replace(/</, "&lt;").replace(/>/, "&gt;");
        content = content + '<div class="tooltipRight ' + key + '" title="' + tooltip + '">' + value + '</div>';
      } else {
        content = content + '<div class="' + key + '">' + value + '</div>';
      }
    }

    content = content + '</div>';
  } // Add the outer div to the output


  content = '<div id="planet0" class="planet summary">' + content + '</div>';
  return content;
}
/**
 * Generates the first header column for the imperium table
 *
 * @see createImerpiumHtml()
 * @param array data
 * @return string
 */


function createHeaderHtml(data) {
  // Some variables we use
  var content = '';
  var i = 0;
  var key = '';
  content = content + '<div id="wrapTL">' + '<div id="tab-left">' + '<a id="planetsTab" href="javascript:void(0);" class="active" title="">' + '<span>' + data.translations['planetsTab'] + '</span>' + '</a>' + '<a id="moonsTab" href="javascript:void(0);" title="" class="">' + '<span>' + data.translations['moonsTab'] + '</span>' + '</a>' + '</div>' + '</div>'; // Generate the content

  for (group in data.groups) {
    content = content + '<div id="' + group + '" class="firstCat headers ' + group + ' headers' + group + '" group="' + group + '">' + '<h3 class="open">' + '<span>' + data.translations.groups[group] + '</span>' + '</h3>' + '<ul class="secondCat ' + group + ' group' + group + '">';

    for (i = 0; key = data.groups[group][i]; i++) {
      if (data.translations.planets[key] == null) {
        continue;
      }

      content += '<li class="' + key + '">';

      if (data.translations.planets[key + '_full'] != data.translations.planets[key]) {
        content += '<span class="tooltipLeft" title="' + data.translations.planets[key + '_full'] + '">' + data.translations.planets[key] + '</span>';
      } else {
        content += '<span>' + data.translations.planets[key] + '</span>';
      }

      content += '</li>';
    }

    content = content + '</ul>' + '</div>';
  } // Add the outer div to the output


  content = '<div id="empireTab">' + '<div class="wrapTab">' + '<div class="tab-part01"></div>' + '<h2>' + data.translations.header + '</h2>' + '<span class="reset"><img src="//gf2.geo.gfsrv.net/cdnab/f805c477d15ae3131b7c39c7d70e48.gif" width="16" height="16"><a href="javascript:void(0);" onClick="clearImperiumOrder(); return false;">' + data.translations.reset + '</a></span>' + '<div class="wrapCorner"></div>' + '<br class="clearfloat"/>' + '</div>' + '</div>' + '<div class="header">' + content + '</div>'; // Return the content

  return content;
}
/**
 * Generates all the planet columns for the imperium overview table
 *
 * @see createImperiumHtml()
 * @param array data
 * @return string
 */


function createPlanetsHtml(data) {
  // Some basic variables we use
  var planet = '';
  var shortname = '';
  var content = '';
  var headerKey = '';
  var newContent = '';
  var i = 0;
  var key = ''; // Iterate over the planets

  $.each(data.planets, function () {
    planet = this;
    content = '';
    headerKey = '';
    shortname = planet.name.length > 13 ? planet.name.substr(0, 11) + '...' : planet.name;
    content += '<div class="planetHead">';

    if (planet.name != shortname) {
      content += '<div class="planetname tooltip" title="' + planet.name + '">' + shortname + '</div>';
    } else {
      content += '<div class="planetname">' + shortname + '</div>';
    }

    if (isMobile) {
      content += '<div class="planetImg"><img class="' + planet.border + '" src="' + planet.image + '"/></div>' + '<div class="planetData">' + '<div class="planetDataTop odd">' + '<ul>' + '<li class="coords textLeft"><a class="dark_highlight_tablet" href="' + planet.coordinatesLink + '" >' + planet.coordinates + '</a></li>' + '<li class="coords">' + '<span class="dark_highlight_tablet energy tooltipRight" title="' + (planet.type == 3 ? planet.diameterTooltip : planet.energyTooltip) + '">' + (planet.type == 3 ? "\u2300: " + planet.diameter : planet.energyDescr + planet.energy) + '</span>' + '</li>' + '</ul>' + '</div>' + '<div class="planetDataTop">' + '<ul class="planet_data_2">' + '<li class="fields textLeft">' + planet.fieldUsed + '/' + planet.fieldMax + '</li>' + '<li class="fields textLeft">' + planet.temperature + '</li>' + '</ul>' + '</div>' + '</div>' + '<div class="clearfloat"></div>' + '</div>';
    } else {
      content += '<div class="planetImg"><img class="' + planet.border + '" src="' + planet.image + '"/></div>' + '<div class="planetData">' + '<div class="planetDataTop odd">' + '<ul>' + '<li class="coords textLeft"><a href="' + planet.coordinatesLink + '" >' + planet.coordinates + '</a></li>' + '<li class="fields textRight">' + planet.fieldUsed + '/' + planet.fieldMax + '</li>' + '</ul>' + '</div>' + '<div class="planetDataTop">' + '<ul>' + '<li class="coords textLeft">' + (planet.type == 3 ? planet.diameterDescr : planet.energyDescr) + '</li>' + '<li class="coords textRight">' + (planet.type == 3 ? planet.diameter : planet.energy) + '</li>' + '</ul>' + '</div>' + '<div class="planetDataBottom odd">' + '<ul>' + '<li class="fields textCenter">' + planet.temperature + '</li>' + '</ul>' + '</div>' + '</div>' + '<div class="clearfloat"></div>' + '</div>';
    } // Generate the content


    for (var group in data.groups) {
      content = content + '<div class="row"></div>' + '<div class="values ' + group + ' group' + group + '">';

      for (i = 0; key = data.groups[group][i]; i++) {
        key = String(key); // We have some special html for this!

        if (planet[key + '_html'] != null) {
          key = key + '_html';
        } // Define the header key


        headerKey = key;

        if (key.substring(key.length - 5) == '_html') {
          headerKey = key.substring(0, key.length - 5);
        }

        content = content + '<div class="' + headerKey + '">' + planet[key] + '</div>';
      }

      content = content + '</div>';
    } // And add the planet to the planetlist


    newContent = newContent + '<div id="planet' + this.id + '" class="planet">' + content + '</div>';
  });
  return newContent;
}
/**
 * Generates the imperium overview table
 *
 * @param string destination
 * @param string loading
 * @param array data
 */


function createImperiumHtml(destination, loading, data, isMoon) {
  // Set width to wrapper
  var planetCount = 0;

  if (typeof data.planets != "undefined") {
    planetCount = data["planets"].length;
  }

  var wrapperWidth = 345 + planetCount * 165;
  $("#mainWrapper").attr("style", "width: " + wrapperWidth + "px"); // Show the loading "screen"

  $(loading).show(); // Lets build up the new content

  var newContent = createHeaderHtml(data) + '<div class="planetWrapper">' + createPlanetsHtml(data) + createSummaryHtml(data) + '</div>' + '<br class="clearfloat"/>'; // Update the destination with the new content

  $(destination).append(newContent); // Finally we need the whole planetlist to be sortable

  $(destination + ' .planetWrapper').sortable({
    start: function () {
      removeTooltip(getTooltipSelector());
    },
    update: function () {
      saveImperiumOrder(destination + ' .planetWrapper', isMoon);
    }
  }).disableSelection(); // Make the groups clickable and load the toggle state

  for (group in data.groups) {
    $(destination + ' .headers' + group).click(function () {
      var selector = destination + ' .group' + $(this).attr('group');
      var selectorHeader = "#" + $(this).attr('group') + " h3";
      $(selector).toggle();
      $(selectorHeader).removeClass('openhover').removeClass('closehover').removeClass('close').removeClass('open');

      if ($(selector).attr('style').toLowerCase().substr(9, 4) == 'none') {
        $(selectorHeader).addClass("close");
        $.cookie('impToggleState' + $(this).attr('group'), '1', {
          expires: 365
        });
      } else {
        $(selectorHeader).addClass("open");
        $.cookie('impToggleState' + $(this).attr('group'), '0', {
          expires: 365
        });
      }
    });
    var cookie = $.cookie('impToggleState' + group);

    if (cookie != null && cookie == '1') {
      $("#" + group + " > h3").removeClass('open');
      $("#" + group + " > h3").addClass('close');
      $(destination + ' .group' + group).toggle();
    }
  } // Hide the loading "screen"


  $(loading).hide();
  var summaryIndex = $.inArray(0, empireOrder);

  if (summaryIndex > -1) {
    $('.planetWrapper .planet:eq(' + summaryIndex + '):not(:last-child)').before($("#planet0"));
  } // Load Tooltips


  initTooltips();
}

function displayMessage(response) {
  // bei Upgrades steht in der response nur 1 oder nichts... nichts was man anzeigen sollte. also nur reload
  location.reload(true); // true == NICHT aus dem Cache ^^
}

function doUpgrade(technologyId, planetId, mode, listId, showSlotWarning) {
  let warning;

  if (planetType === 1) {
    warning = LocalizationStrings.lastSlotWarningMoon;
  } else {
    warning = LocalizationStrings.lastSlotWarningPlanet;
  }

  if (showSlotWarning) {
    errorBoxDecision(LocalizationStrings.attention, warning, LocalizationStrings.yes, LocalizationStrings.no, function () {
      executeBuildAction(technologyId, planetId, mode, listId);
    });
  } else {
    executeBuildAction(technologyId, planetId, mode, listId);
  }
}

function executeBuildAction(technologyId, planetId, mode, listId) {
  if (mode === 1) {
    buildListActionBuild(technologyId, null, null, null, planetId);
  } else if (mode === 3) {
    buildListActionDemolish(technologyId, planetId);
  } else if (mode === 2 && listId) {
    buildListActionCancel(technologyId, listId, planetId);
  }
}

function initEmpire() {
  initConnectionErrorFunction();
  $(".secondCat").each(function () {
    $(this).find('li:last').addClass("catbox-end");
  });
  $('.values').each(function () {
    if (!$(this).hasClass('groupitems')) {
      $(this).find('div:even').addClass('even');
      $(this).find('div:odd').addClass('odd');
      $(this).find('div:last').addClass('box-end');
    }

    if ($(this).children().hasClass('equipment')) {
      $(this).children('.equipment').addClass('box-end');
    }
  });
  $("#settings li:last").addClass("set-end");
  $('.header h3').hover(function () {
    $(this).addClass($(this).attr('class') + 'hover');
  }, function () {
    $(this).removeClass('openhover').removeClass('closehover');
  });
  $('.header h3').click(function () {
    $(this).removeClass('openhover').removeClass('closehover');
    var actualClass = $(this).attr('class');

    if (actualClass == "open") {
      $(this).addClass("close");
    } else {
      $(this).addClass("open");
    }

    $(this).removeClass(actualClass);
  });
  $(".planet").hover(function () {
    $(this).addClass("move");
  }, function () {
    $(this).removeClass("move");
  });
  $('.values div img').hover(function () {
    $(this).addClass('imghover');
  }, function () {
    $(this).removeClass('imghover');
  });
  $("#planetsTab").click(function () {
    window.location.href = empireUrl + "&planetType=0";
  });

  if (moonCount > 0) {
    $("#moonsTab").click(function () {
      window.location.href = empireUrl + "&planetType=1";
    });
  } else {
    $("#moonsTab").addClass('nomoons');
  }

  if (planetType == 1) {
    $("#planetsTab").removeClass('active');
    $("#moonsTab").addClass('active');
  }

  initBuffBarEmpire();
}

function initBuffBarEmpire() {
  $('.empireItems').removeClass('hidden');
}

function changeSetting(key, value, success, error, showError) {
  $.ajax({
    type: 'POST',
    url: changeSettingsLink,
    dataType: 'json',
    data: {
      _token: changeSettingsToken,
      key: key,
      value: value
    },
    success: function (data) {
      changeSettingsToken = data.newToken;

      if (data.message.length > 0) {
        fadeBox(data.message, data.error);
      }

      if (!data.error && typeof success == 'function') {
        success();
      } else if (data.error && typeof error == 'function') {
        error();
      }
    },
    error: function (data) {
      if (typeof showError == 'undefined' || showError) {
        fadeBox(LocalizationStrings['error'], true);
      }

      if (data.error && typeof error == 'function') {
        error();
      }
    }
  });
}

function getOverlayText($thisObj) {
  if ($thisObj.hasClass('building') && $thisObj.children().hasClass('build-faster-img')) {
    return questionbuilding;
  } else if ($thisObj.hasClass('building') && $thisObj.children().hasClass('build-finish-img')) {
    return questionbuilding;
  } else if ($thisObj.hasClass('lfbuilding') && $thisObj.children().hasClass('build-faster-img')) {
    return questionlfbuilding;
  } else if ($thisObj.hasClass('lfbuilding') && $thisObj.children().hasClass('build-finish-img')) {
    return questionlfbuilding;
  } else if ($thisObj.hasClass('ship') && $thisObj.children().hasClass('build-faster-img')) {
    return questionship;
  } else if ($thisObj.hasClass('ship') && $thisObj.children().hasClass('build-finish-img')) {
    return questionship;
  } else if ($thisObj.hasClass('shipextended') && $thisObj.children().hasClass('build-faster-img')) {
    return questionshipextended;
  } else if ($thisObj.hasClass('shipextended') && $thisObj.children().hasClass('build-finish-img')) {
    return questionshipextended;
  } else if ($thisObj.hasClass('research') && $thisObj.children().hasClass('build-faster-img')) {
    return questionresearch;
  } else if ($thisObj.hasClass('research') && $thisObj.children().hasClass('build-finish-img')) {
    return questionresearch;
  } else if ($thisObj.hasClass('lfresearch') && $thisObj.children().hasClass('build-faster-img')) {
    return questionlfresearch;
  } else if ($thisObj.hasClass('lfresearch') && $thisObj.children().hasClass('build-finish-img')) {
    return questionlfresearch;
  }
}

function getFastBuildPrice($thisObj) {
  if ($thisObj.hasClass('building')) {
    return pricebuilding;
  } else if ($thisObj.hasClass('lfbuilding')) {
    return pricelfbuilding;
  } else if ($thisObj.hasClass('research')) {
    return priceresearch;
  } else if ($thisObj.hasClass('lfresearch')) {
    return pricelfresearch;
  } else if ($thisObj.hasClass('ship')) {
    return priceship;
  } else if ($thisObj.hasClass('shipextended')) {
    return priceshipextended;
  }
}

function getRedirectLink(params) {
  var finalParams = {};

  if (params != undefined) {
    for (var key in params) {
      finalParams[key] = params[key];
    }

    return $.param.fragment($.param.querystring(window.location.href, finalParams), {}); //Return witch anchor and added params
  } else {
    return window.location.href.split('#')[0]; //return url without anchor
  }
}

function sendShips(order, galaxy, system, planet, planettype, shipCount, additionalParams) {
  if (shipsendingDone == 1) {
    shipsendingDone = 0;
    params = {
      mission: order,
      galaxy: galaxy,
      system: system,
      position: planet,
      type: planettype,
      shipCount: shipCount,
      _token: token
    };

    if (additionalParams && typeof additionalParams === 'object') {
      Object.keys(additionalParams).map(key => {
        if (!params[key]) {
          params[key] = additionalParams[key];
        }
      });
    }

    $.ajax(miniFleetLink, {
      data: params,
      dataType: "json",
      type: "POST",
      success: function (data) {
        token = data.newAjaxToken;
        updateOverlayToken('phalanxSystemDialog', data.newAjaxToken);
        updateOverlayToken('phalanxDialog', data.newAjaxToken);
        getAjaxEventbox();
        displayMiniFleetMessage(data.response);
        refreshFleetEvents(true);
      }
    });
  }
}

function sendShipsWithPopup(order, galaxy, system, planet, planettype, shipCount) {
  params = {
    mission: order,
    galaxy: galaxy,
    system: system,
    position: planet,
    type: planettype,
    shipCount: shipCount,
    _token: token
  };
  $.ajax(miniFleetLink, {
    data: params,
    dataType: "json",
    type: "POST",
    success: function (data) {
      token = data.newAjaxToken;
      updateOverlayToken('phalanxSystemDialog', data.newAjaxToken);
      updateOverlayToken('phalanxDialog', data.newAjaxToken);

      if (data.response.success) {
        fadeBox(data.response.message + ' ' + data.response.coordinates.galaxy + ":" + data.response.coordinates.system + ":" + data.response.coordinates.position, !data.response.success);
      } else {
        fadeBox(data.response.message, true);
      }
    }
  });
}

function outlawWarning(order, galaxy, system, planet, planettype, shipCount, callbackFunction) {
  if (typeof callbackFunction != 'function') {
    if (order == constants.espionage) {
      callbackFunction = sendEspionageProbes;
    } else if (order == constants.missleattack) {
      callbackFunction = openMissleLaunchBox;
    }
  }

  if (showOutlawWarning) {
    errorBoxDecision(LocalizationStrings.attention, LocalizationStrings.outlawWarning, LocalizationStrings.yes, LocalizationStrings.no, callbackFunction);
  } else {
    callbackFunction();
  }

  function sendEspionageProbes() {
    sendShips(order, galaxy, system, planet, planettype, shipCount);
  }

  function openMissleLaunchBox() {
    openOverlay(missleAttackLink + '&galaxy=' + galaxy + '&system=' + system + '&position=' + planet + '&planetType=' + planettype, {
      modal: true
    });
  }
}

function initThousandSeparator() {
  $('.checkThousandSeparator').each(function (e) {
    formatNumber(this, this.value);
  }).on('keydown', function (event) {
    var range = $(this).getSelection();

    if (range.length === 0) {
      var text = $(this).val();

      if (event.which === 8 && text.substr(range.start - 1, 1) === LocalizationStrings['thousandSeperator']) {
        range.start -= 1;
        range.end -= 1;
        $(this).setSelection(range);
      }

      if (event.which === 46 && text.substr(range.start, 1) === LocalizationStrings['thousandSeperator']) {
        range.start += 1;
        range.end += 1;
        $(this).setSelection(range);
      }
    }
  }).on('keyup', function (event) {
    formatNumber(this, this.value);
  });
}

var speedingUpBuildListEntry = false; // overall index page

function initIndex() {
  initConnectionErrorFunction();
  timerHandler.appendCallback(function () {
    localTime = new Date();
    serverTime = new Date(localTime.valueOf() + timeDiff);
    $('.OGameClock').html(getFormatedDate(serverTime.getTime(), '[d].[m].[Y] <span>[H]:[i]:[s]</span>'));
  });
  $('select').ogameDropDown();
  $('#planet .slot').hover(function () {
    $(this).addClass('slot-hover');
  }, function () {
    $(this).removeClass('slot-hover');
  });
  $('#eventboxFilled').hover(function () {
    $(this).addClass('eventboxHover');
  }, function () {
    $(this).removeClass('qeventboxHover');
  });
  $(document).undelegate('a.build-faster', 'click').delegate('a.build-faster', 'click', function () {
    var $thisObj = $(this);

    if (darkMatter < getFastBuildPrice($thisObj)) {
      errorBoxDecision(LocalizationStrings.error, LocalizationStrings.errorNotEnoughDM, LocalizationStrings.yes, LocalizationStrings.no, redirectPremium);
      return;
    }

    if (speedingUpBuildListEntry) {
      return;
    }

    speedingUpBuildListEntry = true;
    var referrerPage = $.deparam.querystring().page;
    errorBoxDecision(LocalizationStrings.notice, getOverlayText($thisObj), LocalizationStrings.yes, LocalizationStrings.no, function () {
      $.ajax({
        url: $thisObj.attr('rel'),
        data: {
          ajax: 1,
          _token: token,
          referrerPage: referrerPage
        },
        type: "POST",
        dataType: "json",
        error: function () {
          fadeBox(LocalizationStrings['error'], true);
          $thisObj.addClass('disabled');
          speedingUpBuildListEntry = false;
        },
        success: function (data) {
          token = data.newAjaxToken;

          if (data.error) {
            fadeBox(data.message, true);
            $thisObj.addClass('disabled');
            speedingUpBuildListEntry = false;
          } else {
            location.href = getRedirectLink();
          }
        }
      });
      return false;
    }, function () {
      speedingUpBuildListEntry = false;
    });
  }) // detail slides
  .undelegate('.slideIn', 'click').delegate('.slideIn', 'click', function () {
    $(".slideIn").removeClass("active");
    var id = $(this).attr("ref");
    $("a[ref='" + id + "']").addClass("active");
    Tipped.hideAll();
    $('html, body').animate({
      scrollTop: 0
    }, 500);
    gfSlider.slideIn(getElementByIdWithCache("detail"), id);
  }).undelegate('a.close_details', 'click').delegate('a.close_details', 'click', function () {
    if (window.gfSlider !== undefined) {
      gfSlider.hide(getElementByIdWithCache('detail'));
    }
  });
  $("#banner_skyscraper a.close_details").click(function () {
    changeSetting("hideBanner", $(this).attr("ref"), function () {
      $("#banner_skyscraper").remove();
    });
  });
  var wreckfield = $("#wreckFieldCountDown");

  if (wreckfield) {
    new simpleCountdown(wreckfield, wreckfield.data('duration'), null);
  }

  initHideElements();
  initOverlays();
  initThousandSeparator();
  initTooltips();
  initPlanetSorting(); // for Tablets only

  initRetinaImages(); //just during the birthday events

  initBDayEventHints();
}

function initPlanetSorting() {
  $("#planetList.sortable").sortable({
    start: function () {
      Tipped.hideAll();
    },
    stop: function () {
      Tipped.hideAll();
      changeSetting('customPlanetOrder', $(this).sortable('toArray'));
    }
  });

  if ($('.lockPlanets').hasClass('closed')) {
    $("#planetList.sortable").sortable('disable');
  }

  $('.lockPlanets').unbind('click').bind('click', function () {
    var $thisObj = $(this);
    changeSetting('planetOrderLocked', $thisObj.hasClass('open') ? 1 : 0, function () {
      var text;

      if ($thisObj.hasClass('open')) {
        $thisObj.removeClass('open').addClass('closed');
        $("#planetList.sortable").sortable('disable');
        text = LocalizationStrings.planetOrder.unlock;
      } else {
        $thisObj.removeClass('closed').addClass('open');
        $("#planetList.sortable").sortable('enable');
        text = LocalizationStrings.planetOrder.lock;
      }

      changeTooltip($thisObj, text);
    });
  });
}

function initHideElements() {
  $(document).undelegate('html', 'touchstart.hideElem click.hideElem').delegate('html', 'touchstart.hideElem click.hideElem', function (e) {
    e.stopPropagation();

    if ($(this).data('noclick')) {
      return;
    }

    if (isMobile) {
      var targetTagName = e.target.tagName.toUpperCase();

      if (!(targetTagName === 'TEXTAREA' || targetTagName === 'INPUT' || targetTagName === 'SELECT')) {
        document.activeElement.blur();
      }

      if (!$(e.target).parents('.markItUpHeader ul').length) {
        $('.markItUpHeader ul ul').hide();
      }
    } else {
      if ($(e.target).parents('.ui-dialog').length || $(e.target).parents('.tpd-tooltip').length) {
        // don't hide overlays when click was inside overlay itself or a tooltip
        // (tooltips might be part of the overlay even though they're technically located outside)
        return;
      }

      var $overlayDivs = $('.overlayDiv');

      if (typeof $overlayDivs.data('uiDialog') != "undefined") {
        // schliesse auch die Dropdowns sofern vorhanden
        var dropDowns = $overlayDivs.find('.markItUpDropMenu[id]');

        for (var i = 0; i < dropDowns.length; ++i) {
          var $innerUl = $('body>ul[rel=' + dropDowns[i].id + ']');
          $innerUl.hide();
        }

        $overlayDivs.dialog('close');

        if ($("#FederationLayer").length > 0) {
          $("#FederationLayer").remove();
        }
      }
    }
  });
}

function initJumpgate() {
  $('select').ogameDropDown();
  $(".list tr:even").addClass("alt");
  $(document).undelegate('#jumpgateForm .ship_input_row .textinput', 'keyup change input').delegate('#jumpgateForm .ship_input_row .textinput', 'keyup change input', function () {
    checkIntInput(this, 0, $(this).attr('rel'));
  }).undelegate('#jumpgateForm .ship_input_row .textinput', 'focus').delegate('#jumpgateForm .ship_input_row .textinput', 'focus', function () {
    if ($.isNumeric($(this).val()) === false) {
      $(this).val("");
    } else {
      $(this).select();
    }
  });
  $('#jumpgate .answerHeadline, .js_openStandardMoonMenu').click(function () {
    if (!player.hasCommander) {
      errorBoxNotify(LocalizationStrings.error, translation.changeSettingOnlyWithCommander, LocalizationStrings.ok, null, false);
    } else {
      $('#jumpgate').find('.answerHeadline').toggleClass('open');
      $('.thirdCol').toggleClass('hidden');
    }
  });
  $('.js_executeJumpButton').click(function () {
    var selectedMoon = $('#jumpgateForm').find('select[name="targetSpaceObjectId"]').val();
    window.jumpGateTargetId = selectedMoon;

    if (selectedMoon != 0) {
      var noShipsSelected = true;
      $('.ship_selection_table input').each(function () {
        if ($(this).val() > 0) {
          noShipsSelected = false;
        }
      });

      if (!noShipsSelected) {
        ajaxFormSubmit('jumpgateForm', $(this).attr('data-url'), jumpgateDone);
      } else {
        fadeBox(translation.noShipsWereSelected, true);
      }
    } else {
      fadeBox(translation.validTargetNeeded, true);
    }
  });
}

function jumpgateDone(data) {
  var data = $.parseJSON(data);

  if (data["status"]) {
    planet = data["targetMoon"];
    $('.overlayDiv').dialog('destroy');
  }

  errorBoxAsArray(data["errorbox"]);

  if (typeof data.newAjaxToken != 'undefined') {
    setNewTokenData(data.newAjaxToken);
  }
}

function jumpgateDefaultTargetSelectionCallback(data) {
  var data = $.parseJSON(data);

  if (data["status"]) {
    token = data.token;
    $('#jumpgateForm').find('input[name="token"]').val(data.token);
    var targetSelect = $('#jumpgateForm').find('select[name="targetSpaceObjectId"]');
    targetSelect.find('option').removeAttr('selected');
    var optionNode = targetSelect.find('option[value="' + data["targetMoon"] + '"]');

    if (optionNode.length) {
      optionNode.attr('selected', 'selected');
    } else {
      if (targetSelect.find('option[value="0"]').length == 0) {
        targetSelect.append($(document.createElement('option')).attr('value', 0).attr('selected', 'selected').text('--'));
      } else {
        targetSelect.find('option[value="0"]').attr('selected', 'selected');
      }
    }

    targetSelect.trigger('change'); // not sure if the following is enough to refresh that dropdown

    targetSelect.ogameDropDown('refresh');
  }

  errorBoxAsArray(data["errorbox"]);

  if (typeof data.newAjaxToken != 'undefined') {
    setNewTokenData(data.newAjaxToken);
  }
}

function setNewTokenData(newToken) {
  $('#jumpgateForm input[name="token"]').val(newToken);
  $('#jumpgateDefaultTargetSelectionForm input[name="token"]').val(newToken);
  token = newToken;
}

function openJumpgate() {
  //if($(".ui-dialog #content #jumpgate").length == 0) {
  openOverlay(jumpGateLink, {
    title: jumpGateLoca.LOCA_STATION_JUMPGATE_HEADLINE
  }); //}
}

function redirectLogout() {
  location.href = redirectLogoutLink;
}

function redirectBuyPremium() {
  location.href = redirectPremiumLink;
}

function redirectOverview() {
  location.href = redirectOverviewLink;
}

function redirectSpaceDock() {
  location.href = redirectSpaceDockLink;
}
if (typeof KeyEvent == "undefined") {
  var KeyEvent = {
    DOM_VK_CANCEL: 3,
    DOM_VK_HELP: 6,
    DOM_VK_BACK_SPACE: 8,
    DOM_VK_TAB: 9,
    DOM_VK_CLEAR: 12,
    DOM_VK_RETURN: 13,
    DOM_VK_ENTER: 14,
    DOM_VK_SHIFT: 16,
    DOM_VK_CONTROL: 17,
    DOM_VK_ALT: 18,
    DOM_VK_PAUSE: 19,
    DOM_VK_CAPS_LOCK: 20,
    DOM_VK_ESCAPE: 27,
    DOM_VK_SPACE: 32,
    DOM_VK_PAGE_UP: 33,
    DOM_VK_PAGE_DOWN: 34,
    DOM_VK_END: 35,
    DOM_VK_HOME: 36,
    DOM_VK_LEFT: 37,
    DOM_VK_UP: 38,
    DOM_VK_RIGHT: 39,
    DOM_VK_DOWN: 40,
    DOM_VK_PRINTSCREEN: 44,
    DOM_VK_INSERT: 45,
    DOM_VK_DELETE: 46,
    DOM_VK_0: 48,
    DOM_VK_1: 49,
    DOM_VK_2: 50,
    DOM_VK_3: 51,
    DOM_VK_4: 52,
    DOM_VK_5: 53,
    DOM_VK_6: 54,
    DOM_VK_7: 55,
    DOM_VK_8: 56,
    DOM_VK_9: 57,
    DOM_VK_SEMICOLON: 59,
    DOM_VK_EQUALS: 61,
    DOM_VK_A: 65,
    DOM_VK_B: 66,
    DOM_VK_C: 67,
    DOM_VK_D: 68,
    DOM_VK_E: 69,
    DOM_VK_F: 70,
    DOM_VK_G: 71,
    DOM_VK_H: 72,
    DOM_VK_I: 73,
    DOM_VK_J: 74,
    DOM_VK_K: 75,
    DOM_VK_L: 76,
    DOM_VK_M: 77,
    DOM_VK_N: 78,
    DOM_VK_O: 79,
    DOM_VK_P: 80,
    DOM_VK_Q: 81,
    DOM_VK_R: 82,
    DOM_VK_S: 83,
    DOM_VK_T: 84,
    DOM_VK_U: 85,
    DOM_VK_V: 86,
    DOM_VK_W: 87,
    DOM_VK_X: 88,
    DOM_VK_Y: 89,
    DOM_VK_Z: 90,
    DOM_VK_CONTEXT_MENU: 93,
    DOM_VK_NUMPAD0: 96,
    DOM_VK_NUMPAD1: 97,
    DOM_VK_NUMPAD2: 98,
    DOM_VK_NUMPAD3: 99,
    DOM_VK_NUMPAD4: 100,
    DOM_VK_NUMPAD5: 101,
    DOM_VK_NUMPAD6: 102,
    DOM_VK_NUMPAD7: 103,
    DOM_VK_NUMPAD8: 104,
    DOM_VK_NUMPAD9: 105,
    DOM_VK_MULTIPLY: 106,
    DOM_VK_ADD: 107,
    DOM_VK_SEPARATOR: 108,
    DOM_VK_SUBTRACT: 109,
    DOM_VK_DECIMAL: 110,
    DOM_VK_DIVIDE: 111,
    DOM_VK_F1: 112,
    DOM_VK_F2: 113,
    DOM_VK_F3: 114,
    DOM_VK_F4: 115,
    DOM_VK_F5: 116,
    DOM_VK_F6: 117,
    DOM_VK_F7: 118,
    DOM_VK_F8: 119,
    DOM_VK_F9: 120,
    DOM_VK_F10: 121,
    DOM_VK_F11: 122,
    DOM_VK_F12: 123,
    DOM_VK_F13: 124,
    DOM_VK_F14: 125,
    DOM_VK_F15: 126,
    DOM_VK_F16: 127,
    DOM_VK_F17: 128,
    DOM_VK_F18: 129,
    DOM_VK_F19: 130,
    DOM_VK_F20: 131,
    DOM_VK_F21: 132,
    DOM_VK_F22: 133,
    DOM_VK_F23: 134,
    DOM_VK_F24: 135,
    DOM_VK_NUM_LOCK: 144,
    DOM_VK_SCROLL_LOCK: 145,
    DOM_VK_COMMA: 188,
    DOM_VK_PERIOD: 190,
    DOM_VK_SLASH: 191,
    DOM_VK_BACK_QUOTE: 192,
    DOM_VK_OPEN_BRACKET: 219,
    DOM_VK_BACK_SLASH: 220,
    DOM_VK_CLOSE_BRACKET: 221,
    DOM_VK_QUOTE: 222,
    DOM_VK_META: 224
  };
}

(function ($) {
  $.fn.extend({
    ogameDropDown: function (functionName, preventScrollSelection) {
      if ($("body.showOldDropdowns").length) {
        return this;
      }

      function positionList($ul) {
        var ulHeight = $ul.outerHeight();
        var $dropdown = $('.dropdown.currentlySelected[rel="' + $ul.attr('id') + '"]');

        if ($dropdown.length) {
          var left = Math.min($(window).innerWidth() + $(window).scrollLeft() - $ul.width() - 3, $dropdown.offset().left);
          var top;
          var dropdownTop = Math.ceil($dropdown.offset().top);

          if (dropdownTop + $dropdown.height() + ulHeight + $('#siteFooter').outerHeight() >= $(window).innerHeight() + $(window).scrollTop()) {
            top = dropdownTop - ulHeight + 1;
          } else {
            top = dropdownTop + $dropdown.height() + 1;
          }

          $ul.css('left', left).css('top', top).css('min-width', $dropdown.width());
        }
      }

      var functions = {
        destroy: function () {
          $(this).filter('select.dropdownInitialized').each(function () {
            var $this = $(this);
            $('.dropdown[rel="' + $this.data('dropdownId') + '"]').remove();
            $('ul#' + $this.data('dropdownId')).remove();
            $this.removeClass('dropdownInitialized').data('dropdownId', '').show();
          });
        },
        hide: function () {
          $(this).filter('select.dropdownInitialized').each(function () {
            var $currentlySelected = $('.currentlySelected[rel="' + $(this).data('dropdownId') + '"]');
            $currentlySelected.find('a').removeClass('hover');
            $('.dropdownList#' + $currentlySelected.attr('rel')).hide();
          });
        },
        reposition: function () {
          $(this).filter('select.dropdownInitialized').each(function () {
            positionList($('#' + $(this).data('dropdownId')));
          });
        },
        refresh: function () {
          var selected = $(this).find("option[selected]"); // get selected <option>

          var href = getIEVersion() < 999 ? '#' : 'javascript:void(0);';
          var $currentItem = $('a[class="' + selected.attr('class') + '"][rel="' + $(this).data('dropdownId') + '"]').text(selected.text());
        },
        select: function (value) {
          $(this).find("option").prop("selected", false).removeAttr("selected");

          if (typeof value == 'string' && value.length > 0) {
            // select value and refresh
            let selected = $(this).find("option[value='" + value + "']");

            if (selected.length > 0) {
              selected.prop("selected", true).attr('selected', 'selected');
              functions.refresh.call(this);
              return;
            }
          } // select default value and refesh


          let defaultOption = $(this.find("option[value='-']"));

          if (defaultOption.length > 0) {
            defaultOption.prop("selected", true).attr('selected', 'selected');
            functions.refresh.call(this);
          }
        }
      };

      if (typeof functionName == 'string') {
        if (typeof functions[functionName] == 'function') {
          let args = Array.prototype.slice.call(arguments);
          args.shift();
          functions[functionName].apply(this, args);
        }

        return this;
      }

      $(this).filter('select:not(.dropdownInitialized)').each(function () {
        var $this = $(this);
        var randomId = 'dropdown' + Math.floor(Math.random() * 1000);
        var selected = $this.find("option[selected]"); // get selected <option>

        if (selected.length == 0) {
          selected = $this.find('option:first-child');
        }

        var href = getIEVersion() < 999 ? '#' : 'javascript:void(0);';
        var $currentItem = $('<a class="' + selected.attr('class') + '" data-value="' + selected.val() + '" rel="' + randomId + '" href="' + href + '">' + selected.text() + '</a>');
        var $dropdown = $('<span class="dropdown currentlySelected ' + $this.attr('class') + '" rel="' + randomId + '"></span>').append($currentItem).width($this.css('width').length ? $this.css('width') : $this.width()).data('selectElement', $this);

        if ($this.is('[readonly]') || $this.is(':disabled')) {
          $dropdown.addClass('disabled');
        }

        $this.after($dropdown).hide().addClass('dropdownInitialized').data('dropdownId', randomId); // iterate through all the <option> elements and create UL

        var $ul = $('<ul class="dropdown dropdownList" id="' + randomId + '"></ul>').delegate('a', 'click', function (e) {
          e.stopPropagation();

          if ($(this).attr('disabled') === 'disabled') {
            return;
          }

          $currentItem.html($(this).html()).attr('class', $(this).attr('class')).attr('data-value', $(this).attr('data-value'));
          $ul.hide().find('a').removeClass('focus');
          $(this).addClass('focus');
          var value = $(this).attr('data-value');
          $this.val($(this).attr('data-value')).trigger('change').find('option[value="' + value + '"], option:contains("' + value + '")').trigger('click');
        });

        function initialize() {
          if ($this.is($this.is('[readonly]') || ':disabled')) {
            return;
          }

          if (!$ul.hasClass('initialized')) {
            $ul.addClass('initialized');
            $this.find("option").each(function () {
              var html = $(this).html();
              var disabled = '';
              var title = '';

              if (typeof $(this).attr('data-html') != 'undefined') {
                html = $(this).attr('data-html');
              }

              if (typeof $(this).attr('data-html-prepend') != 'undefined') {
                html = $(this).attr('data-html-prepend') + html;
              }

              if (typeof $(this).attr('data-html-append') != 'undefined') {
                html += $(this).attr('data-html-append');
              }

              if (typeof $(this).attr('title') != 'undefined') {
                title = 'title="' + $(this).attr('title') + '" ';
              }

              if (typeof $(this).attr('disabled') != 'undefined') {
                disabled = 'disabled="' + $(this).attr('disabled') + '" ';
              }

              $li = $('<li><a ' + 'class="' + $(this).attr('class') + '" ' + disabled + title + 'data-value="' + $(this).val() + '">' + html + '</a></li>');
              $ul.append($li);

              if ($(this).is(':selected')) {
                $li.find('a').addClass('focus');
              }
            });
          }
        }

        $currentItem.bind('focus', function (e) {
          $(".dropdownList").not($ul).hide();
          $(".dropdown.currentlySelected").removeClass('focus');
          $(this).addClass('hover');
          $dropdown.addClass('focus');
          initialize();
        }).bind('mousewheel', function (e) {
          initialize();
          $(this).unbind('mousewheel');
        }).bind('click', function (e) {
          e.preventDefault();

          if ($this.is($this.is('[readonly]') || ':disabled')) {
            return;
          }

          $(".dropdownList").not($ul).hide();
          $(".dropdown.currentlySelected").removeClass('focus');
          $dropdown.addClass('focus');

          if ($ul.is(':hidden')) {
            $(this).addClass('hover');
            initialize();
            positionList($ul);
            $(window).unbind('resize.dropdown' + randomId).bind('resize.dropdown' + randomId, function () {
              positionList($ul);
            });
            $ul.show();

            if ($ul.hasScrollbar()) {
              $ul.find('a').css('padding-right', 22);
            }
          } else {
            $(this).removeClass('hover');
            $(window).unbind('resize.dropdown' + randomId);
            $ul.hide();
          }
        });
        $('body').append($ul);
      });
      var currentlyTyped = "";
      var currentlyTypedInterval;

      function updateCurrentlyTyped(text, e) {
        currentlyTyped = text;
        clearTimeout(currentlyTypedInterval);
        currentlyTypedInterval = setTimeout(function () {
          currentlyTyped = "";
        }, 1500);
        var $list = $('.dropdownList:visible');
        var instantSelect = false;

        if ($list.length == 0) {
          var $focusedElement = $('.dropdown.currentlySelected.focus');

          if ($focusedElement.length) {
            $list = $("#" + $focusedElement.attr('rel'));
            instantSelect = true;
          } else {
            return;
          }
        }

        var lowerText = currentlyTyped.toLowerCase();
        var $focusElement = $list.find('a').filter(function () {
          if ($(this).attr('data-value').toLowerCase().indexOf(lowerText) == 0) {
            return true;
          }

          return $(this).text().trim().toLowerCase().indexOf(lowerText) == 0;
        });

        if ($focusElement.length) {
          e.preventDefault();
          $list.find('a').removeClass('focus');
          $($focusElement.get(0)).addClass('focus').focus();

          if (instantSelect) {
            $focusElement.click();
          }
        } else {
          clearTimeout(currentlyTypedInterval);
          currentlyTyped = "";
        }
      }

      $(document) // hide the dropdown
      .undelegate('html', 'touchstart.dropdown click.dropdown').delegate('html', 'touchstart.dropdown click.dropdown', function (e) {
        if ($(e.target).closest(".dropdown").length == 0) {
          $(".dropdownList").hide(); //$(".currentlySelected a").removeClass('hover');
          //$(".currentlySelected").removeClass('focus');
        }
      }).undelegate('.dropdown', 'mousewheel.dropdown').delegate('.dropdown', 'mousewheel.dropdown', function (e, delta) {
        if (preventScrollSelection) {
          return;
        }

        e.preventDefault();
        var $target = $(e.target).closest('.dropdown');
        var $list;

        if ($target.hasClass('currentlySelected')) {
          $list = $("#" + $target.attr('rel'));
        } else {
          $list = $target;
        }

        var $currentItem = $('[rel="' + $list.attr('id') + '"] a');
        var $focussed = $list.find('a:focus');

        if ($focussed.length == 0) {
          $focussed = $list.find('a.focus');
        }

        if ($focussed.length == 0) {
          $focussed = $list.find('a[data-value="' + $currentItem.attr('data-value') + '"]');
        }

        var $focussedListElement = $focussed.parent();
        var $focusElement = null;
        var amount = Math.abs(delta);

        if (delta > 0) {
          for (var amountCounter = 0; amountCounter < amount; amountCounter++) {
            if ($focussedListElement.is(':first-child')) {
              $focusElement = $focussedListElement.find('a');
              break;
            } else {
              $focusElement = $focussedListElement.prev().find('a');
            }

            $focussedListElement = $focusElement.parent();
          }
        } else {
          for (var amountCounter = 0; amountCounter < amount; amountCounter++) {
            if ($focussedListElement.is(':last-child')) {
              $focusElement = $focussedListElement.find('a');
              break;
            } else {
              $focusElement = $focussedListElement.next().find('a');
            }

            $focussedListElement = $focusElement.parent();
          }
        }

        if ($focusElement != null) {
          $focussedListElement = $focusElement.parent();
          $list.find('a').removeClass('focus');
          $focusElement.addClass('focus').focus();

          if ($list.is(':hidden')) {
            $focusElement.click();
          } else {
            var currentPosition = $focussedListElement.position().top;

            if (currentPosition < 0) {
              $list.scrollTop($list.scrollTop() + currentPosition);
            } else if (currentPosition + $focussedListElement.outerHeight() > $list.innerHeight()) {
              $list.scrollTop($list.scrollTop() + currentPosition + $focussedListElement.outerHeight() - $list.innerHeight());
            }
          }
        }
      }).undelegate('*', 'focus.dropdown').delegate('*', 'focus.dropdown', function (e) {
        if ($(e.target).closest(".dropdown").length == 0) {
          $(".currentlySelected a").removeClass('hover');
          $(".currentlySelected").removeClass('focus');
        }
      }) // get keyboard arrow keys and backspace typing
      .unbind('keydown.dropdown').bind('keydown.dropdown ', function (e) {
        if ($(':focus').length > 0 && $(':focus').parents('.dropdown').length == 0) {
          return;
        }

        var instantSelect = false;
        var $list = $('.dropdownList:visible');

        if ($list.length == 0) {
          var $focusedElement = $('.dropdown.currentlySelected.focus');

          if ($focusedElement.length) {
            $list = $("#" + $focusedElement.attr('rel'));
            instantSelect = true;
          } else {
            return;
          }
        }

        var $currentItem = $('[rel="' + $list.attr('id') + '"] a');
        var $focussed = $list.find('a:focus');

        if ($focussed.length == 0) {
          $focussed = $list.find('a.focus');
        }

        if ($focussed.length == 0) {
          $focussed = $list.find('a[data-value="' + $currentItem.attr('data-value') + '"]');
        }

        var $focussedListElement = $focussed.parent();
        var $focusElement = null; // arrow keys

        if (e.keyCode == KeyEvent.DOM_VK_UP || e.keyCode == KeyEvent.DOM_VK_DOWN) {
          if (e.keyCode == KeyEvent.DOM_VK_UP) {
            if ($focussedListElement.is(':first-child')) {
              $focusElement = $focussedListElement.find('a');
            } else {
              $focusElement = $focussedListElement.prev().find('a');
            }

            $focussedListElement = $focusElement.parent();
          } else {
            if ($focussedListElement.is(':last-child')) {
              $focusElement = $focussedListElement.find('a');
            } else {
              $focusElement = $focussedListElement.next().find('a');
            }

            $focussedListElement = $focusElement.parent();
          }

          e.preventDefault();
        } else if (e.keyCode == KeyEvent.DOM_VK_BACK_SPACE) {
          // simulate keyboard typing
          updateCurrentlyTyped(currentlyTyped.substring(0, currentlyTyped.length - 1), e);
        } else if (e.keyCode == KeyEvent.DOM_VK_RETURN) {
          e.preventDefault();

          if (instantSelect) {
            $currentItem.parents('form').submit();
            return;
          } else {
            instantSelect = true;
            $focusElement = $focussed;
          }
        } else if (e.keyCode == KeyEvent.DOM_VK_ESCAPE) {
          $focusElement = $list.find('[data-value="' + $currentItem.attr('data-value') + '"]');
          instantSelect = true;
        }

        if ($focusElement != null) {
          $focussedListElement = $focusElement.parent();
          $list.find('a').removeClass('focus');
          $focusElement.addClass('focus').focus();

          if (instantSelect) {
            $focusElement.click();
          } else {
            var currentPosition = $focussedListElement.position().top;

            if (currentPosition < 0) {
              $list.scrollTop($list.scrollTop() + currentPosition);
            } else if (currentPosition + $focussedListElement.outerHeight() > $list.innerHeight()) {
              $list.scrollTop($list.scrollTop() + currentPosition + $focussedListElement.outerHeight() - $list.innerHeight());
            }
          }
        }
      }) // simulate keyboard typing
      .unbind('keypress.dropdown').bind('keypress.dropdown', function (e) {
        if ($(':focus').length > 0 && $(':focus').parents('.dropdown').length == 0 || e.charCode == 0) {
          return;
        }

        updateCurrentlyTyped(currentlyTyped + String.fromCharCode(e.charCode), e);
      });
      return $(this);
    },

    /**
    * @url http://stackoverflow.com/a/9217301/1386610
    */
    selectText: function () {
      var range,
          selection,
          obj = this[0],
          type = {
        func: 'function',
        obj: 'object'
      },
          // Convenience
      is = function (type, o) {
        return typeof o === type;
      };

      if (is(type.obj, obj.ownerDocument) && is(type.obj, obj.ownerDocument.defaultView) && is(type.func, obj.ownerDocument.defaultView.getSelection)) {
        selection = obj.ownerDocument.defaultView.getSelection();

        if (is(type.func, selection.setBaseAndExtent)) {
          // Chrome, Safari - nice and easy
          selection.setBaseAndExtent(obj, 0, obj, $(obj).contents().size());
        } else if (is(type.func, obj.ownerDocument.createRange)) {
          range = obj.ownerDocument.createRange();

          if (is(type.func, range.selectNodeContents) && is(type.func, selection.removeAllRanges) && is(type.func, selection.addRange)) {
            // Mozilla
            range.selectNodeContents(obj);
            selection.removeAllRanges();
            selection.addRange(range);
          }
        }
      } else if (is(type.obj, document.body) && is(type.obj, document.body.createTextRange)) {
        range = document.body.createTextRange();

        if (is(type.obj, range.moveToElementText) && is(type.obj, range.select)) {
          // IE most likely
          range.moveToElementText(obj);
          range.select();
        }
      } // Chainable


      return this;
    },
    hasScrollbar: function () {
      return this.get(0).scrollHeight > this.innerHeight();
    }
  });
})(jQuery);
$(document).on('click', '[data-toggable]', function () {
  let curr = $(this);
  let targetElement = curr.attr('data-toggable');
  let targetElementParent = curr.parent();
  $(targetElementParent).find('[data-toggable-target="' + targetElement + '"]').slideToggle({
    'start': function () {
      if (curr.hasClass('active')) {
        curr.removeClass('active');
      } else {
        curr.addClass('active');
      }
    }
  });
});
function OGameLoadingIndicator(container) {
  this.container = container;
}

OGameLoadingIndicator.prototype.init = function () {
  let html = '<div class="og-loading"><div class="og-loading-overlay"><div class="og-loading-indicator"></div></div></div>';
  this.element = $(html);
  this.container.append(this.element);
};

OGameLoadingIndicator.prototype.show = function () {
  this.element.show();
};

OGameLoadingIndicator.prototype.hide = function () {
  this.element.hide();
};

(function ($) {
  $.fn.ogameLoadingIndicator = function (data) {
    if (this.length > 0) {
      let that = $(this[0]);
      let loadingIndicator = that.data('ogameLoadingIndicator');

      if (loadingIndicator == null) {
        loadingIndicator = new OGameLoadingIndicator(that, data);
        $(this).data('ogameLoadingIndicator', loadingIndicator);
        loadingIndicator.init();
      }

      return loadingIndicator;
    }

    return null;
  };
})(jQuery);
function MessageSlider(obj) {
  var thisObj = this;
  thisObj.htmlobject = obj;
  var maxHeight = document.documentElement.clientHeight - 160;
  this.open = function () {
    if (!this.inAction) {
      thisObj.startTime = new Date().getTime();
      thisObj.inAction = true;
      thisObj.slideInStep();
    }
  }, this.slideInStep = function () {
    time = new Date().getTime();
    height = parseInt(thisObj.currHeight * ((time - thisObj.startTime) / 500));

    if (height < thisObj.currHeight) {
      thisObj.htmlobject.style.height = height + 'px';
      window.setTimeout(thisObj.slideInStep, 10);
    } else {
      thisObj.htmlobject.style.height = thisObj.currHeight + 'px';
      thisObj.inAction = false;
    }
  }, this.close = function () {
    if (!thisObj.inAction) {
      thisObj.startTime = new Date().getTime();
      thisObj.inAction = true;
      thisObj.htmlobject.style.height = "0px";
      thisObj.inAction = false;
    }
  }, thisObj.inAction = false;

  if (document.getElementById('messages')) {
    thisObj.currHeight = Math.min(document.getElementById('messages').offsetHeight, maxHeight);
  } else {
    thisObj.currHeight = maxHeight;
  }
}
ogame.messagecounter = {
  countData: {
    'chat': 0,
    'messages': 0,
    'buddy': 0
  },
  newChats: Array(),
  type_chat: 10,
  type_message: 11,
  type_buddy: 12,
  currentLinkSelector: null,
  currentType: 0,
  currentPlayer: null,
  sumNewChatMessages: 0,
  initialize: function (type, player) {
    var $this = ogame.messagecounter;

    if (typeof player == 'undefined' && type !== $this.type_chat) {
      $this.currentPlayer = 0;
    }

    if (typeof player == 'undefined' && type == $this.type_chat) {
      return false;
    }

    if (typeof player !== 'undefined') {
      $this.currentPlayer = player;
    }

    $this.currentType = type;

    switch (type) {
      case $this.type_chat:
        $this.currentLinkSelector = $('a.comm_menu.chat');
        break;

      case $this.type_message:
        $this.currentLinkSelector = $('a.comm_menu.messages');
        break;

      case $this.type_buddy:
        $this.currentLinkSelector = $('a.comm_menu.buddies');
        break;

      default:
        return false;
    }

    $this.update();
  },
  initChatCounter: function (counter) {
    var $this = ogame.messagecounter;
    $this.currentLinkSelector = $('a.comm_menu.chat');
    $this.currentType = $this.type_chat;
    $this.setCount(counter); //        if(counter > 0) {

    $this.update(); //        }
  },

  /**
   * Update Count of new Chatmessages
   */
  update: function (locakey) {
    var $this = ogame.messagecounter; //        $this.updateCountData();

    /*
    if ($this.shouldAddCounter() && $this.getCount() > 0) {
        $this.setNewCounter($this.currentLinkSelector, $this.getCounterHtml($this.getCount()));
    } else {
        if ($this.getCount() == 0) {
            $this.resetCounterByType($this.currentType)
        } else {
            $this.setNewCounter($this.getCountSelectorByType($this.currentType), $this.getCount());
        }
    } */

    var loca;

    if (locakey === undefined) {
      loca = chatLoca.X_NEW_CHATS;
    } else {
      loca = locakey;
    }

    changeTooltip($this.currentLinkSelector, loca.replace('#+#', $this.getCount()));
  },
  resetCounterByType: function (type, locakey) {
    var $this = ogame.messagecounter;
    var selector = $this.getIconSelectorByType(type); //        $this.setNewCounter(selector, '');

    var loca;

    if (locakey === undefined) {
      loca = ''; //chatLoca.X_NEW_CHATS;
    } else {
      loca = locakey;
    }

    changeTooltip(selector, loca.replace('#+#', 0));
  },

  /**
   * Get the Selector of the right counterbox
   *
   * @param int type -> right codes see@top
   *
   * @return jquery-object unreadSelector
   */
  getCountSelectorByType: function (type) {
    var $this = ogame.messagecounter;
    var unreadSelector = '';

    switch (type) {
      case $this.type_chat:
        unreadSelector = $('a.comm_menu.chat .new_msg_count');
        break;

      case $this.type_message:
        unreadSelector = $('a.comm_menu.messages .new_msg_count');
        break;

      case $this.type_buddy:
        unreadSelector = $('a.comm_menu.buddies .new_msg_count');
    }

    return unreadSelector;
  },

  /**
   * Get the Selector of the right icon
   *
   * @param int type -> right codes see@top
   *
   * @return jquery-object unreadSelector
   */
  getIconSelectorByType: function (type) {
    var $this = ogame.messagecounter;
    var selector = '';

    switch (type) {
      case $this.type_chat:
        selector = $('a.comm_menu.chat');
        break;

      case $this.type_message:
        selector = $('a.comm_menu.messages');
        break;

      case $this.type_buddy:
        selector = $('a.comm_menu.buddies');
    }

    return selector;
  },

  /**
   * Get the Html-String to create a counter
   *
   * @param string count
   *
   * @return string counter
   */
  getCounterHtml: function (count) {
    var counter = '<span class="new_msg_count">' + count + '</span>';
    return counter;
  },

  /**
   * Get count from type
   *
   * @return int $this.countData.[type]
   */
  getCount: function () {
    var $this = ogame.messagecounter;

    switch ($this.currentType) {
      case $this.type_chat:
        return $this.countData.chat;

      case $this.type_message:
        return $this.countData.messages;

      case $this.type_buddy:
        return $this.countData.buddy;
    }
  },

  /**
   * Set count for type
   *
   * @param mixed value
   */
  setCount: function (value) {
    var $this = ogame.messagecounter;

    switch ($this.currentType) {
      case $this.type_chat:
        $this.countData.chat = value;
        break;

      case $this.type_message:
        $this.countData.messages = value;
        break;

      case $this.type_buddy:
        $this.countData.buddy = value;
        break;
    }
  },

  /**
   * Update Count for type
   */
  updateCountData: function () {
    var $this = ogame.messagecounter;

    if ($this.isOpen()) {
      $this.setCount(0);
    } else {
      if ($this.shouldAddCounter()) {
        var unreadMessages = 1;
      } else {
        var unreadMessagesSelector = $this.getCountSelectorByType($this.currentType);
        var unreadMessages = unreadMessagesSelector.html();
        unreadMessages = parseInt(unreadMessages) + 1;
      }

      $this.setCount(unreadMessages);
    }
  },

  /**
   * Returns if u should add the counter first
   *
   * @return boolean addCounter
   */
  shouldAddCounter: function () {
    var $this = ogame.messagecounter;
    var unreadMessagesSelector = $this.getCountSelectorByType($this.currentType);
    var unreadMessages = unreadMessagesSelector.html();
    var addCounter = false;

    if (typeof unreadMessages == 'undefined') {
      addCounter = true;
    }

    return addCounter;
  },

  /**
   * Set counter for new chatmessages
   *
   * @param jquery-object selector
   * @param string html    >> html for the counter on the chatsymbole
   */
  setNewCounter: function (selector, html) {
    selector.html(html);
  },

  /**
   * proof if the chat of the player is open
   */
  isOpen: function () {
    var $this = ogame.messagecounter;
    var returnValue = false;

    switch ($this.currentType) {
      case $this.type_chat:
        returnValue = ogame.chat.isOpen($this.currentPlayer); //                $('.chat_box').each(function () {
        //                    if ($(this).attr('data-playerid') == $this.currentPlayer) {
        //                        if ($(this).css('display') == 'block') {
        //                            returnValue = true;
        //                        }
        //                    }
        //                });

        break;

      case $this.type_message:
        returnValue = location.href.indexOf('page=messages') > -1;
        break;

      case $this.type_buddy:
        returnValue = location.href.indexOf('page=ingame&component=buddies') > -1;
        break;
    }

    return returnValue;
  }
};
ogame.messagemarker = {
  type_chatbar: 10,
  type_chattab: 11,
  action_remove: 20,
  action_add: 21,
  currentCount: '',
  currentSelector: '',
  currentPlayernameObject: '',
  currentListPlayernameObject: '',
  currentPartnerId: '',
  currentListItemSelector: '',
  totalNewMessages: 0,
  playerlist: new Array(),
  newsInitialized: false,
  effect: 'highlight',
  initialize: function () {
    $('.new_msg_count[data-playerid]').each(function () {
      var $this = ogame.messagemarker;
      var playerId = $(this).data('playerid');

      if (playerId && $.inArray(playerId, $this.playerlist) === -1) {
        $this.playerlist.push(playerId);
        $this.setPartnerId(playerId);
        $this.updateNewMarker();
      }
    }); //define effect to indicate new messages

    ogame.messagemarker.effect = 'highlight'; //        $('.new_msg_count.news').each(function() {
    //            var $this = ogame.messagemarker;
    //            
    //            if (!$this.newsInitialized) {
    //                var $this = ogame.messagemarker;
    //                $this.newsInitialized = true;
    //                $this.setPartnerId('News');
    ////                $this.updateNewMarker();
    //            }
    //        });
  },
  initMarker: function (playerids) {
    var $this = ogame.messagemarker;
    var chatCount = 0;
    $.each(playerids, function (index, value) {
      $this.setPartnerId(value);
      var messageCount = $('.new_msg_count[data-playerid="' + value + '"]').data('new-messages');

      if (messageCount != null && messageCount > 0) {
        $this.setSelectorByType($this.type_chatbar);
        $this.mark($this.currentSelector, $this.currentPlayernameObject, messageCount);
        $this.mark($this.currentListItemSelector, $this.currentListPlayernameObject, messageCount);
        $this.setSelectorByType($this.type_chattab);
        $this.mark($this.currentSelector, $this.currentPlayernameObject, messageCount);
      }

      chatCount = chatCount + 1;
    });
    return chatCount;
  },
  setCounter: function (partnerId, counter) {
    this.setPartnerId(partnerId);
    $('.new_msg_count[data-playerid="' + this.currentPartnerId + '"]').data('new-messages', counter);
    this.updateNewMarker();
  },
  toggle: function (action, type, partnerId, currentState) {
    this.setPartnerId(partnerId);
    this.currentCount = parseInt($('.new_msg_count[data-playerid="' + this.currentPartnerId + '"]').data('new-messages')); //        this.setSelectorByType(type);

    if (action === this.action_add) {
      //            var newState = parseInt(currentState) + 1;
      //            this.currentCount = this.currentCount + 1;
      //            $.cookie('messageCount' + this.currentPartnerId, this.currentCount);
      this.updateNewMarker(); //            this.addNewMarker();
    }

    if (action === this.action_remove) {
      this.removeNewMarker();
    }
  },
  mark: function (selector, playerObject, count) {
    //        var htmlmarker = '<span class="newMsgMarker"><b><span>( <span class="newMsgCount">'+count+'</span> )</span></b></span>';
    //        $(selector).append(htmlmarker);
    //        playerObject.css('font-weight', 'bold');
    $('.playerlist_item[data-playerid="' + this.currentPartnerId + '"] .playername').css('font-weight', 'bold');
    $('.cb_playername[data-playerid="' + this.currentPartnerId + '"]').css('font-weight', 'bold');
  },
  addNewMarker: function () {
    var added = false;

    if (!$(this.currentSelector).find('.newMsgMarker').length) {
      this.mark(this.currentSelector, this.currentPlayernameObject, this.currentCount);
      added = true;
    }

    if (!$(this.currentListItemSelector).find('.newMsgMarker').length) {
      this.mark(this.currentListItemSelector, this.currentListPlayernameObject, this.currentCount);
      added = true;
    }

    if (!added) {
      this.updateNewMarker();
    }
  },
  removeNewMarker: function () {
    $('.playerlist_item[data-playerid="' + this.currentPartnerId + '"] .playername').css('font-weight', 'normal');
    $('.cb_playername[data-playerid="' + this.currentPartnerId + '"]').css('font-weight', 'normal'); //        $(this.currentSelector).find('.newMsgMarker').remove();
    //        $(this.currentListItemSelector).find('.newMsgMarker').remove();
  },
  updateNewMarker: function () {
    //        var newMarker = $(this.currentSelector).find('.newMsgCount');
    //        var newlistMarker = $(this.currentListItemSelector).find('.newMsgCount');
    //        var currentValue = parseInt(newMarker.html());
    //        newMarker.html(currentValue+1);
    //        newlistMarker.html(currentValue+1);
    //        $(this.currentSelector + ' .new_msg_count').text(currentValue+1).effect('highlight', {}, 500);
    //        $(this.currentListItemSelector + ' .new_msg_count').text(currentValue+1).effect('highlight', {}, 500);
    var newAmount = parseInt($('.new_msg_count[data-playerid="' + this.currentPartnerId + '"]').data('new-messages'));
    var sumNewMessagesChatBefore = $('.new_msg_count.totalChatMessages').text();
    var sumNewMessagesChat = ogame.chat.updateTotalNewChatCounter();

    if (newAmount === 0) {
      if (isNaN(this.currentPartnerId)) {
        $('.new_msg_count.totalMessages.news').text(newAmount).addClass('noMessage');
      } else {
        $('.new_msg_count[data-playerid="' + this.currentPartnerId + '"]').text(newAmount).addClass('noMessage');

        if (sumNewMessagesChat === 0) {
          $('.new_msg_count.totalChatMessages').text(sumNewMessagesChat).addClass('noMessage');
        } else {
          if (sumNewMessagesChatBefore != sumNewMessagesChat) {
            $('.new_msg_count.totalChatMessages').text(sumNewMessagesChat).removeClass('noMessage').effect(ogame.messagemarker.effect, {}, 500);
          }
        }
      }
    } else {
      if (isNaN(this.currentPartnerId)) {
        if (isNaN(newAmount)) {
          $('.new_msg_count.totalMessages.news').text(0).addClass('noMessage');
        } else {
          $('.new_msg_count.totalMessages.news').text(newAmount).removeClass('noMessage').effect(ogame.messagemarker.effect, {}, 500);
        }
      } else {
        $('.msg[data-playerid="' + this.currentPartnerId + '"]').addClass('msg_new');
        $('.new_msg_count[data-playerid="' + this.currentPartnerId + '"]').text(newAmount).removeClass('noMessage').effect(ogame.messagemarker.effect, {}, 500);

        if (sumNewMessagesChatBefore != sumNewMessagesChat) {
          $('.new_msg_count.totalChatMessages').text(sumNewMessagesChat).removeClass('noMessage').effect(ogame.messagemarker.effect, {}, 500);
        }
      }
    } //        $('.new_msg_count.totalChatMessages').text(this.totalNewMessages).effect('highlight', {}, 500);

  },
  setSelectorByType: function (type) {
    selector = '';

    if (type == this.type_chatbar) {
      selector = 'ul.chat_bar_list li.chat_bar_list_item[data-playerid="' + this.currentPartnerId + '"]'; //evtl muss hier noch um die id gänsefüsschen
    }

    if (type == this.type_chattab) {
      selector = 'ul#chatMsgList li.msg[data-playerid="' + this.currentPartnerId + '"]'; //evtl muss hier noch um die id gänsefüsschen
    }

    this.currentListItemSelector = '.js_playerlist ul.playerlist li.playerlist_item[data-playerid="' + this.currentPartnerId + '"]';
    this.currentSelector = selector;
    this.currentPlayernameObject = $(selector).find('.cb_playername');
    this.currentListPlayernameObject = $(this.currentListItemSelector).find('.playername');
  },
  setPartnerId: function (partnerId) {
    this.currentPartnerId = partnerId;
  }
};
ogame.messages = {
  data: {
    initActions: {
      'tabs-nfFleets': 'initTabFleets',
      'tabs-nfCommunication': 'initTabCommunication',
      'tabs-nfMarket': 'initTabMarket',
      'subtabs-nfCommunicationMessages': 'initSubTabMessages'
    }
  },

  /**
   * Adds a message to the given tab or subtab (whithout check of timestamp,
   * because this will in almost all cases be the newest message)
   *
   **/
  addMessage: function ($tabOrSubtab, msgData, insertAtBeginning) {
    if (insertAtBeginning !== false) {
      insertAtBeginning = true;
    }

    if ($tabOrSubtab.attr('aria-selected') !== 'true') {
      console.warn('addMessage: not correct Tab, aria-selected = ', $tabOrSubtab.attr('aria-selected'), $tabOrSubtab);
      return;
    }

    if (!msgData) {
      console.warn('addMessage: msgData is ', msgData);
      return;
    }

    var tabContentObject = $('#' + $tabOrSubtab.attr('aria-controls')).find('.tab_inner');
    var addBefore = false; //get id of active Tab, create the message and add it

    if (insertAtBeginning) {
      addBefore = true;
    }

    ogame.messages.createMessageItem(msgData, tabContentObject, addBefore);
  },

  /**
   *  Creates a message for tab messages
   *  That can then be inserted upon sending the message
   * @param before
   * @param messageData
   * @param tabObject
   */
  createMessageItem: function (messageData, tabObject, before) {
    var idArray = {};

    for (var msgData in messageData) {
      var data = messageData[msgData];
      idArray[msgData] = data.msgID;
    }

    var ids = JSON.stringify(idArray); // fetch message.tpl.php

    $.ajax({
      url: '?page=messages',
      type: 'POST',
      dataType: 'html',
      data: {
        messageId: ids,
        //details: messageData.detailURL, WTF?
        tabid: this.getCurrentMessageTab(),
        _token: token,
        action: 121,
        // \OGame\Messages\Message::ACTION_ADD
        ajax: 1
      },
      success: function (data) {
        token = data.newAjaxToken;

        if (before) {
          tabObject.prepend(data);
        } else {
          var favCount = tabObject.find('.favoriteCount');

          if (favCount.length > 0) {
            $(data).insertBefore(favCount);
          } else {
            tabObject.append(data);
          }
        }
      },
      error: function (jqXHR, textStatus, errorThrown) {}
    });
  },

  /**
   *  Creates a message (=Rundmail) for the subtab messages
   *  That can then be inserted upon sending the message
   *  @param {String} msgData - Data to fill the message with
  */
  createBroadcastMsgItem: function (msgData) {
    if (!msgData) {
      console.warn('createMessageItem: msgData is missing!');
      return undefined;
    }

    var $msgItemHeader = $('<div class="msg_head"></div>');
    $msgItemHeader.append('<span class="msg_title blue_txt">' + msgData.title + '</span>');
    $msgItemHeader.append('<span class="msg_date fright">' + msgData.date + '</span><br>');
    $msgItemHeader.append('<span class="msg_sender_label">' + loca.LOCA_WRITE_MSG_FROM + ': </span>');
    $msgItemHeader.append('<span class="msg_sender">' + msgData.senderName + '</span>');
    var $msgItemFooter = $('<div class="msg_actions clearfix"></div>');
    $msgItemFooter.append('<a class="fright txt_link overlay" href="' + msgData.detailURL + '" ' + 'data-overlay-title="' + loca.broadcasts + '">' + loca.details + '</a>');
    $msgItemFooter.append('<a class="fright txt_link comments_link overlay" href="' + msgData.commentsURL + '" ' + 'data-overlay-title="' + loca.broadcasts + '">' + msgData.commentsCount + ' <span class="comments"></span></a></a>');
    var $msgItem = $('<li class="msg ' + msgData.newClass + '" data-msg-id="' + msgData.msgID + '"></li>');
    $msgItem.append('<div class="msg_status"></div>');
    $msgItem.append($msgItemHeader);
    $msgItem.append('<span class="msg_content">' + msgData.msgContent + '</span>');
    $msgItem.append($msgItemFooter);
    return $msgItem;
  },

  /**
   * Creates the html elements for the recipients
   * @param {String} recipientId
   * @param {String} recipientCat
   * @param {String} name
   */
  createRecipient: function (recipientId, recipientCat, name) {
    var $inputReplacement, pattern;
    $('.input_replacement').each(function () {
      pattern = new RegExp($(this).data('recipient-cat'));

      if (pattern.test(recipientCat)) {
        $inputReplacement = $(this);
      }
    }); // stop if the corresponding inputbox cannot be found

    if ($inputReplacement === undefined) return;
    var found = $inputReplacement.children('.recipient_txt').filter(function () {
      return $(this).data('recipient-id') === recipientId;
    }); // the element only gets created if it was not there before

    if (found.length === 0) {
      if (!$inputReplacement.hasClass('focus')) {
        $inputReplacement.addClass('focus');
      }

      $inputReplacement.append('<div class="recipient_txt" data-recipient-id="' + recipientId + '" data-recipient-cat="' + recipientCat + '">' + name + '<a role="button" class="remove_recipient"></a></div>');
    }
  },

  /**
   * checks if the given action is valid and calls it
   * @param {String} action - determines which action shall be performed
   * @returns {unresolved}
   */
  doInitAction: function (action) {
    if (typeof ogame.messages[ogame.messages.data.initActions[action]] === 'function') {
      return ogame.messages[ogame.messages.data.initActions[action]]();
    }
  },
  initCombatReportDetails: function () {
    if ($('select').length > 0) {
      $('select').ogameDropDown();
    }
  },

  /**
   * Initializes detail messages
   * @param {Boolean} commentsAllowed - if true, initialize comments as well
   * @returns {undefined}
   */
  initDetailMessages: function (commentsAllowed) {
    $('.detail_list_el:nth-of-type(4n + 3), .detail_list_el:nth-of-type(4n + 4)').addClass("odd"); //max Height of the overlay is browsersize - (header of overlay + a little puffer)

    var newHeight = $(window).height() - 200;
    $('.detail_msg_ctn').css('height', newHeight);
    $('.detail_msg_ctn').mCustomScrollbar({
      theme: "ogame"
    });

    if (commentsAllowed) {
      // we need a a scroll to event, because anker won't work with customScrollbar
      $("#scrollToComments").on('click', function () {
        $('.detail_msg_ctn').mCustomScrollbar('scrollTo', 'bottom');
      });
      initBBCodeEditor(locaKeys, itemNames, false, '.comment_textarea', 2000);
    }

    $('#messages ul.pagination').on('click', 'li.p_li a', function () {
      var currentTab = $(this).data('tabid');
      var messageId = $(this).data('messageid');
      $.post('?page=messages', {
        tabid: currentTab,
        messageId: messageId,
        _token: token,
        ajax: 1
      }, function (data) {
        var ajaxTableContent = $(data).find('#messages .ui-dialog');
        $('.overlayDiv').html(data);
        token = data.newAjaxToken;
        $("[name='_token']").val(data.newAjaxToken);
      });
    });
  },
  initMessages: function (messageToken = null) {
    if (messageToken !== null) {
      ogame.messages.token = messageToken;
    }

    $('.js_tabs .tabs_btn_img').each(function () {
      if ($(this).attr('rel')) {
        $(this).attr('href', $(this).attr('rel'));
      }
    });
    ogame.messages.initTabs($('.js_tabs'));
    let currentTab = ogame.messages.getCurrentMessageTab();
    $('#contentWrapper #buttonz div.js_tabs.tabs_wrap.ui-tabs').on('click', 'ul li.list_item', function () {
      currentTab = ogame.messages.getCurrentMessageTab();
    });

    const messageActionAjax = (data, success = null, error = null) => {
      if (!data['_token']) data['_token'] = $("[name='_token']").val();
      if (!data['ajax']) data['ajax'] = 1;
      if (window.location.href.indexOf("page=standalone") > -1) data['standalonePage'] = 1;
      $.ajax({
        type: 'POST',
        url: '?page=messages',
        dataType: 'json',
        data: data,
        success: function (returnData) {
          if (returnData['newAjaxToken']) {
            token = returnData.newAjaxToken;
            $("[name='_token']").val(returnData.newAjaxToken);
          }

          if (success) {
            success(returnData);
          }
        },
        error: function () {
          if (error !== null) {
            error();
          }
        }
      });
    };

    $('body').on('click', '.msg_actions .icon_not_favorited', function (event) {
      var messageId = $(this).parents('li.msg').data('msg-id') || $(this).parents('div.detail_msg').data('msg-id'); // \OGame\Messages\Message::ACTION_ARCHIVE == 101

      messageActionAjax({
        tabid: currentTab,
        messageId: messageId,
        _token: token,
        action: 101
      }, data => {
        token = data.newAjaxToken;
        $("[name='_token']").val(data.newAjaxToken);

        if (data[messageId]['result'] == true) {
          let realTarget;

          if ($(event.target).is('img')) {
            $(event.target).attr('src', $(event.target).attr('src').replace('not_favorited', 'favorited'));
            $(event.target).parent().removeClass('icon_not_favorited').addClass('icon_favorited');
            realTarget = $(event.target).parent();
          } else {
            $(event.target).removeClass('icon_not_favorited').addClass('icon_favorited');
            $(event.target).find('img').attr('src', $(event.target).find('img').attr('src').replace('not_favorited', 'favorited'));
            realTarget = $(event.target);
          }

          changeTooltip($(realTarget), loca.LOCA_MSG_DELETE_FAV);
          var $counter = $('.favoriteTabFreeSlotCount');
          $counter.html(parseInt($counter.html()) - 1);
        } else if (data[messageId]['reason'] !== 'undefined') {
          fadeBox(data[messageId]['reason'], 1);
        } else {
          fadeBox(loca.LOCA_GALAXY_ERROR_OCCURED, 1);
        }
      });
    }).on('click', '.msg_actions .icon_favorited', function (event) {
      var messageId = $(this).parents('li.msg').data('msg-id') || $(this).parents('div.detail_msg').data('msg-id');
      ; // \OGame\Messages\Message::ACTION_ARCHIVE_REMOVE == 102

      messageActionAjax({
        tabid: currentTab,
        messageId: messageId,
        _token: token,
        action: 102
      }, data => {
        token = data.newAjaxToken;
        $("[name='_token']").val(data.newAjaxToken);

        if (data[messageId]['result'] == true) {
          let realTarget;

          if ($(event.target).is('img')) {
            $(event.target).attr('src', $(event.target).attr('src').replace('favorited', 'not_favorited'));
            $(event.target).parent().removeClass('icon_favorited').addClass('icon_not_favorited');
            realTarget = $(event.target).parent();
          } else {
            $(event.target).removeClass('icon_favorited').addClass('icon_not_favorited');
            $(event.target).find('img').attr('src', $(event.target).find('img').attr('src').replace('favorited', 'not_favorited'));
            realTarget = $(event.target);
          }

          changeTooltip($(realTarget), loca.LOCA_MSG_ADD_FAV);
          var $counter = $('.favoriteTabFreeSlotCount');
          $counter.html(parseInt($counter.html()) + 1);
        } else if (data[messageId]['reason'] !== 'undefined') {
          fadeBox(data[messageId]['reason'], 1);
        } else {
          fadeBox(loca.LOCA_GALAXY_ERROR_OCCURED, 1);
        }
      });
    }).on('click', '.js_actionKill', function (event) {
      var messageId = $(this).parents('li.msg').data('msg-id'); // \OGame\Messages\Message::ACTION_KILL == 103

      messageActionAjax({
        messageId: messageId,
        _token: token,
        action: 103
      }, data => {
        token = data.newAjaxToken;
        $("[name='_token']").val(data.newAjaxToken);

        if (data[messageId] == true) {
          $(event.target).parents('li.msg').remove();
        } else {
          fadeBox(loca.LOCA_GALAXY_ERROR_OCCURED, 1);
        }
      });
    }).on('click', '.js_actionKillAll', function (event) {
      // \OGame\Messages\Message::ACTION_KILL == 103
      messageActionAjax({
        tabid: ogame.messages.getCurrentMessageTab(),
        messageId: -1,
        _token: token,
        action: 103
      }, data => {
        token = data.newAjaxToken;
        $("[name='_token']").val(data.newAjaxToken);

        if (data["result"] == true) {
          location.reload();
        } else {
          fadeBox(loca.LOCA_GALAXY_ERROR_OCCURED, 1);
        }
      });
    }).on('click', '.js_actionKillDetail', function (event) {
      var messageId = $('.detail_msg').data('msg-id'); // \OGame\Messages\Message::ACTION_KILL == 103

      messageActionAjax({
        messageId: messageId,
        _token: token,
        action: 103
      }, data => {
        token = data.newAjaxToken;
        $("[name='_token']").val(data.newAjaxToken);

        if (data[messageId] == true) {
          location.reload();
        } else {
          fadeBox(loca.LOCA_GALAXY_ERROR_OCCURED, 1);
        }
      });
    }).on('click', '.js_actionRevive', function (event) {
      var messageId = $(this).parents('li.msg').data('msg-id');

      if (messageId === undefined) {
        messageId = $(this).parents('div.detail_msg').data('msg-id');
      } // \OGame\Messages\Message::ACTION_REVIVE == 104


      messageActionAjax({
        tabid: currentTab,
        messageId: messageId,
        _token: token,
        action: 104
      }, data => {
        token = data.newAjaxToken;
        $("[name='_token']").val(data.newAjaxToken);

        if (data[messageId] == true) {
          //in message list view
          $(event.target).parents('li.msg').remove(); //in message detail view

          $(event.target).parents('div.ui-dialog').remove();
          $('li.msg[data-msg-id=' + messageId + ']').remove();

          if (window.location.href.indexOf("page=standalone") > -1) {
            location.reload();
          }
        } else {
          fadeBox(loca.LOCA_GALAXY_ERROR_OCCURED, 1);
        }
      });
    }).on('click', '.js_actionReviveAll', function (event) {
      // \OGame\Messages\Message::ACTION_REVIVE == 104
      messageActionAjax({
        tabid: ogame.messages.getCurrentMessageTab(),
        messageId: -1,
        _token: token,
        action: 104
      }, data => {
        token = data.newAjaxToken;
        $("[name='_token']").val(data.newAjaxToken);

        if (data["result"] == true) {
          location.reload();
        } else {
          fadeBox(loca.LOCA_GALAXY_ERROR_OCCURED, 1);
        }
      });
    }).on('click', '.js_actionDelete', function (event) {
      var messageId = $(this).parents('li.msg').data('msg-id');

      if (!messageId) {
        messageId = $(this).parents('div.detail_msg').data('msg-id');
      } // \OGame\Messages\Message::ACTION_DELETE == 105


      messageActionAjax({
        tabid: currentTab,
        messageId: messageId,
        _token: token,
        action: 105
      }, data => {
        token = data.newAjaxToken;
        $("[name='_token']").val(data.newAjaxToken);

        if (data[messageId] == true) {
          $(event.target).parents('li.msg').remove();

          if (window.location.href.indexOf("page=standalone") > -1) {
            location.replace('index.php?page=ingame&component=overview');
          }
        } else {
          fadeBox(loca.LOCA_GALAXY_ERROR_OCCURED, 1);
        }
      });
    }).on('click', '.js_actionDeleteAll', function (event) {
      var messageId = $(this).parents('li.msg').data('msg-id'); // \OGame\Messages\Message::ACTION_DELETE == 105

      messageActionAjax({
        tabid: ogame.messages.getCurrentMessageTab(),
        messageId: -1,
        _token: token,
        action: 105
      }, data => {
        token = data.newAjaxToken;
        $("[name='_token']").val(data.newAjaxToken);

        if (data["result"] == true) {
          location.reload();
        } else {
          fadeBox(loca.LOCA_GALAXY_ERROR_OCCURED, 1);
        }
      });
    }).on('click', '.paginator', function (event) {
      var currentTab = $(this).data('tab');
      var page = $(this).data('page');
      var bla = $(this).closest('div[class^="ui-tabs-panel"]');
      let newToken = $("[name='_token']").val();
      $.ajax({
        type: 'POST',
        url: '?page=messages',
        dataType: 'html',
        data: {
          messageId: -1,
          tabid: currentTab,
          action: 107,
          pagination: page,
          ajax: 1,
          _token: newToken,
          standalonePage: window.location.href.indexOf("page=standalone") > -1 ? 1 : 0
        },
        success: function (data) {
          if (data['newAjaxToken']) {
            token = data.newAjaxToken;
            $("[name='_token']").val(data.newAjaxToken);
          }

          bla.html(data);
        },
        error: function () {}
      });
    }).on('click', '.jumpToAllianceApplications', function (event) {
      location.href = 'index.php?page=ingame&component=alliance&tab=applications';
    }).on('click', 'a.js_actionCollect', function (event) {
      event.preventDefault();
      let url = $(event.currentTarget).attr('href');
      $.ajax({
        type: 'POST',
        url: url,
        dataType: 'json',
        data: {
          new_token: ogame.messages.marketToken || ''
        },
        success: function (data) {
          let status = data.status || 'failure';
          let statusMessage = data.statusMessage || '';

          if (status === 'success') {
            ogame.messages.marketToken = data.newToken;
            $(event.currentTarget).hide();
            $(event.currentTarget).replaceWith(statusMessage);
            fadeBox(data.message || '', false);
            getAjaxResourcebox();
          }

          if (status === 'failure') {
            let error = data.errors[0] || undefined;

            if (error) {
              fadeBox(error.message, true);
            }
          }
        },
        error: function (data) {}
      });
    });
  },
  selectCurrentMessageTab: function () {
    var currentTab = $('.subtabs .ui-state-active:visible');

    if (!currentTab.length) {
      // none of the subTabs is visible
      currentTab = $('.js_tabs .ui-state-active:visible');
    }

    return currentTab;
  },
  getCurrentMessageTab: function () {
    var currentTab = $('.subtabs .ui-state-active:visible').attr('data-tabid');

    if (!currentTab) {
      // none of the subTabs is visible
      currentTab = $('.js_tabs .ui-state-active:visible').attr('data-tabid');
    }

    return currentTab;
  },
  getCurrentEarliestMessage: function () {
    //console.log($('.ui-tabs-panel .tab_inner .msg:visible'));
    return $('.ui-tabs-panel .tab_inner .msg:visible').last().attr('data-msg-id');
  },
  initCommentForm: function () {
    ogame.messages.initWriteNewMsgBox($('#newCommentForm'));
    $('#newCommentForm').on('click', '.js_send_comment', function (e) {
      let newToken = $("[name='_token']").val();
      e.preventDefault();
      var $myForm = $(this).closest('form');
      var $messageId = $myForm.find('input[name=messageId]').val();
      $.ajax({
        type: 'POST',
        url: $myForm.attr('action'),
        dataType: 'json',
        data: {
          messageId: $messageId,
          ajax: 1,
          action: 108,
          // \OGame\Messages\Message::ACTION_COMMENT
          text: $myForm.find('textarea[name=text]').val(),
          _token: newToken,
          standalonePage: window.location.href.indexOf("page=standalone") > -1 ? 1 : 0
        },
        success: function (data) {
          if (data['newAjaxToken']) {
            token = data.newAjaxToken;
            $("[name='_token']").val(data.newAjaxToken);
          }

          fadeBox(data.message, data.error);
          $myForm.find('textarea[name=text]').val('');
          $myForm.parent().after('<li class="msg"><div class="msg_status"></div><div class="msg_head">' + data.commentheader + '</div><div class="msg_content">' + data.commentcontent + '</div></li>');
          $('#scrollToComments').text(data.commentcount);
        },
        error: function (data) {}
      });
    });
  },

  /**
   * initializes the overlay for sharing reports
   * @returns {undefined}
   */
  initShareReportOverlay: function () {
    ogame.messages.initWriteNewMsgBox($('#newSharedReportForm'));
    $('#newSharedReportForm').on('click', '.js_send_msg_share', function (e) {
      e.preventDefault();
      var $myForm = $(this).closest('form');
      var $messageId = $myForm.find('input[name=messageId]').val();
      let newToken = $("[name='_token']").val();
      var $empfaenger = $myForm.find('li.select2-selection__choice');
      var $myData = [];
      $empfaenger.each(function () {
        $myData.push($(this).attr('title'));
      });
      $.ajax({
        type: 'POST',
        url: $myForm.attr('action'),
        dataType: 'json',
        data: {
          messageId: $messageId,
          empfaenger: $myData,
          ajax: 1,
          action: 106,
          // \OGame\Messages\Message::ACTION_SHARE
          text: $myForm.find('textarea[name=text]').val(),
          _token: newToken,
          standalonePage: window.location.href.indexOf("page=standalone") > -1 ? 1 : 0
        },
        success: function (data) {
          if (data['newAjaxToken']) {
            token = data.newAjaxToken;
            $("[name='_token']").val(data.newAjaxToken);
          }

          fadeBox(data.message, data.error);
          $myForm.closest('div[class^="overlayDiv"]').remove();
        },
        error: function (data) {}
      });
    });
  },

  /**
   * initializes the subtab messages where user can write messages (=Rundmails)
   * to members of their allies and federates
   * @returns {undefined}
   */
  initSubTabMessages: function () {
    // accordion initialized here, because this is the only tab where it is needed
    $('.js_accordion').accordion({
      collapsible: true,
      heightStyle: 'content',
      active: false // @TODO: this needs to be updated when the accordion was open on tab/page change

    });
    ogame.messages.initWriteNewMsgBox($('#newMsgForm'));
    $('html').off('.subtabmessages');
    $('#newMsgForm').on('click.subtabmessages', '.js_send_msg', function (e) {
      e.preventDefault();
      var $myForm = $(this).parents('form');
      let newToken = $("[name='_token']").val();
      var recipientIDs = {};
      $('.input_replacement').children().each(function () {
        if (typeof recipientIDs[$(this).data('recipient-cat')] == 'undefined') {
          recipientIDs[$(this).data('recipient-cat')] = [];
        }

        recipientIDs[$(this).data('recipient-cat')].push($(this).data('recipient-id'));
      });
      $.ajax({
        type: 'POST',
        url: $myForm.attr('action'),
        dataType: 'json',
        data: {
          empfaenger: recipientIDs,
          _token: newToken,
          text: $myForm.find('.new_msg_textarea').val()
        },
        success: function (data) {
          if (data['newAjaxToken']) {
            token = data.newAjaxToken;
            $("[name='_token']").val(data.newAjaxToken);
          }

          fadeBox(data.message, data.error); // add message to this tab if successful todo real data for inserted message needed from php

          if (!data.error) {
            ogame.messages.sendSubtabMsg($('.new_msg_textarea').val(), recipientIDs);
          }
        },
        error: function () {}
      }); // @TODO: clear input from message box and recipient fields
    });
  },
  initTabCommunication: function () {
    ogame.messages.initTabs($('.js_subtabs_communication'));
  },
  initTabFleets: function () {
    // using a callback function here, because it is the same function for every subtab of fleets
    ogame.messages.initTabs($('.js_subtabs_fleets'), ogame.messages.initTrash);
  },
  initTabMarket: function () {
    ogame.messages.initTabs($('.js_subtabs_market'), ogame.messages.initTrash);
  },

  /**
   * Wrapper for the initialization of tabs
   * @param {JQuery Object} $el - Element to attach tabs to
   * @param {Function} callbackFunc - a Function to be called after the tabs are loaded
   * @returns {undefined}
   */
  initTabs: function ($el, callbackFunc) {
    $el.tabs({
      beforeLoad: function () {
        $('.ajax_load_shadow').show();
      },
      load: function (e, el) {
        //console.info("load",el.tab.attr('id'));
        // select functions to initzialize based on id of active tab
        ogame.messages.doInitAction(el.tab.attr('id'));
        $('.ajax_load_shadow').hide(); // call the additional callback if one was given

        if (typeof callbackFunc === 'function') {
          callbackFunc(el.tab);
        }
      },
      // create is only called once when the tabs are created
      create: function (e, el) {
        ogame.messages.doInitAction(el.tab.attr('id'));
      }
    });
  },

  /**
   *
   */
  initTrash: function ($activeTab) {
    if (!$activeTab) return;
    $('.js_active_tab').html($activeTab.data('subtabname'));

    if ($activeTab.attr('id') === 'subtabs-nfFleetTrash' || $activeTab.attr('id') === 'subtabs-nfMarketTrash') {
      $('.trash_box').addClass('trash_open');
      $('.in_trash').show();
      $('.not_in_trash').hide();
    } else {
      $('.trash_box').removeClass('trash_open');
      $('.in_trash').hide();
      $('.not_in_trash').show();
    }
  },

  /**
   * Initializes the functions and events that are necessary for writing a new message
   * (Used on newsfeed for broadcast messages and new shared reports)
   * @param {Jquery Object} $newMsgForm - Element to attach the new message events to
   * @returns {undefined}
  */
  initWriteNewMsgBox: function ($newMsgForm) {
    initBBCodeEditor(locaKeys, itemNames, false, '.new_msg_textarea', 2000);
    $('html').off('.writeNewMsgBox'); // SubTabMessages - close any open recipient select boxes when clicking outside the box:

    $('html').on('click.writeNewMsgBox', function (e) {
      if ($('.new_msg_label').hasClass('open') && $(e.target).parents('.recipient_select_box').length < 1) {
        $('.input_replacement').removeClass('focus');
        $('.new_msg_label').removeClass('open');
        $('.new_msg_label').siblings('.recipient_select_box').hide();
      }
    });
    $newMsgForm.on('click.writeNewMsgBox', '.input_replacement', function (e) {
      e.stopPropagation();
      ogame.messages.toggleRecipientSelectBox($(e.target).data('recipient-cat'));
    }).on('click.writeNewMsgBox', '.new_msg_label', function (e) {
      e.stopPropagation();
      ogame.messages.toggleRecipientSelectBox($(e.currentTarget).data('recipient-cat'));
    }).on('click.writeNewMsgBox', '.recipient_select_box .ally_rank', function () {
      ogame.messages.toggleRecipientSelection($(this));
    })
    /*           .on('click.writeNewMsgBox', '.js_all_recipients', function() {
                   ogame.messages.toggleSelectAllRecipients($(this));
               })*/
    .on('click.writeNewMsgBox', '.remove_recipient', function () {
      ogame.messages.removeRecipient($(this).closest('.recipient_txt').data('recipient-id'));
    });
  },

  /**
   * Remove Recipient from input field and remove corresponding selection
   * @param {type} recipientId
   * @returns {undefined}
   */
  removeRecipient: function (recipientId) {
    $('.ally_rank').filter(function () {
      if ($(this).data('recipient-id') === recipientId) {
        $(this).removeClass('selected');
      }
    });
    $('.recipient_txt').filter(function () {
      if ($(this).data('recipient-id') === recipientId) {
        $(this).remove();
      }
    });
  },
  sendSubtabMsg: function (msg, recipientIDs) {
    if (!msg) {
      // @TODO: show warning
      console.warn('sendSubtabMsg: msg was empty');
      return;
    }

    if (!recipientIDs) {
      // @TODO: show warning
      console.warn('sendSubtabMsg: msg had no recipients');
      return;
    }

    var msgData = {};
    msgData.date = getFormatedDate(serverTime.getTime(), '[d].[m].[Y] <span>[H]:[i]:[s]</span>');
    msgData.newClass = 'msg_new';
    msgData.title = recipientIDs;
    msgData.senderName = '100011'; // needs to be id of current player, where do we get it from?

    msgData.msgID = '111'; // this is probably some unique number

    msgData.msgContent = msg;
    msgData.commentsURL = '';
    msgData.detailURL = '';
    msgData.commentsCount = 0;
    var data = array(msgData); // @TODO: Tell Backend that theres a new message that has to be sent and processed

    ogame.messages.addMessage($('#subtabs-nfCommunicationMessages'), data);
  },

  /**
   * toggle the box for recipient selection with the correct category
   * @param {String} recipientCat - category of recipients
   * @returns {undefined}
   */
  toggleRecipientSelectBox: function (recipientCat) {
    $('.input_replacement').filter(function () {
      if ($(this).data('recipient-cat') === recipientCat && !$(this).hasClass('focus')) {
        $(this).addClass('focus');
      }
    });
    $('.new_msg_label').filter(function () {
      var $currNewMsgLabel = $(this);

      if ($currNewMsgLabel.data('recipient-cat') === recipientCat) {
        if ($currNewMsgLabel.hasClass('open')) {
          //hide current
          $currNewMsgLabel.removeClass('open').siblings('.recipient_select_box').hide();
        } else {
          var $recipientSelectBox = $currNewMsgLabel.siblings('.recipient_select_box'),
              $scrollBox = $recipientSelectBox.find('.scroll_box'); // hide all

          $('.new_msg_label').removeClass('open').siblings('.recipient_select_box').hide(); // show current

          $currNewMsgLabel.addClass('open');
          $recipientSelectBox.show();
          $scrollBox.hasClass('mCustomScrollbar') ? $scrollBox.mCustomScrollbar('update') : $scrollBox.mCustomScrollbar();
        }
      }
    });
  },

  /**
   * add the clicked element to the corresponding list of recipients if it is
   * not yet in the list, remove it from the list otherwise.
   * @param $recipientLiEl
   */
  toggleRecipientSelection: function ($recipientLiEl) {
    var recipientCat = $recipientLiEl.data('recipient-cat'),
        recipientId = $recipientLiEl.data('recipient-id'); // some ranks (i.e. "founder of the ally") cannot be deselected

    if ($recipientLiEl.hasClass('always_selected')) return;

    if ($recipientLiEl.hasClass('complete_ally')) {
      ogame.messages.toggleSelectAllRecipients(recipientCat);
      return;
    }

    if (!$recipientLiEl.hasClass('selected')) {
      ogame.messages.createRecipient(recipientId, recipientCat, $recipientLiEl.html());
      $recipientLiEl.addClass('selected');
    } else {
      ogame.messages.removeRecipient(recipientId);
    }
  },

  /**
   * toggle the selection of all recipients from a given list
   */
  toggleSelectAllRecipients: function (currCat) {
    var cASelected = $('.complete_ally').hasClass('selected'),
        recipientId = cASelected ? '255' : '1',
        name = cASelected ? 'loca.founder' : 'loca.completeAlliance';
    $('.input_replacement').children().remove();
    ogame.messages.createRecipient(recipientId, currCat, name);
    $('.recipient_list').filter(function () {
      if ($(this).data('recipient-cat') === currCat) {
        $(this).find('.ally_rank').each(function () {
          if (!$(this).hasClass('always_selected')) {
            cASelected ? $(this).removeClass('selected') : $(this).addClass('selected');
          }
        });
      }
    });
  }
}; // Old Messages Code below this line:
// this seems to only get used in the showmessage.tpl.php which is only called on galaxy.inc.tpl.php and jumpgate.tpl.php
// @TODO is it depreceated???

function initShowMessage() {
  var $dialog = $('.overlayDiv[data-page="showmessage"]');
  $(".answerHeadline", $dialog).click(function () {
    $(this).toggleClass("open");

    if ($(this).hasClass("open")) {
      $(".answerForm", $dialog).show();
      $(".textWrapper", $dialog).addClass("textWrapperSmall");
      $(".textWrapper", $dialog).removeClass("textWrapper");
    } else {
      $(".answerForm", $dialog).hide();
      $(".textWrapperSmall", $dialog).addClass("textWrapper");
      $(".textWrapperSmall", $dialog).removeClass("textWrapperSmall");
    }
  });
  $(".note > div:first-child", $dialog).addClass("newMessage");
  $(".info:odd", $dialog).css("margin-left", "40px");
  $("div.note p:first").after("<span class=\"seperator\">");
  $('.answerHeadline', $dialog).hover(function () {
    $(this).addClass("pushable");
  }, function () {
    $(this).removeClass("pushable");
  });
  $(".melden", $dialog).click(function () {
    manageErrorbox($(this).attr("rel"), 1);
  });
}

function initNetworkAjax() {
  var $myRiders = $(".reiter");

  if (!$.isFunction(clickFunction)) {
    var clickFunction = function () {
      $myRiders.removeClass("active");
      $(this).addClass("active");
      ajaxLoad($(this).attr("id"), 1);
    };
  }

  $myRiders.off('click');
  $myRiders.click(clickFunction);
  $("#checkAll").off('click').click(function () {
    $(".checker").prop("checked", $(this).is(':checked'));
  });

  function hide(id) {
    $("#TR" + id).hide();
  }

  $(".overlay").click(function () {
    var msg_id = $(this).attr("id");
    markAsRead(msg_id);
  });
  $("#messageContent select").change(function () {
    if (typeof $("select option:selected").attr("id") == "undefined") {
      $(".buttonOK").hide();
      mod = "";
    } else {
      $(".buttonOK").show();
      mod = $("select option:selected").attr("id");
    }
  });
  $(".del").click(function () {
    mod = $(this).attr("id");
  });
  $(".underlined").click(function () {
    $(".buttonOK").hide();
  });
  reduceMsgCount(aktCat);
}
ogame.messages.combatreport = {
  data: [{
    'combatReportId': $('.detailReport').attr('data-combatreportid')
  }],
  loca: [{
    'weapon': '',
    'shield': '',
    'cover': ''
  }],
  // __________________________________________________________ATTRIBUTES__________________________________________________________

  /**
   * get the attributes by the active member(s)
   *
   * @see ogame.messages.combatreport.setCombatArray >> $this.data.combatArray, $this.data.activeMember must be set
   * @return object result 	>> 'armorPercentage': armorpower in percentage
   * 							>> 'weaponPercentage': weaponpower in percentage
   * 							>> 'shieldPercentage': shieldpower in percentage
   */
  getCombatValueByCombatMember: function () {
    var $this = ogame.messages.combatreport;
    var member = $this.data.activeMember;
    var result = {
      'armorPercentage': 0,
      'weaponPercentage': 0,
      'shieldPercentage': 0,
      'characterClassName': '-'
    };
    var countit = 0;
    $.each($this.data.combatArray, function (key, combatMember) {
      //if activeMember not selected and on default add all attributes of all combatMembers
      if ($this.check(true, member, {
        'values': {
          'is': {
            0: 'all'
          }
        }
      })) {
        result.armorPercentage += combatMember.armorPercentage;
        result.weaponPercentage += combatMember.weaponPercentage;
        result.shieldPercentage += combatMember.shieldPercentage;
        countit++;
      } else {
        if (combatMember.ownerName == member) {
          result.armorPercentage = combatMember.armorPercentage;
          result.weaponPercentage = combatMember.weaponPercentage;
          result.shieldPercentage = combatMember.shieldPercentage;
          result.characterClassName = combatMember.ownerCharacterClassName;
          countit = 1;
        }
      }
    });
    result.armorPercentage = Math.round(result.armorPercentage / countit);
    result.weaponPercentage = Math.round(result.weaponPercentage / countit);
    result.shieldPercentage = Math.round(result.shieldPercentage / countit);
    return result;
  },

  /**
   * Set the combatMember attributes
   *
   * @see ogame.messages.combatreport.getCombatValueByCombatMember >> resultArray with armor, weapon and shield must be set
   * @see ogame.messages.combatreport.setCombatArray >> combatside must be set
   */
  setCombatValue: function () {
    var $this = ogame.messages.combatreport; //set attributes by new combatmember

    var result = $this.getCombatValueByCombatMember();
    $('.' + $this.data.combatside + 'CharacterClass').text($this.loca.characterClass + ' ' + result.characterClassName);
    $('.' + $this.data.combatside + 'Weapon').text($this.loca.weapon + ' ' + result.weaponPercentage + '%');
    $('.' + $this.data.combatside + 'Shield').text($this.loca.shield + ' ' + result.shieldPercentage + '%');
    $('.' + $this.data.combatside + 'Cover').text($this.loca.cover + ' ' + result.armorPercentage + '%');
  },
  setCombatLoca: function (loca_weapon, loca_shield, loca_cover, loca_characterClass) {
    var $this = ogame.messages.combatreport;
    $this.loca.weapon = loca_weapon;
    $this.loca.shield = loca_shield;
    $this.loca.cover = loca_cover;
    $this.loca.characterClass = loca_characterClass;
  },
  // __________________________________________________________ACTIVESTATE__________________________________________________________

  /**
   * returns if a ship is active in the combat
   *
   * @param int id				>> shipid to proof
   * @param object membersArray	>> memberid: object	>> id
   *
   * @return string returningValue	>> 'on'||'off' -> for image-css-class
   */
  isActive: function (id, membersArray) {
    var $this = ogame.messages.combatreport; // if shipid is not in the membersArray the shipimage is not active (off)

    for (var key in membersArray) {
      if (key == 'length') {
        continue;
      }

      if ($this.check(true, membersArray[key][id])) {
        return 'on';
      }
    }

    ;

    if ($this.check(true, membersArray[id])) {
      return 'on';
    }

    return 'off';
  },

  /**
   * set the active class for all ships
   *
   * @param object allShipObjects	>> classes of all shipfields
   * @param object activeShips	>> all active ships
   */
  setActiveFlag4Fleet: function (allShipObjects, activeShips) {
    var $this = ogame.messages.combatreport;
    var allShipClasses = $this.getAllShipClasses(allShipObjects);
    $.each(allShipClasses, function (key, classname) {
      var currentShipId = $this.getShipIdByClass(classname);
      var isActiveClass = $this.isActive(currentShipId, activeShips);
      var selector = $this.getShipSelectors(currentShipId);
      $this.changeShipState(isActiveClass, selector['ship']); //clear count

      if (isActiveClass == 'off') {
        var shipSelector = selector['shipCount'];
        var lossSelector = selector['loss'];
        var counts = {
          'ships': {},
          'losses': {}
        };
        counts['ships'][shipSelector] = 0;
        counts['losses'][lossSelector] = "";
        $this.setShipCount(counts);
      }

      $this.toggleShipShowState(selector['ship']);
    });
  },

  /**
   * Search for the right class of the given shipID
   *
   * @param object possibleCategories >> shipcategories to get the right classname for id
   * @param int id >> shipid for searching
   *
   * @return string|bool classname|false	>> returns the classname if it exists else false
   */
  search4Class: function (possibleCategories, id) {
    for (var index in possibleCategories) {
      if ($('.' + possibleCategories[index] + id)[0]) {
        var classname = possibleCategories[index] + id;
        return classname;
      }
    }

    return false;
  },

  /**
   * Get an Object with ship- and lossselector
   *
   * @param mixed shipID	>> can be a string or a number, id of the ship
   *
   * @return object result	>> 'ship': selector
   * 								'shipCount': selector
   * 								'loss': selector
   */
  getShipSelectors: function (shipID) {
    var $this = ogame.messages.combatreport;
    var possibleShipClasses = ['military', 'civil', 'defense'];
    var classname = $this.search4Class(possibleShipClasses, shipID);
    var shipSelector = '.' + $this.data.combatside + ' .' + classname;
    var shipCountSelector = '.' + $this.data.combatside + ' .' + classname + ' .ecke';
    var lossCountSelector = '.' + $this.data.combatside + ' .' + classname + ' .lost_ships';
    var result = {
      'ship': shipSelector,
      'shipCount': shipCountSelector,
      'loss': lossCountSelector
    };
    return result;
  },

  /**
   * Get the shipid in the given class
   *
   * @param string classname	>> class of one shipobject
   *
   * @return string shipID
   */
  getShipIdByClass: function (classname) {
    var classlength = classname.length;
    var shipID = classname.substr(classlength - 3);
    return shipID;
  },

  /**
   * change the active state of shipfield
   *
   * @see ogame.messages.combatreport.setActiveFlag4Fleet
   * @param string newState >> the state to set
   * @param string selector >> the selector of the image
   */
  changeShipState: function (newState, selector) {
    if ($(selector).hasClass('off') && newState != 'off') {
      $(selector).removeClass('off');
    }

    if ($(selector).hasClass('on') && newState != 'on') {
      $(selector).removeClass('on');
    }

    if (!$(selector).hasClass(newState)) {
      $(selector).addClass(newState);
    }
  },

  /**
   * remove the ship if its marked as disabled and show all non disabled ships
   *
   * @param string selector >> the selector of the image
   */
  toggleShipShowState: function (selector) {
    if ($(selector).hasClass('off')) {
      $(selector).parent().hide();
    }

    if ($(selector).hasClass('on')) {
      $(selector).parent().show();
    }
  },
  // __________________________________________________________SHIPS__________________________________________________________

  /**
   * get only the ships of the active member(s)
   *
   * @param string member	>> selected combatMember
   *
   * @return object ships
   */
  getShipsByMembers: function (member) {
    var $this = ogame.messages.combatreport;
    var ships = [];

    if (!$this.check(true, $this.data.combatArray.shipDetails)) {
      $.each($this.data.combatArray, function (key, combatMember) {
        if (typeof combatMember == "object" && typeof combatMember.shipDetails != "undefined") {
          if (typeof ships[combatMember.ownerName] != "undefined") {
            $.extend(ships[combatMember.ownerName], combatMember.shipDetails);
          } else {
            ships[combatMember.ownerName] = combatMember.shipDetails;
          }
        } else {
          if (typeof ships[combatMember.ownerName] == "undefined") {
            ships[combatMember.ownerName] = {};
          }
        }
      });
    } else {
      if (typeof ships[$this.data.combatArray.ownerName] != "undefined") {
        $.extend(ships[$this.data.combatArray.ownerName], $this.data.combatArray.shipDetails);
      } else {
        ships[$this.data.combatArray.ownerName] = $this.data.combatArray.shipDetails;
      }
    }

    if (member == 'all') {
      return ships;
    } else {
      return ships[member];
    }
  },

  /**
   * get only the ships of the active member(s) and selected planet/moon
   *
   * @param member string	>> selected combatMember
   * @param coords string >> coordinates of Planet/Moon
   * @param type int >> 1 = planet, 3 = moon
   * @param combatSim boolean
   * @return object ships
   */
  getShipsByMembersAndCoords: function (member, coords, type) {
    var $this = ogame.messages.combatreport;
    var ships = [];

    if (!$this.check(true, $this.data.combatArray.shipDetails)) {
      $.each($this.data.combatArray, function (key, combatMember) {
        if (coords !== 0) {
          // a location was selected , so we need to filter based on owner name, coordinates and type
          if (typeof combatMember == "object" && typeof combatMember.shipDetails != "undefined") {
            if (combatMember.ownerCoordinates === coords && combatMember.ownerName == member && combatMember.ownerPlanetType == type) {
              if (typeof ships[combatMember.ownerName] != "undefined") {
                $.extend(ships[combatMember.ownerName], combatMember.shipDetails);
              } else {
                ships[combatMember.ownerName] = combatMember.shipDetails;
              }
            }
          }
        } else {
          // an owner name was selected incl. all, so we will group ships based on Owner names)
          if (typeof combatMember == "object" && typeof combatMember.shipDetails != "undefined") {
            if (typeof ships[combatMember.ownerName] != "undefined") {
              $.extend(ships[combatMember.ownerName], combatMember.shipDetails);
            } else {
              ships[combatMember.ownerName] = combatMember.shipDetails;
            }
          }
        }
      });
    } else {
      // This part of code was there, I have no clue why :D
      if (typeof ships[$this.data.combatArray.ownerName] != "undefined") {
        $.extend(ships[$this.data.combatArray.ownerName], $this.data.combatArray.shipDetails);
      } else {
        ships[$this.data.combatArray.ownerName] = $this.data.combatArray.shipDetails;
      }
    }

    if (member == 'all') {
      return ships;
    } else {
      return ships[member];
    }
  },

  /**
   * Get the Array with counts und selectors to set the count of the ships
   *
   * @param object ships	>> shipID: count
   * @param object losses	>> shipID: count
   *
   * @return object combatCountArray 	>> 'ships': object >> selector: count
   * 									>> 'losses': object >> selector: -count
   */
  getShipCountArray: function (ships, losses) {
    var $this = ogame.messages.combatreport;
    var noLosses = $this.check(true, losses, {
      'types': {
        0: 'isEmpty'
      }
    }) ? false : true; //var noLosses = losses == null || typeof losses == "undefined" || jQuery.isEmptyObject(losses) ? true : false;

    var combatShipsArray = {};
    var combatLossArray = {};

    for (var shipID in ships) {
      var selector = $this.getShipSelectors(shipID);
      var shipSelector = selector['shipCount'];
      combatShipsArray[shipSelector] = parseInt(ships[shipID]);

      if (!noLosses) {
        var lossSelector = selector['loss'];

        if ($this.check(true, losses[shipID])) {
          combatLossArray[lossSelector] = parseInt(losses[shipID]);
        }
      }
    }

    var combatCountArray = {
      'ships': combatShipsArray,
      'losses': combatLossArray
    };
    return combatCountArray;
  },

  /**
   * set the count of active ships by shipcountarray
   *
   * @param object shipArray	>> 'ships': object	>> memberID: object	>> shipID: count
   */
  setShipCount4All: function (shipArray) {
    var $this = ogame.messages.combatreport;
    var ships = shipArray['ships'];
    var losses = $this.check(true, shipArray['losses']) ? shipArray['losses'] : {};
    var combatResultArray = {};

    for (var index in ships) {
      var ship = ships[index];
      var loss = $this.check(true, losses, {
        'types': {
          0: 'isEmpty'
        }
      }) && $this.check(true, losses[index]) ? losses[index] : {};
      combatResultArray[index] = $this.getShipCountArray(ship, loss);
    }

    var shipResult = {};
    var lossResult = {};

    for (var memberIndex in combatResultArray) {
      var memberShipArray = combatResultArray[memberIndex]['ships'];
      var memberLossArray = combatResultArray[memberIndex]['losses'];

      for (var shipid in memberShipArray) {
        if ($this.check(true, shipResult[shipid])) {
          shipResult[shipid] = shipResult[shipid] + memberShipArray[shipid];
        } else {
          shipResult[shipid] = memberShipArray[shipid];
        }
      }

      for (var shipid in memberLossArray) {
        if ($this.check(true, lossResult[shipid])) {
          lossResult[shipid] = lossResult[shipid] + memberLossArray[shipid];
        } else {
          lossResult[shipid] = memberLossArray[shipid];
        }
      }
    }

    var resultCountArray = {
      'ships': shipResult,
      'losses': lossResult
    };
    $this.setShipCount(resultCountArray);
  },

  /**
   * set the Shipcount if a specific combatMember is selected
   *
   * @param resultCombatArray object 	>> 'ships': object	>> memberID: object	>> shipID: count
   * 								   	>> 'losses': object	.. (could be null or empty)
   * @param memberArray object		>> memberID: object >> 'ownerName': name
   * @param activeMember string		>> selected member in Dropdown
      * @param coords string             >> coordinates of planet/moon
      * @param planetType int                  >> 1= planet, 3= moon
   */
  setShipCountByActiveMember: function (resultCombatArray, memberArray, activeMember, coords, planetType) {
    coords = coords || 0;
    planetType = planetType || 1;
    var $this = ogame.messages.combatreport;
    var shipCounts = {};
    var lossCounts = {};

    for (var memberID in memberArray) {
      var ownerName = memberArray[memberID]['ownerName'];
      var ownerCoordinates = memberArray[memberID]['ownerCoordinates'];
      var ownerPlanetType = memberArray[memberID]['ownerPlanetType'];

      if (ownerName == activeMember) {
        for (var attr in resultCombatArray['ships'][memberID]) {
          if (coords !== 0) {
            if (coords == ownerCoordinates && planetType == ownerPlanetType) {
              if (!shipCounts.hasOwnProperty(attr)) {
                shipCounts[attr] = resultCombatArray['ships'][memberID][attr];
              } else {
                shipCounts[attr] = shipCounts[attr] + resultCombatArray['ships'][memberID][attr];
              }
            }
          } else {
            if (!shipCounts.hasOwnProperty(attr)) {
              shipCounts[attr] = resultCombatArray['ships'][memberID][attr];
            } else {
              shipCounts[attr] = shipCounts[attr] + resultCombatArray['ships'][memberID][attr];
            }
          }
        }

        if ($this.check(true, resultCombatArray['losses'])) {
          for (var attr in resultCombatArray['losses'][memberID]) {
            if (coords !== 0) {
              if (coords == ownerCoordinates && planetType == ownerPlanetType) {
                if (!lossCounts.hasOwnProperty(attr)) {
                  lossCounts[attr] = parseInt(resultCombatArray['losses'][memberID][attr]);
                } else {
                  lossCounts[attr] = lossCounts[attr] + parseInt(resultCombatArray['losses'][memberID][attr]);
                }
              }
            } else {
              if (!lossCounts.hasOwnProperty(attr)) {
                lossCounts[attr] = parseInt(resultCombatArray['losses'][memberID][attr]);
              } else {
                lossCounts[attr] = lossCounts[attr] + parseInt(resultCombatArray['losses'][memberID][attr]);
              }
            }
          }
        }
      }
    }

    if ($this.check(true, shipCounts, {
      'types': {
        0: 'isEmpty'
      }
    })) {
      var countsByMemberArray = $this.getShipCountArray(shipCounts, lossCounts);
      $this.setShipCount(countsByMemberArray);
    }
  },

  /**
   * Set Count by given result array
   *
   * @param object resultArray	>> 'ships': { selectorstring: count}
   * 								>> 'losses': ...
   */
  setShipCount: function (resultArray) {
    var combatside = ogame.messages.combatreport.data.combatside;
    var shipResult = resultArray['ships'];
    var lossResult = resultArray['losses'];

    if (!$.isEmptyObject(shipResult)) {
      for (var selector in shipResult) {
        $(selector).text(shipResult[selector].toString().replace(/\B(?=(\d{3})+(?!\d))/g, "."));
      }
    } else {
      // when there are no Ships, then reset all ecke column to 0 in the current combatside (attacker or defender)
      $("." + combatside + " .ecke").text('0');
    }

    if (!$.isEmptyObject(lossResult)) {
      for (var selector in lossResult) {
        $(selector).text('-' + lossResult[selector].toString().replace(/\B(?=(\d{3})+(?!\d))/g, "."));
      }
    } else {
      // when there are no losses, then reset all lost_ships column to - in the current combatside (attacker or defender)
      $("." + combatside + " .lost_ships").text('-');
    }
  },

  /**
   * Get classes of all ships by jqueryobjects of them
   *
   * @param object allShips	>> objects
   *
   * @return object allShipClasses	>> all classes in array
   */
  getAllShipClasses: function (allShips) {
    var id = allShips.map(function () {
      var id = $(this).attr('class');
      return id;
    }).get().join();
    var allShipClasses = [];
    $.each(id.split(','), function (key, value) {
      var classArray = value.split(' ');
      allShipClasses.push(classArray[1]);
    });
    return allShipClasses;
  },

  /**
   * Set the attributes to display ships
   *
   * @param activeMember object		>> selected member
   * @param combatside object			>> attacker||defender
   * @param resultCombatArray object	>> array of the last round
   * @param memberArray object		>> array of the specific member
      * @param coords string             >> coordinates of planet/moon
      * @param type int                  >> 1= planet, 3 = moon
   */
  displayShipData: function (activeMember, combatside, resultCombatArray, memberArray, coords, type) {
    coords = typeof coords !== 'undefined' ? coords : 0;
    var $this = ogame.messages.combatreport;

    if ($this.check(true, activeMember, {
      'values': {
        'isNot': {
          0: 'all'
        }
      }
    })) {
      //if(activeMember != 'all' && typeof activeMember != 'undefined') {
      $this.setShipCountByActiveMember(resultCombatArray, memberArray, activeMember, coords, type);
    } else {
      $this.setShipCount4All($this.data.combatRounds[combatside][$this.data.combatRounds[combatside].length - 1]);
    }
  },
  // __________________________________________________________ROUNDTEXT__________________________________________________________

  /**
   * show the last combatRound first
   */
  initCombatText: function (combatData) {
    var $this = ogame.messages.combatreport;
    var round = combatData['combatRounds'].length - 1;
    $('.combat_round_list .round_id').find('a').removeClass("active");
    $('.combat_round_list .round_id[data-round=' + round + ']').find('a').addClass("active");
    $this.loadDataBySelectedRound(combatData['attackerJSON'], combatData['defenderJSON'], round);
  },

  /**
   * set the text that descripe the combat by selected round
   *
   * @param object attackerArray	>> round: object >> 'statistic': object >> 'hits': int hitpoints
   * 																		>> 'absorbedDamage': int absorbedDamagePoints
   * 																		>> 'fullStrength': int strength without any absorbance
   * @param object defenderArray	>> defenderArray @see attackerArray
   * @param int round				>> selected round
   */
  setCombatText: function (attackerArray, defenderArray, round) {
    var $this = ogame.messages.combatreport;
    var attackerClass = '.statistic_attacker';
    var defenderClass = '.statistic_defender';
    var hitsClass = '.hits';
    var strengthClass = '.strength';
    var absorbedClass = '.absorbed';
    var sumHitsAttacker = 0;
    var sumAbsorbedDamageAttacker = 0;
    var sumFullStrengthAttacker = 0;
    var sumHitsDefender = 0;
    var sumAbsorbedDamageDefender = 0;
    var sumFullStrengthDefender = 0;

    if ($this.check(true, attackerArray, {
      'length': round
    })) {
      for (var roundindex in attackerArray) {
        sumHitsAttacker = sumHitsAttacker + parseInt(attackerArray[roundindex]['statistic']['hits']);
        sumAbsorbedDamageAttacker = sumAbsorbedDamageAttacker + parseInt(attackerArray[roundindex]['statistic']['absorbedDamage']);
        sumFullStrengthAttacker = sumFullStrengthAttacker + parseInt(attackerArray[roundindex]['statistic']['fullStrength']);
        sumHitsDefender = sumHitsDefender + parseInt(defenderArray[roundindex]['statistic']['hits']);
        sumAbsorbedDamageDefender = sumAbsorbedDamageDefender + parseInt(defenderArray[roundindex]['statistic']['absorbedDamage']);
        sumFullStrengthDefender = sumFullStrengthDefender + parseInt(defenderArray[roundindex]['statistic']['fullStrength']);
      }
    } else {
      sumHitsAttacker = parseInt(attackerArray[round]['statistic']['hits']);
      sumAbsorbedDamageAttacker = parseInt(attackerArray[round]['statistic']['absorbedDamage']);
      sumFullStrengthAttacker = parseInt(attackerArray[round]['statistic']['fullStrength']);
      sumHitsDefender = parseInt(defenderArray[round]['statistic']['hits']);
      sumAbsorbedDamageDefender = parseInt(defenderArray[round]['statistic']['absorbedDamage']);
      sumFullStrengthDefender = parseInt(defenderArray[round]['statistic']['fullStrength']);
    }

    $(attackerClass + hitsClass).text(sumHitsAttacker.toString().replace(/\B(?=(\d{3})+(?!\d))/g, "."));
    $(attackerClass + absorbedClass).text(sumAbsorbedDamageAttacker.toString().replace(/\B(?=(\d{3})+(?!\d))/g, "."));
    $(attackerClass + strengthClass).text(sumFullStrengthAttacker.toString().replace(/\B(?=(\d{3})+(?!\d))/g, "."));
    $(defenderClass + hitsClass).text(sumHitsDefender.toString().replace(/\B(?=(\d{3})+(?!\d))/g, "."));
    $(defenderClass + absorbedClass).text(sumAbsorbedDamageDefender.toString().replace(/\B(?=(\d{3})+(?!\d))/g, "."));
    $(defenderClass + strengthClass).text(sumFullStrengthDefender.toString().replace(/\B(?=(\d{3})+(?!\d))/g, "."));
  },
  // __________________________________________________________MAIN__________________________________________________________

  /**
   * Setup all important information for the combat
   *
   * @param object combatArray	>> all important information init
   * @param object combatside		>> for what side to set the information
   */
  setCombatArray: function (originalCombatArray, combatside) {
    // var combatArray = jQuery.extend({}, originalCombatArray); //shallow copy
    var combatArray = jQuery.extend(true, {}, originalCombatArray); //deep copy

    var $this = ogame.messages.combatreport;
    $this.data.combatside = combatside;
    $this.data.memberSelection = false;

    if ($('#' + $this.data.combatside + '_select_combatreport').find(':selected').length > 0) {
      $this.data.memberSelection = true;
    } // make sure that activeMember becomes a STRING, else all hell will break loose!


    if ($this.data.memberSelection) {
      $this.data.activeMember = '' + $('#' + $this.data.combatside + '_select_combatreport').find(':selected').val();
    } else {
      $this.data.activeMember = '' + $('#' + $this.data.combatside + '_select_combatreport').data('memberName');
    }

    $this.data.activeMember = $this.data.activeMember.split("|", 1)[0];
    $this.data.combatArray = combatArray.member;
    $this.data.combatRounds = [];
    $this.data.combatRounds[combatside] = combatArray.combatRounds;
  },

  /**
   * Setter for combatside
   *
   * @param object combatside		>> for what side to set the information
   */
  setCombatside: function (combatside) {
    var $this = ogame.messages.combatreport;
    $this.data.combatside = combatside;
  },

  /**
   * checks if the given object is correct
   *
   * @param bool easyCheck		>> the result should be only success or more information
   * @param object checks			>>
   *  mixed checkingObject	>> variable, array etc u wanna check - without any parameter check for undefined and null
   *  object values2check	>> values you wanna compare with the given object ({'values':{'is':{},'isNot'{}}})
   *  object types2check	>> types you wanna check with typeof (isEmpty, number, object, string)
   *
   * @return object result		>> success: bool			|| success
   * 								>> allErrors: int
   * 								>> valueErrors: int
   * 								>> typeErrors: int
   * 								>> type: string
   * 								>> length: int
   * 								>> lengthIsChecked: bool
   * 								>> lengthError: int (1||0)
   */
  check: function (easyCheck, checkingObject, checks) {
    var checks = checks != null && typeof checks != 'undefined' && typeof checks == 'object' ? checks : false;
    var success = false;
    var checkingValueErrorCount = 0;
    var checkingTypeErrorCount = 0;
    var checkingLengthErrorCount = 0;
    var length = 0;
    var lengthIsProofed = false; // only if any other checks are given

    if (checks != false) {
      var values2check = checks['values'] != null && typeof checks['values'] != 'undefined' && typeof checks['values'] == 'object' ? checks['values'] : {};
      var types2check = checks['types'] != null && typeof checks['types'] != 'undefined' && typeof checks['types'] == 'object' ? checks['types'] : {};
      var length2check = checks['length'] != null && typeof checks['length'] != 'undefined' ? checks['length'] : false;

      if (!jQuery.isEmptyObject(values2check)) {
        for (index in values2check) {
          var isValueChecklist = values2check[index]; //checking for isValue or isNotValue

          if (index == 'is' && !jQuery.isEmptyObject(isValueChecklist)) {
            for (var isValue in isValueChecklist) {
              if (checkingObject != isValueChecklist[isValue]) {
                checkingValueErrorCount = checkingValueErrorCount + 1;
              }
            }
          }

          if (index == 'isNot' && !jQuery.isEmptyObject(isValueChecklist)) {
            for (var isNotValue in isValueChecklist) {
              if (checkingObject == isValueChecklist[isNotValue]) {
                checkingValueErrorCount = checkingValueErrorCount + 1;
              }
            }
          }
        }
      }

      if (!jQuery.isEmptyObject(types2check)) {
        if (types2check['isEmpty']) {
          if (jQuery.isEmptyObject(checkingObject)) {
            checkingTypeErrorCount = checkingTypeErrorCount + 1;
          }
        }

        for (var index in types2check) {
          if (typeof checkingObject == types2check[index]) {
            checkingTypeErrorCount = checkingTypeErrorCount + 1;
          }
        }
      }

      if (typeof checkingObject == 'object') {
        for (var index in checkingObject) {
          if (typeof checkingObject[index] != 'undefined') {
            length = length + 1;
          }
        }
      } else {
        var checkingString = checkingObject + "";
        length = checkingString.length;
      }

      if (length2check !== false && typeof length2check == 'number' && typeof length == 'number') {
        if (length != length2check) {
          checkingLengthErrorCount = checkingLengthErrorCount + 1;
        }

        lengthIsProofed = true;
      }
    }

    if (typeof checkingObject == 'undefined' || checkingObject == null) {
      checkingTypeErrorCount = checkingTypeErrorCount + 1;
    }

    var errorCount = checkingValueErrorCount + checkingTypeErrorCount;

    if (lengthIsProofed != false) {
      errorCount = errorCount + checkingLengthErrorCount;
    }

    if (errorCount == 0) {
      success = true;
    }

    var result = {
      'success': success,
      'allErrors': errorCount,
      'valueErrors': checkingValueErrorCount,
      'typeErrors': checkingTypeErrorCount,
      'type': typeof checkingObject,
      'length': length,
      'lengthChecked': lengthIsProofed,
      'lengthError': checkingLengthErrorCount
    };

    if (easyCheck) {
      return success;
    } else {
      return result;
    }
  },

  /**
   * set the combatinformation for the report (main-function)
   *
   * @param object combatArray	>> all important information init
   * @param object combatside		>> for what side to set the information
   */
  loadData: function (combatArray, combatside) {
    var $this = ogame.messages.combatreport;
    $this.setCombatArray(combatArray, combatside);
    $this.loadDataBySelectedCombatMember(combatArray, combatside);
    $this.setCombatValue();
  },

  /**
   * set roundspecific information
   *
   * @see ogame.messages.combatreport.setCombatText for params
   */
  loadDataBySelectedRound: function (attackerCombatArray, defenderCombatArray, selectedRound) {
    var $this = ogame.messages.combatreport;
    var round2show = parseInt(selectedRound);
    var attacker = $('.attacker .participant_select option:selected').val(); // get the selected attacker

    var defender = $('.defender .participant_select option:selected').val(); // get the selected defender

    var attacker_coords = $('.attacker .participant_select option:selected').data('coords'); // get the coordinates of selected attacker planet (if planet selected)

    var defender_coords = $('.defender .participant_select option:selected').data('coords'); // get the coordinates of selected defender planet (if planet selected)

    var attacker_fleetID = [];
    var defender_fleetID = []; // check if planet was selected, if so we need to push its fleet Id in fleetIDs and sanitize the member name

    if (typeof attacker_coords != "undefined") {
      ids = attacker.split("|")[1].split(":");
      attacker_fleetID.push(ids);
      attacker = attacker.split("|")[0];
    } else if (attacker != 'all' && typeof attacker != "undefined") {
      // else if a member selected then we need to push the Ids of all its fleets in fleetIDs
      attacker_coords = 0;
      $('.attacker .participant_select option').each(function () {
        if (attacker == $(this).val().split("|")[0] && typeof $(this).val().split("|")[1] != "undefined") {
          attacker_fleetID.push($(this).val().split("|")[1].split(":"));
        }
      });
    } else {
      // no specifications if all was selected, attacker_fleetID must remain empty
      attacker_fleetID = [];
    }

    if (typeof defender_coords != "undefined") {
      ids = defender.split("|")[1].split(":");
      defender_fleetID.push(ids);
      defender = defender.split("|")[0];
    } else if (defender != 'all' && typeof defender != "undefined") {
      // else if a member selected then we need to push the Ids of all its fleets in fleetIDs
      defender_coords = 0;
      $('.defender .participant_select option').each(function () {
        if (defender == $(this).val().split("|")[0] && typeof $(this).val().split("|")[1] != "undefined") {
          defender_fleetID.push($(this).val().split("|")[1].split(":"));
        }
      });
    } else {
      // no specifications if all was selected, defender_fleetID must remain empty
      defender_fleetID = [];
    } // check if fleetID was not empty , then we need to get results of just this Fleets


    if (attacker_fleetID.length > 0) {
      for (var level1 in attackerCombatArray) {
        if (level1 == 'combatRounds') {
          for (var level2 in attackerCombatArray[level1][round2show]) {
            if (level2 == 'ships') {
              for (var shipIds in attackerCombatArray[level1][round2show][level2]) {
                var exist = $.inArray(shipIds, attacker_fleetID[0]); // check if we need the result of this fleet Id

                if (exist == -1) {
                  // if not , then remove its informations from the global result
                  delete attackerCombatArray[level1][round2show][level2][shipIds];
                }
              }
            }
          }
        }
      }
    }

    if (defender_fleetID.length > 0) {
      for (var level1 in defenderCombatArray) {
        if (level1 == 'combatRounds') {
          for (var level2 in defenderCombatArray[level1][round2show]) {
            if (level2 == 'ships') {
              for (var shipIds in defenderCombatArray[level1][round2show][level2]) {
                var exist = $.inArray(shipIds, defender_fleetID[0]); // check if we need the result of this fleet Id

                if (exist == -1) {
                  // if not , then remove its informations from the global result
                  delete defenderCombatArray[level1][round2show][level2][shipIds];
                }
              }
            }
          }
        }
      }
    }

    var attackerCombatRounds = attackerCombatArray['combatRounds'];
    var defenderCombatRounds = defenderCombatArray['combatRounds'];

    if ($this.check(true, attackerCombatRounds, {
      'length': selectedRound
    })) {
      round2show = round2show - 1;
    }

    round2show = round2show + "";
    $this.setCombatside('attacker');
    $this.setShipCount4All(attackerCombatRounds[round2show]);
    $this.setCombatside('defender');
    $this.setShipCount4All(defenderCombatRounds[round2show]);

    if ($this.data.memberSelection) {//$this.resetDropDowns();
    }

    $this.setCombatText(attackerCombatRounds, defenderCombatRounds, selectedRound);
  },

  /**
   * set the 2 dropdowns to no selected member
   */
  resetDropDowns: function () {
    $('#attacker_select_combatreport').val('all').ogameDropDown('refresh');
    $('#defender_select_combatreport').val('all').ogameDropDown('refresh');
  },

  /**
   * set all memberspecific information
   *
   * @param combatArray object	>> all important information init
   * @param combatside object		>> for what side to set the information
      * @param coords string         >> coordinates of planet
      * @param planetType int              >> 1 = planet, 3 = moon
   */
  loadDataBySelectedCombatMember: function (originalCombatArray, combatside, coords, planetType) {
    // var combatArray = jQuery.extend({}, originalCombatArray); //shallow copy
    var combatArray = jQuery.extend(true, {}, originalCombatArray); //deep copy
    // make sure that these params have a "proper" value

    coords = coords || 0;
    planetType = planetType || 1;
    var $this = ogame.messages.combatreport;
    $this.setCombatArray(combatArray, combatside); // set all ships of a combatside and get all active ships

    var ships = $('.' + $this.data.combatside + ' .buildingimg'); // Add defenses as well

    var defense = $('.' + $this.data.combatside + ' .defenseimg');
    ships = $.merge(ships, defense);
    var activeShips = $this.getShipsByMembersAndCoords($this.data.activeMember, coords, planetType); //set isActive-Flag to shippictures

    $this.setActiveFlag4Fleet(ships, activeShips);
    $this.displayShipData($this.data.activeMember, $this.data.combatside, combatArray['combatRounds'][combatArray['combatRounds'].length - 1], combatArray['member'], coords, planetType);
    $this.setCombatValue();
  }
};
function closeDetails(id, expireTime) {
  var elem = $("#fleet" + id);
  elem.children(".openDetails").children().children().attr("src", "//gf2.geo.gfsrv.net/cdn10/de1e5f629d9e47d283488eee0c0ede.gif");
  elem.children(".quantity").show();
  elem.removeClass("detailsOpened");
  elem.addClass("detailsClosed");
  currentMovementTabExtensionStates[id] = [0, expireTime]; // set to 0 == closed

  updateCookieStatus(currentMovementTabExtensionStates);
}

function openDetails(id, expireTime) {
  var elem = $("#fleet" + id);
  elem.children(".openDetails").children().children().attr("src", "//gf3.geo.gfsrv.net/cdnb6/577565fadab7780b0997a76d0dca9b.gif");
  elem.children(".quantity").hide();
  elem.removeClass("detailsClosed");
  elem.addClass("detailsOpened");
  currentMovementTabExtensionStates[id] = [1, expireTime]; // set to 0 == closed

  updateCookieStatus(currentMovementTabExtensionStates);
}

function updateCookieStatus(tabStates) {
  var stringifiedState = JSON.stringify(tabStates);
  var stringifiedOptions = JSON.stringify({
    expires: Math.round(new Date().getTime() / 1000) + 7 * 86400
  });
  $.cookie("tabBoxFleets", stringifiedState, stringifiedOptions);
}

function openCloseDetails(id, expireTime) {
  if ($("#fleet" + id).attr("class") == "fleetDetails detailsOpened") {
    closeDetails(id, expireTime);
  } else {
    openDetails(id, expireTime);
  }
}

function preCloseMovements() {
  $.each(currentMovementTabExtensionStates, function (id, data) {
    if (data[0] == 0) {
      var elem = $("#fleet" + id + " span.openDetails a");
      var expireTime = elem.attr('data-end-time');
      closeDetails(id, expireTime);
    }
  });
}

function initMovement() {
  initToggleHeader('movement');
  preCloseMovements();

  if (showInfos == undefined) {
    var showInfos = 0;
  }

  $("a.openCloseDetails").click(function () {
    openCloseDetails($(this).attr('data-mission-id'), $(this).attr('data-end-time'));
  });
  $(".closeAll").click(function () {
    if (showInfos == 0) {
      showInfos = 1;
      $(".closeAll").children().removeClass('all_open').addClass('all_closed');
    } else {
      showInfos = 0;
      $(".closeAll").children().removeClass('all_closed').addClass('all_open');
    }

    $("a.openCloseDetails").each(function () {
      if (showInfos === 1) {
        closeDetails($(this).attr('data-mission-id'), $(this).attr('data-end-time'));
      } else if (showInfos === 0) {
        openDetails($(this).attr('data-mission-id'), $(this).attr('data-end-time'));
      }
    });
  });
  timerHandler.appendCallback(function () {});
}

function addUserToUnion() {
  $("#participantselect").append($("#buddyselect").find("li.ui-selected"));
}

function removeUserFromUnion() {
  $("#buddyselect").append($("#participantselect").find("li.ui-selected"));
}

function addUserToUnionByForm() {
  var user = $('#unionUserSearch').find('[name="addtogroup"]');
  var userName = user.val();
  var participant = $('#participantselect');

  if (participant.find('li[ref="' + userName + '"]').length == 0) {
    participant.append($(document.createElement('li')).attr('ref', userName).text(userName));
  }

  user.val('');
}

function setUnionUsers() {
  var unionUsers = '';
  $("#participantselect").find("li").each(function () {
    unionUsers += $(this).attr('ref') + ';';
  });
  unionUsers = unionUsers.substring(0, unionUsers.length - 1);
  $('#unionUsers').val(unionUsers);
}

function unionUser(response) {
  var data = $.parseJSON(response);

  if (data["status"]) {
    addUserToUnionByForm();
  } else {
    errorBoxAsArray(data["errorbox"]);
  }
}

function initFederationLayer() {
  $("#switch").click(function () {
    var searchFed = $("#searchFed");
    searchFed.find("> .wrap").toggle();
    searchFed.find("> #honorWarning").toggle();
  });
  $("#buddyselect, #participantselect").selectable({
    filter: "li:not(.undermark)"
  });
  $(document).undelegate('ul#buddyselect li', 'dblclick').delegate('ul#buddyselect li', 'dblclick', function () {
    addUserToUnion();
  }).undelegate('ul#participantselect li', 'dblclick').delegate('ul#participantselect li', 'dblclick', function () {
    removeUserFromUnion();
  });
}

function submit_unionform() {
  setUnionUsers();
  ajaxFormSubmit('unionform', $('form#unionform').attr('action'), unionEdit);
}

function recallShipCountdown(fleetId, currentRecallTime) {
  var thisObj = this;
  var $element = $(".reversal_time[ref='" + fleetId + "']");

  if (isMobile && $element.length) {
    this.updateCountdown = function () {
      var timestamp = thisObj.countdown.getLeftoverTime();
      var formattedDate = getFormatedDate(new Date(timestamp * 1000 + timeDiff), '[d].[m].[Y] [H]:[i]:[s]');
      $element.html(formattedDate);
    }; // countdown objekt


    thisObj.countdown = new oldcountdown(currentRecallTime, 3, 2);
    thisObj.timer = timerHandler.appendCallback(thisObj.updateCountdown);
    thisObj.updateCountdown();
  }
}
function initNotesForm() {
  $('select').ogameDropDown();
  $("#createNote .text").trigger("keyup");

  if ($('#popupContent').length) {
    initNotes();
  }
}

function initNotes() {
  $('select').ogameDropDown();

  function formHasChanges(form) {
    var hasChanges = false;
    $(form).find(':input').each(function () {
      if (typeof $(this).data('value') != 'undefined') {
        if ($(this).data('value') != $(this).val()) {
          hasChanges = true;
        }
      }
    });
    return hasChanges;
  }

  var $overlayDiv = $('.overlayDiv.notices');
  $overlayDiv.find('.openOverlay').unbind('click').bind('click', function () {
    var overlayClass = $(this).attr('data-overlay-class');
    var options = {
      title: $(this).attr('data-title'),
      close: function () {
        var $thisObj = $('.' + overlayClass);

        if (formHasChanges($thisObj.find('form'))) {
          errorBoxDecision(LocalizationStrings.question, locaNotes.changesNotSaved + "<br/><br/>" + locaNotes.questionSaveChanges, LocalizationStrings.yes, LocalizationStrings.no, function () {
            $thisObj.find('form').trigger('submit');
            $thisObj.remove();
          }, function () {
            $thisObj.remove();
          }, true);
        } else {
          $thisObj.remove();
        }
      },
      'class': overlayClass
    };
    openOverlay($(this).attr('href'), options);

    if (overlayClass.indexOf('newNote-') === 0) {
      var number = parseInt(overlayClass.replace(/^newNote-/, '')) + 1;
      $(this).attr('data-overlay-class', 'newNote-' + number);
    }

    return false;
  });
  $(document).undelegate('#noteList form', 'submit').delegate('#noteList form', 'submit', function () {
    $.post($('#noteList').attr('rel'), $(this).serialize(), function (data) {
      $overlayDiv.html(data);
    });
  }).undelegate('#createNote form [type=submit]', 'click').delegate('#createNote form [type=submit]', 'click', function (e) {
    e.preventDefault();
    $(this).parents('form').submit();
  }).undelegate('#createNote form', 'submit').delegate('#createNote form', 'submit', function (e) {
    e.preventDefault();
    var $thisObj = $(this);
    $.ajax({
      url: $(this).attr('rel'),
      type: "post",
      data: $thisObj.serialize(),
      dataType: "json",
      error: function () {
        fadeBox(LocalizationStrings.error, true);
      },
      success: function (data) {
        if (data.error != null) {
          fadeBox(data.error, true);
        } else {
          if ($('#popupContent').length) {
            $(window).unbind("beforeunload.checkChanges");
            location.href = $thisObj.attr('rel') + "&popup=1";
          } else {
            if ($thisObj.parents('.overlayDiv').is(':visible')) {
              $thisObj.parents('.overlayDiv').dialog('option', 'close', function () {
                $(this).remove();
              }).dialog('close');
            }

            if (data.success != null) {
              fadeBox(data.success, false);
            }

            $overlayDiv.load($overlayDiv.find('#noteList').attr('rel'));
          }
        }
      }
    });
    return false;
  }).undelegate('#createNote .textBox', 'keyup touchstart change').delegate('#createNote .textBox', 'keyup touchstart change', function () {
    var sum = $(this).val().length;
    var max = $(this).attr('data-max-length');

    if (sum > max) {
      var range = $(this).getSelection();
      $(this).val($(this).val().substr(0, max));
      sum = max;
      $(this).setSelection(range);
    }

    $(this).parents("form").find(".cntChars").text(sum);
  });
  $(window).unbind("beforeunload.checkChanges").bind("beforeunload.checkChanges", function () {
    var hasChanges = false;
    $('#createNote form').each(function () {
      if (formHasChanges(this)) {
        hasChanges = true;
      }
    });

    if (hasChanges) {
      return locaNotes.changesNotSaved;
    }
  });
}
function getAjaxEventbox() {
  if (typeof ajaxEventboxURI === 'undefined') {
    return;
  }

  // TODO: re-enable
  //$.get(ajaxEventboxURI, reloadEventbox, "text");
}

let reloadEventBoxTimer = null;

function reloadEventbox(data) {
  var evalData;

  // TODO: reenable
  return;

  if (typeof data === 'string') {
    evalData = $.parseJSON(data);
  } else {
    evalData = data;
  }

  var type = typeof evalData["eventText"];
  var actionSum = parseInt(evalData["friendly"]) + parseInt(evalData["neutral"]) + parseInt(evalData["hostile"]);

  if (actionSum > 0) {
    var $eventList;
    var $eventDetails = $('<p class="event_list">');

    if ($('body').attr('id') === 'galaxy') {
      $eventDetails.append('<span class="next_event">' + eventboxLoca.nextEvent + ': <span class="countdown" id="tempcounter" name="countdown"></span></span>').append('<span class="next_event">' + eventboxLoca.nextEventText + ': <span class="' + evalData["eventType"] + '">' + evalData["eventText"] + '</span></span>');
      $eventList = $eventDetails;
    } else {
      var missions = actionSum === 1 ? eventboxLoca.mission : eventboxLoca.missions;
      $eventList = $('<p class="event_list">' + actionSum + ' ' + missions + ': </p>');

      if (evalData["friendly"]) {
        $eventList.append('<span class="undermark">' + evalData["friendly"] + ' ' + eventboxLoca.friendly + '</span>');
      }

      if (evalData["neutral"]) {
        if (evalData["friendly"]) {
          $eventList.append(', ');
        }

        $eventList.append('<span class="middlemark">' + evalData["neutral"] + ' ' + eventboxLoca.neutral + '</span>');
      }

      if (evalData["hostile"]) {
        if (evalData["friendly"] || evalData["neutral"]) {
          $eventList.append(', ');
        }

        $eventList.append('<span class="overmark">' + evalData["hostile"] + ' ' + eventboxLoca.hostile + '</span>');
      }

      $eventDetails.append('<span class="next_event">' + eventboxLoca.nextEvent + ': <span class="countdown" id="tempcounter" name="countdown"></span></span>').append('<span class="next_event">' + eventboxLoca.nextEventText + ': <span class="' + evalData["eventType"] + '">' + evalData["eventText"] + '</span></span>');
      $eventList.append($eventDetails);
    }

    $('#eventboxFilled p.event_list').remove();
    $('#eventboxFilled').prepend($eventList);
  }

  if (type === "string" || type === "undefined") {
    $("#eventboxLoading").hide();

    if (actionSum > 0) {
      $("#eventboxBlank").hide();
      $("#eventboxFilled").show(); // Dieser Countdown sorgt dafuer, dass nach dem Ablauf des aktuell angezeigten Events jeweils das naechste
      // geladen wird. Das 3 Sek. Delay sorgt dafuer, dass es nicht beliebig haeufig deswegen neu laedt...
      // Da es immer nur eine Eventbox gibt, muss der Kram im Gegensatz zu der Eventliste nicht weiter
      // abgesichert werden.

      if (reloadEventBoxTimer !== null) {
        timerHandler.removeCallback(reloadEventBoxTimer.timer);
      }

      reloadEventBoxTimer = new simpleCountdown(getElementByIdWithCache("tempcounter"), evalData["eventTime"], function () {
        setTimeout(getAjaxEventbox, 3000);
      });
    } else {
      $("#eventboxBlank").show();
      $("#eventboxFilled").hide();
    }
  }
}

(function ($) {
  $(document).undelegate('.eventToggle', 'click').delegate('.eventToggle', 'click', function () {
    toggleEvents();
    return false;
  });
  $(document).undelegate('#eventboxContent .toggleDetails', 'click').delegate('#eventboxContent .toggleDetails', 'click', function () {
    toggleDetails.call(this);
    return false;
  });
  $(function () {
    if ($("#eventboxContent").is(":visible")) {
      toggleEvents.loaded = true;
      $('#js_eventDetailsClosed').hide();
      $('#js_eventDetailsOpen').show();
    }

    if (window.isStandalonePage === undefined || window.isStandalonePage === false) {
      //This loads notification bar
      getAjaxEventbox(); // this loads even list (notification bar !== event list)

      refreshFleetEvents(true);
    }
  });
})(jQuery);
/**
 * Created by florianer on 04.07.16.
 */
if (ogame === undefined) {
  var ogame = {};
}

ogame.Notify = function (title, text, options) {
  this.canNotify = false;
  this.title = title || 'OGame';
  this.options = options || {};
  this.options.body = text || ''; // Let's check if the browser supports notifications

  if (!("Notification" in window)) {
    // alert("This browser does not support system notifications");
    return false;
  } // Let's check whether notification permissions have already been granted
  else if (Notification.permission === "granted") {
    // If it's okay let's create a notification
    this.canNotify = true;
  } // Otherwise, we need to ask the user for permission
  else if (Notification.permission !== 'denied') {
    Notification.requestPermission(function (permission) {
      // If the user accepts, let's create a notification
      if (permission === "granted") {
        this.canNotify = true;
      }
    });
  }
};

ogame.Notify.prototype.setImage = function (image) {
  this.options.icon = image;
};

ogame.Notify.prototype.setTag = function (tag) {
  this.options.tag = tag;
};

ogame.Notify.prototype.show = function () {
  if (this.canNotify) {
    this.notification = new Notification(this.title, this.options);
    setTimeout(this.notification.close.bind(this.notification), 5000);
  }
};
function scrollToTopOfDialog(dialog) {
  $('html, body').stop().animate({
    scrollTop: Math.max(0, dialog.offset().top - 300)
  }, 200);
}

function openOverlay(url, dialogParams) {
  if ($(".ui-dialog span.ui-dialog-title:contains('" + dialogParams.title + "')").length) {
    return;
  }

  if (typeof openOverlay.index == "undefined") {
    openOverlay.index = 0;
  } else {
    openOverlay.index++;
  }

  var currentIndex = openOverlay.index;
  dialogParams = dialogParams || {};

  if ((typeof dialogParams.type == 'undefined' || dialogParams.type != 'inline') && !url.match(new RegExp("^(" + ogameUrl + "|" + startpageUrl + ")"))) {
    window.open('redir.php?url=' + encodeURIComponent(url), '_newtab');
    return;
  }

  if (typeof dialogParams.height == 'undefined') {
    dialogParams.height = "auto";
  }

  if (typeof dialogParams.width == 'undefined') {
    dialogParams.width = "auto";
  }

  if (typeof dialogParams.position == 'undefined') {
    if (isMobile && !isMobileApp) {
      dialogParams.position = {
        my: "top",
        at: "top"
      };
    } else {
      dialogParams.position = {
        my: "center",
        at: "center"
      };
    }
  }

  dialogParams.closeText = "";

  if ($(".overlayDiv").length && !isMobile) {
    var lastOverlay = $(".overlayDiv:last");
    var offset = lastOverlay.offset();
    dialogParams.position = {
      my: "left top",
      at: "left+" + (offset.left + 10) + " top+" + (offset.top + 10)
    };
  }

  function positionDialog(dialog) {
    var $dialogParent = dialog.parent(".ui-dialog");

    if ($dialogParent.length) {
      $dialogParent.css('top', Math.max(0, parseInt($dialogParent.css('top').replace(/px$/, '')))).css('left', Math.max(0, parseInt($dialogParent.css('left').replace(/px$/, ''))));
    }
  }

  var type = dialogParams.type;
  delete dialogParams.type;

  if (type !== 'inline') {
    var loadImage = $(document.createElement('img')).attr('src', '//gf1.geo.gfsrv.net/cdnc6/4161a64a933a5345d00cb9fdaa25c7.gif').attr('alt', LocalizationStrings.loading);
    var centerDiv = $(document.createElement('div')).css('text-align', 'center').css('margin-top', '20px').append(loadImage);
    var dialog = $(document.createElement("div")).addClass('overlayDiv').css('display', 'none').append(centerDiv).appendTo("body");

    var defaultClose = function () {
      dialog.find('select').ogameDropDown('destroy');
      dialog.remove();
      Tipped.hideAll();
    };

    switch (typeof dialogParams.close) {
      case 'function':
        // Nothing to do
        break;

      case 'string':
        var closeCallbacks = dialogParams.close.split(' ');

        dialogParams.close = function () {
          $.each(closeCallbacks, function (i, e) {
            if (e == '__default') {
              defaultClose();
            } else {
              window[e]();
            }
          });
        };

        break;

      default:
        dialogParams.close = defaultClose;
        break;
    }
  } else if (!dialogParams.close && type === 'inline') {
    dialogParams.close = function () {
      if (closeTradeResourcesOverlay && typeof closeTradeResourcesOverlay === 'function' && typeof traderObj !== 'undefined') {
        closeTradeResourcesOverlay(true);
      }

      if ($($(".ui-dialog span.ui-dialog-title:contains('" + dialogParams.title + "')").parents('.ui-dialog')[0]).length > 0) {
        $($(".ui-dialog span.ui-dialog-title:contains('" + dialogParams.title + "')").parents('.ui-dialog')[0]).remove();
      }

      $(".overlayDiv").removeClass("overlayDiv");
    };
  }

  if (typeof url == 'string') {
    var queryObject = $.deparam($.param.querystring(url));

    if (typeof queryObject.page != 'undefined') {
      dialog.attr('data-page', queryObject.page);
    }

    if (!isMobile && $.inArray(queryObject.page, popupWindows) != -1) {
      var top = Math.max(0, Math.floor($(window).height() / 2 - dialogParams.popupHeight / 2));
      var left = Math.max(0, Math.floor($(window).width() / 2 - dialogParams.popupWidth / 2));
      var popup = window.open(url + '&popup=1', queryObject.page, "width=" + dialogParams.popupWidth + "," + "height=" + dialogParams.popupHeight + "," + "scrollbars=yes," + "resizable=yes," + "top=" + top + "," + "left=" + left);
      dialog.remove();
      popup.focus();
      return;
    }
  }

  if (typeof dialogParams['class'] != 'undefined') {
    var overlayClass = dialogParams['class'].split(' ').join('.');

    if ($(".overlayDiv." + overlayClass).length) {
      $.get(url, {}, function (data) {
        $(".overlayDiv." + dialogParams['class']).empty().append(data).dialog("moveToTop");
      });
      dialog.remove();
      dialog = $(".overlayDiv." + overlayClass);

      if (typeof queryObject.page != 'undefined') {
        dialog.attr('data-page', queryObject.page);
      }

      if (typeof dialogParams['title'] != 'undefined') {
        dialog.dialog('option', 'title', dialogParams['title']);
      }

      scrollToTopOfDialog(dialog);
      return true;
    } else {
      dialog.addClass(dialogParams['class']);
    }
  }

  if (type == 'inline') {
    dialog = $(url);
  }

  if (isNaN(dialogParams.dragStart) && isNaN(dialogParams.dragStop)) {
    var background;

    dialogParams.dragStart = function () {
      $('html').data('noclick', true);
      dialog.dialog('option', 'width', dialog.width()).dialog('option', 'height', dialog.height());
      background = {
        'bg': dialog.css('background'),
        'image': dialog.css('background-image'),
        'x': dialog.css('background-position-x'),
        'y': dialog.css('background-position-y'),
        'position': dialog.css('background-position')
      };
      dialog.find('select').ogameDropDown('hide');
      dialog.children().hide(); // da die dropdowns nun ausserhalb sind, muessen sie auch separat versteckt und wieder angezeigt werden

      var dropDowns = dialog.find('.markItUpDropMenu[id]');

      for (var i = 0; i < dropDowns.length; ++i) {
        var $myDropDown = $('body>ul[rel=' + dropDowns[i].id + ']'); // Anpassung beim 1. Mal:

        var adjustTop = typeof $myDropDown.attr('old_left') == 'undefined' ? -18 : 0;
        var adjustLeft = typeof $myDropDown.attr('old_left') == 'undefined' ? -6 : 0;
        $myDropDown.attr('old_top', dialog.offset()['top'] + adjustTop).attr('old_left', dialog.offset()['left'] + adjustLeft).hide(); // Werte merken fuer dragStop
      }

      dialog.css('background', '#000000');
    };

    dialogParams.dragStop = function () {
      setTimeout(function () {
        $('html').data('noclick', false);
      }, 100); // try to use the different css properties of different browsers

      if (typeof dialog.bg == 'undefined' || dialog.bg.length == 0) {
        dialog.css('background-image', background.image);

        if (typeof background.position == 'undefined' || background.position.length == 0) {
          dialog.css('background-position-x', background.x).css('background-position-y', background.y);
        } else {
          dialog.css('background-position', background.position);
        }
      } else {
        dialog.css('background', background.bg);
      }

      dialog.children().show(); // verschiebe die Dropdowns in der gleichen Weise wie den Dialog selbst

      var dropDowns = dialog.find('.markItUpDropMenu[id]');

      for (var i = 0; i < dropDowns.length; ++i) {
        var $innerUl = $('body>ul[rel=' + dropDowns[i].id + ']');
        $innerUl.css({
          'top': parseInt($innerUl.css('top')) - $innerUl.attr('old_top') + dialog.offset()['top'] + 'px',
          'left': parseInt($innerUl.css('left')) - $innerUl.attr('old_left') + dialog.offset()['left'] + 'px'
        });

        if ($(dropDowns[i]).attr('data-opened') == 1) {
          $innerUl.show();
        }
      }

      dialog.dialog('option', 'width', dialogParams.width).dialog('option', 'height', dialogParams.height);
      positionDialog(dialog);
    };
  }

  if (isNaN(dialogParams.resizable)) {
    dialogParams.resizable = false;
  }

  if (isMobile) {
    dialogParams.draggable = false; //        dialogParams.modal = true;
  }

  if (dialogParams.modal) {
    dialogParams.open = function () {
      $('.ui-widget-overlay').css('height', '').css('width', '');
    };
  }

  switch (type) {
    case 'iframe':
      var width = overlayWidth;
      var height = overlayHeight;

      if (typeof dialogParams.iframeWidth != 'undefined') {
        width = dialogParams.iframeWidth;
        delete dialogParams.iframeWidth;
      }

      if (typeof dialogParams.iframeHeight != 'undefined') {
        height = dialogParams.iframeHeight;
        delete dialogParams.iframeHeight;
      }

      dialog.html("<iframe allowTransparency='true'" + "frameborder='0' hspace='0' src='" + url + "' " + "id='TB_iframeContent' name='TB_iframeContent" + Math.round(Math.random() * 1000) + "' " + "style='width:" + (width + 25) + "px;height:" + (height + 1) + "px;' >" + "</iframe>").dialog(dialogParams).dialog("moveToTop");
      positionDialog(dialog);
      break;

    case 'inline':
      var inlineObject = $(url);
      var $dialogParent = inlineObject.parent();
      inlineObject.addClass('overlayDiv').dialog(dialogParams).dialog("moveToTop");
      positionDialog(inlineObject);
      break;

    default:
      dialog.dialog(dialogParams).dialog("moveToTop");
      $.get(url, {}).done(function (data) {
        dialog.empty().append(data).dialog('option', 'position', dialog.dialog('option', 'position'));
        setTimeout(function () {
          dialog.dialog('option', 'position', dialog.dialog('option', 'position'));
          positionDialog(dialog);
        }, 100);
        $(document).trigger('ajaxShowOverlay');
      }).fail(function () {});
  }

  Tipped.hideAll();
  $("select").ogameDropDown('hide');

  if (!isMobile) {
    $(window).bind('resize.overlay' + currentIndex, function () {
      if (dialog.is(':data(dialog)')) {
        dialog.dialog('option', 'position', dialog.dialog('option', 'position'));
        positionDialog(dialog);
      } else {
        $(window).unbind('resize.overlay' + currentIndex);
      }
    });
  }
} // checks if any overlay is there at all


function isOverlayOpen() {
  return $(".overlayDiv").length > 0;
}

function initOverlays() {
  $(document).undelegate('a[href*="overlay=1"], button[data-target*="overlay=1"], a.overlay, button.overlay', 'click').delegate('a[href*="overlay=1"], button[data-target*="overlay=1"], a.overlay, button.overlay', 'click', function (e) {
    e.preventDefault();
    var url = $(this).attr('href') || $(this).attr('data-target');

    if (typeof $(this).data('overlay-token') !== 'undefined') {
      url += "&token=" + $(this).data('overlay-token');
    }

    if ($(this).data('overlay-same')) {
      var $uiDialog = $(this).parents('.ui-dialog');
      var $overlayDiv = $uiDialog.find('.overlayDiv');

      if ($(this).data('overlay-same') && $overlayDiv.length > 0) {
        $.get(url, {}, function (data) {
          removeTooltip($overlayDiv.find(getTooltipSelector()));
          $overlayDiv.empty() // force repaint (ie 8 bug q.q)
          .append(data) // force repaint (ie 8 bug -.-)
          .dialog('moveToTop');
          $overlayDiv.dialog("option", "position", $overlayDiv.dialog("option", "position"));
          $uiDialog.hide(); // force repaint (ie 9/10 bug ~=[,,_,,]:3)

          $uiDialog.show(); // force repaint...  ie 9/10 bug (/¯◡ ‿ ◡)/¯ ~ ┻━┻
        });
        return false;
      }
    }

    var dialogParams = {
      zIndex: 4000
    };

    if ($(this).data('overlay-title')) {
      dialogParams.title = $(this).data('overlay-title');
    } else if (typeof $(this).attr('title') != 'undefined' && $(this).attr('title').length) {
      dialogParams.title = $(this).attr('title');
    } else if ($(this).data('tipped_restore_title')) {
      dialogParams.title = $(this).data('tipped_restore_title').replace(/^.+\|/, '');
    }

    if ($(this).data('overlay-class')) {
      dialogParams['class'] = $(this).data('overlay-class');
    }

    if ($(this).data('overlay-width')) {
      dialogParams.width = $(this).data('overlay-width');
    }

    if ($(this).data('overlay-height')) {
      dialogParams.height = $(this).data('overlay-height');
    }

    if ($(this).data('overlay-popup-width')) {
      dialogParams.popupWidth = $(this).data('overlay-popup-width');
    }

    if ($(this).data('overlay-popup-height')) {
      dialogParams.popupHeight = $(this).data('overlay-popup-height');
    }

    if ($(this).data('overlay-modal')) {
      dialogParams.modal = $(this).data('overlay-modal');
      dialogParams.resizable = false;
      dialogParams.draggable = false;
    }

    if ($(this).data('overlay-iframe')) {
      dialogParams.type = 'iframe';

      if ($(this).data('iframe-width')) {
        dialogParams.iframeWidth = $(this).data('iframe-width');
      }

      if ($(this).data('iframe-height')) {
        dialogParams.iframeHeight = $(this).data('iframe-height');
      }
    } else if ($(this).data('overlay-inline')) {
      dialogParams.type = 'inline';
      url = $(this).data('overlay-inline');
    }

    if ($(this).data('overlay-close')) {
      dialogParams.close = $(this).data('overlay-close');
    }

    openOverlay(url, dialogParams);
    return false;
  });
}

function updateOverlayToken(tokenId, updateToken) {
  $('[data-overlay-token-id=' + tokenId + ']').data('overlay-token', updateToken);
  token = updateToken;
}
function initOverview() {
  $(".cancelMove").click(function () {
    var thisObj = $(this);
    var locationObj = window.location;
    errorBoxDecision(planetMoveLoca["askTitle"], planetMoveLoca["askCancel"], planetMoveLoca["yes"], planetMoveLoca["no"], function () {
      $.ajax({
        method: "get",
        url: thisObj.attr("rel"),
        dataType: "json",
        cache: false,
        success: function (data) {
          if (data.error.length > 0) {
            fadeBox(data.error, true);
          } else {
            location.href = getRedirectLink();
          }
        },
        error: function () {
          fadeBox(planetMoveLoca["error"], true);
        }
      });
    });
  });
  $(document).undelegate('#planetMaintenanceDelete', 'submit').delegate('#planetMaintenanceDelete', 'submit', function (e) {
    e.preventDefault();
    ajaxFormSubmit('planetMaintenanceDelete', $(this).attr('action'), planetGivenup);
  }).undelegate('#abandonplanet #block', 'click').delegate('#abandonplanet #block', 'click', function (e) {
    e.preventDefault();

    if (!hasAPassword) {
      var question = $("#giveupHeadline").attr('rel') == 3 ? loca.moonGiveupQuestion : loca.planetGiveupQuestion;
      question = question.replace("%planetName%", $("#giveupName").text()).replace("%planetCoordinates%", $("#giveupCoordinates").text());
      errorBoxDecision($("#giveupHeadline").text(), question, LocalizationStrings.yes, LocalizationStrings.no, function () {
        $('#planetMaintenanceDelete').submit();
      });
    } else {
      show_hide_menus('#validate');
      show_hide_menus('#giveUpNotification');
    }
  }).undelegate('.openPlanetRenameGiveupBox', 'click').delegate('.openPlanetRenameGiveupBox', 'click', function (e) {
    e.stopPropagation();
    openPlanetRenameGiveupBox();
  });
}

function clearField() {
  currentValue = $("#planetName").val();

  if (defaultName == currentValue) {
    clearInput("#planetName");
  }
}

function fillField() {
  currentValue = $("#planetName").val();

  if (currentValue == "") {
    $("#planetName").val(defaultName);
  }
}

function openBuddyOverlay(url, title) {
  openOverlay(url, {
    'class': 'buddies',
    'title': title
  });
}

function planetGivenup(data) {
  var data = $.parseJSON(data);
  errorBoxAsArray(data["errorbox"]);

  if (typeof data["newAjaxToken"] == 'string') {
    $("#planetMaintenanceDelete input[name='_token']").val(data["newAjaxToken"]);
  }

  if (typeof data["password_checked"] != "undefined" && data["password_checked"]) {
    $("#planetMaintenanceDelete").attr('action', data["intent"]);
  }
}
// https://tc39.github.io/ecma262/#sec-array.prototype.find
if (!Array.prototype.find) {
  Object.defineProperty(Array.prototype, 'find', {
    value: function (predicate) {
      // 1. Let O be ? ToObject(this value).
      if (this == null) {
        throw new TypeError('"this" is null or not defined');
      }

      var o = Object(this); // 2. Let len be ? ToLength(? Get(O, "length")).

      var len = o.length >>> 0; // 3. If IsCallable(predicate) is false, throw a TypeError exception.

      if (typeof predicate !== 'function') {
        throw new TypeError('predicate must be a function');
      } // 4. If thisArg was supplied, let T be thisArg; else let T be undefined.


      var thisArg = arguments[1]; // 5. Let k be 0.

      var k = 0; // 6. Repeat, while k < len

      while (k < len) {
        // a. Let Pk be ! ToString(k).
        // b. Let kValue be ? Get(O, Pk).
        // c. Let testResult be ToBoolean(? Call(predicate, T, « kValue, k, O »)).
        // d. If testResult is true, return kValue.
        var kValue = o[k];

        if (predicate.call(thisArg, kValue, k, o)) {
          return kValue;
        } // e. Increase k by 1.


        k++;
      } // 7. Return undefined.


      return undefined;
    },
    configurable: true,
    writable: true
  });
} // https://tc39.github.io/ecma262/#sec-array.prototype.findindex


if (!Array.prototype.findIndex) {
  Object.defineProperty(Array.prototype, 'findIndex', {
    value: function (predicate) {
      // 1. Let O be ? ToObject(this value).
      if (this == null) {
        throw new TypeError('"this" is null or not defined');
      }

      var o = Object(this); // 2. Let len be ? ToLength(? Get(O, "length")).

      var len = o.length >>> 0; // 3. If IsCallable(predicate) is false, throw a TypeError exception.

      if (typeof predicate !== 'function') {
        throw new TypeError('predicate must be a function');
      } // 4. If thisArg was supplied, let T be thisArg; else let T be undefined.


      var thisArg = arguments[1]; // 5. Let k be 0.

      var k = 0; // 6. Repeat, while k < len

      while (k < len) {
        // a. Let Pk be ! ToString(k).
        // b. Let kValue be ? Get(O, Pk).
        // c. Let testResult be ToBoolean(? Call(predicate, T, « kValue, k, O »)).
        // d. If testResult is true, return k.
        var kValue = o[k];

        if (predicate.call(thisArg, kValue, k, o)) {
          return k;
        } // e. Increase k by 1.


        k++;
      } // 7. Return -1.


      return -1;
    },
    configurable: true,
    writable: true
  });
}
function initPreferences() {
  $('.category').click(function () {
    document.prefs.reset();
  });
  let copySubmitButton = $('.copy2PtrConainer a');
  copySubmitButton.on('click', this.onClickExecutePtrCopy.bind(this)); // solution to chrome auto-filling username and password, dynamically add password field
  // once user types in new password

  $('#db_character').on('input', function () {
    if ($('#db_character').val()) {
      if (!$('#db_character_password').length) {
        $('#confirmPasswordWrapper').show();
        $('#confirmPasswordContainer').append(`
                        <input class="textInput w200"
                               id="db_character_password"
                               type="password"
                               value=""
                               size="30"
                               name="db_character_password"
                               autocomplete="new-password"
                        />
                    `);
      }
    } else {
      $('#confirmPasswordWrapper').hide();
      $('#db_character_password').remove();
    }
  }); // Generell immer die erste Gruppe öffnen
  // WICHTIG ZUM DURCHKLICKEN DER TABS

  $('div.wrap > div.group').hide();
  $('div.wrap > div.group:first,' + 'div.wrap:eq(1) > div.group:eq(0),' + 'div.wrap:eq(2) > div.group:eq(0),' + 'div.wrap:eq(3) > div.group:eq(0)').show();
  $('div.wrap > div.bar').click(function () {
    $(this).next('div.group:hidden').slideDown('fast', function () {
      Tipped.show($(':input:visible'));
    }).siblings('div.group:visible').slideUp('fast', function () {
      Tipped.hide($(':input:not(:visible)'));
    });
    $('.formError').validationEngine('closePrompt');
  });
  $('.content .bar').hover(function () {
    $(this).addClass('bar-hover');
  }, function () {
    $(this).removeClass('bar-hover');
  });
  $('#newpass1').bind('keyup', function () {
    var value = $(this).val();
    var length = value.length;
    var hasSpecialChars = value.match(/[^A-Za-z\d]/);
    var hasNumbers = value.match(/\d/);
    var hasMixedCase = value.match(/[a-z]/) && value.match(/[A-Z]/);
    var score = 0;
    var maxScore = 4;
    var fulfilled = {
      'length': false,
      'mixed-case': false,
      'special-chars': false,
      'numbers': false
    };

    if (length >= passwordMinLength && length <= passwordMaxLength) {
      fulfilled['length'] = true;
      score++;
    }

    if (hasMixedCase) {
      fulfilled['mixed-case'] = true;
      score++;
    }

    if (hasNumbers) {
      fulfilled['numbers'] = true;
      score++;
    }

    if (hasSpecialChars) {
      fulfilled['special-chars'] = true;
      score++;
    }

    for (var name in fulfilled) {
      var isFulfilled = fulfilled[name];
      var element = $('#password-meter-status-' + name);
      element.find('img.status-checked').css('visibility', isFulfilled ? 'visible' : 'hidden');
    }

    var rating = Math.floor(score / maxScore * 2);
    var levels = new Array('low', 'medium', 'high');

    for (var i in levels) {
      if (i != rating) {
        $('#password-meter-rating-' + levels[i]).removeClass('arrow');
      } else {
        $('#password-meter-rating-' + levels[i]).addClass('arrow');
      }
    }
  });
  $(".contentzs").tabs({
    beforeActivate: function (event, ui) {
      $("input#selectedTab").val($(ui.tab).parent().prevAll().length);
    },
    activate: function () {
      Tipped.hide($('input:not(:visible)'));
      Tipped.show($('input:visible'));
    },
    active: selectedTab
  });
  $("#sortSetting").unbind('change').bind('change', function () {
    var name = "settings_order";

    if ($(this).val() == customSorting) {
      var $sortOrder = $("#sortOrder");
      $sortOrder.attr("disabled", "disabled").attr("name", "");
      $("#sortOrderHidden").attr("name", name).val($sortOrder.val());
      $("#sortOrder").next(".dropdown").addClass('disabled');
    } else {
      $("#sortOrder").next(".dropdown").removeClass('disabled');
      var $sortOrderHidden = $("#sortOrderHidden");
      $sortOrderHidden.attr("name", "");
      $("#sortOrder").removeClass('disabled').attr("name", name).removeAttr("disabled").val($sortOrderHidden.val());
    }
  }).trigger('change'); //initFormValidation();

  if (moveInProgress) {
    $("form#prefs").on('submit', function (e) {
      var $thisObj = $(this);

      if ($thisObj.find('input#urlaubs_modus.notOnVacation:checked').length) {
        errorBoxDecision(LocalizationStrings.attention, preferenceLoca.planetMoveQuestion, LocalizationStrings.yes, LocalizationStrings.no, function () {
          $thisObj.off('submit').submit();
        });
        e.preventDefault();
        return false;
      }
    });
  }

  if (hasAPassword) {
    $("#prefs").bind('submit', function () {
      var $thisObj = $(this);
      var nameChange = $("#db_character", $thisObj);

      if (!$thisObj.data('asking') && nameChange.val() != undefined && nameChange.val().length) {
        $thisObj.data('asking', true);
        errorBoxDecision(preferenceLoca.changeNameTitle, preferenceLoca.changeNameQuestion.replace("%newName%", $("#db_character", $thisObj).val()), LocalizationStrings.yes, LocalizationStrings.no, function () {
          $thisObj.submit();
          $thisObj.data('asking', false);
        }, function () {
          $thisObj.data('asking', false);
        });
        return false;
      }
    });
  } // Im aktiven Tab aber die richtige Auswahl öffnen


  if (tabsDisabled) {
    $(".contentzs").tabs("option", "disabled", [1, 2]);
    $("#tabGeneral, #tabRepresentation").attr("title", preferenceLoca.tabDisabled).attr("class", "tooltip");
  }

  $('div.wrap:visible > div.bar:eq(' + openGroup + ')').click();
}

function onClickExecutePtrCopy(e) {
  e.stopPropagation();
  e.preventDefault();
  errorBoxDecision(LocalizationStrings.question, preferenceLoca.copyToPtrQuestion, LocalizationStrings.yes, LocalizationStrings.no, function () {
    $.post($('.copy2PtrConainer a').attr('href'), {
      _token: token
    }, response => {
      let data = JSON.parse(response);
      token = data.newAjaxToken;

      if (data.status === 'success') {
        console.log(data.content);
        $('.copy2PtrConainer .fieldwrapper').replaceWith(data.content);
      }
    });
  });
}
function pqChangeTarget(obj) {
  window.location = $(obj).data('targetUrl');
}

function switchProductionTab(tab) {
  $("#productionqueuecomponent .spaceObjectTab").addClass('inactive');
  $(`#productionqueuecomponent .spaceObjectTab.${tab}`).removeClass('inactive');
  let targetQueues = tab === 'planet' ? 'moonProduction' : 'planetProduction';
  $(`#productionqueuecomponent .${targetQueues}`).hide();
  $(`#productionqueuecomponent .${tab}Production`).show();
}
function display_info(type) {
  if (document.getElementById("infoInput").innerHTML == "" || document.getElementById("infoInput").innerHTML != get_displayText(type)) {
    document.getElementById("infoInput").innerHTML = get_displayText(type);
  }
}

function display_error(type) {
  if (document.getElementById("errorInput").innerHTML == "" || document.getElementById("errorInput").innerHTML != get_errorText(type)) {
    document.getElementById("errorInput").innerHTML = get_errorText(type);
    document.getElementById("error").style.display = "block";
  }
}

function hide_error(type) {
  document.getElementById("errorInput").innerHTML = "";
  document.getElementById("error").style.display = "none";
}

function checkUsername() {
  var username = document.forms['new'].elements['username'].value;

  if (username.length < 3 || username.length >= 20) {
    display_error("username");
  } else {
    hide_error();
  }
}

function checkEmail() {
  var email = document.forms['new'].elements['email'].value;
  validate = email.match(/[a-zA-Z0-9]+@+[a-zA-Z0-9]+[.]+[a-zA-Z0-9]{2,4}/);

  if (email.length < 3 || email.length >= 64 || !validate) {
    display_error("email");
  } else {
    hide_error();
  }
}
/**
 * Created by christian.wiedemann on 15.03.2016.
 */
var TECHID_REPAIR_DOCK = 36;
var burnUpCountDownForStationScreen = {};
var repairTimeDownForStationScreen = {};

function displayBurnUpEnquiry() {
  var button = $("input.burnUpButton");
  errorBoxDecision(button.data("loca_box_text"), button.data("loca_decision_text"), button.data("loca_yes"), button.data("loca_no"), function () {
    $.ajax({
      url: button.data("url"),
      success: function (result) {
        var decoded = jQuery.parseJSON(result);

        if (decoded.success) {
          fadeBox(decoded.reason, false, function () {});
          redirectSpaceDock();
        } else {
          fadeBox(decoded.reason, true, function () {});
        }
      }
    });
  }, function () {});
}

function startWreckFieldRepairs() {
  var button = $("input.startRepairsButton");
  $.ajax({
    url: button.data("url"),
    success: function (result) {
      var decoded = jQuery.parseJSON(result);

      if (decoded.success) {
        fadeBox(decoded.reason, false, function () {});
        redirectSpaceDock();
      } else {
        fadeBox(decoded.reason, true, function () {});
      }
    }
  });
}

function reCommissionShips() {
  var button = $("input.reCommissionButton");
  $.ajax({
    url: button.data("url"),
    success: function (result) {
      var decoded = jQuery.parseJSON(result);

      if (decoded.success) {
        fadeBox(decoded.reason, false, function () {});
        redirectSpaceDock();
      } else {
        fadeBox(decoded.reason, true, function () {});
      }
    }
  });
}

function registerBurnUpCountDown(elementId) {
  var burnUpCountDownElement = $(elementId);
  var duration = $(elementId).data('duration');

  if (duration > 0) {
    if (!burnUpCountDownForStationScreen[elementId]) {
      burnUpCountDownForStationScreen[elementId] = new simpleCountdown(burnUpCountDownElement, duration, function () {
        location.reload();
      });
    }
  }
}

function registerRepairTimeCountDown(elementId) {
  var repairTimeCountDownElement = $(elementId);
  var duration = $(elementId).data('duration');

  if (duration > 0) {
    if (!repairTimeDownForStationScreen[elementId]) {
      repairTimeDownForStationScreen[elementId] = new simpleCountdown(repairTimeCountDownElement, duration, function () {
        location.reload();
      });
    }
  }
}

$(document).on("click", "div.burnUpButton", displayBurnUpEnquiry);
$(document).on("click", "div.startRepairsButton", startWreckFieldRepairs);
$(document).on("click", "div.reCommissionButton", reCommissionShips);
$(document).on("ajaxShowElement", function (event, tid) {
  if (tid == TECHID_REPAIR_DOCK) {
    registerBurnUpCountDown("#burnUpCountDownForStationScreen");
    registerRepairTimeCountDown("#repairTimeCountDownForStationScreen");
  }
});
$(document).on("ajaxShowOverlay", function (event) {
  registerBurnUpCountDown("#burnUpCountDownForRepairOverlay");
  registerRepairTimeCountDown("#repairTimeCountDownForRepairOverlay");
});
function initResourceTrader() {
  $(".big_tabs").tabs({
    activate: hideTipsOnTabChange
  });
  $('.resource_link').on('click', onSelectResource);
  $('.btn_calltrader').on('click', callTrader);
}

function onSelectResource(e) {
  var $resource = $(e.currentTarget); // if trader was not previously selected

  if (!$resource.hasClass('active')) {
    // mark new resource as active
    $('.resource_link').removeClass('active');
    $resource.addClass('active'); // blue
    // make the button sharp

    $('.btn_calltrader').attr('disabled', false).data('offerId', $resource.data('resourceId'));
    var $getNewTrader = $('.getNewTraderDiv'); // if the get-new-trader-button is hidden XOR we click on the resource of our last (still active) trader

    if ($getNewTrader.hasClass('hidden') && !$resource.hasClass('oldTraderActive') || !$getNewTrader.hasClass('hidden') && $resource.hasClass('oldTraderActive')) {
      // switch visibility of get-new-trader-button and open-last-trader-button
      $getNewTrader.parent().children().toggleClass('hidden');
    }
  }
}

function showTradeNowButton() {
  if ($("#callTrader").hasClass("traderActive")) {
    $("#callTrader").show();
  } else {
    $("#callTrader").hide();
  }
}
/* ******** Code from Old Trader = Resource Trader ******* */


function calcCosts(id, amount) {
  return Math.ceil(amount * factor[offer_id] / factor[id]);
}

function calcInputFromCosts(id, amount) {
  return Math.max(Math.floor(amount / factor[offer_id] * factor[id]), 0);
}

function setValue(id, value) {
  if (offer_id == id) {
    $("#" + id + "_value_label").html(number_format(value, 0, loca['decimalPoint'], loca['thousandsSeparator']));
  } else {
    formatNumber("#" + id + '_value', value);
  }
}

function checkValue(id) {
  setValue(id, Math.min(getValue($("#" + id + "_value").val()), Math.round(freeStorage[id])));
  free_id = 6 - id - offer_id;
  offer_costs = calcCosts(free_id, getValue($("#" + free_id + "_value").val()));
  costs = calcCosts(id, getValue($("#" + id + "_value").val()));
  freeOfferCosts = Math.round(offer_amount - offer_costs);

  if (costs > freeOfferCosts) {
    setValue(id, calcInputFromCosts(id, freeOfferCosts));
    costs = calcCosts(id, getValue($("#" + id + "_value").val()));
  }

  offer_costs = offer_costs + costs;
  setValue(offer_id, offer_costs);
  document.getElementById(id + '_storage').innerHTML = number_format(freeStorage[id] - getValue($("#" + id + "_value").val()), 0, loca['decimalPoint'], loca['thousandsSeparator']);
}

function setMaxValue(id) {
  setValue(id, freeStorage[id]);
  checkValue(id);
}

function callTrader(e) {
  if ($(e.currentTarget).attr('disabled') == 'disabled') {
    return;
  }

  var id = $(e.currentTarget).data('offerId'),
      askOverwrite = $(e.currentTarget).data('askOverwrite');

  if (typeof askOverwrite == 'undefined') {
    askOverwrite = true;
  }

  if (darkMatter < traderCosts) {
    errorBoxDecision(LocalizationStrings.error, loca.errorNotEnoughDM, LocalizationStrings.yes, LocalizationStrings.no, redirectBuyPremium);
    return;
  }

  function newTrader() {
    if (!$('.call_trader_box .getNewTraderDiv').hasClass('hidden')) {
      $('.call_trader_box').children().toggleClass('hidden');
    }

    $('.resource_list .resource_link').removeClass('oldTraderActive').filter(function (index) {
      return $(this).data('resourceId') == id;
    }).addClass('oldTraderActive'); // remove class from all resources, add to active trader

    $.post(traderCallLink, {
      offer_id: id,
      _token: token
    }, function (data) {
      data = $.parseJSON(data);
      token = data.newAjaxToken;

      if (data["status"] == "1") {
        $('#callTrader').show().addClass('traderActive');
        traderObj.reloadResources();
        $("#callTrader").addClass("traderActive").show();
        openOverlay(traderOverlayLink, {
          'class': "traderlayer"
        });
        var $activeTrader = $("#activeTrader");
        var resourceName = "metal";
        var headline = loca.traderResourceTitleMetal;

        switch (id) {
          case 2:
            resourceName = "crystal";
            headline = loca.traderResourceTitleCrystal;
            break;

          case 3:
            resourceName = "deut";
            headline = loca.traderResourceTitleDeuterium;
            break;
        }

        $activeTrader.find('.left_content #material').attr('class', resourceName);
        $activeTrader.find('p.stimulus').html(headline);
        $activeTrader.show();
        $("#boxHeader, #boxFooter").show();
      } else {
        errorBoxAsArray(data["errorbox"]);
      }
    });
  }

  if (askOverwrite && $("#callTrader").is(':visible')) {
    errorBoxDecision(loca.traderResourceNewQuestionHeadline, loca.traderResourceNewQuestion, LocalizationStrings.yes, LocalizationStrings.no, newTrader);
  } else {
    newTrader();
  }
}

function tradeDone(data) {
  data = $.parseJSON(data);
  token = data.token;

  if (data.status === true) {
    closeTradeResourcesOverlay();
  }

  errorBoxAsArray(data["errorbox"]);
}

function closeTradeResourcesOverlay(doNotDisableCallTrader) {
  $(".overlayDiv.traderlayer").remove();
  traderObj.reloadResources();

  if (!doNotDisableCallTrader) {
    $('.call_trader_box').children().toggleClass('hidden');
    $("#callTrader").removeClass('traderActive').hide();
    $('.btn_calltrader').attr('disabled', true);
    $('.resource_link').removeClass('oldTraderActive active');
    $("#activeTrader").hide();
  }
}
function closeSearch() {
  if (currentPage !== undefined) {
    if (currentPage == 'fleet1' || currentPage == 'fleet2') {
      $('a#continue').focus();
    } else if (currentPage == 'fleet3') {
      $('a#start').focus();
    }
  }
}
// moved to global scope due to CDN issues
inventoryObj = {
  currentPage: null,
  currentItems: null,
  currentItem: null,
  currentCategory: null,
  activatingItem: false,
  initalizeSlider: function (items, slider, width, height, doSlideIn, force, titleClass, small, buildNavigation) {
    if (inventoryObj.currentItems == items && typeof force == 'undefined' || force == false) {
      return;
    }

    inventoryObj.currentItems = items; // don't use slideIn on Overview

    doSlideIn = doSlideIn || 'slideIn';
    titleClass = titleClass || 'tooltipHTML js_hideTipOnMobile';

    if (typeof small == 'undefined') {
      small = true;
    }

    if (typeof buildNavigation == 'undefined') {
      buildNavigation = true;
    }

    $('#' + slider + 'Box').remove('.anythingSlider');
    var newItems = [];
    var counter = 0;

    for (var key in items) {
      var item = items[key];

      if (typeof item.hide != 'undefined' && item.hide) {
        continue;
      }

      if (inventoryObj.currentPage == 'shop' || inventoryObj.currentPage == 'inventory') {
        // switch sorting horizontal <=> vertical
        var modulo = counter % inventoryObj.itemsPerSlide;
        newItems[counter + 2 * (modulo % 3) - 2 * Math.floor(modulo / 3)] = item;
      } else {
        // buff bar
        newItems[counter] = item;
      }

      counter++;
    }

    var slideCounter = 0,
        i = 0,
        $newSlider = $('<ul id="' + slider + '" />');

    for (var length = newItems.length; i < length; i++) {
      if (typeof newItems[i] == 'undefined') {
        $lastSlide.append('<div class="item_img"><div class="empty border5px"></div></div>');
        continue;
      }

      var item = newItems[i];

      if (i % inventoryObj.itemsPerSlide == 0) {
        var $lastSlide = $('<li class="slide_' + slideCounter + '" />').appendTo($newSlider);
        slideCounter++;
      }

      var amount, amountClass, saleBadge;

      if (inventoryObj.currentPage == 'shop') {
        amount = getNumberFormatShort(item.costs, null) + ' ' + loca.currency[item.currency];
        amountClass = 'price';
      } else {
        amount = getNumberFormatShort(item.amount);
        amountClass = 'amount';
      }

      var imageName;

      if (small) {
        imageName = item.imageLarge + '-75x.png';
      } else {
        imageName = item.imageLarge + '-100x.png';
      }

      var activationClass;

      if (item.canBeActivated || item.canBeBoughtAndActivated) {
        activationClass = "enabled";
      } else {
        activationClass = "disabled";
      }

      if (item.isReduced) {
        saleBadge = '<div class="sale_badge ' + activationClass + '"></div>';
      } else {
        saleBadge = '';
      }

      var isActiveClass = item.timeLeft != null ? ' js_is_active ' : '';
      var remainingTime = '';
      var itemTitle = item.title;

      if (slider.indexOf('js_activeItemSlider') != -1) {
        itemTitle = ''; // only show remaining time on active item slider AND if the item is active:

        remainingTime = item.timeLeft != null ? '<span class="js_duration undermark" data-total-duration="' + item.totalTime + '">' + item.timeLeft + '</span>' : '';
      }

      var pusher = ''; // @TODO: add the logic for this condition:
      // only show pusher if we're on overview AND item is active:

      if (item.timeLeft != null && slider.indexOf('js_activeItemSlider') != -1) {
        pusher = '<div class="pusher"></div>';
      }

      var birthdayDiv = '';

      if ($.inArray(birthdayCategory, item.category) != -1) {
        birthdayDiv = '<div class="event_active_hint"></div>';
      }

      $lastSlide.append('<div class="item_img r_' + item.rarity + '" style="background-image: url(/cdn/img/item-images/' + imageName + ');">' + '<div class="item_img_box">' + birthdayDiv + '<div class="activation ' + activationClass + isActiveClass + '"></div>' + '<a href="javascript:void(0);" tabindex="1" title="' + itemTitle + '" class="detail_button ' + titleClass + ' ' + doSlideIn + '" ref="' + item.ref + '">' + saleBadge + '<span class="ecke"><span class="level ' + amountClass + '">' + amount + '</span></span></a></div>' + remainingTime + pusher + '</div>');
    }

    $('#' + slider + 'Box').prepend($newSlider); //Fill up empty Item Slots:

    if (i % inventoryObj.itemsPerSlide != 0) {
      for (var j = i % inventoryObj.itemsPerSlide; j < inventoryObj.itemsPerSlide; j++) {
        $('#' + slider + ' li:last').append('<div class="item_img"><div class="empty border5px"></div></div>');
      }
    } //Fill empty Items End


    return mySlider = $('#' + slider).anythingSlider({
      startStopped: true,
      // If autoPlay is on, this can force it to start stopped
      buildStartStop: false,
      expand: true,
      resizeContents: false,
      theme: 'default',
      infiniteSlides: false,
      autoPlay: false,
      easing: 'swing',
      resizeContents: true,
      stopAtEnd: true,
      playRtl: isRTLEnabled,
      hashTags: true,
      buildNavigation: buildNavigation,
      // Callback when the plugin finished initializing (for IPad Swipe Event)
      onInitialized: function (e, slider) {
        if (isMobile) {
          var time = 1000,
              // allow movement if < 1000 ms (1 sec)
          range = 50,
              // swipe movement of 50 pixels triggers the slider
          x = 0,
              t = 0,
              touch = ("ontouchend" in document),
              st = touch ? 'touchstart' : 'mousedown',
              mv = touch ? 'touchmove' : 'mousemove',
              en = touch ? 'touchend' : 'mouseup';
          slider.$window.bind(st, function (e) {
            // prevent image drag (Firefox)
            //e.preventDefault();
            t = new Date().getTime();
            x = e.originalEvent.touches ? e.originalEvent.touches[0].pageX : e.pageX;
          }).bind(en, function (e) {
            t = 0;
            x = 0;
          }).bind(mv, function (e) {
            //                            e.preventDefault();
            var newx = e.originalEvent.touches ? e.originalEvent.touches[0].pageX : e.pageX,
                r = x === 0 ? 0 : Math.abs(newx - x),
                // allow if movement < 1 sec
            ct = new Date().getTime();

            if (t !== 0 && ct - t < time && r > range) {
              if (newx < x) {
                slider.goForward();
              }

              if (newx > x) {
                slider.goBack();
              }

              t = 0;
              x = 0;
            }
          });
        }
      }
    });
  },
  // End initalizeSlider
  initShop: function () {
    var thisObj = this;
    $(window).unbind('.shop');
    $(document).undelegate('.slideIn', 'click.shop').delegate('.slideIn', 'click.shop', function () {
      if (thisObj.currentItem == $(this).attr('ref')) {
        thisObj.currentItem = null;
        $.bbq.pushState({
          'item': ''
        });
      } else {
        thisObj.currentItem = $(this).attr('ref');
        $.bbq.pushState({
          'item': $(this).attr('ref')
        });
      }
    }); //Buttons Start:

    $('button.to_shop').bind('click.shop', function () {
      $.bbq.pushState({
        'page': 'shop'
      });
    });
    $('button.to_inventory').bind('click.shop', function () {
      $.bbq.pushState({
        'page': 'inventory'
      });
    });
    $('button.buyResourcesLink').bind('click', function () {
      reload_page($(this).data('link'));
    });
    $('.to_shop, .to_inventory').hover(function () {
      $(this).addClass('hover');
    }, function () {
      $(this).removeClass('hover');
    }); // End Buttons
    // Rebuild the Slider if another Category is selected:

    $('.categoryFilter li a').bind('click.shop', function () {
      $.bbq.pushState({
        'category': $(this).attr('rel')
      });
    });
    $(window).unbind('hashchange.shop').bind('hashchange.shop', function (e) {
      thisObj.onHashChange($.deparam.fragment(e.fragment));
    });
    thisObj.onHashChange($.deparam.fragment());
    inventoryObj.refreshResources();
  },
  onHashChange: function (url) {
    if (typeof url['page'] == 'undefined') {
      var pushArray = {
        page: "shop",
        category: $(".categoryFilter a:first").attr('rel')
      };

      if (typeof url['item'] != 'undefined' && url['item'] != '') {
        var item = inventoryObj.items_shop[url['item']];

        if (item.category.length > 0) {
          pushArray.category = item.category[item.category.length - 1];
        }
      }

      $.bbq.pushState(pushArray);
      return;
    }

    var changePage = this.currentPage != url['page'];

    if (changePage) {
      if (url['page'] == 'inventory') {
        this.openInventory();
        $(".planetlink, .moonlink").fragment({
          "page": url["inventory"]
        });
      } else {
        this.openShop();
        $(".planetlink, .moonlink").fragment({
          "page": url["shop"]
        });
      }

      this.updateCategoryAmount();
    }

    if (typeof url["category"] == 'undefined') {
      $.bbq.pushState({
        "category": $(".categoryFilter a:first").attr('rel')
      });
      return;
    } else {
      if (url["category"] != this.currentCategory || changePage) {
        this.changeCategory(url["category"]);
      }
    }

    if (typeof url["item"] == 'undefined' || url['item'] == '' && this.currentItem != null) {
      $('#itemDetails a.close_details').click();
      $(".planetlink, .moonlink").fragment({
        "item": ""
      });
    } else if (this.currentItem != url['item']) {
      var $itemAnchor = $(".slideIn[ref='" + url["item"] + "']");

      if ($itemAnchor.length) {
        $itemAnchor.click();
      } else {
        // item could not be found in shop
        gfSlider.slideIn(getElementByIdWithCache("detail"), url["item"]);
      }

      $(".planetlink, .moonlink").fragment({
        "item": url["item"]
      });
    }
  },
  initShopDetails: function () {
    var thisObj = this;
    var referrerPage = $.deparam.querystring().page;
    $(document).undelegate('#itemDetails .close_details', 'click').delegate('#itemDetails .close_details', 'click', function () {
      gfSlider.hide(getElementByIdWithCache("itemDetails"));
    }).undelegate('#itemDetails a.item.build-it', 'click').delegate('#itemDetails a.item.build-it', 'click', function () {
      $.ajax({
        url: $(this).attr('rel'),
        data: {
          _token: token
        },
        type: "POST",
        dataType: "json",
        error: function () {
          fadeBox(translation['buyError'], true);
        },
        success: function (data) {
          token = data.newAjaxToken;

          if (data.error || data.status === "failure") {
            if (data.message) {
              fadeBox(data.message, true);
            } else {
              fadeBox(data.errors[0].message, true);
            }

            $('#itemDetails a.item').removeClass('build-it').addClass('build-it_disabled');
          } else {
            fadeBox(data.message, false);
            inventoryObj.refreshResources();
            inventoryObj.refreshItemData(data.item);
          }
        }
      });
      return false;
    }).undelegate('#itemDetails a.item.build-it_disabled.dm', 'click').delegate('#itemDetails a.item.build-it_disabled.dm', 'click', function () {
      errorBoxDecision(LocalizationStrings.error, loca.buyDMDecision, LocalizationStrings.yes, LocalizationStrings.no, function () {
        if ($("a.dm_button").length > 0) {
          $("a.dm_button").click();
        } else {
          window.location.href = $("#darkmatter_box a").attr("href");
        }
      });
    }).undelegate('#itemDetails a.activateItem.build-it', 'click').delegate('#itemDetails a.activateItem.build-it', 'click', function () {
      var $thisObj = $(this);

      function upgradeItemAjax() {
        $.ajax({
          url: $thisObj.attr('rel'),
          data: {
            _token: token,
            referrerPage: referrerPage
          },
          type: "POST",
          dataType: "json",
          error: function () {
            fadeBox(translation['buyError'], true);
            $('#itemDetails a.activateItem').removeClass('build-it').addClass('build-it_disabled');
          },
          success: function (data) {
            token = data.newAjaxToken;

            if (data.error || data.status === "failure") {
              if (data.message) {
                fadeBox(data.message, true);
              } else {
                fadeBox(data.errors[0].message, true);
              }

              $('#itemDetails a.activateItem').removeClass('build-it').addClass('build-it_disabled');
            } else {
              fadeBox(data.message, false);

              if (data.reload) {
                location.reload();
                return;
              }

              inventoryObj.refreshResources();
              inventoryObj.refreshItemData(data.item);
            }
          }
        });
      }

      if ($thisObj.hasClass('isUpgrade')) {
        errorBoxDecision(LocalizationStrings.activateItem.upgradeItemQuestionHeader, LocalizationStrings.activateItem.upgradeItemQuestion, LocalizationStrings.yes, LocalizationStrings.no, upgradeItemAjax);
      } else if ($thisObj.hasClass('isCharacterClassItem')) {
        var name = $thisObj.data('itemName');
        errorBoxDecision(LocalizationStrings.notice, LocalizationStrings.characterClassItem.activateItemQuestion.replace('#characterClassName#', name), LocalizationStrings.yes, LocalizationStrings.no, upgradeItemAjax);
      } else if ($thisObj.hasClass('isAllianceClassItem')) {
        thisObj.fetchDataAboutCurrentAllianceClass($thisObj.data('itemName'), upgradeItemAjax, 'activateItemQuestion', null);
      } else {
        upgradeItemAjax();
      }

      return false;
    }).undelegate('#itemDetails a.buyAndActivate.build-it', 'click').delegate('#itemDetails a.buyAndActivate.build-it', 'click', function () {
      var $thisObj = $(this);

      function upgradeItemAjax() {
        $.ajax({
          url: $thisObj.attr('rel'),
          data: {
            _token: token,
            referrerPage: referrerPage
          },
          type: "POST",
          dataType: "json",
          error: function () {
            fadeBox(translation['buyError'], true);
            $('#itemDetails a.activateItem').removeClass('build-it').addClass('build-it_disabled');
          },
          success: function (data) {
            token = data.newAjaxToken;

            if (data.error || data.status === "failure") {
              if (data.message) {
                fadeBox(data.message, true);
              } else {
                fadeBox(data.errors[0].message, true);
              }

              $('#itemDetails a.activateItem').removeClass('build-it').addClass('build-it_disabled');
            } else {
              if (data.reload) {
                location.reload();
                return;
              }

              fadeBox(data.message, false);
              inventoryObj.refreshResources();
              inventoryObj.refreshItemData(data.item);
            }
          }
        });
      }

      if ($thisObj.hasClass('isUpgrade')) {
        errorBoxDecision(LocalizationStrings.activateItem.upgradeItemQuestionHeader, LocalizationStrings.activateItem.upgradeItemQuestion, LocalizationStrings.yes, LocalizationStrings.no, upgradeItemAjax);
      } else if ($thisObj.hasClass('isCharacterClassItem')) {
        var name = $thisObj.data('itemName');
        var price = $thisObj.data('itemPrice');
        errorBoxDecision(LocalizationStrings.notice, LocalizationStrings.characterClassItem.buyAndActivateItemQuestion.replace('#characterClassName#', name).replace('#darkmatter#', tsdpkt(price)), LocalizationStrings.yes, LocalizationStrings.no, upgradeItemAjax);
      } else if ($thisObj.hasClass('isAllianceClassItem')) {
        thisObj.fetchDataAboutCurrentAllianceClass($thisObj.data('itemName'), upgradeItemAjax, 'buyAndActivateItemQuestion', $thisObj.data('itemPrice'));
      } else {
        upgradeItemAjax();
      }

      return false;
    }).undelegate('#itemDetails a.buyAndActivate.build-it_disabled.showGetMoreDmPopup', 'click').delegate('#itemDetails a.buyAndActivate.build-it_disabled.showGetMoreDmPopup', 'click', function () {
      errorBoxDecision(LocalizationStrings.error, loca.buyDMDecision, LocalizationStrings.yes, LocalizationStrings.no, function () {
        window.location.href = $("#darkmatter_box a").attr("href");
      });
    });
  },
  refreshResources: function () {
    getAjaxResourcebox(function (resources) {
      $(".to_dark_matter .level").text(gfNumberGetHumanReadable(resources.darkmatter.amount, isMobile));
    });
  },
  refreshItemData: function (itemData) {
    var uuid = itemData.ref;
    changeTooltip($(".detail_button[ref='" + uuid + "']"), itemData.title);
    $(".detail_button[ref='" + uuid + "'] span.amount, " + "#itemDetails[data-uuid='" + uuid + "'] span.amount").html(tsdpkt(itemData.amount));

    if (typeof inventoryObj.items_inventory != "undefined") {
      if (inventoryObj.items_inventory.length == 0) {
        inventoryObj.items_inventory = {};
      } else if (itemData.amount <= 0) {
        delete inventoryObj.items_inventory[uuid];
      } else {
        inventoryObj.items_inventory[uuid] = itemData;
      }
    }

    if (typeof inventoryObj.items_shop != "undefined") {
      if (inventoryObj.items_shop.length == 0) {
        inventoryObj.items_shop = {};
      }

      inventoryObj.items_shop[uuid] = itemData;
    }

    changeTooltip($('#itemDetails[data-uuid="' + uuid + '"] a.activateItem, #itemDetails[data-uuid="' + uuid + '"] a.buyAndActivate'), itemData.activationTitle);

    if (itemData.hasEnoughCurrency) {
      $('#itemDetails[data-uuid="' + uuid + '"] a.item').addClass('build-it').removeClass('build-it_disabled');
    } else {
      $('#itemDetails[data-uuid="' + uuid + '"] a.item').removeClass('build-it').addClass('build-it_disabled');
    }

    if (itemData.amount > 0) {
      $('#itemDetails[data-uuid="' + uuid + '"] a.activateItem').show();
      $('#itemDetails[data-uuid="' + uuid + '"] a.buyAndActivate').hide();

      if (itemData.canBeActivated) {
        $('#itemDetails[data-uuid="' + uuid + '"] a.activateItem').removeClass('build-it_disabled').addClass('build-it');
      } else {
        $('#itemDetails[data-uuid="' + uuid + '"] a.activateItem').addClass('build-it_disabled').removeClass('build-it');
      }
    } else {
      $('#itemDetails[data-uuid="' + uuid + '"] a.activateItem').hide();
      $('#itemDetails[data-uuid="' + uuid + '"] a.buyAndActivate').show();

      if (itemData.canBeBoughtAndActivated && itemData.hasEnoughCurrency) {
        $('#itemDetails[data-uuid="' + uuid + '"] a.buyAndActivate').removeClass('build-it_disabled').addClass('build-it');
      } else {
        $('#itemDetails[data-uuid="' + uuid + '"] a.buyAndActivate').addClass('build-it_disabled').removeClass('build-it');
      }
    }

    if (isMobile) {
      var infoText = "";

      if ($('#itemDetails[data-uuid="' + uuid + '"] a.activateItem:visible,' + '#itemDetails[data-uuid="' + uuid + '"] a.buyAndActivate:visible').hasClass('build-it_disabled')) {
        infoText += itemData.activationTitle;
      }

      if (itemData.buyTitle.length && itemData.buyTitle != itemData.activationTitle) {
        infoText += itemData.buyTitle;
      }

      $('#itemDetails[data-uuid="' + uuid + '"] .info_txt').text(infoText);
    }

    if (itemData.timeLeft > 0 && itemData.extendable) {
      $('#itemDetails[data-uuid="' + uuid + '"] a.activateItem span').html(loca.extend);
      $('#itemDetails[data-uuid="' + uuid + '"] a.buyAndActivate span').html(loca.buyAndExtend);
    } else {
      $('#itemDetails[data-uuid="' + uuid + '"] a.activateItem span').html(loca.activate);
      $('#itemDetails[data-uuid="' + uuid + '"] a.buyAndActivate span').html(loca.buyAndActivate);
    }

    if (itemData.isAnUpgrade) {
      $('#itemDetails[data-uuid="' + uuid + '"] a.activateItem, #itemDetails[data-uuid="' + uuid + '"] a.buyAndActivate').addClass('isUpgrade');
    } else {
      $('#itemDetails[data-uuid="' + uuid + '"] a.activateItem, #itemDetails[data-uuid="' + uuid + '"] a.buyAndActivate').removeClass('isUpgrade');
    }

    if (this.inShop === true) {
      this.changeCategory($(".categoryFilter a.active").attr('rel'));
    }

    this.updateCategoryAmount();
  },
  boughtItemHint: function () {
    $('.to_inventory .bought_item_notice').show().fadeOut(1000);
  },
  openShop: function () {
    this.currentPage = 'shop';
    $('#js_inventorySliderBox').hide();
    $('#js_shopSliderBox').show();
    $('.to_inventory').removeClass('active');
    $('.to_shop').addClass('active');
    $('#buttonz h2').text(loca.LOCA_PREMIUM_SHOP);

    if (isMobile) {
      $('.js_shopCurrentPage').html(loca.shopText);
    }
  },
  openInventory: function () {
    this.currentPage = 'inventory';
    $('#js_shopSliderBox').hide();
    $('#js_inventorySliderBox').show();
    $('.to_shop').removeClass('active');
    $('.to_inventory').addClass('active');
    $('#buttonz h2').text(loca.LOCA_PREMIUM_INVENTORY);

    if (isMobile) {
      $('.js_shopCurrentPage').html(loca.inventoryText);
    }
  },
  changeCategory: function (category) {
    inventoryObj.currentCategory = category;
    $(".planetlink, .moonlink").fragment({
      "category": category
    });
    $('.categoryFilter li, .categoryFilter li a').removeClass('active');
    $('.categoryFilter li a[rel="' + category + '"]').addClass('active').parent().addClass('active'); // remove all items from active slider:

    $('.anythingSlider').remove();

    var changeItems = function (items, slider) {
      // select the items to rebuild the slider with:
      var newItems2 = [];
      var newItems = [];
      var highestIndex = 0;
      $.each(items, function (index) {
        if (this.category != null) {
          var joinedArray = '$' + this.category.join('$') + '$';

          if (joinedArray.toLowerCase().indexOf('$' + category + '$') != -1) {
            newItems2[inventoryObj.item_orders[category][this.ref]] = this;

            if (inventoryObj.item_orders[category][this.ref] > highestIndex) {
              highestIndex = inventoryObj.item_orders[category][this.ref];
            }
          }
        }
      });

      for (var i = 0; i <= highestIndex; ++i) {
        // in anderes Array umschaufeln fuer IE8 noetig.
        // dieser merkt sich zwar die Indizes, mit denen die Items eingefuegt wurden
        // wird aber mit for(x in y) darueber iteriert, sind diese in der Einfuege-Reihenfolge.
        if (newItems2[i]) {
          newItems[i] = newItems2[i];
        }
      }

      inventoryObj.initalizeSlider(newItems, slider, 340, 340, null, null, null, false);
    };

    if (inventoryObj.currentPage == 'shop') {
      changeItems(inventoryObj.items_shop, 'js_shopSlider');
    } else if (inventoryObj.currentPage == 'inventory') {
      changeItems(inventoryObj.items_inventory, 'js_inventorySlider');
    }
  },
  updateCategoryAmount: function () {
    var items;

    if (inventoryObj.currentPage == 'shop') {
      items = inventoryObj.items_shop;
    } else if (inventoryObj.currentPage == 'inventory') {
      items = inventoryObj.items_inventory;
    } else {
      return;
    }

    var filter = $('.categoryFilter');
    filter.find('.amount').text(0);
    $.each(items, function (index) {
      if (this.category != null) {
        for (var categoryIndex in this.category) {
          var uuid = this.category[categoryIndex];
          var amountSpan = filter.find('a[rel="' + uuid + '"] .amount');
          var amount;

          if (inventoryObj.currentPage == 'shop') {
            amount = 1;
          } else if (inventoryObj.currentPage == 'inventory') {
            amount = this.amount;
          }

          amountSpan.text(tsdpkt(getValue(amountSpan.text()) + amount));
        }
      }
    });
    $.each(filter.find('li'), function (index) {
      var pageFirstUpper = inventoryObj.currentPage.slice(0, 1).toUpperCase() + inventoryObj.currentPage.slice(1);

      if ($(this).hasClass('in' + pageFirstUpper)) {
        $(this).show();
      } else {
        $(this).hide();

        if (!filter.find('li:visible .active').length) {
          filter.find('li:visible:first a').click();
        }
      }
    });
  },
  fetchDataAboutCurrentAllianceClass: function (newClassName, upgradeItemAjax, questionType, price) {
    if (!this.activatingItem) {
      this.activatingItem = true;
      let that = this;
      $.ajax({
        url: inventoryObj.ingameUrl,
        type: "GET",
        data: {
          component: 'allianceclassselection',
          action: 'fetchDataAboutCurrentAllianceClass',
          ajax: 1,
          asJson: 1
        },
        dataType: "json",
        error: function (error) {
          that.promptUserForAllianceClassChange(newClassName, upgradeItemAjax, questionType, price);
        },
        success: function (data) {
          that.promptUserForAllianceClassChange(newClassName, upgradeItemAjax, questionType, price, data);
        }
      });
    }
  },
  promptUserForAllianceClassChange: function (newClassName, upgradeItemAjax, questionType, price, response) {
    this.activatingItem = false;

    if (response.userDoesNotHaveAlliance) {
      return 0;
    }

    let localizationString = LocalizationStrings.allianceClassItem[questionType];
    localizationString = localizationString.replace('#allianceClassName#', newClassName);

    if (questionType === 'buyAndActivateItemQuestion') {
      localizationString = localizationString.replace('#darkmatter#', tsdpkt(price));
    }

    if (response && response.currentAllianceClass && response.dateOfLastAllianceClassChange) {
      localizationString += LocalizationStrings.allianceClassItem.appendCurrentClassQuestion;
      localizationString = localizationString.replace('#currentAllianceClassName#', response.currentAllianceClass);
      localizationString = localizationString.replace('#lastAllianceClassChange#', response.dateOfLastAllianceClassChange);
    }

    errorBoxDecision(LocalizationStrings.notice, localizationString, LocalizationStrings.yes, LocalizationStrings.no, upgradeItemAjax);
  }
}; // var shopObj = {} end
function GFSlider(obj) {
  var thisObj = this; // gekapseltes JavaScript-Objekt
  //thisObj.sliderObj = obj; // betroffenes HTML Obj
  //config (allgemein)

  thisObj.duration = 500; // in ms - gesamtdauer des slidevorgangs

  thisObj.zIndex = 10;
  thisObj.intervalTime = 30; // in ms - framerate des slidens
  // initialisierung

  thisObj.lastTid = 0; //thisObj.sliderObj.style.zIndex = thisObj.lastZIndex;

  thisObj.inAction = false;
  thisObj.isOpen = false;
  thisObj.lastObj = false;
  thisObj.currHeight = obj.offsetHeight;
  thisObj.opacity = 1; // extra funktionalitaet

  thisObj.header = document.getElementById('header_text');
  thisObj.ressButton = document.getElementById('resources_button');
  thisObj.areaMap = document.getElementById('transImg');

  this.slideIn = function (obj, thisTid, reload) {
    if (!thisObj.inAction) {
      thisObj.slideInObj = obj;

      if (thisObj.lastTid != thisTid || reload) {
        //thisObj.header.style.position='absolute';
        //thisObj.header.style.display='none';
        obj.opacity = 1;
        thisObj.lastTid = thisTid;
        $("#detail").html('<div id="techDetailLoading"></div>');

        if (!thisObj.isOpen) {
          if (thisObj.ressButton) thisObj.ressButton.style.display = 'none';
          obj.style.height = '1px';
          obj.style.display = 'block';
          obj.style.overflow = 'hidden';
          thisObj.inAction = true;
          thisObj.startTime = new Date().getTime();
          thisObj.slideInStep();
          thisObj.isOpen = true;
        } else {
          loadDetails(thisObj.lastTid);
        }
      } else {
        thisObj.header.style.display = 'block';
        thisObj.opacity = 0;
        thisObj.lastTid = 0;
        thisObj.inAction = true;
        thisObj.isOpen = false;
        thisObj.startTime = new Date().getTime();
        thisObj.slideOutObj = thisObj.slideInObj;
        thisObj.slideOutStep();
      }
    }
  };

  this.slideInStep = function () {
    obj = thisObj.slideInObj;
    var time = new Date().getTime();
    var height = parseInt(thisObj.currHeight * ((time - thisObj.startTime) / thisObj.duration));

    if (height < thisObj.currHeight) {
      obj.style.height = height + 'px';
      obj.style.marginTop = thisObj.currHeight - 1 - height + 'px';
      window.setTimeout(thisObj.slideInStep, thisObj.intervalTime);
      thisObj.opacity = Math.max(thisObj.opacity - 0.1, 0);
      thisObj.header.style.opacity = thisObj.opacity; //header.style.filter='alpha(opacity='+(this.opacity*100)+')';

      thisObj.header.style.filter = 'Alpha(opacity=' + 0.5 * 100 + ')';
    } else {
      // Ajax Call
      obj.style.height = thisObj.currHeight + 'px';
      obj.style.marginTop = '0px';
      thisObj.inAction = false;
      thisObj.header.style.display = 'none';
      loadDetails(thisObj.lastTid);

      if (thisObj.lastObj && obj != thisObj.lastObj) {
        thisObj.hideLast();
      }

      thisObj.lastObj = obj;
    }
  };

  this.slideOutStep = function () {
    obj = thisObj.slideInObj;
    var time = new Date().getTime();
    height = parseInt(thisObj.currHeight * ((time - thisObj.startTime) / thisObj.duration));

    if (height < thisObj.currHeight) {
      obj.style.height = thisObj.currHeight - 1 - height + 'px';
      obj.style.marginTop = height + 'px';
      window.setTimeout(thisObj.slideOutStep, thisObj.intervalTime);
      thisObj.opacity = Math.max(thisObj.opacity + 0.1, 0);
      thisObj.header.style.opacity = thisObj.opacity;
    } else {
      obj.style.height = thisObj.currHeight + 'px';
      obj.style.marginTop = '0px';
      thisObj.opacity = 1;
      thisObj.header.style.opacity = thisObj.opacity;

      if (thisObj.ressButton) {
        thisObj.ressButton.style.display = 'block';
      }

      obj.style.display = 'none';
      thisObj.inAction = false;
      thisObj.hideLast();
    }
  };

  this.hideLast = function () {
    if (thisObj.lastObj) {
      $(".slideIn").removeClass("active");
      thisObj.lastObj.style.display = 'none';
      thisObj.inAction = false;
    }

    $(document).trigger("ajaxHideElement", thisObj.lastTid);
  };

  this.hide = function (obj) {
    $(".slideIn").removeClass("active");
    thisObj.slideOutObj = obj;
    thisObj.opacity = 1;
    thisObj.header.style.opacity = thisObj.opacity;
    thisObj.header.style.display = 'block';

    if (thisObj.ressButton) {
      thisObj.ressButton.style.display = 'block';
    }

    if (thisObj.areaMap) {
      thisObj.areaMap.style.display = 'block';
    }

    thisObj.slideOutObj.style.display = 'none';
    thisObj.inAction = false;
    thisObj.lastTid = 0;
    thisObj.isOpen = false;
  };
}
function supplyFleet(data) {
  var data = $.parseJSON(data);

  if (data.status) {
    getAjaxResourcebox();
    /*$("#holdingTime-" + data.id).remove();
     var $holdingTime = $('<span class="countdown holdingTime" id="holdingTime-' + data.id + '"></span>')
        .show()
        .appendTo($('#holdingTimeCell'));
    */

    supplyTimes[data.id] = data.time;
    new simpleCountdown($("#holdingTime-" + data.id), data.time);
  }

  errorBoxAsArray(data["errorbox"]);
}

function updateSupplyDetails(ships, costs, index) {
  $("#shipCount").html(gfNumberGetHumanReadable(ships));
  $("#deutCosts").html(gfNumberGetHumanReadable(costs));
  $("span.countdown").hide();
  $("#holdingTime-" + index).show();
}

function initAllianceDepot() {
  $(".overlayDiv #allydepotlayer select").ogameDropDown();
  $(".holdingTime:first-child").show();

  for (var id in supplyTimes) {
    new simpleCountdown($("#holdingTime-" + id), supplyTimes[id]);
  }

  $("#supplyTimeInput").focus(function () {
    clearInput(this);
  }).keyup(function () {
    var deuterium = getValue($('#resources_deuterium').text());
    var costs = getValue($("#deutCosts").text());
    checkIntInput(this, 1, Math.floor(deuterium / costs));
  });
}
/*
 *
 *  Push Notifications codelab
 *  Copyright 2015 Google Inc. All rights reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License
 *
 */

/* eslint-env browser, es6 */
'use strict';

var pushButton = null;
var applicationServerPublicKey = 'BA_ADqzYuy45TlLLbSQcBmOwbjYYaU1snQM8UtO6ZLgUon7HAOELOS_Wnwyv4kAIARi2jrLmXxtDTnx7htApqyc';
var isSubscribed = false;
var swRegistration = null;

function urlB64ToUint8Array(base64String) {
  var padding = '='.repeat((4 - base64String.length % 4) % 4);
  var base64 = (base64String + padding).replace(/\-/g, '+').replace(/_/g, '/');
  var rawData = window.atob(base64);
  var outputArray = new Uint8Array(rawData.length);

  for (var i = 0; i < rawData.length; ++i) {
    outputArray[i] = rawData.charCodeAt(i);
  }

  return outputArray;
}

function initializeUI() {
  pushButton.addEventListener('click', function () {
    pushButton.disabled = true;

    if (isSubscribed) {
      unsubscribeUser();
    } else {
      subscribeUser();
    }
  }); // Set the initial subscription value

  swRegistration.pushManager.getSubscription().then(function (subscription) {
    isSubscribed = !(subscription === null);
    updateSubscriptionOnServer(subscription); // if (isSubscribed) {
    //     console.log('User IS subscribed.');
    // } else {
    //     console.log('User is NOT subscribed.');
    // }

    updateBtn();
  });
}

function updateBtn() {
  if (Notification.permission === 'denied') {
    pushButton.textContent = 'Push Messaging Blocked.';
    pushButton.disabled = true;
    updateSubscriptionOnServer(null);
    return;
  }

  if (isSubscribed) {
    pushButton.textContent = 'Disable Push Messaging';
    pushButton.checked = true;
  } else {
    pushButton.textContent = 'Enable Push Messaging';
    pushButton.checked = false;
  }

  pushButton.disabled = false;
}

function subscribeUser() {
  var applicationServerKey = urlB64ToUint8Array(applicationServerPublicKey);
  swRegistration.pushManager.subscribe({
    userVisibleOnly: true,
    applicationServerKey: applicationServerKey
  }).then(function (subscription) {
    // console.log('User is subscribed.');
    updateSubscriptionOnServer(subscription);
    isSubscribed = true;
    updateBtn();
  })['catch'](function (err) {
    // console.log('Failed to subscribe the user: ', err);
    updateBtn();
  });
}

function unsubscribeUser() {
  swRegistration.pushManager.getSubscription().then(function (subscription) {
    if (subscription) {
      return subscription.unsubscribe();
    }
  })['catch'](function (error) {// console.log('Error unsubscribing', error);
  }).then(function () {
    updateSubscriptionOnServer(null); // console.log('User is unsubscribed.');

    isSubscribed = false;
    updateBtn();
  });
}

function updateSubscriptionOnServer(subscription) {
  if (subscription) {
    $.post("?page=ajax&component=subscription&action=subscribe", {
      subscription: JSON.stringify(subscription)
    });
  }
}

function initSubscriptionSystem() {
  pushButton = document.querySelector('.onoffswitch-checkbox');
  console.log(pushButton);

  if ('serviceWorker' in navigator && 'PushManager' in window) {
    // console.log('Service Worker and Push is supported');
    pushButton.setAttribute('disabled', 'disabled');
    pushButton.classList.add('disabled');
    console.log(pushButton);
    navigator.serviceWorker.register('sw.js').then(function (swReg) {
      // console.log('Service Worker is registered', swReg);
      swRegistration = swReg;
      initializeUI();
    })['catch'](function (error) {// console.error('Service Worker Error', error);
    });
  } else {
    // console.warn('Push messaging is not supported');
    pushButton.textContent = 'Push Not Supported';
  }
}
/*
 * author: Stefanie Knoth
 * description: scripts that are only needed for tablet here
 * date: 04:07:2012
 */
function tabletInitOverviewAdvice() {
  if (!isMobile) {
    return false;
  }

  var $adviceWrapper = $('.adviceWrapper');
  var $exodus = $adviceWrapper.find('#exodus-indicator, #exodus-timer');
  var $exodusProcessed = $adviceWrapper.find('#exodus-indicator-processed');
  $adviceWrapper.prev().before($exodus);
  $adviceWrapper.prev().before($exodusProcessed);
  $('#planetdata').after($adviceWrapper);
}

function tabletInitGalaxyDetails() {
  if (!isMobile) {
    return false;
  }

  var clickEls = ['js_planet', 'js_moon', 'js_debris', 'js_playerName', 'js_allyTag']; //    $('.js_detailRow').hide();

  $('.js_detailRow').css('display', 'none'); // $('.planetname, .planetname1').each(function() {
  //     $newNode = $('<div class="' + $(this).attr('class') + '"/>');
  //     $(this).prev().append($newNode);
  //     $newNode.html($(this).html());
  //     $(this).remove();
  // });

  $('.js_detailRow').each(function (i) {
    i = $(this).attr('rel');

    for (var j = 0; j < clickEls.length; j++) {
      var currEl = $('.' + clickEls[j] + i);

      if (currEl === undefined || currEl.length == 0) {
        if (i == 16) continue;
        if (i == 17) continue;
        return;
      }

      if (currEl.attr('class').indexOf('js_no_action') >= 0) {
        continue;
      }

      currEl.unbind();
      currEl.bind('click.planet', function (e) {
        if ($(this).hasClass('active')) {
          $('.row *.active').removeClass('active'); //                    $('.js_detailRow').hide();

          $('.js_detailRow').css('display', 'none');
        } else {
          $('.row *.active').removeClass('active');
          if ($('.bdaySlotBox')) $('.bdaySlotBox .name').removeClass('active'); //                    $('.js_detailRow').hide();

          $('.js_detailRow').css('display', 'none'); //Show Detailbox for clicked Element

          if ($(this).html().trim()) {
            $(this).addClass('active');

            if ($(this).attr('class').indexOf('js_planet') >= 0) {
              //                            $('.js_detailRowPlanet'+ i).toggle().find('.active_row_details_content');
              elem = '.js_detailRowPlanet' + i;
            } else if ($(this).attr('class').indexOf('js_moon') >= 0) {
              //                            $('.js_detailRowMoon'+ i).toggle();
              elem = '.js_detailRowMoon' + i;
            } else if ($(this).attr('class').indexOf('js_debris') >= 0) {
              //                            $('.js_detailRowDebris'+ i).toggle();
              elem = '.js_detailRowDebris' + i;
            } else if ($(this).attr('class').indexOf('js_playerName') >= 0) {
              //                            $('.js_detailRowPlayer'+ i).toggle();
              elem = '.js_detailRowPlayer' + i;
            } else if ($(this).attr('class').indexOf('js_allyTag') >= 0) {
              //                            $('.js_detailRowAlliance'+ i).toggle();
              elem = '.js_detailRowAlliance' + i;
            }

            $(elem).css('display', 'table-row');
          }
        }
      });
    }
  });
  $("a.planetMoveIcons").bind('click', function (e) {
    e.stopPropagation();
  });
}

function tabletToggleTechtreeInfos(id) {
  if (!isMobile) {
    return false;
  }

  var $techtree = $("div.techtree[data-id='" + id + "']");
  var $techDiv = $techtree.find('.techImage a');
  $techDiv.each(function () {
    var $thisObj = $(this);
    var colorClass = $thisObj.parent().hasClass('built') ? "undermark" : "overmark";
    var techName = $thisObj.data('tech-name');
    var techType = $thisObj.data('tech-type');
    $thisObj.append('<div class="short_info" style="display: none"><span class="' + colorClass + '">' + techName + '</span><br/>' + techType + '</div>');
  });

  if ($techDiv.length) {
    $techtree.append($('<a id="toggleDetails" href="javascript:void(0)" class="btn_blue">' + LocalizationStrings.moreDetails + '</a>').click(function () {
      var $shortInfo = $techtree.find('.short_info');

      if ($shortInfo.is(':visible')) {
        $(this).text(LocalizationStrings.moreDetails);
      } else {
        $(this).text(LocalizationStrings.lessDetails);
      }

      $shortInfo.toggle();
    }));
  }
}

function tabletInitEmpire() {
  if (!isMobile) {
    return false;
  }

  var width = $('#mainWrapper').width();
  width = width < 1024 ? '1024' : width;
  $('#outerWrapper').width(width);
  $('.reset').hide();
}

function tabletInitPayment() {
  if (!isMobile) {
    return false;
  }

  $("#payment").parent('.overlayDiv').dialog('option', 'title', paymentLoca.title);
  document.addEventListener("deviceready", function () {
    $("#mobilePayment a.js_buyPacket").unbind('click').bind('click', function () {
      HostApp.StartPayment($(this).attr("ref"), userData.id, constants.name, constants.language);
    });

    HostApp.OnPaymentFinished = function () {
      getAjaxResourcebox(function (resources) {
        fadeBox(paymentLoca.success, false);
        $("#payment").parent().dialog('close');
        $("#planet #content .level span").attr('class', 'undermark').text(gfNumberGetHumanReadable(resources.darkmatter.amount, isMobile));
      });
    };

    HostApp.OnPaymentFailed = function () {
      fadeBox(paymentLoca.error, true);
    };
  }, false);
}

function tabletInitGalaxy() {
  if (!isMobile) {
    return false;
  }

  $("#galaxyContent").wipetouch({
    wipeLeft: function (e) {
      if (!$("#galaxyLoading:visible").length) {
        submitOnKey('ArrowLeft');
      }
    },
    wipeRight: function (e) {
      if (!$("#galaxyLoading:visible").length) {
        submitOnKey('ArrowRight');
      }
    },
    preventDefault: false,
    preventDefaultWhenTriggering: true,
    moveX: 180,
    moveY: 60
  });
}

function initRetinaImages() {
  // we only want to replace images if we're on a retina display:
  if ($('.js_replace2x').css('font-size') == "1px") {
    $('img.js_replace2x').each(function () {
      $(this).attr('src', $(this).attr('rel'));
    });
  }
}
function setupOverlay(pageLink, overlayTitle, techID) {
  $('.build-it_premium').addClass('overlay');
  $('.build-it_premium').attr('href', pageLink);
  $('.build-it_premium').data('overlay-title', overlayTitle);
  $('.build-it_premium').data('techid', techID);
}

function drawErrorbox(type, message, header, options, link, otherclass) {
  var otherclass = otherclass == undefined ? false : otherclass;
  var domobject = otherclass !== false ? $("." + otherclass) : $(".build-it_disabled");

  if (typeof link == "undefined" || link == "") {
    link = document.location.href;
  }

  domobject.click(function () {
    if (header !== undefined && options !== undefined && link !== undefined) {
      if (type == 'notify') {
        errorBoxNotify(header, message, options.allOk, function () {
          window.location.href = link;
        });
      }

      if (type == 'decision') {
        errorBoxDecision(header, message, options.allYes, options.allNo, function () {
          window.location.href = link;
        });
      }
    }

    if (type == 'fadeBox') {
      fadeBox(message, true);
    }
  });
}

function showErrors() {
  var options = {
    'allYes': loca.allYes,
    'allNo': loca.allNo,
    'allOk': loca.allOk
  };

  if (isBuildlistNeeded) {
    if (!hasCommander && !(isShip || isRocket)) {
      drawErrorbox('decision', loca.infoBuildlist, loca.allError, options, links.decisionCommander, 'build-it_premium');
      return 1;
    }

    if (isRocketAndStorageNotFree) {
      drawErrorbox('notify', loca.noRocketsiloCapacity, loca.allError, options, links.notify);
      return 1;
    }
  } else {
    if (error !== null && error !== 0) {
      if (premiumerror) {
        if (showErrorOnPremiumbutton) {
          drawErrorbox('decision', errorlist[error], loca.allError, options, links[error], buttonClass);
          return 1;
        } else {
          drawErrorbox('decision', errorlist[error], loca.allError, options, links[error]);
          return 1;
        }
      } else if (isRocketAndStorageNotFree) {
        drawErrorbox('notify', loca.noRocketsiloCapacity, loca.allError, options, links.notify);
        return 1;
      } else if (isBusy) {
        return 1;
      } else {
        drawErrorbox('notify', errorlist[error], loca.allError, options, '');
        return 1;
      }
    }
  }

  return 0;
}
function initGlobalTechtree(id) {
  var $techtree = $("div.graph[data-id='" + id + "']");
  $techtree.find(".headline").unbind('click').bind('click', function () {
    $(this).next().toggle(function () {
      var $dialog = $techtree.parents('.ui-dialog');
      $dialog.hide();
      $(this).toggleClass("open");
      $dialog.show();
    });
    /*$(this).next().slideToggle("slow", function() {
        $(this).toggleClass("open");
         $dialog.css('zoom', 1.1);
        setTimeout(function() {
            $dialog.css('zoom', 1);
        }, 1000);
    });*/
  });

  if (openTree == 'all') {
    $techtree.find('.techtree_content').show(0, function () {
      $(this).addClass('open');
    });
  } else if (openTree != null) {
    $techtree.find('.techtree_content_' + openTree).show(0, function () {
      $(this).addClass('open');
    });
  }
}

function initOverlayName() {
  let title = $('#technologytree').data('title');
  $("#technologytree").closest(".ui-dialog").find('.ui-dialog-title').html(title);
}

function drawArrows(id) {
  var $techtree = $("div.graph[data-id='" + id + "']");
  var rowHeight = $techtree.find('.techImage').outerHeight(true);
  var overallWidth = 20;
  $techtree.find('.techWrapper.depth1').each(function () {
    overallWidth += $(this).outerWidth();
  });
  $techtree.css('width', overallWidth);
  var newTree = jsPlumb.getInstance();
  newTree.Defaults.Container = $techtree; // for round edges set corner radius below

  newTree.Defaults.Connector = ["Flowchart", {
    cornerRadius: 20
  }];
  newTree.Defaults.Endpoint = ["Rectangle", {
    cssClass: "endpoint",
    width: 1,
    height: 1
  }]; // default anchors. in most cases a bad idea, only as backup.
  // Continuous Anchors may produce partially overlapping connections

  newTree.Defaults.Anchors = ["ContinuousTop", "ContinuousBottom"]; // coordinates: an array containing the coordinates of each endpoint in pixels as [left,top]

  var coordinates = {}; // endpoints-array is set in singleTree.tpl.php. the values are techIds.

  $.each(endpoints, function () {
    var $elem = $techtree.find(".tech" + this.toString());
    newTree.addEndpoint($elem);
    var elemLeft = Math.floor($elem.find('a').offset().left);
    var elemTop = Math.floor($elem.find('a').offset().top);
    coordinates[this] = [elemLeft, elemTop];
  });
  var changedSomething;

  do {
    // for every connection:
    // check if the source is below the target on the screen. if not, move the source downwards one row
    changedSomething = false;
    $.each(connections, function () {
      var $source = $techtree.find(".tech" + this.source + " a");
      var $target = $techtree.find(".tech" + this.target + " a");

      if ($source.offset().top >= $target.offset().top - 10 && $source.offset().top <= $target.offset().top + 10) {
        $source.parent().css('margin-top', parseInt($source.parent().css('margin-top').replace(/px/, '')) + rowHeight); // we just moved a tech downwards... we have to adjust all corresponding coordinates
        // the surrounding div with class depth* is the second parent

        $source.parent().parent().find('a[data-tech-id]').each(function () {
          coordinates[$(this).attr('data-tech-id')][1] += rowHeight; // 1 == top
          //console.log("RESET "+$(this).attr('data-tech-id') + " "+(coordinates[$(this).attr('data-tech-id')][1]));
        });
        changedSomething = true;
      }
    });
  } while (changedSomething); // columns and rows: these 2 arrays will contain all different left- and top-values of the endpoint coordinates


  var columns = [];
  var rows = [];

  for (var elem in coordinates) {
    if (columns.indexOf(coordinates[elem][0]) == -1) {
      columns.push(coordinates[elem][0]);
    }

    if (rows.indexOf(coordinates[elem][1]) == -1) {
      rows.push(coordinates[elem][1]);
    }
  }

  columns.sort(function (a, b) {
    return a > b ? 1 : -1;
  });
  rows.sort(function (a, b) {
    return a > b ? 1 : -1;
  }); // now the 2 arrays contain a numeric sorted list
  // translated: an array containing the same keys as the coordinates-array, but the values aren't pixels anymore.
  // they are the numbers of the row/column containing that endpoint
  // with this information, it will be possible to test whether the path for a connection-line is free or not.

  var translated = {};

  for (var elem2 in coordinates) {
    translated[elem2] = {
      'left': columns.indexOf(coordinates[elem2][0]),
      'top': rows.indexOf(coordinates[elem2][1])
    };
  } //console.dir(translated);
  // unfortunately, it matters in which order you put the connections into the drawing algorithm.
  // (because every line that is drawn blocks 1 anchor place at its 2 endpoints)
  // lines that will be drawn straight upwards have to be protected and drawn first..
  // -> sort by the minimum column distance


  connections.sort(function (a, b) {
    return Math.abs(translated[a.source]['left'] - translated[a.target]['left']) < Math.abs(translated[b.source]['left'] - translated[b.target]['left']) ? -1 : 1;
  }); // connection styling, see http://jsplumbtoolkit.com/doc/paint-styles

  var connectStyles = {
    hasRequirements: {
      strokeStyle: "#015100",
      lineWidth: 3
    },
    hasNotRequirements: {
      strokeStyle: "#510009",
      lineWidth: 3
    }
  }; // our anchors, format: [x-coordinate 0-1, y-coordinate 0-1, dx {-1;+1}, dy {-1;+1}
  // the first two parameters mark the point where the line starts at the endpoint
  // (change if you need, or add more entries),
  // the last two parameters give the initial direction of the line (do not change).
  // the anchors at the beginning of the anchor-arrays will be used first (try to keep it symmetrical)

  var leftAnchors = [[0, 0.5, -1, 0], [0, 0.3, -1, 0], [0, 0.7, -1, 0], [0, 0.9, -1, 0]];
  var rightAnchors = [[1, 0.5, 1, 0], [1, 0.3, 1, 0], [1, 0.7, 1, 0], [1, 0.9, 1, 0]];
  var bottomAnchors = [[0.5, 1, 0, 1], [0.3, 1, 0, 1], [0.7, 1, 0, 1], [0.9, 1, 0, 1]];
  var topAnchors = [[0.5, 0, 0, -1], [0.3, 0, 0, -1], [0.7, 0, 0, -1], [0.9, 0, 0, -1]]; // 0.9 is used in tech TECH_NETZTECHNIK. i guess that's the only one
  // we do not want to use the same anchor twice. so we have to remember which of the anchors was already used

  var alreadyUsedAnchors = {};

  function chooseAnchor(elemId, orientation, anchors, alreadyUsedAnchors) {
    if (!alreadyUsedAnchors[elemId]) {
      alreadyUsedAnchors[elemId] = {};
    }

    if (alreadyUsedAnchors[elemId][orientation] == undefined) {
      alreadyUsedAnchors[elemId][orientation] = 0;
    } // a stupid algorithm perhaps, but we only track the number of already used anchors.
    // one after we other is used. could be modified in the future; should be enough for now.


    ++alreadyUsedAnchors[elemId][orientation];
    return anchors[alreadyUsedAnchors[elemId][orientation] - 1];
  } // draw each connection


  $.each(connections, function () {
    var $source = $techtree.find(".tech" + this.source + " a");
    var $target = $techtree.find(".tech" + this.target + " a");
    var connectOptions = {
      source: $source,
      target: $target,
      overlays: [["Arrow", {
        location: -5,
        paintStyle: connectStyles[this.paintStyle],
        width: 8,
        length: 8,
        foldback: 0.8
      }], ["Label", {
        label: this.label,
        cssClass: "label " + this.paintStyle,
        location: 0.85
      }]],
      paintStyle: connectStyles[this.paintStyle],
      hoverPaintStyle: {
        strokeStyle: "rgb(255, 255, 0)"
      }
    }; // if you want to change options
    // consult the documentation at http://jsplumbtoolkit.com for details
    //var sourcePosition = $source.offset();
    //var targetPosition = $target.offset();
    //console.info("source:" + $source.attr('data-tech-name') + ", target: " + $target.attr('data-tech-name') + ". pos " + sourcePosition.left + "|" + sourcePosition.top + " vs pos " + targetPosition.left + "|" + targetPosition.top);
    //#############################################
    // search for the path that we line should take
    // it may not go through other endpoints/techs
    // it should use the shortest path and should not change directions too often (1-2)

    if (translated[this.target].left < translated[this.source].left) {
      // target is left of the source
      if (!lineInCoordinatesBlocked(translated, translated[this.source].left, translated[this.source].top, translated[this.source].left, translated[this.target].top) && !positionInCoordinatesBlocked(translated, translated[this.source].left, translated[this.target].top) && !lineInCoordinatesBlocked(translated, translated[this.source].left, translated[this.target].top, translated[this.target].left, translated[this.target].top)) {
        // vertical, horizontal
        connectOptions.anchors = [chooseAnchor(this.source, 'top', topAnchors, alreadyUsedAnchors), chooseAnchor(this.target, 'right', rightAnchors, alreadyUsedAnchors)]; //console.log("chose top right");
      } else {
        // horizontal, vertical
        connectOptions.anchors = [chooseAnchor(this.source, 'left', leftAnchors, alreadyUsedAnchors), chooseAnchor(this.target, 'bottom', bottomAnchors, alreadyUsedAnchors)];
        connectOptions.overlays[1][1] = readableVersionOfLabel(connectOptions.overlays[1][1], alreadyUsedAnchors[this.target].bottom); //console.log("chose left bottom");
      }
    } else if (translated[this.target].left > translated[this.source].left) {
      // target is right of the source
      if (!lineInCoordinatesBlocked(translated, translated[this.source].left, translated[this.source].top, translated[this.source].left, translated[this.target].top) && !positionInCoordinatesBlocked(translated, translated[this.source].left, translated[this.target].top) && !lineInCoordinatesBlocked(translated, translated[this.source].left, translated[this.target].top, translated[this.target].left, translated[this.target].top)) {
        // vertical, horizontal
        connectOptions.anchors = [chooseAnchor(this.source, 'top', topAnchors, alreadyUsedAnchors), chooseAnchor(this.target, 'left', leftAnchors, alreadyUsedAnchors)]; //console.log("chose top left");
      } else {
        // horizontal, vertical
        connectOptions.anchors = [chooseAnchor(this.source, 'right', rightAnchors, alreadyUsedAnchors), chooseAnchor(this.target, 'bottom', bottomAnchors, alreadyUsedAnchors)];
        connectOptions.overlays[1][1] = readableVersionOfLabel(connectOptions.overlays[1][1], alreadyUsedAnchors[this.target].bottom); //console.log("chose right bottom");
      }
    } else {
      // target is above the source
      if (translated[this.target].top < translated[this.source].top - 1 && lineInCoordinatesBlocked(translated, translated[this.source].left, translated[this.source].top, translated[this.target].left, translated[this.target].top)) {
        // but it's far away and some tech/endpoint would block our path for a direct line
        connectOptions.anchors = [chooseAnchor(this.source, 'left', leftAnchors, alreadyUsedAnchors), chooseAnchor(this.target, 'left', leftAnchors, alreadyUsedAnchors)]; //console.log("chose left left");
        // NOTE: i didn't find a case where this occurred,
        // but it could be possible that 2 connections on the same column could overlap with this rule
        // in this case, "right,right" should be chosen
      } else {
        // the target is right above us. shoot it.
        connectOptions.anchors = [chooseAnchor(this.source, 'top', topAnchors, alreadyUsedAnchors), chooseAnchor(this.target, 'bottom', bottomAnchors, alreadyUsedAnchors)];
        connectOptions.overlays[1][1] = readableVersionOfLabel(connectOptions.overlays[1][1], alreadyUsedAnchors[this.target].bottom); //console.log("chose top bottom");
      }
    } // else: default.


    newTree.connect(connectOptions);
  });
}

function initTechtree(id) {
  (function ($) {
    drawArrows(id);
  })(jQuery);

  tabletToggleTechtreeInfos(id);
}
/**
 *
 * @param labelObject object
 * @param useCount int
 * @returns string
 */


function readableVersionOfLabel(labelObject, useCount) {
  labelObject.location = -0.05 * useCount + 0.85;
  var split = labelObject.label.indexOf('/');

  if (split) {//        label = label.substring(0,split) + '<br/>/<br/>' + label.substring(split + 1);
  }

  return labelObject;
}
/**
 * check single line of the matrix if a line could be drawn. does not check start or end of the line
 * @param coordinates array containing the positions of the endpoints
 * @param sourceLeft int x-coordinate of the source
 * @param sourceTop int y-coordinate of the source
 * @param targetLeft int x-coordinate of the target
 * @param targetTop int y-coordinate of the target
 * @return bool if the path is blocked by an element
 */


function lineInCoordinatesBlocked(coordinates, sourceLeft, sourceTop, targetLeft, targetTop) {
  if (sourceLeft == targetLeft) {
    // check column (target is above. every time!)
    for (var i in coordinates) {
      if (coordinates[i].left == sourceLeft && sourceTop > coordinates[i].top && targetTop < coordinates[i].top) {
        return true;
      }
    }
  } else if (sourceTop == targetTop && sourceLeft > targetLeft) {
    // check row to the left
    for (var j in coordinates) {
      if (coordinates[j].top == sourceTop && sourceLeft > coordinates[j].left && targetLeft < coordinates[j].left) {
        return true;
      }
    }
  } else if (sourceTop == targetTop && sourceLeft < targetLeft) {
    // check row to the right
    for (var k in coordinates) {
      if (coordinates[k].top == sourceTop && sourceLeft < coordinates[k].left && targetLeft > coordinates[k].left) {
        return true;
      }
    }
  }

  return false;
}
/**
 * check if a single spot in the coordinates array is blocked by an element. used for edges of the connection line
 * @param coordinates the coordinates matrix data
 * @param left x-coordinate to check
 * @param top y-coordinate to check
 * @returns {boolean}
 */


function positionInCoordinatesBlocked(coordinates, left, top) {
  for (var i in coordinates) {
    if (coordinates[i].left == left && coordinates[i].top == top) {
      return true;
    }
  }

  return false;
}
var javascriptAvailable = true;
var days = new Array('Mon', 'Tus', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun');
var months = new Array("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec");

function getFormatedDate(timestamp, format) {
  var currTime = new Date();
  currTime.setTime(timestamp);
  str = format;
  str = str.replace('[d]', dezInt(currTime.getDate(), 2));
  str = str.replace('[D]', days[currTime.getDay()]);
  str = str.replace('[m]', dezInt(currTime.getMonth() + 1, 2));
  str = str.replace('[M]', months[currTime.getMonth()]);
  str = str.replace('[j]', parseInt(currTime.getDate()));
  str = str.replace('[Y]', currTime.getFullYear());
  str = str.replace('[y]', currTime.getFullYear().toString().substr(2, 4));
  str = str.replace('[G]', currTime.getHours());
  str = str.replace('[H]', dezInt(currTime.getHours(), 2));
  str = str.replace('[i]', dezInt(currTime.getMinutes(), 2));
  str = str.replace('[s]', dezInt(currTime.getSeconds(), 2));
  return str;
}
/**
 * adds prefix digits to a number ('2'->'02')
 *
 * @param int   number
 * @param int   digits
 * @param str   prefix, default is '0'
 */


function dezInt(num, size, prefix) {
  prefix = prefix ? prefix : "0";
  var minus = num < 0 ? "-" : "",
      result = prefix == "0" ? minus : "";
  num = Math.abs(parseInt(num, 10));
  size -= ("" + num).length;

  for (var i = 1; i <= size; i++) {
    result += "" + prefix;
  }

  result += (prefix != "0" ? minus : "") + num;
  return result;
}

function getFormatedTime(time) {
  hours = Math.floor(time / 3600);
  timeleft = time % 3600;
  minutes = Math.floor(timeleft / 60);
  timeleft = timeleft % 60;
  seconds = timeleft;
  return dezInt(hours, 2) + ":" + dezInt(minutes, 2) + ":" + dezInt(seconds, 2);
}
function tsdpkt(f) {
  var vz = "";

  if (f < 0) {
    vz = "-";
  }

  f = Math.abs(f);
  var r = f % 1000;

  while (f >= 1000) {
    var k1 = "";

    if (f % 1000 < 100) {
      k1 = "0";
    }

    if (f % 1000 < 10) {
      k1 = "00";
    }

    if (f % 1000 == 0) {
      k1 = "00";
    }

    f = Math.abs((f - f % 1000) / 1000);
    r = f % 1000 + LocalizationStrings['thousandSeperator'] + k1 + r;
  }

  r = vz + r;
  return r;
}

function formatTime(seconds) {
  var hours = Math.floor(seconds / 3600);
  seconds -= hours * 3600;
  var minutes = Math.floor(seconds / 60);
  seconds -= minutes * 60;
  if (minutes < 10) minutes = "0" + minutes;
  if (seconds < 10) seconds = "0" + seconds;
  return hours + ":" + minutes + ":" + seconds;
}

function round(x, n) {
  if (n < 1 || n > 14) return false;
  var e = Math.pow(10, n);
  var k = (Math.round(x * e) / e).toString();
  if (k.indexOf('.') == -1) k += '.';
  k += e.toString().substring(1);
  return k.substring(0, k.indexOf('.') + n + 1);
}

function show_hide_menus(element) {
  if ($(element).is(':visible')) {
    $(element).hide();
  } else {
    $(element).show();
  }
}

function change_class(ele) {
  if (document.getElementById(ele).className == "closed") {
    document.getElementById(ele).className = "opened";
  } else {
    document.getElementById(ele).className = "closed";
  }
}

function show_hide_tbl(id) {
  var el = document.getElementById(id);

  try {
    if (el) el.style.display = el.style.display == "none" ? "table-row" : "none";
  } catch (e) {
    // Der IE bis V7 kann kein table-row, deshalb Fallback auf 'Block'
    el.style.display = "block";
  }
}

function cntchar(inputField, m) {
  var $inputField = $(inputField);

  if ($inputField.val().length > m) {
    $inputField.val($inputField.val().substr(0, m));
  }

  $inputField.parents("form").find(".cntChars").text($inputField.val().length);
}

function showGalaxy(galaxy, system, planet) {
  openParentLocation("index.php?page=ingame&component=galaxy&no_header=1&galaxy=" + galaxy + "&system=" + system + "&planet=" + planet);
}

function openParentLocation(url) {
  try {
    window.opener.document.location.href = url;
  } catch (error) {
    try {
      window.parent.document.location.href = url;
    } catch (error) {
      document.location.href = url;
    }
  }
}

function submitOnEnter(ev) {
  // Number 13 is the "Enter" key on the keyboard
  if (ev.key === 'Enter') {
    // Cancel the default action, if needed
    ev.preventDefault(); // Trigger the button element with a click

    trySubmit();
    return false;
  } else {
    return true;
  }
}

function setMaxIntInput(formElement, data) {
  for (var techID in data) {
    if (!$(formElement).find("#ship_" + techID).attr("disabled")) {
      $(formElement).find("#ship_" + techID).val(data[techID]);
      checkIntInput($(formElement).find("ship_" + techID), 0, data[techID]);
    }
  }
}

function clearInput(id) {
  $(id).val("");
}

function checkIntInput(id, minVal, maxVal) {
  var value = $(id).val();

  if (typeof value != "undefined" && value != "") {
    intVal = Math.abs(getValue(value));

    if (maxVal != null) {
      intVal = Math.min(intVal, maxVal);
    }

    $(id).val(intVal);
  }
}

function clampInt(val, minVal, maxVal, allowEmpty) {
  if (allowEmpty && (val === '' || val === 0)) {
    return '';
  }

  let intVal = parseInt(val);

  if (isNaN(intVal)) {
    return minVal;
  }

  intVal = Math.min(intVal, maxVal);
  intVal = Math.max(intVal, minVal);
  return intVal;
}

function clampFloat(val, minVal, maxVal) {
  let floatVal = parseFloat(val);

  if (isNaN(floatVal)) {
    return minVal;
  }

  floatVal = Math.max(floatVal, minVal);
  floatVal = Math.min(floatVal, maxVal);
  return floatVal;
}

function handlerToSubmitAjaxForm(form) {
  var submitFunction = "submit_" + String(form);

  if ($.isFunction(window[submitFunction])) {
    window[submitFunction]();
  }

  return false;
}

function ajaxCall(url, targetSelector, callback) {
  if (typeof targetSelector === 'string') {
    let $targetHTMLObj = $(targetSelector);
    $targetHTMLObj.find('select').ogameDropDown('destroy');
    $targetHTMLObj.html('<p class=\"ajaxLoad\"></p>');
  }

  $.post(url, function (data) {
    if (typeof targetSelector === 'string') {
      let $targetHTMLObj = $(targetSelector);
      $targetHTMLObj.html(data);
      $targetHTMLObj.find('select').ogameDropDown();
    }

    if (typeof callback === 'function') {
      callback();
    }
  });
}

function ajaxSubmit(url, formDataOrSelector, targetSelector, callback) {
  if (typeof targetSelector === 'string') {
    let $targetHTMLObj = $(targetSelector);
    $targetHTMLObj.find('select').ogameDropDown('destroy');
    $targetHTMLObj.html("<p class=\"ajaxLoad\"><?=LOCA_ALL_AJAXLOAD ?></p>");
  }

  let formData = typeof formDataOrSelector === 'string' ? $(formDataOrSelector).serialize() : formDataOrSelector;
  $.post(url, formData, function (data) {
    if (typeof targetSelector === 'string') {
      let $targetHTMLObj = $(targetSelector);
      $targetHTMLObj.html(data);
      $targetHTMLObj.find('select').ogameDropDown();
    }

    if (typeof callback === 'function') {
      callback();
    }
  });
}

Number.prototype.isBetween = function (min, max) {
  return this >= min && this <= max;
};

function getValue(value) {
  result = parseInt(value.toString().replace(/^k$/, "1000").replace(/k/, "000").replace(/^0+/, "").replace(/[^0-9]/g, ""));
  return isNaN(result) ? 0 : result;
}
/**
 * loads an external js script and calls a function when it is loaded
 * @param url url of the script to load
 * @param callback function to call when script is loaded
 * @url http://www.nczonline.net/blog/2009/07/28/the-best-way-to-load-external-javascript/
 */


function loadScript(url, callback) {
  if (typeof loadScript.loadedScripts == 'undefined') {
    loadScript.loadedScripts = {};
  }

  if (typeof loadScript.loadedScripts[url] == 'undefined') {
    loadScript.loadedScripts[url] = true;
    var script = document.createElement("script");
    script.type = "text/javascript";

    if (script.readyState) {
      //IE
      script.onreadystatechange = function () {
        if (script.readyState == "loaded" || script.readyState == "complete") {
          script.onreadystatechange = null;
          callback();
        }
      };
    } else {
      //Others
      script.onload = function () {
        callback();
      };
    }

    script.src = url;
    var head = document.getElementsByTagName("head")[0];
    head.appendChild(script);
  } else {
    callback();
  }
}

function formatNumber(object, value) {
  var formattedValue = number_format(getValue(value), 0, LocalizationStrings['decimalPoint'], LocalizationStrings['thousandSeparator']);
  var $thisObj = $(object);
  var range = $thisObj.getSelection();

  if ($thisObj.val().length !== formattedValue.length) {
    range.start = Math.max(0, range.start + formattedValue.length - $thisObj.val().length);
    range.end = Math.max(0, range.end + formattedValue.length - $thisObj.val().length);
  }

  $thisObj.val(formattedValue);

  if ($thisObj.is(":focus")) {
    $thisObj.setSelection(range);
  }
}

function initToggleHeader(name) {
  $('a.toggleHeader[data-name=' + name + ']').click(function (e) {
    e.preventDefault();
    let toggleState = $(e.currentTarget).closest('.planet-header').hasClass('shortHeader');
    $(e.currentTarget).closest('.planet-header').toggleClass('shortHeader');
    $(".c-left").toggleClass('shortCorner');
    $(".c-right").toggleClass('shortCorner');
    changeSetting('headerImage', name + '|' + toggleState);
  });
}

function initFormValidation() {
  $("form.formValidation").validationEngine({
    validationEventTrigger: "keyup blur",
    promptPosition: "centerRight"
  });
}

Function.prototype.clone = function () {
  var fct = this;

  var clone = function () {
    return fct.apply(this, arguments);
  };

  clone.prototype = fct.prototype;

  for (var property in fct) {
    if (fct.hasOwnProperty(property) && property !== 'prototype') {
      clone[property] = fct[property];
    }
  }

  return clone;
};

function hideTipsOnTabChange() {
  $("select").ogameDropDown('hide');
  Tipped.hideAll();
}

jQuery.fn.slideFadeToggle = function (speed, easing, callback) {
  return this.animate({
    opacity: 'toggle',
    width: 'toggle'
  }, speed, easing, callback);
};

function focusOnTabChange(element, focusOnReady) {
  var focusFunction = function () {
    $(element).focus();
  };

  if (focusOnReady == true) {
    $(document).ready(focusFunction);
  }

  $(window).unbind('blur').bind('blur', focusFunction);
}
/**
 * @see http://obvcode.blogspot.de/2007/11/easiest-way-to-check-ie-version-with.html
 * @return {Number}
 */


function getIEVersion() {
  var version = 999;
  if (navigator.appVersion.indexOf("MSIE") != -1) version = parseFloat(navigator.appVersion.split("MSIE")[1]);
  return version;
}

ogame.tools = {
  /**
   * adds a hover effect to given selectors
   * @param {String} selector - selector with elements to apply the style to
   * @returns {undefined}
   */
  addHover: function (selector) {
    $(selector).on({
      mouseenter: function () {
        $(this).addClass("over");
      },
      mouseleave: function () {
        $(this).removeClass("over");
      }
    });
  },

  /**
   * shows a "to top" button on long pages
   *
   * @returns {undefined}
   */
  scrollToTop: function () {
    var $scrollToTop = $('.scroll_to_top');
    $(window).on('scroll.scrollToTop', function () {
      $('.scroll_to_top').css({
        visibility: $scrollToTop.offset().top > window.innerHeight ? 'visible' : 'hidden'
      }, 600);
    });
    $scrollToTop.on('click.scrollToTop', function () {
      $('body, html').animate({
        scrollTop: 0
      }, 600);
    });
  }
};
/**
 * Common UI Components, that are reused across the Game
 *
 **/

/**
 * Fill level bar display for storage rooms and cargo space
 *
 * @param barContainerClass
 * @param barClass
 * @param premiumBarClass - if additional premium bar is wanted
 *
 **/

function refreshBars(barContainerClass, barClass, premiumBarClass) {
  var $barContainer = $('.' + barContainerClass);
  $barContainer.each(function () {
    var $this = $(this),
        amountFull = $this.data('currentAmount'),
        capacity = $this.data('capacity'),
        wPercent = amountFull / capacity * 100,
        $bar = $this.find('.' + barClass);

    if (wPercent > 100) {
      wPercent = 100;
    } else if (wPercent == 0) {
      wPercent = 0;
    } else if (wPercent < 1.3) {
      wPercent = 1.3;
    }

    $bar.css('width', wPercent + '%');

    if (wPercent < 90) {
      $bar.attr('class', barClass + ' filllevel_undermark');
    } else if (wPercent > 90 && wPercent < 100) {
      $bar.attr('class', barClass + ' filllevel_middlemark');
    } else {
      $bar.attr('class', barClass + ' filllevel_overmark');
    }

    if (premiumBarClass) {
      var $premiumBar = $this.find('.' + premiumBarClass),
          wPercentPremium = $premiumBar.data('premiumPercent');

      if (wPercent + wPercentPremium > 100) {
        wPercentPremium = 100 - wPercent;
      }

      $premiumBar.css('width', wPercentPremium + '%');
    }
  });
}
function initTooltipSkins() {
  jQuery.extend(Tipped.Skins, {
    'cloud': {
      offset: {
        x: 0,
        y: -1,
        mouse: {
          x: -12,
          y: -12
        } // only defined in the base class

      },
      stem: {
        height: 6,
        width: 11,
        offset: {
          x: 5,
          y: 5
        },
        spacing: 0
      }
    },
    'premium': {
      offset: {
        x: 0,
        y: -1,
        mouse: {
          x: -12,
          y: -12
        } // only defined in the base class

      },
      stem: {
        height: 6,
        width: 11,
        offset: {
          x: 5,
          y: 5
        },
        spacing: 0
      }
    }
  });
}
function changeTooltip(object, title) {
  var targetElement = $(object);

  if (targetElement.length == 0) {
    return;
  }

  removeTooltip(targetElement);
  $(targetElement).attr('title', title);
  initTooltips(targetElement);
}

function removeTooltip(object) {
  var targetElement = $(object);
  targetElement.each(function () {
    if ($(this).data('tooltipLoaded')) {
      $(this).data('tooltipLoaded', false);
      Tipped.remove($(this));
    }
  });
}

function getTooltipOptions(element) {
  var $thisObj = $(element);
  var options = {
    skin: 'cloud',
    size: 'x-small',
    maxWidth: 400,
    closeButton: false,
    hideOn: {
      element: 'mouseleave',
      tooltip: 'mouseleave'
    },
    hideOnClickOutside: true
  }; // we need longer tooltips on galaxy

  if (window.location.href.indexOf('galaxy') !== -1) {
    options.maxWidth = 400;
  }

  if ($thisObj.hasClass('tooltipPremium')) {
    options.skin = 'premium';
  }

  if ($thisObj.hasClass('tooltipLeft')) {
    options.position = {
      target: 'leftmiddle',
      tooltip: 'righttop'
    };
  } else if ($thisObj.hasClass('tooltipRight')) {
    options.position = {
      target: 'rightmiddle',
      tooltip: 'lefttop'
    };
  } else if ($thisObj.hasClass('tooltipBottom')) {
    options.position = {
      target: 'bottommiddle',
      tooltip: 'topmiddle'
    };
  }

  if ($thisObj.data('tooltip-width')) {
    options.maxWidth = $thisObj.data('tooltip-width');
  }

  if ($thisObj.hasClass('hideTooltipOnMouseenter')) {
    options.hideOn.tooltip = 'mouseenter';
  }

  if (isMobile || $thisObj.hasClass('tooltipClose')) {
    options.hideOthers = true; // options.hideOn = false;
  }

  if ($thisObj.hasClass('hideOthers')) {
    options.hideOthers = true;
  }

  options.afterUpdate = function (content, element) {
    if (isMobile && $thisObj.data('tooltip-button')) {
      var $buttonDiv = $(document.createElement('div')).addClass('tooltipButton');
      $(document.createElement('a')).addClass('btn_blue').attr('href', 'javascript:void(0);').html($thisObj.data('tooltip-button')).bind('click', function (e) {
        if ($(element).not('a') && $(element).find('a').length) {
          element = $(element).find('a')[0];
        }

        var event = document.createEvent("MouseEvents");
        event.initMouseEvent("click", true, true, window, 1, 0, 0, 0, 0, false, false, false, false, 0, null);
        element.dispatchEvent(event);
      }).appendTo($buttonDiv);
      $(content).append($buttonDiv);
    }

    if (isMobile || $thisObj.hasClass('tooltipClose')) {
      var $closeBtn = $(document.createElement('div')).addClass('close-tooltip');
      $(content).prepend($closeBtn);
    }

    Tipped.refresh(element);
  };

  return options;
}

function getTooltipSelector(selector) {
  var standardSelector = ".tooltipPremium, .tooltip, .tooltipRight, .tooltipLeft, .tooltipBottom, .tooltipClose, .tooltipHTML, .tooltipRel, .tooltipAJAX, .tooltipCustom, .markItUpButton a";

  if (typeof selector == 'undefined') {
    selector = standardSelector;
  } else if (typeof selector == 'string' && !selector.match(/\.tooltip/)) {
    var standardSelectorArray = standardSelector.split(', ');
    var previousSelector = selector;

    for (i in standardSelectorArray) {
      selector += ", " + previousSelector + " " + standardSelectorArray[i];
    }
  }

  return selector;
}

function sanitizeTooltip(text) {
  return text.replace(/<\s*script/g, '&lt;script');
}

function initTooltips(selector) {
  initTooltipSkins();
  selector = getTooltipSelector(selector);

  function generateHTML(text) {
    var element = {};
    var splitted = text.split("|");
    var title = $(document.createElement('h1')).html(splitted[0]);
    var splitLine = $(document.createElement('div')).addClass('splitLine');

    if (typeof splitted[2] !== "undefined" && typeof splitted[3] !== "undefined") {
      var title2 = $(document.createElement('h1')).html(splitted[2]);
      var splitLine2 = $(document.createElement('div')).addClass('splitLine');
      element = $(document.createElement('div')).css('display', 'none').addClass('htmlTooltip').append(title).append(splitLine).append(splitted[1] + "</br>").append(title2).append(splitLine2).append(splitted[3]);
    } else {
      element = $(document.createElement('div')).css('display', 'none').addClass('htmlTooltip').append(title).append(splitLine).append(splitted[1]);
    }

    return element[0];
  }

  removeTooltip(selector);

  function addTooltip(object) {
    var $thisObj = $(object);

    if ($thisObj.data('tooltipLoaded')) {
      return;
    }

    $thisObj.data('tooltipLoaded', true);

    if (isMobile && $thisObj.hasClass('js_hideTipOnMobile')) {
      $thisObj.attr('title', '');
      return;
    }

    var options = getTooltipOptions($thisObj);

    if ($thisObj.hasClass('tooltipCustom')) {
      if (options.hideOn != false) {
        options.hideOn = {
          element: 'mouseleave',
          tooltip: 'mouseleave'
        };
      }

      options.afterUpdate = function (content) {
        $(content).find('.tooltipCustom').each(function (i, element) {
          var options = getTooltipOptions($thisObj);

          if ($(this).hasClass('tooltipHTML')) {
            options.inline = true;
            options.hideOthers = false;
            Tipped.create(this, generateHTML(sanitizeTooltip($(this).attr('title'))), options);
          } else {
            options.hideOthers = false;
            Tipped.create(this, sanitizeTooltip($(this).attr('title')), options);
          }
        });
      };
    }

    if ($thisObj.hasClass('tooltipHTML')) {
      if (typeof $thisObj.attr('title') == 'undefined' || $thisObj.attr('title').trim().length == 0) {
        return;
      }

      Tipped.create($thisObj[0], generateHTML(sanitizeTooltip($thisObj.attr('title'))), options);
      return;
    }

    if ($thisObj.hasClass('tooltipRel')) {
      options.inline = $thisObj.attr('rel');

      if ($thisObj.hasClass('tooltipPersistent')) {
        options.detach = false;
      }

      Tipped.create($thisObj[0], undefined, options);
      return;
    }

    if ($thisObj.hasClass('tooltipAJAX')) {
      $.get($thisObj.attr('rel'), {}, function (data) {
        Tipped.create($thisObj[0], data, options);
      });
      return;
    }

    if (typeof $thisObj.attr('title') == 'undefined' || $thisObj.attr('title').trim().length == 0) {
      return;
    }

    Tipped.create($thisObj[0], sanitizeTooltip($thisObj.attr('title')), options);
  }

  $(document).undelegate(selector, 'touchstart.tooltipClick').delegate(selector, 'touchstart.tooltipClick', function (e) {
    if (Tipped.visible(this)) {
      var event = document.createEvent("MouseEvents");
      event.initMouseEvent("click", true, true, window, 1, 0, 0, 0, 0, false, false, false, false, 0, null);
      this.dispatchEvent(event);
      e.preventDefault();
      e.stopPropagation();
    }
  }); // this fixes tooltips not being closed

  $(document).undelegate('.t_Tooltip.t_visible .close-tooltip', 'click').delegate('.t_Tooltip.t_visible .close-tooltip', 'click', function (e) {
    Tipped.hide($(e.currentTarget).closest('.t_Tooltip')[0]);
  });

  if (typeof selector == "string") {
    $(document).undelegate(selector, 'mouseenter.tooltipLoad touchstart.tooltipLoad').delegate(selector, 'mouseenter.tooltipLoad touchstart.tooltipLoad', function (e) {
      addTooltip(this);
      Tipped.show(this);
    });
  } else {
    $(selector).each(function () {
      addTooltip(this);
    });
  }
}

$(function () {
  initTooltips();
});
function initTrader() {
  var disableAnimationOnce = false;
  var url = $.deparam.fragment();

  if (typeof url["animation"] != 'undefined') {
    if (url["animation"] == 'false') {
      disableAnimationOnce = true;
    }
  } // toggle overview-panel


  var toggleDisplay = {
    $link: null,
    $panel: null,
    close: function () {
      this.$panel.hide();
    },
    setPanel: function () {
      this.$panel = $('#js_togglePanel' + traderObj.traderId.replace(/#div_trader/, ''));
    },
    init: function (traderId) {
      var $wrapper = $(traderId + ' .selectWrapper');
      traderId = traderId.replace(/#div_trader/, '');
      if (!$wrapper) return;
      this.$link = $('#js_toggleLink' + traderId);
      this.$panel = $('#js_togglePanel' + traderId);
      var $panel = this.$panel; // hide panel initially

      $panel.hide(); // bind toggle fn

      this.$link.unbind('click.selectLink').bind('click.selectLink', function (e) {
        traderId = traderObj.traderId.replace(/#div_trader/, '');

        if ($(this).hasClass('honor')) {
          return false;
        }

        if ($panel.find('ul.active').has('li').length) {
          $panel.toggle();
        }

        return false;
      }); //event for planet or moon select

      $('.selectWrapper .source').unbind('click.selectPlanetOrMoon').bind('click.selectPlanetOrMoon', function (e) {
        toggleDisplay.selectPlanetOrMoon(this);
      }); // event for list item, use live instead of bind, because list elements can be created dynamically

      $('#' + $panel.attr('id')).find('li').unbind('click.selectSource').bind('click.selectSource', function (e) {
        traderObj.selectSource(this);
        return false;
      }); // click outside of panel

      toggleDisplay.outerClick($wrapper, $panel); // delayed panel self-closing

      var timeoutID = null,
          delay = 8000;
      $wrapper.unbind('mouseout.closeSelect').bind('mouseout.closeSelect', function (e) {
        // custom mouseleave event
        e = e || window.event;
        var reltg = e.relatedTarget ? e.relatedTarget : e.toElement;

        if (reltg == $wrapper || toggleDisplay.isChildOf(reltg, $wrapper)) {
          return;
        } // hide after timeout


        timeoutID = setTimeout(function () {
          $panel.hide();
        }, delay);
      }).unbind('mouseover.clearTimeout').bind('mouseover.clearTimeout', function () {
        if (timeoutID) {
          clearTimeout(timeoutID);
        }
      });
    },
    // helper function for custom mouseleave
    //TODO: is this still needed?
    isChildOf: function (child, parent) {
      parent = parent[0];

      while (child && child != parent) {
        child = child.parentNode;
      }

      return child == parent;
    },
    outerClick: function ($wrapper, $panel) {
      $('body').bind('click.outerClick', function (e) {
        if (!e) {
          e = window.event;
        }

        if (!($(e.target).closest('.selectWrapper') == $wrapper) && $panel.is(':visible') != false) {
          $panel.toggle();
        }
      });
    },
    selectPlanetOrMoon: function (elem) {
      var planet;

      if ($(elem).hasClass("selected")) {
        return false;
      }

      var selectedContent = '',
          selectedPlanetId = null;

      if ($(elem).hasClass('js_honor')) {
        $(traderObj.traderId + ' .selectWrapper .source').removeClass('selected');
        $(traderObj.traderId + ' .js_honor').addClass('selected');
        $(traderObj.traderId + ' .toggleLink').addClass('honor');
        var selectedContent = '<img height="18" src="//gf1.geo.gfsrv.net/cdnfc/f35675179214f8f6f0f8d75740d7db.png" alt="' + loca.honorPoints + '"/>' + '<span class="option_source">' + loca.honorPoints + '</span>';
        $(traderObj.traderId + ' .js_valSourcePlanet').html(selectedContent);
        $(traderObj.traderId + ' .normalResource').hide();
        $(traderObj.traderId + ' .honorResource').show();
        return false;
      }

      var $togglePanel = $(traderObj.traderId + ' .togglePanel');
      var className = 'planet';

      if ($(elem).hasClass('js_moon')) {
        var moonCounter = 0;
        className = 'moon';

        for (planet in traderObj.planets) {
          if (traderObj.planets[planet].isMoon) moonCounter++;
        }

        if (moonCounter == 0) return false;
      }

      var currentPlanet = traderObj.planets[traderObj.current.planet];
      $togglePanel.find('ul').hide().removeClass('active');
      $togglePanel.find('ul.' + className).show().addClass('active');
      $(traderObj.traderId + ' .toggleLink').removeClass('honor');
      $(traderObj.traderId + ' .selectWrapper .source').removeClass('selected');
      $(traderObj.traderId + ' .js_' + className).addClass('selected');

      if ($(elem).hasClass('js_moon') ? currentPlanet.isMoon : !currentPlanet.isMoon) {
        selectedPlanetId = traderObj.current.planet;
      } else if (currentPlanet.otherPlanetId != null && typeof traderObj.planets[currentPlanet.otherPlanetId] != "undefined") {
        selectedPlanetId = currentPlanet.otherPlanetId;
      } else {
        selectedPlanetId = $togglePanel.find('ul.' + className + ' li:first').attr('id');
      }

      $(traderObj.traderId + ' .normalResource').show();
      $(traderObj.traderId + ' .honorResource').hide();
      $togglePanel.find('ul li#' + selectedPlanetId).click();
      return false;
    },
    setToggleLink: function (link) {
      // we need to redefine the traderId here so we act on the right $link and $panel:
      var traderId = traderObj.traderId.replace(/#div_trader/, ''),
          $span = $(link).find('span'),
          planetName = traderObj.planets[$(link).attr('id')].name;

      if (planetName != $span.text()) {
        $span.attr('title', planetName.replace(/\|/g, '&#124;'));
      }

      this.$link = $('#js_toggleLink' + traderId);
      this.$link.html($(link).html());
    }
  };
  /*
   * Object for Auctioneer and ImportExport Slider
   */

  traderObj = {
    traderBGPos: {
      '#div_traderResources': '0px 0px',
      '#div_traderAuctioneer': '-546px 0px',
      '#div_traderScrap': '0px -220px',
      '#div_traderImportExport': '-546px -220px'
    },
    timer: 500,
    // Wenn direkt auf Unterseite -> timer = 0
    planets: {},
    honorOutput: 0,
    price: 0,
    deficit: 0,
    priceImportExport: 0,
    sumResources: 0,
    traderId: null,
    resources: ['Metal', 'Crystal', 'Deuterium'],
    current: {
      planet: currentPlanetId,
      resource: '',
      sliderValue: ''
    },
    barXPos: -180,
    // start Position
    barYPos: 0,
    percentPaid: 0,
    switchingTrader: false,
    checkOverbidden: function () {
      if (playerBid == false || playerBid >= getValue($('.detail_value.currentSum').html())) {
        $('.overbid_text').hide();
      } else {
        $('.overbid_text').show();
      }
    },

    /*
     * This function updates only the current slider.
     * It gets called whenever a slider was changed so we will
     * calculate the total sum here:
     */
    refresh: function () {
      var traderId = traderObj.traderId; // Check that we're in the right context:

      if ('#' + $(this).closest('.div_trader').attr('id') !== traderId) return; // Get the css-class that identifies the current slider:

      var myClass = $(this).attr('class');
      var re = new RegExp(/\b(js_slider\w*)\b/);
      myClass = re.test(myClass) ? RegExp.$1 : false;
      if (!myClass) return; // Update current values:

      traderObj.current.sliderValue = $(this).slider("value");
      traderObj.current.resource = myClass.replace('js_slider', '').toLowerCase();

      if (traderObj.current.resource == 'honor') {
        traderObj.honorOutput = traderObj.current.sliderValue;
      } else {
        traderObj.planets[traderObj.current.planet].output[traderObj.current.resource] = traderObj.current.sliderValue;
      }

      formatNumber($(traderId + ' .js_amount.js_' + traderObj.current.resource), traderObj.current.sliderValue);

      if (traderId == '#div_traderAuctioneer') {
        traderObj.price = getValue($(traderId + ' .js_price').html()); //traderObj.deficit = getValue($( traderId + ' .js_deficit' ).html());

        traderObj.sumAuctioneer();
        traderObj.checkOverbidden();
      } else if (traderId == '#div_traderImportExport') {
        traderObj.sumImportExport();
      }
    },
    // 	refresh: function() end

    /*
     * Whenever the view changes to another trader, all inputFields, Sliders, outputvalues
     * and selected planed have to be resetted:
     */
    resetValues: function (traderId, resetCurrentPlanet) {
      traderId = traderId || traderObj.traderId;
      resetCurrentPlanet = resetCurrentPlanet || false;
      /* for( planet in traderObj.planets ) funktioniert im IE7/8 nicht!! */
      // Reset output values:

      for (var planet in traderObj.planets) {
        for (var resource in traderObj.planets[planet].output) {
          traderObj.planets[planet].output[resource] = 0;
        }
      }

      traderObj.honorOutput = 0; // Reset input fields:

      $('.js_amount').val(0); // reset sums

      if (traderObj.traderId == '#div_traderAuctioneer') {
        traderObj.sumAuctioneer();
      } else if (traderObj.traderId == '#div_traderImportExport') {
        traderObj.sumImportExport();
      } // Reset display of selected planet to currentPlanetId


      if (resetCurrentPlanet) {
        traderId = traderId.replace(/#div_trader/, '');
        $('#js_togglePanel' + traderId).find("li#" + currentPlanetId).click();
      }

      toggleDisplay.close();
    },

    /*
     * Update the shown max-amount of planet resource
     */
    resetMaxAmount: function (planetResources, honor) {
      var traderId = traderObj.traderId;
      var resources = traderObj.resources;

      for (var planetId in traderObj.planets) {
        for (var i = 0; i < resources.length; i++) {
          var resToLower = resources[i].toLowerCase();
          traderObj.planets[planetId].input[resToLower] = planetResources[planetId][resToLower];
        }
      }

      for (var j = 0; j < resources.length; j++) {
        resToLower = resources[j].toLowerCase();
        var planetMax = traderObj.planets[traderObj.current.planet].input[resToLower];
        $(traderId + ' .max_planet_' + resToLower).html(number_format(planetMax, 0));
      }

      honorScore = honor;
      $(traderId + ' .max_planet_honor').html(number_format(Math.max(0, honor), 0));
      toggleDisplay.close();
    },

    /*
     * Update all fields with selected source:
     */
    selectSource: function (selectedSource) {
      // save selected source:
      traderObj.current.planet = $(selectedSource).attr('id'); //set first source to selected source

      toggleDisplay.close();
      toggleDisplay.setToggleLink($(selectedSource));
      var traderId = traderObj.traderId;
      var resources = traderObj.resources;
      $.ajax({
        url: urlRefreshPlanet,
        type: 'POST',
        data: {
          planetId: traderObj.current.planet,
          _token: token,
          ajax: 1
        },
        dataType: 'json',
        success: function (data) {
          if (data.status === 'success') {
            token = data.newAjaxToken; // update maximum and current values of all sliders and input fields:

            for (var i = 0; i < resources.length; i++) {
              var resToLower = resources[i].toLowerCase();
              var planetMax = data.refreshPlanet.input[resToLower];
              var currMax = planetMax;

              if (traderId == '#div_traderImportExport') {
                var outputMax = traderObj.priceImportExport / multiplier[resToLower] - traderObj.sumResources + data.refreshPlanet.output[resToLower];
                var currMax = Math.min(planetMax, outputMax);
              }

              $(traderId + ' .max_planet_' + resToLower).html(number_format(currMax, 0));
              $(traderId + ' .js_amount.js_' + resToLower).val(number_format(data.refreshPlanet.output[resToLower], 0));
            }
          } else {
            for (var i = 0; i < resources.length; i++) {
              var resToLower = resources[i].toLowerCase();
              $(traderId + ' .max_planet_' + resToLower).html(number_format(0, 0));
              $(traderId + ' .js_amount.js_' + resToLower).val(number_format(0, 0));
            }

            fadeBox(loca['error'] + ': ' + data.errors[0].message, true);
          }
        },
        error: function (data) {
          fadeBox(loca['error'] + ': ' + loca['ajaxError'], true);
        }
      });
    },

    /*
     * Overview Image Animation
     */
    selectTrader: function (myTrader, timer, tab) {
      timer = timer || traderObj.timer;
      $.bbq.pushState({
        'page': myTrader,
        'animation': 'false'
      });
      $(".planetlink, .moonlink").fragment({
        'page': myTrader,
        'animation': 'false'
      });
      traderObj.traderId = '#div_' + myTrader;
      var traderId = traderObj.traderId,
          $backToOverview = $('.back_to_overview');

      var showTrader = function () {
        if (traderId == '#div_traderAuctioneer' || traderId == '#div_traderImportExport') {
          traderObj.resetValues(null, true);
        }

        var changeTraderFunction = function () {
          $('#traderOverview').find('.c-left, .c-right').addClass('c-small');
          $backToOverview.show();

          if (traderId == '#div_traderAuctioneer' || traderId == '#div_traderImportExport') {
            $backToOverview.addClass('left');
            $backToOverview.removeClass('right');
          } else if (traderId == '#div_traderResources' || traderId == '#div_traderScrap') {
            $backToOverview.addClass('right');
            $backToOverview.removeClass('left');
          }

          $('#planet #header_text h2').html(loca[myTrader]).parent().show();
        };

        if (animation && !disableAnimationOnce) {
          $('#traderOverview').find('.c-left, .c-right').hide();
          $('#planet').animate({
            backgroundPosition: traderObj.traderBGPos[traderId],
            height: '250px'
          }, timer, function () {
            $('#planet').addClass('detail');
            $('#traderOverview').find('.c-left, .c-right').show();
            changeTraderFunction();

            if (traderId == '#div_traderResources') {
              showTradeNowButton();
            }
          });
        } else {
          disableAnimationOnce = false;
          $('#planet').css('background-position', traderObj.traderBGPos[traderId]).css('height', '250px');
          changeTraderFunction();

          if (traderId == '#div_traderResources') {
            showTradeNowButton();
          }
        }

        toggleDisplay.setPanel();
        $('#planet').addClass('detail');
        $('.js_trader').hide();
        $(traderId).show();

        if (traderId == '#div_traderResources' && typeof tab != 'undefined') {
          $(traderId + ' .ui-tabs').tabs('option', 'active', tab);
        }

        traderObj.switchingTrader = false;
      };

      if ($(traderObj.traderId).length == 0) {
        var traderString = myTrader.toLowerCase().replace(/^trader/, '');
        let traderUrl = traderUrls[traderString];
        $.ajax({
          url: traderUrl,
          type: 'POST',
          data: {
            show: traderString,
            ajax: 1
          },
          beforeSend: function () {
            $('#loadingOverlay').addClass(traderString).show();
          },
          success: function (data) {
            $("#inhalt").append(data);
            $('#loadingOverlay').hide().removeClass(traderString);
            showTrader();
          },
          error: function () {
            fadeBox(loca['error'], true);
            $('#loadingOverlay').hide().removeClass(traderString);
          }
        });
      } else {
        showTrader();
      }
    },
    submitAuction: function () {
      var traderId = traderObj.traderId;
      var sum = getValue($(traderId + ' .js_auctioneerSum').html());

      if (!$(traderId + ' .right_box .pay').hasClass('disabled') && traderObj.price > 0 && traderObj.deficit <= 0) {
        $(traderId + ' .right_box .pay').addClass('disabled');
        var bidArray = {
          planets: {},
          honor: traderObj.honorOutput
        };

        for (var planetId in traderObj.planets) {
          bidArray.planets[planetId] = traderObj.planets[planetId].output;
        }

        $.ajax({
          url: auctionUrl,
          type: 'POST',
          data: {
            bid: bidArray,
            _token: token,
            ajax: 1
          },
          dataType: "json",
          success: function (data) {
            token = data.newAjaxToken;
            fadeBox(data.message, data.error);

            if (!data.error) {
              traderObj.resetValues(traderId, false);
              traderObj.resetMaxAmount(data.planetResources, data.honor);
              traderObj.reloadResources();
            }
          },
          error: function () {
            fadeBox(loca['error'], true);
          }
        });
      }

      return false;
    },
    submitImportExport: function () {
      if (!$(traderObj.traderId + ' .right_box .pay').hasClass('disabled')) {
        $(traderObj.traderId + ' .right_box .pay').addClass('disabled');
        var bidArray = {
          planets: {},
          honor: traderObj.honorOutput
        };

        for (planetId in traderObj.planets) {
          bidArray.planets[planetId] = traderObj.planets[planetId].output;
        }

        $.ajax({
          url: importUrlTrade,
          type: 'POST',
          data: {
            action: "trade",
            bid: bidArray,
            _token: token,
            ajax: 1
          },
          dataType: "json",
          success: function (data) {
            token = data.newAjaxToken;
            fadeBox(data.message, data.error);

            if (!data.error) {
              for (planetId in traderObj.planets) {
                traderObj.planets[planetId].output = {
                  metal: 0,
                  crystal: 0,
                  deuterium: 0
                };
              }

              $(traderObj.traderId + ' .bargain_overlay').show();
              $(traderObj.traderId + ' .payment').hide();
              $(traderObj.traderId + ' .image_140px a').addClass("slideIn");
              traderObj.reloadResources();
              traderObj.updateImportItem(data.item);
              traderObj.refresh();
            }
          },
          error: function () {
            fadeBox(loca['error'], true);
          }
        });
      }

      return false;
    },
    reloadResources: function (callback) {
      getAjaxResourcebox(callback);
    },
    changeImportItem: function () {
      if ($(traderObj.traderId + ' .import_bargain.change').hasClass('disabled')) {
        if (darkMatter < importChangeCost) {
          errorBoxDecision(LocalizationStrings.error, loca.errorNotEnoughDM, LocalizationStrings.yes, LocalizationStrings.no, redirectBuyPremium);
        }
      } else {
        $(traderObj.traderId + ' .import_bargain.change').addClass('disabled');
        $.ajax({
          url: importUrlBargain,
          type: 'POST',
          data: {
            action: "bargain",
            _token: token,
            ajax: 1
          },
          dataType: "json",
          success: function (data) {
            token = data.newAjaxToken;
            fadeBox(data.message, data.error);

            if (!data.error) {
              traderObj.updateImportItem(data.item);
              traderObj.reloadResources(function () {
                if (data.item.offersLeft > 0 && darkMatter >= importChangeCost) {
                  $(traderObj.traderId + ' .import_bargain.change').removeClass('disabled');
                } else {
                  $(traderObj.traderId + ' .import_bargain.change').addClass('disabled');
                }
              });
              traderObj.refresh();
            }
          },
          error: function () {
            fadeBox(loca['error'], true);
          }
        });
      }

      return false;
    },
    updateImportItem: function (itemData) {
      $(traderObj.traderId + ' .got_item_text').html(itemData.itemText);
      $(traderObj.traderId + ' .bargain_text').html(itemData.bargainText);
      $(traderObj.traderId + ' .bargain_cost').html(itemData.bargainCostText);
      importChangeCost = itemData.bargainCost;
      $(traderObj.traderId + ' .image_140px img').attr("src", "/cdn/img/item-images/" + itemData.image + "-140x.png");
      removeTooltip($(traderObj.traderId + ' .image_140px a'));
      $(traderObj.traderId + ' .image_140px a').attr("ref", itemData.uuid).removeClass("tooltip").addClass("tooltipHTML").attr("title", itemData.tooltip);
      initTooltips($(traderObj.traderId + ' .image_140px a'));
      $(traderObj.traderId + ' .detail_button .amount').text(itemData.amount);
    },
    takeImportItem: function () {
      if (!$(traderObj.traderId + ' .import_bargain.take').hasClass('disabled')) {
        $(traderObj.traderId + ' .import_bargain.change').addClass('disabled');
        $(traderObj.traderId + ' .import_bargain.take').addClass('disabled');
        $(traderObj.traderId + ' .import_bargain.change').addClass('hidden');
        $(traderObj.traderId + ' .import_bargain.take').addClass('hidden');
        $(traderObj.traderId + ' .bargain_cost').addClass('hidden');
        $.ajax({
          url: importUrlTakeItem,
          type: 'POST',
          data: {
            action: "takeItem",
            _token: token,
            ajax: 1
          },
          dataType: "json",
          success: function (data) {
            token = data.newAjaxToken;
            fadeBox(data.message, data.error);

            if (!data.error) {
              var uuid = data.item.ref;
              changeTooltip($(".detail_button[ref='" + uuid + "']"), data.item.title);
              $(".detail_button[ref='" + uuid + "'] span.amount, " + "#itemDetails[data-uuid='" + uuid + "'] span.amount").html(tsdpkt(data.item.amount));

              if (data.item.canBeActivated) {
                $('#itemDetails[data-uuid="' + uuid + '"] a.activateItem').removeClass('build-it_disabled').addClass('build-it');
              } else {
                $('#itemDetails[data-uuid="' + uuid + '"] a.activateItem').addClass('build-it_disabled').removeClass('build-it');
              }

              if (data.item.newOffer == false) {
                $(traderObj.traderId + ' .bargain_text').html(data.item.noOfferMessage);
              } else {
                traderObj.resetImport(data.item.newOffer);
              }
            }
          },
          error: function () {
            fadeBox(loca['error'], true);
          }
        });
      }

      return false;
    },
    resetImport: function (importData) {
      importChangeCost = importData.bargainCost;

      if (darkMatter >= importChangeCost) {
        $(traderObj.traderId + ' .import_bargain.change').removeClass('disabled');
      } else {
        $(traderObj.traderId + ' .import_bargain.change').addClass('disabled');
      }

      $(traderObj.traderId + ' .import_bargain.take').removeClass('disabled');
      $(traderObj.traderId + ' .import_bargain.change').removeClass('hidden');
      $(traderObj.traderId + ' .import_bargain.take').removeClass('hidden');
      $(traderObj.traderId + ' .bargain_cost').removeClass('hidden');
      $(traderObj.traderId + ' .bargain_overlay').hide();
      $(traderObj.traderId + ' .payment').show();
      $(traderObj.traderId + ' .image_140px img').attr("src", "/cdn/img/trader/container_" + importData.rarity + ".jpg");
      $(traderObj.traderId + ' .image_140px a').removeClass("slideIn").attr("ref", "").removeClass("tooltipHTML").addClass("tooltip").removeClass('r_common_140px').removeClass('r_uncommon_140px').removeClass('r_rare_140px').removeClass('r_epic_140px').removeClass('r_buddy_140px').addClass('r_' + importData.rarity + '_140px');
      changeTooltip($(traderObj.traderId + ' .image_140px a'), importData.tooltip);
      $(traderObj.traderId + ' .js_import_price').removeClass('green_text').text(number_format(importData.price, 0));
      $(traderObj.traderId + ' .image_140px .amount').text("?");
      traderObj.priceImportExport = getValue($('.js_import_price').html());
      traderObj.resetValues(null, true);
      traderObj.init();
    },

    /*
     * add all values from all sources:
     * sum has to be initialized with 0 every time, because we add the total amount of resources every time, not just the change
     */
    sumAuctioneer: function () {
      var traderId = traderObj.traderId;
      var price = traderObj.price;

      if (price == 0) {
        $('#div_traderAuctioneer .js_amount').attr('disabled', 'disabled');
      } else {
        $('#div_traderAuctioneer .js_amount').removeAttr('disabled');
      }

      var sum = 0;

      for (var planetId in traderObj.planets) {
        var output = traderObj.planets[planetId].output;
        sum += parseInt(output.metal) * multiplier.metal + parseInt(output.crystal) * multiplier.crystal + parseInt(output.deuterium) * multiplier.deuterium;
      }

      sum += parseInt(traderObj.honorOutput) * multiplier.honor;
      sum = Math.floor(sum);
      traderObj.deficit = Number(auctioneer.calculateDeficit()) - Number(sum);

      if (traderObj.deficit > 0) {
        $(' .js_deficit').html(number_format(traderObj.deficit, 0));
      } else {
        $(' .js_deficit').html(number_format(0, 0));
      }

      if (sum > 0) {
        $('#div_traderAuctioneer .js_auctioneerSum').html('+ ' + number_format(sum, 0));
      } else {
        $('#div_traderAuctioneer .js_auctioneerSum').html('');
      }

      $('#div_traderAuctioneer .js_alreadyBidden').html(number_format(Math.floor(playerBid + sum), 0)); //bid ok?

      if (price > 0 && traderObj.deficit <= 0) {
        $('#div_traderAuctioneer .right_box .pay').removeClass('disabled');
      } else {
        $('#div_traderAuctioneer .right_box .pay').addClass('disabled');
      }
    },
    sumImportExport: function () {
      var traderId = traderObj.traderId;
      var sumMetal = 0;
      var sumCrystal = 0;
      var sumDeuterium = 0;
      traderObj.sumResources = 0;

      for (var planetId in traderObj.planets) {
        var output = traderObj.planets[planetId].output;
        sumMetal += parseInt(output.metal) * multiplier.metal;
        sumCrystal += parseInt(output.crystal) * multiplier.crystal;
        sumDeuterium += parseInt(output.deuterium) * multiplier.deuterium;
      }

      var sumHonor = traderObj.honorOutput * multiplier.honor;
      traderObj.sumResources += sumMetal + sumCrystal + sumDeuterium + sumHonor;

      if (traderObj.sumResources >= traderObj.priceImportExport) {
        traderObj.sumResources = traderObj.priceImportExport;
      }

      $(traderId + ' .js_sum_price').html(number_format(Math.floor(traderObj.sumResources), 0)); //price ok?

      if (traderObj.sumResources >= traderObj.priceImportExport) {
        $(traderId + ' .js_import_price').addClass('green_text');
        $(traderId + ' .right_box .pay').removeClass('disabled');
      } else {
        $(traderId + ' .js_import_price').removeClass('green_text');
        $(traderId + ' .right_box .pay').addClass('disabled');
      }
    },

    /*
     * Update all values of current slider depending on which button was clicked:
     */
    updateValues: function ($elem) {
      var traderId = traderObj.traderId;
      if (traderId !== '#' + $elem.closest('.div_trader').attr('id')) return;
      var myClass = $elem.attr('class');
      var re = new RegExp(/\b(js_slider\w*)\b/);
      myClass = re.test(myClass) ? RegExp.$1 : false;
      if (!myClass) return;
      var currPlanet = traderObj.current.planet;
      var action, value, sliderId;

      if (myClass.indexOf('More') != -1) {
        sliderId = myClass.replace('More', '');
        action = 'More';
      } else if (myClass.indexOf('Max') != -1) {
        sliderId = myClass.replace('Max', '');
        action = 'Max';
      }

      traderObj.current.resource = sliderId.replace('js_slider', '').toLowerCase() || null;
      var currResource = traderObj.current.resource;
      var currInputValue = 0;

      if (currResource == 'honor') {
        currInputValue = Math.max(0, honorScore);
      } else {
        currInputValue = traderObj.planets[currPlanet].input[currResource];
      }

      value = getValue($(traderId + ' .' + sliderId + 'Input').val());

      if (action == 'More') {
        if (traderId == '#div_traderImportExport') {
          if (traderObj.sumResources <= traderObj.priceImportExport - 1000 * multiplier[currResource]) {
            value += 1000;
          } else if (traderObj.sumResources < traderObj.priceImportExport) {
            value += Math.ceil((traderObj.priceImportExport - traderObj.sumResources) / multiplier[currResource]);
          }
        } else if (traderId == '#div_traderAuctioneer' && traderObj.price > 0) {
          value += 1000;
        }

        if (value >= currInputValue) {
          value = Math.max(0, currInputValue);
        }
      } else if (action == 'Max') {
        if (traderId == '#div_traderImportExport') {
          if (traderObj.sumResources == 0) {
            value = Math.min(currInputValue, Math.ceil(traderObj.priceImportExport / multiplier[currResource]));
          } else if (traderObj.sumResources.isBetween(0, traderObj.priceImportExport - 1)) {
            value = Math.min(currInputValue, value + Math.ceil((traderObj.priceImportExport - traderObj.sumResources) / multiplier[currResource]));
            value = Math.max(0, value);
          }
        } else if (traderId == '#div_traderAuctioneer' && traderObj.price > 0) {
          value = Math.min(currInputValue, Math.ceil(getValue($(traderId + ' .js_deficit').html()) / multiplier[currResource] + value));
        }

        if (currResource == 'honor' && value < 0) value = 0;
      } // update valueObject and slider with the new value:


      $(traderId + ' .js_amount.' + sliderId + 'Input').val(number_format(value, 0));

      if (currResource == 'honor') {
        traderObj.honorOutput = value;
      } else {
        traderObj.planets[currPlanet].output[currResource] = value;
      }

      if (traderId == '#div_traderImportExport') {
        traderObj.sumImportExport();
      } else if (traderId == '#div_traderAuctioneer' && traderObj.price > 0) {
        traderObj.sumAuctioneer();
        traderObj.checkOverbidden();
      }
    },
    updateValuesInputCanged: function ($elem) {
      var traderId = traderObj.traderId;
      if (traderId !== '#' + $elem.closest('.div_trader').attr('id')) return;
      var myClass = $elem.attr('class');
      var re = new RegExp(/\b(js_slider\w*)\b/);
      myClass = re.test(myClass) ? RegExp.$1 : false;
      if (!myClass) return;
      var sliderId = myClass.replace('Input', '');
      var currResource = sliderId.replace('js_slider', '').toLowerCase();
      var currPlanet = traderObj.current.planet;
      var currInputValue = 0;

      if (currResource == 'honor') {
        currInputValue = Math.max(0, honorScore);
      } else {
        currInputValue = parseInt(traderObj.planets[currPlanet].input[currResource]);
      } //update traderObj
      // value may be max either max ress on planet or the price devided by multiplier


      var value = 0;

      if (traderId == '#div_traderImportExport') {
        var sum = 0;

        for (var planetId in traderObj.planets) {
          var output = traderObj.planets[planetId].output;

          if (currResource != 'metal') {
            sum += Math.floor(parseInt(output.metal) * multiplier.metal);
          }

          if (currResource != 'crystal') {
            sum += Math.floor(parseInt(output.crystal) * multiplier.crystal);
          }

          if (currResource != 'deuterium') {
            sum += Math.floor(parseInt(output.deuterium) * multiplier.deuterium);
          } //if(currResource != 'honor') { sum += Math.floor(parseInt(output.honor) * multiplier.honor); }

        }

        value = Math.min(getValue($elem.val()), Math.ceil((traderObj.priceImportExport - sum) / multiplier[currResource]));
      } else if (traderId == '#div_traderAuctioneer') {
        value = getValue($elem.val());
      }

      value = Math.min(value, currInputValue);
      traderObj.planets[currPlanet].output[currResource] = value;

      if (currResource == 'honor') {
        traderObj.honorOutput = value;
      } else {
        traderObj.planets[currPlanet].output[currResource] = value;
      }

      if (traderId == '#div_traderImportExport') {
        traderObj.sumImportExport();
      } else if (traderId == '#div_traderAuctioneer') {
        traderObj.sumAuctioneer();
        traderObj.checkOverbidden();
      }

      formatNumber(traderId + ' .js_amount.' + sliderId + 'Input', value);
    },
    init: function () {
      $(".honorResource").hide();
      $("#menuTable a.trader").unbind("click.gotoTrader").bind("click.gotoTrader", function (e) {
        e.preventDefault();
        traderObj.switchTrader("traderResources");
      });
      $(window).unbind("hashchange.switchTrader").bind("hashchange.switchTrader", function (e) {
        var url = $.deparam.fragment(e.fragment);

        if (typeof url['page'] == 'undefined' || url['page'] == '' && traderObj.traderId != null) {
          traderObj.returnToOverview();
        } else {
          traderObj.switchTrader(url['page']);
        }
      });
      $('.small_back_to_overview').unbind('mouseenter').unbind('mouseout').bind('mouseenter', function () {
        $('#header_text').css('background-position', '0 -250px');
      }).bind('mouseout', function () {
        $('#header_text').css('background-position', '0 0');
      });
    },
    initSliderTrader: function (traderId) {
      // Unbind the events:
      $(traderId + ' .js_valButton').unbind('click.valControl');
      $(traderId + ' .js_amount').unbind('keyup.inputVal');
      toggleDisplay.init(traderId);
      $(traderId + ' .js_valButton').bind('click.valControl', function (e) {
        traderObj.updateValues($(this));
        e.stopPropagation();
      });
      $(traderId + ' .js_amount').bind('keyup.inputVal', function (e) {
        traderObj.updateValuesInputCanged($(this));
        e.stopPropagation();
      });
    },
    initImportExport: function () {
      traderObj.planets = planetResources;
      traderObj.priceImportExport = getValue($('.js_import_price').html());
      traderObj.initSliderTrader('#div_traderImportExport');
      $('#div_traderImportExport .right_box .pay').bind('click', function () {
        traderObj.submitImportExport();
      });
      $('#div_traderImportExport .import_bargain.change').bind('click', function () {
        traderObj.changeImportItem();
      });
      $('#div_traderImportExport .import_bargain.take').bind('click', function () {
        traderObj.takeImportItem();
      });
    },
    switchTrader: function (traderId) {
      if (traderObj.switchingTrader) {
        return;
      }

      traderObj.switchingTrader = true;
      Tipped.hideAll();
      $('#planet .close_details:visible').click();

      if ("#div_" + traderId == traderObj.traderId) {
        return;
      }

      if (traderObj.traderId != null || traderId == '' || traderId == null) {
        traderObj.returnToOverview();

        if (animation && !disableAnimationOnce) {
          setTimeout(function () {
            traderObj.selectTrader(traderId);
          }, 500);
        } else {
          traderObj.selectTrader(traderId);
        }
      } else {
        traderObj.selectTrader(traderId);
      }
    },
    returnToOverview: function () {
      // reset trader header
      $('#planet #header_text h2').empty().parent().hide();
      $('#traderOverview').find('.c-left, .c-right').hide();
      var traderId = traderObj.traderId;
      if (!traderId) return;
      $(traderId).hide();
      $("#callTrader").hide();

      if (animation && !disableAnimationOnce) {
        $('#planet h2').hide();
        $('#planet').animate({
          backgroundPosition: '-273px 0px',
          height: '470px'
        }, 500, function () {
          $('#planet h2').show();
          $('#planet').removeClass('detail');
          $('#traderOverview').find('.c-left, .c-right').show();
          $('.js_trader').show();
        });
      } else {
        $('#planet').removeClass('detail').css('background-position', '-273px 0px').css('height', '470px');
        $('.js_trader').show();
      }

      $('#planet a').show();
      $('#planet .back_to_overview').hide();
      removeTooltip($('#planet .back_to_overview'));
      $('#traderOverview').find('.c-left, .c-right').removeClass('c-small');
      traderObj.traderId = null;
      traderObj.switchingTrader = false;
    }
  };
  breakerObj = {
    costs: null,
    offer: null,
    ships: {},
    locked: false,
    lastTechId: null,
    initialize: function () {
      this.offer = parseInt($('.scrap_offer_amount').html());
      this.costs = breakerCosts;
      var thisObj = this;
      /* ****** Scrotthändler AnythingSlider ******* */

      $('#js_anythingSliderShips, #js_anythingSliderDefense').anythingSlider({
        startStopped: true,
        // If autoPlay is on, this can force it to start stopped
        buildStartStop: false,
        expand: true,
        resizeContents: false,
        theme: 'default',
        infiniteSlides: false,
        autoPlay: false,
        easing: 'swing',
        resizeContents: true,
        stopAtEnd: true,
        playRtl: isRTLEnabled,
        buildNavigation: false,
        // Callback when the plugin finished initializing (for IPad Swipe Event)
        onInitialized: function (e, slider) {
          if (isMobile) {
            var time = 1000,
                // allow movement if < 1000 ms (1 sec)
            range = 50,
                // swipe movement of 50 pixels triggers the slider
            x = 0,
                t = 0,
                touch = ("ontouchend" in document),
                st = touch ? 'touchstart' : 'mousedown',
                mv = touch ? 'touchmove' : 'mousemove',
                en = touch ? 'touchend' : 'mouseup';
            slider.$window.bind(st, function (e) {
              // prevent image drag (Firefox)
              //e.preventDefault();
              t = new Date().getTime();
              x = e.originalEvent.touches ? e.originalEvent.touches[0].pageX : e.pageX;
            }).bind(en, function (e) {
              t = 0;
              x = 0;
            }).bind(mv, function (e) {
              e.preventDefault();
              var newx = e.originalEvent.touches ? e.originalEvent.touches[0].pageX : e.pageX,
                  r = x === 0 ? 0 : Math.abs(newx - x),
                  // allow if movement < 1 sec
              ct = new Date().getTime();

              if (t !== 0 && ct - t < time && r > range) {
                if (newx < x) {
                  slider.goForward();
                }

                if (newx > x) {
                  slider.goBack();
                }

                t = 0;
                x = 0;
              }
            });
          }
        }
      }); // end slider 1 initialize

      $('#js_anythingSliderDefense').parent().parent().hide();
      $('.scrap_defense').bind('click.tabDefense', function () {
        $('.scrap_ships').removeClass('selected');
        $(this).addClass('selected');
        $('#js_anythingSliderShips').parent().parent().hide();
        $('#js_anythingSliderDefense').parent().parent().show();
      });
      $('.scrap_ships').bind('click.tabShips', function () {
        $('.scrap_defense').removeClass('selected');
        $(this).addClass('selected');
        $('#js_anythingSliderDefense').parent().parent().hide();
        $('#js_anythingSliderShips').parent().parent().show();
      });
      $('.image a').each(function () {
        var techId = $(this).attr('ref').substr(6, 3);
        var $level = $(this).find('.level');
        var $amount = $level.contents().filter(function () {
          return this.nodeType == 3;
        });
        thisObj.ships[techId] = $amount.text().replace(/^\s+|\s+$/g, '');
        $amount.remove();
        $level.append(tsdpkt(thisObj.ships[techId]));
      });
      $('#js_scrapBargain').unbind('click').bind('click', function () {
        if (!$(this).hasClass('disabled')) {
          thisObj.bargain(thisObj);
        } else {
          if (breakerMaximumPercent > thisObj.offer) {
            errorBoxDecision(LocalizationStrings.error, loca.errorNotEnoughDM, LocalizationStrings.yes, LocalizationStrings.no, redirectBuyPremium);
          }
        }

        return false;
      });
      $('#js_scrapScrapIT').unbind('click').bind('click', function () {
        if (!$(this).hasClass('disabled')) {
          thisObj.trade(thisObj);
        }

        return false;
      });
      $('input.ship_amount').unbind('focus').bind('focus', function () {
        thisObj.lastTechId = $(this).attr('name').substr(2, 3);
        $(this).val('');
      });
      $('input.ship_amount').unbind('keyup change').bind('keyup change', function (event) {
        thisObj.lastTechId = $(this).attr('name').substr(2, 3);
        formatNumber(this, $(this).val());
        var $this = $(this);
        clearTimeout($this.data('timer'));
        $this.data('timer', setTimeout(function () {
          $this.removeData('timer');
          thisObj.updateResources(thisObj);
        }, 300));
      });
      $('.buildingimg a').unbind('click').bind('click', function () {
        return false;
      });
      $('.js_maxShips').unbind('click').bind('click', function () {
        if (!isMobile) {
          $($(this).attr('ref')).focus();
        }

        var shipAmount = thisObj.ships[$(this).attr('ref').substr(6, 3)];
        $($(this).attr('ref')).val(tsdpkt(shipAmount)).trigger('change');
        thisObj.updateResources(thisObj);
        return false;
      });
      $('.sendAll').unbind('click').bind('click', function () {
        $('.anythingSlider ul:visible input').each(function () {
          thisObj.lastTechId = $(this).attr('name').substr(2, 3);
          var shipAmount = thisObj.ships[thisObj.lastTechId];

          if (shipAmount > 0) {
            $(this).val(tsdpkt(shipAmount));
          }
        });
        thisObj.updateResources(thisObj, function (data) {
          if (data.error) {
            $('.anythingSlider ul:visible input').val('');
            $('#div_traderScrap .resource_amount').text(0);
            thisObj.checkShips(thisObj);
          }
        });
      });
      $('.sendNone').unbind('click').bind('click', function () {
        $('.anythingSlider ul:visible input').each(function () {
          thisObj.lastTechId = $(this).attr('name').substr(2, 3);
          $(this).val('');
        });
        thisObj.updateResources(thisObj);
      });
      $('#js_bargainCost').text(tsdpkt(this.costs));
      this.checkMoney(this);
      this.checkShips(this);
      this.updateBargain(this);
    },
    bargain: function (thisObj) {
      $('#js_scrapBargain').addClass('disabled');
      $.ajax({
        url: breakerLinkBargain,
        type: "POST",
        dataType: "json",
        data: {
          bargain: 1,
          _token: token
        },
        beforeSend: function () {
          thisObj.lock(thisObj);
        },
        success: function (response) {
          let data = response.data;
          thisObj.unlock(thisObj);
          token = response.newAjaxToken;
          fadeBox(data.message, data.error);

          if (!data.error) {
            thisObj.costs = data.bargainPrice;
            thisObj.offer = data.percentage;
            darkMatter = data.resources.dm;
            thisObj.updateBargain(thisObj);
            thisObj.updateResources(thisObj);
            traderObj.reloadResources(function () {
              thisObj.checkMoney(thisObj);
              Tipped.show($('#js_scrapBargain')[0]);
            });
          }

          $(".scrap_trader_quote").text(data.quote);
        },
        error: function () {
          thisObj.unlock(thisObj);
        }
      });
    },
    trade: function (thisObj) {
      thisObj.lock(thisObj);
      var tradeArray = thisObj.getTradeArray();

      var getBreakerQuestion = function getBreakerQuestion() {
        var questionString = loca.breakerQuestion + '<br/><br/><div style="text-align: left; margin-left: 30px">';
        var counter = 0;
        $.each(tradeArray, function (techId) {
          questionString += this + "x " + breakerTechs[techId].name + ", ";
          counter++;

          if (counter % 2 == 0) {
            questionString += "<br/>";
          }
        });
        questionString = questionString.replace(/, (<br\/>)?$/, '');
        questionString += '</div>';
        return questionString;
      };

      errorBoxDecision(loca.breaker, getBreakerQuestion(), LocalizationStrings.yes, LocalizationStrings.no, function () {
        $.ajax({
          url: breakerLinkTrade,
          type: "POST",
          dataType: "json",
          data: {
            lastTechId: thisObj.lastTechId,
            finishTrade: 1,
            trade: tradeArray,
            _token: token
          },
          success: function (response) {
            let data = response.data;
            thisObj.unlock(thisObj);
            token = response.newAjaxToken;

            if (data.error) {
              fadeBox(data.message, true);
            } else {
              fadeBox(data.message, false);
              thisObj.offer = data.percentage;
              thisObj.costs = data.bargainPrice;
              thisObj.resetForm();
              thisObj.updateBargain(thisObj);
              $("#js_scrapAmountMetal").html(0);
              $("#js_scrapAmountCrystal").html(0);
              $("#js_scrapAmountDeuterium").html(0);
              traderObj.reloadResources(function () {
                thisObj.updateShips(thisObj);
              });
            }

            $(".scrap_trader_quote").text(data.quote);
          },
          error: function () {
            thisObj.unlock(thisObj);
            fadeBox(loca['error'], true);
          }
        });
      }, function () {
        thisObj.unlock(thisObj);
      });
    },
    updateResources: function (thisObj, callback) {
      if (thisObj.locked) {
        return;
      }

      $.ajax({
        url: breakerLinkTrade,
        type: "POST",
        dataType: "json",
        data: {
          lastTechId: thisObj.lastTechId,
          trade: thisObj.getTradeArray(),
          _token: token
        },
        beforeSend: function () {
          thisObj.lock(thisObj);
        },
        success: function (response) {
          let data = response.data;
          token = response.newAjaxToken;

          if (data.error) {
            fadeBox(data.message, true);
          }

          thisObj.locked = false;
          var reloadShips = false;

          for (var techId in data.techAmount) {
            $("#ship_" + techId).val(tsdpkt(data.techAmount[techId]));

            if (!reloadShips && $("#ship_" + techId).val() != thisObj.ships[techId]) {
              reloadShips = true;
            }
          }

          $("#js_scrapAmountMetal").html(tsdpkt(round(data.resources.metal, 2)));
          $("#js_scrapAmountCrystal").html(tsdpkt(round(data.resources.crystal, 2)));
          $("#js_scrapAmountDeuterium").html(tsdpkt(round(data.resources.deuterium, 2)));

          if (!thisObj.notFirstOffer) {
            $(".scrap_trader_quote").text(loca.breakerFirstOffer);
            thisObj.notFirstOffer = true;
          }

          if (reloadShips) {
            thisObj.updateShips(thisObj);
          } else {
            thisObj.unlock(thisObj);
          }

          if (typeof callback == 'function') {
            callback(data);
          }
        },
        error: function () {
          thisObj.unlock(thisObj);
        }
      });
    },
    updateShips: function (thisObj) {
      $.ajax({
        url: techUrl,
        type: "POST",
        dataType: "json",
        beforeSend: function () {
          thisObj.lock(thisObj);
        },
        success: function (data) {
          $('#div_traderScrap .item').each(function () {
            var techId = $(this).attr('id').substr(6, 3);

            if (typeof data[techId] != 'undefined') {
              // Sometimes, somehow we get null in the arrays. Workaround: shipcount shall be 0
              var shipCount = 0;

              if (data[techId] != null) {
                shipCount = getValue(data[techId]);
              }

              thisObj.ships[techId] = shipCount;
              var $level = $(this).find('.level');
              $level.contents().filter(function () {
                return this.nodeType == 3;
              }).remove();
              $level.append(tsdpkt(shipCount)); // if we've got that magical null, we don't want to touch the button colors
              // because we don't want to grey out any buttons that possibly were colored before

              if (data[techId] != null) {
                var $button = $("#button" + techId);
                $button.removeClass('on').removeClass('off');

                if (shipCount > 0) {
                  $button.addClass('on');
                } else {
                  $button.addClass('off');
                }
              }
            }
          });
          thisObj.unlock(thisObj);
        },
        error: function () {
          thisObj.unlock(thisObj);
        }
      });
    },
    getTradeArray: function () {
      var tradeArray = {};
      $('input.ship_amount').each(function () {
        var techId = $(this).attr('name').substr(2, 3);

        if (getValue($(this).val()) != 0) {
          tradeArray[techId] = getValue($(this).val());
        }
      });
      return tradeArray;
    },
    resetForm: function () {
      $('input.ship_amount').each(function () {
        $(this).val('0');
      });
      removeTooltip($('#js_scrapBargain'));
      $('#js_scrapBargain').removeClass('tooltip').removeAttr('title');
    },
    checkMoney: function (thisObj) {
      if (darkMatter < thisObj.costs) {
        $('#js_scrapBargain').addClass('disabled');
      } else if (breakerMaximumPercent <= thisObj.offer) {
        $('#js_scrapBargain').addClass('disabled').addClass('tooltip').attr('title', loca.infoMaxBargain);
        initTooltips($('#js_scrapBargain'));
      } else {
        $('#js_scrapBargain').removeClass('disabled');
      }
    },
    checkShips: function (thisObj) {
      var hasValue = false;
      $('input.ship_amount').each(function () {
        if ($(this).val().length > 0 && getValue($(this).val()) > 0) {
          hasValue = true;
        }
      });

      if (!hasValue) {
        $('#js_scrapScrapIT').addClass('disabled');
      } else {
        $('#js_scrapScrapIT').removeClass('disabled');
      }
    },
    updateBargain: function (thisObj) {
      $('.scrap_offer_amount').css('height', thisObj.offer / 100 * $('.scrap_offer_amount').parent().css('height').replace('px', ''));
      $('.scrap_offer_amount').html(thisObj.offer + "%");
      $('.js_bargainCost').text(tsdpkt(thisObj.costs));
    },
    lock: function (thisObj) {
      $('#js_scrapBargain').addClass('disabled');
      $('#js_scrapScrapIT').addClass('disabled');
      thisObj.locked = true;
    },
    unlock: function (thisObj) {
      thisObj.locked = false;
      thisObj.checkShips(thisObj);
      thisObj.checkMoney(thisObj);
    }
  };
  /*
       * Auctioneer socket functions
       */

  auctioneer = {
    socket: null,
    connected: false,
    timeout: null,
    retryInterval: 5000,
    historyShown: false,
    initConnection: function () {
      try {
        var thisObj = auctioneer;
        this.socket = new io.connect(":" + nodePort + "/auctioneer", nodeParams);
        this.socket.on('connect', function () {
          thisObj.connected = true;
          clearTimeout(this.timeout);
        });
        this.socket.on('disconnect', function () {
          thisObj.connected = false;
          thisObj.retryConnection();
        });
        this.socket.on("new auction", function (data) {
          auctionId = data.auctionId; // put last auction into history

          var playerName = $('#div_traderAuctioneer .detail_value.currentPlayer').html();

          if (data.oldAuction.player == null) {
            playerName = loca['auctionNotSold'];
          } else {
            playerName = "<a href=\"" + data.oldAuction.player.link + "\">" + data.oldAuction.player.name + "</a>";
          }

          removeTooltip($('#div_traderAuctioneer .image_140px .detail_button'));
          var title = $('#div_traderAuctioneer .image_140px .detail_button').attr('title');
          var className = $('.auction_history li:first').hasClass('even') ? 'odd' : 'even';
          var newAuctionElement = "\
                        <li class=\"" + className + "\" style=\"display: none\">\
                            <a href=\"javascript:void(0);\"\
                               class=\"slideIn\"\
                               ref=\"" + data.oldAuction.item.uuid + "\">\
                                <img height=\"30\" width=\"30\"\
                                     src=\"/cdn/img/item-images/" + data.oldAuction.item.imageSmall + "-small.png\"\
                                     alt=\"\" title=\"" + title + "\"\
                                     class=\"item_img tooltipHTML tooltipLeft r_" + data.oldAuction.item.rarity + "\"/>\
                            </a>\
                            <span class=\"detail sum\">" + number_format(data.oldAuction.sum, 0) + "</span>\
                            <span class=\"detail player\">" + playerName + "</span>\
                            <span class=\"detail date_time\">" + data.oldAuction.time + "</span>\
                        </li>";
          $('.auction_history .history_content ul').prepend(newAuctionElement);
          $('.auction_history .history_content li:first').slideDown("slow"); // remove tha last history entry

          var historyLength = $('#div_traderAuctioneer .auction_history li').length;

          if (historyLength > 3) {
            $('.auction_history .history_content li:last').slideUp("slow", function () {
              $('.auction_history .history_content li:eq(21)').remove();
              var $thirdAuction = $('.auction_history .history_content li:eq(3)');
              $thirdAuction.addClass('more_auctions_li');

              if (auctioneer.historyShown) {
                $thirdAuction.show();
              }
            });
            $('#div_traderAuctioneer .auction_history .more').show();
          } // set new auction


          $('#div_traderAuctioneer .image_140px .detail_button').attr('ref', data.item.uuid).attr('title', '').removeClass('r_common_140px').removeClass('r_uncommon_140px').removeClass('r_rare_140px').removeClass('r_epic_140px').addClass('r_' + data.item.rarity + '_140px');
          $('#div_traderAuctioneer .image_140px img').attr('src', "/cdn/img/item-images/" + data.item.image + "-140x.png");
          $('#div_traderAuctioneer .left_header h2').html(loca.auctionRunning);
          thisObj.setItemTooltip($('#div_traderAuctioneer .image_140px .detail_button'));
          thisObj.setData({
            price: 1000,
            sum: 0,
            player: null,
            bids: 0,
            info: data.info
          });
          $('#div_traderAuctioneer .js_alreadyBidden').html(number_format(0, 0));
          $('.noAuctionOverlay').hide();
          traderObj.resetValues('#div_traderAuctioneer', false);
          traderObj.checkOverbidden();
        });
        this.socket.on("new bid", function (data) {
          if (data.player.id == playerId) {
            playerBid = data.sum; // set auctionid for function "calculateDeficit", otherwise the actual minimum bid is shown

            AuctionIdOflastPlayerBid = data.auctionId;
            $('#div_traderAuctioneer .js_alreadyBidden').html(number_format(Math.floor(playerBid), 0));
          }

          thisObj.setData({
            price: data.price,
            sum: data.sum,
            player: data.player,
            bids: data.bids
          });
          traderObj.checkOverbidden();
        });
        this.socket.on("auction finished", function (data) {
          thisObj.setData({
            price: 0,
            player: data.player,
            bids: data.bids,
            info: data.info
          });
          traderObj.resetValues('#div_traderAuctioneer', false);
          $('#div_traderAuctioneer .js_alreadyBidden').html(number_format(0, 0));
          $('#div_traderAuctioneer .js_auctioneerSum').html('');
          $('#div_traderAuctioneer .left_header h2').html(loca.auctionFinished);

          if (data.player != null) {
            if (data.player.id == playerId) {
              thisObj.setItemTooltip($('#div_traderAuctioneer .image_140px .detail_button'));
            }
          }

          $('.noAuctionOverlay').show();
          traderObj.checkOverbidden();
        });
        this.socket.on("timeLeft", function (data) {
          thisObj.setData({
            info: data
          });
        });
      } catch (e) {}
    },
    setItemTooltip: function (object) {
      $.ajax({
        url: detailUrl,
        data: {
          getDetails: 1,
          type: $(object).attr('ref'),
          ajax: 1
        },
        dataType: "json",
        success: function (data) {
          changeTooltip(object, data.title);
          $("#itemDetails[data-uuid='" + $(object).attr('ref') + "'] .amount," + "a.detail_button[ref='" + $(object).attr('ref') + "'] .amount").html(tsdpkt(data.amount));
        },
        error: function () {
          fadeBox(loca['error'], true);
        }
      });
    },
    initialize: function () {
      if (typeof nodeUrl === 'undefined') {
        return;
      }

      traderObj.initSliderTrader('#div_traderAuctioneer');
      traderObj.planets = planetResources;
      traderObj.price = getValue($('.js_price').html());
      $('#div_traderAuctioneer .right_box .pay').bind('click', function () {
        traderObj.submitAuction();
      });
      $('#div_traderAuctioneer .auction_history .more').bind('click', function () {
        if (auctioneer.historyShown) {
          $(this).text("[" + loca['auctionShowMore'] + "]");
        } else {
          $(this).text("[" + loca['auctionShowLess'] + "]");
        }

        auctioneer.historyShown = !auctioneer.historyShown;
        $('#div_traderAuctioneer .auction_history .more_auctions_li').slideToggle('slow');
      });
      traderObj.sumAuctioneer();
      traderObj.checkOverbidden();
      this.initCountdown();
      loadScript(nodeUrl, this.initConnection);
    },
    retryConnection: function () {
      var thisObj = this;
      setTimeout(function () {
        thisObj.initConnection();
      }, 5000);
    },
    setData: function (data) {
      var somethingChanged = false;

      if (typeof data.player != 'undefined') {
        if (data.player == null) {
          $('#div_traderAuctioneer .detail_value.currentPlayer').text("");
          $('#div_traderAuctioneer .detail_value.currentPlayer').attr("href", "");
        } else {
          $('#div_traderAuctioneer .detail_value.currentPlayer').text(data.player.name);
          $('#div_traderAuctioneer .detail_value.currentPlayer').attr("href", data.player.link);
          $('#div_traderAuctioneer .detail_value.currentPlayer').attr("data-player-id", data.player.id);
          $('#div_traderAuctioneer .detail_value.currentPlayer').data("playerId", data.player.id);
        }

        somethingChanged = true;
      }

      if (typeof data.price !== 'undefined') {
        traderObj.price = data.price;
        $('#div_traderAuctioneer .js_price').html(number_format(Math.floor(data.price), 0));
        somethingChanged = true;
      }

      if (typeof data.sum !== 'undefined') {
        $('#div_traderAuctioneer .detail_value.currentSum').html(number_format(Math.floor(data.sum), 0));
        somethingChanged = true;
      }

      if (typeof data.bids !== 'undefined') {
        $('#div_traderAuctioneer .detail_value.numberOfBids').html(number_format(data.bids, 0));
        somethingChanged = true;
      }

      if (typeof data.info !== 'undefined' && $.trim($('#div_traderAuctioneer .auction_info').html()) != data.info) {
        $('#div_traderAuctioneer .auction_info').html(data.info);
        this.initCountdown();
        somethingChanged = true;
      }

      if (somethingChanged) {
        this.flash();
        traderObj.sumAuctioneer();
      }
    },
    initCountdown: function () {
      if (typeof this.nextAuctionTimer == 'object') {
        timerHandler.removeCallback(this.nextAuctionTimer.timer);
      }

      if ($('.nextAuction').length > 0) {
        this.nextAuctionTimer = new simpleCountdown($('.nextAuction').get(0), $('.nextAuction').text());
      }
    },
    flash: function () {
      if (traderObj.traderId == '#div_traderAuctioneer') {
        $('#div_traderAuctioneer .overlay').fadeIn('normal', function () {
          $(this).fadeOut('normal');
        });
      }
    },
    calculateDeficit: function () {
      var deficit = 0;

      if (Math.floor(traderObj.price) == 0) {
        deficit = 0;
      } else if (auctionId != AuctionIdOflastPlayerBid) {
        deficit = Math.floor(traderObj.price);
      } else {
        deficit = Math.floor(traderObj.price) - Math.floor(playerBid);
      }

      return Math.floor(deficit);
    }
  };
  /* TraderOverview Image Hover Styles */

  $('.js_trader').hover(function () {
    var clickedTrader = $(this).attr('id').replace('js_trader', '').toLowerCase();
    $(this).addClass(clickedTrader + '_link_hover');
  }, function () {
    var clickedTrader = $(this).attr('id').replace('js_trader', '').toLowerCase();
    $('.trader_link').each(function (index, element) {
      $(this).removeClass(clickedTrader + '_link_hover');
    });
  });
  /* **** Hover Stile ******* */

  $('.right_box .pay, .value-control, .ui-slider-handle, .bargain, .scrap_it, .source').hover(function () {
    $(this).addClass("hover");
  }, function () {
    $(this).removeClass("hover");
  });
  traderObj.init();
  /*
  * Click event: back to trader overview:
  */

  $(document).undelegate('.js_trader', 'click').delegate('.js_trader', 'click', function () {
    var id = $(this).attr('id').replace('js_', '');
    traderObj.switchTrader(id);
  }).undelegate('#planet .js_backToOverview', 'click').delegate('#planet .js_backToOverview', 'click', function () {
    $.bbq.pushState({
      'page': '',
      'animation': ''
    });
    $(".planetlink, .moonlink").fragment({
      'page': '',
      'animation': ''
    });
  });
  var url = $.deparam.fragment();

  if (typeof url["page"] != 'undefined' && url["page"] != '') {
    traderObj.selectTrader(url["page"], undefined, url["tab"]);
  }
}

function Alliance(cfg) {
  this.tab = cfg.tab || '';
  this.token = cfg.token;
  this.loca = cfg.loca;
  this.tabs = ['overview', 'management', 'broadcast', 'applications', 'classselection', 'createNewAlliance', 'handleApplication'];
  this.initMap = {
    'overview': this.initOverview.bind(this),
    'management': this.initManagement.bind(this),
    'applications': this.initApplication.bind(this),
    'broadcast': this.initBroadcast.bind(this),
    'classselection': this.initClasses.bind(this),
    'createNewAlliance': this.initCreateAlliance.bind(this),
    'handleApplication': this.initHandleApplication.bind(this)
  };

  if (this.initMap[this.tab]) {
    this.initMap[this.tab](cfg);
  }
} // general


Alliance.prototype.displayErrors = function (errors) {
  // only display the first error
  let error = errors[0] || undefined;

  if (error) {
    fadeBox(error.message, true);
  }
};

Alliance.prototype.initCommon = function (cfg) {
  this.taskWrapper = $('#alliancecomponent .alliance_wrapper');
  this.loadingIndicator = this.taskWrapper.ogameLoadingIndicator();
  this.allianceContent = $('#alliancecomponent .allianceContent');
  this.titlebar = $('#alliancecomponent #tab-ally');
  this.titlebar.on('click', '.overview', this.onClickTab.bind(this));
  this.titlebar.on('click', '.management', this.onClickTab.bind(this));
  this.titlebar.on('click', '.broadcast', this.onClickTab.bind(this));
  this.titlebar.on('click', '.applications', this.onClickTab.bind(this));
  this.titlebar.on('click', '.classselection', this.onClickTab.bind(this));
};

Alliance.prototype.initCommonWithout = function (cfg) {
  this.taskWrapper = $('#alliancecomponent .alliance_wrapper');
  this.loadingIndicator = this.taskWrapper.ogameLoadingIndicator();
  this.allianceContent = $('#alliancecomponent .allianceContent');
  this.titlebar = $('#alliancecomponent #tab-ally');
  this.titlebar.on('click', '#isNewApplication', this.onClickTab.bind(this));
};

Alliance.prototype.refreshContent = function (htmlItems) {
  this.allianceContent.html(htmlItems);
};

Alliance.prototype.onAjaxDone = function () {
  this.loadingIndicator.hide();
  let that = this;

  switch (this.tab) {
    case 'createNewAlliance':
      $('#form_createAlly .createAlly').bind('click', that.onClickCreateAlliance.bind(that));
      this.urlCreateAlliance = urlCreateAlliance;
      break;

    case 'handleApplication':
      this.urlSendApplication = urlSendApplication;
      this.urlCancelApplication = urlCancelApplication;
      $('#writeapplication .sendNewApplication').bind('click', that.onClickSendApplication.bind(that));
      $('.bewerbung .cancelApplication').bind('click', that.onClickCancelApplication.bind(that));
      break;

    case 'overview':
      $('.kickMemberButton').each(function () {
        $(this).bind('click', that.onClickKickMember.bind(that));
      });
      $('#kickMemberForm .cancel').bind('click', that.onClickKickMemberCancel.bind(that));
      $('#kickMemberForm .submit').bind('click', that.onClickKickMemberSubmit.bind(that));
      $('#form_assignRank .assignRank').bind('click', that.onClickAssignRankSubmit.bind(that));
      $('#leaveAlly .leaveAlly').bind('click', that.onClickLeaveAlliance.bind(that));
      this.urlKickMember = urlKickMember;
      this.urlSubmitRanks = urlSubmitRanks;
      this.urlLeaveAlliance = urlLeaveAlliance;
      break;

    case 'management':
      $('#form_newRank .createRank').bind('click', that.onClickCreateRank.bind(that));
      $('#form_allyRankRights .editRank').bind('click', that.onClickUpdateRank.bind(that));
      $('.delete-rank .deleteRank').each(function () {
        $(this).bind('click', that.onClickDeleteRank.bind(that));
      });
      $('#form_internAllyText .submitText').bind('click', that.onClickUpdateAllianceText.bind(that));
      $('#form_externAllyText .submitText').bind('click', that.onClickUpdateAllianceText.bind(that));
      $('#form_candidacyText .submitText').bind('click', that.onClickUpdateAllianceText.bind(that));
      $('#allySettings .saveSetting').bind('click', that.onClickUpdateSettings.bind(that));
      $('#form_newTag .newTag').bind('click', that.onClickSubmitTag.bind(that));
      $('#form_newName .newName').bind('click', that.onClickSubmitName.bind(that));
      $('#dissolveally .dissolve').bind('click', that.onClickSubmitDisolve.bind(that));
      $('#assignally .transferLeadership').bind('click', that.onClickSubmitTransferLeadership.bind(that));
      $('#assignally .takeoverLeadership').bind('click', that.onClickSubmitTakeoverLeadership.bind(that));
      this.urlCreateRank = urlCreateRank;
      this.urlUpdateRank = urlUpdateRank;
      this.urlDeleteRank = urlDeleteRank;
      this.urlUpdateAllianceText = urlUpdateAllianceText;
      this.urlUpdateSettings = urlUpdateSettings;
      this.urlUpdateTag = urlUpdateTag;
      this.urlUpdateName = urlUpdateName;
      this.urlDissolve = urlDissolve;
      this.urlTransferLeadership = urlTransferLeadership;
      this.urlTakeoverLeadership = urlTakeoverLeadership;
      break;

    case 'applications':
      $('.action_icons .action').each(function () {
        switch ($(this).data('type')) {
          case 'deny':
            $(this).bind('click', that.onClickDenyApplication.bind(that));
            break;

          case 'accept':
            $(this).bind('click', that.onClickAcceptApplication.bind(that));
            break;
        }
      });
      $(".members form").each(function () {
        $(this).find('.accept').bind('click', that.onFormClickAcceptApplication.bind(that));
        $(this).find('.deny').bind('click', that.onFormClickDenyApplication.bind(that));
      });
      this.urlAccept = urlAccept;
      this.urlDeny = urlDeny;
      this.urlReport = urlReport;
      break;

    case 'broadcast':
      $("#submitMail").bind('click', that.onFormClickBroadcastButton.bind(that));
      this.urlSend = urlSend;
      break;
  }
};

Alliance.prototype.initCreateAlliance = function (cfg) {
  this.initCommonWithout(cfg);
  this.urlCreateAlliance = cfg.urlCreateAlliance;
  this.fetchNewAlliance();
};

Alliance.prototype.initHandleApplication = function (cfg) {
  this.initCommonWithout(cfg);
  this.appliedAllyId = cfg.appliedAllyId;
  this.urlSendApplication = cfg.urlSendApplication;
  this.urlCancelApplication = cfg.urlCancelApplication;
  this.fetchNewApplication();
};

Alliance.prototype.initOverview = function (cfg) {
  this.initCommon(cfg);
  this.urlKickMember = cfg.urlKickMember;
  this.urlSubmitRanks = cfg.urlSubmitRanks;
  this.urlLeaveAlliance = cfg.urlLeaveAlliance;
  this.fetch(this.tab);
};

Alliance.prototype.initManagement = function (cfg) {
  this.initCommon(cfg);
  this.urlCreateRank = cfg.urlCreateRank;
  this.urlUpdateRank = cfg.urlUpdateRank;
  this.urlDeleteRank = cfg.urlDeleteRank;
  this.urlUpdateAllianceText = cfg.urlUpdateAllianceText;
  this.urlUpdateSettings = cfg.urlUpdateSettings;
  this.urlUpdateTag = cfg.urlUpdateTag;
  this.urlUpdateName = cfg.urlUpdateName;
  this.urlDissolve = cfg.urlDissolve;
  this.urlTransferLeadership = cfg.urlTransferLeadership;
  this.urlTakeoverLeadership = cfg.urlTakeoverLeadership;
  this.fetch(this.tab);
};

Alliance.prototype.initApplication = function (cfg) {
  this.initCommon(cfg);
  this.urlAccept = cfg.urlAccept;
  this.urlDeny = cfg.urlDeny;
  this.urlReport = cfg.urlReport;
  this.fetch(this.tab);
};

Alliance.prototype.initBroadcast = function (cfg) {
  this.initCommon(cfg);
  this.urlSend = cfg.urlSend;
  this.fetch(this.tab);
};

Alliance.prototype.initClasses = function (cfg) {
  this.initCommon(cfg);
  this.fetch(this.tab);
};

Alliance.prototype.onClickCreateRank = function (e) {
  e.preventDefault();
  let rankName = $('#form_newRank #newRankName').val();
  let params = {
    rankName: rankName,
    _token: this.token
  };
  this.loadingIndicator.show();
  $.post(this.urlCreateRank, params, this.handleResponse.bind(this)).done(this.onAjaxDone.bind(this));
};

Alliance.prototype.onClickUpdateRank = function (e) {
  e.preventDefault();
  let params = {
    _token: this.token
  };
  $('#form_allyRankRights input[type="checkbox"]').each(function () {
    if ($(this).prop('checked')) {
      if (typeof params['rankId_' + $(this).data('rankid')] === 'undefined') {
        params['rankId_' + $(this).data('rankid')] = 0;
      }

      params['rankId_' + $(this).data('rankid')] = params['rankId_' + $(this).data('rankid')] + $(this).data('rankvalue');
    }
  });
  this.loadingIndicator.show();
  $.post(this.urlUpdateRank, params, this.handleResponse.bind(this)).done(this.onAjaxDone.bind(this));
};

Alliance.prototype.onClickDeleteRank = function (e) {
  e.preventDefault();
  let rankId = $(e.currentTarget).data('rankid');
  let params = {
    rankId: rankId,
    _token: this.token
  };
  this.loadingIndicator.show();
  $.post(this.urlDeleteRank, params, this.handleResponse.bind(this)).done(this.onAjaxDone.bind(this));
};

Alliance.prototype.onClickUpdateAllianceText = function (e) {
  e.preventDefault();
  let allianceText = $(e.currentTarget).parent().find('.alliancetexts').val();
  let submitType = $(e.currentTarget).data('type');
  let params = {
    allianceText: allianceText,
    submitType: submitType,
    _token: this.token
  };
  this.loadingIndicator.show();
  $.post(this.urlUpdateAllianceText, params, this.handleResponse.bind(this)).done(this.onAjaxDone.bind(this));
};

Alliance.prototype.onClickUpdateSettings = function (e) {
  e.preventDefault();
  let homepageUrl = $('#allySettings #homepageUrl').val();
  let logoUrl = $('#allySettings #logoUrl').val();
  let state = $('#allySettings #state').val();
  let foundername = $('#allySettings #foundername').val();
  let newcomerrankname = $('#allySettings #newcomerrankname').val();
  let language = $('#allySettings #languageSelectionDropdown').val();
  let params = {
    homepageUrl: homepageUrl,
    logoUrl: logoUrl,
    state: state,
    foundername: foundername,
    newcomerrankname: newcomerrankname,
    language: language,
    _token: this.token
  };
  this.loadingIndicator.show();
  $.post(this.urlUpdateSettings, params, this.handleResponse.bind(this)).done(this.onAjaxDone.bind(this));
};

Alliance.prototype.onClickSubmitTag = function (e) {
  e.preventDefault();
  let newTag = $('#form_newTag #newTag').val();
  let params = {
    newTag: newTag,
    _token: this.token
  };
  this.loadingIndicator.show();
  $.post(this.urlUpdateTag, params, this.handleResponse.bind(this)).done(this.onAjaxDone.bind(this));
};

Alliance.prototype.onClickSubmitName = function (e) {
  e.preventDefault();
  let newName = $('#form_newName #newName').val();
  let params = {
    newName: newName,
    _token: this.token
  };
  this.loadingIndicator.show();
  $.post(this.urlUpdateName, params, this.handleResponse.bind(this)).done(this.onAjaxDone.bind(this));
};

Alliance.prototype.onClickSubmitDisolve = function (e) {
  e.preventDefault();
  let params = {
    _token: this.token
  };
  let that = this;
  this.loadingIndicator.show();
  errorBoxDecision(this.loca.LOCA_ALL_NETWORK_ATTENTION, this.loca.LOCA_NETWORK_ALLY_GIVEUP, this.loca.LOCA_ALL_YES, this.loca.LOCA_ALL_NO, function () {
    $.post(this.urlDissolve, params, that.handleResponse.bind(that)).done(that.onAjaxDone.bind(that));
  }, function () {
    that.loadingIndicator.hide();
  });
};

Alliance.prototype.onClickSubmitTransferLeadership = function (e) {
  e.preventDefault();
  let newLeaderId = $('#assignally #newLeaderId').val();
  let params = {
    newLeaderId: newLeaderId,
    _token: this.token
  };
  let that = this;
  this.loadingIndicator.show();
  errorBoxDecision(this.loca.LOCA_ALL_NETWORK_ATTENTION, this.loca.LOCA_NETWORK_ALLY_TAKEOVER_ARE_YOU_SURE, this.loca.LOCA_ALL_YES, this.loca.LOCA_ALL_NO, function () {
    $.post(this.urlTransferLeadership, params, that.handleResponse.bind(that)).done(that.onAjaxDone.bind(that));
  }, function () {
    that.loadingIndicator.hide();
  });
};

Alliance.prototype.onClickSubmitTakeoverLeadership = function (e) {
  e.preventDefault();
  let params = {
    _token: this.token
  };
  let that = this;
  this.loadingIndicator.show();
  errorBoxDecision(this.loca.LOCA_ALL_NETWORK_ATTENTION, this.loca.LOCA_ALLY_TAKEOVER_QUESTION, this.loca.LOCA_ALL_YES, this.loca.LOCA_ALL_NO, function () {
    $.post(this.urlTakeoverLeadership, params, that.handleResponse.bind(that)).done(that.onAjaxDone.bind(that));
  }, function () {
    that.loadingIndicator.hide();
  });
};

Alliance.prototype.onClickLeaveAlliance = function (e) {
  e.preventDefault();
  let params = {
    _token: this.token
  };
  let that = this;
  this.loadingIndicator.show();
  errorBoxDecision(this.loca.LOCA_ALL_NETWORK_ATTENTION, this.loca.locaAllyLeaveQuestion, this.loca.LOCA_ALL_YES, this.loca.LOCA_ALL_NO, function () {
    $.post(this.urlLeaveAlliance, params, that.handleResponse.bind(that)).done(that.onAjaxDone.bind(that));
  }, function () {
    that.loadingIndicator.hide();
  });
};

Alliance.prototype.onClickKickMember = function (e) {
  e.preventDefault();
  $('#kickMemberReasonText').val("");
  let data = $(e.currentTarget).attr('id').split('-');
  let id = data[1];
  $('#kickMemberId').val(id);
};

Alliance.prototype.onClickKickMemberCancel = function (e) {
  e.preventDefault();
  $('#kickMemberReason').dialog('destroy');
};

Alliance.prototype.onClickKickMemberSubmit = function (e) {
  e.preventDefault();
  let playerId = $('#kickMemberId').val();
  let reasonText = $('#kickMemberReasonText').val();
  this.submitKickMember(playerId, reasonText);
  $('#kickMemberReason').dialog('destroy');
};

Alliance.prototype.onClickAssignRankSubmit = function (e) {
  e.preventDefault();
  let memberRanks = {};
  $('select[name^="memberRanks"]').each(function () {
    memberRanks[$(this).attr('id')] = $(this).val();
  });
  this.submitRanks(memberRanks);
};

Alliance.prototype.submitRanks = function (memberRanks) {
  let params = {
    _token: this.token,
    memberRanks: memberRanks
  };
  this.loadingIndicator.show();
  $.post(this.urlSubmitRanks, params, this.handleResponse.bind(this)).done(this.onAjaxDone.bind(this));
};

Alliance.prototype.onClickCreateAlliance = function () {
  let createTag = $('#allyTagField').val();
  let createName = $('#allyNameField').val();
  let params = {
    createTag: createTag,
    createName: createName,
    _token: this.token
  };
  this.loadingIndicator.show();
  $.post(this.urlCreateAlliance, params, this.handleResponse.bind(this)).done(this.onAjaxDone.bind(this));
};

Alliance.prototype.onClickSendApplication = function (e) {
  e.preventDefault();
  let text = $('#writeapplication .alliancetexts').val();
  let params = {
    allianceId: this.appliedAllyId,
    applicationText: text,
    _token: this.token
  };
  this.loadingIndicator.show();
  $.post(this.urlSendApplication, params, this.handleResponse.bind(this)).done(this.onAjaxDone.bind(this));
};

Alliance.prototype.onClickCancelApplication = function (e) {
  e.preventDefault();
  let params = {
    _token: this.token
  };
  this.loadingIndicator.show();
  $.post(this.urlCancelApplication, params, this.handleResponse.bind(this)).done(this.onAjaxDone.bind(this));
};

Alliance.prototype.submitKickMember = function (playerId, reasonText) {
  let params = {
    playerId: playerId,
    reasonText: reasonText,
    _token: this.token
  };
  this.loadingIndicator.show();
  $.post(this.urlKickMember, params, this.handleResponse.bind(this)).done(this.onAjaxDone.bind(this));
};

Alliance.prototype.onClickNewAlly = function (e) {
  e.preventDefault();

  if ($(e.currentTarget).parent().attr('disabled') !== 'disabled') {
    this.fetchNewAlliance();
  }
};

Alliance.prototype.onClickTab = function (e) {
  e.preventDefault();

  if ($(e.currentTarget).parent().attr('disabled') !== 'disabled') {
    this.tab = $(e.currentTarget).data('tab');
    this.fetch(this.tab);
  }
};

Alliance.prototype.fetchNewApplication = function () {
  this.tab = 'handleApplication';
  this.loadingIndicator.show();
  let data = {
    _token: this.token,
    appliedAllyId: this.appliedAllyId
  };
  let url = $('#alliancecomponent #isNewApplication').attr('rel');
  $.getJSON(url, data, this.onFetch.bind(this)).done(this.onAjaxDone.bind(this));
};

Alliance.prototype.fetchNewAlliance = function () {
  this.tab = 'createNewAlliance';
  this.loadingIndicator.show();
  let data = {
    _token: this.token
  };
  let url = $('#alliancecomponent .createNewAlliance').attr('rel');
  $.getJSON(url, data, this.onFetch.bind(this)).done(this.onAjaxDone.bind(this));
};

Alliance.prototype.fetch = function (targetTab) {
  let target = $('#alliancecomponent .' + targetTab);

  if (target.attr('rel') !== '') {
    this.loadingIndicator.show();
    let data = {
      _token: this.token
    };
    $.getJSON(target.attr('rel'), data, this.onFetch.bind(this)).done(this.onAjaxDone.bind(this));
    this.tabs.forEach(function (item) {
      let element = $('#alliancecomponent #tab-ally .' + item).parent();
      element.removeClass('aktiv');

      if (item === targetTab) {
        element.addClass('aktiv');
      }
    });
  }
};

Alliance.prototype.onFetch = function (data) {
  let htmlItems = data.content[data.target];
  this.updateToken(data.newAjaxToken);
  this.refreshContent(htmlItems);
};

Alliance.prototype.updateToken = function (newtoken) {
  this.token = newtoken;
  token = newtoken;
};

Alliance.prototype.refreshTabs = function (tabsObj) {
  if (tabsObj.applications.applicationCount >= 1) {
    $('.' + tabsObj.applications.tab + ' #applicationTab').removeClass('undermark').addClass('undermark');
    $('.' + tabsObj.applications.tab + ' #applicationTab span').removeClass('undermark').addClass('undermark').html("(" + tabsObj.applications.applicationCount + ")");
  } else {
    $('.' + tabsObj.applications.tab + ' #applicationTab').removeClass('undermark');
    $('.' + tabsObj.applications.tab + ' #applicationTab span').removeClass('undermark').html("");
  }
};

Alliance.prototype.onClickDenyApplication = function (e) {
  e.preventDefault();
  let playerId = $(e.currentTarget).data('playerid');
  this.submitDenyApplication(playerId);
};

Alliance.prototype.submitDenyApplication = function (playerId) {
  let params = {
    playerId: playerId,
    _token: this.token
  };
  this.loadingIndicator.show();
  $.post(this.urlDeny, params, this.handleResponse.bind(this)).done(this.onAjaxDone.bind(this));
};

Alliance.prototype.onFormClickDenyApplication = function (e) {
  e.preventDefault();
  let playerId = $(e.currentTarget).data('playerid');
  let reasonText = $(e.currentTarget).closest("form").find('.alliancetexts').val();
  let params = {
    playerId: playerId,
    reasonText: reasonText,
    _token: this.token
  };
  this.loadingIndicator.show();
  $.post(this.urlDeny, params, this.handleResponse.bind(this)).done(this.onAjaxDone.bind(this));
};

Alliance.prototype.onClickAcceptApplication = function (e) {
  e.preventDefault();
  let playerId = $(e.currentTarget).data('playerid');
  this.submitAcceptApplication(playerId);
};

Alliance.prototype.submitAcceptApplication = function (playerId) {
  let params = {
    playerId: playerId,
    _token: this.token
  };
  this.loadingIndicator.show();
  $.post(this.urlAccept, params, this.handleResponse.bind(this)).done(this.onAjaxDone.bind(this));
};

Alliance.prototype.onFormClickAcceptApplication = function (e) {
  e.preventDefault();
  let playerId = $(e.currentTarget).data('playerid');
  let reasonText = $(e.currentTarget).closest("form").find('.alliancetexts').val();
  let params = {
    playerId: playerId,
    reasonText: reasonText,
    _token: this.token
  };
  this.loadingIndicator.show();
  $.post(this.urlAccept, params, this.handleResponse.bind(this)).done(this.onAjaxDone.bind(this));
};

Alliance.prototype.handleResponse = function (response) {
  let data = JSON.parse(response);
  let status = data.status || 'failure';
  this.updateToken(data.newAjaxToken);

  if (status === 'success') {
    if (data.redirectUrl !== undefined) {
      window.location = data.redirectUrl;
    } else {
      if (data.tabs !== undefined) {
        this.refreshTabs(data.tabs);
      }

      fadeBox(data.message, false);
      getAjaxEventbox();
      getAjaxResourcebox();
      this.fetch(this.tab);
    }
  } else {
    if (data.tabs !== undefined) {
      this.refreshTabs(data.tabs);
    }

    this.displayErrors(data.errors);
  }
};

Alliance.prototype.onFormClickBroadcastButton = function (e) {
  e.preventDefault();
  let rankIds = $('#selectNew').val();
  let broadcastText = $("#allianceBroadCast").find('.alliancetexts').val();
  let params = {
    rankIds: rankIds,
    broadcastText: broadcastText,
    _token: this.token
  };
  this.loadingIndicator.show();
  $.post(this.urlSend, params, this.handleResponse.bind(this)).done(this.onAjaxDone.bind(this));
};

$(function () {
  $(document).on('click', '[data-homepage-link]', function (e) {
    e.preventDefault();
    errorBoxDecision(LocalizationStrings.attention, LocalizationStrings.redirectMessage, LocalizationStrings.yes, LocalizationStrings.no, function () {
      window.open('redir.php?url=' + encodeURIComponent(allyHome), '_newtab');
    }, false, false);
  });
});
function AllianceClassBoxes(params) {
  this.loca = params.loca;
  this.token = params.token;
  this.activatingItem = false;
  this.ingameUrl = params.ingameUrl;
  this.init();
}

AllianceClassBoxes.prototype.init = function () {
  $(document).on('click', '.allianceclass.boxes .buttons .freeselect', this.onClickFreeSelect.bind(this));
  $(document).on('click', '.allianceclass.boxes .buttons .darkmatter', this.onClickDarkMatter.bind(this));
  $(document).on('click', '.allianceclass.boxes .buttons .deactivate', this.onClickDeactivate.bind(this));
  $(document).on('click', '.allianceclass.boxes .buttons .nodarkmatter', this.onClickNoDarkMatter.bind(this));
  $(document).on('click', '.allianceclass.boxes .buttons .classchangeitem', this.onClickClassChangeItem.bind(this));
};

AllianceClassBoxes.prototype.hasActiveSelection = function () {
  return $('.allianceclass.box.selected').length > 0;
};

AllianceClassBoxes.prototype.executeActionWithRedirect = function (url) {
  let that = this;
  let params = {
    _token: token
  };
  $.post(url, params, this.handleResponse.bind(this));
};

AllianceClassBoxes.prototype.onClickFreeSelect = function (e) {
  let that = this;
  let url = $(e.currentTarget).attr('rel');
  let allianceClassBox = $(e.currentTarget).closest('.allianceclass.box');
  let name = allianceClassBox.data('allianceClassName');

  if ($(e.currentTarget).data('disabled') !== 1) {
    this.fetchDataAboutCurrentAllianceClass(name, function () {
      that.executeActionWithRedirect(url);
    }, '', 0);
  }
};

AllianceClassBoxes.prototype.onClickDarkMatter = function (e) {
  let that = this;
  let url = $(e.currentTarget).attr('rel');
  let allianceClassBox = $(e.currentTarget).closest('.allianceclass.box');
  let name = allianceClassBox.data('allianceClassName');
  let price = allianceClassBox.data('allianceClassPrice');

  if ($(e.currentTarget).data('disabled') !== 1) {
    this.fetchDataAboutCurrentAllianceClass(name, function () {
      that.executeActionWithRedirect(url);
    }, 'buyAndActivateItemQuestion', price);
  }
};

AllianceClassBoxes.prototype.onClickNoDarkMatter = function (e) {
  let that = this;
  let urlDarkMatter = $(e.currentTarget).attr('rel');

  if ($(e.currentTarget).data('disabled') !== 1) {
    errorBoxDecision(this.loca.LOCA_ALL_NOTICE, this.loca.LOCA_ALL_ERROR_LACKING_DM, this.loca.LOCA_ALL_YES, this.loca.LOCA_ALL_NO, redirectPremium);
  }
};

AllianceClassBoxes.prototype.onClickDeactivate = function (e) {
  let that = this;
  let url = $(e.currentTarget).attr('rel');
  let allianceClassBox = $(e.currentTarget).closest('.allianceclass.box');
  let name = allianceClassBox.data('allianceClassName');
  let label = this.loca.LOCA_ALLIANCE_CLASS_NOTE_DEACTIVATE.replace('#allianceClassName#', name);

  if ($(e.currentTarget).data('disabled') !== 1) {
    errorBoxDecision(this.loca.LOCA_ALL_NOTICE, label, this.loca.LOCA_ALL_YES, this.loca.LOCA_ALL_NO, function () {
      that.executeActionWithRedirect(url);
    });
  }
};

AllianceClassBoxes.prototype.onClickClassChangeItem = function (e) {
  let that = this;
  let url = $(e.currentTarget).attr('rel');
  let allianceClassBox = $(e.currentTarget).closest('.allianceclass.box');
  let name = allianceClassBox.data('allianceClassName');

  if ($(e.currentTarget).data('disabled') !== 1) {
    this.fetchDataAboutCurrentAllianceClass(name, function () {
      let params = {
        _token: token
      };
      $.post(url, params).done(function (data) {
        var json = $.parseJSON(data);
        token = json.newAjaxToken;

        if (json.status === 'success') {
          window.location.reload();
        } else {
          that.displayErrors(json);
        }
      });
    }, 'activateItemQuestion', null);
  }
};

AllianceClassBoxes.prototype.displayErrors = function (errors) {
  // only display the first error
  let error = errors[0] || undefined;

  if (error) {
    fadeBox(error.message, true);
  }
};

AllianceClassBoxes.prototype.handleResponse = function (response) {
  let data = JSON.parse(response);
  let status = data.status || 'failure';
  token = data.newAjaxToken;
  alliance.updateToken(data.newAjaxToken);

  if (status === 'success') {
    if (data.redirectUrl !== undefined) {
      window.location = data.redirectUrl;
    } else {
      if (data.tabs !== undefined) {
        alliance.refreshTabs(data.tabs);
      }

      fadeBox(data.message, false);
      getAjaxEventbox();
      getAjaxResourcebox();
      this.fetch(this.tab);
    }
  } else {
    if (data.tabs !== undefined) {
      alliance.refreshTabs(data.tabs);
    }

    this.displayErrors(data.errors);
  }
};

AllianceClassBoxes.prototype.fetchDataAboutCurrentAllianceClass = function (newClassName, upgradeItemAjax, questionType, price) {
  if (!this.activatingItem) {
    this.activatingItem = true;
    let that = this;
    $.ajax({
      url: this.ingameUrl,
      type: "GET",
      data: {
        component: 'allianceclassselection',
        action: 'fetchDataAboutCurrentAllianceClass',
        ajax: 1,
        asJson: 1
      },
      dataType: "json",
      error: function (error) {
        that.promptUserForAllianceClassChange(newClassName, upgradeItemAjax, questionType, price);
      },
      success: function (data) {
        that.promptUserForAllianceClassChange(newClassName, upgradeItemAjax, questionType, price, data);
      }
    });
  }
};

AllianceClassBoxes.prototype.promptUserForAllianceClassChange = function (newClassName, upgradeItemAjax, questionType, price, response) {
  this.activatingItem = false;

  if (response.userDoesNotHaveAlliance) {
    return 0;
  }

  let localizationString = this.loca.LOCA_ALLIANCE_CLASS_NOTE_ACTIVATE_WITH_ITEM;

  if (questionType === 'buyAndActivateItemQuestion') {
    localizationString = this.loca.LOCA_ALLIANCE_CLASS_NOTE_ACTIVATE_WITH_DM;
  }

  localizationString = localizationString.replace('#allianceClassName#', newClassName);

  if (questionType === 'buyAndActivateItemQuestion') {
    localizationString = localizationString.replace('#darkmatter#', tsdpkt(price));
  }

  if (response && response.currentAllianceClass && response.dateOfLastAllianceClassChange) {
    localizationString += this.loca.LOCA_ALLIANCE_CLASS_NOTE_ACTIVATE_APPEND_CURRENT_CLASS;
    localizationString = localizationString.replace('#currentAllianceClassName#', response.currentAllianceClass);
    localizationString = localizationString.replace('#lastAllianceClassChange#', response.dateOfLastAllianceClassChange);
  }

  errorBoxDecision(LocalizationStrings.notice, localizationString, LocalizationStrings.yes, LocalizationStrings.no, upgradeItemAjax);
};
let buildListActionCalled = false;

function buildListActionBuild(technologyId, amount, mode, buyWithDmAmount, planetId) {
  if (typeof scheduleBuildListEntryUrl === 'undefined') {
    return;
  }

  if (buildListActionCalled) {
    return;
  }

  buildListActionCalled = true;
  let body = {
    technologyId: technologyId,
    amount: amount ? amount : 1,
    mode: mode ? mode : 1,
    _token: token
  };

  if ($(".shipyardSelection .radioShipyardSelection").length !== 0) {
    body["selectedShipyard"] = parseInt($(".shipyardSelection .radioShipyardSelection:checked").val());
  }

  if (buyWithDmAmount) {
    body["buyWithDmAmount"] = buyWithDmAmount;
  }

  if (planetId) {
    body["planetId"] = planetId;
  }

  $.ajax({
    url: scheduleBuildListEntryUrl,
    data: body,
    type: "POST",
    dataType: "json",
    success: function (json) {
      if (json.status === "success") {
        if (json.message) {
          fadeBox(json.message);
        }

        window.location.reload();
      } else {
        token = json.newAjaxToken;

        if (json.errors && json.errors.length) {
          fadeBox(json.errors[0].message, true);
        }

        buildListActionCalled = false;
      }
    },
    error: function () {
      if (typeof LOCA_ERROR_INQUIRY_NOT_WORKED_TRYAGAIN !== "undefined" && LOCA_ERROR_INQUIRY_NOT_WORKED_TRYAGAIN) {
        fadeBox(LOCA_ERROR_INQUIRY_NOT_WORKED_TRYAGAIN, true);
      }

      buildListActionCalled = false;
    }
  });
}

function buildListActionDemolish(technologyId, planetId) {
  if (typeof scheduleBuildListEntryUrl === 'undefined') {
    return;
  }

  if (buildListActionCalled) {
    return;
  }

  buildListActionCalled = true;
  let body = {
    technologyId: technologyId,
    mode: 3,
    _token: token
  };

  if (planetId) {
    body["planetId"] = planetId;
  }

  $.ajax({
    url: scheduleBuildListEntryUrl,
    data: body,
    type: "POST",
    dataType: "json",
    success: function (json) {
      if (json.status === "success") {
        if (json.message) {
          fadeBox(json.message);
        }

        window.location.reload();
      } else {
        token = json.newAjaxToken;

        if (json.errors && json.errors.length) {
          fadeBox(json.errors[0].message, true);
        }

        buildListActionCalled = false;
      }
    },
    error: function () {
      if (typeof LOCA_ERROR_INQUIRY_NOT_WORKED_TRYAGAIN !== "undefined" && LOCA_ERROR_INQUIRY_NOT_WORKED_TRYAGAIN) {
        fadeBox(LOCA_ERROR_INQUIRY_NOT_WORKED_TRYAGAIN, true);
      }

      buildListActionCalled = false;
    }
  });
}

function buildListActionCancel(technologyId, listId, planetId) {
  if (typeof cancelBuildListEntryUrl === 'undefined') {
    return;
  }

  if (buildListActionCalled) {
    return;
  }

  buildListActionCalled = true;
  let body = {
    technologyId: technologyId,
    listId: listId,
    _token: token
  };

  if (planetId) {
    body["planetId"] = planetId;
  }

  $.ajax({
    url: cancelBuildListEntryUrl,
    data: body,
    type: "POST",
    dataType: "json",
    success: function (json) {
      if (json.status === "success") {
        if (json.message) {
          fadeBox(json.message);
        }

        window.location.reload();
      } else {
        token = json.newAjaxToken;

        if (json.errors && json.errors.length) {
          fadeBox(json.errors[0].message, true);
        }

        buildListActionCalled = false;
      }
    },
    error: function () {
      if (typeof LOCA_ERROR_INQUIRY_NOT_WORKED_TRYAGAIN !== "undefined" && LOCA_ERROR_INQUIRY_NOT_WORKED_TRYAGAIN) {
        fadeBox(LOCA_ERROR_INQUIRY_NOT_WORKED_TRYAGAIN, true);
      }

      buildListActionCalled = false;
    }
  });
}
function CharacterClassBoxes(params) {
  this.loca = params.loca;
  this.init();
}

CharacterClassBoxes.prototype.init = function () {
  $(document).on('click', '.characterclass.boxes .buttons .freeselect', this.onClickFreeSelect.bind(this));
  $(document).on('click', '.characterclass.boxes .buttons .darkmatter', this.onClickDarkMatter.bind(this));
  $(document).on('click', '.characterclass.boxes .buttons .deactivate', this.onClickDeactivate.bind(this));
  $(document).on('click', '.characterclass.boxes .buttons .nodarkmatter', this.onClickNoDarkMatter.bind(this));
  $(document).on('click', '.characterclass.boxes .buttons .classchangeitem', this.onClickClassChangeItem.bind(this));
};

CharacterClassBoxes.prototype.hasActiveSelection = function () {
  return $('.characterclass.box.selected').length > 0;
};

CharacterClassBoxes.prototype.executeActionWithRedirect = function (url) {
  let that = this;
  $.post(url).done(function (data) {
    var json = $.parseJSON(data);

    if (json.status === 'success') {
      fadeBox(json.message, false, function () {
        window.location.replace(json.redirectUrl);
      }, 2000);
    } else {
      that.displayErrors(json);
    }
  });
};

CharacterClassBoxes.prototype.onClickFreeSelect = function (e) {
  let that = this;
  let url = $(e.currentTarget).attr('rel');
  $.post(url).done(function (data) {
    var json = $.parseJSON(data);

    if (json.status === 'success') {
      fadeBox(json.message, false, function () {
        window.location.replace(json.redirectUrl);
      }, 2000);
    } else {
      that.displayErrors(json);
    }
  });
};

CharacterClassBoxes.prototype.onClickDarkMatter = function (e) {
  let that = this;
  let url = $(e.currentTarget).attr('rel');
  let characterClassBox = $(e.currentTarget).closest('.characterclass.box');
  let name = characterClassBox.data('characterClassName');
  let price = characterClassBox.data('characterClassPrice');
  let label = this.loca.LOCA_CHARACTER_CLASS_NOTE_ACTIVATE_WITH_DM.replace('#characterClassName#', name).replace('#darkmatter#', tsdpkt(price));
  errorBoxDecision(this.loca.LOCA_ALL_NOTICE, label, this.loca.LOCA_ALL_YES, this.loca.LOCA_ALL_NO, function () {
    that.executeActionWithRedirect(url);
  });
};

CharacterClassBoxes.prototype.onClickNoDarkMatter = function (e) {
  let that = this;
  let urlDarkMatter = $(e.currentTarget).attr('rel');
  errorBoxDecision(this.loca.LOCA_ALL_NOTICE, this.loca.LOCA_ALL_ERROR_LACKING_DM, this.loca.LOCA_ALL_YES, this.loca.LOCA_ALL_NO, redirectPremium);
};

CharacterClassBoxes.prototype.onClickDeactivate = function (e) {
  let that = this;
  let url = $(e.currentTarget).attr('rel');
  let characterClassBox = $(e.currentTarget).closest('.characterclass.box');
  let name = characterClassBox.data('characterClassName');
  let label = this.loca.LOCA_CHARACTER_CLASS_NOTE_DEACTIVATE.replace('#characterClassName#', name);
  errorBoxDecision(this.loca.LOCA_ALL_NOTICE, label, this.loca.LOCA_ALL_YES, this.loca.LOCA_ALL_NO, function () {
    that.executeActionWithRedirect(url);
  });
};

CharacterClassBoxes.prototype.onClickClassChangeItem = function (e) {
  let that = this;
  let url = $(e.currentTarget).attr('rel');
  let characterClassBox = $(e.currentTarget).closest('.characterclass.box');
  let name = characterClassBox.data('characterClassName');
  let label = this.loca.LOCA_CHARACTER_CLASS_NOTE_ACTIVATE_WITH_ITEM.replace('#characterClassName#', name);
  errorBoxDecision(this.loca.LOCA_ALL_NOTICE, label, this.loca.LOCA_ALL_YES, this.loca.LOCA_ALL_NO, function () {
    let params = {
      _token: token
    };
    $.post(url, params).done(function (data) {
      var json = $.parseJSON(data);
      token = json.newAjaxToken;

      if (json.status === "success") {
        window.location.reload();
      } else {
        that.displayErrors(json);
      }
    });
  });
};

CharacterClassBoxes.prototype.displayErrors = function (data) {
  let errorCode = data.errorCode || 0;
  let errorMessage = data.errorMessage || data.message || '';
  fadeBox(errorMessage, true);
};

function initExpeditionFleetTemplate() {
  $(".list tr:even").addClass("alt");
  $("#expeditionFleetTemplateResetForm").on('click', function (event) {
    event.preventDefault();
    resetExpedtionFleetTemplateForm();
  });
}

function selectShipsPerFleet(templateId) {
  $('#expeditionFleetTemplateSelect').ogameDropDown('destroy');
  $('#expeditionFleetTemplateSelect').ogameDropDown();
  $('#expeditionFleetTemplateSelect').ogameDropDown('select', templateId);
  $('#expeditionFleetTemplateSelect').val(templateId).trigger('change');
  $('#expeditionFleetTemplates').parents('.ui-dialog').find('.ui-dialog-titlebar-close').click();
}

var editingTemplate = false;

function saveExpeditionFleetTemplate(event) {
  event.preventDefault();

  if (editingTemplate) {
    return;
  }

  editingTemplate = true;
  let expeditionFleetTemplateData = $('#expeditionFleetTemplateForm').serialize();
  expeditionFleetTemplateData += `&token=${token}`;
  expeditionFleetTemplateData += `&action=saveExpeditionTemplate`;
  $.ajax({
    url: fleetTemplateUrl,
    type: 'POST',
    data: expeditionFleetTemplateData,
    dataType: "json",
    success: function (response) {
      if (response.status === 'success') {
        showNotification(response.message, 'success');
        $('#expeditionFleetTemplateForm').parents('.ui-dialog').find('.ui-dialog-titlebar-close').click();
        $('div.ui-dialog[aria-describedby="expeditionFleetTemplatesEdit"]').remove();
        updateExpeditionFleetTemplates(response.expeditionFleetTemplates);
        reloadComponent('expeditionfleettemplate');
      } else {
        showNotification(response.errors[0].message, 'error');
      }

      token = response.newAjaxToken;
      editingTemplate = false;
    },
    error: function (e) {
      window.location.reload();
    }
  });
}

function deleteExpeditionFleetTemplate(id) {
  if (editingTemplate) {
    return;
  }

  editingTemplate = true;
  $.ajax({
    url: fleetTemplateUrl,
    type: 'POST',
    data: {
      "action": 'deleteExpeditionTemplate',
      "expeditionFleetTemplateId": id,
      "_token": token
    },
    dataType: "json",
    success: function (response) {
      if (response.status === 'success') {
        showNotification(response.message, 'success');

        if ($('div.ui-dialog[aria-describedby="expeditionFleetTemplatesEdit"]').length) {
          $('#expeditionFleetTemplateForm').parents('.ui-dialog').find('.ui-dialog-titlebar-close').click();
          $('div.ui-dialog[aria-describedby="expeditionFleetTemplatesEdit"]').remove();
        }

        updateExpeditionFleetTemplates(response.expeditionFleetTemplates);
        reloadComponent('expeditionfleettemplate');
      } else {
        showNotification(response.errors[0].message, 'error');
      }

      token = response.newAjaxToken;
      editingTemplate = false;
    },
    error: function (e) {
      window.location.reload();
    }
  });
}

function updateExpeditionFleetTemplates(newExpeditionFleetTemplates) {
  expeditionFleetTemplates = newExpeditionFleetTemplates;
  $('#expeditionFleetTemplateSelect').ogameDropDown('destroy');
  $('#expeditionFleetTemplateSelect option').each((idx, option) => {
    if (option.value !== '0') {
      $(option).remove();
    }
  });
  newExpeditionFleetTemplates.map(fleetTemplate => {
    $('#expeditionFleetTemplateSelect').append(`<option value="${fleetTemplate.id}">${fleetTemplate.name}</option>`);
  });
  $('#expeditionFleetTemplateSelect').ogameDropDown();
  $('#expeditionFleetTemplateSelect').val('0').trigger('change');
}

function resetExpedtionFleetTemplateForm() {
  $('#expeditionFleetTemplateForm')[0].reset();
  $('#expeditionFleetTemplateHoldingTimeSelect').val("1").ogameDropDown('select', "1");
  $('#expeditionFleetTemplateSpeedSelect').val("100").ogameDropDown('select', "100");
}

function setExpeditionFleetTemplateShips(ships, tempName, templateId, selectedExpeditionTime, selectedSpeed) {
  $('#expeditionFleetTemplateForm')[0].reset();
  $("#expeditionFleetTemplateId").val(templateId);
  $("#expeditionFleetTemplateName").val(tempName);

  for (let shipId in ships) {
    $("#expeditionFleetTemplateShip_" + shipId).val(ships[shipId]);
  }

  $('#expeditionFleetTemplateHoldingTimeSelect').val(selectedExpeditionTime.toString()).ogameDropDown('select', selectedExpeditionTime.toString());
  $('#expeditionFleetTemplateSpeedWarning').css({
    'display': 'none'
  });

  if (allowedSpeedsInExpeditionTemplate.indexOf(selectedSpeed) === -1) {
    $('#expeditionFleetTemplateSpeedWarning').css({
      'display': 'flex'
    });
  }

  let speedToSelect = allowedSpeedsInExpeditionTemplate.find(speed => speed >= selectedSpeed);
  $('#expeditionFleetTemplateSpeedSelect').val(speedToSelect.toString()).ogameDropDown('select', speedToSelect.toString());
}

function reinitializeExpeditionFleetTemplateOGameDropdown() {
  $('#expeditionFleetTemplateForm select').ogameDropDown('destroy');
  $('#expeditionFleetTemplateForm span.dropdown.currentlySelected').remove();
  $('#expeditionFleetTemplateForm select').ogameDropDown();
}
const FLEET_DISPATCH_PAGE1 = 'fleet1';
const FLEET_DISPATCH_PAGE2 = 'fleet2';

function getResourcesFromHeader(resourceId) {
  let value = $('#resources_' + resourceId).data('raw');
  return parseInt(value);
}

function getKeyCode(e) {
  if (window.event) {
    return window.event.keyCode;
  } else if (e) {
    return e.which;
  }

  return null;
}

function FleetDispatcher(cfg) {
  this.fleetHelper = new FleetHelper(cfg);
  this.loading = false;
  this.lifeformEnabled = cfg.lifeformEnabled;
  this.checkTargetUrl = cfg.checkTargetUrl;
  this.sendFleetUrl = cfg.sendFleetUrl;
  this.saveSettingsUrl = cfg.saveSettingsUrl;
  this.fleetBoxOrder = cfg.fleetBoxOrder || {};
  this.token = cfg.token || null;
  this.currentPlanet = cfg.currentPlanet;
  this.targetPlanet = cfg.targetPlanet || null;
  this.targetInhabited = cfg.targetInhabited || false;
  this.targetPlayerId = cfg.targetPlayerId || this.fleetHelper.PLAYER_ID_SPACE;
  this.targetPlayerName = cfg.targetPlayerName || '';
  this.targetPlayerColorClass = cfg.targetPlayerColorClass || '';
  this.targetPlayerRankIcon = cfg.targetPlayerRankIcon || '';
  this.cargoCapacity = cfg.cargoCapacity;
  this.fuelCapacity = cfg.fuelCapacity;
  this.currentPage = FLEET_DISPATCH_PAGE1;
  this.shipsOnPlanet = cfg.shipsOnPlanet || [];
  this.shipsToSend = cfg.shipsToSend || [];
  this.useHalfSteps = cfg.useHalfSteps || false;
  this.planets = cfg.planets || [];
  this.standardFleets = cfg.standardFleets || [];
  this.expeditionFleetTemplates = cfg.expeditionFleetTemplates || [];
  this.unions = cfg.unions || [];
  this.orders = [];
  this.orderNames = cfg.orderNames || [];
  this.orderDescriptions = cfg.orderDescriptions || [];
  this.mission = cfg.mission || this.fleetHelper.MISSION_NONE;
  this.union = 0;
  this.targetIsStrong = false;
  this.targetIsOutlaw = false;
  this.targetIsBuddyOrAllyMember = false;
  this.playerIsOutlaw = false;
  this.retreatAfterDefenderRetreat = false;
  this.lootFoodOnAttack = cfg.lootFoodOnAttack;
  this.holdingTime = cfg.holdingTime;
  this.expeditionTime = cfg.expeditionTime;
  this.speedPercent = 10;
  this.cargoMetal = 0;
  this.cargoCrystal = 0;
  this.cargoDeuterium = 0;
  this.cargoFood = 0;
  this.prioMetal = cfg.LOOT_PRIO_METAL;
  this.prioCrystal = cfg.LOOT_PRIO_CRYSTAL;
  this.prioDeuterium = cfg.LOOT_PRIO_DEUTERIUM;
  this.prioFood = cfg.LOOT_PRIO_FOOD;
  this.metalOnPlanet = cfg.metalOnPlanet;
  this.crystalOnPlanet = cfg.crystalOnPlanet;
  this.deuteriumOnPlanet = cfg.deuteriumOnPlanet;
  this.foodOnPlanet = 0;

  if (this.lifeformEnabled) {
    this.foodOnPlanet = cfg.foodOnPlanet;
  }

  this.fleetCount = cfg.fleetCount;
  this.maxFleetCount = cfg.maxFleetCount;
  this.expeditionCount = cfg.expeditionCount;
  this.maxExpeditionCount = cfg.maxExpeditionCount;
  this.warningsEnabled = cfg.warningsEnabled;
  this.playerId = cfg.playerId;
  this.hasAdmiral = cfg.hasAdmiral;
  this.hasCommander = cfg.hasCommander;
  this.isOnVacation = cfg.isOnVacation;
  this.moveInProgress = cfg.moveInProgress;
  this.planetCount = cfg.planetCount;
  this.explorationCount = cfg.explorationCount;
  this.apiDataJson = cfg.apiDataJson;
  this.apiCommonData = cfg.apiCommonData;
  this.apiTechData = cfg.apiTechData;
  this.apiDefenseData = cfg.apiDefenseData;
  this.apiShipBaseData = cfg.apiShipBaseData;
  this.loca = cfg.loca;
  this.locadyn = cfg.locadyn;
  this.errorCodeMap = cfg.errorCodeMap;
  this.urlFleetCheck = cfg.urlFleetCheck;
  this.additionalFlightSpeed = 0;
  this.timerTimes = null;
  this.fetchTargetPlayerDataTimeout = null;
  this.deferred = [];
  this.emptySystems = cfg.emptySystems;
  this.inactiveSystems = cfg.inactiveSystems;
}

FleetDispatcher.prototype.init = function () {
  this.initFleet1();
  this.initFleet2();
  let that = this;
  $(function () {
    $(".sortable").sortable({
      handle: ".move-box",
      tolerance: "pointer",
      revert: true,
      update: function (event, ui) {
        a = $("#fleet2 #buttonz > div");
        param = {};
        that.appendTokenParams(param);

        for (let i = 0; i < a.length; i++) {
          param[a[i].id] = i;
        }

        $.post(that.saveSettingsUrl, param, function (data) {
          data = JSON.parse(data);
          that.updateToken(data.newAjaxToken);
          token = data.newAjaxToken;
        });
      }
    });
    $(".sortable").disableSelection();
  });
  $('#fleetdispatchcomponent').on('keypress', async function (e) {
    if (getKeyCode(e) === 13) {
      e.preventDefault();
      e.stopPropagation();

      if ($('#fleet1').is(':visible')) {
        await new Promise((resolve, reject) => setTimeout(() => resolve(), 250));
        that.trySubmitFleet1();
      } else if ($('#fleet2').is(':visible')) {
        // we have to wait to the update of a token because it already started communication with backend
        // should not trigger really but just as a safety measure
        if (!that.fetchTargetPlayerDataTimeout) {
          await new Promise((resolve, reject) => setTimeout(() => resolve(), 250));
          that.trySubmitFleet2();
        }
      }

      return false;
    }
  });
};

FleetDispatcher.prototype.displayErrors = function (errors) {
  // only display the first error
  let error = errors[0] || undefined;

  if (error) {
    fadeBox(error.message, true);
  }
};

FleetDispatcher.prototype.refresh = function () {
  switch (this.currentPage) {
    case FLEET_DISPATCH_PAGE1:
      this.refreshFleet1();
      break;

    case FLEET_DISPATCH_PAGE2:
      this.refreshFleet2();
      break;
  }
};

FleetDispatcher.prototype.switchToPage = function (page) {
  let that = this;

  if (page === this.currentPage) {
    return;
  }

  if (page === FLEET_DISPATCH_PAGE1) {
    this.currentPage = page;
    $('#' + FLEET_DISPATCH_PAGE1).show();
    $('#' + FLEET_DISPATCH_PAGE2).hide();
    that.focusSubmitFleet1();
  }

  if (page === FLEET_DISPATCH_PAGE2) {
    this.currentPage = page;
    $('#' + FLEET_DISPATCH_PAGE1).hide();
    $('#' + FLEET_DISPATCH_PAGE2).show();
    this.setTargetType(this.targetPlanet.type);
    that.focusSendFleet();
  }

  if (this.currentPage === FLEET_DISPATCH_PAGE1 && this.timerTimes !== null) {
    clearInterval(this.timerTimes);
    this.timerTimes = null;
  } // create timer to refresh fleet arrival and return times


  if (this.currentPage === FLEET_DISPATCH_PAGE2) {
    if (this.timerTimes === null) {
      this.timerTimes = setInterval(function () {
        that.refreshFleetTimes();
      }, 1000);
    }
  }

  this.refresh();
};

FleetDispatcher.prototype.startLoading = function () {
  this.loading = true;
  $('#fleetdispatchcomponent .ajax_loading').show();
};

FleetDispatcher.prototype.stopLoading = function () {
  this.loading = false;
  $('#fleetdispatchcomponent .ajax_loading').hide();
};

FleetDispatcher.prototype.updateToken = function (tokenNew) {
  token = tokenNew;
};

FleetDispatcher.prototype.appendTokenParams = function (params) {
  params.token = token;
};

FleetDispatcher.prototype.updateEmptySystems = function (newData) {
  this.emptySystems = newData;
};

FleetDispatcher.prototype.updateInactiveSystems = function (newData) {
  this.inactiveSystems = newData;
};

FleetDispatcher.prototype.appendShipParams = function (params) {
  this.shipsToSend.forEach(function (ship) {
    params['am' + ship.id] = ship.number;
  });
};

FleetDispatcher.prototype.appendTargetParams = function (params) {
  params.galaxy = this.targetPlanet.galaxy;
  params.system = this.targetPlanet.system;
  params.position = this.targetPlanet.position;
  params.type = this.targetPlanet.type;
};

FleetDispatcher.prototype.appendCargoParams = function (params) {
  params.metal = this.cargoMetal;
  params.crystal = this.cargoCrystal;
  params.deuterium = this.cargoDeuterium;

  if (this.lifeformEnabled) {
    params.food = this.cargoFood;
  }
};

FleetDispatcher.prototype.appendPrioParams = function (params) {
  params.prioMetal = this.prioMetal;
  params.prioCrystal = this.prioCrystal;
  params.prioDeuterium = this.prioDeuterium;

  if (this.lifeformEnabled) {
    params.prioFood = this.prioFood;
  }
};
/**
 * FLEET 1
 */


FleetDispatcher.prototype.initFleet1 = function () {
  initToggleHeader('fleet1');
  let that = this;
  let elem = $('#fleet1');
  elem.find('select.combatunits').ogameDropDown();
  that.refresh();
  elem.on('click', '#continueToFleet2', async function (e) {
    e.preventDefault();
    await new Promise((resolve, reject) => setTimeout(() => resolve(), 250));
    that.trySubmitFleet1();
  });
  elem.on('keyup', '#technologies li input', function (e) {
    e.preventDefault();
    let shipId = parseInt($(e.currentTarget).closest('li').data('technology'));
    let number = getValue($(e.currentTarget).val());
    that.selectShip(shipId, number);
  });
  elem.on('focusout', '#technologies li input', function (e) {
    e.preventDefault();
    let shipId = parseInt($(e.currentTarget).closest('li').data('technology'));
    let number = getValue($(e.currentTarget).val());
    that.selectShip(shipId, number);
    that.refresh();
  });
  elem.on('click', '#technologies li .icon', function (e) {
    e.preventDefault();
    let shipId = parseInt($(e.currentTarget).closest('li').data('technology'));

    if (that.getNumberOfShipsSelected(shipId) < that.getNumberOfShipsOnPlanet(shipId)) {
      that.selectMaxShips(shipId);
    } else {
      that.selectShip(shipId, 0);
    }

    that.refresh();
    that.focusSubmitFleet1();
  });
  elem.on('click', '#sendall', function (e) {
    e.preventDefault();
    that.selectAllShips();
    that.refresh();
    that.focusSubmitFleet1();
  });
  elem.on('click', '#resetall', function (e) {
    e.preventDefault();
    that.resetShips();
    that.refresh();
    that.focusSubmitFleet1();
  });
  elem.on('click', '#combatunits', function (e) {
    e.preventDefault();
    initStandardFleet();
  });
  elem.on('change', '#standardfleet', function (e) {
    let standardFleetId = getValue($('select.combatunits').val());
    that.selectStandardFleet(standardFleetId);
    that.refresh();
  });
  elem.on('change', '#expeditionFleetTemplateSelect', function (e) {
    let expeditionFleetTemplateId = getValue($('#expeditionFleetTemplateSelect').val());
    that.selectExpeditionFleet(expeditionFleetTemplateId);
    that.refresh();
  });
};

FleetDispatcher.prototype.focusSubmitFleet1 = function () {
  $('#continueToFleet2').focus();
};

FleetDispatcher.prototype.hasShipsSelected = function () {
  return this.getTotalNumberOfShipsSelected() > 0;
};

FleetDispatcher.prototype.hasFreeSlots = function () {
  return this.maxFleetCount - this.fleetCount > 0;
};

FleetDispatcher.prototype.hasEnoughFuel = function () {
  return this.deuteriumOnPlanet >= this.getConsumption();
};

FleetDispatcher.prototype.validateFleet1 = function (onError, onSuccess) {
  if (!this.hasShipsSelected()) {
    this.displayErrors([{
      message: this.loca.LOCA_FLEET_NO_SELECTION
    }]);
    return false;
  }

  if (!this.hasFreeSlots()) {
    this.displayErrors([{
      message: this.loca.LOCA_FLEET_NO_FREE_SLOTS
    }]);
    return false;
  }

  return true;
};

FleetDispatcher.prototype.trySubmitFleet1 = function () {
  if (this.validateFleet1() === false) {
    return;
  }

  this.switchToPage(FLEET_DISPATCH_PAGE2);
};

FleetDispatcher.prototype.refreshFleet1 = function () {
  this.refreshNavigationFleet1();
  this.refreshShips();
  this.refreshAPIData();
  this.refreshStatusBarFleet();
};

FleetDispatcher.prototype.refreshNavigationFleet1 = function () {
  let invalidInfo = '';

  if (!this.hasShipsSelected()) {
    $('#continueToFleet2').attr('class', 'continue off');
    invalidInfo = this.loca.LOCA_FLEET_NO_SELECTION;
  } else if (!this.hasFreeSlots()) {
    $('#continueToFleet2').attr('class', 'continue off');
    invalidInfo = this.loca.LOCA_FLEET_NO_FREE_SLOTS;
  } else {
    $('#continueToFleet2').attr('class', 'continue on');
  }

  $('#allornone .info').html(invalidInfo);
};

FleetDispatcher.prototype.refreshShips = function () {
  let that = this;
  $('#fleet1 #technologies li').each(function (i, elem) {
    const shipId = $(elem).data('technology');
    const ship = that.findShip(shipId);
    const inputElem = $(elem).find('input');
    const oldValue = inputElem.val() === '' ? '' : parseInt(inputElem.val());
    const number = ship?.number ?? '';

    if (oldValue !== number) {
      inputElem.val(number);
      const event = new Event('change');
      inputElem.get(0).dispatchEvent(event);
    }
  });
};

FleetDispatcher.prototype.refreshAPIData = function () {
  let apiShipData = this.shipsToSend.map(function (ship) {
    return [ship.id, ship.number];
  });

  if (apiShipData.length < 1) {
    apiShipData = this.apiShipBaseData;
  }

  let apiDataOld = [].concat(this.apiCommonData).concat(this.apiTechData).concat(apiShipData).concat(this.apiDefenseData).map(function (item) {
    return item.join(';');
  }).join('|');
  let apiData = JSON.parse(JSON.stringify(this.apiDataJson));

  if (this.shipsToSend.length > 0) {
    Object.keys(apiData.ships).forEach(key => apiData.ships[key]['amount'] = 0);
    this.shipsToSend.forEach(ship => {
      apiData.ships[ship.id] = this.apiDataJson.ships[ship.id];
      apiData.ships[ship.id].amount = ship.number;
    });
  }

  let content = JSON.stringify(apiData);
  let tooltip = document.createElement('div');
  tooltip.textContent = this.loca.LOCA_API_FLEET_DATA;
  tooltip.append(document.createElement('br'));
  tooltip.append(document.createTextNode('API 1:'));
  let oldInput = document.createElement('input');
  oldInput.setAttribute('id', 'FLEETAPI');
  oldInput.setAttribute('readonly', '1');
  oldInput.setAttribute('onclick', 'select()');
  oldInput.setAttribute('value', apiDataOld ?? '');
  oldInput.value = apiDataOld ?? '';
  tooltip.appendChild(oldInput);
  tooltip.append(document.createElement('br'));
  tooltip.append(document.createTextNode('API 2:'));
  let jsonInput = document.createElement('input');
  jsonInput.setAttribute('id', 'FLEETAPI_JSON');
  jsonInput.setAttribute('readonly', '1');
  jsonInput.setAttribute('onclick', 'select()');
  jsonInput.setAttribute('value', content);
  jsonInput.value = content;
  tooltip.appendChild(jsonInput);
  changeTooltip($(".show_fleet_apikey"), tooltip.outerHTML);
};
/**
 * SHIP LOGIC
 */


FleetDispatcher.prototype.selectShip = function (shipId, number) {
  let shipsAvailable = this.getNumberOfShipsOnPlanet(shipId);
  number = Math.min(shipsAvailable, number);

  if (number <= 0) {
    this.removeShip(shipId);
  } else if (this.hasShip(shipId)) {
    this.updateShip(shipId, number);
  } else {
    this.addShip(shipId, number);
  }

  this.resetCargo();
};

FleetDispatcher.prototype.addShip = function (shipId, number) {
  this.shipsToSend.push({
    id: shipId,
    number: number
  });
};

FleetDispatcher.prototype.findShip = function (shipId) {
  return this.shipsToSend.find(function (ship) {
    return ship.id === shipId;
  });
};

FleetDispatcher.prototype.getNumberOfShipsSelected = function (shipId) {
  let ship = this.findShip(shipId);

  if (ship !== undefined) {
    return ship.number;
  }

  return 0;
};

FleetDispatcher.prototype.hasShip = function (shipId) {
  return this.findShip(shipId) !== undefined;
};

FleetDispatcher.prototype.hasColonizationShip = function () {
  return this.hasShip(this.SHIP_ID_COLONIZATION);
};

FleetDispatcher.prototype.hasRecycler = function () {
  return this.hasShip(this.SHIP_ID_RECYCLER);
};

FleetDispatcher.prototype.hasValidTarget = function () {
  return (this.targetPlanet.galaxy !== this.currentPlanet.galaxy || this.targetPlanet.system !== this.currentPlanet.system || this.targetPlanet.position !== this.currentPlanet.position || this.targetPlanet.type !== this.currentPlanet.type) && this.targetPlanet.galaxy > 0 && this.targetPlanet.system > 0 && this.targetPlanet.position > 0;
};

FleetDispatcher.prototype.removeShip = function (shipId) {
  let shipIndex = this.shipsToSend.findIndex(function (ship) {
    return ship.id === shipId;
  });

  if (shipIndex != -1) {
    this.shipsToSend.splice(shipIndex, 1);
  }
};

FleetDispatcher.prototype.updateShip = function (shipId, number) {
  let ship = this.findShip(shipId);

  if (ship) {
    ship.number = number;
  }
};

FleetDispatcher.prototype.getNumberOfShipsOnPlanet = function (shipId) {
  let ship = this.shipsOnPlanet.find(function (ship) {
    return ship.id === shipId;
  });

  if (ship) {
    return ship.number;
  }

  return 0;
};

FleetDispatcher.prototype.getTotalNumberOfShipsSelected = function () {
  let numberOfShipsSelected = 0;
  this.shipsToSend.forEach(function (ship) {
    numberOfShipsSelected += ship.number;
  });
  return numberOfShipsSelected;
};

FleetDispatcher.prototype.getShipIds = function () {
  return this.shipsToSend.map(function (ship) {
    return ship.id;
  });
};

FleetDispatcher.prototype.resetShips = function () {
  this.shipsToSend = [];
};

FleetDispatcher.prototype.selectAllShips = function () {
  let that = this;
  this.shipsOnPlanet.forEach(function (ship) {
    that.selectShip(ship.id, ship.number);
  });
};

FleetDispatcher.prototype.selectMaxShips = function (shipId) {
  let number = this.getNumberOfShipsOnPlanet(shipId);
  this.selectShip(shipId, number);
};

FleetDispatcher.prototype.selectShips = function (ships) {
  for (let shipId in ships) {
    let number = ships[shipId];
    this.selectShip(parseInt(shipId), number);
  }
};

FleetDispatcher.prototype.selectStandardFleet = function (standardFleetId) {
  let standardFleet = this.standardFleets.find(function (item) {
    return item.id === standardFleetId;
  });

  if (standardFleet === undefined || standardFleet.ships === undefined) {
    return;
  }

  this.selectShips(standardFleet.ships);
};

FleetDispatcher.prototype.selectExpeditionFleet = function (expeditionFleetTemplateId) {
  this.resetShips();
  let speedSelect = $('#speedPercentage');

  if (speedSelect && speedSelect.length) {
    speedSelect.data('percentageBarInstance').setValue(10);
  }

  $('#expeditiontime').val('1').ogameDropDown('select', '1');
  this.refresh();
  this.focusSubmitFleet1();
  let expeditionFleetTemplate = expeditionFleetTemplates.find(item => item.id === expeditionFleetTemplateId);

  if (!expeditionFleetTemplate || !expeditionFleetTemplate.ships) {
    return;
  }

  this.selectShips(expeditionFleetTemplate.ships);

  if (speedSelect && speedSelect.length) {
    let speedToSelect = allowedSpeedsInExpeditionTemplate.find(speed => speed >= expeditionFleetTemplate.fleetSpeed);
    speedSelect.data('percentageBarInstance').setValue(speedToSelect / 10);
  }

  $('#position').val(EXPEDITION_POSITION);
  $('#expeditiontime').val(expeditionFleetTemplate.expeditionTime.toString()).ogameDropDown('select', expeditionFleetTemplate.expeditionTime.toString());
  this.updateTarget();
};
/**
 * FLEET 2
 */


FleetDispatcher.prototype.initFleet2 = function () {
  // @todo jquery is loaded twice
  addPercentageBarPlugin();
  initToggleHeader('fleet2'); // reorder fleet-box snippets based on settings

  let reorderFleetBox = Object.fromEntries(Object.entries(this.fleetBoxOrder).sort(([, a], [, b]) => a - b));
  let parent = $("#fleet2 #buttonz");

  for (let fleetBox in reorderFleetBox) {
    let child = $("#fleet2 #buttonz #" + fleetBox);
    $(parent).append(child);
  }

  let that = this;
  let elem = $('#fleet2').off();
  $('#speedPercentage').percentageBar().on('change', function (e) {
    that.setFleetPercent(e.value);
    that.refresh();
  });
  elem.find('#slbox').ogameDropDown();
  elem.find('#aksbox').ogameDropDown();
  elem.on('click', '#backToFleet1', function (e) {
    e.preventDefault();
    that.switchToPage(FLEET_DISPATCH_PAGE1);
  }); // clear inputs on focus

  elem.on('focus', '#galaxy', function () {
    clearInput('#galaxy');
    that.targetPlanet.galaxy = '';
    that.refreshFleet2();
  });
  elem.on('focus', '#system', function () {
    clearInput('#system');
    that.targetPlanet.system = '';
    that.refreshFleet2();
  });
  elem.on('focus', '#position', function () {
    clearInput('#position');
    that.targetPlanet.position = '';
    that.refreshFleet2();
  });
  elem.on('keyup', '#galaxy, #system, #position', function (e) {
    let coordinatesCount = (1 * $("#galaxy").val() > 0 ? 1 : 0) + (1 * $("#system").val() > 0 ? 1 : 0) + (1 * $("#position").val() > 0 ? 1 : 0);
    that.updateTarget(coordinatesCount === 3);
    that.updateTargetDropDowns();
    that.refresh();

    if (coordinatesCount !== 3) {
      that.clearMissions();
      that.updateTargetDropDowns();
    }
  });
  elem.on('click', '#pbutton', function (e) {
    e.preventDefault();
    that.clearMissions();
    that.setTargetType(that.fleetHelper.PLANETTYPE_PLANET);
    that.updateTargetDropDowns();
    that.refresh();
  });
  elem.on('click', '#mbutton', function (e) {
    e.preventDefault();
    that.clearMissions();
    that.setTargetType(that.fleetHelper.PLANETTYPE_MOON);
    that.updateTargetDropDowns();
    that.refresh();
  });
  elem.on('click', '#dbutton', function (e) {
    e.preventDefault();
    that.clearMissions();
    that.setTargetType(that.fleetHelper.PLANETTYPE_DEBRIS);
    that.updateTargetDropDowns();
    that.refresh();
  });
  elem.on('change', '#slbox', function (e) {
    e.preventDefault();
    that.selectShortLink($(e.currentTarget));
    that.updateTarget();
    that.refresh();
  });
  elem.on('change', '#aksbox', function (e) {
    e.preventDefault();
    that.selectCombatUnion($(e.currentTarget));
    that.updateTarget();
    that.refresh();
  });
  elem.on('click', '#selectMaxMetal', function (e) {
    e.preventDefault();
    that.selectMaxMetal();
    that.refresh();
    that.focusSendFleet();
  });
  elem.on('click', '#selectMinMetal', function (e) {
    e.preventDefault();
    that.selectMinMetal();
    that.refresh();
    that.focusSendFleet();
  });
  elem.on('click', '#selectMaxCrystal', function (e) {
    e.preventDefault();
    that.selectMaxCrystal();
    that.refresh();
    that.focusSendFleet();
  });
  elem.on('click', '#selectMinCrystal', function (e) {
    e.preventDefault();
    that.selectMinCrystal();
    that.refresh();
    that.focusSendFleet();
  });
  elem.on('click', '#selectMaxDeuterium', function (e) {
    e.preventDefault();
    that.selectMaxDeuterium();
    that.refresh();
    that.focusSendFleet();
  });
  elem.on('click', '#selectMinDeuterium', function (e) {
    e.preventDefault();
    that.selectMinDeuterium();
    that.refresh();
    that.focusSendFleet();
  });
  elem.on('click', '#selectMaxFood', function (e) {
    e.preventDefault();
    that.selectMaxFood();
    that.refresh();
    that.focusSendFleet();
  });
  elem.on('click', '#selectMinFood', function (e) {
    e.preventDefault();
    that.selectMinFood();
    that.refresh();
    that.focusSendFleet();
  });
  elem.on('click', '#allresources', function (e) {
    e.preventDefault();
    that.selectMaxAll();
    that.refresh();
    that.focusSendFleet();
  });
  elem.on('keyup', '#metal', function (e) {
    that.updateMetal();
    that.refresh();
  });
  elem.on('change', '#metal', function (e) {
    that.updateMetal();
    that.refresh();
  });
  elem.on('keyup', '#crystal', function (e) {
    that.updateCrystal();
    that.refresh();
  });
  elem.on('change', '#crystal', function (e) {
    that.updateCrystal();
    that.refresh();
  });
  elem.on('keyup', '#deuterium', function (e) {
    that.updateDeuterium();
    that.refresh();
  });
  elem.on('change', '#deuterium', function (e) {
    that.updateDeuterium();
    that.refresh();
  });
  elem.on('keyup', '#food', function (e) {
    that.updateFood();
    that.refresh();
  });
  elem.on('change', '#food', function (e) {
    that.updateFood();
    that.refresh();
  });
  elem.on('click', '#sendFleet', async function (e) {
    e.preventDefault();
    await new Promise((resolve, reject) => setTimeout(() => resolve(), 250));
    that.trySubmitFleet2();
  });
  elem.on('click', '#missions > li > a', function (e) {
    e.preventDefault();
    let mission = parseInt($(e.currentTarget).data('mission') || this.fleetHelper.MISSION_NONE);
    that.selectMission(mission);
    that.focusSendFleet();
  });
  elem.on('click', '.prioButton', function (e) {
    e.preventDefault();
    let type = $(e.currentTarget).attr('data-resource-type');
    let priority = parseInt($(e.currentTarget).attr('data-resource-prio'));
    that.selectPriority(type, priority);
    that.refresh();
    that.focusSendFleet();
  });

  FleetDispatcher.prototype.focusSendFleet = function () {
    $('#sendFleet').focus();
  };

  elem.on('change', 'input[name=retreatAfterDefenderRetreat]', function (e) {
    that.selectRetreatAfterDefenderRetreat($(e.currentTarget).is(':checked'));
  });
  elem.on('change', 'input[name=lootFoodOnAttack]', function (e) {
    that.selectLootFoodOnAttack($(e.currentTarget).is(':checked'));
  });
  elem.on('change keyup', '#holdingtime', function () {
    that.updateHoldingTime();
    that.refresh();
    that.focusSendFleet();
  });
  elem.on('change keyup', '#expeditiontime', function (e) {
    that.updateExpeditionTime();
    that.refresh();
    that.focusSendFleet();
  });
  this.fetchTargetPlayerData();
};

FleetDispatcher.prototype.validateFleet2 = function () {
  if (!this.hasValidTarget() || !this.hasMission()) {
    return false;
  }

  return true;
};

FleetDispatcher.prototype.trySubmitFleet2 = function () {
  clearTimeout(this.fetchTargetPlayerDataTimeout);
  this.fetchTargetPlayerDataTimeout = null;
  let that = this; // call refreshNavigationFleet2 to show error messages if any

  this.refreshNavigationFleet2(true);

  if ($("#sendFleet.off").length === 1) {
    return;
  }

  if (this.validateFleet2() === false) {
    return;
  }

  if (this.moveInProgress) {
    errorBoxDecision(this.loca.LOCA_ALL_NETWORK_ATTENTION, this.loca.LOCA_PLANETMOVE_BREAKUP_WARNING, this.loca.LOCA_ALL_YES, this.loca.LOCA_ALL_NO, function () {
      that.submitFleet2();
    });
  } else if (this.warningsEnabled && this.targetIsStrong && !this.targetIsOutlaw && !this.targetIsBuddyOrAllyMember && !this.playerIsOutlaw && this.fleetHelper.isAggressiveMission(this.mission)) {
    errorBoxDecision(this.loca.LOCA_ALL_NETWORK_ATTENTION, this.locadyn.locaAllOutlawWarning, this.loca.LOCA_ALL_YES, this.loca.LOCA_ALL_NO, function () {
      that.submitFleet2();
    });
  } else if (this.mission === this.fleetHelper.MISSION_COLONIZE && this.fleetHelper.COLONIZATION_ENABLED === true && !this.hasFreePlanetSlots()) {
    errorBoxDecision(this.loca.LOCA_ALL_NOTICE, this.loca.LOCA_FLEETSENDING_MAX_PLANET_WARNING, this.loca.LOCA_ALL_YES, this.loca.LOCA_ALL_NO, function () {
      that.submitFleet2();
    });
  } else {
    this.submitFleet2();
  }
};

FleetDispatcher.prototype.refreshFleet2 = function () {
  this.refreshNavigationFleet2();
  this.refreshTarget();
  this.refreshBriefing();
  this.refreshCargo();
  this.refreshPriorities();
};

FleetDispatcher.prototype.refreshTarget = function () {
  if (this.targetPlanet.type === this.fleetHelper.PLANETTYPE_PLANET) {
    $('#pbutton').attr('class', 'planet_selected');
  } else {
    $('#pbutton').attr('class', 'planet');
  }

  if (this.targetPlanet.type === this.fleetHelper.PLANETTYPE_DEBRIS) {
    $('#dbutton').attr('class', 'debris_selected');
  } else {
    $('#dbutton').attr('class', 'debris');
  }

  if (this.targetPlanet.type === this.fleetHelper.PLANETTYPE_MOON) {
    $('#mbutton').attr('class', 'moon_selected');
  } else {
    $('#mbutton').attr('class', 'moon');
  }

  $('#galaxy').val(this.targetPlanet.galaxy);
  $('#system').val(this.targetPlanet.system);
  $('#position').val(this.targetPlanet.position);
  $('#type').val(this.targetPlanet.type);
  $('#distanceValue').html(tsdpkt(this.getDistance()));
  let planetName = this.getOwnPlanetName(this.targetPlanet, this.targetPlanet.type);

  if (planetName !== undefined && planetName !== '') {
    $('#targetPlanetName').html(planetName);
  } else if (this.targetPlanet.type === this.fleetHelper.PLANETTYPE_PLANET) {
    $('#targetPlanetName').html(this.loca.LOCA_ALL_PLANET);
  } else if (this.targetPlanet.type === this.fleetHelper.PLANETTYPE_DEBRIS) {
    $('#targetPlanetName').html(this.loca.LOCA_FLEET_DEBRIS);
  } else if (this.targetPlanet.type === this.fleetHelper.PLANETTYPE_MOON) {
    $('#targetPlanetName').html(this.loca.LOCA_ALL_MOON);
  } // After we've chosen another Planet update the Missions


  this.refreshMissions();
};

FleetDispatcher.prototype.refreshBriefing = function () {
  this.refreshDuration();
  this.refreshConsumption();
  this.refreshStorage();
  this.refreshFleetTimes();
  this.refreshMaxSpeed();
  this.refreshEmptySystems();
  this.refreshInactiveSystems();
};

FleetDispatcher.prototype.refreshTargetPlanet = function () {
  let targetName = '[' + this.targetPlanet.galaxy + ':' + this.targetPlanet.system + ':' + this.targetPlanet.position + '] ' + (this.targetPlanet.type === this.fleetHelper.PLANETTYPE_DEBRIS ? this.loca.LOCA_FLEET_DEBRIS : this.targetPlanet.name);
  let elem = $('#fleet2 #targetPlanet');
  let tooltip = this.targetInhabited === true ? this.loca.LOCA_ALL_PLAYER + ': ' + this.targetPlayerName : '';
  elem.toggleClass('tooltip', this.targetInhabited).toggleClass('active', this.targetInhabited).attr('title', tooltip).html(targetName);
  changeTooltip(elem);
};

FleetDispatcher.prototype.refreshDuration = function () {
  let duration = this.getDuration();
  duration = !isNaN(duration) && isFinite(duration) ? duration : 0;
  $('#fleet2 #duration').html(formatTime(duration) + ' h');
};

FleetDispatcher.prototype.refreshConsumption = function () {
  let fuelCapacity = this.getFuelCapacity();
  let deuterium = getResourcesFromHeader('deuterium');
  let consumption = this.getConsumption();
  consumption = !isNaN(consumption) && isFinite(consumption) ? consumption : 0;
  let styleClass = consumption > fuelCapacity || consumption > deuterium ? 'overmark' : 'undermark';
  let fuelLevel = Math.ceil(100 * consumption / fuelCapacity);
  let htmlConsumption = '<span class="' + styleClass + '">' + tsdpkt(consumption) + ' (' + fuelLevel + '%)</span>';
  $('#fleet2 #consumption').html(htmlConsumption);
};

FleetDispatcher.prototype.refreshStorage = function () {
  let cargoSpace = this.getFreeCargoSpace();
  let styleClass = cargoSpace < 0 ? 'overmark' : 'undermark';
  let htmlStorage = '<span class="' + styleClass + '">' + tsdpkt(cargoSpace) + '</span>';
  $('#storage').html(htmlStorage);
};

FleetDispatcher.prototype.refreshFleetTimes = function () {
  let duration = this.getDuration();
  let holdingTime = 0;

  if (this.mission === this.fleetHelper.MISSION_EXPEDITION) {
    holdingTime = this.expeditionTime * 3600;
  }

  if (this.mission === this.fleetHelper.MISSION_HOLD) {
    holdingTime = this.holdingTime * 3600;
  }

  duration = !isNaN(duration) && isFinite(duration) ? duration : 0;
  holdingTime = !isNaN(holdingTime) && isFinite(holdingTime) ? holdingTime : 0;
  let arrivalTime = getFormatedDate(serverTime.getTime() + duration * 1000, '[d].[m].[y] [G]:[i]:[s]');
  let returnTime = getFormatedDate(serverTime.getTime() + (2 * duration + holdingTime) * 1000, '[d].[m].[y] [G]:[i]:[s]');
  $('#fleet2 #arrivalTime').html(arrivalTime);
  $('#fleet2 #returnTime').html(returnTime);

  if (this.mission === this.fleetHelper.MISSION_UNIONATTACK) {
    let union = this.getUnionData(this.union);

    if (union !== null) {
      let durationAKS = parseInt(union.time - serverTime.getTime() / 1000);
      let unionArrivalTime = formatTime(durationAKS);
      $('#durationAKS').html(unionArrivalTime);
    }
  }
};

FleetDispatcher.prototype.refreshMaxSpeed = function () {
  let maxSpeed = this.getMaxSpeed();
  $('#maxspeed').html(tsdpkt(maxSpeed));
};

FleetDispatcher.prototype.refreshEmptySystems = function () {
  $('#emptySystems').html(this.emptySystems);
};

FleetDispatcher.prototype.refreshInactiveSystems = function () {
  $('#inactiveSystems').html(this.inactiveSystems);
};

FleetDispatcher.prototype.getPlanetIcon = function (planetType, showTooltip) {
  showTooltip = showTooltip || true;
  let className = '';
  let name = '';

  switch (planetType) {
    case this.fleetHelper.PLANETTYPE_MOON:
      className = "moon";
      name = this.loca.LOCA_ALL_MOON;
      break;

    case this.fleetHelper.PLANETTYPE_DEBRIS:
      className = "tf";
      name = this.loca.LOCA_FLEET_DEBRIS;
      break;

    case this.fleetHelper.PLANETTYPE_PLANET:
    default:
      className = "planet";
      name = this.loca.LOCA_ALL_PLANET;
  }

  let title = '';

  if (showTooltip) {
    className += " tooltip js_hideTipOnMobile";
    title = ' title="' + name + '"';
  }

  return '<figure class="planetIcon ' + className + '"' + title + '></figure>';
};

FleetDispatcher.prototype.updateTarget = function (fetch = true) {
  let galaxy = clampInt(getValue($('#galaxy').val()), 1, this.fleetHelper.MAX_GALAXY, true);
  let system = clampInt(getValue($('#system').val()), 1, this.fleetHelper.MAX_SYSTEM, true);
  let position = clampInt(getValue($('#position').val()), 1, this.fleetHelper.MAX_POSITION, true);
  this.targetPlanet.galaxy = galaxy;
  this.targetPlanet.system = system;
  this.targetPlanet.position = position;

  if (this.targetPlanet.position === this.fleetHelper.EXPEDITION_POSITION) {
    this.targetPlanet.type = this.fleetHelper.PLANETTYPE_PLANET;
  }

  clearTimeout(this.fetchTargetPlayerDataTimeout);

  if (fetch && $('#fleet2').is(':visible')) {
    let that = this;
    this.fetchTargetPlayerDataTimeout = setTimeout(() => {
      that.deferred.push($.Deferred()); // check if this is the only target fetch in queue or there are other pending calls

      if (that.deferred.length === 1) {
        that.fetchTargetPlayerData();
      }

      that.deferred[that.deferred.length - 1].done(() => {
        if (that.deferred.length !== 0) {
          that.fetchTargetPlayerData();
        }
      });
    }, 500);
  }
};

FleetDispatcher.prototype.updateTargetDropDowns = function () {
  this.resetDropDown("#slbox");
  this.resetDropDown("#aksbox");
};

FleetDispatcher.prototype.resetDropDown = function (elementId) {
  let coords = [this.targetPlanet.galaxy, this.targetPlanet.system, this.targetPlanet.position, this.targetPlanet.type].join('#');
  let selection = $(elementId).find("option[value^=\"" + coords + "\"]");

  if (selection.length === 0) {
    $(elementId).ogameDropDown('select', '-');
  }
};

FleetDispatcher.prototype.selectShortLink = function (elem) {
  let value = elem.val();
  let parts = value.split('#');

  if (parts instanceof Array && parts.length >= 5) {
    $('#galaxy').val(parts[0]);
    $('#system').val(parts[1]);
    $('#position').val(parts[2]);
    this.setTargetType(parseInt(parts[3]), true);
  }
};

FleetDispatcher.prototype.setTargetType = function (type, doNotFetchDataAboutTarget) {
  this.targetPlanet.type = type;

  if (!doNotFetchDataAboutTarget && $('#fleet2').is(':visible')) {
    clearTimeout(this.fetchTargetPlayerDataTimeout);
    this.fetchTargetPlayerDataTimeout = null;
    this.fetchTargetPlayerData();
  }
};

FleetDispatcher.prototype.selectCombatUnion = function (elem) {
  let value = elem.val();
  let parts = value.split('#');

  if (parts instanceof Array && parts.length >= 5) {
    $('#galaxy').val(parts[0]);
    $('#system').val(parts[1]);
    $('#position').val(parts[2]);
    this.setTargetType(parseInt(parts[3]), true);
    this.union = parseInt(parts[5]);
  } else {
    this.mission = this.fleetHelper.MISSION_NONE;
    this.union = 0;
  }
};

FleetDispatcher.prototype.setFleetPercent = function (speedPercent) {
  this.speedPercent = speedPercent;
};

FleetDispatcher.prototype.findOwnPlanet = function (coords, type) {
  if (!coords) return undefined;
  if (!type) return undefined;
  let planet = this.planets.find(function (elem) {
    if (elem.galaxy != coords.galaxy) return false;
    if (elem.system != coords.system) return false;
    if (elem.position != coords.position) return false;
    if (elem.type != type) return false;
    return true;
  });
  return planet;
};

FleetDispatcher.prototype.getOwnPlanetName = function (coords, type) {
  if (!coords) return undefined;
  if (!type) return undefined;
  let planet = this.findOwnPlanet(coords, type);

  if (planet) {
    return planet.name;
  }

  return undefined;
};

FleetDispatcher.prototype.getDistance = function () {
  return this.fleetHelper.calcDistance(this.currentPlanet, this.targetPlanet, this.emptySystems, this.inactiveSystems);
};

FleetDispatcher.prototype.getConsumption = function () {
  return this.fleetHelper.calcConsumption(this.shipsToSend, this.getDistance(), this.speedPercent, this.getHoldingTime(), this.mission);
};

FleetDispatcher.prototype.getDuration = function () {
  let distance = this.getDistance();
  let maxSpeed = this.getMaxSpeed();
  return this.fleetHelper.calcDuration(distance, maxSpeed, this.speedPercent, this.mission);
};

FleetDispatcher.prototype.getHoldingTime = function () {
  switch (this.mission) {
    case this.fleetHelper.MISSION_EXPEDITION:
      return this.expeditionTime;

    case this.fleetHelper.MISSION_HOLD:
      return this.holdingTime;

    default:
      return 0;
  }
};

FleetDispatcher.prototype.getMaxSpeed = function () {
  let shipIds = this.getShipIds();
  return this.fleetHelper.getMaxSpeed(shipIds);
};

FleetDispatcher.prototype.getCargoCapacity = function () {
  let that = this;
  let cargoCapacity = 0;
  this.shipsToSend.forEach(function (ship) {
    cargoCapacity += that.fleetHelper.calcCargoCapacity(ship.id, ship.number);
  });
  return Math.floor(cargoCapacity);
};

FleetDispatcher.prototype.getFuelCapacity = function () {
  let that = this;
  let fuelCapacity = 0;
  this.shipsToSend.forEach(function (ship) {
    fuelCapacity += that.fleetHelper.calcFuelCapacity(ship.id, ship.number);
  });
  return Math.floor(fuelCapacity);
};

FleetDispatcher.prototype.getFreeCargoSpace = function () {
  return this.getCargoCapacity() - this.cargoMetal - this.cargoCrystal - this.cargoDeuterium - this.cargoFood;
};

FleetDispatcher.prototype.getUsedCargoSpace = function () {
  return this.cargoMetal + this.cargoCrystal + this.cargoDeuterium + this.cargoFood;
};

FleetDispatcher.prototype.setOrders = function (ordersNew) {
  this.orders = ordersNew;
};

FleetDispatcher.prototype.setTargetInhabited = function (inhabitedNew) {
  this.targetInhabited = inhabitedNew;
};

FleetDispatcher.prototype.setTargetPlayerId = function (targetPlayerIdNew) {
  this.targetPlayerId = targetPlayerIdNew;
};

FleetDispatcher.prototype.setTargetPlayerName = function (targetPlayerNameNew) {
  this.targetPlayerName = targetPlayerNameNew;
};

FleetDispatcher.prototype.setTargetIsStrong = function (targetIsStrongNew) {
  this.targetIsStrong = targetIsStrongNew;
};

FleetDispatcher.prototype.setTargetIsOutlaw = function (targetIsOutlawNew) {
  this.targetIsOutlaw = targetIsOutlawNew;
};

FleetDispatcher.prototype.setTargetIsBuddyOrAllyMember = function (targetIsBuddyOrAllyMemberNew) {
  this.targetIsBuddyOrAllyMember = targetIsBuddyOrAllyMemberNew;
};

FleetDispatcher.prototype.setPlayerIsOutlaw = function (playerIsOutlawNew) {
  this.playerIsOutlaw = playerIsOutlawNew;
};

FleetDispatcher.prototype.setTargetPlayerColorClass = function (targetPlayerColorClassNew) {
  this.targetPlayerColorClass = targetPlayerColorClassNew;
};

FleetDispatcher.prototype.setTargetPlayerRankIcon = function (targetPlayerRankIconNew) {
  this.targetPlayerRankIcon = targetPlayerRankIconNew;
};

FleetDispatcher.prototype.setTargetPlanet = function (targetPlanetNew) {
  this.targetPlanet = targetPlanetNew;
};

FleetDispatcher.prototype.fetchTargetPlayerData = function () {
  if (!this.fetchTargetPlayerDataTimeout) {
    this.fetchTargetPlayerDataTimeout = true;
  }

  let that = this; // Prevent spaming the Planets (Destination)

  this.startLoading();
  let params = {};
  this.appendShipParams(params);
  this.appendTargetParams(params);
  this.appendTokenParams(params);
  params.union = this.union;

  if (this.hasColonizationShip()) {
    params.cs = 1;
  }

  if (this.hasRecycler()) {
    params.recycler = 1;
  }

  $.post(this.checkTargetUrl, params, function (response) {
    let data = JSON.parse(response);
    let status = data.status || 'failure';
    $("#additionalFleetSpeedInfo").html(data.additionalFlightSpeedinfo);
    that.fleetHelper.shipsData = data.shipsData;

    if (status === 'success') {
      let {
        targetPlanet
      } = data;

      if (targetPlanet && parseInt($('#galaxy').val()) === targetPlanet.galaxy && parseInt($('#system').val()) === targetPlanet.system && parseInt($('#position').val()) === targetPlanet.position) {
        that.refreshDataAfterAjax(data);
        that.refreshStatusBarFleet();
      }
    } else {
      that.setTargetPlayerNameOnStatusBarFleet();
      that.setTargetPlayerPlanetNameOnStatusBarFleet();

      if (that.currentPage === "fleet2") {
        that.clearMissions();
        that.updateTargetDropDowns();
        that.displayErrors(data.errors);
      }
    }

    if (that.currentPage === "fleet2") {
      if (that.mission !== that.fleetHelper.MISSION_NONE && !that.isMissionAvailable(that.mission)) {
        that.mission = that.fleetHelper.MISSION_NONE;
      } //select ACS attack if no mission is selected and if union is selected


      if (that.union !== 0 && that.hasMission() === false && that.isMissionAvailable(that.fleetHelper.MISSION_UNIONATTACK)) {
        that.selectMission(that.fleetHelper.MISSION_UNIONATTACK);
      }

      that.validateMissions();
    }

    that.updateToken(data.newAjaxToken);
    that.updateEmptySystems(data.emptySystems);
    that.updateInactiveSystems(data.inactiveSystems);
    that.refreshTargetPlanet();
    that.refreshFleet2();
    that.fetchTargetPlayerDataTimeout = null;
    that.stopLoading();

    if (data.bashingSystemLimitReached) {
      $('#attackMissionsDisabledBashingLimit').show();
    } else {
      $('#attackMissionsDisabledBashingLimit').hide();
    }

    let deferred = that.deferred.shift();

    if (deferred) {
      deferred.resolve();
    }
  });
};

FleetDispatcher.prototype.setTargetPlayerNameOnStatusBarFleet = function (serverResponse) {
  let elemTargetPlayerName = $('#statusBarFleet .targetPlayerName');
  let targetPlayerName = '';

  if (!serverResponse) {
    targetPlayerName = this.loca.LOCA_EVENTH_ENEMY_INFINITELY_SPACE;
  } else {
    if (serverResponse.targetPlanet && serverResponse.targetPlanet.type === this.fleetHelper.PLANETTYPE_DEBRIS) {
      targetPlayerName = this.loca.LOCA_EVENTH_ENEMY_INFINITELY_SPACE;
    } else {
      if (!serverResponse.targetPlayerName) {
        targetPlayerName = this.loca.LOCA_EVENTH_ENEMY_INFINITELY_SPACE;
      } else if (serverResponse.targetPlayerId === this.playerId) {
        targetPlayerName = serverResponse.targetPlayerName;
      } else {
        targetPlayerName = serverResponse.targetPlayerRankIcon + '<span class="status_abbr_{color}">{name}</span>';
        targetPlayerName = targetPlayerName.replace('{color}', serverResponse.targetPlayerColorClass);
        targetPlayerName = targetPlayerName.replace('{name}', serverResponse.targetPlayerName);
      }
    }
  }

  elemTargetPlayerName.closest('li').show();
  elemTargetPlayerName.html(targetPlayerName);
};

FleetDispatcher.prototype.setTargetPlayerPlanetNameOnStatusBarFleet = function (serverResponse) {
  let targetName;

  if (!serverResponse || serverResponse && !serverResponse.targetPlanet) {
    let planetIcon = this.getPlanetIcon(this.fleetHelper.PLANETTYPE_PLANET, false);
    targetName = `[${$('#galaxy').val()}:${$('#system').val()}:${$('#position').val()}] ${planetIcon} ?`;
  } else {
    let planetIcon = this.getPlanetIcon(serverResponse.targetPlanet.type, false);
    targetName = '[' + serverResponse.targetPlanet.galaxy + ':' + serverResponse.targetPlanet.system + ':' + serverResponse.targetPlanet.position + '] ' + planetIcon + serverResponse.targetPlanet.name;
  }

  $('#statusBarFleet .targetName').html(targetName);
};

FleetDispatcher.prototype.submitFleet2 = function (force) {
  force = force || false;
  let that = this;
  let params = {};
  this.appendTokenParams(params);
  this.appendShipParams(params);
  this.appendTargetParams(params);
  this.appendCargoParams(params);
  this.appendPrioParams(params);
  params.mission = this.mission;
  params.speed = this.speedPercent;
  params.retreatAfterDefenderRetreat = this.retreatAfterDefenderRetreat === true ? 1 : 0;
  params.lootFoodOnAttack = this.lootFoodOnAttack === true ? 1 : 0;
  params.union = this.union;
  if (force) params.force = force;
  params.holdingtime = this.getHoldingTime();
  this.startLoading();
  $.post(this.sendFleetUrl, params, function (response) {
    let data = JSON.parse(response); // request successful

    if (data.success === true) {
      fadeBox(data.message, false);
      $("#sendFleet").removeAttr("disabled");
      window.location = data.redirectUrl;
    } // request failed
    else {
      // @TODO display confirmation popup to infringe bashlimit rules
      if (data.responseArray && data.responseArray.limitReached && !data.responseArray.force) {
        that.updateToken(data.newAjaxToken || '');
        errorBoxDecision(that.loca.LOCA_ALL_NETWORK_ATTENTION, that.locadyn.localBashWarning, that.loca.LOCA_ALL_YES, that.loca.LOCA_ALL_NO, function () {
          that.submitFleet2(true);
        });
      } else {
        that.displayErrors(data.errors);
        that.updateToken(data.newAjaxToken || '');
        $("#sendFleet").removeAttr("disabled");
        that.stopLoading();
      }
    }
  });
};

FleetDispatcher.prototype.refreshNavigationFleet2 = function (displayErrors = false) {
  let invalidInfo = null;
  const sendFleetElement = document.getElementById('sendFleet');

  if (!this.hasShipsSelected()) {
    sendFleetElement.classList.add('off');
    sendFleetElement.classList.remove('on');
    invalidInfo = this.loca.LOCA_FLEET_NO_SELECTION;
  } else if (!this.hasMission()) {
    sendFleetElement.classList.add('off');
    sendFleetElement.classList.remove('on');
    invalidInfo = this.loca.LOCA_FLEETSENDING_NO_MISSION_SELECTED;
  } else if (!this.hasFreeSlots()) {
    sendFleetElement.classList.add('off');
    sendFleetElement.classList.remove('on');
    invalidInfo = this.loca.LOCA_FLEET_NO_FREE_SLOTS;
  } else if (!this.hasEnoughFuel()) {
    sendFleetElement.classList.add('off');
    sendFleetElement.classList.remove('on');
    invalidInfo = this.loca.LOCA_FLEETSENDING_NOT_ENOUGH_FOIL;
  } else {
    sendFleetElement.classList.add('on');
    sendFleetElement.classList.remove('off');
    sendFleetElement.removeAttribute('disabled');
  }

  if (displayErrors && invalidInfo != null) {
    this.displayErrors([{
      message: invalidInfo
    }]);
  }
};

FleetDispatcher.prototype.refreshStatusBarFleet = function () {
  this.hasValidTarget();
  let missionData = this.getMissionData(this.mission);
  let missionName = missionData !== null ? missionData.name : this.loca.LOCA_FLEET_NO_SELECTION;
  let planetIcon = this.getPlanetIcon(this.targetPlanet.type, false);
  let targetName = '[' + this.targetPlanet.galaxy + ':' + this.targetPlanet.system + ':' + this.targetPlanet.position + '] ' + planetIcon + (this.targetPlanet.type === this.fleetHelper.PLANETTYPE_DEBRIS ? this.loca.LOCA_FLEET_DEBRIS : this.targetPlanet.name);
  $('#statusBarFleet .missionName').text(missionName);
  $('#statusBarFleet .targetName').html(targetName);
  let elemTargetPlayerName = $('#statusBarFleet .targetPlayerName');

  if (this.targetPlanet.type === this.fleetHelper.PLANETTYPE_DEBRIS) {
    elemTargetPlayerName.closest('li').hide();
    elemTargetPlayerName.html('');
  } else {
    let targetPlayerName = '';

    if (this.targetPlayerId === 0 || this.fleetHelper.isPlayerSpace(this.targetPlayerId)) {
      targetPlayerName = this.loca.LOCA_EVENTH_ENEMY_INFINITELY_SPACE;
    } else if (this.targetPlayerId === this.playerId) {
      targetPlayerName = this.targetPlayerName;
    } else {
      targetPlayerName = this.targetPlayerRankIcon + '<span class="status_abbr_{color}">{name}</span>';
      targetPlayerName = targetPlayerName.replace('{color}', this.targetPlayerColorClass);
      targetPlayerName = targetPlayerName.replace('{name}', this.targetPlayerName);
    }

    elemTargetPlayerName.closest('li').show();
    elemTargetPlayerName.html(targetPlayerName);
  }
};

FleetDispatcher.prototype.clearMissions = function () {
  this.mission = this.fleetHelper.MISSION_NONE;

  for (let order in this.orders) {
    this.orders[order] = false;
  }
};

FleetDispatcher.prototype.validateMissions = function () {
  let invalid = false;

  if (!this.hasShipsSelected()) {
    invalid = true;
  } else if (!this.hasFreeSlots()) {
    invalid = true;
  } else if (!this.hasValidTarget() || Object.values(this.orders).indexOf(true) === -1) {
    invalid = true;
  }

  if (invalid) {
    this.clearMissions();
  }
};

FleetDispatcher.prototype.refreshMissions = function () {
  $('#missions>li>a.selected').removeClass('selected'); //select expedition if no mission is selected and if it is the only one available

  if (this.isOnlyMissionAvailable(this.fleetHelper.MISSION_EXPEDITION)) {
    if (this.hasMission() === false) {
      this.selectMission(this.fleetHelper.MISSION_EXPEDITION);
    }

    this.updateExpeditionTime();
  } // refresh mission buttons


  for (let mission in this.orders) {
    let missionData = this.getMissionData(mission);
    $('#missions>li#button' + mission).toggleClass('on', missionData.isAvailable === true).toggleClass('off', missionData.isAvailable === false);
  } // @TODO LOCA_FLEET_NO_SELECTION when no mission selected
  // refresh mission


  let missionData = this.getMissionData(this.mission);

  if (missionData !== null) {
    $('.missionName').text(missionData.name);
    $('.mission_description').text(missionData.description);
    $('#missions>li#button' + this.mission + '>a').toggleClass('selected', true);

    if (missionData.isAvailable === false) {
      $('.briefing_overlay').show();
      $('#missionNameWrapper').addClass('off');
    } else {
      $('.briefing_overlay').hide();
      $('#missionNameWrapper').removeClass('off');
    }
  } else {
    $('.briefing_overlay').show();
    $('#missionNameWrapper').addClass('off');
    $('.missionName').text(this.loca.LOCA_FLEET_NO_SELECTION);
    $('.mission_description').text('');
  }

  $('form input[name="mission"]').val(this.mission);
  $('#fightAfterRetreat,' + '#aks,' + '#holdtimeline,' + '#expeditiontimeline,' + '.prioButton,' + '.fleet_dispatch_toggle_wrap').hide();

  if (this.mission === this.fleetHelper.MISSION_ATTACK) {
    $('#fightAfterRetreat').show();
    $('.prioButton').show();
    $('.fleet_dispatch_toggle_wrap').show();
  }

  if (this.mission === this.fleetHelper.MISSION_UNIONATTACK) {
    $('#aks').show();
    $('.prioButton').show();
    $('.fleet_dispatch_toggle_wrap').show();
  }

  if (this.mission === this.fleetHelper.MISSION_DESTROY) {
    $('.prioButton').show();
    $('.fleet_dispatch_toggle_wrap').show();
  }

  if (this.mission === this.fleetHelper.MISSION_HOLD) {
    $('#holdtimeline').show();
  }

  if (this.mission === this.fleetHelper.MISSION_EXPEDITION) {
    $('#expeditiontimeline').show();
  }
};

FleetDispatcher.prototype.refreshCargo = function () {
  formatNumber($('#metal'), this.cargoMetal);
  formatNumber($('#crystal'), this.cargoCrystal);
  formatNumber($('#deuterium'), this.cargoDeuterium);

  if (this.lifeformEnabled) {
    formatNumber($('#food'), this.cargoFood);
  }

  let cargoSpaceUsed = this.getUsedCargoSpace();
  let cargoSpaceFree = this.getFreeCargoSpace();
  let cargoCapacity = this.getCargoCapacity();
  let styleClass = cargoSpaceFree < 0 ? 'overmark' : 'undermark';
  $('#remainingresources').html('<span class="' + styleClass + '">' + tsdpkt(cargoSpaceFree) + '</style>');
  $('#maxresources').html(tsdpkt(cargoCapacity));
  $('#loadRoom .bar_container').data('currentAmount', cargoSpaceUsed).data('capacity', cargoCapacity);
  refreshBars('bar_container', 'filllevel_bar');
};

FleetDispatcher.prototype.refreshPriorities = function () {
  $('form input[name="prioMetal"]').val(this.prioMetal);
  $('form input[name="prioCrystal"]').val(this.prioCrystal);
  $('form input[name="prioDeuterium"]').val(this.prioDeuterium);

  if (this.lifeformEnabled) {
    $('form input[name="prioFood"]').val(this.prioFood);
  }

  $('#prioM1').attr('src', '//gf1.geo.gfsrv.net/cdn91/4b53e83f8b8583ea279fd26f3a55a5.gif');
  $('#prioM2').attr('src', '//gf3.geo.gfsrv.net/cdn26/8afbd59ffe091239a7c6f1e961b267.gif');
  $('#prioM3').attr('src', '//gf1.geo.gfsrv.net/cdn0a/4acc67e1ca4d8debb1b114abcb7c1e.gif');

  if (this.lifeformEnabled) {
    $('#prioM4').attr('src', '//gf2.geo.gfsrv.net/cdna8/8860dee24c03537549ad782922b6b5.gif');
  }

  switch (this.prioMetal) {
    case 1:
      $('#prioM1').attr('src', '//gf1.geo.gfsrv.net/cdn9c/b357323b99e20a46fc0b2495728351.gif');
      break;

    case 2:
      $('#prioM2').attr('src', '//gf3.geo.gfsrv.net/cdnb1/f8959fe540cd329f3a764ad9aeaf93.gif');
      break;

    case 3:
      $('#prioM3').attr('src', '//gf1.geo.gfsrv.net/cdnf2/823b3270ed0f4a243287c12d4ee5f8.gif');
      break;

    case 4:
      $('#prioM4').attr('src', '//gf3.geo.gfsrv.net/cdn29/43bf98a73ba1abb53860f2c5b8edc3.gif');
      break;
  }

  $('#prioC1').attr('src', '//gf1.geo.gfsrv.net/cdn91/4b53e83f8b8583ea279fd26f3a55a5.gif');
  $('#prioC2').attr('src', '//gf3.geo.gfsrv.net/cdn26/8afbd59ffe091239a7c6f1e961b267.gif');
  $('#prioC3').attr('src', '//gf1.geo.gfsrv.net/cdn0a/4acc67e1ca4d8debb1b114abcb7c1e.gif');

  if (this.lifeformEnabled) {
    $('#prioC4').attr('src', '//gf2.geo.gfsrv.net/cdna8/8860dee24c03537549ad782922b6b5.gif');
  }

  switch (this.prioCrystal) {
    case 1:
      $('#prioC1').attr('src', '//gf1.geo.gfsrv.net/cdn9c/b357323b99e20a46fc0b2495728351.gif');
      break;

    case 2:
      $('#prioC2').attr('src', '//gf3.geo.gfsrv.net/cdnb1/f8959fe540cd329f3a764ad9aeaf93.gif');
      break;

    case 3:
      $('#prioC3').attr('src', '//gf1.geo.gfsrv.net/cdnf2/823b3270ed0f4a243287c12d4ee5f8.gif');
      break;

    case 4:
      $('#prioC4').attr('src', '//gf3.geo.gfsrv.net/cdn29/43bf98a73ba1abb53860f2c5b8edc3.gif');
      break;
  }

  $('#prioD1').attr('src', '//gf1.geo.gfsrv.net/cdn91/4b53e83f8b8583ea279fd26f3a55a5.gif');
  $('#prioD2').attr('src', '//gf3.geo.gfsrv.net/cdn26/8afbd59ffe091239a7c6f1e961b267.gif');
  $('#prioD3').attr('src', '//gf1.geo.gfsrv.net/cdn0a/4acc67e1ca4d8debb1b114abcb7c1e.gif');

  if (this.lifeformEnabled) {
    $('#prioD4').attr('src', '//gf2.geo.gfsrv.net/cdna8/8860dee24c03537549ad782922b6b5.gif');
  }

  switch (this.prioDeuterium) {
    case 1:
      $('#prioD1').attr('src', '//gf1.geo.gfsrv.net/cdn9c/b357323b99e20a46fc0b2495728351.gif');
      break;

    case 2:
      $('#prioD2').attr('src', '//gf3.geo.gfsrv.net/cdnb1/f8959fe540cd329f3a764ad9aeaf93.gif');
      break;

    case 3:
      $('#prioD3').attr('src', '//gf1.geo.gfsrv.net/cdnf2/823b3270ed0f4a243287c12d4ee5f8.gif');
      break;

    case 4:
      $('#prioD4').attr('src', '//gf3.geo.gfsrv.net/cdn29/43bf98a73ba1abb53860f2c5b8edc3.gif');
      break;
  }

  if (this.lifeformEnabled) {
    $('#prioF1').attr('src', '//gf1.geo.gfsrv.net/cdn91/4b53e83f8b8583ea279fd26f3a55a5.gif');
    $('#prioF2').attr('src', '//gf3.geo.gfsrv.net/cdn26/8afbd59ffe091239a7c6f1e961b267.gif');
    $('#prioF3').attr('src', '//gf1.geo.gfsrv.net/cdn0a/4acc67e1ca4d8debb1b114abcb7c1e.gif');
    $('#prioF4').attr('src', '//gf2.geo.gfsrv.net/cdna8/8860dee24c03537549ad782922b6b5.gif');

    switch (this.prioFood) {
      case 1:
        $('#prioF1').attr('src', '//gf1.geo.gfsrv.net/cdn9c/b357323b99e20a46fc0b2495728351.gif');
        break;

      case 2:
        $('#prioF2').attr('src', '//gf3.geo.gfsrv.net/cdnb1/f8959fe540cd329f3a764ad9aeaf93.gif');
        break;

      case 3:
        $('#prioF3').attr('src', '//gf1.geo.gfsrv.net/cdnf2/823b3270ed0f4a243287c12d4ee5f8.gif');
        break;

      case 4:
        $('#prioF4').attr('src', '//gf3.geo.gfsrv.net/cdn29/43bf98a73ba1abb53860f2c5b8edc3.gif');
        break;
    }
  }
};

FleetDispatcher.prototype.isMissionAvailable = function (missionId) {
  return this.orders[missionId] === true;
};

FleetDispatcher.prototype.hasMission = function () {
  return this.fleetHelper.isMissionValid(this.mission) && this.isMissionAvailable(this.mission);
};

FleetDispatcher.prototype.hasFreePlanetSlots = function () {
  return this.planetCount < this.fleetHelper.MAX_NUMBER_OF_PLANETS;
};

FleetDispatcher.prototype.getAvailableMissions = function () {
  let missions = [];

  for (let mission in this.orders) {
    if (this.orders[mission] === true) {
      missions.push(parseInt(mission));
    }
  }

  return missions;
};

FleetDispatcher.prototype.isOnlyMissionAvailable = function (missionId) {
  let missionsAvailable = this.getAvailableMissions();
  return missionsAvailable.length === 1 && missionsAvailable[0] === missionId;
};

FleetDispatcher.prototype.getMissionData = function (missionId) {
  if (missionId === this.fleetHelper.MISSION_NONE) {
    return null;
  }

  return {
    isAvailable: this.orders[missionId] || false,
    name: this.orderNames[missionId] || '',
    description: this.orderDescriptions[missionId] || ''
  };
};

FleetDispatcher.prototype.getUnionData = function (unionId) {
  for (let i = 0; i < this.unions.length; ++i) {
    if (this.unions[i].id === unionId) {
      return this.unions[i];
    }
  }

  return null;
};

FleetDispatcher.prototype.selectMaxMetal = function () {
  let amount;
  amount = this.getCargoCapacity() - this.cargoCrystal - this.cargoDeuterium - this.cargoFood;
  amount = Math.max(amount, 0);
  amount = Math.min(amount, this.metalOnPlanet);
  this.cargoMetal = Math.max(this.cargoMetal, amount);
};

FleetDispatcher.prototype.selectMinMetal = function () {
  this.cargoMetal = 0;
};

FleetDispatcher.prototype.selectMaxCrystal = function () {
  let amount;
  amount = this.getCargoCapacity() - this.cargoMetal - this.cargoDeuterium - this.cargoFood;
  amount = Math.max(amount, 0);
  amount = Math.min(amount, this.crystalOnPlanet);
  this.cargoCrystal = Math.max(this.cargoCrystal, amount);
};

FleetDispatcher.prototype.getDeuteriumOnPlanetWithoutConsumption = function () {
  return Math.max(0, this.deuteriumOnPlanet - this.getConsumption());
};

FleetDispatcher.prototype.selectMinCrystal = function () {
  this.cargoCrystal = 0;
};

FleetDispatcher.prototype.selectMaxDeuterium = function () {
  let amount;
  amount = this.getCargoCapacity() - this.cargoMetal - this.cargoCrystal - this.cargoFood;
  amount = Math.max(amount, 0);
  amount = Math.min(amount, this.getDeuteriumOnPlanetWithoutConsumption());
  this.cargoDeuterium = Math.max(this.cargoDeuterium, amount);
};

FleetDispatcher.prototype.selectMinDeuterium = function () {
  this.cargoDeuterium = 0;
};

FleetDispatcher.prototype.selectMaxFood = function () {
  let amount;
  amount = this.getCargoCapacity() - this.cargoMetal - this.cargoCrystal - this.cargoDeuterium;
  amount = Math.max(amount, 0);
  amount = Math.min(amount, this.foodOnPlanet);
  this.cargoFood = Math.max(this.cargoFood, amount);
};

FleetDispatcher.prototype.selectMinFood = function () {
  this.cargoFood = 0;
};

FleetDispatcher.prototype.selectMaxAll = function () {
  this.cargoMetal = 0;
  this.cargoCrystal = 0;
  this.cargoDeuterium = 0;
  this.selectMaxDeuterium();
  this.selectMaxCrystal();
  this.selectMaxMetal();

  if ($("#food_box").length) {
    this.cargoFood = 0;
    this.selectMaxFood();
  }
};

FleetDispatcher.prototype.resetCargo = function () {
  this.cargoMetal = 0;
  this.cargoCrystal = 0;
  this.cargoDeuterium = 0;
  this.cargoFood = 0;
};

FleetDispatcher.prototype.updateCargo = function () {
  this.updateMetal();
  this.updateCrystal();
  this.updateDeuterium();

  if ($("#food_box").length) {
    this.updateFood();
  }
};

FleetDispatcher.prototype.updateMetal = function () {
  let amount = getValue($('#metal').val());
  let cargoSpace = this.getCargoCapacity() - this.cargoCrystal - this.cargoDeuterium - this.cargoFood;
  this.cargoMetal = Math.min(amount, this.metalOnPlanet, cargoSpace);
};

FleetDispatcher.prototype.updateCrystal = function () {
  let amount = getValue($('#crystal').val());
  let cargoSpace = this.getCargoCapacity() - this.cargoMetal - this.cargoDeuterium - this.cargoFood;
  this.cargoCrystal = Math.min(amount, this.crystalOnPlanet, cargoSpace);
};

FleetDispatcher.prototype.updateDeuterium = function () {
  let amount = getValue($('#deuterium').val());
  let cargoSpace = this.getCargoCapacity() - this.cargoMetal - this.cargoCrystal - this.cargoFood;
  let deuteriumOnPlanetWithoutConsumption = this.getDeuteriumOnPlanetWithoutConsumption();
  this.cargoDeuterium = Math.min(amount, this.deuteriumOnPlanet, cargoSpace, deuteriumOnPlanetWithoutConsumption);
};

FleetDispatcher.prototype.updateFood = function () {
  if (!this.lifeformEnabled) return;
  let amount = getValue($('#food').val());
  let cargoSpace = this.getCargoCapacity() - this.cargoMetal - this.cargoCrystal - this.cargoDeuterium;
  this.cargoFood = Math.min(amount, this.foodOnPlanet, cargoSpace);
};

FleetDispatcher.prototype.selectMission = function (mission) {
  if (this.fleetHelper.isMissionValid(mission)) {
    this.mission = mission;
  }

  this.updateHoldingTime();
  this.updateExpeditionTime();
  this.refresh();
};

FleetDispatcher.prototype.selectRetreatAfterDefenderRetreat = function (retreatAfterDefenderRetreat) {
  this.retreatAfterDefenderRetreat = retreatAfterDefenderRetreat;
};

FleetDispatcher.prototype.selectLootFoodOnAttack = function (lootFoodOnAttack) {
  this.lootFoodOnAttack = lootFoodOnAttack;
};

FleetDispatcher.prototype.updateHoldingTime = function () {
  if (this.mission === this.fleetHelper.MISSION_HOLD) {
    this.holdingTime = getValue($('#fleet2 #holdingtime').val());
  } else {
    this.holdingTime = 0;
  }
};

FleetDispatcher.prototype.updateExpeditionTime = function () {
  if (this.mission === this.fleetHelper.MISSION_EXPEDITION) {
    this.expeditionTime = getValue($('#fleet2 #expeditiontime').val());
  } else {
    this.expeditionTime = 0;
  }
};

FleetDispatcher.prototype.selectPriority = function (type, priority) {
  if (!this.lifeformEnabled && priority === 4) return;

  switch (type) {
    case 'metal':
      if (this.prioMetal === priority) break;
      if (this.prioCrystal === priority) this.prioCrystal = this.prioMetal;
      if (this.prioDeuterium === priority) this.prioDeuterium = this.prioMetal;
      if (this.prioFood === priority) this.prioFood = this.prioMetal;
      this.prioMetal = priority;
      break;

    case 'crystal':
      if (this.prioCrystal === priority) break;
      if (this.prioMetal === priority) this.prioMetal = this.prioCrystal;
      if (this.prioDeuterium === priority) this.prioDeuterium = this.prioCrystal;
      if (this.prioFood === priority) this.prioFood = this.prioCrystal;
      this.prioCrystal = priority;
      break;

    case 'deuterium':
      if (this.prioDeuterium === priority) break;
      if (this.prioMetal === priority) this.prioMetal = this.prioDeuterium;
      if (this.prioCrystal === priority) this.prioCrystal = this.prioDeuterium;
      if (this.prioFood === priority) this.prioFood = this.prioDeuterium;
      this.prioDeuterium = priority;
      break;

    case 'food':
      if (this.prioFood === priority) break;
      if (this.prioMetal === priority) this.prioMetal = this.prioFood;
      if (this.prioCrystal === priority) this.prioCrystal = this.prioFood;
      if (this.prioDeuterium === priority) this.prioDeuterium = this.prioFood;
      this.prioFood = priority;
      break;
  }
};

FleetDispatcher.prototype.refreshDataAfterAjax = function (data) {
  this.setOrders(data.orders);
  this.setTargetInhabited(data.targetInhabited);
  this.setTargetPlayerId(data.targetPlayerId);
  this.setTargetPlayerName(data.targetPlayerName);
  this.setTargetIsStrong(data.targetIsStrong);
  this.setTargetIsOutlaw(data.targetIsOutlaw);
  this.setTargetIsBuddyOrAllyMember(data.targetIsBuddyOrAllyMember);
  this.setTargetPlayerColorClass(data.targetPlayerColorClass);
  this.setTargetPlayerRankIcon(data.targetPlayerRankIcon);
  this.setPlayerIsOutlaw(data.playerIsOutlaw);
  this.setTargetPlanet(data.targetPlanet);
};
function FleetHelper(cfg) {
  // player specific ship data
  this.shipsData = cfg.shipsData; // game constants

  this.COLONIZATION_ENABLED = cfg.COLONIZATION_ENABLED;
  this.MAX_NUMBER_OF_PLANETS = cfg.MAX_NUMBER_OF_PLANETS;
  this.PLAYER_ID_LEGOR = cfg.PLAYER_ID_LEGOR;
  this.PLAYER_ID_SPACE = cfg.PLAYER_ID_SPACE; // mission constants

  this.MISSION_NONE = cfg.missions.MISSION_NONE;
  this.MISSION_ATTACK = cfg.missions.MISSION_ATTACK;
  this.MISSION_UNIONATTACK = cfg.missions.MISSION_UNIONATTACK;
  this.MISSION_TRANSPORT = cfg.missions.MISSION_TRANSPORT;
  this.MISSION_DEPLOY = cfg.missions.MISSION_DEPLOY;
  this.MISSION_HOLD = cfg.missions.MISSION_HOLD;
  this.MISSION_ESPIONAGE = cfg.missions.MISSION_ESPIONAGE;
  this.MISSION_COLONIZE = cfg.missions.MISSION_COLONIZE;
  this.MISSION_RECYCLE = cfg.missions.MISSION_RECYCLE;
  this.MISSION_DESTROY = cfg.missions.MISSION_DESTROY;
  this.MISSION_MISSILEATTACK = cfg.missions.MISSION_MISSILEATTACK;
  this.MISSION_EXPEDITION = cfg.missions.MISSION_EXPEDITION; // galaxy related constants

  this.DONUT_GALAXY = cfg.DONUT_GALAXY;
  this.DONUT_SYSTEM = cfg.DONUT_SYSTEM;
  this.MAX_GALAXY = cfg.MAX_GALAXY;
  this.MAX_SYSTEM = cfg.MAX_SYSTEM;
  this.MAX_POSITION = cfg.MAX_POSITION;
  this.EXPEDITION_POSITION = cfg.EXPEDITION_POSITION; // fleet related constants

  this.SPEEDFAKTOR_FLEET_PEACEFUL = cfg.SPEEDFAKTOR_FLEET_PEACEFUL;
  this.SPEEDFAKTOR_FLEET_WAR = cfg.SPEEDFAKTOR_FLEET_WAR;
  this.SPEEDFAKTOR_FLEET_HOLDING = cfg.SPEEDFAKTOR_FLEET_HOLDING;
  this.FLEET_DEUTERIUM_SAVE_FACTOR = cfg.FLEET_DEUTERIUM_SAVE_FACTOR; // target types

  this.PLANETTYPE_PLANET = cfg.PLANETTYPE_PLANET;
  this.PLANETTYPE_DEBRIS = cfg.PLANETTYPE_DEBRIS;
  this.PLANETTYPE_MOON = cfg.PLANETTYPE_MOON;
}

FleetHelper.prototype.isPlayerSpace = function (playerId) {
  return playerId === this.PLAYER_ID_SPACE;
};

FleetHelper.prototype.isPlayerLegor = function (playerId) {
  return playerId === this.PLAYER_ID_LEGOR;
};

FleetHelper.prototype.calcDistance = function (from, to, emptySystems, inactiveSystems) {
  let diffGalaxy = Math.abs(from.galaxy - to.galaxy);
  let diffSystem = Math.abs(from.system - to.system);
  let diffPlanet = Math.abs(from.position - to.position);

  if (diffGalaxy != 0) {
    let diff2 = Math.abs(diffGalaxy - this.MAX_GALAXY);

    if (this.DONUT_GALAXY == 1 && diff2 < diffGalaxy) {
      return diff2 * 20000;
    } else {
      return diffGalaxy * 20000;
    }
  } else if (diffSystem != 0) {
    let diff2 = Math.abs(diffSystem - this.MAX_SYSTEM);
    let deltaSystem = 0;

    if (this.DONUT_SYSTEM == 1 && diff2 < diffSystem) {
      deltaSystem = diff2;
    } else {
      deltaSystem = diffSystem;
    }

    deltaSystem = Math.max(deltaSystem - emptySystems - inactiveSystems, 1);
    return deltaSystem * 5 * 19 + 2700;
  } else if (diffPlanet != 0) {
    return diffPlanet * 5 + 1000;
  } else {
    return 5;
  }
};

FleetHelper.prototype.getFleetSpeedFaktor = function (mission) {
  let peaceful = [this.MISSION_TRANSPORT, this.MISSION_DEPLOY, this.MISSION_COLONIZE, this.MISSION_EXPEDITION];
  let war = [this.MISSION_ATTACK, this.MISSION_UNIONATTACK, this.MISSION_ESPIONAGE, this.MISSION_RECYCLE, this.MISSION_DESTROY, this.MISSION_MISSILEATTACK];
  let holding = [this.MISSION_HOLD];
  if (peaceful.includes(mission)) return this.SPEEDFAKTOR_FLEET_PEACEFUL;else if (war.includes(mission)) return this.SPEEDFAKTOR_FLEET_WAR;else if (holding.includes(mission)) return this.SPEEDFAKTOR_FLEET_HOLDING;else return 0;
};

FleetHelper.prototype.calcDuration = function (distance, maxSpeed, speedPercent, mission) {
  mission = mission || this.MISSION_NONE;
  return Math.max(Math.round((35000 / speedPercent * Math.sqrt(distance * 10 / maxSpeed) + 10) / this.getFleetSpeedFaktor(mission)), 1);
};

FleetHelper.prototype.calcConsumption = function (ships, distance, speedPercent, holdingTime, mission) {
  mission = mission || this.MISSION_NONE;
  let that = this;
  let consumption = 0;
  let holdingCosts = 0;
  let shipIds = ships.map(function (ship) {
    return ship.id;
  });
  let maxSpeed = this.getMaxSpeed(shipIds);
  let duration = this.calcDuration(distance, maxSpeed, speedPercent, mission);
  let speedValue = Math.max(0.5, duration * this.getFleetSpeedFaktor(mission) - 10);
  ships.forEach(function (ship) {
    if (ship.number) {
      let shipData = that.getShipData(ship.id);
      let shipSpeedValue = 35000 / speedValue * Math.sqrt(distance * 10 / shipData.speed);
      holdingCosts += shipData.fuelConsumption * ship.number * holdingTime;
      consumption += Math.max(shipData.fuelConsumption * ship.number * distance / 35000 * (shipSpeedValue / 10 + 1) * (shipSpeedValue / 10 + 1), 1);
    }
  });
  consumption = Math.round(consumption);
  consumption += holdingTime > 0 ? Math.max(Math.floor(holdingCosts / 10), 1) : 0;
  return consumption;
};

FleetHelper.prototype.calcCargoCapacity = function (shipId, number) {
  let shipData = this.getShipData(shipId);
  return Math.floor(shipData.baseCargoCapacity * number);
};

FleetHelper.prototype.calcFuelCapacity = function (shipId, number) {
  let shipData = this.getShipData(shipId);
  return shipData.baseFuelCapacity * number;
};

FleetHelper.prototype.getMaxSpeed = function (shipIds) {
  let that = this;
  let speeds = [];
  shipIds.forEach(function (shipId) {
    let shipData = that.getShipData(shipId);
    if (shipData && shipData.speed) speeds.push(shipData.speed);
  });
  let maxSpeed = speeds.reduce(function (a, b) {
    return Math.min(a, b);
  }, 1000000000);
  return maxSpeed;
};

FleetHelper.prototype.getShipData = function (shipId) {
  // shipsData is undefined when you switch to fast
  // the Planets (Target Planet)
  if (typeof this.shipsData === 'undefined') return null;
  return this.shipsData[shipId];
};

FleetHelper.prototype.isAggressiveMission = function (mission) {
  switch (mission) {
    case this.MISSION_ATTACK:
    case this.MISSION_UNIONATTACK:
    case this.MISSION_ESPIONAGE:
    case this.MISSION_DESTROY:
      return true;
  }

  return false;
};

FleetHelper.prototype.isMissionValid = function (mission) {
  switch (mission) {
    case this.MISSION_ATTACK:
    case this.MISSION_UNIONATTACK:
    case this.MISSION_TRANSPORT:
    case this.MISSION_DEPLOY:
    case this.MISSION_HOLD:
    case this.MISSION_ESPIONAGE:
    case this.MISSION_COLONIZE:
    case this.MISSION_RECYCLE:
    case this.MISSION_DESTROY:
    case this.MISSION_MISSILEATTACK:
    case this.MISSION_EXPEDITION:
      return true;
  }

  return false;
};
var cancelProduction_id;
var production_listid;

function cancelProduction(id, listid, question) {
  cancelProduction_id = id;
  production_listid = listid;
  errorBoxDecision(loca.LOCA_ALL_NETWORK_ATTENTION, "" + question + "", loca.LOCA_ALL_YES, loca.LOCA_ALL_NO, cancelProductionStart);
}

function cancelProductionStart() {
  window.location.replace(urlCancleBuilding + '&techid=' + cancelProduction_id + '&listid=' + production_listid);
}
function submitOnKey(keyCode) {
  selectShipsPerFleet("0");

  if (keyCode === 'ArrowLeft') {
    system = system > 1 ? parseInt(system) - 1 : maxSystems;

    if (isMobile) {
      loadContent(galaxy, system);
    } else {
      loadContentNew(galaxy, system);
    }
  } else if (keyCode === 'ArrowRight') {
    system = system < maxSystems ? parseInt(system) + 1 : 1;

    if (isMobile) {
      loadContent(galaxy, system);
    } else {
      loadContentNew(galaxy, system);
    }
  } else if (keyCode === 'ArrowDown') {
    galaxy = galaxy > 1 ? parseInt(galaxy) - 1 : maxGalaxies;

    if (isMobile) {
      loadContent(galaxy, system);
    } else {
      loadContentNew(galaxy, system);
    }
  } else if (keyCode === 'ArrowUp') {
    galaxy = galaxy < maxGalaxies ? parseInt(galaxy) + 1 : 1;

    if (isMobile) {
      loadContent(galaxy, system);
    } else {
      loadContentNew(galaxy, system);
    }
  }
}

function keyevent(ev) {
  let keyCode;
  let focusElement = $(":focus");

  if (focusElement.closest('.ui-dialog').length) {
    return true;
  }

  if (focusElement.closest('.chat_box_textarea').length) {
    return true;
  }

  if (ev) {
    keyCode = ev.key;
  } else {
    return true;
  }

  submitOnKey(keyCode);
}

function launchMissiles(response) {
  var data = $.parseJSON(response);
  token = data.newAjaxToken;
  updateOverlayToken('phalanxSystemDialog', data.newAjaxToken);
  updateOverlayToken('phalanxDialog', data.newAjaxToken);

  if (data["status"]) {
    $("#missileValue").html(data["rockets"]);
    getAjaxEventbox();
  }

  errorBoxAsArray(data["errorbox"]);
  $("#rocketattack").closest('.ui-dialog-content').remove();
}

function movePlanet(url, data, reloadPage) {
  function movePlanetExecute() {
    $.post(url, data, function (res) {
      if (res.error == '') {
        fadeBox(galaxyLoca.reservationSuccess, false);
        setTimeout('reload_page("' + reloadPage + '")', 3000);
      } else {
        fadeBox(res.error, true);
      }
    }, "json");
  }

  errorBoxDecision(galaxyLoca.questionTitle, galaxyLoca.question, LocalizationStrings.yes, LocalizationStrings.no, movePlanetExecute);
}

function discoverPlanet(url, data, success = () => {}) {
  const discover = () => {
    $.post(url, data, function (res) {
      token = res.newAjaxToken;

      if (typeof res.response.success !== 'undefined' && res.response.success === true) {
        getAjaxEventbox();
        success();
        getAjaxResourcebox();
      }

      displayMiniFleetMessage(res.response);
      const discoveryIcons = Array.from(document.getElementsByClassName('planetDiscover'));
      discoveryIcons.forEach(icon => {
        if (icon.classList.contains('position' + res.response.coordinates.position)) {
          return;
        }

        if (res.response.discovery.canSendDiscovery !== true) {
          $(icon).replaceWith(`
                        <div class="planetDiscoverIcons planetDiscoverUnavailable tooltip icon js_hideTipOnMobile"
                            title="${res.response.discovery.canSendDiscovery}">
                        </div>
                    `);
          return;
        }

        const titleText = galaxyLoca.discoverySend + " " + res.response.discovery.discoveryCount;
        icon.title = titleText;
        changeTooltip(icon, titleText);
      });
      const targetIcon = $('.planetDiscover.position' + res.response.coordinates.position);
      targetIcon.replaceWith(`<div class="planetDiscoverIcons planetDiscoverUnavailable tooltip icon js_hideTipOnMobile"
                    title="${galaxyLoca.discoveryUnderway}">
                </div>`);
      document.getElementById('galaxyHeaderDiscoveryCount').innerHTML = res.response.discovery.galaxyHeader.LOCA_GALAXY_LIFEFORM_DISCOVERY_COUNT;
    }, "json");
  };

  if (showDiscoveryWarning) {
    errorBoxDecision(galaxyLoca.discoverQuestionTitle, galaxyLoca.discoverQuestionText, LocalizationStrings.yes, LocalizationStrings.no, discover);
  } else {
    discover();
  }
}

let sendingSystemDiscoveryMission = false;

function sendSystemDiscoveryMission() {
  if (typeof sendDiscoverSystemUrl === 'undefined' || !sendDiscoverSystemUrl) {
    return;
  }

  if (typeof galaxy === 'undefined' || !galaxy) {
    return;
  }

  if (typeof system === 'undefined' || !system) {
    return;
  }

  if (sendingSystemDiscoveryMission) {
    return;
  }

  sendingSystemDiscoveryMission = true;
  $.ajax({
    url: sendDiscoverSystemUrl,
    data: {
      galaxy: galaxy,
      system: system,
      _token: token
    },
    type: "POST",
    dataType: "json",
    success: function (res) {
      token = res.newAjaxToken;

      if (res.response.success) {
        getAjaxEventbox();
        getAjaxResourcebox();
        res.response.sentToCoordinates.map(coords => {
          displayMiniFleetMessage({ ...res.response,
            coordinates: coords
          }, false);
          const targetIcon = $('.planetDiscover.position' + coords.position);
          targetIcon.replaceWith(`
                        <div class="planetDiscoverIcons planetDiscoverUnavailable tooltip icon js_hideTipOnMobile"
                            title="${galaxyLoca.discoveryUnderway}">
                        </div>
                    `);
        });
      } else {
        fadeBox(res.response.message, true);
      }

      sendingSystemDiscoveryMission = false;
    },
    error: function () {
      sendingSystemDiscoveryMission = false;
    }
  });
}

function addToTable(strDataResult, strClass, shipCount) {
  let text = strDataResult.message || strDataResult;

  if (shipCount != null) {
    text += " (" + tsdpkt(shipCount) + ") " + LocalizationStrings.ok;
  }

  if (isMobile) {
    fadeBox(text, strClass != "success");
    return;
  }

  let currentTime = new Date();
  let id = 'fleetstatus' + currentTime.getTime();
  let idHtml = 'id="' + id + '"';
  let myClass = 'class="' + strClass + '"';
  let div = '<div ' + idHtml + ' ' + myClass + '>' + text + '</div>';

  if ($('#fleetstatusrow').has('div').length) {
    $('#fleetstatusrow').empty();
  }

  $(div).prependTo('#fleetstatusrow').fadeOut(3000, function () {
    $(this).remove();
  });
}

function setShips(ship, count) {
  var e = document.getElementById(ship);

  if (e !== null) {
    e.innerHTML = count;
  }
}

function renderContentGalaxy(json) {
  token = json.token;
  updateOverlayToken('phalanxSystemDialog', json.token);
  updateOverlayToken('phalanxDialog', json.token);
  toGalaxyLink = json.system.toGalaxyLink;
  $('#amountColonized').html(json.system.slotsColonized);
  $('#probeValue').html(json.system.availableProbes);
  $('#recyclerValue').html(json.system.availableRecyclers);
  $('#missileValue').html(json.system.availableMissiles);
  $('#slotUsed').html(json.system.usedFleetSlots);
  $('#slotValue').html(json.system.maximumFleetSlots);
  $("input#galaxy_input").val(json.system.galaxy);
  $("input#system_input").val(json.system.system);
  canSwitchGalaxy = json.system.canSwitchGalaxy;
  // TODO: re-enable
  //getAjaxResourcebox();
  $.each(json.filterSettings, function (key, value) {
    if (value) {
      $(`#filterCell #${key}`).addClass('filter_active');
    }
  });

  if (!canSwitchGalaxy) {
    fadeBox(notEnoughDeuteriumMessage, true);
  }

  if (preserveSystemOnPlanetChange) {
    $(".planetlink, .moonlink").querystring({
      galaxy: json.system.galaxy,
      system: json.system.system
    });
  }

  $('#expeditionDebris').remove();
  $('#galaxyRow17planet').remove();
  $('#galaxyRow17debris').remove();
  buildListCountdowns.map(countdownObject => {
    timerHandler.removeCallback(countdownObject.getTimer);
  });
  buildListCountdowns = [];

  for (const galaxyContentObject of json.system.galaxyContent) {
    clearPosition(galaxyContentObject.position);

    if (galaxyContentObject.position === 16) {
      $("#expeditionDebrisSlotDebrisContainer").append(`
                <div id="expeditionDebris" class="name float_left tooltipRel tooltipClose tooltipRight js_hideTipOnMobile js_bday_debris tpd-hideOnClickOutside" rel="debris16">
                    <div style="position: relative;width: 30px;height: 30px;display: inline-block;">
                        <img class="float_left" src="//gf1.geo.gfsrv.net/cdnc5/fa3e396b8af2ae31e28ef3b44eca91.gif" width="30" height="30"/>
                        ${addFleetContainer(galaxyContentObject.position, galaxyContentObject.planets.planetType)}
                    </div>
                </div>
            `);
      $("#expeditionDebris").append(getDebrisTooltip(galaxyContentObject.planets, galaxyContentObject, json.system));
      getFleetIcon(galaxyContentObject.planets.fleet, galaxyContentObject.position, galaxyContentObject.planets.planetType);
      continue;
    }

    if (galaxyContentObject.position === 17) {
      renderEventSpaceObjects(galaxyContentObject, json.system);
      continue;
    }

    $("#galaxyRow" + galaxyContentObject.position).addClass(galaxyContentObject.positionFilters);

    if (galaxyContentObject.planets.length > 0) {
      let shouldLoadPlayerToo = false;

      for (const planet of galaxyContentObject.planets) {
        switch (planet.planetType) {
          case 1:
            renderPlanet(galaxyContentObject, planet, json.system);
            shouldLoadPlayerToo = true;
            break;

          case 2:
            renderDebris(galaxyContentObject, planet, json.system);
            break;

          case 3:
            renderMoon(galaxyContentObject, planet, json.system);
            shouldLoadPlayerToo = true;
            break;
        }
      }

      if (shouldLoadPlayerToo) {
        renderPlayer(galaxyContentObject, json.system);
        colorNumberInFrontOfFriendsPlanet(galaxyContentObject);
        renderPhalanx(galaxyContentObject);
        renderAlliance(galaxyContentObject, json.system);
        renderActions(galaxyContentObject, json.system);
      } else {
        renderEmptySlot(galaxyContentObject, json.system, json.reservedPositions);
      }
    } else {
      renderEmptySlot(galaxyContentObject, json.system, json.reservedPositions);
    }
  }

  $("#galaxyLoading").hide();
  inProgress = false;

  if (typeof IPI !== 'undefined') {
    IPI.refreshHighlights();
  }
}

function renderPlanet(galaxyContentObject, planet, systemData) {
  $("#galaxyRow" + galaxyContentObject.position + " .cellPlanetName").html(`<span class="${galaxyContentObject.player.isBuddy ? "status_abbr_buddy" : ''}">${planet.planetName}</span>`);
  $("#galaxyRow" + galaxyContentObject.position + " .cellPlanet").html(`<a href="javascript: void(0);" onclick="${getEspionageMission(galaxyContentObject, planet, systemData)}"><div class="microplanet"></div></a>`);
  $("#galaxyRow" + galaxyContentObject.position + " .cellPlanet .microplanet").addClass(planet.imageInformation).append(getActivityStar(planet.activity)).append(addFleetContainer(galaxyContentObject.position, planet.planetType)).append(getFleetIcon(planet.fleet, galaxyContentObject.position, planet.planetType)).attr('data-planet-id', planet.planetId).addClass('planetTooltip tooltipRel tooltipPersistent tooltipClose tooltipRight js_hideTipOnMobile').attr('rel', 'planet' + galaxyContentObject.position).append(getPlanetTooltip(planet, galaxyContentObject, systemData));
}

function renderDebris(galaxyContentObject, planet, systemData) {
  $("#galaxyRow" + galaxyContentObject.position + " .cellDebris").html(`<a href="javascript: void(0);"><div class="microdebris ${planet.imageInformation}"></div></a>`);
  $("#galaxyRow" + galaxyContentObject.position + " .cellDebris .microdebris").append(addFleetContainer(galaxyContentObject.position, planet.planetType)).append(getFleetIcon(planet.fleet, galaxyContentObject.position, planet.planetType)).attr('rel', 'debris' + galaxyContentObject.position).addClass("tooltipRel tooltipClose tooltipRight js_hideTipOnMobile").append(getDebrisTooltip(planet, galaxyContentObject, systemData));
}

function renderMoon(galaxyContentObject, planet, systemData) {
  $("#galaxyRow" + galaxyContentObject.position + " .cellMoon").html(`<a href="javascript: void(0);" onclick="${getEspionageMission(galaxyContentObject, planet, systemData)}"><div class="micromoon ${planet.imageInformation}"></div></a>`);
  $("#galaxyRow" + galaxyContentObject.position + " .cellMoon .micromoon").append(getActivityStar(planet.activity)).append(addFleetContainer(galaxyContentObject.position, planet.planetType)).append(getFleetIcon(planet.fleet, galaxyContentObject.position, planet.planetType)).attr('data-moon-id', planet.planetId).attr('rel', 'moon' + galaxyContentObject.position).addClass("tooltipRel tooltipClose tooltipRight js_hideTipOnMobile").append(getMoonTooltip(planet, galaxyContentObject, systemData));
}

function renderPlayer(galaxyContentObject, systemData) {
  let {
    player
  } = galaxyContentObject;

  if (player && player.playerId !== 99999) {
    $("#galaxyRow" + galaxyContentObject.position + " .cellPlayerName").html(getPlayerName(galaxyContentObject, systemData));
  }
}

function colorNumberInFrontOfFriendsPlanet(galaxyContentObject) {
  let {
    player
  } = galaxyContentObject;

  if (player.isBuddy) {
    $("#galaxyRow" + galaxyContentObject.position + " .cellPosition").addClass('status_abbr_buddy');
  }
}

function renderEmptySlot(galaxyContentObject, systemData, reservedPlanets) {
  if (galaxyContentObject.availableMissions) {
    let planetNameCell = $("#galaxyRow" + galaxyContentObject.position + " .cellPlanetName");
    planetNameCell.html('');
    let reservedPlanet = reservedPlanets[galaxyContentObject.position];

    if (reservedPlanet && reservedPlanet.isReserved && parseInt(reservedPlanet.user_id) === systemData.playerId) {
      planetNameCell.append(`
                <span class="planetMoveGalaxyCooldown" id="cooldown-${galaxyContentObject.position}">
                    ${loca.LOCA_ALL_AJAXLOAD}
                </span>
            `);
      buildListCountdowns.push(new SimpleCountdownTimer(`#cooldown-${galaxyContentObject.position}`, reservedPlanet.cooldown, toGalaxyLink));
    }

    renderEmptySlotActions(galaxyContentObject, systemData);
  }
}

function renderPhalanx(galaxyContentObject) {
  let {
    player
  } = galaxyContentObject;

  if (player) {
    if (galaxyContentObject.actions.canPhalanx) {
      if (player.phalanx.inactive) {
        $("#galaxyRow" + galaxyContentObject.position + " .cellPlanetName").append(`<div class="tooltip js_hideTipOnMobile phalanxInctive" title="${loca.LOCA_PHALANX_ERROR_NOT_ENOUTH_DEUT}"></div>`);
      } else {
        $("#galaxyRow" + galaxyContentObject.position + " .cellPlanetName").append('<a class="overlay phalanxlink"></a>');
        $("#galaxyRow" + galaxyContentObject.position + " .cellPlanetName .phalanxlink").attr('href', player.phalanx.link).append(`<div class="tooltip js_hideTipOnMobile phalanxActive"></div>`).attr("data-overlay-title", player.phalanx.title).attr("data-overlay-class", "phalanx").attr("data-overlay-token", token).attr("data-overlay-token-id", "phalanxDialog");
        $("#galaxyRow" + galaxyContentObject.position + " .cellPlanetName .phalanxActive").attr('title', loca.LOCA_GALAXY_USE_PHALANX);
      }
    }
  }
}

function renderAlliance(galaxyContentObject, systemData) {
  let {
    player
  } = galaxyContentObject;

  if (player.allianceId) {
    $("#galaxyRow" + galaxyContentObject.position + " .cellAlliance").html(`
                <span
                class="${player.isAllianceMember ? "status_abbr_ally_own" : ""} tooltipRel tooltipClose tooltipRight js_hideTipOnMobile"
                rel="alliance${player.allianceId}">
                    ${player.allianceTag} ${getAllianceTooltip(galaxyContentObject, systemData)}
                </span>
            `);
  }
}

function renderActions(galaxyContentObject, systemData) {
  if (systemData.playerId !== galaxyContentObject.player.playerId) {
    $("#galaxyRow" + galaxyContentObject.position + " .cellAction").html(`${getActions(galaxyContentObject, systemData)}`);
  } else {
    let result = `
        ${getDiscoveryLinkIcon(galaxyContentObject)}
        ${`<div class="emptyAction"></div>`}
        ${`<div class="emptyAction"></div>`}
        ${`<div class="emptyAction"></div>`}
        ${`<div class="emptyAction"></div>`}
       `;
    $("#galaxyRow" + galaxyContentObject.position + " .cellAction").html(getDiscoveryLinkIcon(galaxyContentObject)).html(`${result}`);
  }
}

function renderEmptySlotActions(galaxyContentObject, systemData) {
  $("#galaxyRow" + galaxyContentObject.position + " .cellAction").html(`${getEmptySlotActions(galaxyContentObject, systemData)}`);
}

function getPlayerName(galaxyContentObject, systemData) {
  let {
    player
  } = galaxyContentObject;
  let playerName = "";

  if (player.rank && player.rank.hasRank) {
    playerName = `<span class="honorRank ${player.rank.rankClass} tooltip js_hideTipOnMobile" title="${player.rank.rankTitle}"></span>`;
  }

  if (player.playerId !== systemData.playerId) {
    playerName += `<span class="playerName tooltipRel tooltipClose tooltipRight js_hideTipOnMobile ${getPlayerColorClass(player)}"
           rel="player${player.playerId}">${player.playerName}${getPlayerTooltip(galaxyContentObject)}</span>`;
  } else {
    playerName += `<span class="${getPlayerColorClass(player)} ownPlayerRow">${player.playerName}</span>`;
  }

  playerName += getPlayerAbbreviations(player, galaxyContentObject);
  return playerName;
}

function getPlayerColorClass(player) {
  switch (true) {
    case player.isAdmin:
      return "status_abbr_admin";

    case player.isBanned:
      return "status_abbr_banned";

    case player.isOnVacation:
      return "status_abbr_vacation";

    case player.isLongInactive:
      return "status_abbr_longinactive";

    case player.isInactive:
      return "status_abbr_inactive";

    case player.isOutlaw:
      return "status_abbr_outlaw";

    case player.isNewbie:
      return "status_abbr_noob";

    case player.isStrong:
      return "status_abbr_strong";

    case player.isHonorableTarget:
      return "status_abbr_honorableTarget";
  }

  return "status_abbr_active";
}

function getPlayerAbbreviations(player) {
  let returnStatus = [];

  if (player.isAdmin) {
    returnStatus.push(`<span class="status_abbr_admin tooltip js_hideTipOnMobile" title="${loca.LOCA_GALAXY_LEGEND_ADMIN}">${loca.LOCA_GALAXY_PLAYER_STATUS_A}</span>`);
  } else {
    if (player.isBanned) {
      returnStatus.push(`<span class="status_abbr_banned tooltip js_hideTipOnMobile" title="${loca.LOCA_GALAXY_LEGEND_BANNED}">${loca.LOCA_GALAXY_PLAYER_STATUS_G}</span>`);
    }

    if (player.isOnVacation) {
      returnStatus.push(`<span class="status_abbr_vacation tooltip js_hideTipOnMobile" title="${loca.LOCA_STATION_JUMP_VACATION}">${loca.LOCA_GALAXY_PLAYER_STATUS_U}</span>`);
    }

    if (player.isLongInactive) {
      returnStatus.push(`<span class="status_abbr_longinactive tooltip js_hideTipOnMobile" title="${loca.LOCA_GALAXY_LEGEND_TWENTYEIGHT_DAYS_INACTIVE}">${loca.LOCA_GALAXY_PLAYER_STATUS_I_LONG}</span>`);
    } else if (player.isInactive) {
      returnStatus.push(`<span class="status_abbr_inactive tooltip js_hideTipOnMobile" title="${loca.LOCA_GALAXY_LEGEND_SEVEN_DAYS_INACTIVE}">${loca.LOCA_GALAXY_PLAYER_STATUS_I}</span>`);
    }

    if (player.isOutlaw) {
      returnStatus.push(`<span class="status_abbr_outlaw tooltipHTML" title="${loca.LOCA_GALAXY_LEGEND_OUTLAW}|${loca.LOCA_OUTLAW_EXPLANATION}">${loca.LOCA_GALAXY_PLAYER_STATUS_OUTLAW}</span>`);
    }

    if (player.isNewbie) {
      returnStatus.push(`<span class="status_abbr_noob tooltip js_hideTipOnMobile" title="${loca.LOCA_GALAXY_LEGEND_NOOB}">${loca.LOCA_GALAXY_PLAYER_STATUS_N}</span>`);
    }

    if (player.isStrong) {
      returnStatus.push(`<span class="status_abbr_strong tooltip js_hideTipOnMobile" title="${loca.LOCA_GALAXY_LEGEND_STRONG_PLAYER}">${loca.LOCA_GALAXY_PLAYER_STATUS_S}</span>`);
    }

    if (player.isHonorableTarget) {
      returnStatus.push(`<span class="status_abbr_honorableTarget tooltipHTML" title="${loca.LOCA_GALAXY_LEGEND_HONORABLE_TARGET}|${loca.LOCA_GALAXY_LEGEND_HONORABLE_TARGET_EXPLANATION}">${loca.LOCA_GALAXY_PLAYER_STATUS_EP}</span>`);
    }
  }

  return returnStatus.length ? `<pre> (${returnStatus.join()})</pre>` : "";
}

function getPlayerSelectedLanguage(player) {
  if (!player.selectedLanguageIcon) {
    return "";
  }

  return ` <selected-language-icon style="background-image: url('${player.selectedLanguageIcon}');" ></selected-language-icon> `;
}

function getActivityStar(data) {
  if (data.showActivity === false) {
    return "";
  }

  if (data.showMinutes && data.showActivity === 60) {
    return `<div class="activity showMinutes tooltip js_hideTipOnMobile hideTooltipOnMouseenter" 
                title="${loca.LOCA_ALL_ACTIVITY}">
                ${data.idleTime}
            </div>`;
  }

  return `<div class="activity minute${data.showActivity} tooltip js_hideTipOnMobile hideTooltipOnMouseenter" 
            title="${loca.LOCA_ALL_ACTIVITY}">
        </div>`;
}

function addFleetContainer(planetPosition, planetType) {
  return `<div id="ownFleetStatus_${planetPosition}_${planetType}" 
            class="fleetAction js_hideTipOnMobile hideTooltipOnMouseenter" 
            title="">
        </div>`;
}

function getFleetIcon(fleetArray, planetPosition, planetType) {
  if (!fleetArray || !fleetArray.length) {
    return "";
  }

  $(`#ownFleetStatus_${planetPosition}_${planetType}`).removeClass('fleetNeutral').addClass('tooltip').addClass(fleetArray[0]['class']).attr('title', fleetArray[0]['text']);
}

function getPlanetTooltip(planet, galaxyContentObject, systemData) {
  let {
    galaxy,
    system,
    position
  } = galaxyContentObject;
  return `
        <div id="planet${position}" style="display: none;" class="htmlTooltip galaxyTooltip">
            <h1>${loca.LOCA_ALL_PLANET}: <span class="textNormal">${planet.planetName}</span></h1>
            <div class="splitLine"></div>
            <ul class="ListImage">
                <li><span>[${galaxy}:${system}:${position}]</span></li>
                <li><div class="planetTooltip microplanet ${planet['imageInformation']}"></div></li>
            </ul>
            <ul class="ListLinks">
                ${getPlanetOrMoonTooltipLinks(planet, galaxyContentObject, systemData)}
            </ul>
        </div>
        `;
}

function getMoonTooltip(planet, galaxyContentObject, systemData) {
  let {
    galaxy,
    system,
    position
  } = galaxyContentObject;
  return `
        <div id="moon${position}" style="display: none;" class="htmlTooltip galaxyTooltip">
            <h1><span class="textNormal">${planet.planetName}</span></h1>
            <div class="splitLine"></div>
            <ul class="ListImage">
                <li><span id="pos-moon">[${galaxy}:${system}:${position}]</span></li>
                <li><div class="moonTooltip micromoon ${planet['imageInformation']}"></div></li>
                <li><span id="moonsize" title="${loca.LOCA_GALAXY_MOON_DIAMETER_KM}">${planet.size} ${loca.LOCA_OVERVIEW_JS_KM}</span></li>
            </ul>
            <ul class="ListLinks">
                ${getPlanetOrMoonTooltipLinks(planet, galaxyContentObject, systemData)}
            </ul>
        </div>
        `;
}

function getPlanetOrMoonTooltipLinks(planet, galaxyContentObject, systemData) {
  let linkHTML = getActivityElement(planet.activity);
  let {
    currentPlanetId
  } = systemData;

  if (planet.planetId === currentPlanetId) {
    linkHTML += loca.LOCA_FLEET_NO_ACTION_AVAILABLE;
    return linkHTML;
  }

  let {
    galaxy,
    system,
    position,
    player
  } = galaxyContentObject;

  if (player.isOnVacation) {
    linkHTML += loca.LOCA_FLEET_PLAYER_UMODE;
    return linkHTML;
  }

  if (!systemData.canFly) {
    linkHTML += `<li>${loca.LOCA_FLEET_NO_FREE_SLOTS}</li>`;

    if (!systemData.hasAdmiral) {
      linkHTML += `<li><a href="${premiumLink}">${loca.LOCA_HEADER_GETADMIRAL}</a></li>`;
    }

    return linkHTML;
  }

  if (planet.availableMissions) {
    planet.availableMissions.map(mission => {
      if (mission.missionType === constants.espionage) {
        if (mission.canSpy) {
          let espionageMissionFunction = getEspionageMission(galaxyContentObject, planet, systemData);

          if (espionageMissionFunction) {
            linkHTML += `<li><a href="#" 
                                onClick="${espionageMissionFunction}">
                                ${mission.name}
                            </a></li>`;
          }
        }

        if (mission.reportId && mission.reportLink) {
          linkHTML += `<li><a href="${mission.reportLink}" class="overlay">${loca.LOCA_MESSAGES_ESPIONAGEREPORT}</a></li>`;
        }
      } else {
        linkHTML += `<li><a href="${mission.link}">${mission.name}</a></li>`;
      }
    });

    if (galaxyContentObject.actions.canMissileAttack && !player.isAdmin) {
      let holdMissionAvailable = planet.availableMissions.find(availMission => availMission.missionType === 5);

      if (systemData.showOutlawWarning && !systemData.isOutlaw && player.isStrong && !holdMissionAvailable) {
        linkHTML += `<li><a href="#" 
                            onClick="outlawWarning(${constants.missleattack}, ${galaxy}, ${system}, ${position}, ${planet.planetType}, ${systemData.availableMissiles});return false;">
                            ${loca.LOCA_FLEET_MISSILEATTACK}
                        </a></li>`;
      } else {
        linkHTML += `<li><a class="overlay" href="${galaxyContentObject.actions.missileAttackLink}&planetType=${planet.planetType}" data-overlay-modal='true'>${loca.LOCA_FLEET_MISSILEATTACK}</a></li>`;
      }
    }

    return linkHTML;
  }

  return loca.LOCA_FLEET_NO_ACTION_AVAILABLE;
}

function getEspionageMission(galaxyContentObject, planet, systemData) {
  let {
    galaxy,
    system,
    position,
    player
  } = galaxyContentObject;
  let {
    settingsProbeCount
  } = systemData;
  let espionageMission = planet.availableMissions.find(availMission => availMission.missionType === constants.espionage);
  let holdMissionAvailable = planet.availableMissions.find(availMission => availMission.missionType === 5);

  if (espionageMission && espionageMission.canSpy && !player.isAdmin && galaxy && system && position && settingsProbeCount) {
    if (systemData.showOutlawWarning && !systemData.isOutlaw && player.isStrong && !holdMissionAvailable) {
      return `outlawWarning(${espionageMission.missionType}, ${galaxy}, ${system}, ${position}, ${planet.planetType}, ${settingsProbeCount});return false;`;
    } else {
      return `sendShips(${espionageMission.missionType}, ${galaxy}, ${system}, ${position}, ${planet.planetType}, ${settingsProbeCount});return false;`;
    }
  }

  return "";
}

function getDebrisTooltip(planet, galaxyContentObject, systemData) {
  let {
    galaxy,
    system,
    position
  } = galaxyContentObject;
  let {
    metal,
    crystal,
    deuterium
  } = planet.resources;
  let recyclersToSend = Math.min(planet.requiredShips, position === 16 ? systemData.availablePathfinders : systemData.availableRecyclers);
  let linkHTML = "";

  if (!systemData.canFly) {
    linkHTML += `<li>${loca.LOCA_FLEET_NO_FREE_SLOTS}</li>`;

    if (!systemData.hasAdmiral) {
      linkHTML += `<li><a href="${premiumLink}">${loca.LOCA_HEADER_GETADMIRAL}</a></li>`;
    }
  } else if (recyclersToSend && (position === 16 ? systemData.availablePathfinders : systemData.availableRecyclers) && planet.recyclePossible) {
    linkHTML = `<li><a href="#" 
            onClick="sendShips(${8}, ${galaxyContentObject.galaxy}, ${galaxyContentObject.system}, ${galaxyContentObject.position}, ${planet.planetType}, ${recyclersToSend});return false;">
                ${loca.LOCA_GALAXY_DEBRIS_REDUCE}
            </a></li>`;
  } else {
    linkHTML = `<li><span class="inactiveLink">${loca.LOCA_GALAXY_DEBRIS_REDUCE}</span></li>`;
  }

  return `
        <div id="debris${position}" style="display: none;" class="htmlTooltip galaxyTooltip">
            <h1>${loca.LOCA_FLEET_DEBRIS}</h1>
            <div class="splitLine"></div>
            <ul class="ListImage">
                <li><span id="pos-debris">[${galaxy}:${system}:${position}]</span></li>
                <li><div class="debrisTooltip microdebris ${planet['imageInformation']}"></div></li>
            </ul>
            <ul class="ListLinks">
                <li class="debris-content">${loca.LOCA_ALL_METAL}: ${number_format(metal.amount, 0)}</li>
                <li class="debris-content">${loca.LOCA_ALL_CRYSTAL}: ${number_format(crystal.amount, 0)}</li>
                <li class="debris-content">${loca.LOCA_ALL_DEUTERIUM}: ${number_format(deuterium.amount, 0)}</li>
                <li class="debris-recyclers">${position === 16 ? loca.LOCA_GALAXY_PATHFINDER_NEEDED : loca.LOCA_GALAXY_RECYCLER_NEEDED}: ${number_format(planet.requiredShips, 0)}</li>
                ${linkHTML}
            </ul>
        </div>
        `;
}

function getPlayerTooltip(galaxyContentObject) {
  let {
    player
  } = galaxyContentObject;
  let {
    actions
  } = player;
  let rankLink = "";

  if (actions.highscore.available) {
    let statsLink = `
            <a href="${actions.highscore.link}">${player.highscorePositionPlayer}</a>
        `;
    rankLink = `<li class="rank">${actions.highscore.title}: ${statsLink}</li>`;
  }

  let messageLink = "";

  if (actions.message.available) {
    if (!actions.message.disabledChatBar) {
      messageLink = `<li><a href="javascript:void(0)" class="sendMail js_openChat" data-playerId="${player.playerId}">${actions.message.title}</a></li>`;
    } else {
      messageLink = `<li><a href="${actions.message.link}" data-playerId="${player.playerId}">${actions.message.title}</a></li>`;
    }
  }

  let buddyLink = "";

  if (actions.buddies.available) {
    if (player.isAdmin) {
      buddyLink = `
                <li>
                    <a style="margin-top: 4px;" 
                    href="${actions.buddies.link}" 
                    target="_blank" title="${actions.buddies.title}" 
                    class="js_hideTipOnMobile no_decoration">
                        <span class="support_icon icon icon_mail" style="margin-top: 5px;"></span> &nbsp;
                        <div style="position:absolute; top: 32px;left:30px">${actions.buddies.title}</div>
                    </a>
                </li>
            `;
    } else {
      buddyLink = `
                <li><a href="${actions.buddies.link}" class="overlay" data-overlay-title="${actions.buddies.title}">${actions.buddies.title}</a></li>
            `;
    }
  }

  let ignoreLink = "";

  if (actions.ignore.available) {
    ignoreLink = `<li><a href="${actions.ignore.link}">${actions.ignore.title}</a></li>`;
  }

  return `
        <div id="player${player.playerId}" style="display: none;"  class="htmlTooltip galaxyTooltip">
            <h1>${getPlayerSelectedLanguage(player)}<span>${player.playerName}</span></h1>
            <div class="splitLine"></div>
            <ul class="ListLinks">
                ${rankLink}
                ${messageLink}
                ${buddyLink}
                ${ignoreLink}
            </ul>
        </div>
        `;
}

function renderEventSpaceObjects(galaxyContentObject, systemData) {
  galaxyContentObject.planets.map(planet => {
    switch (planet.planetType) {
      case 1:
        renderEventPlanet(planet, galaxyContentObject, systemData);
        break;

      case 2:
        renderEventDebris(planet, galaxyContentObject, systemData);
        break;
    }
  });
}

function renderEventPlanet(planet, galaxyContentObject, systemData) {
  if (!planet) {
    return;
  }

  let lastPosition = $("div.expeditionDebrisSlotBoxRow");
  let positionNumber = parseInt(lastPosition.find('.cellPosition').text()) + 1;
  lastPosition.after(`
        <div class="eventSlotRow">
            <div class="eventSlotBoxCell cellPosition">${positionNumber}</div>
            <div class="bdaySlotBox"  id="galaxyRow17planet">
                <div>
                    <h3 class="title float_left">${loca.LOCA_EVENTH_ENEMY_INFINITELY_SPACE}:</h3>
                </div>
                <div class="birthdayNameWrapper">
                    <div id="birthdayName" class="name float_left tooltipRel tooltipClose tooltipRight js_hideTipOnMobile js_bday_planet"
                       rel="planet17"
                    >
                        <div style="position: relative;width: 30px;height: 30px;display: inline-block;">
                            <img class="float_left"
                                src="${planet.imageInformation}"
                                width="30"
                                height="30"
                            />
                            ${addFleetContainer(galaxyContentObject.position, planet.planetType)}
                        </div>${planet.planetName}
                        ${getEventPlanetTooltip(planet, galaxyContentObject, systemData)}
                    </div>
                </div>
            </div>
        </div>
    `);
  getFleetIcon(planet.fleet, galaxyContentObject.position, planet.planetType);
}

function renderEventDebris(planet, galaxyContentObject, systemData) {
  if (!planet) {
    return;
  }

  let darkMatterObject = planet.resources.darkMatter;

  if (!darkMatterObject || !darkMatterObject.amount) {
    return;
  }

  let lastPosition = $("#galaxyRow17planet");

  if (!lastPosition.length) {
    lastPosition = $("div.expeditionDebrisSlotBoxRow");
  }

  let positionNumber = parseInt(lastPosition.find('.cellPosition').text()) + 1;
  lastPosition.after(`
        <div class="eventSlotRow">
            <div class="eventSlotBoxCell cellPosition">${positionNumber}</div>
            <div class="bdaySlotBox"  id="galaxyRow17debris">
                <div>
                    <h3 class="title float_left">${loca.LOCA_EVENTH_ENEMY_INFINITELY_SPACE}:</h3>
                </div>
                <div class="birthdayNameWrapper">
                    <div id="birthdayName" class="name float_left tooltipRel tooltipClose tooltipRight js_hideTipOnMobile js_bday_planet"
                       rel="debris17"
                    >
                        <div style="position: relative;width: 30px;height: 30px;display: inline-block;">
                            <img class="float_left" src="//gf3.geo.gfsrv.net/cdn88/e1b6654d1b29bc65aea0b8fc79be80.png" width="30" height="30"/>
                            ${addFleetContainer(galaxyContentObject.position, planet.planetType)}
                        </div>${planet.planetName}
                        ${getEventDebrisTooltip(planet, galaxyContentObject, systemData)}
                    </div>
                </div>
            </div>
        </div>
    `);
  getFleetIcon(planet.fleet, galaxyContentObject.position, planet.planetType);
}

function getEventPlanetTooltip(planet, galaxyContentObject, systemData) {
  let {
    galaxy,
    system,
    position
  } = galaxyContentObject;
  let linkHTML = '';

  if (!systemData.canFly) {
    linkHTML += `<li>${loca.LOCA_FLEET_NO_FREE_SLOTS}</li>`;

    if (!systemData.hasAdmiral) {
      linkHTML += `<li><a href="${premiumLink}">${loca.LOCA_HEADER_GETADMIRAL}</a></li>`;
    }
  } else {
    planet.availableMissions.map(mission => {
      if (mission.missionType === constants.espionage) {
        if (mission.canSpy) {
          let espionageMissionFunction = getEspionageMission(galaxyContentObject, planet, systemData);

          if (espionageMissionFunction) {
            linkHTML += `<li><a href="#" 
                                onClick="${espionageMissionFunction}">
                                ${mission.name}
                            </a></li>`;
          }
        }

        if (mission.reportId && mission.reportLink) {
          linkHTML += `<li><a href="${mission.reportLink}" class="overlay">${loca.LOCA_MESSAGES_ESPIONAGEREPORT}</a></li>`;
        }
      } else {
        linkHTML += `<li><a href="${mission.link}">${mission.name}</a></li>`;
      }
    });
  }

  return `
        <div id="planet${position}" style="display: none;" class="htmlTooltip galaxyTooltip">
            <h1>${loca.LOCA_ALL_PLANET}: <span class="textNormal">${planet.planetName}</span></h1>
            <div class="splitLine"></div>
            <ul class="ListImage">
                <li><span>[${galaxy}:${system}:${position}]</span></li>
                <li><img src="${planet['imageInformation']}" alt="" height="30" width="30"></li>
            </ul>
            <ul class="ListLinks">
                ${linkHTML}
            </ul>
        </div>
        `;
}

function getEventDebrisTooltip(planet, galaxyContentObject, systemData) {
  let {
    galaxy,
    system,
    position
  } = galaxyContentObject;
  let darkMatterObject = planet.resources.darkMatter;
  let darkmatter = number_format(darkMatterObject.amount);
  let recyclersToSend = planet.requiredShips;
  let linkHTML = "";

  if (!systemData.canFly) {
    linkHTML += `<li>${loca.LOCA_FLEET_NO_FREE_SLOTS}</li>`;

    if (!systemData.hasAdmiral) {
      linkHTML += `<li><a href="${premiumLink}">${loca.LOCA_HEADER_GETADMIRAL}</a></li>`;
    }
  } else if (systemData.availableRecyclers > 0) {
    let recyclerJS = `sendShips(${8}, ${galaxy}, ${system}, ${position}, ${planet.planetType}, ${recyclersToSend})`;
    linkHTML = `<li><a href="#" onClick="${recyclerJS};return false">${loca.LOCA_GALAXY_DEBRIS_REDUCE}</a></li>`;
  } else {
    linkHTML = `<li><span class="inactiveLink">${loca.LOCA_GALAXY_DEBRIS_REDUCE}</span></li>`;
  }

  let headline = loca.LOCA_FLEET_DEBRIS;
  return `
        <div id="debris${position}" style="display: none;" class="htmlTooltip galaxyTooltip">
            <h1>${headline}</h1>
            <div class="splitLine"></div>
            <ul class="ListImage">
                <li><span id="pos-debris">[${galaxy}:${system}:${position}]</span></li>
                <li><img class="float_left" src="//gf3.geo.gfsrv.net/cdn88/e1b6654d1b29bc65aea0b8fc79be80.png" width="30" height="30" alt="${headline}"/></li>
            </ul>
            <ul class="ListLinks">
                <li class="debris-content">${loca.LOCA_ALL_DARKMATTER}: ${darkmatter}</li>
                ${linkHTML}
            </ul>
        </div>
    `;
}

function getActions(galaxyContentObject, systemData) {
  let {
    galaxy,
    system,
    position,
    player
  } = galaxyContentObject;
  let {
    actions
  } = player;
  let mainPlanet = galaxyContentObject.planets.find(planet => planet.planetType === 1);
  let holdMissionAvailable = mainPlanet.availableMissions.find(availMission => availMission.missionType === 5);
  let espionageReportAvailable = mainPlanet.availableMissions.find(availMission => availMission.missionType === 6 && availMission.reportId);
  let espionageClass = '';

  if (espionageReportAvailable) {
    espionageClass = 'hueRotate';
  }

  let espionageLink = "";

  if (player.isAdmin) {
    espionageLink = `<div class="emptyAction"></div>`;
  } else {
    if (galaxyContentObject.actions.canEspionage === false) {
      espionageLink = `<a class="tooltip js_hideTipOnMobile espionage"
                   title="${loca.LOCA_FLEET_NO_ESPIONAGE}"
                   href="javascript: void(0);"
                >
                    <span class="icon icon_eye grayscale"></span>
                </a>`;
    } else {
      let ipiHint = 'ipiGalaxyActionSpy';

      if (galaxyContentObject.player.isOnVacation) {
        ipiHint = 'ipiGalaxyActionSpyVacation';
      }

      espionageLink = `
                <a class="tooltip js_hideTipOnMobile espionage ipiHintable"
                       title="${loca.LOCA_FLEET_ESPIONAGE}"
                       href="javascript: void(0);"
                       onclick="${getEspionageMission(galaxyContentObject, mainPlanet, systemData)}"
                       data-ipi-hint="${ipiHint}"
                    >
                    <span class="icon icon_eye ${espionageClass}"></span>
                </a>`;
    }
  }

  let messageLink = "";

  if (actions.message.available) {
    if (!actions.message.disabledChatBar) {
      messageLink = `<a href="javascript:void(0)" class="sendMail js_openChat tooltip" data-playerId="${player.playerId}" title="${actions.message.title}"><span class="icon icon_chat"></span></a>`;
    } else {
      messageLink = `<a href="${actions.message.link}" class="tooltip" data-playerId="${player.playerId}" title="${actions.message.title}"><span class="icon icon_chat"></span></a>`;
    }
  } else {
    if (player.isAdmin) {
      messageLink = `
                <a href="${actions.buddies.link}" 
                    target="_blank" title="${actions.buddies.title}" 
                    class="tooltip js_hideTipOnMobile icon">
                        <span class="support_icon icon icon_mail"></span>
                </a>
            `;
    } else {
      messageLink = `<div class="emptyAction"></div>`;
    }
  }

  let buddyLink = "";

  if (actions.buddies.available) {
    if (player.isAdmin === false) {
      buddyLink = `
            <a class="tooltip overlay buddyrequest ipiHintable"
               title="${actions.buddies.title}"
               href="${actions.buddies.link}"
               data-overlay-title="${actions.buddies.title}"
               data-ipi-hint="ipiGalaxySendBuddyRequest"
            >
                <span class="icon icon_user"></span>
            </a>`;
    } else {
      buddyLink = `<div class="emptyAction"></div>`;
    }
  } else {
    buddyLink = `<div class="emptyAction"></div>`;
  }

  let missileLink = "";

  if (galaxyContentObject.actions.canMissileAttack && !player.isAdmin && galaxy && system && position) {
    if (systemData.showOutlawWarning && !systemData.isOutlaw && player.isStrong && !holdMissionAvailable) {
      missileLink = `
                <a class="tooltip js_hideTipOnMobile missleattack"
                       title="${loca.LOCA_FLEET_MISSILEATTACK}"
                       href="javascript: void(0);"
                       onclick="outlawWarning(
                       10,
                       ${galaxy},
                       ${system},
                       ${position},
                       1,
                       ${systemData.availableMissiles}
                               ); return false;"
                    >
                    <span class="icon icon_missile"></span>
                </a>`;
    } else {
      missileLink = `<a class="tooltip js_hideTipOnMobile overlay missleattack"
               title="${loca.LOCA_FLEET_MISSILEATTACK}"
               href="${galaxyContentObject.actions.missileAttackLink}&planetType=${mainPlanet.planetType}"
               data-overlay-modal='true'
            >
                <span class="icon icon_missile"></span>
            </a>`;
    }
  } else if (player.isAdmin) {
    missileLink = `<div class="emptyAction"></div>`;
  } else {
    missileLink = `<a class="tooltip js_hideTipOnMobile missleattack"
               title="${loca.LOCA_FLEET_MISSILEATTACK}"
               href="javascript: void(0);"
            >
                <span class="icon icon_missile grayscale"></span>
            </a>`;
  }

  const discoverLink = getDiscoveryLinkIcon(galaxyContentObject);
  return `
        ${discoverLink}
        ${espionageLink}
        ${messageLink}
        ${buddyLink}
        ${missileLink}
        `;
}

function getEmptySlotActions(galaxyContentObject, systemData) {
  let emptyLink = `<div class="emptyAction"></div>`;
  let coloniseMission = galaxyContentObject.availableMissions.find(availMission => availMission.missionType === 7);
  let colonisationLink = "";

  if (!systemData.canColonize || !coloniseMission || coloniseMission.link === "#") {
    colonisationLink = `<div class="tooltip planetMoveIcons colonize-inactive icon tpd-hideOnClickOutside"
                      title="${coloniseMission ? coloniseMission.description : loca.LOCA_GALAXY_ERROR_COLONIZATION}"></div>`;
  } else {
    colonisationLink = `<a href="${coloniseMission.link}" class="tooltip planetMoveIcons colonize-active icon tpd-hideOnClickOutside ipiHintable" data-ipi-hint="ipiGalaxyColonize">
                    <div class="tooltip planetMoveIcons colonize-active icon tpd-hideOnClickOutside"
                      title="${coloniseMission.description}"></div></a>`;
  }

  let planetMove = galaxyContentObject.availableMissions.find(availMission => availMission.missionType === 0);
  let planetMoveLink = "";

  if (planetMove === undefined) {
    planetMoveLink = `<div class="emptyAction"></div>`;
  } else if (planetMove.planetMovePossible === true) {
    planetMoveLink = `<a class="planetMoveIcons planetMoveDefault tooltip icon js_hideTipOnMobile"
               href="javascript: void(0);"
               onClick="movePlanet(
                       '${planetMove.moveLink}',
                       {'position':${galaxyContentObject.position}, 
                       'galaxy': ${galaxyContentObject.galaxy}, 
                       'system': ${galaxyContentObject.system}},
                       '${planetMove.galaxyLink}'
                       ); return false;"
               title="${planetMove.title}"
            ><div class="planetMoveIcons planetMoveDefault tooltip icon js_hideTipOnMobile"
                      title="${planetMove.title}"></div></a>`;
  } else {
    planetMoveLink = `<div class="planetMoveIcons planetMoveInactive tooltip icon"
                      title="${planetMove.title}"></div>`;
  }

  const discoverLink = getDiscoveryLinkIcon(galaxyContentObject);
  return `
        ${discoverLink}
        ${colonisationLink}
        ${planetMoveLink}
        ${emptyLink}
        ${emptyLink}
        `;
}

function getDiscoveryLinkIcon(galaxyContentObject) {
  let discoverLink = "";

  if (constants.lifeformEnabled === true) {
    const discoverMission = galaxyContentObject.availableMissions.find(mission => mission.missionType === constants.discover);

    if (typeof discoverMission !== 'undefined') {
      if (discoverMission.canSend === true) {
        const titleText = galaxyLoca.discoverySend + " " + discoverMission.discoveryCount;
        discoverLink = `<div class="planetDiscoverIcons planetDiscoverDefault icon"><a href="#" 
                    class="tooltip js_hideTipOnMobile ipiHintable planetDiscover position${galaxyContentObject.position}"
                    data-ipi-hint="ipiDiscoverLifeform"
                    onClick="discoverPlanet(
                        '${discoverMission.link}',
                        {
                            'galaxy': ${galaxyContentObject.galaxy},
                            'system': ${galaxyContentObject.system},
                            'position':${galaxyContentObject.position},
                            '_token': token
                        }
                    ); return false;"
                    title="${titleText}">
                </a></div>`;
      } else {
        discoverLink = `<div class="planetDiscoverIcons planetDiscoverUnavailable tooltip ipiHintable icon js_hideTipOnMobile"
                    data-ipi-hint="ipiDiscoverLifeform"
                    title="${discoverMission.canSend}">
                </div>`;
      }
    }
  }

  return discoverLink;
}

function getAllianceTooltip(galaxyContentObject) {
  let {
    player
  } = galaxyContentObject;
  let {
    alliance
  } = player.actions;

  if (!alliance) {
    return "";
  }

  let allianceClass = "";

  if (alliance.allianceClassName && alliance.allianceClassCss) {
    allianceClass = `<li>${loca.LOCA_ALLIANCE_CLASS}: <span class="${alliance.allianceClassCss}">${alliance.allianceClassName}</span></li>`;
  }

  let infoPageLink;

  if (player.isAllianceMember) {
    infoPageLink = `<li><a href="${alliance.infoPageLink}">${alliance.infoPageTitle}</a></li>`;
  } else {
    infoPageLink = `<li><a href="allianceInfo.php?allianceId=${player.allianceId}" target="_ally">${alliance.infoPageTitle}</a></li>`;
  }

  let applicationLink = "";

  if (alliance.applicationLink && alliance.applicationTitle) {
    applicationLink = `<li><a href="${alliance.applicationLink}">${alliance.applicationTitle}</a></li>`;
  }

  return `
        <div id="alliance${player.allianceId}" style="display: none;"  class="htmlTooltip galaxyTooltip">
            <h1>
                ${getAllianceSelectedLanguage(player)}
                ${player.allianceName}
            </h1>
            <div class="splitLine"></div>
            <ul class="ListLinks">
                <li class="rank">${loca.LOCA_GALAXY_RANK}: <a href="${alliance.highscoreLink}">${alliance.highscoreTitle}</a></li>
                <li class="members">${loca.LOCA_NETWORK_USERS}: ${alliance.memberCount}</li>
                ${allianceClass}
                ${infoPageLink}
                ${applicationLink}
            </ul>
        </div>
        `;
}

function getAllianceSelectedLanguage(player) {
  if (!player.allianceSelectedLanguage) {
    return "";
  }

  return ` <selected-language-icon style="background-image: url('${player.allianceSelectedLanguage}');" ></selected-language-icon> `;
}

function getActivityElement(activityObject) {
  let {
    idleTime,
    showActivity
  } = activityObject;

  if (showActivity) {
    let idle;

    if (showActivity === 60) {
      idle = loca.LOCA_ALL_ACTIVITY + ": " + idleTime + loca.LOCA_ALL_TIME_MINUTE;
    } else {
      idle = loca.LOCA_ALL_ACTIVITY + ":<div class=\"alert_triangle\"><img src='//gf2.geo.gfsrv.net/cdn12/b4c8503dd1f37dc9924909d28f3b26.gif'/></div>";
    }

    return `<li>${idle}</li>`;
  }

  return "";
}

function clearPosition(position) {
  $("#galaxyRow" + position + " .cellPosition").removeClass('status_abbr_buddy');
  $("#galaxyRow" + position + " .cellPlanet").html("");
  $("#galaxyRow" + position + " .cellPlayerName").html("");
  $("#galaxyRow" + position + " .cellPlanetName").html("");
  $("#galaxyRow" + position + " .cellMoon").html("");
  $("#galaxyRow" + position + " .cellDebris").html("");
  $("#galaxyRow" + position + " .cellAlliance").html("");
  $("#galaxyRow" + position + " .cellAction").html("");
  let rowElement = $("#galaxyRow" + position);
  rowElement.removeClass('inactive_filter');
  rowElement.removeClass('filtered_filter_inactive');
  rowElement.removeClass('vacation_filter');
  rowElement.removeClass('filtered_filter_vacation');
  rowElement.removeClass('strong_filter');
  rowElement.removeClass('filtered_filter_strong');
  rowElement.removeClass('newbie_filter');
  rowElement.removeClass('filtered_filter_newbie');
  rowElement.removeClass('empty_filter');
  rowElement.removeClass('filtered_filter_empty');
}

function displayContentGalaxy(data) {
  // var selector = getTooltipSelector("#inhalt");
  //removeTooltip(selector);
  var json = $.parseJSON(data);
  $("#galaxyContent").html(json.galaxy);
  $('galaxyContent').find('script').each(function () {
    // http://perfectionkills.com/global-eval-what-are-the-options/
    $.globalEval($(this).text());
  });
  tabletInitGalaxyDetails(); //just for the event

  eventBDayInitGalaxy();
  $("#galaxyLoading").hide();

  if (preserveSystemOnPlanetChange) {
    $(".planetlink, .moonlink").querystring({
      galaxy: galaxy,
      system: system
    });
  }

  getAjaxResourcebox();
}

function submitForm() {
  galaxy = $("#galaxy_input").val();
  system = $("#system_input").val();

  if (0 === galaxy.length || !$.isNumeric(+galaxy)) {
    galaxy = 1;
  }

  if (0 === system.length || !$.isNumeric(+system)) {
    system = 1;
  }

  if (mobile) {
    loadContent(galaxy, system);
  } else {
    loadContentNew(galaxy, system);
  }
}

function loadContent(galaxy, system) {
  $("#galaxyLoading").show();

  if (0 === galaxy.length || !$.isNumeric(+galaxy)) {
    galaxy = 1;
  }

  if (0 === system.length || !$.isNumeric(+system)) {
    system = 1;
  }

  $("#galaxy_input").val(galaxy);
  $("#system_input").val(system);
  let phalanxSystemLink = $('#galaxyHeader .phalanxlink.btn_system_action');

  if (phalanxSystemLink.length) {
    phalanxSystemLink.attr('href', phalanxSystemLink.attr('href').replace(/(galaxy=)\d+/, "$1" + galaxy).replace(/(system=)\d+/, "$1" + system));
  }

  $.post(contentLink, {
    galaxy: galaxy,
    system: system,
    _token: token
  }, displayContentGalaxy);
}

function loadContentNew(galaxy, system) {
  if (!canSwitchGalaxy && notEnoughDeuteriumMessage) {
    fadeBox(notEnoughDeuteriumMessage, true);
    return;
  }

  $("#galaxyLoading").show();

  if (0 === galaxy.length || $.isNumeric(+galaxy) === false) {
    galaxy = 1;
  }

  if (0 === system.length || $.isNumeric(+system) === false) {
    system = 1;
  }

  $("input#galaxy_input").val(galaxy);
  $("input#system_input").val(system);
  let phalanxSystemLink = $('#galaxyHeader .phalanxlink.btn_system_action');

  if (phalanxSystemLink.length) {
    phalanxSystemLink.attr('href', phalanxSystemLink.attr('href').replace(/(galaxy=)\d+/, "$1" + galaxy).replace(/(system=)\d+/, "$1" + system));
  }

  if (inProgress === false) {
    inProgress = true;
    $.post(galaxyContentLink, {
        galaxy: galaxy,
        system: system,
        _token: token
    }, renderContentGalaxy);
  }
}

function errorBoxDeuterium() {
  fadeBox(galaxyLoca.deuteriumNeeded, true); // getAjaxResourcebox();
}

function doScan(position, planettype) {
  sendShips(constants.espionage, galaxy, system, position, planettype, spionageAmount);
}

function initPhalanx() {
  getAjaxResourcebox();
  $('.eventFleet:odd').addClass('odd');
  $('.partnerInfo:even').addClass('part-even');
  $(".toggleInfos").click(function () {
    id = $(this).attr("rel");

    if ($(this).attr("class") == "toggleInfos infosOpen") {
      $(this).removeClass("infosOpen");
      $(this).addClass("infosClosed");
      $(this).children().attr("src", '//gf2.geo.gfsrv.net/cdn10/de1e5f629d9e47d283488eee0c0ede.gif');
      $("." + id).attr("style", "display: none;");
    } else {
      $(this).addClass("infosOpen");
      $(this).removeClass("infosClosed");
      $(this).children().attr("src", '//gf3.geo.gfsrv.net/cdnb6/577565fadab7780b0997a76d0dca9b.gif');
      $("." + id).attr("style", "display: block;");
    }
  });
  var $titleBar = $(".overlayDiv.phalanx").siblings('.ui-dialog-titlebar');

  if ($titleBar.find('.refreshPhalanxLink').length) {
    $("#phalanxWrap .refreshPhalanxLink").remove();
  } else {
    $titleBar.find('.ui-dialog-title').append($("#phalanxWrap .refreshPhalanxLink"));
  }
}

function initSpySystem() {
  $('#galaxyHeader').off('click').on('click', '.spysystemlink', function (event) {
    event.preventDefault();
    event.stopPropagation();
    let $target = $(event.target);
    let targetUrl = $target.data('targetUrl');

    if (!targetUrl) {
      targetUrl = $target.parents().data('targetUrl');
    }

    if (!targetUrl) {
      return;
    }

    $.post(targetUrl, {
      galaxy: $("#galaxy_input").val(),
      system: $("#system_input").val(),
      _token: token
    }, 'json').done(function (jsoned) {
      let data = JSON.parse(jsoned);
      token = data.newAjaxToken;
      updateOverlayToken('phalanxDialog', data.newAjaxToken);
      updateOverlayToken('phalanxSystemDialog', data.newAjaxToken);

      for (let i = 0; i < data.planets.length; ++i) {
        $('#ownFleetStatus_' + data.planets[i].position + '_' + data.planets[i].type).removeClass("fleetNeutral").attr('title', galaxyLoca.fleetAttacking).addClass('fleetHostile').addClass('tooltip');
      }

      addToTable(data.text, data.count <= 0 ? 'error' : 'success');

      if (data.count > 0) {
        getAjaxEventbox();
      }
    });
  });
}

function initExpeditionFleetTemplates() {
  $('#expeditionFleetTemplateSelect').on('change', function (e) {
    let expeditionFleetTemplateId = getValue($('#expeditionFleetTemplateSelect').val());

    if (expeditionFleetTemplateId === 0) {
      $('#expeditionbutton').show();
      $('#sendExpeditionFleetTemplateFleet').hide().attr('disabled', true);
    } else {
      let expeditionFleetTemplate = expeditionFleetTemplates.find(template => template.id === expeditionFleetTemplateId);

      if (!expeditionFleetTemplate) {
        $('#expeditionbutton').show();
        $('#sendExpeditionFleetTemplateFleet').hide().attr('disabled', true);
      } else {
        $('#expeditionbutton').hide();
        $('#sendExpeditionFleetTemplateFleet').show();
        galaxyCheckTarget(expeditionFleetTemplateId, galaxy, system);
      }
    }
  });
}

let checkingTarget = false;

function galaxyCheckTarget(expeditionFleetTemplateId, selectedGalaxy, selectedSystem) {
  if (!selectedGalaxy) {
    return;
  }

  if (!selectedSystem) {
    return;
  }

  let expeditionFleetTemplate = expeditionFleetTemplates.find(template => template.id === expeditionFleetTemplateId);

  if (!expeditionFleetTemplate) {
    return;
  }

  if (checkingTarget) {
    return;
  }

  checkingTarget = true;
  let params = {
    'galaxy': selectedGalaxy,
    'system': selectedSystem,
    'position': expeditionPosition,
    'type': spaceObjectTypePlanet,
    'mission': missionExpedition,
    'speed': expeditionFleetTemplate.fleetSpeed,
    '_token': token
  };
  let ships = expeditionFleetTemplate.ships;
  Object.keys(ships).forEach(function (shipId) {
    params['am' + shipId] = ships[shipId];
  });
  $.ajax({
    url: checkTargetUrl,
    type: 'POST',
    dataType: "json",
    data: params,
    success: function (response) {
      if (selectedGalaxy === galaxy && selectedSystem === system && expeditionFleetTemplateId === getValue($('#expeditionFleetTemplateSelect').val())) {
        if (response.targetOk) {
          $('#sendExpeditionFleetTemplateFleet').removeAttr('disabled');
        } else {
          let responseError = response.errors[0];
          showNotification(responseError ? responseError.message : undefined, 'error');
        }
      }

      token = response.newAjaxToken;
      checkingTarget = false;
    },
    error: function (e) {
      showNotification(undefined, 'error');
      checkingTarget = false;
    }
  });
}

function sendExpedtionFleetFromTemplate() {
  let selectedExpedtionFleetTemplateId = getValue($('#expeditionFleetTemplateSelect').val());

  if (!selectedExpedtionFleetTemplateId) {
    return;
  }

  let expeditionFleetTemplate = expeditionFleetTemplates.find(template => template.id === selectedExpedtionFleetTemplateId);

  if (!expeditionFleetTemplate) {
    return;
  }

  let ships = expeditionFleetTemplate.ships;
  let additionalParams = {
    'speed': expeditionFleetTemplate.fleetSpeed / 10,
    'holdingtime': expeditionFleetTemplate.expeditionTime
  };
  Object.keys(ships).forEach(function (shipId) {
    additionalParams['am' + shipId] = ships[shipId];
  });
  sendShips(missionExpedition, galaxy, system, expeditionPosition, spaceObjectTypePlanet, 0, additionalParams);
}

function initMissleAttackLayer() {
  $("#rocketattack").closest('.ui-dialog-content').dialog('option', 'title', $('#rocketattack').data('title'));
  $("#rocketattack input#missileCount").keyup(function () {
    checkIntInput($(this), 1, $(this).data("max"));
  }).change(function () {
    checkIntInput($(this), 1, $(this).data("max"));
  }).focus();
  $("#rocketattack #number").bind('click', function () {
    var $input = $("#rocketattack input#missileCount");

    if (parseInt($input.val()) != $input.data('max')) {
      $input.val($input.data('max'));
    } else {
      $input.val('1');
    }
  });
  $("#rocketattack #priority a").bind('click', function () {
    var $this = $(this);
    var $primaryTarget = $('#primaryTarget');
    $("#rocketattack #priority a").not($this).removeClass('active');

    if ($this.hasClass('active')) {
      $this.removeClass('active');
      $primaryTarget.val('');
      $("#noPriorityInfo").show();
    } else {
      $this.addClass('active');
      $primaryTarget.val($this.attr('ref'));
      $("#noPriorityInfo").hide();
    }
  });
  $("form#rocketForm").submit(function () {
    $.post($(this).attr("action"), $(this).serialize(), function (response) {
      if (response) {
        launchMissiles(response);
      }
    });
    return false;
  });

  function updateArrivalTime() {
    var $timer = $("#rocketattack #arrivalTime #timer");
    $timer.html(getFormatedDate(serverTime.getTime() + 1000 * $timer.data('duration'), '[d].[m].[y] [G]:[i]:[s]'));
  }

  timerHandler.appendCallback(updateArrivalTime);
  updateArrivalTime();
}

function displayMiniFleetMessage(response, addCoordinatesToMessage = true) {
  var message = response.message;

  if (addCoordinatesToMessage && typeof response.coordinates != 'undefined' && response.coordinates) {
    message += ' [' + response.coordinates.galaxy + ':' + response.coordinates.system + ':' + response.coordinates.position + ']';
  }

  if (response.success) {
    var symbolSelector = '#ownFleetStatus_' + response.coordinates.position + '_' + response.planetType;

    switch (response.type) {
      case 1:
        $(symbolSelector).removeClass("fleetNeutral");
        $(symbolSelector).attr('title', galaxyLoca.fleetAttacking).addClass('fleetHostile').addClass('tooltip');
        break;

      case 2:
        $(symbolSelector).attr('title', galaxyLoca.fleetUnderway).addClass('fleetNeutral').addClass('tooltip');
        break;

      case 3:
        $(symbolSelector).attr('title', galaxyLoca.fleetUnderway).addClass('fleetNeutral').addClass('tooltip');
        break;

      case 4:
        $(symbolSelector).attr('title', galaxyLoca.fleetUnderway).addClass('fleetNeutral').addClass('tooltip');
        break;
    }

    addToTable(message, "success", response.shipsSent);
    showNotification(message, "success");
    $("#slotUsed").html(tsdpkt(response.slots));
    setShips("probeValue", tsdpkt(response.probes));
    setShips("recyclerValue", tsdpkt(response.recyclers));
    setShips("missileValue", tsdpkt(response.missiles));
  } else {
    addToTable(message, "error");
    showNotification(message, "error");
  }

  shipsendingDone = 1;
}

function getFilterClass(filterId) {
  let filterClass;

  switch (filterId) {
    case 'filter_empty':
      filterClass = '.empty_filter';
      break;

    case 'filter_inactive':
      filterClass = '.inactive_filter';
      break;

    case 'filter_vacation':
      filterClass = '.vacation_filter';
      break;

    case 'filter_strong':
      filterClass = '.strong_filter';
      break;

    case 'filter_newbie':
      filterClass = '.newbie_filter';
      break;
  }

  return filterClass;
}

function filterToggle(event) {
  let filterTarget = event.target;
  let filterClass = getFilterClass(filterTarget.id);
  filterTarget = $(filterTarget);

  if (filterTarget.hasClass('filter_active')) {
    filterTarget.removeClass('filter_active');
    $(filterClass).each(function (i, obj) {
      $(this).removeClass('filtered_' + $(event.target)[0].id);
    });
    sendFilterToggle($(event.target)[0].id, 0);
    event.stopPropagation();
  } else {
    filterTarget.addClass('filter_active');
    $(filterClass).each(function (i, obj) {
      $(this).addClass('filtered_' + $(event.target)[0].id);
    });
    sendFilterToggle($(event.target)[0].id, 1);
    event.stopPropagation();
  }
}

function sendFilterToggle(id, state) {
  $.ajax({
    type: 'POST',
    url: '?page=togglefilter',
    dataType: 'json',
    data: {
      id: id,
      state: state
    },
    success: function (data) {},
    error: function () {}
  });
}
function HappyEdit(cfg) {
  this.tab = cfg.tab || '';
  this.urlSubmitPlayer = cfg.urlSubmitPlayer;
  this.urlSubmitBuildings = cfg.urlSubmitBuildings;
  this.urlSubmitResearch = cfg.urlSubmitResearch;
  this.urlSubmitShips = cfg.urlSubmitShips;
  this.urlSubmitDefense = cfg.urlSubmitDefense;
  this.urlSubmitPlanet = cfg.urlSubmitPlanet;
  this.urlSubmitWreckfield = cfg.urlSubmitWreckfield;
  this.urlSubmitFleet = cfg.urlSubmitFleet;
  this.urlSubmitRewards = cfg.urlSubmitRewards;
  this.urlRestartEventHandler = cfg.urlRestartEventHandler;
  this.urlTriggerNews = cfg.urlTriggerNews;
  this.urlSubmitBuffs = cfg.urlSubmitBuffs;
  this.tabs = {
    player: cfg.urlFetchPlayerData || null,
    buildings: cfg.urlFetchBuildingsData || null,
    research: cfg.urlFetchResearchData || null,
    ships: cfg.urlFetchShipsData || null,
    defenses: cfg.urlFetchDefensesData || null,
    wreckfield: cfg.urlFetchWreckfieldData || null,
    rewards: cfg.urlFetchRewardsData || null,
    trader: cfg.urlFetchTraderData || null,
    planet: cfg.urlFetchPlanetData || null,
    fleet: cfg.urlFetchFleetData || null,
    eventHandler: cfg.urlFetchEventHandlerData || null,
    lifeform: cfg.urlFetchLifeformData || null,
    lfbuilding: cfg.urlFetchLifeformBuildingData || null,
    lfresearch: cfg.urlFetchLifeformResearchData || null,
    buffs: cfg.urlFetchBuffData || null,
    ipi: cfg.urlFetchIpiData || null
  };
  this.initItemsCommon(cfg);
  this.fetchData(this.tab);
}

HappyEdit.prototype.onAjaxDone = function () {
  this.loadingIndicator.hide();
  let that = this;
  let lvlOfAll = $('#lvlOfAllBuilding');

  switch (this.tab) {
    case 'player':
      $('.triggerNews').bind('click', that.triggerNews.bind(that));
      $('.playerSubmit').bind('click', that.onClickSavePlayerData.bind(that));
      break;

    case 'buildings':
      $('.buildingsSubmit').bind('click', that.onClickSaveBuildingsData.bind(that));
      break;

    case 'research':
      $('.researchSubmit').bind('click', that.onClickSaveResearchData.bind(that));
      break;

    case 'ships':
      $('.shipsSubmit').bind('click', that.onClickSaveShipsData.bind(that));
      break;

    case 'defenses':
      $('.defenseSubmit').bind('click', that.onClickSaveDefensesData.bind(that));
      break;

    case 'planet':
      $('.planetSubmit').bind('click', that.onClickSavePlanetData.bind(that));
      $('#resetBashing .ajax').bind('click', that.onClickResetBashing.bind(that));
      break;

    case 'wreckfield':
      $('.wreckfieldSubmit').bind('click', that.onClickSaveWreckfieldData.bind(that));
      break;

    case 'rewards':
      $('.rewardsSubmit').bind('click', that.onClickSaveRewardsData.bind(that));
      break;

    case 'trader':
      $('#traderEdit .ajax').each(function () {
        $(this).bind('click', that.onItemClick.bind(that));
      });
      break;

    case 'fleet':
      $('.finishFleet').bind('click', that.onClickFinishFleet.bind(that));
      break;

    case 'lifeform':
      $('#lifeformSettings .lfdiscover').bind('click', that.submitDiscoverData.bind(that));
      $('.lifeformSettingsSubmit').bind('click', that.onClickSaveLifeformData.bind(that));
      break;

    case 'lfbuilding':
      lvlOfAll.bind('focus', function (e) {
        $(this).val('');
      });
      lvlOfAll.bind('keyup', function (e) {
        let that = this;
        let inputVal = $(that).val();

        if ($.isNumeric(inputVal) === false) {
          $(that).val('level of all');
        } else {
          $("#lfbuilding input.textInput").each(function () {
            $(this).val(inputVal);
          });
        }
      });
      $('.lifeformBuildingSubmit').bind('click', that.onClickSaveLifeformBuildingData.bind(that));
      break;

    case 'lfresearch':
      lvlOfAll.bind('focus', function (e) {
        $(this).val('');
      });
      lvlOfAll.bind('keyup', function (e) {
        let that = this;
        let inputVal = $(that).val();

        if ($.isNumeric(inputVal) === false) {
          $(that).val('level of all');
        } else {
          $("#lfresearch input.textInput").each(function () {
            $(this).val(inputVal);
          });
        }
      });
      $('#lfresearch .radioResearch').bind('focus', that.onClickSelectResearch.bind(that));
      $('#lfresearch .classSelector').bind('click', that.onClickSelectAllResearch.bind(that));
      $('.lifeformResearchSubmit').bind('click', that.onClickSaveLifeformResearchData.bind(that));
      break;

    case 'eventHandler':
      $('#eventHandlerSubmit').bind('click', that.onClickRestartEventHandler.bind(that));
      break;

    case 'buffs':
      $('#buffEditForm button.submit').bind('click', that.onClickSaveBuffs.bind(that));
      $('#buffEditForm input[type="datetime-local"]').bind('change', that.onChangeBuffTime.bind(that));
      break;

    case 'ipi':
      $('#ipiEdit .ajax').bind('click', that.onItemClick.bind(that));
      break;
  }
};

HappyEdit.prototype.onItemClick = function (e) {
  e.preventDefault();
  $.post($(e.currentTarget).data('link'), {}, this.handleSubmitResponse.bind(this));
};

HappyEdit.prototype.onClickResetBashing = function (e) {
  e.preventDefault();
  let galaxy,
      system,
      position = 0;
  galaxy = document.getElementById('bashingGalaxy').value ?? -1;
  system = document.getElementById('bashingSystem').value ?? -1;
  position = document.getElementById('bashingPosition').value ?? -1;
  $.post($(e.currentTarget).data('link'), {
    "galaxy": galaxy,
    "system": system,
    "position": position
  }, this.handleSubmitResponse.bind(this));
};

HappyEdit.prototype.fetchData = function (tab) {
  this.loadingIndicator.show();
  $.getJSON(this.tabs[tab], {}, this.onFetch.bind(this)).done(this.onAjaxDone.bind(this));
};

HappyEdit.prototype.displayErrors = function (errors) {
  // only display the first error
  let error = errors[0] || undefined;

  if (error) {
    fadeBox(error.message, true);
  }
}; //
// Item tabs general
//


HappyEdit.prototype.onClickTab = function (e) {
  e.preventDefault();

  if ($(e.currentTarget).parent().attr('disabled') !== 'disabled') {
    this.loadingIndicator.show();
    this.tab = $(e.currentTarget).data('tab');
    this.fetch(this.tab);
  }
};

HappyEdit.prototype.onFetch = function (data) {
  let htmlItems = data.content[data.target];
  this.refreshItems(htmlItems);
};

HappyEdit.prototype.fetch = function (targetTab) {
  const target = $('#happyeditcomponent .tabs .' + targetTab);

  if (target.attr('rel') !== '') {
    $.getJSON(target.attr('rel'), {}, this.onFetch.bind(this)).done(this.onAjaxDone.bind(this));
    Object.keys(this.tabs).forEach(item => {
      const element = $('#happyeditcomponent .tabs .' + item).parent();
      element.removeClass('active');

      if (item === targetTab) {
        element.addClass('active');
      }
    });
  }
};

HappyEdit.prototype.initItemsCommon = function (cfg) {
  this.itemsWrapper = $('#happyeditcomponent .wrapper');
  this.loadingIndicator = this.itemsWrapper.ogameLoadingIndicator();
  this.happyeditContent = $('#happyeditcomponent .content');
  this.titlebar = $('#happyeditcomponent .tabs');
  Object.keys(this.tabs).forEach(initTab => this.titlebar.on('click', '.' + initTab, this.onClickTab.bind(this)));
};

HappyEdit.prototype.refreshItems = function (htmlItems) {
  this.happyeditContent.html(htmlItems);
};

HappyEdit.prototype.handleSubmitResponse = function (response) {
  let data = JSON.parse(response);
  let status = data.status || 'failure';

  if (status === 'success') {
    this.fetchData(this.tab);
    fadeBox(data.message, false);
    getAjaxEventbox();
    getAjaxResourcebox();
  } else {
    this.displayErrors(data.errors);
  }
}; //
// Tab: player
//


HappyEdit.prototype.onClickSavePlayerData = function (e) {
  e.preventDefault();

  if (!e.currentTarget.hasAttribute("disabled")) {
    this.submitPlayerData($('#playerSettings').serializeArray());
  }
};

HappyEdit.prototype.triggerNews = function (e) {
  e.preventDefault();
  $.post(this.urlTriggerNews, {}, this.handleSubmitResponse.bind(this));
};

HappyEdit.prototype.submitPlayerData = function (formData) {
  this.loadingIndicator.show();
  $.post(this.urlSubmitPlayer, formData, this.handleSubmitResponse.bind(this)).done(this.onAjaxDone.bind(this));
}; //
// Tab: Buildings
//


HappyEdit.prototype.onClickSaveBuildingsData = function (e) {
  e.preventDefault();
  let allBuilding = $('[name="allBuildings"]').val();

  if (allBuilding.length === 0) {
    let formData = $('#buildingsSettings').serializeArray().filter(function (obj) {
      return obj.name !== 'allBuildings';
    });
    this.submitBuildingsData(formData);
  } else {
    this.submitBuildingsData({
      allBuildings: allBuilding
    });
  }
};

HappyEdit.prototype.submitBuildingsData = function (formData) {
  this.loadingIndicator.show();
  $.post(this.urlSubmitBuildings, formData, this.handleSubmitResponse.bind(this)).done(this.onAjaxDone.bind(this));
}; //
// Tab: Research
//


HappyEdit.prototype.onClickSaveResearchData = function (e) {
  e.preventDefault();
  let allResearches = $('[name="allResearches"]').val();

  if (allResearches.length === 0) {
    let formData = $('#researchSettings').serializeArray().filter(function (obj) {
      return obj.name !== 'allResearches';
    });
    this.submitResearchData(formData);
  } else {
    this.submitResearchData({
      allResearches: allResearches
    });
  }
};

HappyEdit.prototype.submitResearchData = function (formData) {
  this.loadingIndicator.show();
  $.post(this.urlSubmitResearch, formData, this.handleSubmitResponse.bind(this)).done(this.onAjaxDone.bind(this));
}; //
// Tab: Ships
//


HappyEdit.prototype.onClickSaveShipsData = function (e) {
  e.preventDefault();
  let allShips = $('[name="allShips"]').val();

  if (allShips.length === 0) {
    let formData = $('#shipsSettings').serializeArray().filter(function (obj) {
      return obj.name !== 'allShips';
    });
    this.submitShipsData(formData);
  } else {
    this.submitShipsData({
      allShips: allShips
    });
  }
};

HappyEdit.prototype.submitShipsData = function (formData) {
  this.loadingIndicator.show();
  $.post(this.urlSubmitShips, formData, this.handleSubmitResponse.bind(this)).done(this.onAjaxDone.bind(this));
}; //
// Tab: Defenses
//


HappyEdit.prototype.onClickSaveDefensesData = function (e) {
  e.preventDefault();
  let allDefense = $('[name="allDefense"]').val();

  if (allDefense.length === 0) {
    let formData = $('#defenseSettings').serializeArray().filter(function (obj) {
      return obj.name !== 'allDefense';
    });
    this.submitDefensesData(formData);
  } else {
    this.submitDefensesData({
      allDefense: allDefense
    });
  }
};

HappyEdit.prototype.submitDefensesData = function (formData) {
  this.loadingIndicator.show();
  $.post(this.urlSubmitDefense, formData, this.handleSubmitResponse.bind(this)).done(this.onAjaxDone.bind(this));
}; //
// Tab: Wreckfield
//


HappyEdit.prototype.onClickSaveWreckfieldData = function (e) {
  e.preventDefault();
  let allShips = $('[name="allShips"]').val();

  if (allShips.length === 0) {
    let formData = $('#wreckfieldSettings').serializeArray().filter(function (obj) {
      return obj.name !== 'allShips';
    });
    this.submitWreckfieldData(formData);
  } else {
    this.submitWreckfieldData({
      allShips: allShips
    });
  }
};

HappyEdit.prototype.submitWreckfieldData = function (formData) {
  this.loadingIndicator.show();
  $.post(this.urlSubmitWreckfield, formData, this.handleSubmitResponse.bind(this)).done(this.onAjaxDone.bind(this));
}; //
// Tab: Rewards
//


HappyEdit.prototype.onClickSaveRewardsData = function (e) {
  e.preventDefault();

  if (!e.currentTarget.hasAttribute("disabled")) {
    this.submitRewardsData($('#rewardsSettings').serializeArray());
  }
};

HappyEdit.prototype.submitRewardsData = function (formData) {
  this.loadingIndicator.show();
  $.post(this.urlSubmitRewards, formData, this.handleSubmitResponse.bind(this)).done(this.onAjaxDone.bind(this));
}; //
// Tab: Planet
//


HappyEdit.prototype.onClickSavePlanetData = function (e) {
  e.preventDefault();

  if (!e.currentTarget.hasAttribute("disabled")) {
    this.submitPlanetData($('#planetSettings').serializeArray());
  }
};

HappyEdit.prototype.submitPlanetData = function (formData) {
  this.loadingIndicator.show();
  $.post(this.urlSubmitPlanet, formData, this.handleSubmitResponse.bind(this)).done(this.onAjaxDone.bind(this));
}; //
// Tab: Fleet
//


HappyEdit.prototype.onClickFinishFleet = function (e) {
  e.preventDefault();
  this.submitFinishFleet($(e.target).attr('data-fleet-id'));
};

HappyEdit.prototype.submitFinishFleet = function (id) {
  this.loadingIndicator.show();
  $.post(this.urlSubmitFleet, {
    fleetId: id
  }, this.handleSubmitResponse.bind(this)).done(this.onAjaxDone.bind(this));
}; //
// Tab: Event handler
//


HappyEdit.prototype.onClickRestartEventHandler = function (e) {
  e.preventDefault();
  $.post(this.urlRestartEventHandler, {}, this.handleSubmitResponse.bind(this)).done(this.onAjaxDone.bind(this));
}; // Lifeform


HappyEdit.prototype.submitDiscoverData = function (e) {
  //this.loadingIndicator.show()
  let targetUrl = $(e.currentTarget).data('link');
  let lfId = $(e.currentTarget).data('id');
  let data = {
    lifeformId: lfId
  };
  $.post(targetUrl, data, this.handleSubmitResponse.bind(this)).done(this.onAjaxDone.bind(this));
};

HappyEdit.prototype.onClickSaveLifeformData = function (e) {
  e.preventDefault();

  if (!e.currentTarget.hasAttribute("disabled")) {
    let formData = $('#lifeformSettings').serializeArray();
    this.loadingIndicator.show();
    let targetUrl = $(e.currentTarget).data('link');
    $.post(targetUrl, formData, this.handleSubmitResponse.bind(this)).done(this.onAjaxDone.bind(this));
  }
};

HappyEdit.prototype.onClickSaveLifeformBuildingData = function (e) {
  e.preventDefault();

  if (!e.currentTarget.hasAttribute("disabled")) {
    let formData = $('#lifeformBuilding').serializeArray();
    this.loadingIndicator.show();
    let targetUrl = $(e.currentTarget).data('link');
    $.post(targetUrl, formData, this.handleSubmitResponse.bind(this)).done(this.onAjaxDone.bind(this));
  }
};

HappyEdit.prototype.onClickSelectResearch = function (e) {
  e.preventDefault();
  let elemName = $(e.currentTarget).attr('name');
  let selectedElem = $("#lfresearch input[name='" + elemName + "']:checked");
  let previousTechId = selectedElem.data('techid');
  let currentTechId = $(e.currentTarget).data('techid');
  let previousLifeformId = selectedElem.data('lifeformid');
  let currentLifeformId = $(e.currentTarget).data('lifeformid');
  let slot = $(e.currentTarget).data('slot');
  let pic = $("#slotPic" + slot);

  if (currentLifeformId === 0) {
    $(".slotName" + slot).text('None');
    pic.removeClass("lifeformsprite").removeClass('queuePic').removeClass('lifeformTech' + previousTechId).addClass('lifeformTech0');
  } else if (previousLifeformId === 0 && currentLifeformId !== 0) {
    $(".slotName" + slot).text(lfResearch[slot][currentLifeformId].name);
    pic.removeClass("lifeformTech0").addClass('lifeformsprite').addClass('queuePic').addClass('lifeformTech' + currentTechId);
  } else {
    $(".slotName" + slot).text(lfResearch[slot][currentLifeformId].name);
    pic.removeClass("lifeformTech" + previousTechId).addClass('lifeformTech' + currentTechId);
  }
};

HappyEdit.prototype.onClickSelectAllResearch = function (e) {
  e.preventDefault();
  let lifeformId = $(e.currentTarget).data('lifeformid');
  let selectedElements = $("#lfresearch input[data-lifeformid='" + lifeformId + "']");
  selectedElements.each(function () {
    let elemName = $(this).attr('name');
    let selectedElem = $("#lfresearch input[name='" + elemName + "']:checked");
    let previousTechId = selectedElem.data('techid');
    let currentTechId = $(this).data('techid');
    let previousLifeformId = selectedElem.data('lifeformid');
    let currentLifeformId = $(this).data('lifeformid');
    let slot = $(this).data('slot');
    let pic = $("#slotPic" + slot);

    if (currentLifeformId === 0) {
      $(".slotName" + slot).text('None');
      pic.removeClass("lifeformsprite").removeClass('queuePic').removeClass('lifeformTech' + previousTechId).addClass('lifeformTech0');
    } else if (previousLifeformId === 0 && currentLifeformId !== 0) {
      $(".slotName" + slot).text(lfResearch[slot][currentLifeformId].name);
      pic.removeClass("lifeformTech0").addClass('lifeformsprite').addClass('queuePic').addClass('lifeformTech' + currentTechId);
    } else {
      $(".slotName" + slot).text(lfResearch[slot][currentLifeformId].name);
      pic.removeClass("lifeformTech" + previousTechId).addClass('lifeformTech' + currentTechId);
    }

    $(this).prop('checked', true);
  });
};

HappyEdit.prototype.onClickSaveLifeformResearchData = function (e) {
  e.preventDefault();

  if (!e.currentTarget.hasAttribute("disabled")) {
    let formData = $('#lifeformResearch').serializeArray();
    this.loadingIndicator.show();
    let targetUrl = $(e.currentTarget).data('link');
    $.post(targetUrl, formData, this.handleSubmitResponse.bind(this)).done(this.onAjaxDone.bind(this));
  }
};

HappyEdit.prototype.onClickSaveBuffs = function (e) {
  e.preventDefault();
  this.loadingIndicator.show();

  if (e.target.value === 'all') {
    const updateData = {
      targets: [],
      buffAction: e.target.name === 'buffDeleteAll' ? 'delete' : 'update'
    };
    document.querySelectorAll('#buffEditForm .happyedit-buffs-buff').forEach(buff => {
      updateData.targets.push({
        id: buff.dataset.target,
        effectTime: buff.querySelector('input[data-type="buffEffectTime"]').value,
        cooldownTime: buff.querySelector('input[data-type="buffCooldownTime"]').value
      });
    });
    $.post(this.urlSubmitBuffs, updateData, this.handleSubmitResponse.bind(this)).done(this.onAjaxDone.bind(this));
    return;
  }

  const updateData = {
    targets: [{
      id: e.target.value,
      effectTime: document.querySelector('#buffEditForm input[data-type="buffEffectTime"][data-target="' + e.target.value + '"]').value,
      cooldownTime: document.querySelector('#buffEditForm input[data-type="buffCooldownTime"][data-target="' + e.target.value + '"]').value
    }],
    buffAction: e.target.name === 'buffDelete' ? 'delete' : 'update'
  };
  $.post(this.urlSubmitBuffs, updateData, this.handleSubmitResponse.bind(this)).done(this.onAjaxDone.bind(this));
};

HappyEdit.prototype.onChangeBuffTime = function (e) {
  if (e.target.dataset.type === 'buffEffectTime') {
    const cooldownTarget = document.querySelector('#buffEditForm input[data-type="buffCooldownTime"][data-target="' + e.target.dataset.target + '"]');

    if (cooldownTarget.value < e.target.value) {
      cooldownTarget.value = e.target.value;
    }
  }
};
function LifeformResearch(cfg) {
  this.token = cfg.token || null;
  this.loca = cfg.loca;
}

LifeformResearch.prototype.init = function () {
  if ($('.lfresearchlayer').length > 1) {
    for (let i = 0; i < $('.lfresearchlayer').length - 1; i++) {
      $($('.lfresearchlayer')[i]).remove();
    }
  }

  let that = this;
  this.lifeformWrapper = $('#technologies');
  this.loadingIndicator = this.lifeformWrapper.ogameLoadingIndicator();
  $('#selectTechnology').bind('click', that.onClickSelect100.bind(that));
  $('#selectChance').bind('click', that.onClickSelectRandom.bind(that));

  if ($('.selectArtifacts').data('enabled') === true) {
    $('.selectArtifacts').bind('click', that.onClickSelectArtifacts.bind(that));
  }

  if ($('#resetTechTree').data('enabled') === true) {
    $('#resetTechTree').bind('click', that.onClickResetTree.bind(that));
  }

  if ($('#buyResetTechTree').data('enabled') === true) {
    $('#buyResetTechTree').bind('click', that.onClickResetTree.bind(that));
  }

  if ($('#restoreTechTree').data('enabled') === true) {
    $('#restoreTechTree').bind('click', that.onClickRestoreTree.bind(that));
  }
};

LifeformResearch.prototype.handleResponse = function (response) {
  let data = JSON.parse(response);
  let status = data.status || 'failure';
  this.updateToken(data.newAjaxToken);

  if (status === 'success') {
    fadeBox(data.message, false);

    if (data.redirectUrl !== undefined) {
      window.location = data.redirectUrl;
    }
  } else {
    if (data.redirectUrl !== undefined) {
      window.location = data.redirectUrl;
    }

    this.displayErrors(data.errors);
  }
};

LifeformResearch.prototype.updateToken = function (newtoken) {
  this.token = newtoken;
  token = newtoken;
};

LifeformResearch.prototype.displayErrors = function (errors) {
  // only display the first error
  let error = errors[0] || undefined;

  if (error) {
    fadeBox(error.message, true);
  }
};

LifeformResearch.prototype.onAjaxDone = function () {
  this.loadingIndicator.hide();
  $("#lfresearchlayer").parents('.overlayDiv').dialog('close');
  $('.lfresearchlayer').remove();
};

LifeformResearch.prototype.onClickSelect100 = function (e) {
  e.preventDefault();
  let params = {
    _token: this.token,
    slotNumber: $(e.currentTarget).data('slotNumber'),
    planetId: $(e.currentTarget).data('planetId')
  };
  let that = this;
  this.loadingIndicator.show();
  let question = this.loca.LOCA_LIFEFORM_RESEARCH_SELECT_TECHNOLOGY + $(e.currentTarget).data('name');
  errorBoxDecision(this.loca.LOCA_ALL_NETWORK_ATTENTION, question, this.loca.LOCA_ALL_YES, this.loca.LOCA_ALL_NO, function () {
    $.post(this.urlSelect100, params, that.handleResponse.bind(that)).done(that.onAjaxDone.bind(that));
  }, function () {
    that.loadingIndicator.hide();
  });
};

LifeformResearch.prototype.onClickSelectRandom = function (e) {
  e.preventDefault();
  let params = {
    _token: this.token,
    slotNumber: $(e.currentTarget).data('slotNumber'),
    planetId: $(e.currentTarget).data('planetId')
  };
  let that = this;
  this.loadingIndicator.show();
  errorBoxDecision(this.loca.LOCA_ALL_NETWORK_ATTENTION, this.loca.LOCA_LIFEFORM_RESEARCH_SELECT_TECHNOLOGY_RANDOM, this.loca.LOCA_ALL_YES, this.loca.LOCA_ALL_NO, function () {
    $.post(this.urlSelectRandom, params, that.handleResponse.bind(that)).done(that.onAjaxDone.bind(that));
  }, function () {
    that.loadingIndicator.hide();
  });
};

LifeformResearch.prototype.onClickSelectArtifacts = function (e) {
  e.preventDefault();
  let params = {
    _token: this.token,
    slotNumber: $(e.currentTarget).data('slotNumber'),
    planetId: $(e.currentTarget).data('planetId'),
    technologyId: $(e.currentTarget).data('technology-id')
  };
  let that = this;
  this.loadingIndicator.show();
  let question = this.loca.LOCA_LIFEFORM_RESEARCH_SELECT_TECHNOLOGY + $(e.currentTarget).data('name') + '<br/>' + this.loca.LOCA_LIFEFORM_ARTIFACTS_SELECT_RESEARCH.replace('#artifactcost#', $(e.currentTarget).data('artifacts-cost'));
  errorBoxDecision(this.loca.LOCA_ALL_NETWORK_ATTENTION, question, this.loca.LOCA_ALL_YES, this.loca.LOCA_ALL_NO, function () {
    $.post(this.urlSelectArtifacts, params, that.handleResponse.bind(that)).done(that.onAjaxDone.bind(that));
  }, function () {
    that.loadingIndicator.hide();
  });
};

LifeformResearch.prototype.onClickResetTree = function (e) {
  e.preventDefault();
  let params = {
    _token: this.token,
    tier: $(e.currentTarget).data('tier'),
    planetId: $(e.currentTarget).data('planetId')
  };
  let that = this;
  this.loadingIndicator.show();
  errorBoxDecision(this.loca.LOCA_ALL_NETWORK_ATTENTION, this.loca.LOCA_LIFEFORM_RESET_TECHNOLOGY_RESEARCH_TREE + " " + $(e.currentTarget).data('tier'), this.loca.LOCA_ALL_YES, this.loca.LOCA_ALL_NO, function () {
    $.post($(e.currentTarget).attr('href'), params, that.handleResponse.bind(that)).done(that.onAjaxDone.bind(that));
  }, function () {
    that.loadingIndicator.hide();
  });
};

LifeformResearch.prototype.onClickRestoreTree = function (e) {
  e.preventDefault();
  let params = {
    _token: this.token,
    tier: $(e.currentTarget).data('tier'),
    planetId: $(e.currentTarget).data('planetId')
  };
  let that = this;
  this.loadingIndicator.show();
  errorBoxDecision(this.loca.LOCA_ALL_NETWORK_ATTENTION, this.loca.LOCA_LIFEFORM_RESTORE_TECHNOLOGY_RESEARCH_TREE + " " + $(e.currentTarget).data('tier'), this.loca.LOCA_ALL_YES, this.loca.LOCA_ALL_NO, function () {
    $.post($(e.currentTarget).attr('href'), params, that.handleResponse.bind(that)).done(that.onAjaxDone.bind(that));
  }, function () {
    that.loadingIndicator.hide();
  });
};
function LifeformSettings(cfg) {
  this.token = cfg.token || null;
  this.loca = cfg.loca;
  this.lifeformIds = cfg.lifeformIds;
}

LifeformSettings.prototype.init = function () {
  let that = this;
  this.lifeformWrapper = $('#lfsettings .lfsettingsContent');
  this.loadingIndicator = this.lifeformWrapper.ogameLoadingIndicator();
  initToggleHeader('lfsettings');

  if ($('#removeLifeform').hasClass('disabled') === false) {
    $('#removeLifeform').bind('click', that.onClickSubmitRemove.bind(that));
  }

  $('.selectLifeform').each(function () {
    if ($(this).hasClass('disabled') === false) {
      $(this).bind('click', that.onClickSubmitSelect.bind(that));
    }
  });
};

LifeformSettings.prototype.handleResponse = function (response) {
  let data = JSON.parse(response);
  let status = data.status || 'failure';
  this.updateToken(data.newAjaxToken);

  if (status === 'success') {
    fadeBox(data.message, false);

    if (data.redirectUrl !== undefined) {
      window.location = data.redirectUrl;
    }
  } else {
    if (data.tabs !== undefined) {
      this.refreshTabs(data.tabs);
    }

    if (data.redirectUrl !== undefined) {
      window.location = data.redirectUrl;
    }

    this.displayErrors(data.errors);
  }
};

LifeformSettings.prototype.updateToken = function (newtoken) {
  this.token = newtoken;
  token = newtoken;
};

LifeformSettings.prototype.displayErrors = function (errors) {
  // only display the first error
  let error = errors[0] || undefined;

  if (error) {
    fadeBox(error.message, true);
  }
};

LifeformSettings.prototype.onAjaxDone = function () {
  this.loadingIndicator.hide();
  let that = this;
  $('#removeLifeform').bind('click', that.onClickSubmitRemove.bind(that));
  $('.selectLifeform').each(function () {
    $(this).bind('click', that.onClickSubmitSelect.bind(that));
  });
};

LifeformSettings.prototype.onClickSubmitRemove = function (e) {
  e.preventDefault();
  let params = {
    _token: this.token,
    planetId: $(e.currentTarget).data('planetid')
  };
  let that = this;
  this.loadingIndicator.show();
  errorBoxDecision(this.loca.LOCA_ALL_NETWORK_ATTENTION, this.loca.LOCA_LIFEFORM_REMOVE_FROM_PLANET + '<br/><br/>' + this.loca.LOCA_DEBUFF_ACTIVATION + '<br/>' + this.loca.LOCA_DEBUFF_REMOVED_LIFEFORM_DESCRIPTION, this.loca.LOCA_ALL_YES, this.loca.LOCA_ALL_NO, function () {
    $.post(this.urlRemoveLifeform, params, that.handleResponse.bind(that)).done(that.onAjaxDone.bind(that));
  }, function () {
    that.loadingIndicator.hide();
  });
};

LifeformSettings.prototype.onClickSubmitSelect = function (e) {
  e.preventDefault();

  if (!$(e.currentTarget).hasClass('disabled') && !e.currentTarget.hasAttribute("lifeformid")) {
    this.submitLifeform($(e.currentTarget).data('lifeformid'), $(e.currentTarget).data('planetid'), $(e.currentTarget).data('name'));
  }
};

LifeformSettings.prototype.submitLifeform = function (lifeformid, planetid, name) {
  this.loadingIndicator.show();
  let params = {
    lifeformId: lifeformid,
    planetId: planetid,
    _token: this.token
  };
  let question = this.loca.LOCA_LIFEFORM_SELECT_QUESTION.replace('#lifeformname#', name);
  let that = this;
  this.loadingIndicator.show();
  errorBoxDecision(this.loca.LOCA_ALL_NETWORK_ATTENTION, question, this.loca.LOCA_ALL_YES, this.loca.LOCA_ALL_NO, function () {
    $.post(this.urlSelectLifeform, params, that.handleResponse.bind(that)).done(that.onAjaxDone.bind(that));
  }, function () {
    that.loadingIndicator.hide();
  });
};
function OGameLineChart(container, data) {
  this.container = container;
  this.dataPoints = data.dataPoints || [];
  this.deltaY = data.deltaY || 1;
  this.digitsY = data.digitsY || 0;
  this.title = data.title || '';
  this.titleFont = data.titleFont || 'Bold 13px Verdana, Arial, SunSans-Regular, Sans-Serif';
  this.titleColor = data.titleColor || '#6f9fc8';
  this.titleBaseline = data.titleBaseline || 'middle';
  this.labelFontY = data.labelFont || '11px Verdana, Arial, SunSans-Regular, Sans-Serif';
  this.labelColorY = data.labelColor || '#6f9fc8';
  this.labelBaselineY = data.labelBaseline || 'middle';
  this.labelLineHeightY = data.labelLineHeightY || 11;
  this.labelSpacingY = data.labelSpacingY || 20;
  this.labelHeightY = data.labelHeightY || 20;
  this.labelFontX = data.labelFont || '11px Verdana, Arial, SunSans-Regular, Sans-Serif';
  this.labelColorX = data.labelColor || '#6f9fc8';
  this.labelBaselineX = data.labelBaseline || 'middle';
  this.labelLineHeightX = data.labelLineHeightX || 11;
  this.guidesStyle = data.guidesStyle || '#6f9fc8';
  this.lineStyles = data.lineStyles || {};
  this.lineWidths = data.lineWidths || {};
  this.lineStyleHighlight = data.lineStyleHighlight || '#aaffaa';
  this.lineWidthHighlight = data.lineWidthHighlight || 5;
  this.lineThresholdHighlight = data.lineThresholdHighlight || 10;
  this.tooltips = data.tooltips || {};
  this.dataKeyHighlight = null;
  this.marginLeft = data.marginLeft || 60;
  this.marginRight = data.marginRight || 30;
  this.marginTop = data.marginTop || 20;
  this.marginBottom = data.marginBottom || 110;
  this.visibility = data.visibility || {};
}

OGameLineChart.epsilon = 0.0001;

OGameLineChart.prototype.init = function () {
  let html = '<div class="og-linechart"><canvas></canvas><div class="tooltip"></div></div>';
  this.container.html(html);
  this.canvas = this.container.find('canvas')[0];
  this.tooltip = this.container.find('.tooltip');
  this.fixDPI();
  this.context = this.canvas.getContext('2d');
  this.context.imageSmoothingEnabled = true;
  this.container.on('mousemove', this.handleMouseMove.bind(this));
  this.container.on('mouseleave', this.handleMouseLeave.bind(this));
};

OGameLineChart.prototype.handleMouseMove = function (e) {
  let mousePosition = this.transformEventToCanvas(e);
  this.updateHighlight(mousePosition);
  this.updateTooltip(mousePosition);

  if (this.onMouseMove) {
    this.onMouseMove(e, this);
  }

  this.render();
};

OGameLineChart.prototype.handleMouseLeave = function (e) {
  this.setHighlight(null);
  this.render();
};

OGameLineChart.prototype.updateHighlight = function (p) {
  let line = this.getClosestLine(p, this.lineThresholdHighlight);
  let key = line ? line.key : null;
  this.setHighlight(key);
};

OGameLineChart.prototype.updateTooltip = function (p) {
  let pnt = this.getClosestDataPoint(p, this.lineThresholdHighlight);

  if (pnt === null) {
    this.hideTooltip();
  } else {
    let a = this.transformDataPointToCanvas(pnt.index, pnt.dataPoint.y);
    let tooltipText = (this.tooltips[pnt.key] || '') + ':' + pnt.dataPoint.y.toFixed(2);
    this.tooltip.html(tooltipText);
    this.tooltip.css({
      left: a.x - 20,
      top: a.y
    });
    this.showTooltip();
  } //let dataPoints = this.getClosestDataPoint(p,key)

};

OGameLineChart.prototype.showTooltip = function () {
  this.tooltip.show();
};

OGameLineChart.prototype.hideTooltip = function () {
  this.tooltip.hide();
};

OGameLineChart.prototype.getClosestLine = function (p, threshold) {
  let currentKey = null;
  let currentDistance = null;
  let currentIndex = null;

  for (let key in this.dataPoints) {
    let dataPoints = this.dataPoints[key];

    for (let i = 0; i < dataPoints.length - 1; ++i) {
      let a = this.transformDataPointToCanvas(i, dataPoints[i].y);
      let b = this.transformDataPointToCanvas(i + 1, dataPoints[i + 1].y);
      let d = this.orthogonalDistanceFromLineSegment(p, a, b);

      if (d === null || d > threshold) {
        continue;
      }

      if (currentDistance === null || currentDistance > d) {
        currentKey = key;
        currentDistance = d;
        currentIndex = i;
      }
    }
  }

  if (currentKey !== null) {
    return {
      key: currentKey,
      distance: currentDistance,
      index: currentIndex
    };
  }

  return null;
};

OGameLineChart.prototype.getClosestDataPoint = function (p, threshold) {
  let line = this.getClosestLine(p, threshold);

  if (line === null) {
    return null;
  }

  let currentDistance = null;
  let currentDataPoint = null;
  let currentIndex = null;
  let dataPoints = this.getDataPoints(line.key);

  if (dataPoints) {
    for (let i = 0; i < dataPoints.length; ++i) {
      let a = this.transformDataPointToCanvas(i, dataPoints[i].y);
      let d = this.distance(a, p);

      if (d > threshold) {
        continue;
      }

      if (currentDistance === null || currentDistance > d) {
        currentDataPoint = dataPoints[i];
        currentDistance = d;
        currentIndex = i;
      }
    }
  }

  if (currentDataPoint !== null) {
    return {
      key: line.key,
      index: currentIndex,
      dataPoint: currentDataPoint
    };
  }

  return null;
};

OGameLineChart.prototype.render = function () {
  this.height = $(this.canvas).outerHeight();
  this.width = $(this.canvas).outerWidth();
  this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);
  this.renderTitle();
  this.renderLabels();
  this.renderData();
};

OGameLineChart.prototype.renderTitle = function () {
  this.context.save();
  this.context.font = this.titleFont;
  this.context.fillStyle = this.titleColor;
  this.context.textBaseline = this.titleBaseline;
  let px = this.marginLeft;
  let py = Math.floor(this.marginTop / 2);
  this.context.fillText(this.title, px, py);
  this.context.restore();
};

OGameLineChart.prototype.renderLabels = function () {
  this.renderAxis();
  this.renderVerticalLabels();
  this.renderHorizontalLabels();
};

OGameLineChart.prototype.renderAxis = function () {
  let sx = this.marginLeft;
  let sy = this.marginTop;
  let ex = this.marginLeft;
  let ey = this.height - this.marginBottom;
  this.context.save();
  this.context.strokeStyle = this.guidesStyle;
  this.context.beginPath();
  this.context.moveTo(sx, sy);
  this.context.lineTo(ex, ey);
  this.context.stroke();
  this.context.closePath();
  sx = ex;
  sy = ey;
  ex = this.width - this.marginRight;
  ey = this.height - this.marginBottom;
  this.context.beginPath();
  this.context.moveTo(sx, sy);
  this.context.lineTo(ex, ey);
  this.context.stroke();
  this.context.closePath();
  this.context.restore();
};

OGameLineChart.prototype.renderVerticalLabels = function () {
  let drawMinY = this.marginTop;
  let drawMaxY = this.height - this.marginBottom;
  let numLabels = Math.floor((drawMaxY - drawMinY) / (this.labelLineHeightY + this.labelSpacingY)) + 1;
  let drawDeltaY = Math.floor((drawMaxY - drawMinY) / (numLabels - 1));
  let minY = Math.floor(this.getMinY() / this.deltaY);
  let maxY = Math.ceil(this.getMaxY() / this.deltaY);
  let deltaY = Math.floor((maxY - minY) / (numLabels - 1));
  let px = 0;
  let py = drawMaxY;
  this.context.save();
  this.context.font = this.labelFontY;
  this.context.fillStyle = this.labelColorY;
  this.context.textBaseline = this.labelBaselineY;

  for (let i = 0; i < numLabels; ++i) {
    let y = minY + deltaY * i;
    let label = tsdpkt(y.toFixed(this.digitsY));
    let labelWidth = this.context.measureText(label).width;
    let dx = Math.floor(this.marginLeft / 2 - labelWidth / 2);
    let py = drawMaxY - drawDeltaY * i;
    this.context.fillText(label, px + dx, py);
  }

  this.context.restore();
};

OGameLineChart.prototype.renderHorizontalLabels = function () {
  let keys = this.getDataKeys();

  if (keys.length === 0) {
    return;
  }

  let key = keys[0];
  let dataPoints = this.getDataPoints(key);

  if (dataPoints.length < 2) {
    return;
  }

  let drawMinX = this.marginLeft;
  let drawMaxX = this.width - this.marginRight;
  let drawDeltaX = Math.floor((drawMaxX - drawMinX) / (dataPoints.length - 1));
  let px = this.marginLeft;
  let py = this.height - this.marginBottom + this.labelHeightY;
  this.context.save();
  this.context.font = this.labelFontX;
  this.context.fillStyle = this.labelColorX;
  this.context.textBaseline = this.labelBaselineX;

  for (let i = 0; i < dataPoints.length; ++i) {
    let label = dataPoints[i].x.toString();
    let labelWidth = this.context.measureText(label).width;
    let dx = Math.floor(labelWidth / 2); // draw rotated text

    this.context.save();
    this.context.translate(px, py);
    this.context.rotate(Math.PI * 0.375);
    this.context.fillText(label, 0, 0);
    this.context.restore();
    px += drawDeltaX;
  }

  this.context.restore();
};

OGameLineChart.prototype.renderData = function () {
  for (let key in this.dataPoints) {
    if (this.dataKeyHighlight === key) {
      continue;
    }

    this.renderDataPoints(key, this.dataPoints[key]);
  } // render highlighted data set on top


  if (this.dataKeyHighlight !== null) {
    this.renderDataPoints(this.dataKeyHighlight, this.dataPoints[this.dataKeyHighlight]);
  }
};

OGameLineChart.prototype.renderDataPoints = function (key, dataPoints) {
  if (!this.isDataSetVisible(key)) {
    return;
  }

  this.context.save();
  this.context.strokeStyle = this.getLineStyle(key);
  this.context.lineWidth = this.getLineWidth(key);
  this.context.beginPath();

  for (let i = 0; i < dataPoints.length - 1; ++i) {
    let s = this.transformDataPointToCanvas(i, dataPoints[i].y);
    let e = this.transformDataPointToCanvas(i + 1, dataPoints[i + 1].y);
    this.context.moveTo(s.x, s.y);
    this.context.lineTo(e.x, e.y);
  }

  this.context.stroke();
  this.context.closePath();
  this.context.restore();
};

OGameLineChart.prototype.transformDataPointToCanvas = function (x, y) {
  let minY = Math.ceil(this.getMinY() / this.deltaY);
  let maxY = Math.floor(this.getMaxY() / this.deltaY);
  let numDataPoints = this.getNumDataPoints();
  if (y === undefined) throw 'Y is undefined';
  let drawMinY = this.marginTop;
  let drawMaxY = this.height - this.marginBottom;
  let drawMinX = this.marginLeft;
  let drawMaxX = this.width - this.marginRight;
  let drawDeltaX = Math.floor((drawMaxX - drawMinX) / (numDataPoints - 1));
  let scaleY = (drawMaxY - drawMinY) / (maxY - minY);
  let cx = Math.floor(drawDeltaX * x + drawMinX);
  let cy = Math.floor(-(y - minY) * scaleY + drawMaxY);
  return {
    x: cx,
    y: cy
  };
};

OGameLineChart.prototype.transformEventToCanvas = function (e) {
  let canvasOffset = $(this.canvas).offset();
  let x = e.pageX - canvasOffset.left;
  let y = e.pageY - canvasOffset.top;
  return {
    x: x,
    y: y
  };
};

OGameLineChart.prototype.getMinY = function () {
  let value = null;

  for (let k in this.dataPoints) {
    let points = this.dataPoints[k];

    for (let i = 0; i < points.length; ++i) {
      if (value === null || value > points[i].y) {
        value = points[i].y;
      }
    }
  }

  if (value === null) {
    return 0;
  }

  return value - 1;
};

OGameLineChart.prototype.getMaxY = function () {
  let value = null;

  for (let k in this.dataPoints) {
    let points = this.dataPoints[k];

    for (let i = 0; i < points.length; ++i) {
      if (value === null || value < points[i].y) {
        value = points[i].y;
      }
    }
  }

  if (value === null) {
    return 4;
  }

  return value + 1;
};

OGameLineChart.prototype.getDataKeys = function () {
  let keys = [];

  for (let k in this.dataPoints) {
    keys.push(k);
  }

  return keys;
};

OGameLineChart.prototype.getDataPoints = function (key) {
  if (this.dataPoints[key] !== undefined) {
    return this.dataPoints[key];
  }

  return [];
};

OGameLineChart.prototype.getNumDataPoints = function () {
  let numDataPoints = 0;

  for (let k in this.dataPoints) {
    if (numDataPoints < this.dataPoints[k].length) {
      numDataPoints = this.dataPoints[k].length;
    }
  }

  return numDataPoints;
};

OGameLineChart.prototype.setHighlight = function (key) {
  this.dataKeyHighlight = key;
};

OGameLineChart.prototype.setDataSetVisible = function (key, visible) {
  this.visibility[key] = visible === true;
};

OGameLineChart.prototype.isDataSetVisible = function (key) {
  if (this.visibility[key] !== undefined) {
    return this.visibility[key];
  }

  return true;
};

OGameLineChart.prototype.getLineStyle = function (key) {
  if (key === this.dataKeyHighlight) {
    return this.lineStyleHighlight;
  }

  return this.lineStyles[key] || '#ffffff';
};

OGameLineChart.prototype.getLineWidth = function (key) {
  if (key === this.dataKeyHighlight) {
    return this.lineWidthHighlight;
  }

  return this.lineWidths[key] || 1;
};

OGameLineChart.prototype.fixDPI = function () {
  let dpi = window.devicePixelRatio;
  let that = this; //create a style object that returns width and height

  let style = {
    height: function () {
      return +getComputedStyle(that.canvas).getPropertyValue('height').slice(0, -2);
    },
    width: function () {
      return +getComputedStyle(that.canvas).getPropertyValue('width').slice(0, -2);
    }
  }; //set the correct attributes for a crystal clear image!

  this.canvas.setAttribute('width', style.width() * dpi);
  this.canvas.setAttribute('height', style.height() * dpi);
};

OGameLineChart.prototype.crossProduct = function (a, b, c) {
  return (c.y - a.y) * (b.x - a.x) - (c.x - a.x) * (b.y - a.y);
};

OGameLineChart.prototype.dotProduct = function (a, b) {
  return a.x * b.x + a.y * b.y;
};

OGameLineChart.prototype.addVector2 = function (a, b) {
  return {
    x: a.x + b.x,
    y: a.y + b.y
  };
};

OGameLineChart.prototype.subVector2 = function (a, b) {
  return {
    x: a.x - b.x,
    y: a.y - b.y
  };
};

OGameLineChart.prototype.scaleVector2 = function (v, s) {
  return {
    x: v.x * s,
    y: v.y * s
  };
};

OGameLineChart.prototype.distance = function (a, b) {
  let delta = this.subVector2(a, b);
  return Math.sqrt(this.dotProduct(delta, delta));
};

OGameLineChart.prototype.projectOntoLineSegment = function (p, a, b) {
  let ap = this.subVector2(p, a);
  let ab = this.subVector2(b, a);
  let c = this.dotProduct(ap, ab) / this.dotProduct(ab, ab);

  if (c < 0 || c > 1) {
    return null;
  }

  return this.addVector2(a, this.scaleVector2(ab, c));
};

OGameLineChart.prototype.orthogonalDistanceFromLineSegment = function (p, a, b) {
  let c = this.projectOntoLineSegment(p, a, b);

  if (c === null) {
    return null;
  }

  let cp = this.subVector2(p, c);
  let sq = this.dotProduct(cp, cp);
  return Math.sqrt(sq);
};

(function ($) {
  $.fn.ogameLineChart = function (data) {
    if (this.length > 0) {
      let that = $(this[0]);
      let lineChart = that.data('ogameLineChart');

      if (lineChart == null) {
        lineChart = new OGameLineChart(that, data);
        $(this).data('ogameLineChart', lineChart);
        lineChart.init();
        lineChart.render();
      }

      return lineChart;
    }

    return null;
  };
})(jQuery);
var LazyLoader;

(function ($) {
  LazyLoader = {
    "pendingCssFiles": [],
    "loadedCssFiles": [],
    "pendingJsFiles": [],
    "loadedJsFiles": [],
    "_downloadCompleteHandler": function (type, path) {
      switch (type) {
        case "css":
          LazyLoader.pendingCssFiles = $.grep(LazyLoader.pendingCssFiles, function (value) {
            return value != path;
          });
          LazyLoader.loadedCssFiles.push(path);

          if (LazyLoader.pendingCssFiles.length === 0) {
            $(document).trigger("cssComplete");
          }

          break;

        case "js":
          LazyLoader.pendingJsFiles = $.grep(LazyLoader.pendingJsFiles, function (value) {
            return value != path;
          });
          LazyLoader.loadedJsFiles.push(path);

          if (LazyLoader.pendingJsFiles.length === 0) {
            $(document).trigger("jsComplete");
          }

          break;
      }

      if (LazyLoader.pendingCssFiles.length === 0 && LazyLoader.pendingJsFiles.length === 0) {
        $(document).trigger("allComplete");
      }
    },
    "_loadCssFiles": function (cssFiles) {
      var linkTags = [];
      $.each(cssFiles, function (key, value) {
        if ($.inArray(value, LazyLoader.pendingCssFiles) > -1 || $.inArray(value, LazyLoader.loadedCssFiles) > -1) {
          return true;
        }

        LazyLoader.pendingCssFiles.push(value);
        linkTags.push($("<link />").attr("href", value).attr("rel", "stylesheet").on("load", {
          "path": value
        }, function (event) {
          LazyLoader._downloadCompleteHandler("css", event.data.path);
        }));
      });

      if (linkTags.length === 0) {
        return {
          "status": "done"
        };
      }

      $(linkTags).map($.fn.toArray).appendTo("head");
      return {
        "status": "queued"
      };
    },
    "_loadJsFiles": function (jsFiles) {
      var newScripts = false;
      $.each(jsFiles, function (key, value) {
        if ($.inArray(value, LazyLoader.pendingJsFiles) > -1 || $.inArray(value, LazyLoader.loadedJsFiles) > -1) {
          return true;
        }

        newScripts = true;
        LazyLoader.pendingJsFiles.push(value);
        $.ajax({
          "cache": true,
          "url": value,
          "dataType": "script"
        }).success(function () {
          LazyLoader._downloadCompleteHandler("js", value);
        });
      });

      if (!newScripts) {
        return {
          "status": "done"
        };
      }

      return {
        "status": "queued"
      };
    },
    "loadFiles": function (cssFiles, jsFiles) {
      var loadCssFiles = LazyLoader._loadCssFiles(cssFiles);

      var loadJsFiles = LazyLoader._loadJsFiles(jsFiles);

      if (loadCssFiles.status === "done" && loadJsFiles.status === "done") {
        $(document).trigger("allComplete");
      }
    }
  };
  $(document).ready(function () {
    $('#mainmenucomponent li.has-sub > a').on('click', function () {
      $(this).removeAttr('href');
      var element = $(this).parent('li');

      if (element.hasClass('open')) {
        element.removeClass('open');
        element.find('li').removeClass('open');
        element.find('ul').slideUp(50);
      } else {
        element.addClass('open');
        element.children('ul').slideDown(50);
        element.siblings('li').children('ul').slideUp(50);
        element.siblings('li').removeClass('open');
        element.siblings('li').find('li').removeClass('open');
        element.siblings('li').find('ul').slideUp(50);
      }
    });
  });
})(jQuery);
function Marketplace(cfg) {
  this.tab = cfg.tab || '';
  this.loca = cfg.loca;
  this.constants = cfg.marketConstants;
  this.token = cfg.token;
  this.initMap = {
    'buying': this.initTabBuying.bind(this),
    'selling': this.initTabSelling.bind(this),
    'overview': this.initTabOverview.bind(this),
    'statistics': this.initTabStatistics.bind(this),
    'history_buying': this.initTabHistoryBuying.bind(this),
    'history_selling': this.initTabHistorySelling.bind(this),
    'create_offer': this.initTabCreateOffer.bind(this)
  };

  if (this.initMap[this.tab]) {
    this.initMap[this.tab](cfg);
  }
}

Marketplace.prototype.onAjaxDone = function () {
  this.loadingIndicator.hide();
};

Marketplace.prototype.onAjaxError = function () {};

Marketplace.prototype.updateToken = function (token) {
  this.token = token;
}; //
// Item tabs general
//


Marketplace.prototype.initItemsCommon = function (cfg) {
  this.itemsWrapper = $('.marketplace .items_wrapper'); //this.itemsWrapper.mCustomScrollbar({theme: 'ogame'})

  this.loadingIndicator = this.itemsWrapper.ogameLoadingIndicator();
  this.items = $('.marketplace .items');
  this.table = this.items.closest('.og-table');
};

Marketplace.prototype.refreshItems = function (htmlItems) {
  this.items.html(htmlItems);
  this.table.toggleClass('isScrollbarVisible', this.items.children().length > 5);
};

Marketplace.prototype.getSorting = function () {
  let sorting = {
    playerName: this.sortPlayerName.getOrder(),
    price: this.sortPrice.getOrder(),
    deliveryTime: this.sortDelivery.getOrder()
  };
  return sorting;
};

Marketplace.prototype.getFilters = function () {
  let filters = {};
  filters.resourceId = $('#filterResources').val();
  filters.shipId = $('#filterShips').val();
  filters.tradableItemId = $('#filterItems').val();
  filters.priceType = $('#filterPriceType').val();
  return filters;
};

Marketplace.prototype.getPagination = function () {
  let pagination = {};
  pagination.page = this.pagination.getPage();
  return pagination;
}; //
// Tab: buying
//


Marketplace.prototype.initTabBuying = function (cfg) {
  this.initItemsCommon(cfg);
  this.urlFetchBuyingItems = cfg.urlFetchBuyingItems || null;
  this.urlAccept = cfg.urlAccept;
  this.sortPlayerName = $('#sortPlayerName').ogameSortable({
    allowUnsorted: true,
    order: '',
    _token: this.token,
    onChange: this.onSortChangeBuying.bind(this)
  });
  this.sortDelivery = $('#sortDelivery').ogameSortable({
    allowUnsorted: true,
    order: '',
    align: 'center',
    _token: this.token,
    onChange: this.onSortChangeBuying.bind(this)
  });
  this.sortPrice = $('#sortPrice').ogameSortable({
    allowUnsorted: true,
    order: '',
    align: 'center',
    _token: this.token,
    onChange: this.onSortChangeBuying.bind(this)
  });
  this.pagination = $('.marketplace .pagination_wrapper').ogamePaginatable({
    page: 1,
    numPages: 1,
    _token: this.token,
    onChange: this.onPaginationChangeBuying.bind(this)
  });
  $('#showFilterResources, #showFilterShips, #showFilterItems, #filterResources, #filterShips, #filterItems, #filterPriceType').on('change', this.onFilterChangeBuying.bind(this));
  this.items.on('click', '.item a.og-button.submit', this.onClickBuyingItem.bind(this));
  this.fetchBuyingItems();
};

Marketplace.prototype.onClickPriceMin = function (e) {
  e.preventDefault();
  let price = $(e.currentTarget).data('priceMin');
  this.inputPrice.val(price);

  if (this.quantity > 0) {
    this.setPrice(parseFloat(price));
  } else {
    this.setPrice(0);
  }
};

Marketplace.prototype.onClickPriceMax = function (e) {
  e.preventDefault();
  let price = $(e.currentTarget).data('priceMax');
  this.inputPrice.val(price);

  if (this.quantity > 0) {
    this.setPrice(parseFloat(price));
  } else {
    this.setPrice(0);
  }
};

Marketplace.prototype.onClickBuyingItem = function (e) {
  e.preventDefault();
  let marketItemId = $(e.currentTarget).data('itemid');
  let itemToken = $(e.currentTarget).data('_token');
  this.submitAcceptBuying(marketItemId, itemToken);
};

Marketplace.prototype.onSortChangeBuying = function (e) {
  this.token = e.token;
  this.fetchBuyingItems();
};

Marketplace.prototype.onFilterChangeBuying = function (e) {
  this.token = e.token;
  this.fetchBuyingItems();
};

Marketplace.prototype.onPaginationChangeBuying = function (e) {
  this.token = e.token;
  this.fetchBuyingItems();
};

Marketplace.prototype.onPaginationChangeHistoryBuying = function (e) {
  this.token = e.token;
  this.fetchHistoryBuyingItems();
};

Marketplace.prototype.onPaginationChangeHistorySelling = function (e) {
  this.token = e.token;
  this.fetchHistorySellingItems();
};

Marketplace.prototype.fetchBuyingItems = function () {
  this.loadingIndicator.show();
  let data = {
    sorting: this.getSorting(),
    filters: this.getFilters(),
    pagination: this.getPagination(),
    _token: this.token
  };
  $.getJSON(this.urlFetchBuyingItems, data, this.onFetchBuyingItems.bind(this)).done(this.onAjaxDone.bind(this));
};

Marketplace.prototype.onFetchBuyingItems = function (data) {
  let htmlItems = data.content[data.target];
  this.updateToken(data.newToken);
  this.refreshItems(htmlItems);
};

Marketplace.prototype.submitAcceptBuying = function (marketItemId, itemToken) {
  let params = {
    marketItemId: marketItemId,
    _token: itemToken
  };
  this.loadingIndicator.show();
  $.post(this.urlAccept, params, this.handleSubmitAcceptBuyingResponse.bind(this)).done(this.onAjaxDone.bind(this));
};

Marketplace.prototype.handleSubmitAcceptBuyingResponse = function (response) {
  let data = JSON.parse(response);
  let status = data.status || 'failure';
  this.updateToken(data.newToken);

  if (status === 'success') {
    this.fetchBuyingItems();
    fadeBox(data.message, false);
    getAjaxEventbox();
    getAjaxResourcebox();
  } else {
    this.displayErrors(data.errors);
  }
}; //
// Tab: selling
//


Marketplace.prototype.initTabSelling = function (cfg) {
  this.initItemsCommon(cfg);
  this.urlFetchSellingItems = cfg.urlFetchSellingItems || null;
  this.urlAccept = cfg.urlAccept;
  this.sortPlayerName = $('#sortPlayerName').ogameSortable({
    allowUnsorted: true,
    order: '',
    _token: this.token,
    onChange: this.onSortChangeSelling.bind(this)
  });
  this.sortDelivery = $('#sortDelivery').ogameSortable({
    allowUnsorted: true,
    order: '',
    align: 'center',
    _token: this.token,
    onChange: this.onSortChangeSelling.bind(this)
  });
  this.sortPrice = $('#sortPrice').ogameSortable({
    allowUnsorted: true,
    order: '',
    align: 'center',
    _token: this.token,
    onChange: this.onSortChangeSelling.bind(this)
  });
  this.pagination = $('.marketplace .pagination_wrapper').ogamePaginatable({
    page: 1,
    numPages: 1,
    _token: this.token,
    onChange: this.onPaginationChangeSelling.bind(this)
  });
  $('#showFilterResources, #showFilterShips, #showFilterItems, #filterResources, #filterShips, #filterItems, #filterPriceType').on('change', this.onFilterChangeSelling.bind(this));
  this.items.on('click', '.item .og-button.submit', this.onClickSellingItem.bind(this));
  this.fetchSellingItems();
};

Marketplace.prototype.onClickSellingItem = function (e) {
  e.preventDefault();
  let marketItemId = $(e.currentTarget).data('itemid');
  let itemToken = $(e.currentTarget).data('_token');
  this.submitAcceptSelling(marketItemId, itemToken);
};

Marketplace.prototype.onSortChangeSelling = function (e) {
  this.token = e.token;
  this.fetchSellingItems();
};

Marketplace.prototype.onFilterChangeSelling = function (e) {
  this.token = e.token;
  this.fetchSellingItems();
};

Marketplace.prototype.onPaginationChangeSelling = function (e) {
  this.token = e.token;
  this.fetchSellingItems();
};

Marketplace.prototype.fetchSellingItems = function () {
  this.loadingIndicator.show();
  let data = {
    sorting: this.getSorting(),
    filters: this.getFilters(),
    pagination: this.getPagination(),
    _token: this.token
  };
  $.getJSON(this.urlFetchSellingItems, data, this.onFetchSellingItems.bind(this)).done(this.onAjaxDone.bind(this));
};

Marketplace.prototype.onFetchSellingItems = function (data) {
  let htmlItems = data.content[data.target];
  this.updateToken(data.newToken);
  this.refreshItems(htmlItems);
};

Marketplace.prototype.submitAcceptSelling = function (marketItemId, itemToken) {
  let params = {
    marketItemId: marketItemId,
    _token: itemToken
  };
  this.loadingIndicator.show();
  $.post(this.urlAccept, params, this.handleSubmitAcceptSellingResponse.bind(this)).done(this.onAjaxDone.bind(this));
};

Marketplace.prototype.handleSubmitAcceptSellingResponse = function (response) {
  let data = JSON.parse(response);
  let status = data.status || 'failure';
  this.updateToken(data.newToken);

  if (status === 'success') {
    this.fetchSellingItems();
    fadeBox(data.message, false);
    getAjaxEventbox();
    getAjaxResourcebox();
  } else {
    this.displayErrors(data.errors);
  }
}; //
// Tab: overview
//


Marketplace.prototype.initTabOverview = function (cfg) {
  this.initItemsCommon();
  this.urlFetchOverviewItems = cfg.urlFetchOverviewItems || null;
  this.items.on('click', '.og-button.delete', this.onClickDeleteItem.bind(this));
  this.sortType = $('#sortType').ogameSortable({
    allowUnsorted: true,
    order: '',
    align: 'center',
    _token: this.token,
    onChange: this.onSortChangeOverview.bind(this)
  });
  this.sortPrice = $('#sortPrice').ogameSortable({
    allowUnsorted: true,
    order: '',
    align: 'center',
    _token: this.token,
    onChange: this.onSortChangeOverview.bind(this)
  });
  this.pagination = $('.marketplace .pagination_wrapper').ogamePaginatable({
    page: 1,
    numPages: 1,
    _token: this.token,
    onChange: this.onPaginationChangeOverview.bind(this)
  });
  this.fetchOverviewItems();
};

Marketplace.prototype.getOverviewSorting = function () {
  let sorting = {
    type: this.sortType.getOrder(),
    price: this.sortPrice.getOrder()
  };
  return sorting;
};

Marketplace.prototype.onSortChangeOverview = function (e) {
  this.token = e.token;
  this.fetchOverviewItems();
};

Marketplace.prototype.onPaginationChangeOverview = function (e) {
  this.token = e.token;
  this.fetchOverviewItems();
};

Marketplace.prototype.onClickDeleteItem = function (e) {
  e.stopPropagation();
  e.preventDefault();
  this.loadingIndicator.show();
  let urlDelete = e.currentTarget.href;
  let params = {
    _token: this.token
  };
  let that = this;
  errorBoxDecision(this.loca.LOCA_ALL_NETWORK_ATTENTION, this.loca.LOCA_MARKET_CANCELLATION_NOTE, this.loca.LOCA_ALL_YES, this.loca.LOCA_ALL_NO, function () {
    $.post(urlDelete, params, that.handleSubmitDeleteResponse.bind(that)).done(that.onAjaxDone.bind(that));
  }, function () {
    that.loadingIndicator.hide();
  });
};

Marketplace.prototype.handleSubmitDeleteResponse = function (response) {
  let data = JSON.parse(response);
  let status = data.status || 'failure';
  this.updateToken(data.newToken);

  if (status === 'success') {
    this.fetchOverviewItems();
    getAjaxEventbox();
    getAjaxResourcebox();
  } else {
    this.displayErrors(data.errors);
  }
};

Marketplace.prototype.onItemDeleted = function () {
  this.onAjaxDone();
};

Marketplace.prototype.fetchOverviewItems = function () {
  this.loadingIndicator.show();
  let data = {
    sorting: this.getOverviewSorting(),
    pagination: this.getPagination(),
    _token: this.token
  };
  $.getJSON(this.urlFetchOverviewItems, data, this.onFetchOverviewItems.bind(this)).done(this.onAjaxDone.bind(this));
};

Marketplace.prototype.onFetchOverviewItems = function (data) {
  let htmlItems = data.content[data.target];
  this.updateToken(data.newToken);
  this.refreshItems(htmlItems);
}; //
// Tab: statistics
//


Marketplace.prototype.initTabStatistics = function (cfg) {
  let statisticsChartData = cfg.statisticsChartData || null;
  this.lineChart = $('#chart_container').ogameLineChart(statisticsChartData);
  $('#showRatioMetal').on('change', this.refreshLineChart.bind(this));
  $('#showRatioCrystal').on('change', this.refreshLineChart.bind(this));
  $('#showRatioDeuterium').on('change', this.refreshLineChart.bind(this));
  this.refreshLineChart();
};

Marketplace.prototype.refreshLineChart = function () {
  this.lineChart.setDataSetVisible('metal', $('#showRatioMetal').is(':checked'));
  this.lineChart.setDataSetVisible('crystal', $('#showRatioCrystal').is(':checked'));
  this.lineChart.setDataSetVisible('deuterium', $('#showRatioDeuterium').is(':checked'));
  this.lineChart.render();
}; //
// Tab: history_buying
//


Marketplace.prototype.initTabHistoryBuying = function (cfg) {
  this.initItemsCommon();
  this.urlCollectItem = cfg.urlCollectItem;
  this.urlCollectPrice = cfg.urlCollectPrice;
  this.urlFetchHistoryBuyingItems = cfg.urlFetchHistoryBuyingItems || null;
  this.sortPayment = $('#sortPayment').ogameSortable({
    allowUnsorted: true,
    order: '',
    align: 'center',
    _token: this.token,
    onChange: this.onSortChangeHistoryBuying.bind(this)
  });
  this.sortDate = $('#sortDate').ogameSortable({
    allowUnsorted: true,
    order: 'desc',
    align: 'center',
    _token: this.token,
    onChange: this.onSortChangeHistoryBuying.bind(this)
  });
  this.pagination = $('.marketplace .pagination_wrapper').ogamePaginatable({
    page: 1,
    numPages: 1,
    _token: this.token,
    onChange: this.onPaginationChangeHistoryBuying.bind(this)
  });
  this.items.on('click', '.item a.og-button.submit.collect-item', this.onClickCollectItem.bind(this));
  this.items.on('click', '.item a.og-button.submit.collect-price', this.onClickCollectPrice.bind(this));
  this.fetchHistoryBuyingItems();
};

Marketplace.prototype.onClickCollectItem = function (e) {
  e.preventDefault();
  let marketTransactionId = $(e.currentTarget).data('transactionid');
  let itemToken = $(e.currentTarget).data('_token');
  this.submitCollectItem(marketTransactionId, itemToken);
};

Marketplace.prototype.submitCollectItem = function (marketTransactionId, itemToken) {
  let params = {
    marketTransactionId: marketTransactionId,
    _token: itemToken
  };
  this.loadingIndicator.show();
  $.post(this.urlCollectItem, params, this.handleSubmitCollectItemResponse.bind(this)).done(this.onAjaxDone.bind(this));
};

Marketplace.prototype.handleSubmitCollectItemResponse = function (response) {
  let data = JSON.parse(response);
  let status = data.status || 'failure';
  let statusMessage = data.statusMessage || '';
  let marketTransactionId = data.marketTransactionId || 0;
  this.updateToken(data.newToken);

  if (status === 'success') {
    $('.row.item[data-transactionid="' + marketTransactionId + '"] .col.date').show();
    $("a[data-token]").each(function () {
      $(this).data('_token', data.newToken);
      $(this).attr("data-token", data.newToken);
    });
    $('.collect-item[data-transactionid="' + marketTransactionId + '"]').parent().hide();
    fadeBox(data.message, false);
    getAjaxResourcebox();
  } else {
    this.displayErrors(data.errors);
  }
};

Marketplace.prototype.onClickCollectPrice = function (e) {
  e.preventDefault();
  let marketTransactionId = $(e.currentTarget).data('transactionid');
  let itemToken = $(e.currentTarget).data('_token');
  this.submitCollectPrice(marketTransactionId, itemToken);
};

Marketplace.prototype.submitCollectPrice = function (marketTransactionId, itemToken) {
  let params = {
    marketTransactionId: marketTransactionId,
    _token: itemToken
  };
  this.loadingIndicator.show();
  $.post(this.urlCollectPrice, params, this.handleSubmitCollectPriceResponse.bind(this)).done(this.onAjaxDone.bind(this));
};

Marketplace.prototype.handleSubmitCollectPriceResponse = function (response) {
  let data = JSON.parse(response);
  let status = data.status || 'failure';
  let statusMessage = data.statusMessage || '';
  let marketTransactionId = data.marketTransactionId || 0;
  this.updateToken(data.newToken);

  if (status === 'success') {
    $('.row.item[data-transactionid="' + marketTransactionId + '"] .col.date').show();
    $("a[data-token]").each(function () {
      $(this).data('_token', data.newToken);
      $(this).attr("data-token", data.newToken);
    });
    $('.collect-price[data-transactionid="' + marketTransactionId + '"]').parent().hide();
    fadeBox(data.message, false);
    getAjaxResourcebox();
  } else {
    this.displayErrors(data.errors);
  }
};

Marketplace.prototype.getHistorySorting = function () {
  return {
    price: this.sortPayment.getOrder(),
    date: this.sortDate.getOrder()
  };
};

Marketplace.prototype.fetchHistoryBuyingItems = function () {
  this.loadingIndicator.show();
  let data = {
    sorting: this.getHistorySorting(),
    pagination: this.getPagination(),
    _token: this.token
  };
  $.getJSON(this.urlFetchHistoryBuyingItems, data, this.onFetchHistoryBuyingItems.bind(this)).done(this.onAjaxDone.bind(this));
};

Marketplace.prototype.onFetchHistoryBuyingItems = function (data) {
  let htmlItems = data.content[data.target];
  this.updateToken(data.newToken);
  this.refreshItems(htmlItems);
};

Marketplace.prototype.onSortChangeHistoryBuying = function (e) {
  this.token = e.token;
  this.fetchHistoryBuyingItems();
}; //
// Tab: history_selling
//


Marketplace.prototype.initTabHistorySelling = function (cfg) {
  this.initItemsCommon();
  this.urlCollectItem = cfg.urlCollectItem;
  this.urlCollectPrice = cfg.urlCollectPrice;
  this.sortPayment = $('#sortPayment').ogameSortable({
    allowUnsorted: true,
    order: '',
    align: 'center',
    _token: this.token,
    onChange: this.onSortChangeHistorySelling.bind(this)
  });
  this.sortDate = $('#sortDate').ogameSortable({
    allowUnsorted: true,
    order: 'desc',
    align: 'center',
    _token: this.token,
    onChange: this.onSortChangeHistorySelling.bind(this)
  });
  this.pagination = $('.marketplace .pagination_wrapper').ogamePaginatable({
    page: 1,
    numPages: 1,
    _token: this.token,
    onChange: this.onPaginationChangeHistorySelling.bind(this)
  });
  this.urlFetchHistorySellingItems = cfg.urlFetchHistorySellingItems || null;
  this.items.on('click', '.item a.og-button.submit.collect-item', this.onClickCollectItem.bind(this));
  this.items.on('click', '.item a.og-button.submit.collect-price', this.onClickCollectPrice.bind(this));
  this.fetchHistorySellingItems();
};

Marketplace.prototype.fetchHistorySellingItems = function () {
  this.loadingIndicator.show();
  let data = {
    sorting: this.getHistorySorting(),
    pagination: this.getPagination(),
    _token: this.token
  };
  $.getJSON(this.urlFetchHistorySellingItems, data, this.onFetchHistorySellingItems.bind(this)).done(this.onAjaxDone.bind(this));
};

Marketplace.prototype.onFetchHistorySellingItems = function (data) {
  let htmlItems = data.content[data.target];
  this.updateToken(data.newToken);
  this.refreshItems(htmlItems);
};

Marketplace.prototype.onSortChangeHistorySelling = function (e) {
  this.token = e.token;
  this.fetchHistorySellingItems();
}; //
// Tab: create_offer
//


Marketplace.prototype.initTabCreateOffer = function (cfg) {
  this.content = $('.marketplace .content');
  this.loadingIndicator = this.content.ogameLoadingIndicator();
  this.ITEM_TYPE_SHIP = cfg.itemTypes.ITEM_TYPE_SHIP;
  this.ITEM_TYPE_RESOURCE = cfg.itemTypes.ITEM_TYPE_RESOURCE;
  this.ITEM_TYPE_TRADABLE_ITEM = cfg.itemTypes.ITEM_TYPE_TRADABLE_ITEM;
  this.MARKET_ITEM_TYPE_SELL_ORDER = cfg.marketItemTypes.SELL_ORDER;
  this.MARKET_ITEM_TYPE_BUY_ORDER = cfg.marketItemTypes.BUY_ORDER;
  this.RESOURCE_TYPE_METAL = cfg.resourceTypes.RESOURCE_TYPE_METAL;
  this.RESOURCE_TYPE_CRYSTAL = cfg.resourceTypes.RESOURCE_TYPE_CRYSTAL;
  this.RESOURCE_TYPE_DEUTERIUM = cfg.resourceTypes.RESOURCE_TYPE_DEUTERIUM;
  this.urlSubmitOffer = cfg.urlSubmitOffer;
  this.marketItemTypes = cfg.marketItemTypes;
  this.formSteps = cfg.formSteps;
  this.itemTypes = cfg.itemTypes;
  this.itemOptions = cfg.itemOptions;
  this.priceTypeOptions = cfg.priceTypeOptions;
  this.currentRatio = cfg.priceValidation.currentRatio;
  this.priceRangeLower = cfg.priceValidation.priceRangeLower;
  this.priceRangeUpper = cfg.priceValidation.priceRangeUpper;
  this.defaultPriceRange = cfg.defaultPriceRange;
  this.marketFee = cfg.marketFee;
  this.itemBox = $('.marketplace #itemBox');
  this.inputMarketItemType = $('.marketplace input[name="type"]');
  this.inputItemType = $('.marketplace input[name="itemType"]');
  this.inputQuantity = $('.marketplace input[name="quantity"]');
  this.inputPrice = $('.marketplace input[name="price"]');
  this.priceLimit = $('.marketplace #priceLimit');
  this.priceLimitMin = $('.marketplace #priceLimit #priceMin');
  this.priceLimitMax = $('.marketplace #priceLimit #priceMax');
  this.priceInformation = $('#orderPriceInformation');
  this.priceToPay = $('#priceToPay');
  this.priceInTotal = $('#priceInTotal');
  this.priceRangeValue = $('#priceRangeValue');
  this.marketFeeElem = $('.marketplace #marketFee');
  this.marketFeeColElem = $('.marketplace #colMarketFee');
  this.dropDownItemId = $('.marketplace #itemId');
  this.dropDownPriceType = $('.marketplace #priceType');
  this.dropDownPriceRange = $('.marketplace #priceRange');
  this.btnSubmitOffer = $('#submitOffer');
  this.dropDownPriceType.ogameDropDown();
  this.dropDownPriceRange.ogameDropDown();
  this.btnOptSellRequest = $('#btnOptSellRequest');
  this.btnOptBuyRequest = $('#btnOptBuyRequest');
  this.btnOptSellOrder = $('#btnOptSellOrder');
  this.btnOptBuyOrder = $('#btnOptBuyOrder');
  this.btnOptShips = $('#btnOptShips');
  this.btnOptResources = $('#btnOptResources');
  this.btnOptItems = $('#btnOptItems');
  this.btnSubmitOffer.on('click', this.onClickSubmitOffer.bind(this));
  this.inputMarketItemType.on('change', this.onChangeMarketItemType.bind(this));
  this.inputItemType.on('change', this.onChangeItemType.bind(this));
  this.inputQuantity.on('blur', this.onChangeQuantity.bind(this));
  this.inputQuantity.on('focus', this.onFocusQuantity.bind(this));
  this.inputQuantity.on('keyup', this.onKeyInputQuantity.bind(this));
  this.inputPrice.on('blur', this.onChangePrice.bind(this));
  this.inputPrice.on('focus', this.onFocusPrice.bind(this));
  this.inputPrice.on('keyup', this.onKeyInputPrice.bind(this));
  this.dropDownItemId.on('change', this.onChangeItemId.bind(this));
  this.dropDownPriceType.on('change', this.onChangePriceType.bind(this));
  this.dropDownPriceRange.on('change', this.onChangePriceRange.bind(this));
  this.priceLimitMin.on('click', this.onClickPriceMin.bind(this));
  this.priceLimitMax.on('click', this.onClickPriceMax.bind(this));
  this.resetPriceType();
  this.resetMarketItemType();
  this.resetItemType();
  this.refreshAvailableItemTypes();
  this.resetPrice();
  this.resetPriceRange();
  this.refreshMarketItemTypes();
  this.refreshFormSteps();
  this.refreshItemTypes();
  this.refreshItemIdOptions();
  this.refreshItemId();
  this.refreshItemBox();
  this.refreshPriceRangeVisiblity();
  this.refreshPrice();
};

Marketplace.prototype.onClickSubmitOffer = function (e) {
  e.preventDefault();
  this.submitOffer();
};

Marketplace.prototype.refreshAvailableItemTypes = function () {
  let minQuantity = this.getMinQuantityByItemType(this.ITEM_TYPE_SHIP);
  let itemOptions = this.getItemOptionsByItemType(this.ITEM_TYPE_SHIP, minQuantity);

  if (this.MARKET_ITEM_TYPE_SELL_ORDER === this.marketItemType) {
    this.marketFeeColElem.show();

    if (itemOptions.length == 0) {
      this.btnOptShips.attr('disabled', 'disabled');
      $("label[for='btnOptShips']").addClass('disabled');
    }
  } else if (this.MARKET_ITEM_TYPE_BUY_ORDER === this.marketItemType) {
    this.marketFeeColElem.hide();
    this.btnOptShips.removeAttr('disabled');
    $("label[for='btnOptShips']").removeClass('disabled');
  }

  minQuantity = this.getMinQuantityByItemType(this.ITEM_TYPE_TRADABLE_ITEM);
  itemOptions = this.getItemOptionsByItemType(this.ITEM_TYPE_TRADABLE_ITEM, minQuantity);

  if (this.MARKET_ITEM_TYPE_SELL_ORDER === this.marketItemType) {
    this.marketFeeColElem.show();

    if (itemOptions.length == 0) {
      this.btnOptItems.attr('disabled', 'disabled');
      $("label[for='btnOptItems']").addClass('disabled');
    }
  } else if (this.MARKET_ITEM_TYPE_BUY_ORDER === this.marketItemType) {
    this.marketFeeColElem.hide();
    this.btnOptItems.removeAttr('disabled');
    $("label[for='btnOptItems']").removeClass('disabled');
  }
};

Marketplace.prototype.submitOffer = function () {
  let params = {
    marketItemType: this.marketItemType,
    itemType: this.itemType,
    itemId: this.itemId,
    quantity: this.quantity,
    priceType: this.priceType,
    price: this.price,
    _token: this.token
  };

  if (this.isOrder()) {
    params.priceRange = this.priceRange;
  }

  this.loadingIndicator.show();
  $.post(this.urlSubmitOffer, params, this.handleSubmitOfferResponse.bind(this)).done(this.onAjaxDone.bind(this));
};

Marketplace.prototype.handleSubmitOfferResponse = function (response) {
  let data = JSON.parse(response);
  let status = data.status || 'failure';
  this.updateToken(data.newToken);

  if (status === 'success') {
    window.location = data.redirectUrl;
  } else {
    this.displayErrors(data.errors);
  }
};

Marketplace.prototype.resetMarketItemType = function () {
  this.setMarketItemType(this.getFirstMarketItemType());
};

Marketplace.prototype.setMarketItemType = function (marketItemType) {
  let marketItemTypeOld = this.marketItemType;
  this.marketItemType = parseInt(marketItemType);

  if (this.marketItemType !== marketItemTypeOld) {
    if (this.marketItemType === this.MARKET_ITEM_TYPE_BUY_ORDER) {
      this.priceInformation.show();
    }

    if (this.marketItemType === this.MARKET_ITEM_TYPE_SELL_ORDER) {
      this.priceInformation.hide();
    }

    this.resetItemType();
    this.resetItemId();
    this.refreshAvailableItemTypes();
    this.refreshItemTypes();
    this.refreshItemIdOptions();
    this.refreshItemId();
    this.refreshItemBox();
    this.refreshFormSteps();
    this.refreshPriceRangeVisiblity();
  }
};

Marketplace.prototype.resetItemType = function () {
  this.setItemType(this.getFirstItemType());
};

Marketplace.prototype.setItemType = function (itemType) {
  let itemTypeOld = this.itemType;
  this.itemType = parseInt(itemType);

  if (itemTypeOld !== this.itemType) {
    this.resetItemId();
    this.resetPriceTypeOnEqualResource();
    this.refreshItemTypes();
    this.refreshItemIdOptions();
    this.refreshItemId();
    this.refreshItemBox();
  }
};

Marketplace.prototype.resetItemId = function () {
  this.setItemId(this.getFirstItemId(this.itemType));
};

Marketplace.prototype.setItemId = function (itemId) {
  // tradable items use string ids
  if (this.itemType !== this.ITEM_TYPE_TRADABLE_ITEM) {
    itemId = parseInt(itemId);
  }

  let itemIdOld = this.itemId;
  this.itemId = itemId;

  if (itemIdOld !== this.itemId) {
    this.refreshItemBox();
    this.resetQuantity();
    this.resetPriceTypeOnEqualResource();
  }
};

Marketplace.prototype.resetPriceTypeOnEqualResource = function () {
  // can not trade e.g. metal for metal
  if (this.itemType === this.ITEM_TYPE_RESOURCE && this.itemId === this.priceType) {
    switch (this.itemId) {
      case this.RESOURCE_TYPE_METAL:
        this.setPriceType(this.RESOURCE_TYPE_CRYSTAL);
        break;

      case this.RESOURCE_TYPE_CRYSTAL:
        this.setPriceType(this.RESOURCE_TYPE_DEUTERIUM);
        break;

      case this.RESOURCE_TYPE_DEUTERIUM:
        this.setPriceType(this.RESOURCE_TYPE_METAL);
        break;
    }
  }
};

Marketplace.prototype.getDefaultQuantity = function () {
  let itemOption = this.getItemOption(this.itemType, this.itemId);
  return itemOption.minQuantity;
};

Marketplace.prototype.resetQuantity = function () {
  this.setQuantity(this.getDefaultQuantity(), true);
};

Marketplace.prototype.setQuantity = function (quantity, refresh) {
  refresh = refresh || false;
  let quantityOld = this.quantity;
  let itemOption = this.getItemOption(this.itemType, this.itemId);
  let quantityMax = itemOption !== undefined ? Math.min(itemOption.quantity, itemOption.maxQuantity) : 0;
  quantityMax = Math.min(quantityMax, this.constants.MARKET_MAX_QUANTITY);

  if (this.isSelling()) {
    this.quantity = clampInt(quantity, itemOption.minQuantity, quantityMax);
  }

  if (this.isBuying()) {
    this.quantity = clampInt(quantity, itemOption.minQuantity, this.constants.MARKET_MAX_QUANTITY);
  }

  if (this.quantity !== quantityOld || this.quantity !== parseInt(quantity) || refresh === true) {
    this.resetPrice();
    this.refreshQuantity();
    this.refreshPrice();
    this.refreshPriceLimit();
  }
};

Marketplace.prototype.resetPrice = function () {
  let price = this.getPriceCalculated(this.quantity);
  this.setPrice(price);
};

Marketplace.prototype.setPrice = function (price) {
  let priceOld = this.price;
  let priceCalculated = this.getPriceCalculated(this.quantity);
  let priceMin = this.getPriceMin(this.quantity);
  let priceMax = this.getPriceMax(this.quantity);

  if (priceCalculated === undefined || priceMin === undefined || priceMax === undefined || this.quantity === 0) {
    this.price = 0;
  } else {
    this.price = clampFloat(price, priceMin, priceMax);
  }

  if (this.price !== priceOld || this.price !== price) {
    this.refreshPrice();
    this.refreshPriceValidation();
    this.refreshPriceLimit();
  }
};

Marketplace.prototype.resetPriceType = function () {
  this.setPriceType(this.getFirstResourceType());
  this.refreshPriceType();
};

Marketplace.prototype.setPriceType = function (priceType) {
  let priceTypeOld = this.priceType;
  this.priceType = parseInt(priceType);

  if (this.priceType !== priceTypeOld) {
    this.resetPrice();
    this.refreshPriceType();
  }
};

Marketplace.prototype.resetPriceRange = function () {
  this.setPriceRange(this.defaultPriceRange);
};

Marketplace.prototype.setPriceRange = function (priceRange) {
  let priceRangeOld = this.priceRange;
  this.priceRange = parseInt(priceRange);

  if (this.priceRange !== priceRangeOld) {
    this.refreshPrice();
  }
};

Marketplace.prototype.onChangeMarketItemType = function (e) {
  this.setMarketItemType($('.marketplace input[name="type"]:checked').val());
};

Marketplace.prototype.onChangeItemType = function (e) {
  this.setItemType($('.marketplace input[name="itemType"]:checked').val());
};

Marketplace.prototype.onChangeItemId = function (e) {
  this.setItemId(this.dropDownItemId.val());
};

Marketplace.prototype.onChangeQuantity = function (e) {
  this.setQuantity(this.inputQuantity.val());
};

Marketplace.prototype.onFocusQuantity = function (e) {
  this.inputQuantity.val('');
};

Marketplace.prototype.onKeyInputQuantity = function (e) {
  if (e.which == 75) {
    let val = parseInt($(e.target).val()) || 0;

    if (val == 0) {
      val = 1;
    }

    val = val + '000';
    $(e.target).val(val);
  }
};

Marketplace.prototype.onChangePrice = function (e) {
  if (this.quantity > 0) {
    this.setPrice(parseFloat(this.inputPrice.val()));
  } else {
    this.setPrice(0);
  }
};

Marketplace.prototype.onFocusPrice = function (e) {
  this.inputPrice.val('');
};

Marketplace.prototype.onKeyInputPrice = function (e) {
  if (e.which == 75) {
    let val = parseInt($(e.target).val()) || 0;

    if (val == 0) {
      val = 1;
    }

    val = val + '000';
    $(e.target).val(val);
  }
};

Marketplace.prototype.onChangePriceType = function (e) {
  this.setPriceType(this.dropDownPriceType.val());
};

Marketplace.prototype.onChangePriceRange = function (e) {
  this.setPriceRange(this.dropDownPriceRange.val());
  this.refreshPriceInformation();
};

Marketplace.prototype.refreshMarketItemTypes = function () {
  this.btnOptSellOrder.prop('checked', this.marketItemType === this.MARKET_ITEM_TYPE_SELL_ORDER);
  this.btnOptBuyOrder.prop('checked', this.marketItemType === this.MARKET_ITEM_TYPE_BUY_ORDER);
};

Marketplace.prototype.refreshFormSteps = function () {
  let formSteps = this.formSteps[this.marketItemType] || [];
  $('.marketplace .og-sub-step.sub-step-1').html(formSteps[0] || '');
  $('.marketplace .og-sub-step.sub-step-2').html(formSteps[1] || '');
  $('.marketplace .og-sub-step.sub-step-3').html(formSteps[2] || '');
};

Marketplace.prototype.refreshItemTypes = function () {
  this.btnOptShips.prop('checked', this.itemType === this.ITEM_TYPE_SHIP);
  this.btnOptResources.prop('checked', this.itemType === this.ITEM_TYPE_RESOURCE);
  this.btnOptItems.prop('checked', this.itemType === this.ITEM_TYPE_TRADABLE_ITEM);
};

Marketplace.prototype.refreshItemBox = function () {
  let itemOption = this.getItemOption(this.itemType, this.itemId);

  if (itemOption) {
    let html = '';

    if (itemOption.type === this.ITEM_TYPE_TRADABLE_ITEM) {
      html = '<img src="' + itemOption.itemImage + '"/>';
    } else {
      html = '<div class="sprite ' + itemOption.cssClass + '"></div>';
    }

    this.itemBox.find('.thumbnail').html(html);
    this.itemBox.find('.quantity').html(tsdpkt(itemOption.quantity));
  } else {
    this.itemBox.find('.thumbnail').html('');
    this.itemBox.find('.quantity').html('-');
  }
};

Marketplace.prototype.refreshItemIdOptions = function () {
  this.dropDownItemId.ogameDropDown('destroy');
  this.dropDownItemId.html('');
  let htmlOptions = '';

  if (this.ITEM_TYPE_SHIP === this.itemType && this.MARKET_ITEM_TYPE_SELL_ORDER === this.marketItemType) {
    this.itemOptions.ships.forEach(function (option) {
      if (option.quantity > 0) {
        htmlOptions += '<option value="' + option.value + '">' + option.name + '</option>';
      }
    });
  }

  if (this.ITEM_TYPE_SHIP === this.itemType && this.MARKET_ITEM_TYPE_BUY_ORDER === this.marketItemType) {
    this.itemOptions.ships.forEach(function (option) {
      htmlOptions += '<option value="' + option.value + '">' + option.name + '</option>';
    });
  }

  if (this.ITEM_TYPE_RESOURCE === this.itemType) {
    this.itemOptions.resources.forEach(function (option) {
      htmlOptions += '<option value="' + option.value + '">' + option.name + '</option>';
    });
  }

  if (this.ITEM_TYPE_TRADABLE_ITEM === this.itemType && this.MARKET_ITEM_TYPE_SELL_ORDER === this.marketItemType) {
    this.itemOptions.items.forEach(function (option) {
      if (option.quantity > 0) {
        htmlOptions += '<option value="' + option.value + '">' + option.name + '</option>';
      }
    });
  }

  if (this.ITEM_TYPE_TRADABLE_ITEM === this.itemType && this.MARKET_ITEM_TYPE_BUY_ORDER === this.marketItemType) {
    this.itemOptions.items.forEach(function (option) {
      htmlOptions += '<option value="' + option.value + '">' + option.name + '</option>';
    });
  }

  this.dropDownItemId.html(htmlOptions).ogameDropDown();
};

Marketplace.prototype.refreshItemId = function () {
  this.dropDownItemId.find('option').removeAttr('selected');

  if (this.itemId) {
    this.dropDownItemId.find('option[value="' + this.itemId + '"]').attr('selected', 'selected');
  }
};

Marketplace.prototype.refreshQuantity = function () {
  this.inputQuantity.val(this.quantity);
};

Marketplace.prototype.refreshPriceRangeVisiblity = function () {
  if (this.isOrder()) {
    $('#colPriceRange').show();
  } else {
    $('#colPriceRange').hide();
  }
};

Marketplace.prototype.refreshPrice = function () {
  this.refreshPriceRange();
  let priceTotal = parseInt(this.price);
  this.inputPrice.val(priceTotal);
  this.refreshPriceLimit();
  this.refreshMarketFee();
  this.refreshPriceInformation();
};

Marketplace.prototype.refreshPriceType = function () {
  this.dropDownPriceType.find('option').removeAttr('selected');

  if (this.priceType) {
    this.dropDownPriceType.val(this.priceType);
    this.dropDownPriceType.find('option[value="' + this.priceType + '"]').attr('selected', 'selected');
    this.dropDownPriceType.ogameDropDown('refresh');
  }
};

Marketplace.prototype.refreshPriceRange = function () {
  this.dropDownPriceRange.find('option').removeAttr('selected');

  if (this.priceRange) {
    this.dropDownPriceRange.find('option[value="' + this.priceRange + '"]').attr('selected', 'selected');
    this.dropDownPriceRange.val(this.priceRange);
    this.dropDownPriceRange.ogameDropDown('refresh');
  }
};

Marketplace.prototype.refreshPriceLimit = function () {
  let priceMin = this.getPriceMin(this.quantity);
  let priceMax = this.getPriceMax(this.quantity);

  if (priceMin === undefined || priceMax === undefined) {
    this.priceLimitMin.html('');
    this.priceLimitMax.html('');
    this.priceLimitMin.data('priceMin', 0);
    this.priceLimitMax.data('priceMax', 0);
  } else {
    this.priceLimitMin.html(tsdpkt(priceMin));
    this.priceLimitMin.data('priceMin', priceMin);
    this.priceLimitMax.html(tsdpkt(priceMax));
    this.priceLimitMax.data('priceMax', priceMax);
  }
};

Marketplace.prototype.refreshPriceValidation = function () {};

Marketplace.prototype.refreshMarketFee = function () {
  let priceTypeOption = this.getPriceTypeOption(this.priceType);

  if (this.isOrder()) {
    let priceMin = this.getPriceMin(this.quantity);
    let priceMax = this.getPriceMax(this.quantity);
    let feeMin = Math.floor(this.price * (1.0 - this.priceRange / 100) * this.marketFee);
    let feeMax = Math.floor(this.price * (1.0 + this.priceRange / 100) * this.marketFee);
    this.marketFeeElem.html(tsdpkt(feeMin) + ' - ' + tsdpkt(feeMax) + ' ' + priceTypeOption.name);
  } else {
    let fee = Math.floor(this.price * this.marketFee);
    this.marketFeeElem.html(tsdpkt(fee) + ' ' + priceTypeOption.name);
  }
};

Marketplace.prototype.refreshPriceInformation = function () {
  let priceToPayCalc = Math.floor(this.price * (1 + $("#priceRange option:selected").val() / 100));
  this.priceToPay.html(tsdpkt(priceToPayCalc));
  this.priceInTotal.html(tsdpkt(this.price));
  this.priceRangeValue.html($("#priceRange option:selected").text());
};

Marketplace.prototype.getFirstMarketItemType = function () {
  return parseInt(this.marketItemTypes[Object.keys(this.marketItemTypes)[0]]);
};

Marketplace.prototype.getFirstItemType = function () {
  let itemType = parseInt(this.itemTypes[Object.keys(this.itemTypes)[0]]);
  let minQuantity = this.getMinQuantityByItemType(itemType);
  let itemOptions = this.getItemOptionsByItemType(itemType, minQuantity);

  if (itemOptions.length == 0) {
    return this.ITEM_TYPE_RESOURCE;
  }

  return parseInt(this.itemTypes[Object.keys(this.itemTypes)[0]]);
};

Marketplace.prototype.getMinQuantityByItemType = function (itemType) {
  if ((this.ITEM_TYPE_TRADABLE_ITEM === itemType || this.ITEM_TYPE_SHIP === itemType) && this.MARKET_ITEM_TYPE_SELL_ORDER === this.marketItemType) {
    return 1;
  }

  return 0;
};

Marketplace.prototype.getItemOptionsByItemType = function (itemType, minQuantity) {
  let itemOptionsSelected = [];

  if (itemType === undefined) {
    return itemOptionsSelected;
  }

  let items;

  switch (itemType) {
    case this.ITEM_TYPE_SHIP:
      items = this.itemOptions.ships;
      break;

    case this.ITEM_TYPE_RESOURCE:
      items = this.itemOptions.resources;
      break;

    case this.ITEM_TYPE_TRADABLE_ITEM:
      items = this.itemOptions.items;
      break;
  }

  for (let i = 0; i < items.length; i++) {
    if (items[i].quantity >= minQuantity) {
      itemOptionsSelected.push(items[i]);
    }
  }

  return itemOptionsSelected;
};

Marketplace.prototype.getFirstItemId = function (itemType) {
  let minQuantity = this.getMinQuantityByItemType(itemType);
  let itemOptions = this.getItemOptionsByItemType(itemType, minQuantity);
  return itemOptions.length > 0 ? itemOptions[0].value : undefined;
};

Marketplace.prototype.getItemOption = function (itemType, itemId) {
  if (itemType === undefined) {
    return undefined;
  }

  let minQuantity = this.getMinQuantityByItemType(itemType);
  let itemOptions = this.getItemOptionsByItemType(itemType, minQuantity);
  return itemOptions.find(function (itemOption) {
    return itemOption.value === itemId;
  });
};

Marketplace.prototype.getPriceTypeOption = function (priceType) {
  return this.priceTypeOptions.find(function (priceTypeOption) {
    return priceTypeOption.value === priceType;
  });
};

Marketplace.prototype.getFirstResourceType = function () {
  return this.itemOptions.resources[0].value;
};

Marketplace.prototype.isOrder = function () {
  return this.marketItemType === this.MARKET_ITEM_TYPE_BUY_ORDER || this.marketItemType === this.MARKET_ITEM_TYPE_SELL_ORDER;
};

Marketplace.prototype.isBuying = function () {
  return this.marketItemType === this.MARKET_ITEM_TYPE_BUY_ORDER;
};

Marketplace.prototype.isSelling = function () {
  return this.marketItemType === this.MARKET_ITEM_TYPE_SELL_ORDER;
};

Marketplace.prototype.displayErrors = function (errors) {
  // only display the first error
  let error = errors[0] || undefined;

  if (error) {
    fadeBox(error.message, true);
  }
};

Marketplace.prototype.isPriceValid = function () {
  let priceCalculated = this.getPriceCalculated(this.quantity);
  let priceMin = this.getPriceMin(this.quantity);
  let priceMax = this.getPriceMax(this.quantity);

  if (priceCalculated === undefined || priceMin === undefined || priceMax === undefined) {
    return false;
  }

  return priceMin < priceCalculated && priceCalculated < priceMax;
};

Marketplace.prototype.getPriceCalculated = function (quantity) {
  let itemOption = this.getItemOption(this.itemType, this.itemId);

  if (itemOption === undefined) {
    return undefined;
  }

  return Math.floor(this.convertMCDTo(itemOption.priceCalculatedInMCD * quantity, this.priceType));
};

Marketplace.prototype.getPriceMin = function (quantity) {
  let priceCalculated = this.getPriceCalculated(quantity);

  if (priceCalculated !== undefined) {
    return this.calcMinPrice(priceCalculated);
  }

  return undefined;
};

Marketplace.prototype.getPriceMax = function (quantity) {
  let priceCalculated = this.getPriceCalculated(quantity);

  if (priceCalculated !== undefined) {
    return this.calcMaxPrice(priceCalculated);
  }

  return undefined;
};

Marketplace.prototype.convertMCDTo = function (mcd, priceType) {
  switch (priceType) {
    case this.RESOURCE_TYPE_METAL:
      return this.convertMCDToMetal(mcd);

    case this.RESOURCE_TYPE_CRYSTAL:
      return this.convertMCDToCrystal(mcd);

    case this.RESOURCE_TYPE_DEUTERIUM:
      return this.convertMCDToDeuterium(mcd);
  }

  return 0;
};

Marketplace.prototype.convertMCDToMetal = function (mcd) {
  return mcd;
};

Marketplace.prototype.convertMCDToCrystal = function (mcd) {
  return mcd * (this.currentRatio.crystal / this.currentRatio.metal);
};

Marketplace.prototype.convertMCDToDeuterium = function (mcd) {
  return mcd * (this.currentRatio.deuterium / this.currentRatio.metal);
};

Marketplace.prototype.calcMinPrice = function (priceCalculated) {
  return Math.max(Math.floor(priceCalculated * (1.0 - this.priceRangeLower)), 1);
};

Marketplace.prototype.calcMaxPrice = function (priceCalculated) {
  return Math.floor(priceCalculated * (1.0 + this.priceRangeUpper));
};

Marketplace.prototype.getMetalAvailable = function () {
  return this.getResourceAvailable(this.RESOURCE_TYPE_CRYSTAL);
};

Marketplace.prototype.getCrystalAvailable = function () {
  return this.getResourceAvailable(this.RESOURCE_TYPE_CRYSTAL);
};

Marketplace.prototype.getDeuteriumAvailable = function () {
  return this.getResourceAvailable(this.RESOURCE_TYPE_CRYSTAL);
};

Marketplace.prototype.getResourceAvailable = function (resourceType) {
  let itemOption = this.getItemOption(this.ITEM_TYPE_RESOURCE, resourceType);
  return itemOption !== undefined ? itemOption.quantity : 0;
};
function Missile(cfg) {
  this.token = cfg.token;
  this.interceptor = cfg.interceptor;
  this.maxInterceptor = cfg.maxInterceptor;
  this.interplanetary = cfg.interplanetary;
  this.maxInterplanetary = cfg.maxInterplanetary;
  this.urlMissileDestroy = cfg.urlMissileDestroy || null;
  this.initCommon(cfg);
}

Missile.prototype.onAjaxDone = function (response) {
  let data = JSON.parse(response);

  if (data.status === 'success') {
    $("#rocketsilo").parents('.overlayDiv').dialog('close');
    let technologyId = $("#technologydetails").data('technology-id');
    technologyDetails.show(technologyId);
    this.deattachCommon();
    $('.rocketlayer').remove();
  }
};

Missile.prototype.initCommon = function (cfg) {
  if ($('.rocketlayer').length > 1) {
    for (let i = 0; i < $('.rocketlayer').length - 1; i++) {
      $($('.rocketlayer')[i]).remove();
    }
  }

  this.missileInterceptor = $('#rocketsilo #destroy_' + this.interceptor);
  this.missileInterplanetary = $('#rocketsilo #destroy_' + this.interplanetary);
  this.destroyButton = $('#rocketsilo #destroyMissiles');
  this.deattachCommon();
  this.missileInterceptor.on('focus', this.onFocusInterceptor.bind(this));
  this.missileInterceptor.on('keyup', this.onKeyInputInterceptor.bind(this));
  this.missileInterplanetary.on('focus', this.onFocusInterplanetary.bind(this));
  this.missileInterplanetary.on('keyup', this.onKeyInputInterplanetary.bind(this));
  this.destroyButton.on('click', this.onClickButtonDestroy.bind(this));
};

Missile.prototype.deattachCommon = function () {
  this.missileInterceptor.off('focus');
  this.missileInterceptor.off('keyup');
  this.missileInterplanetary.off('focus');
  this.missileInterplanetary.off('keyup');
  this.destroyButton.off('click');
};

Missile.prototype.onFocusInterceptor = function (e) {
  this.missileInterceptor.val('');
};

Missile.prototype.onKeyInputInterceptor = function (e) {
  var value = $(e.target).val();

  if (typeof value !== undefined && value !== "") {
    intVal = Math.abs(getValue(value));
    intVal = Math.min(intVal, this.maxInterceptor);
    $(e.target).val(intVal);
  }
};

Missile.prototype.onFocusInterplanetary = function (e) {
  this.missileInterplanetary.val('');
};

Missile.prototype.onKeyInputInterplanetary = function (e) {
  var value = $(e.target).val();

  if (typeof value !== undefined && value !== "") {
    intVal = Math.abs(getValue(value));
    intVal = Math.min(intVal, this.maxInterplanetary);
    $(e.target).val(intVal);
  }
};

Missile.prototype.onClickButtonDestroy = function (e) {
  e.preventDefault();
  let data = {
    interceptorMissile: this.missileInterceptor.val() || 0,
    interplanetaryMissile: this.missileInterplanetary.val() || 0,
    _token: this.token
  };
  $.post(this.urlMissileDestroy, data, this.onDestroyMissiles.bind(this)).done(this.onAjaxDone.bind(this));
};

Missile.prototype.onDestroyMissiles = function (response) {
  let data = JSON.parse(response);
  this.token = data.newAjaxToken;
  token = data.newAjaxToken;

  if (data.status === 'success') {
    fadeBox(data.message, false);
  } else {
    fadeBox(data.message, true);
  }
};
$(function () {
  $('.slideIn').on('click', function () {
    loadDetails($(this).data('type'));
  });
  $('#detail').on('click', '.close_details', function () {
    $('#detail').hide();
  });
});
var textDestination = [];
textDestination[0] = "diameterField";
textDestination[1] = "diameterContentField";
textDestination[2] = "temperatureField";
textDestination[3] = "temperatureContentField";
textDestination[4] = "positionField";
textDestination[5] = "positionContentField";
textDestination[6] = "scoreField";
textDestination[7] = "scoreContentField";
textDestination[8] = "honorField";
textDestination[9] = "honorContentField";

function type() {
  if (animatedOverview) {
    var destination = document.getElementById(textDestination[currentIndex]);

    if (destination) {
      if (textContent[currentIndex].substr(currentChar, 1) == "<" && linetwo != 1) {
        while (textContent[currentIndex].substr(currentChar, 1) != ">") {
          currentChar++;
        }
      }

      if (linetwo == 1) {
        destination.innerHTML = textContent[currentIndex];
        currentChar = destination.innerHTML = textContent[currentIndex].length + 1;
      } else {
        destination.innerHTML = textContent[currentIndex].substr(0, currentChar) + "_";
        currentChar++;
      }

      if (currentChar > textContent[currentIndex].length) {
        destination.innerHTML = textContent[currentIndex];
        currentIndex++;
        currentChar = 0;

        if (currentIndex < textContent.length) {
          type();
        }
      } else {
        setTimeout("type()", 15);
      }
    }
  } else {
    for (var i = 0; i < textDestination.length; i++) {
      document.getElementById(textDestination[i]).innerHTML = textContent[i];
    }
  }
}

function initType() {
  type();
}
function OGamePaginatable(container, data) {
  this.container = container;
  this.page = data.page || 0;
  this.numPages = data.numPages || 0;
  this.size = data.size || 10;
  this.token = data.token || null;
  this.onChange = data.onChange || null;
}

OGamePaginatable.prototype.init = function () {
  let label = this.container.text();
  let html = '<ul class="og-paginatable"></ul>';
  this.element = $(html);
  this.container.html(this.element);
  $(this.element).on('click', 'li', this.handleClick.bind(this));
  this.refresh();
};

OGamePaginatable.prototype.handleClick = function (e) {
  let page = $(e.currentTarget).data('page');

  switch (page) {
    case 'page-first':
      this.page = 1;
      break;

    case 'page-left':
      this.page = clampInt(parseInt(this.page - 1), 1, this.numPages);
      break;

    case 'page-last':
      this.page = this.numPages;
      break;

    case 'page-right':
      this.page = clampInt(parseInt(this.page + 1), 1, this.numPages);
      break;

    default:
      this.page = clampInt(parseInt(page), 1, this.numPages);
      break;
  }

  this.refresh();
  this.notifyChange();
};

OGamePaginatable.prototype.update = function (data) {
  this.page = data.page || this.page;
  this.numPages = data.numPages || this.numPages;
  this.token = data.token || this.token;
  this.refresh();
};

OGamePaginatable.prototype.getPage = function () {
  return this.page;
};

OGamePaginatable.prototype.getNumPages = function () {
  return this.numPages;
};

OGamePaginatable.prototype.notifyChange = function () {
  if (this.onChange) {
    this.onChange({
      page: this.page,
      numPages: this.numPages,
      _token: this.token
    });
  }
};

OGamePaginatable.prototype.refresh = function () {
  if (this.numPages === 0) {
    this.element.html('-');
    return;
  }

  let pageStart = this.page - Math.floor(this.size / 2);
  let pageEnd = pageStart + this.size;

  if (pageStart < 1) {
    let delta = 1 - pageStart;
    pageStart += delta;
    pageEnd += delta;
  } else if (pageEnd > this.numPages) {
    let delta = this.numPages - pageEnd;
    pageStart += delta;
    pageEnd += delta;
  }

  pageStart = clampInt(pageStart, 1, this.numPages);
  pageEnd = clampInt(pageEnd, 1, this.numPages);
  let pages = [];
  pages.push('<li data-page="page-first">&lt;&lt;</li>');
  pages.push('<li data-page="page-left">&lt;</li>');

  for (let page = pageStart; page <= pageEnd; ++page) {
    let stateClass = page === this.page ? 'active' : '';
    pages.push('<li data-page="' + page + '" class="' + stateClass + '">' + page + '</li>');
  }

  pages.push('<li data-page="page-right">&gt;</li>');
  pages.push('<li data-page="page-last">&gt;&gt;</li>');
  this.element.html(pages.join(''));
};

(function ($) {
  $.fn.ogamePaginatable = function (data) {
    if (this.length > 0) {
      let that = $(this[0]);
      let localData = data || {};
      let paginatable = that.data('ogamePaginatable');

      if (paginatable == null) {
        paginatable = new OGamePaginatable(that, localData);
        $(this).data('ogamePaginatable', paginatable);
        paginatable.init();
      }

      return paginatable;
    }

    return null;
  };
})(jQuery);
function PercentageBar(elem) {
  this.elem = $(elem);
  this.elem.data('percentageBarInstance', this);
  this.elem.disableSelection();
  this.value = parseFloat(this.elem.attr('value') || 10 * 2);
  this.minValue = parseInt(this.elem.attr('minValue') || 1 / 2);
  this.steps = parseInt(this.elem.attr('steps') || 10 * 2);
  this.stepSize = parseInt(this.elem.attr('stepSize') || 10 * 2);
  this.useHalfStep = this.elem.attr('useHalfStep') === 'true' || false;
  this.barFactor = 1;
  this.valueOnEnter = null;
  this.isDragging = false;
  this.init();
  this.updateBar();
}

PercentageBar.prototype.init = function () {
  if (this.useHalfStep) {
    this.barFactor = 2;
  }

  this.initBar();
  this.initSteps();

  if (document.createTouch === undefined) {
    this.elem.on('mouseup', this.onMouseUp.bind(this));
    this.elem.on('mousemove', this.onMouseMove.bind(this));
    this.elem.on('mouseenter', this.onMouseEnter.bind(this));
    this.elem.on('mouseleave', this.onMouseLeave.bind(this));
  } else {
    this.elem.on('touchstart', this.onTouchStart.bind(this));
    this.elem.on('touchmove', this.onTouchMove.bind(this));
    this.elem.on('touchend', this.onTouchEnd.bind(this));
  }
};

PercentageBar.prototype.initSteps = function () {
  let html = '<div class="steps">';

  for (let i = 0; i < this.steps; ++i) {
    let label = (i + 1) * this.stepSize;
    html += '<div class="step' + (this.stepSize === 10 ? ' step2' : '') + '"  style="cursor: pointer" onclick="" data-step="' + (i + 1) / this.barFactor + '">' + label + '</div>';
  }

  this.elem.append(html);
};

PercentageBar.prototype.initBar = function () {
  let html = '<div class="bar"></bar>';
  this.elem.append(html);
};

PercentageBar.prototype.updateDrag = function (e) {
  let xMin = this.elem.offset().left;
  let xMax = xMin + this.elem.outerWidth();
  let xCurrent = e.pageX;
  let value = this.calcValue(xCurrent, xMin, xMax);
  this.setValue(value);
};

PercentageBar.prototype.onMouseUp = function (e) {
  if (this.valueOnEnter) {
    this.valueOnEnter = this.getValue();
    this.setValue(this.valueOnEnter);
  }

  this.updateDrag(e);
};

PercentageBar.prototype.onMouseMove = function (e) {
  this.updateDrag(e);
};

PercentageBar.prototype.onMouseEnter = function (e) {
  this.valueOnEnter = this.getValue();
};

PercentageBar.prototype.onMouseLeave = function (e) {
  if (this.valueOnEnter > 0) {
    this.setValue(this.valueOnEnter);
  }
};
/**
 * TOUCH EVENTS
 */


PercentageBar.prototype.onTouchStart = function (e) {
  this.startDrag();
};

PercentageBar.prototype.onTouchMove = function (e) {};

PercentageBar.prototype.onTouchEnd = function (e) {
  if (this.valueOnEnter) {
    this.valueOnEnter = this.getValue();
    this.setValue(this.valueOnEnter);
  }

  this.updateDragTouch(e);
  this.stopDrag();
};

PercentageBar.prototype.startDrag = function () {
  this.isDragging = true;
  this.valueOnEnter = this.getValue();
};

PercentageBar.prototype.stopDrag = function () {
  this.isDragging = false;
};

PercentageBar.prototype.updateDragTouch = function (e) {
  if (this.isDragging === true) {
    let xMin = this.elem.offset().left;
    let xMax = xMin + this.elem.outerWidth();
    let xCurrent = e.originalEvent.pageX;

    if (xCurrent === 0) {
      xCurrent = e.originalEvent.changedTouches[0].pageX;
    }

    let value = this.calcValue(xCurrent, xMin, xMax);
    this.setValue(value);
  }
};

PercentageBar.prototype.calcValue = function (xCurrent, xMin, xMax) {
  let x = clampInt(xCurrent, xMin, xMax);
  let percent = (x - xMin) / (xMax - xMin);
  let valueMin = Math.floor(percent * this.steps);
  let valueMax = Math.ceil(percent * this.steps);
  let value = Math.round((valueMax + valueMin) / 2) / this.barFactor;
  return value;
};

PercentageBar.prototype.setValue = function (valueNew) {
  let valueOld = this.value;
  this.value = clampFloat(valueNew, this.minValue, this.steps);

  if (valueOld !== valueNew) {
    this.elem.trigger($.Event('change', {
      value: this.value
    }));
  }

  this.updateBar();
};

PercentageBar.prototype.getValue = function () {
  return this.value;
};

PercentageBar.prototype.updateBar = function () {
  let xMin = this.elem.offset().left;
  let xMax = xMin + this.elem.outerWidth();
  let width = parseInt(this.value / this.steps * (xMax - xMin) * this.barFactor);
  this.elem.find('.bar').width(width);
  this.elem.find('.step').toggleClass('selected', false);
  this.elem.find('.step[data-step="' + this.value + '"]').toggleClass('selected', true);
};

function addPercentageBarPlugin() {
  (function (jQ) {
    jQ.fn.percentageBar = function (options) {
      let percentageBarInstance = new PercentageBar(this, options);
      return this;
    };
  })(jQuery);
}
$(function () {
  $(".percentSelector").each(function () {
    PercentSelector.initBar(this);
  });
});
var PercentSelector = {};
PercentSelector.fallbackMode = false; //($.browser.msie && $.browser.version < 9);
//This will init a bar (calling this directly is useful for re-doing a bar's sizes in the event it's been resized).

PercentSelector.initBar = function (bar) {
  if (!bar) return;
  var $bar = $(bar);
  var height = $bar.innerHeight();
  $bar.children(".PBcolorGrad").remove();
  $bar.children(".PBoverlay").remove();
  var opcAttr = $bar.attr("onpercentchange");

  if (opcAttr) {
    if (typeof opcAttr == "function") {
      $bar.get(0).onpercentchange = opcAttr;
    } else if (typeof opcAttr == "string") {
      if (/^function/.test(opcAttr)) {
        eval("$bar.get(0).onpercentchange = " + opcAttr);
      } else {
        eval("$bar.get(0).onpercentchange = function() {" + opcAttr + "}");
      }
    }
  }

  if (!PercentSelector.fallbackMode) {
    $bar.append($("<canvas class='PBoverlay'></canvas>").css("height", height).css("width", $bar.innerWidth()));
    $bar.append($("<div class='PBcolorGrad'></div>").css("height", height * 20).css("top", -(2 * height)));
    PercentSelector.createOverlay($bar);
  } else {
    $bar.addClass("fallback");
    $bar.append($("<div class='PBfallbackColor'></div>").css("height", height).css("width", $bar.innerWidth())); //$bar.append($("<div class='PBfallbackOverlay'></div>").css("height", height).css("width", $bar.innerWidth()).css("margin-top", -$bar.innerHeight()));
  }

  if ($bar.attr("percent") != null) {
    //ok, I know this is odd. It's because setPercent ignores the change if it's changing to the percent
    // the bar is already at. It remembers what percent it's at using the percent attribute. So trying to
    // initialize it to the percent attribute causes problems. So I just "reset" the attribute to 100% and then
    // re-initialize to the percent given.
    var percent = parseInt($bar.attr("percent"));
    $bar.attr("percent", 100);
    PercentSelector.setPercent($bar, percent, true);
  }

  if (!bar.isBound) {
    if (!($bar.attr("enabled") && $bar.attr("enabled").toLowerCase() == "false")) {
      var $bindBar = $bar;

      if (document.createTouch == undefined) {
        $bindBar.bind("mousedown", PercentSelector.handlers.mouseDown);
        $bindBar.bind("mousemove", PercentSelector.handlers.mouseMove);
        $bindBar.bind("mouseup", PercentSelector.handlers.mouseUp);
        $bindBar.bind("mouseout", PercentSelector.handlers.mouseOut);
      } else {
        $bindBar.bind("touchstart", PercentSelector.handlers.touchStart);
        $bindBar.bind("touchmove", PercentSelector.handlers.touchMove);
        $bindBar.bind("touchend", PercentSelector.handlers.touchEnd);
      }
    }

    bar.isBound = true; //to prevent multi-binding!
  }
};

PercentSelector.setPercent = function (bar, newPercent, animate) {
  var $bar = $(bar);
  var step = $bar.attr("step");
  if (!step) step = 1;else step = parseInt(step);
  newPercent = Math.round(newPercent / step) * step; //short circuit if the percent is not changing!

  if (newPercent == parseInt($bar.attr("percent"))) return;
  $bar.attr("percent", newPercent);

  if (PercentSelector.fallbackMode) {
    $bar.children(".PBfallbackColor").css("width", $bar.innerWidth() * newPercent / 100.0); //console.log("setting percent to: " + newPercent);
  } else {
    if (animate) {
      $bar.children(".PBcolorGrad").css("-webkit-transition", "-webkit-transform 0.6s ease-in");
      $bar.children(".PBcolorGrad").css("-moz-transition", "-moz-transform 0.6s ease-in");
    } else {
      $bar.children(".PBcolorGrad").css("-webkit-transition", "-webkit-transform 0.1s ease-in"); //turn off the animation in case it's on!

      $bar.children(".PBcolorGrad").css("-moz-transition", "-moz-transform 0.1s ease-in"); //turn off the animation in case it's on!
    }

    var yTrans = Math.round($bar.children(".PBcolorGrad").outerHeight() * .90 * (100 - newPercent) / 100.0);
    var xTrans = Math.round($bar.children(".PBcolorGrad").innerWidth() * ((100 - newPercent) / 100.0));

    if (animate) {
      setTimeout(function () {
        $bar.children(".PBcolorGrad").css("-webkit-transform", "translate(-" + xTrans + "px, -" + yTrans + "px)");
        $bar.children(".PBcolorGrad").css("-moz-transform", "translate(-" + xTrans + "px, -" + yTrans + "px)");
        $bar.children(".PBcolorGrad").css("-ms-transform", "translate(-" + xTrans + "px, -" + yTrans + "px)");
      }, 1);
    } else {
      $bar.children(".PBcolorGrad").css("-webkit-transform", "translate(-" + xTrans + "px, -" + yTrans + "px)");
      $bar.children(".PBcolorGrad").css("-moz-transform", "translate(-" + xTrans + "px, -" + yTrans + "px)");
      $bar.children(".PBcolorGrad").css("-ms-transform", "translate(-" + xTrans + "px, -" + yTrans + "px)");
    }
  }
};

PercentSelector.setPercentFromPageX = function (bar, page_x, animate) {
  var $bar = $(bar);
  var x = page_x - $bar.offset().left;
  var width = $bar.outerWidth();
  var percent = 100 * x / width;
  if (percent > 100) percent = 100;
  if (percent < 10) percent = 10;
  percent = Math.round(percent);
  PercentSelector.setPercent(bar, percent, animate);
};

PercentSelector.createOverlay = function (bar) {
  var $bar = $(bar);
  $overlay = $bar.children(".PBoverlay");
  var width = $overlay.innerWidth();
  var height = $overlay.innerHeight();
  var canvas = $overlay.get(0);
  canvas.width = width;
  canvas.height = height;
  var ctx = canvas.getContext("2d"); //Create the plastic overlay

  var lingrad = ctx.createLinearGradient(0, 0, 0, height);
  lingrad.addColorStop(0, 'rgba(0,0,0,0.05)');
  lingrad.addColorStop(1, 'rgba(0,0,0,0.3)');
  ctx.fillStyle = lingrad;
  ctx.fillRect(0, 0, width, height);
  ctx.clearRect(3, 3, width - 6, height - 6);
  lingrad = ctx.createLinearGradient(0, 0, 0, height);
  lingrad.addColorStop(0, 'rgba(0,0,0,0.2)');
  lingrad.addColorStop(1, 'rgba(0,0,0,0.05)');
  ctx.fillStyle = lingrad;
  ctx.fillRect(3, 3, width - 6, height - 6); //create the steps

  var step = $bar.attr("step");
  if (!step) step = 100;
  ctx.lineWidth = 1;
  var maxWidth = width / step;
  var stepWith = width / step;

  for (var curStep = 0; curStep * step < 100; curStep += 1) {
    var x = Math.floor(curStep * step * width / 100) - .5;
    ctx.beginPath();
    ctx.font = "12px serif";
    ctx.fillStyle = 'white';
    ctx.strokeStyle = 'black';
    ctx.textAlign = "center";
    ctx.textBaseline = "middle";
    ctx.fillText(((curStep + 1) * 10).toString(), x + stepWith / 2, height / 2, maxWidth); // ctx.strokeText(((curStep + 1) * 10).toString(), x + stepWith/2, height * 1, maxWidth);

    ctx.moveTo(x, height);
    ctx.lineTo(x, height * .75);
    ctx.closePath();
    ctx.stroke();
  }
};

PercentSelector.handlers = {};
/**** touch handling ****/

PercentSelector.handlers.touchDragging = false;

PercentSelector.handlers.touchStart = function (event) {
  var touches = event.originalEvent.touches;
  if (touches.length > 1) return;
  event.preventDefault();
  PercentSelector.handlers.touchDragging = false;
};

PercentSelector.handlers.touchEnd = function (event) {
  touches = event.originalEvent.touches;
  if (touches.length == 0) touches = event.originalEvent.changedTouches;
  if (touches.length > 1) return;
  var bar = touches[0].target.parentNode;
  PercentSelector.setPercentFromPageX(bar, touches[0].pageX, true);

  if (bar.onpercentchange != undefined) {
    bar.onpercentchange($(bar).attr("percent"));
  }

  event.preventDefault();
};

PercentSelector.handlers.touchMove = function (event) {
  PercentSelector.handlers.touchDragging = true;
  var touches = event.originalEvent.touches;
  if (touches.length > 1) return;
  event.preventDefault();
  PercentSelector.setPercentFromPageX(touches[0].target.parentNode, touches[0].pageX);
};
/*** mouse handling ***/


PercentSelector.handlers.mouseDragging = false;

PercentSelector.handlers.mouseDown = function (event) {
  PercentSelector.handlers.mouseDragging = true;
};

PercentSelector.handlers.mouseOut = function (event) {
  if (PercentSelector.handlers.mouseDragging) {
    var bar = PercentSelector.fallbackMode ? event.currentTarget : event.originalEvent.target.parentNode; //         if (bar.onpercentchange != undefined) {
    //             var x = eval(bar.onpercentchange);
    // console.debug(x);
    //             if (typeof x == 'function') {
    //                 x($(bar).attr("percent"));
    //             }
    //             // bar.onpercentchange($(bar).attr("percent"));
    //         }
  }

  PercentSelector.handlers.mouseDragging = false;
};

PercentSelector.handlers.mouseUp = function (event) {
  PercentSelector.handlers.mouseDragging = false;
  var bar = PercentSelector.fallbackMode ? event.currentTarget : event.originalEvent.target.parentNode;
  PercentSelector.setPercentFromPageX(bar, event.pageX, true); // if (bar.onpercentchange != undefined) {
  //     var x = eval(bar.onpercentchange);
  //
  //     if (typeof x == 'function') {
  //         x($(bar).attr("percent"));
  //     }
  //     // bar.onpercentchange($(bar).attr("percent"));
  // }
  // if(bar.onpercentchange != undefined) {
  //     bar.onpercentchange($(bar).attr("percent"));
  // }
};

PercentSelector.handlers.mouseMove = function (event) {
  if (PercentSelector.handlers.mouseDragging) {
    event.preventDefault();
    var bar = PercentSelector.fallbackMode ? event.currentTarget : event.originalEvent.target.parentNode;
    PercentSelector.setPercentFromPageX(bar, event.pageX);
  }
};
$(function () {
  jQuery('.planetlink').hover(function () {
    jQuery(this).parent().addClass('hoverPlanet');
  }, function () {
    jQuery(this).parent().removeClass('hoverPlanet');
  });
  jQuery('.moonlink').hover(function () {
    jQuery(this).parent().addClass('hoverMoon');
  }, function () {
    jQuery(this).parent().removeClass('hoverMoon');
  });
});
var buildUrl;

function sendBuildRequest(url, ev, showSlotWarning) {
  if (ev != undefined) {
    var keyCode;

    if (window.event) {
      keyCode = window.event.keyCode;
    } else if (ev) {
      keyCode = ev.which;
    } else {
      return true;
    }

    if (keyCode != 13) {
      return true;
    }
  }

  function build() {
    if (url == null) {//sendForm();
    } else {
      fastBuild();
    }
  }

  if (url == null) {//fallBackFunc = sendForm;
  } else {
    fallBackFunc = build;
    buildUrl = url;
  }

  if (planetMoveInProgress) {
    errorBoxDecision(LOCA_ALL_NETWORK_ATTENTION, LOCA_PLANETMOVE_BREAKUP_WARNING, LOCA_ALL_YES, LOCA_ALL_NO, fallBackFunc);
  } else {
    if (showSlotWarning) {
      if (lastBuildingSlot['showWarning']) {
        errorBoxDecision(LOCA_ALL_NETWORK_ATTENTION, lastBuildingSlot['slotWarning'], LOCA_ALL_YES, LOCA_ALL_NO, build);
      } else {
        build();
      }
    } else {
      build();
    }
  }

  return false;
}

function fastBuild() {
  location.href = buildUrl;
  return false;
}

function cancelResearch(id, listId, question) {
  errorBoxDecision(LOCA_ALL_NETWORK_ATTENTION, "" + question + "", LOCA_ALL_YES, LOCA_ALL_NO, function () {
    window.location.replace(urlResearchCancel + "&techid=" + id + "&listid=" + listId);
  });
}
var metalTicker = undefined;
var crystalTicker = undefined;
var deuteriumTicker = undefined;
var populationTicker = undefined;
var foodTicker = undefined;

function ResourceTicker() {
  this.timerObj = undefined;
  this.onClickActive = false;
}

ResourceTicker.Metal = 'metal';
ResourceTicker.Crystal = 'crystal';
ResourceTicker.Deuterium = 'deuterium';
ResourceTicker.Energy = 'energy';
ResourceTicker.Population = 'population';
ResourceTicker.Food = 'food';

ResourceTicker.prototype.reload = function (data) {
  this.techs = data.techs || {};
  this.resources = data.resources || {};
  changeTooltip($("#metal_box"), data.resources.metal.tooltip);
  changeTooltip($("#crystal_box"), data.resources.crystal.tooltip);
  changeTooltip($("#deuterium_box"), data.resources.deuterium.tooltip);
  changeTooltip($("#darkmatter_box"), data.resources.darkmatter.tooltip);
  changeTooltip($("#energy_box"), data.resources.energy.tooltip);

  if ($("#population_box").length) {
    changeTooltip($("#population_box"), data.resources.population.tooltip);
  }

  if ($("#food_box").length) {
    changeTooltip($("#food_box"), data.resources.food.tooltip);
  }

  this.refresh();
};

ResourceTicker.prototype.start = function () {
  if (this.timerObj === undefined) {
    this.timerObj = timerHandler.appendCallback(this.update.bind(this));
  }
};

ResourceTicker.prototype.stop = function () {
  if (this.timerObj !== undefined) {
    timerHandler.removeCallback(this.timerObj);
    delete this.timerObj;
  }
};

ResourceTicker.prototype.restart = function () {
  this.stop();
  this.start();
};

ResourceTicker.prototype.update = function () {
  let resourceProduction = {
    metal: 0,
    crystal: 0,
    deuterium: 0
  };

  if ($("#population_box").length) {
    resourceProduction.population = 0;
  }

  for (let resource in resourceProduction) {
    if (resource === 'population') {
      let extraProduction = 0;
      let foodToRemoveExtraPopulation = 0;
      let populationIncreaseBelowCap = 0;
      let populationIncreaseAboveCap = 0;
      let foodConsumptionAboveCap = 0;
      let maxPopulationToStarve = 0;
      let timeTillFoodRunsOut = 0;
      let populationChange = 0;
      let foodChange = 0;

      if (this.resources['population'].amount < Math.min(this.resources['population'].capableToFeed, this.resources['population'].storage)) {
        populationIncreaseBelowCap = Math.min(this.resources['population'].capableToFeed - this.resources['population'].amount, Math.min(this.resources['population'].storage - this.resources['population'].amount, this.resources['population'].growthRate));
        let currentFoodConsumption = this.resources['population'].amount * this.resources['population'].singleFoodConsumption;
        let extraFoodConsumption = populationIncreaseBelowCap * this.resources['population'].singleFoodConsumption;
        extraProduction = Math.max(0, Math.min(this.resources['food'].storage - this.resources['food'].amount, this.resources['food'].production - extraFoodConsumption - currentFoodConsumption));
      }

      if (this.resources['population'].amount >= Math.min(this.resources['population'].capableToFeed, this.resources['population'].storage)) {
        let populationNeedsFoodResource = Math.floor(Math.max(this.resources['population'].amount - this.resources['population'].capableToFeed, 0));
        foodToRemoveExtraPopulation = Math.min(this.resources['food'].amount, populationNeedsFoodResource * this.resources['population'].singleFoodConsumption);
        let foodLeft = Math.max(this.resources['food'].amount - foodToRemoveExtraPopulation, 0);

        if (populationNeedsFoodResource === 0) {
          let currentFoodConsumption = this.resources['population'].amount * this.resources['population'].singleFoodConsumption;
          extraProduction += Math.max(0, Math.min(this.resources['food'].storage - this.resources['population'].amount, this.resources['food'].production - currentFoodConsumption));
        } else {
          timeTillFoodRunsOut = Math.floor(foodLeft / (populationNeedsFoodResource * this.resources['population'].singleFoodConsumption));

          if (this.resources['food'].vacationMode.length > 1) {
            $('.resourceTooltip .timeTillFoodRunsOut').html(this.resources['food'].vacationMode);
          } else {
            $('.resourceTooltip .timeTillFoodRunsOut').html('~' + formatTimeWrapper(timeTillFoodRunsOut, 2, true, " ", false, ""));
          }
        }

        let starvingFactor = 0;

        if (foodLeft + extraProduction > 0) {
          populationIncreaseAboveCap = Math.min(Math.max(this.resources['population'].storage - this.resources['population'].amount - populationIncreaseBelowCap, 0), this.resources['population'].growthRate);
          populationIncreaseAboveCap = Math.min((foodLeft + extraProduction) / this.resources['population'].singleFoodConsumption, populationIncreaseAboveCap);
          foodConsumptionAboveCap = populationIncreaseAboveCap * this.resources['population'].singleFoodConsumption;
        } else {
          starvingFactor = 1;
        }

        let tooMuchPopulation = Math.max(this.resources['population'].amount + populationIncreaseBelowCap + populationIncreaseAboveCap - Math.min(this.resources['population'].storage, this.resources['population'].capableToFeed), 0);
        maxPopulationToStarve = Math.min(this.resources['population'].growthRate * starvingFactor, tooMuchPopulation);
      }

      populationChange += populationIncreaseBelowCap;
      populationChange += populationIncreaseAboveCap;
      populationChange -= maxPopulationToStarve;
      foodChange += extraProduction;
      foodChange -= foodToRemoveExtraPopulation;
      foodChange -= foodConsumptionAboveCap;
      let newAmountPopulation = this.resources['population'].amount + populationChange;

      if (this.resources['population'].amount < this.resources['population'].storage && populationChange > 0) {
        this.resources['population'].amount = Math.min(newAmountPopulation, this.resources['population'].storage);
      } else if (populationChange < 0) {
        this.resources['population'].amount = Math.max(newAmountPopulation, 0);
      } else if (this.resources['population'].amount >= this.resources['population'].storage && populationChange > 0) {
        this.resources['population'].amount = this.resources['population'].storage;
        this.resources['population'].growthRate = 0;
      }

      let newAmountFood = this.resources['food'].amount + foodChange;

      if (this.resources['food'].amount < this.resources['food'].storage && foodChange > 0) {
        this.resources['food'].amount = Math.min(newAmountFood, this.resources['food'].storage);
      } else if (foodChange <= 0) {
        this.resources['food'].amount = Math.max(newAmountFood, 0);
      } else if (newAmountFood === 0) {
        this.resources['food'].amount = 0;
      }
    } else {
      resourceProduction[resource] = this.resources[resource].production;
      let newAmount = this.resources[resource].amount + resourceProduction[resource];

      if (this.resources[resource].amount < this.resources[resource].storage && resourceProduction[resource] > 0) {
        this.resources[resource].amount = Math.min(newAmount, this.resources[resource].storage);
      } else if (resourceProduction[resource] < 0) {
        this.resources[resource].amount = Math.max(newAmount, 0);
      }
    }
  }

  this.refresh();
};

ResourceTicker.prototype.refresh = function () {
  let elements = {
    metal: $('#resources_metal'),
    crystal: $('#resources_crystal'),
    deuterium: $('#resources_deuterium'),
    darkmatter: $('#resources_darkmatter'),
    energy: $('#resources_energy'),
    population: $('#resources_population'),
    food: $('#resources_food')
  }; // metal

  elements.metal.html(gfNumberGetHumanReadable(Math.floor(this.resources.metal.amount), true));
  elements.metal.removeClass('overmark middlemark');
  storageClass = this.getStorageClass(this.resources.metal.amount, this.resources.metal.storage);

  if (storageClass) {
    elements.metal.toggleClass(storageClass, true);
  } // crystal


  elements.crystal.html(gfNumberGetHumanReadable(Math.floor(this.resources.crystal.amount), true));
  elements.crystal.removeClass('overmark middlemark');
  storageClass = this.getStorageClass(this.resources.crystal.amount, this.resources.crystal.storage);

  if (storageClass) {
    elements.crystal.toggleClass(storageClass, true);
  } // deuterium


  elements.deuterium.html(gfNumberGetHumanReadable(Math.floor(this.resources.deuterium.amount), true));
  elements.deuterium.removeClass('overmark middlemark');
  storageClass = this.getStorageClass(this.resources.deuterium.amount, this.resources.deuterium.storage);

  if (storageClass) {
    elements.deuterium.toggleClass(storageClass, true);
  } // darkmatter


  elements.darkmatter.html(gfNumberGetHumanReadable(this.resources.darkmatter.amount, true)); // energy

  elements.energy.html(gfNumberGetHumanReadable(Math.floor(this.resources.energy.amount), true));
  elements.energy.toggleClass('overmark', this.resources.energy.amount < 0); // population

  if (elements.population.length) {
    elements.population.html(gfNumberGetHumanReadable(Math.floor(this.resources.population.amount), true));
    elements.population.removeClass('overmark middlemark');
    storageClass = this.getStorageClass(this.resources.population.amount, this.resources.population.storage);

    if (storageClass) {
      elements.population.toggleClass(storageClass, true);
    }
  } // food


  if (elements.food.length) {
    elements.food.html(gfNumberGetHumanReadable(Math.floor(this.resources.food.amount), true));
    elements.food.removeClass('overmark middlemark');
    storageClass = this.getStorageClass(this.resources.food.amount, this.resources.food.storage);

    if (storageClass) {
      elements.food.toggleClass(storageClass, true);
    }
  }
};

ResourceTicker.prototype.getStorageClass = function (amount, storage) {
  if (amount >= storage) {
    return 'overmark';
  } else if (amount >= storage * 0.9) {
    return 'middlemark';
  }

  return undefined;
};

ResourceTicker.prototype.activateOnClick = function () {
  if (this.onClickActive === true) {
    return;
  }

  $("#metal_box, #crystal_box, #deuterium_box").off('click').on('click', function (event) {
    location.href = $(this).data('shopUrl');
  });
  this.onClickActive = true;
};

var resourcesBar = new ResourceTicker();

function reloadResources(data, callback) {
  if (typeof data == 'string') {
    data = $.parseJSON(data);
  }

  resourcesBar.reload(data);
  resourcesBar.activateOnClick();

  if (data.vacation === true) {
    resourcesBar.stop();
  } else {
    resourcesBar.restart();
  }

  honorScore = data.honorScore;
  darkMatter = data.resources.darkmatter.amount;

  if (typeof callback == 'function') {
    callback(data.resources);
  }
}

function getAjaxResourcebox(callback) {
    // TODO: re-enable
  /*$.get(ajaxResourceboxURI, function (data) {
    reloadResources(data, callback);
  }, "text");*/
}
window.addEventListener('load', () => {
  const formElement = document.getElementById('resourcesettingsForm');

  if (formElement === null) {
    return;
  }

  formElement.addEventListener('submit', event => {
    event.preventDefault();
    const formData = new FormData(formElement, formElement.querySelector('input[type=submit]'));
    let postData = {};

    for (const entry of formData.entries()) {
      postData[entry[0]] = entry[1];
    }

    postData['_token'] = token;
    $.post(saveResourcesettingsUrl, postData, data => {
      const result = JSON.parse(data);
      token = result.newAjaxToken ?? token;

      if (typeof result.status === "undefined" || result.status !== 'success') {
        if (typeof result.errors === "object" && result.errors.length > 0) {
          console.log(result.errors);
          fadeBox(result.errors[0].message, true);
        }

        return;
      }

      fadeBox(result.message ?? '', false);
      getAjaxResourcebox();

      if (typeof result.changes === 'undefined' || result.changes.length <= 0) {
        return;
      }

      document.querySelector('#resourcesettingscomponent .productionFactorValue').textContent = Math.floor((result.prodfactor ?? 0) * 100);

      const updateRow = (row, data) => {
        Object.entries(data).forEach(([resourceIdx, value]) => {
          const productionSpan = row.querySelector('td[data-resourceIdx="' + resourceIdx + '"] span');
          productionSpan.textContent = value.number ?? value.value ?? 0;
          changeTooltip(productionSpan, value.tooltipNumber ?? value.title ?? 0);

          if (productionSpan.classList.contains(value.class) === false) {
            productionSpan.classList.remove('undermark');
            productionSpan.classList.remove('overmark');
            productionSpan.classList.remove('normalmark');
            productionSpan.classList.add(value.class);
          }
        });
      };

      result.changes.forEach(techId => {
        if (typeof result.techlist[techId] === 'undefined') {
          return;
        }

        const techRow = document.querySelector('#resourcesettingscomponent tr[data-techid="' + techId + '"]');

        if (techRow === null) {
          return;
        }

        updateRow(techRow, result.techlist[techId].techProduction);
      });
      updateRow(document.querySelector('#resourcesettingscomponent .summaryHourly'), result.hourly);
      updateRow(document.querySelector('#resourcesettingscomponent .summaryDaily'), result.daily);
      updateRow(document.querySelector('#resourcesettingscomponent .summaryWeekly'), result.weekly); // handle ipi menu content update

      if (typeof result.ipiMenuData === 'object') {
        IPI.updateMenuContent(result.ipiMenuData);
      }
    });
    return false;
  });
});
ogame.retrieveEmail = {
  send: function () {
    $.ajax({
      type: "POST",
      url: window.location.href + '&' + $.param({
        action: 'get'
      }),
      data: {
        username: $('#username').val(),
        password: $('#password').val()
      },
      dataType: "json",
      success: function (data) {
        $('#response').html(data.response).removeClass().addClass(data.type);
      }
    });
  }
};
$(document).ready(function () {
  $('#retrieveEmailComponent #username').off().keypress(function (event) {
    if (event.which == 13) {
      event.preventDefault();
      $('#retrieveEmailComponent #password').focus();
    }
  });
  $('#retrieveEmailComponent #password').off().keypress(function (event) {
    if (event.which == 13) {
      event.preventDefault();
      ogame.retrieveEmail.send();
    }
  });
  $('#retrieve').off().on('click', function () {
    ogame.retrieveEmail.send();
  });
});
function Rewarding(cfg) {
  this.tab = cfg.tab || '';
  this.token = cfg.token;
  this.tiers = cfg.tiers;
  this.currentTier = cfg.currentTier;
  this.urlFetchTasks = cfg.urlFetchTasks || null;
  this.urlFetchRewards = cfg.urlFetchRewards || null;
  this.selectedTier = cfg.selectedTier || 1;
  this.initMap = {
    'tasks': this.initTabTasks.bind(this),
    'rewards': this.initTabRewards.bind(this)
  };

  if (this.initMap[this.tab]) {
    this.initMap[this.tab](cfg);
  }
}

Rewarding.prototype.onAjaxTasksDone = function () {
  this.loadingIndicator.hide();
};

Rewarding.prototype.onAjaxSelectDone = function () {
  this.loadingIndicator.hide();
};

Rewarding.prototype.onAjaxRewardsDone = function () {
  this.loadingIndicator.hide();
  let that = this;
  that.urlSubmitReward = urlSubmitReward;
  $('#rewardings .normalRewards .singleReward').each(function () {
    this.urlSubmitReward = that.urlSubmitReward;
    this.token = that.token;
    $(this).bind('click', that.onClickButtonSelectReward.bind(that));
    $(this).hover(function () {
      $(this).find(".select-button").css('background-position', '0 -214px');
    }, function () {
      $(this).find(".select-button").css('background-position', '0 -188px');
    });
  });
};

Rewarding.prototype.displayErrors = function (errors) {
  // only display the first error
  let error = errors[0] || undefined;

  if (error) {
    fadeBox(error.message, true);
  }
};

Rewarding.prototype.onAjaxError = function () {}; // general


Rewarding.prototype.initCommon = function (cfg) {
  this.taskWrapper = $('#rewardings .rewardlist_wrapper');
  this.loadingIndicator = this.taskWrapper.ogameLoadingIndicator();
  this.taskContent = $('#rewardings .rewardContent');
  this.titlebar = $('#rewardings .titlebar');
  this.tierButton = $('#rewardings #tothetier');
};

Rewarding.prototype.refreshContent = function (htmlItems) {
  this.taskContent.html(htmlItems);
}; //tab tasks


Rewarding.prototype.initTabTasks = function (cfg) {
  this.initCommon(cfg);
  this.titlebar.on('click', '#buttonTasks', this.onClickButtonTasks.bind(this));

  for (var key in this.tiers) {
    if (this.tiers.hasOwnProperty(key)) {
      this.titlebar.on('click', 'div[data-tier="' + key + '"]', this.onClickButtonRewards.bind(this));
    }
  }

  this.tierButton.on('click', '.tier-button', this.onClickButtonCurrentTier.bind(this));
  this.fetchTasks();
};

Rewarding.prototype.onClickButtonTasks = function (e) {
  e.preventDefault();

  if (!e.currentTarget.hasAttribute("disabled")) {
    this.fetchTasks();
    $('#rewardings .titlebar #buttonTasks').attr('disabled', 'disabled');

    for (var key in this.tiers) {
      if (this.tiers.hasOwnProperty(key)) {
        $('#rewardings .titlebar div[data-tier="' + key + '"]').removeAttr('disabled');
      }
    }
  }
};

Rewarding.prototype.onClickButtonRewards = function (e) {
  e.preventDefault();
  let targetTier = $(e.currentTarget).data('tier');

  if (!e.currentTarget.hasAttribute("disabled")) {
    this.fetchRewards(targetTier);
  }
};

Rewarding.prototype.onClickButtonCurrentTier = function (e) {
  e.preventDefault();
  let targetTier = this.currentTier;
  this.fetchRewards(targetTier);
};

Rewarding.prototype.onClickButtonSelectReward = function (e) {
  e.preventDefault();

  if (!e.currentTarget.hasAttribute("disabled")) {
    this.submitReward($(e.currentTarget).data('id'));
  }
};

Rewarding.prototype.fetchTasks = function (targetTab) {
  this.loadingIndicator.show();
  let data = {
    _token: this.token
  };
  $.getJSON(this.urlFetchTasks, data, this.onFetchTasks.bind(this)).done(this.onAjaxTasksDone.bind(this));
};

Rewarding.prototype.onFetchTasks = function (data) {
  let htmlItems = data.content[data.target];
  this.token = data.newAjaxToken;
  this.refreshContent(htmlItems);
}; //tabs rewards


Rewarding.prototype.initTabRewards = function (cfg) {
  this.initCommon(cfg);
  this.titlebar.on('click', '#buttonTasks', this.onClickButtonTasks.bind(this));

  for (let key in this.tiers) {
    if (this.tiers.hasOwnProperty(key)) {
      this.titlebar.on('click', 'div[data-tier="' + key + '"]', this.onClickButtonRewards.bind(this));
    }
  }

  this.tierButton.on('click', '.tier-button', this.onClickButtonCurrentTier.bind(this));
  this.fetchRewards(this.selectedTier);
};

Rewarding.prototype.fetchRewards = function (targetTier) {
  this.loadingIndicator.show();
  let data = {
    tier: targetTier,
    _token: this.token
  };
  this.selectedTier = targetTier;
  $.getJSON(this.urlFetchRewards, data, this.onFetchRewards.bind(this)).done(this.onAjaxRewardsDone.bind(this));

  for (var key in this.tiers) {
    if (this.tiers.hasOwnProperty(key)) {
      $('#rewardings .titlebar div[data-tier="' + key + '"]').removeAttr('disabled');
    }
  }

  $('#rewardings .titlebar #buttonTasks').removeAttr('disabled');
  $('#rewardings .titlebar div[data-tier="' + targetTier + '"]').attr('disabled', 'disabled');
};

Rewarding.prototype.onFetchRewards = function (data) {
  let htmlItems = data.content[data.target];
  this.token = data.newAjaxToken;
  this.refreshContent(htmlItems);
};

Rewarding.prototype.submitReward = function (selectedReward) {
  this.loadingIndicator.show();
  let params = {
    selectedReward: selectedReward,
    selectedTier: this.selectedTier,
    _token: this.token
  };
  $.post(this.urlSubmitReward, params, this.handleSubmitRewardResponse.bind(this)).done(this.onAjaxSelectDone.bind(this));
};

Rewarding.prototype.handleSubmitRewardResponse = function (response) {
  let data = JSON.parse(response);
  let status = data.status || 'failure';
  this.token = data.newAjaxToken;

  if (status === 'success') {
    let selectOne = $('#rewardings #select_one');
    selectOne.removeClass('overmark');
    selectOne.addClass('undermark');
    selectOne.html(data.rewardSelected);
    let titleBarButton = $('#rewardings .titlebar .btn_blue[data-tier="' + data.selectedTier + '"]');
    titleBarButton.addClass('undermark');
    $('#rewardings .normalRewards .singleReward').each(function () {
      $(this).attr('disabled', 'disabled');

      if ($(this).data('id') !== data.selectedReward) {
        $('#rewardings .normalRewards #itemBox' + $(this).data('id') + ' .thumbnail').data('status', 'off').attr('data-status', 'off');
      }
    });
    $('#rewardings .normalRewards .select-button').each(function () {
      $(this).remove();
    });

    if (data.allOfficers === false) {
      $('#rewardings .additionalRewards .singleReward').each(function () {
        $('#rewardings .additionalRewards #itemBox' + $(this).data('id') + ' .thumbnail').data('status', 'off').attr('data-status', 'off');
      });
    }

    fadeBox(data.message, false);
  } else {
    this.displayErrors(data.errors);
  }
};
function OGameSortable(container, data) {
  this.container = container;
  this.state = (data.state || 'active') === 'active' ? 'active' : 'inactive';
  this.order = data.order || '';
  this.align = data.align || '';
  this.allowUnsorted = data.allowUnsorted || false;
  this.token = data.token || null;
  this.onChange = data.onChange || null;
}

OGameSortable.prototype.init = function () {
  let label = this.container.text();
  let html = '<div class="og-sortable"><h3>' + label + '</h3><div class="icon"></div></div>';
  this.element = $(html);
  this.container.html(this.element);
  this.icon = this.element.find('.icon');
  $(this.element).on('click', this.handleClick.bind(this));
  this.refresh();
};

OGameSortable.prototype.handleClick = function () {
  if (this.state === 'active') {
    if (this.order === 'asc') {
      this.order = 'desc';
    } else if (this.order === 'desc' && this.allowUnsorted === false) {
      this.order = 'asc';
    } else if (this.order === 'desc' && this.allowUnsorted === true) {
      this.order = '';
    } else if (this.order === '') {
      this.order = 'asc';
    }

    this.refresh();
    this.notifyChange();
  }
};

OGameSortable.prototype.notifyChange = function () {
  if (this.onChange) {
    this.onChange({
      order: this.order,
      state: this.state,
      _token: this.token
    });
  }
};

OGameSortable.prototype.activate = function () {
  this.state = 'active';
  this.refresh();
  this.notifyChange();
};

OGameSortable.prototype.deactivate = function () {
  this.state = 'inactive';
  this.refresh();
  this.notifyChange();
};

OGameSortable.prototype.isValidOrder = function (order) {
  if (this.allowUnsorted === true) {
    return ['', 'asc', 'desc'].indexOf(order) !== -1;
  } else {
    return ['asc', 'desc'].indexOf(order) !== -1;
  }
};

OGameSortable.prototype.setOrder = function (order) {
  if (this.isValidOrder(order)) {
    this.order = order;
    this.refresh();
    this.notifyChange();
  }
};

OGameSortable.prototype.getOrder = function () {
  return this.order;
};

OGameSortable.prototype.refresh = function () {
  this.refreshAlign();
  this.refreshState();
  this.refreshOrder();
};

OGameSortable.prototype.refreshAlign = function () {
  this.element.toggleClass('left', this.align === 'left');
  this.element.toggleClass('center', this.align === 'center');
  this.element.toggleClass('right', this.align === 'right');
};

OGameSortable.prototype.refreshState = function () {
  this.element.toggleClass('active', this.state === 'active');
  this.element.toggleClass('inactive', this.state === 'inactive');
};

OGameSortable.prototype.refreshOrder = function () {
  this.element.toggleClass('asc', this.order === 'asc');
  this.element.toggleClass('desc', this.order === 'desc');
};

OGameSortable.prototype.update = function (data) {
  this.token = data.token || this.token;
};

(function ($) {
  $.fn.ogameSortable = function (data) {
    if (this.length > 0) {
      let that = $(this[0]);
      let localData = data || {};
      let sortable = that.data('ogameSortable');

      if (sortable == null) {
        sortable = new OGameSortable(that, localData);
        $(this).data('ogameSortable', sortable);
        sortable.init();
      }

      return sortable;
    }

    return null;
  };
})(jQuery);
function initStandardFleet() {
  $(".list tr:even").addClass("alt");
  $(".standardFleetSubmit").unbind('click').bind('click', function () {
    $(this).parents('form').submit();
  });
  $(".standardFleetReset").unbind('click').bind('click', function () {
    $(this).parents('form')[0].reset();
  });
  $('.changeFleet').unbind('click').bind('click', function () {
    $('.combatunits').val($(this).attr('rel')).trigger('change');
    $(this).parents('.ui-dialog').find('.ui-dialog-titlebar-close').click();
  });
}

function setShipsFleet(ships, tempName, techId) {
  $("#template_id").val(techId);
  $("#template_name").val(tempName);

  for (var techID in ships) {
    $("#ship" + techID).val(ships[techID]);
  }
}
$(function () {
  $('.techdetail').on('click', function () {
    loadDetails($(this).data('techid'));
  });
  $('#detail').on('click', '.close_details', function () {
    $('#detail').hide();
  });
});
$(function () {
  var sheet = function () {
    var style = document.createElement("style"); // WebKit hack

    style.appendChild(document.createTextNode(""));
    document.head.appendChild(style);
    return style.sheet;
  }();

  $(document).on("click", ".technology .icon button.upgrade", function (event) {
    event.preventDefault();
    event.stopPropagation();
    let isSpaceProvider = $(this).data("is-spaceprovider") == 1;
    let technologyId = $(this).data("technology");
    let showLifeformBonusCapReached = $(this).data("lifeform-bonus-cap-reached") > 0;

    if (planetMoveInProgress) {
      return errorBoxDecision(LocalizationStrings.attention, LocalizationStrings.planetMoveBreakUpWarning, LocalizationStrings.yes, LocalizationStrings.no, function () {
        buildListActionBuild(technologyId);
      });
    }

    if (lastBuildingSlot.showWarning && !isSpaceProvider) {
      return errorBoxDecision(LocalizationStrings.notice, lastBuildingSlot.slotWarning, LocalizationStrings.yes, LocalizationStrings.no, function () {
        buildListActionBuild(technologyId);
      });
    }

    if (showLifeformBonusCapReached) {
      return errorBoxDecision(LocalizationStrings.attention, loca.LOCA_LIFEFORM_BONUS_CAP_REACHED_WARNING, LocalizationStrings.yes, LocalizationStrings.no, function () {
        buildListActionBuild(technologyId);
      });
    }

    buildListActionBuild(technologyId);
  });
  $(document).on("click", ".technology .icon button.buildmulti", function (event) {
    event.preventDefault();
    event.stopPropagation();
    let isSpaceProvider = $(this).data("is-spaceprovider") == 1;
    let technologyId = $(this).data("technology");
    let showLifeformBonusCapReached = $(this).data("lifeform-bonus-cap-reached") > 0;

    if (planetMoveInProgress) {
      return errorBoxDecision(LocalizationStrings.attention, LocalizationStrings.planetMoveBreakUpWarning, LocalizationStrings.yes, LocalizationStrings.no, function () {
        buildListActionBuild(technologyId, 1, 4);
      });
    }

    if (lastBuildingSlot.showWarning && !isSpaceProvider) {
      return errorBoxDecision(LocalizationStrings.notice, lastBuildingSlot.slotWarning, LocalizationStrings.yes, LocalizationStrings.no, function () {
        buildListActionBuild(technologyId, 1, 4);
      });
    }

    if (showLifeformBonusCapReached) {
      return errorBoxDecision(LocalizationStrings.attention, loca.LOCA_LIFEFORM_BONUS_CAP_REACHED_WARNING, LocalizationStrings.yes, LocalizationStrings.no, function () {
        buildListActionBuild(technologyId, 1, 4);
      });
    }

    buildListActionBuild(technologyId, 1, 4);
  }); // var active = $('.technology[data-status="active"]');
  // if (active.length > 0) {
  //     setInterval(function() {
  //         active.each(function() {
  //             var $this = $(this);
  //             $this.attr("data-progress",
  //                 Math.round(
  //                     (1 - (
  //                         ($this.data("end") - Math.floor((Date.now() + window.timeDiff + window.timeZoneDiffSeconds * 1000) / 1000))
  //                         / ($this.data("end") - $this.data("start"))
  //                     )) * 100
  //                 )
  //             );
  //
  //             let targetAmount = $('.targetamount').attr('data-value');
  //             let amountHolder = $this.find('.amount');
  //             amountHolder.text(parseInt(targetAmount) - parseInt($('#shipSumCount7').text()));
  //         });
  //     }, 1000);
  // }
});
function TechnologyDetails(params) {
  this.setParams(params);
}

TechnologyDetails.prototype.init = function () {
  $(document).on('click', '.technology.hasDetails:not(.showsDetails) .icon', this.onClickShow.bind(this));
  $(document).on('click', '#technologydetails .close, .showsDetails', this.onClickHide.bind(this));
  $(document).on('change', '#technologydetails .build_amount', this.onChangeAmount.bind(this));
  $(document).on('keypress', '#technologydetails .build_amount', this.onKeyPressAmount.bind(this));
  $(document).on('click', '#technologydetails button.upgrade', this.onClickUpgrade.bind(this));
  $(document).on('click', '#technologydetails a.upgrade', this.onClickUpgradeStorage.bind(this));
  $(document).on('click', '#technologydetails a.build-it_premium', this.onClickBuyCommander.bind(this));
  $(document).on('click', '#technologydetails button.downgrade', this.onClickDowngrade.bind(this));
  $(document).on('click', '#technologydetails button.maximum', this.onClickMaximum.bind(this));
  $(document).on('click', '#technologydetails .button.select_class', this.onClickSelectClass.bind(this));
  $(document).on('click', '#technologydetails .button.deselect_class', this.onClickDeselectClass.bind(this));
  $(document).on('click', '#technologydetails button[data-target]:not(#technologydetails button[data-target*="overlay=1"], #technologydetails button.overlay)', function () {});
};

TechnologyDetails.prototype.setParams = function (params) {
  this.loca = params.loca;
  this.technologyDetailsEndpoint = params.technologyDetailsEndpoint;
  this.selectCharacterClassEndpoint = params.selectCharacterClassEndpoint;
  this.deselectCharacterClassEndpoint = params.deselectCharacterClassEndpoint;
};

TechnologyDetails.prototype.onChangeAmount = function (e) {
  let $input = $(e.currentTarget);
  let minVal = parseInt($input.attr('min'));
  let maxVal = parseInt($input.attr('max'));
  let val = parseInt(getValue($input.val())) || 0;

  if (typeof minVal !== 'undefined') {
    val = Math.max(val, minVal);
  }

  if (typeof maxVal !== 'undefined') {
    val = Math.min(val, maxVal);
  }

  $input.val(val);
};

TechnologyDetails.prototype.onKeyPressAmount = function (e) {
  if (getKeyCode(e) == 13) {
    $('#technologydetails button.upgrade').click();
  }
};

TechnologyDetails.prototype.onClickUpgrade = function (e) {
  let technologyId = $(e.currentTarget).data('technology');
  let amount = $('#build_amount').val() || 1;

  if (planetMoveInProgress) {
    return errorBoxDecision(LocalizationStrings.attention, LocalizationStrings.planetMoveBreakUpWarning, LocalizationStrings.yes, LocalizationStrings.no, function () {
      buildListActionBuild(technologyId, amount);
    });
  }

  if (lastBuildingSlot.showWarning == true) {
    return errorBoxDecision(LocalizationStrings.notice, lastBuildingSlot.slotWarning, LocalizationStrings.yes, LocalizationStrings.no, function () {
      buildListActionBuild(technologyId, amount);
    });
  }

  if (showLifeformBonusCapReached) {
    return errorBoxDecision(LocalizationStrings.attention, this.loca.LOCA_LIFEFORM_BONUS_CAP_REACHED_WARNING, LocalizationStrings.yes, LocalizationStrings.no, function () {
      buildListActionBuild(technologyId, amount);
    });
  }

  buildListActionBuild(technologyId, amount);
};

TechnologyDetails.prototype.onClickUpgradeStorage = function (e) {
  let technologyUrl = $(e.currentTarget).data('url');
  let technologyQuestion1 = $(e.currentTarget).data('title');
  let technologyQuestion2 = $(e.currentTarget).data('question');
  errorBoxDecision(this.loca.LOCA_ALL_NETWORK_ATTENTION, technologyQuestion1 + ' - ' + technologyQuestion2, this.loca.LOCA_ALL_YES, this.loca.LOCA_ALL_NO, function () {
    document.location.replace(technologyUrl);
  });
};

TechnologyDetails.prototype.onClickBuyCommander = function (e) {
  let technologyId = $(e.currentTarget).data('technology');
  let technologyUrl = $(e.currentTarget).data('url');
  let technologyQuestion = $(e.currentTarget).data('question');
  let buyResourceOverlayHref = $(e.currentTarget).attr("href");
  let amount = $('#build_amount').val();

  if (technologyUrl && technologyQuestion) {
    errorBoxDecision(this.loca.LOCA_ALL_NOTICE, technologyQuestion, this.loca.LOCA_ALL_YES, this.loca.LOCA_ALL_NO, function () {
      document.location.replace(technologyUrl);
    });
  } else if (buyResourceOverlayHref) {
    $(e.currentTarget).attr("href", buyResourceOverlayHref + "&amount=" + amount + "&techID=" + technologyId);
  }
};

TechnologyDetails.prototype.handleDowngrade = function (technologyId, technologyName) {
  errorBoxDecision(this.loca.LOCA_ALL_NETWORK_ATTENTION, this.loca.locaDemolishStructureQuestion.replace('TECHNOLOGY_NAME', technologyName) + '<br><br>' + $('#demolition_costs_tooltip').html(), this.loca.LOCA_ALL_YES, this.loca.LOCA_ALL_NO, function () {
    buildListActionDemolish(technologyId);
  });
};

TechnologyDetails.prototype.onClickDowngrade = function (e) {
  let technologyId = $(e.currentTarget).data('technology');
  let technologyName = $(e.currentTarget).data('name');

  if (planetMoveInProgress) {
    errorBoxDecision(LocalizationStrings.attention, LocalizationStrings.planetMoveBreakUpWarning, LocalizationStrings.yes, LocalizationStrings.no, this.handleDowngrade.bind(this, technologyId, technologyName));
  } else {
    this.handleDowngrade(technologyId, technologyName);
  }
};

TechnologyDetails.prototype.onClickMaximum = function (e) {
  this.setMaximumBuildableAmount();
};

TechnologyDetails.prototype.onClickSelectClass = function (e) {
  e.preventDefault();
  let characterClassId = $(e.currentTarget).data('characterclassid');
  this.selectClass(characterClassId);
};

TechnologyDetails.prototype.onClickDeselectClass = function (e) {
  e.preventDefault();
  let characterClassId = $(e.currentTarget).data('characterclassid');
  this.deselectClass(characterClassId);
};

TechnologyDetails.prototype.onClickShow = function (e) {
  this.show($(e.currentTarget).closest('.hasDetails').data('technology'));
};

TechnologyDetails.prototype.onClickHide = function (e) {
  this.hide($(e.currentTarget));
};

TechnologyDetails.prototype.selectClass = function (characterClassId) {
  let that = this;
  let selectCharacterClassEndpoint = this.selectCharacterClassEndpoint.replace('CHARACTERCLASSID', characterClassId);
  $.post(selectCharacterClassEndpoint).done(function (data) {
    var json = $.parseJSON(data);

    if (json.status === 'success') {
      that.show(37); //        document.location.replace(json.redirectUrl)
    } else {
      that.displayErrors(json);
    }
  });
};

TechnologyDetails.prototype.deselectClass = function (characterClassId) {
  let that = this;
  let deselectCharacterClassEndpoint = this.deselectCharacterClassEndpoint.replace('CHARACTERCLASSID', characterClassId);
  $.post(deselectCharacterClassEndpoint).done(function (data) {
    var json = $.parseJSON(data);

    if (json.status === 'success') {
      that.show(37); //document.location.replace(json.redirectUrl)
    } else {
      that.displayErrors(json);
    }
  });
};

TechnologyDetails.prototype.displayErrors = function (data) {
  let errorCode = data.errorCode || 0;
  let errorMessage = data.errorMessage || '';
  fadeBox(errorMessage, true);
};

TechnologyDetails.prototype.show = function (technologyId) {
  let that = this;
  let element = $('.technology.hasDetails[data-technology=' + technologyId + ']');
  let elemTechnologyDetailsWrapper = $('#technologydetails_wrapper');
  let elemTechnologyDetailsContent = $('#technologydetails_content');
  let elemTechnologyDetails = $('#technologydetails');
  let locationIndicator = elemTechnologyDetailsContent.ogameLoadingIndicator();
  locationIndicator.show();
  $.ajax({
    url: this.technologyDetailsEndpoint,
    data: {
      technology: technologyId
    }
  }).done(function (json) {
    if (json.status === 'failure') {
      that.displayErrors(json.errors);
      locationIndicator.hide();
    } else {
      elemTechnologyDetailsWrapper.toggleClass('slide-up', true);
      elemTechnologyDetailsWrapper.toggleClass('slide-down', false);
      $('.showsDetails').removeClass('showsDetails');
      element.closest('.hasDetails').addClass('showsDetails');
      locationIndicator.hide();
      let anchor = $('header[data-anchor=technologyDetails]');

      if (elemTechnologyDetails.length > 0) {
        removeTooltip(elemTechnologyDetails.find(getTooltipSelector()));
        elemTechnologyDetails.replaceWith(json.content[json.target]);
        elemTechnologyDetails.addClass(anchor.data('technologydetails-size')).offset(anchor.offset());
      } else {
        elemTechnologyDetailsContent.append(json.content[json.target]);
        elemTechnologyDetails.addClass(anchor.data('technologydetails-size')).offset(anchor.offset());
      } //techID is magically defined by setting data in the .html; not always so we check it
      // and set it to harmless 0 as default. This is used for the repair dock.


      $(document).trigger("ajaxShowElement", typeof technologyId === 'undefined' ? 0 : technologyId);
    }
  });
};

TechnologyDetails.prototype.hide = function () {
  let elemTechnologyDetails = $('#technologydetails');
  removeTooltip(elemTechnologyDetails.find(getTooltipSelector()));
  $('#technologydetails_wrapper').removeClass('slide-up');
  this.startSlideDown();
  $('.showsDetails').removeClass('showsDetails');
};

TechnologyDetails.prototype.startSlideDown = function () {
  $('#technologydetails_wrapper').toggleClass('slide-down', true);
  this.timerSlideDownEnd = setTimeout(function () {
    this.stopSlideDown();
  }.bind(this), 500);
};

TechnologyDetails.prototype.stopSlideDown = function () {
  $('#technologydetails_wrapper').removeClass('slide-down');
  clearTimeout(this.timerSlideDownEnd);
  this.timerSlideDownEnd = null;
};

TechnologyDetails.prototype.setMaximumBuildableAmount = function () {
  var $buildAmount = $('#technologydetails #build_amount');
  $buildAmount.val($buildAmount.attr('max'));
};
